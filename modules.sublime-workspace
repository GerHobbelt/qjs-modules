{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  keyOf = (obj, value) =>\n  applyPath = (path, obj) =>\n(acc, part) =>\n  checkNode(node)\nParser\n  parseFromString(str, file, ...rest)\nGetNode(obj, owner)\nNode\n  constructor(obj, parent, proto = Node.prototype)\n  get path()\n  get parentNode()\n  get parentElement()\n  get ownerDocument()\n  get childNodes()\n  get firstChild()\n  get lastChild()\n  get nextSibling()\n  get previousSibling()\n  appendChild(node)\n  () =>\n  value =>\n  insertBefore(node, refNode)\n  removeChild(node)\n  replaceChild(newChild, oldChild)\n  querySelector(str)\n  querySelectorAll(str)\n  path =>\nNode\n  raw(node)\n  children(node)\n  owner(node)\n  parent(node)\n  hier(node, pred = node => true)\n({ nodeType }) =>\n  path(arg, path = [])\nNode\nMakeCache(ctor, store = \n())\n  (k, ...args) =>\nMakeCache2(ctor, store = \n())\n  key =>\n  (id, owner) =>\nNodeList\n  constructor(obj, owner)\n  isElement = prop =>\n  isList = prop =>\n  wrapElement = (value, prop) =>\n  get: (target, prop, receiver) =>\n  getOwnPropertyDescriptor: (target, prop) =>\n  ownKeys: target =>\n  prop =>\nNodeList\n  get path()\nNamedNodeMap(obj, owner)\n  isAttr = prop =>\n  wrapAttr = (value, prop) =>\n  get: (target, prop, receiver) =>\n  ownKeys: target =>\nNamedNodeMap\nNamedNodeMap\n  get path()\n  item(key)\n  setNamedItem(attr)\n  removeNamedItem(name)\n  getNamedItem(name)\n(acc, prop) =>\nElement\n  constructor(obj, parent)\n  get parentElement()\n  get attributes()\n  set tagName(v)\n  get tagName()\n  set nodeName(v)\n  get nodeName()\n  get children()\n  get childElementCount()\n  get firstElementChild()\n  n =>\n  get lastElementChild()\n  get id()\n  getAttribute(name)\n  attributes =>\n  getAttributeNames()\n  attributes =>\n  hasAttribute(name)\n  attributes =>\n  hasAttributes()\n  removeAttribute(name)\n  attributes =>\n  getAttributeNode(name)\n  setAttribute(name, value)\n  attributes =>\n(obj, owner) =>\n  attributes(elem)\nElement\nDocument\n  constructor(obj)\nDocument\n  createAttribute(name, value)\n  createElement(tagName)\n  createTextNode(text)\n  pred = (n, k) =>\n  (n, k) =>\n  (n, p) =>\n  get body()\n  c =>\nDocument\nAttr\n  constructor(raw, owner)\n  get path()\n  get ownerElement()\n  get ownerDocument()\n  get name()\n  set name(v)\n  get value()\n  set value(v)\nAttr\nText\n  constructor(key, owner)\n  get = () =>\n  set = value =>\n  get = () =>\n  set = value =>\n  get data()\n  value =>\n  get nodeValue()\n  value =>\n  toString()\n(key, owner) =>\nText\nNode\nText\nComment\n  constructor(raw, owner)\n  get = () =>\n  set = value =>\n  () =>\n  value =>\n  get data()\n  value =>\n  get nodeValue()\n  value =>\n(node, owner) =>\nComment\nNode\nComment\nTokenList\n  constructor(owner, key = 'class')\n  get = () =>\n  set = value =>\n  () =>\n  value =>\n  get length()\n  value =>\n  get value()\n  value =>\n  item(index)\n  value =>\n  contains(token)\n  value =>\n  add(...tokens)\n(arr, set) =>\n  remove(...tokens)\n(arr, set) =>\n  toggle(token, force)\n(arr, set) =>\n  supports(token)\n  replace(oldToken, newToken)\n(arr, set) =>\nTokenList\nTokenList\n  (container, i) =>\nMembrane(instance, obj, proto, wrapProp, wrapElement)\n  get: (target, prop, receiver) =>\n  has: (target, prop) =>\n  getOwnPropertyDescriptor: (target, prop) =>\n  getPrototypeOf: target =>\n  setPrototypeOf: (target, p) =>\n  ownKeys: target =>\nFactory(raw, owner, ctor)\n  isArray = arg =>\n  isAttributes = arg =>",
			"settings":
			{
				"buffer_size": 3269,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					1927,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
						"symkeys":
						[
							[
								1231,
								1251
							],
							[
								1347,
								1367
							],
							[
								1445,
								1473
							],
							[
								1680,
								1685
							],
							[
								1690,
								1705
							],
							[
								1787,
								1800
							],
							[
								1848,
								1867
							],
							[
								1915,
								1930
							],
							[
								1978,
								1986
							],
							[
								2034,
								2042
							],
							[
								2090,
								2106
							],
							[
								2154,
								2164
							],
							[
								2329,
								2340
							],
							[
								2394,
								2406
							],
							[
								3113,
								3137
							],
							[
								3395,
								3438
							],
							[
								3624,
								3649
							],
							[
								3886,
								3931
							],
							[
								4035,
								4087
							],
							[
								4230,
								4263
							],
							[
								4650,
								4675
							],
							[
								4789,
								4823
							],
							[
								5142,
								5162
							],
							[
								5314,
								5338
							],
							[
								5568,
								5592
							],
							[
								5932,
								5950
							],
							[
								5992,
								6013
							],
							[
								6058,
								6080
							],
							[
								6141,
								6163
							],
							[
								6322,
								6364
							],
							[
								7014,
								7067
							],
							[
								7817,
								7840
							],
							[
								7920,
								7946
							],
							[
								8006,
								8035
							],
							[
								8134,
								8173
							],
							[
								8224,
								8279
							],
							[
								8413,
								8452
							],
							[
								8482,
								8487
							],
							[
								8533,
								8576
							],
							[
								8897,
								8924
							],
							[
								8971,
								8999
							],
							[
								9047,
								9075
							],
							[
								9123,
								9161
							],
							[
								9219,
								9247
							],
							[
								9345,
								9380
							],
							[
								9435,
								9458
							],
							[
								9500,
								9531
							],
							[
								9584,
								9615
							],
							[
								9766,
								9792
							],
							[
								9838,
								9878
							],
							[
								9909,
								9914
							],
							[
								9961,
								10006
							],
							[
								10496,
								10512
							],
							[
								10571,
								10610
							],
							[
								10722,
								10762
							],
							[
								10875,
								10913
							],
							[
								11018,
								11042
							],
							[
								11125,
								11145
							],
							[
								11173,
								11179
							],
							[
								11261,
								11300
							],
							[
								11406,
								11431
							],
							[
								11514,
								11534
							],
							[
								11563,
								11569
							],
							[
								11653,
								11698
							],
							[
								12021,
								12065
							],
							[
								12386,
								12399
							],
							[
								12424,
								12445
							],
							[
								12518,
								12531
							],
							[
								12688,
								12696
							],
							[
								12785,
								12800
							],
							[
								12958,
								12968
							],
							[
								13060,
								13077
							],
							[
								13235,
								13247
							],
							[
								13337,
								13351
							],
							[
								13510,
								13519
							],
							[
								13595,
								13610
							],
							[
								13767,
								13777
							],
							[
								13826,
								13846
							],
							[
								13929,
								13942
							],
							[
								13962,
								13972
							],
							[
								14277,
								14356
							],
							[
								14564,
								14576
							],
							[
								14626,
								14638
							],
							[
								15201,
								15207
							],
							[
								15917,
								15950
							]
						],
						"symlist":
						[
							"function strerr(ret)",
							"function numerr(ret)",
							"function objerr(fn, ...args)",
							"Stats",
							"constructor(st)",
							"isDirectory()",
							"isCharacterDevice()",
							"isBlockDevice()",
							"isFile()",
							"isFIFO()",
							"isSymbolicLink()",
							"isSocket()",
							"get errno()",
							"get errstr()",
							" function buffer(length)",
							" function bufferFrom(chunk, offset, length)",
							" function bufferSize(buf)",
							" function bufferToString(buf, offset, length)",
							" function fopen(filename, flags = 'r', mode = 0o644)",
							" function fdopen(fd, flags = 'r')",
							" function flushSync(file)",
							" function seek(fd, offset, whence)",
							" function tell(file)",
							" function sizeSync(file)",
							" function nameSync(file)",
							" function getcwd()",
							" function chdir(path)",
							" function isatty(file)",
							" function fileno(file)",
							" function readFileSync(file, options = {})",
							" function writeFileSync(file, data, overwrite = true)",
							" function closeSync(fd)",
							" function existsSync(path)",
							" function lstatSync(path, cb)",
							" function mkdirSync(path, mode = 0o777)",
							" function openSync(filename, flags = 'r', mode = 0o644)",
							" function read(fd, buf, offset, length)",
							"() =>",
							" function readSync(fd, buf, offset, length)",
							" function readdirSync(path)",
							" function readlinkSync(path)",
							" function realpathSync(path)",
							" function renameSync(oldname, newname)",
							" function statSync(path, cb)",
							" function symlinkSync(target, path)",
							" function tmpfileSync()",
							" function mkstempSync(template)",
							" function tempnamSync(dir, pfx)",
							" function unlinkSync(path)",
							" function write(fd, buf, offset, length)",
							"() =>",
							" function writeSync(fd, data, offset, length)",
							" function pipe()",
							" function setReadHandler(file, handler)",
							" function setWriteHandler(file, handler)",
							" function onRead(file, handler = null)",
							" function waitRead(file)",
							"(resolve, reject) =>",
							" () =>",
							" function onWrite(file, handler = null)",
							" function waitWrite(file)",
							"(resolve, reject) =>",
							" () =>",
							"async function readAll(input, bufSize = 1024)",
							" function readAllSync(input, bufSize = 1024)",
							"inotify_event",
							"constructor(obj = {})",
							"set wd(value)",
							"get wd()",
							"set mask(value)",
							"get mask()",
							"set cookie(value)",
							"get cookie()",
							"set len(value)",
							"get len()",
							"set name(value)",
							"get name()",
							"static from(address)",
							"inotify_event",
							"toString()",
							" function watch(filename, options = {}, callback = (eventType, filename) => {})",
							" filename =>",
							" filename =>",
							" () =>",
							"function Encoding2Bytes(encoding)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADUAQAAICBpbmRleE9mID0gKGhheXN0YWNrLCBuZWVkbGUpID0+CkV2ZW50RW1pdHRlcgogIGNvbnN0cnVjdG9yKCkKICBvbihldmVudCwgbGlzdGVuZXIpCiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkKICByYXdMaXN0ZW5lcnMoZXZlbnQpCiAgZW1pdChldmVudCwgLi4uYXJncykKICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikKICBjYWxsYmFjayA9ICguLi5hcmdzKSA9PgpFdmVudFRhcmdldAogIGNvbnN0cnVjdG9yKCkKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQpFdmVudFRhcmdldAogIGdldE1ldGhvZHMgPSBvYmogPT4KICBuID0+CihhY2MsIG4pID0+CiAgZXZlbnRpZnkgPSBzZWxmID0+AAAAAAAAAAATBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1928,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
						"symkeys":
						[
							[
								6,
								37
							],
							[
								100,
								112
							],
							[
								134,
								147
							],
							[
								154,
								173
							],
							[
								293,
								324
							],
							[
								586,
								611
							],
							[
								754,
								773
							],
							[
								859,
								879
							],
							[
								1019,
								1040
							],
							[
								1053,
								1076
							],
							[
								1350,
								1361
							],
							[
								1366,
								1379
							],
							[
								1493,
								1513
							],
							[
								1650,
								1682
							],
							[
								1913,
								1948
							],
							[
								2303,
								2329
							],
							[
								2776,
								2787
							],
							[
								2842,
								2861
							],
							[
								2908,
								2912
							],
							[
								2945,
								2956
							],
							[
								3003,
								3021
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(event)",
							"rawListeners(event)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = (...args) =>",
							"EventTarget",
							"constructor()",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"EventTarget",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAATBwAAICBzdHJlcnIocmV0KQogIG51bWVycihyZXQpCiAgb2JqZXJyKGZuLCAuLi5hcmdzKQpTdGF0cwogIGNvbnN0cnVjdG9yKHN0KQogIGlzRGlyZWN0b3J5KCkKICBpc0NoYXJhY3RlckRldmljZSgpCiAgaXNCbG9ja0RldmljZSgpCiAgaXNGaWxlKCkKICBpc0ZJRk8oKQogIGlzU3ltYm9saWNMaW5rKCkKICBpc1NvY2tldCgpCiAgZ2V0IGVycm5vKCkKICBnZXQgZXJyc3RyKCkKICBidWZmZXIobGVuZ3RoKQogIGJ1ZmZlckZyb20oY2h1bmssIG9mZnNldCwgbGVuZ3RoKQogIGJ1ZmZlclNpemUoYnVmKQogIGJ1ZmZlclRvU3RyaW5nKGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgZm9wZW4oZmlsZW5hbWUsIGZsYWdzID0gJ3InLCBtb2RlID0gMG82NDQpCiAgZmRvcGVuKGZkLCBmbGFncyA9ICdyJykKICBmbHVzaFN5bmMoZmlsZSkKICBzZWVrKGZkLCBvZmZzZXQsIHdoZW5jZSkKICB0ZWxsKGZpbGUpCiAgc2l6ZVN5bmMoZmlsZSkKICBuYW1lU3luYyhmaWxlKQogIGdldGN3ZCgpCiAgY2hkaXIocGF0aCkKICBpc2F0dHkoZmlsZSkKICBmaWxlbm8oZmlsZSkKICByZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucyA9IHt9KQogIHdyaXRlRmlsZVN5bmMoZmlsZSwgZGF0YSwgb3ZlcndyaXRlID0gdHJ1ZSkKICBjbG9zZVN5bmMoZmQpCiAgZXhpc3RzU3luYyhwYXRoKQogIGxzdGF0U3luYyhwYXRoLCBjYikKICBta2RpclN5bmMocGF0aCwgbW9kZSA9IDBvNzc3KQogIG9wZW5TeW5jKGZpbGVuYW1lLCBmbGFncyA9ICdyJywgbW9kZSA9IDBvNjQ0KQogIHJlYWQoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgcmVhZFN5bmMoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgcmVhZGRpclN5bmMocGF0aCkKICByZWFkbGlua1N5bmMocGF0aCkKICByZWFscGF0aFN5bmMocGF0aCkKICByZW5hbWVTeW5jKG9sZG5hbWUsIG5ld25hbWUpCiAgc3RhdFN5bmMocGF0aCwgY2IpCiAgc3ltbGlua1N5bmModGFyZ2V0LCBwYXRoKQogIHRtcGZpbGVTeW5jKCkKICBta3N0ZW1wU3luYyh0ZW1wbGF0ZSkKICB0ZW1wbmFtU3luYyhkaXIsIHBmeCkKICB1bmxpbmtTeW5jKHBhdGgpCiAgd3JpdGUoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgd3JpdGVTeW5jKGZkLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKICBwaXBlKCkKICBzZXRSZWFkSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIHNldFdyaXRlSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIG9uUmVhZChmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0UmVhZChmaWxlKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogICgpID0+CiAgb25Xcml0ZShmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0V3JpdGUoZmlsZSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICAoKSA9PgogIHJlYWRBbGwoaW5wdXQsIGJ1ZlNpemUgPSAxMDI0KQogIHJlYWRBbGxTeW5jKGlucHV0LCBidWZTaXplID0gMTAyNCkKICBpbm90aWZ5X2V2ZW50CiAgY29uc3RydWN0b3Iob2JqID0ge30pCiAgc2V0IHdkKHZhbHVlKQogIGdldCB3ZCgpCiAgc2V0IG1hc2sodmFsdWUpCiAgZ2V0IG1hc2soKQogIHNldCBjb29raWUodmFsdWUpCiAgZ2V0IGNvb2tpZSgpCiAgc2V0IGxlbih2YWx1ZSkKICBnZXQgbGVuKCkKICBzZXQgbmFtZSh2YWx1ZSkKICBnZXQgbmFtZSgpCiAgc3RhdGljIGZyb20oYWRkcmVzcykKICBpbm90aWZ5X2V2ZW50CiAgdG9TdHJpbmcoKQogIHdhdGNoKGZpbGVuYW1lLCBvcHRpb25zID0ge30sIGNhbGxiYWNrID0gKGV2ZW50VHlwZSwgZmlsZW5hbWUpID0+IHt9KQogIGZpbGVuYW1lID0+CiAgZmlsZW5hbWUgPT4KICAoKSA9PgpFbmNvZGluZzJCeXRlcyhlbmNvZGluZykAAAAAAAAAANQBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1929,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
						"symkeys":
						[
							[
								1231,
								1251
							],
							[
								1347,
								1367
							],
							[
								1445,
								1473
							],
							[
								1680,
								1685
							],
							[
								1690,
								1705
							],
							[
								1787,
								1800
							],
							[
								1848,
								1867
							],
							[
								1915,
								1930
							],
							[
								1978,
								1986
							],
							[
								2034,
								2042
							],
							[
								2090,
								2106
							],
							[
								2154,
								2164
							],
							[
								2329,
								2340
							],
							[
								2394,
								2406
							],
							[
								3113,
								3137
							],
							[
								3395,
								3438
							],
							[
								3624,
								3649
							],
							[
								3886,
								3931
							],
							[
								4035,
								4087
							],
							[
								4230,
								4263
							],
							[
								4650,
								4675
							],
							[
								4789,
								4823
							],
							[
								5142,
								5162
							],
							[
								5314,
								5338
							],
							[
								5568,
								5592
							],
							[
								5932,
								5950
							],
							[
								5992,
								6013
							],
							[
								6058,
								6080
							],
							[
								6141,
								6163
							],
							[
								6322,
								6364
							],
							[
								7014,
								7067
							],
							[
								7817,
								7840
							],
							[
								7920,
								7946
							],
							[
								8006,
								8035
							],
							[
								8134,
								8173
							],
							[
								8224,
								8279
							],
							[
								8413,
								8452
							],
							[
								8482,
								8487
							],
							[
								8533,
								8576
							],
							[
								8897,
								8924
							],
							[
								8971,
								8999
							],
							[
								9047,
								9075
							],
							[
								9123,
								9161
							],
							[
								9219,
								9247
							],
							[
								9345,
								9380
							],
							[
								9435,
								9458
							],
							[
								9500,
								9531
							],
							[
								9584,
								9615
							],
							[
								9766,
								9792
							],
							[
								9838,
								9878
							],
							[
								9909,
								9914
							],
							[
								9961,
								10006
							],
							[
								10496,
								10512
							],
							[
								10571,
								10610
							],
							[
								10722,
								10762
							],
							[
								10875,
								10913
							],
							[
								11018,
								11042
							],
							[
								11125,
								11145
							],
							[
								11173,
								11179
							],
							[
								11261,
								11300
							],
							[
								11406,
								11431
							],
							[
								11514,
								11534
							],
							[
								11563,
								11569
							],
							[
								11653,
								11698
							],
							[
								12021,
								12065
							],
							[
								12386,
								12399
							],
							[
								12424,
								12445
							],
							[
								12518,
								12531
							],
							[
								12688,
								12696
							],
							[
								12785,
								12800
							],
							[
								12958,
								12968
							],
							[
								13060,
								13077
							],
							[
								13235,
								13247
							],
							[
								13337,
								13351
							],
							[
								13510,
								13519
							],
							[
								13595,
								13610
							],
							[
								13767,
								13777
							],
							[
								13826,
								13846
							],
							[
								13929,
								13942
							],
							[
								13962,
								13972
							],
							[
								14277,
								14356
							],
							[
								14564,
								14576
							],
							[
								14626,
								14638
							],
							[
								15201,
								15207
							],
							[
								15917,
								15950
							]
						],
						"symlist":
						[
							"function strerr(ret)",
							"function numerr(ret)",
							"function objerr(fn, ...args)",
							"Stats",
							"constructor(st)",
							"isDirectory()",
							"isCharacterDevice()",
							"isBlockDevice()",
							"isFile()",
							"isFIFO()",
							"isSymbolicLink()",
							"isSocket()",
							"get errno()",
							"get errstr()",
							" function buffer(length)",
							" function bufferFrom(chunk, offset, length)",
							" function bufferSize(buf)",
							" function bufferToString(buf, offset, length)",
							" function fopen(filename, flags = 'r', mode = 0o644)",
							" function fdopen(fd, flags = 'r')",
							" function flushSync(file)",
							" function seek(fd, offset, whence)",
							" function tell(file)",
							" function sizeSync(file)",
							" function nameSync(file)",
							" function getcwd()",
							" function chdir(path)",
							" function isatty(file)",
							" function fileno(file)",
							" function readFileSync(file, options = {})",
							" function writeFileSync(file, data, overwrite = true)",
							" function closeSync(fd)",
							" function existsSync(path)",
							" function lstatSync(path, cb)",
							" function mkdirSync(path, mode = 0o777)",
							" function openSync(filename, flags = 'r', mode = 0o644)",
							" function read(fd, buf, offset, length)",
							"() =>",
							" function readSync(fd, buf, offset, length)",
							" function readdirSync(path)",
							" function readlinkSync(path)",
							" function realpathSync(path)",
							" function renameSync(oldname, newname)",
							" function statSync(path, cb)",
							" function symlinkSync(target, path)",
							" function tmpfileSync()",
							" function mkstempSync(template)",
							" function tempnamSync(dir, pfx)",
							" function unlinkSync(path)",
							" function write(fd, buf, offset, length)",
							"() =>",
							" function writeSync(fd, data, offset, length)",
							" function pipe()",
							" function setReadHandler(file, handler)",
							" function setWriteHandler(file, handler)",
							" function onRead(file, handler = null)",
							" function waitRead(file)",
							"(resolve, reject) =>",
							" () =>",
							" function onWrite(file, handler = null)",
							" function waitWrite(file)",
							"(resolve, reject) =>",
							" () =>",
							"async function readAll(input, bufSize = 1024)",
							" function readAllSync(input, bufSize = 1024)",
							"inotify_event",
							"constructor(obj = {})",
							"set wd(value)",
							"get wd()",
							"set mask(value)",
							"get mask()",
							"set cookie(value)",
							"get cookie()",
							"set len(value)",
							"get len()",
							"set name(value)",
							"get name()",
							"static from(address)",
							"inotify_event",
							"toString()",
							" function watch(filename, options = {}, callback = (eventType, filename) => {})",
							" filename =>",
							" filename =>",
							" () =>",
							"function Encoding2Bytes(encoding)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADUAQAAICBpbmRleE9mID0gKGhheXN0YWNrLCBuZWVkbGUpID0+CkV2ZW50RW1pdHRlcgogIGNvbnN0cnVjdG9yKCkKICBvbihldmVudCwgbGlzdGVuZXIpCiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkKICByYXdMaXN0ZW5lcnMoZXZlbnQpCiAgZW1pdChldmVudCwgLi4uYXJncykKICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikKICBjYWxsYmFjayA9ICguLi5hcmdzKSA9PgpFdmVudFRhcmdldAogIGNvbnN0cnVjdG9yKCkKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQpFdmVudFRhcmdldAogIGdldE1ldGhvZHMgPSBvYmogPT4KICBuID0+CihhY2MsIG4pID0+CiAgZXZlbnRpZnkgPSBzZWxmID0+AAAAAAAAAAATBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1930,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
						"symkeys":
						[
							[
								1233,
								1253
							],
							[
								1349,
								1369
							],
							[
								1447,
								1475
							],
							[
								1682,
								1687
							],
							[
								1692,
								1707
							],
							[
								1789,
								1802
							],
							[
								1850,
								1869
							],
							[
								1917,
								1932
							],
							[
								1980,
								1988
							],
							[
								2036,
								2044
							],
							[
								2092,
								2108
							],
							[
								2156,
								2166
							],
							[
								2331,
								2342
							],
							[
								2396,
								2408
							],
							[
								3115,
								3139
							],
							[
								3397,
								3440
							],
							[
								3626,
								3651
							],
							[
								3888,
								3933
							],
							[
								4037,
								4089
							],
							[
								4232,
								4265
							],
							[
								4652,
								4677
							],
							[
								4791,
								4825
							],
							[
								5144,
								5164
							],
							[
								5316,
								5340
							],
							[
								5570,
								5594
							],
							[
								5934,
								5952
							],
							[
								5994,
								6015
							],
							[
								6060,
								6082
							],
							[
								6143,
								6165
							],
							[
								6324,
								6366
							],
							[
								7016,
								7069
							],
							[
								7819,
								7842
							],
							[
								7922,
								7948
							],
							[
								8008,
								8037
							],
							[
								8136,
								8175
							],
							[
								8226,
								8281
							],
							[
								8415,
								8454
							],
							[
								8484,
								8489
							],
							[
								8535,
								8578
							],
							[
								8899,
								8926
							],
							[
								8973,
								9001
							],
							[
								9049,
								9077
							],
							[
								9125,
								9163
							],
							[
								9221,
								9249
							],
							[
								9347,
								9382
							],
							[
								9437,
								9460
							],
							[
								9502,
								9533
							],
							[
								9586,
								9617
							],
							[
								9768,
								9794
							],
							[
								9840,
								9880
							],
							[
								9911,
								9916
							],
							[
								9963,
								10008
							],
							[
								10498,
								10514
							],
							[
								10573,
								10612
							],
							[
								10724,
								10764
							],
							[
								10877,
								10915
							],
							[
								11020,
								11044
							],
							[
								11127,
								11147
							],
							[
								11175,
								11181
							],
							[
								11263,
								11302
							],
							[
								11408,
								11433
							],
							[
								11516,
								11536
							],
							[
								11565,
								11571
							],
							[
								11655,
								11700
							],
							[
								12023,
								12067
							],
							[
								12388,
								12401
							],
							[
								12426,
								12447
							],
							[
								12520,
								12533
							],
							[
								12690,
								12698
							],
							[
								12787,
								12802
							],
							[
								12960,
								12970
							],
							[
								13062,
								13079
							],
							[
								13237,
								13249
							],
							[
								13339,
								13353
							],
							[
								13512,
								13521
							],
							[
								13597,
								13612
							],
							[
								13769,
								13779
							],
							[
								13828,
								13848
							],
							[
								13931,
								13944
							],
							[
								13964,
								13974
							],
							[
								14279,
								14358
							],
							[
								14566,
								14578
							],
							[
								14628,
								14640
							],
							[
								15203,
								15209
							],
							[
								15919,
								15952
							]
						],
						"symlist":
						[
							"function strerr(ret)",
							"function numerr(ret)",
							"function objerr(fn, ...args)",
							"Stats",
							"constructor(st)",
							"isDirectory()",
							"isCharacterDevice()",
							"isBlockDevice()",
							"isFile()",
							"isFIFO()",
							"isSymbolicLink()",
							"isSocket()",
							"get errno()",
							"get errstr()",
							" function buffer(length)",
							" function bufferFrom(chunk, offset, length)",
							" function bufferSize(buf)",
							" function bufferToString(buf, offset, length)",
							" function fopen(filename, flags = 'r', mode = 0o644)",
							" function fdopen(fd, flags = 'r')",
							" function flushSync(file)",
							" function seek(fd, offset, whence)",
							" function tell(file)",
							" function sizeSync(file)",
							" function nameSync(file)",
							" function getcwd()",
							" function chdir(path)",
							" function isatty(file)",
							" function fileno(file)",
							" function readFileSync(file, options = {})",
							" function writeFileSync(file, data, overwrite = true)",
							" function closeSync(fd)",
							" function existsSync(path)",
							" function lstatSync(path, cb)",
							" function mkdirSync(path, mode = 0o777)",
							" function openSync(filename, flags = 'r', mode = 0o644)",
							" function read(fd, buf, offset, length)",
							"() =>",
							" function readSync(fd, buf, offset, length)",
							" function readdirSync(path)",
							" function readlinkSync(path)",
							" function realpathSync(path)",
							" function renameSync(oldname, newname)",
							" function statSync(path, cb)",
							" function symlinkSync(target, path)",
							" function tmpfileSync()",
							" function mkstempSync(template)",
							" function tempnamSync(dir, pfx)",
							" function unlinkSync(path)",
							" function write(fd, buf, offset, length)",
							"() =>",
							" function writeSync(fd, data, offset, length)",
							" function pipe()",
							" function setReadHandler(file, handler)",
							" function setWriteHandler(file, handler)",
							" function onRead(file, handler = null)",
							" function waitRead(file)",
							"(resolve, reject) =>",
							" () =>",
							" function onWrite(file, handler = null)",
							" function waitWrite(file)",
							"(resolve, reject) =>",
							" () =>",
							"async function readAll(input, bufSize = 1024)",
							" function readAllSync(input, bufSize = 1024)",
							"inotify_event",
							"constructor(obj = {})",
							"set wd(value)",
							"get wd()",
							"set mask(value)",
							"get mask()",
							"set cookie(value)",
							"get cookie()",
							"set len(value)",
							"get len()",
							"set name(value)",
							"get name()",
							"static from(address)",
							"inotify_event",
							"toString()",
							" function watch(filename, options = {}, callback = (eventType, filename) => {})",
							" filename =>",
							" filename =>",
							" () =>",
							"function Encoding2Bytes(encoding)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAATBwAAICBzdHJlcnIocmV0KQogIG51bWVycihyZXQpCiAgb2JqZXJyKGZuLCAuLi5hcmdzKQpTdGF0cwogIGNvbnN0cnVjdG9yKHN0KQogIGlzRGlyZWN0b3J5KCkKICBpc0NoYXJhY3RlckRldmljZSgpCiAgaXNCbG9ja0RldmljZSgpCiAgaXNGaWxlKCkKICBpc0ZJRk8oKQogIGlzU3ltYm9saWNMaW5rKCkKICBpc1NvY2tldCgpCiAgZ2V0IGVycm5vKCkKICBnZXQgZXJyc3RyKCkKICBidWZmZXIobGVuZ3RoKQogIGJ1ZmZlckZyb20oY2h1bmssIG9mZnNldCwgbGVuZ3RoKQogIGJ1ZmZlclNpemUoYnVmKQogIGJ1ZmZlclRvU3RyaW5nKGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgZm9wZW4oZmlsZW5hbWUsIGZsYWdzID0gJ3InLCBtb2RlID0gMG82NDQpCiAgZmRvcGVuKGZkLCBmbGFncyA9ICdyJykKICBmbHVzaFN5bmMoZmlsZSkKICBzZWVrKGZkLCBvZmZzZXQsIHdoZW5jZSkKICB0ZWxsKGZpbGUpCiAgc2l6ZVN5bmMoZmlsZSkKICBuYW1lU3luYyhmaWxlKQogIGdldGN3ZCgpCiAgY2hkaXIocGF0aCkKICBpc2F0dHkoZmlsZSkKICBmaWxlbm8oZmlsZSkKICByZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucyA9IHt9KQogIHdyaXRlRmlsZVN5bmMoZmlsZSwgZGF0YSwgb3ZlcndyaXRlID0gdHJ1ZSkKICBjbG9zZVN5bmMoZmQpCiAgZXhpc3RzU3luYyhwYXRoKQogIGxzdGF0U3luYyhwYXRoLCBjYikKICBta2RpclN5bmMocGF0aCwgbW9kZSA9IDBvNzc3KQogIG9wZW5TeW5jKGZpbGVuYW1lLCBmbGFncyA9ICdyJywgbW9kZSA9IDBvNjQ0KQogIHJlYWQoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgcmVhZFN5bmMoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgcmVhZGRpclN5bmMocGF0aCkKICByZWFkbGlua1N5bmMocGF0aCkKICByZWFscGF0aFN5bmMocGF0aCkKICByZW5hbWVTeW5jKG9sZG5hbWUsIG5ld25hbWUpCiAgc3RhdFN5bmMocGF0aCwgY2IpCiAgc3ltbGlua1N5bmModGFyZ2V0LCBwYXRoKQogIHRtcGZpbGVTeW5jKCkKICBta3N0ZW1wU3luYyh0ZW1wbGF0ZSkKICB0ZW1wbmFtU3luYyhkaXIsIHBmeCkKICB1bmxpbmtTeW5jKHBhdGgpCiAgd3JpdGUoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgd3JpdGVTeW5jKGZkLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKICBwaXBlKCkKICBzZXRSZWFkSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIHNldFdyaXRlSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIG9uUmVhZChmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0UmVhZChmaWxlKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogICgpID0+CiAgb25Xcml0ZShmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0V3JpdGUoZmlsZSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICAoKSA9PgogIHJlYWRBbGwoaW5wdXQsIGJ1ZlNpemUgPSAxMDI0KQogIHJlYWRBbGxTeW5jKGlucHV0LCBidWZTaXplID0gMTAyNCkKICBpbm90aWZ5X2V2ZW50CiAgY29uc3RydWN0b3Iob2JqID0ge30pCiAgc2V0IHdkKHZhbHVlKQogIGdldCB3ZCgpCiAgc2V0IG1hc2sodmFsdWUpCiAgZ2V0IG1hc2soKQogIHNldCBjb29raWUodmFsdWUpCiAgZ2V0IGNvb2tpZSgpCiAgc2V0IGxlbih2YWx1ZSkKICBnZXQgbGVuKCkKICBzZXQgbmFtZSh2YWx1ZSkKICBnZXQgbmFtZSgpCiAgc3RhdGljIGZyb20oYWRkcmVzcykKICBpbm90aWZ5X2V2ZW50CiAgdG9TdHJpbmcoKQogIHdhdGNoKGZpbGVuYW1lLCBvcHRpb25zID0ge30sIGNhbGxiYWNrID0gKGV2ZW50VHlwZSwgZmlsZW5hbWUpID0+IHt9KQogIGZpbGVuYW1lID0+CiAgZmlsZW5hbWUgPT4KICAoKSA9PgpFbmNvZGluZzJCeXRlcyhlbmNvZGluZykAAAAAAAAAABMHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1931,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
						"symkeys":
						[
							[
								1233,
								1253
							],
							[
								1349,
								1369
							],
							[
								1447,
								1475
							],
							[
								1682,
								1687
							],
							[
								1692,
								1707
							],
							[
								1789,
								1802
							],
							[
								1850,
								1869
							],
							[
								1917,
								1932
							],
							[
								1980,
								1988
							],
							[
								2036,
								2044
							],
							[
								2092,
								2108
							],
							[
								2156,
								2166
							],
							[
								2331,
								2342
							],
							[
								2396,
								2408
							],
							[
								3115,
								3139
							],
							[
								3397,
								3440
							],
							[
								3626,
								3651
							],
							[
								3888,
								3933
							],
							[
								4037,
								4089
							],
							[
								4232,
								4265
							],
							[
								4652,
								4677
							],
							[
								4791,
								4825
							],
							[
								5144,
								5164
							],
							[
								5316,
								5340
							],
							[
								5570,
								5594
							],
							[
								5934,
								5952
							],
							[
								5994,
								6015
							],
							[
								6060,
								6082
							],
							[
								6143,
								6165
							],
							[
								6324,
								6366
							],
							[
								7016,
								7069
							],
							[
								7819,
								7842
							],
							[
								7922,
								7948
							],
							[
								8008,
								8037
							],
							[
								8136,
								8175
							],
							[
								8226,
								8281
							],
							[
								8415,
								8454
							],
							[
								8484,
								8489
							],
							[
								8535,
								8578
							],
							[
								8899,
								8926
							],
							[
								8973,
								9001
							],
							[
								9049,
								9077
							],
							[
								9125,
								9163
							],
							[
								9221,
								9249
							],
							[
								9347,
								9382
							],
							[
								9437,
								9460
							],
							[
								9502,
								9533
							],
							[
								9586,
								9617
							],
							[
								9768,
								9794
							],
							[
								9840,
								9880
							],
							[
								9911,
								9916
							],
							[
								9963,
								10008
							],
							[
								10498,
								10514
							],
							[
								10573,
								10612
							],
							[
								10724,
								10764
							],
							[
								10877,
								10915
							],
							[
								11020,
								11044
							],
							[
								11127,
								11147
							],
							[
								11175,
								11181
							],
							[
								11263,
								11302
							],
							[
								11408,
								11433
							],
							[
								11516,
								11536
							],
							[
								11565,
								11571
							],
							[
								11655,
								11700
							],
							[
								12023,
								12067
							],
							[
								12388,
								12401
							],
							[
								12426,
								12447
							],
							[
								12520,
								12533
							],
							[
								12690,
								12698
							],
							[
								12787,
								12802
							],
							[
								12960,
								12970
							],
							[
								13062,
								13079
							],
							[
								13237,
								13249
							],
							[
								13339,
								13353
							],
							[
								13512,
								13521
							],
							[
								13597,
								13612
							],
							[
								13769,
								13779
							],
							[
								13828,
								13848
							],
							[
								13931,
								13944
							],
							[
								13964,
								13974
							],
							[
								14279,
								14358
							],
							[
								14566,
								14578
							],
							[
								14628,
								14640
							],
							[
								15203,
								15209
							],
							[
								15919,
								15952
							]
						],
						"symlist":
						[
							"function strerr(ret)",
							"function numerr(ret)",
							"function objerr(fn, ...args)",
							"Stats",
							"constructor(st)",
							"isDirectory()",
							"isCharacterDevice()",
							"isBlockDevice()",
							"isFile()",
							"isFIFO()",
							"isSymbolicLink()",
							"isSocket()",
							"get errno()",
							"get errstr()",
							" function buffer(length)",
							" function bufferFrom(chunk, offset, length)",
							" function bufferSize(buf)",
							" function bufferToString(buf, offset, length)",
							" function fopen(filename, flags = 'r', mode = 0o644)",
							" function fdopen(fd, flags = 'r')",
							" function flushSync(file)",
							" function seek(fd, offset, whence)",
							" function tell(file)",
							" function sizeSync(file)",
							" function nameSync(file)",
							" function getcwd()",
							" function chdir(path)",
							" function isatty(file)",
							" function fileno(file)",
							" function readFileSync(file, options = {})",
							" function writeFileSync(file, data, overwrite = true)",
							" function closeSync(fd)",
							" function existsSync(path)",
							" function lstatSync(path, cb)",
							" function mkdirSync(path, mode = 0o777)",
							" function openSync(filename, flags = 'r', mode = 0o644)",
							" function read(fd, buf, offset, length)",
							"() =>",
							" function readSync(fd, buf, offset, length)",
							" function readdirSync(path)",
							" function readlinkSync(path)",
							" function realpathSync(path)",
							" function renameSync(oldname, newname)",
							" function statSync(path, cb)",
							" function symlinkSync(target, path)",
							" function tmpfileSync()",
							" function mkstempSync(template)",
							" function tempnamSync(dir, pfx)",
							" function unlinkSync(path)",
							" function write(fd, buf, offset, length)",
							"() =>",
							" function writeSync(fd, data, offset, length)",
							" function pipe()",
							" function setReadHandler(file, handler)",
							" function setWriteHandler(file, handler)",
							" function onRead(file, handler = null)",
							" function waitRead(file)",
							"(resolve, reject) =>",
							" () =>",
							" function onWrite(file, handler = null)",
							" function waitWrite(file)",
							"(resolve, reject) =>",
							" () =>",
							"async function readAll(input, bufSize = 1024)",
							" function readAllSync(input, bufSize = 1024)",
							"inotify_event",
							"constructor(obj = {})",
							"set wd(value)",
							"get wd()",
							"set mask(value)",
							"get mask()",
							"set cookie(value)",
							"get cookie()",
							"set len(value)",
							"get len()",
							"set name(value)",
							"get name()",
							"static from(address)",
							"inotify_event",
							"toString()",
							" function watch(filename, options = {}, callback = (eventType, filename) => {})",
							" filename =>",
							" filename =>",
							" () =>",
							"function Encoding2Bytes(encoding)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAATBwAAICBzdHJlcnIocmV0KQogIG51bWVycihyZXQpCiAgb2JqZXJyKGZuLCAuLi5hcmdzKQpTdGF0cwogIGNvbnN0cnVjdG9yKHN0KQogIGlzRGlyZWN0b3J5KCkKICBpc0NoYXJhY3RlckRldmljZSgpCiAgaXNCbG9ja0RldmljZSgpCiAgaXNGaWxlKCkKICBpc0ZJRk8oKQogIGlzU3ltYm9saWNMaW5rKCkKICBpc1NvY2tldCgpCiAgZ2V0IGVycm5vKCkKICBnZXQgZXJyc3RyKCkKICBidWZmZXIobGVuZ3RoKQogIGJ1ZmZlckZyb20oY2h1bmssIG9mZnNldCwgbGVuZ3RoKQogIGJ1ZmZlclNpemUoYnVmKQogIGJ1ZmZlclRvU3RyaW5nKGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgZm9wZW4oZmlsZW5hbWUsIGZsYWdzID0gJ3InLCBtb2RlID0gMG82NDQpCiAgZmRvcGVuKGZkLCBmbGFncyA9ICdyJykKICBmbHVzaFN5bmMoZmlsZSkKICBzZWVrKGZkLCBvZmZzZXQsIHdoZW5jZSkKICB0ZWxsKGZpbGUpCiAgc2l6ZVN5bmMoZmlsZSkKICBuYW1lU3luYyhmaWxlKQogIGdldGN3ZCgpCiAgY2hkaXIocGF0aCkKICBpc2F0dHkoZmlsZSkKICBmaWxlbm8oZmlsZSkKICByZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucyA9IHt9KQogIHdyaXRlRmlsZVN5bmMoZmlsZSwgZGF0YSwgb3ZlcndyaXRlID0gdHJ1ZSkKICBjbG9zZVN5bmMoZmQpCiAgZXhpc3RzU3luYyhwYXRoKQogIGxzdGF0U3luYyhwYXRoLCBjYikKICBta2RpclN5bmMocGF0aCwgbW9kZSA9IDBvNzc3KQogIG9wZW5TeW5jKGZpbGVuYW1lLCBmbGFncyA9ICdyJywgbW9kZSA9IDBvNjQ0KQogIHJlYWQoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgcmVhZFN5bmMoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgcmVhZGRpclN5bmMocGF0aCkKICByZWFkbGlua1N5bmMocGF0aCkKICByZWFscGF0aFN5bmMocGF0aCkKICByZW5hbWVTeW5jKG9sZG5hbWUsIG5ld25hbWUpCiAgc3RhdFN5bmMocGF0aCwgY2IpCiAgc3ltbGlua1N5bmModGFyZ2V0LCBwYXRoKQogIHRtcGZpbGVTeW5jKCkKICBta3N0ZW1wU3luYyh0ZW1wbGF0ZSkKICB0ZW1wbmFtU3luYyhkaXIsIHBmeCkKICB1bmxpbmtTeW5jKHBhdGgpCiAgd3JpdGUoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgd3JpdGVTeW5jKGZkLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKICBwaXBlKCkKICBzZXRSZWFkSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIHNldFdyaXRlSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIG9uUmVhZChmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0UmVhZChmaWxlKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogICgpID0+CiAgb25Xcml0ZShmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0V3JpdGUoZmlsZSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICAoKSA9PgogIHJlYWRBbGwoaW5wdXQsIGJ1ZlNpemUgPSAxMDI0KQogIHJlYWRBbGxTeW5jKGlucHV0LCBidWZTaXplID0gMTAyNCkKICBpbm90aWZ5X2V2ZW50CiAgY29uc3RydWN0b3Iob2JqID0ge30pCiAgc2V0IHdkKHZhbHVlKQogIGdldCB3ZCgpCiAgc2V0IG1hc2sodmFsdWUpCiAgZ2V0IG1hc2soKQogIHNldCBjb29raWUodmFsdWUpCiAgZ2V0IGNvb2tpZSgpCiAgc2V0IGxlbih2YWx1ZSkKICBnZXQgbGVuKCkKICBzZXQgbmFtZSh2YWx1ZSkKICBnZXQgbmFtZSgpCiAgc3RhdGljIGZyb20oYWRkcmVzcykKICBpbm90aWZ5X2V2ZW50CiAgdG9TdHJpbmcoKQogIHdhdGNoKGZpbGVuYW1lLCBvcHRpb25zID0ge30sIGNhbGxiYWNrID0gKGV2ZW50VHlwZSwgZmlsZW5hbWUpID0+IHt9KQogIGZpbGVuYW1lID0+CiAgZmlsZW5hbWUgPT4KICAoKSA9PgpFbmNvZGluZzJCeXRlcyhlbmNvZGluZykAAAAAAAAAABMHAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1932,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
						"symkeys":
						[
							[
								6,
								37
							],
							[
								100,
								112
							],
							[
								134,
								147
							],
							[
								154,
								173
							],
							[
								293,
								324
							],
							[
								586,
								611
							],
							[
								754,
								773
							],
							[
								859,
								879
							],
							[
								1019,
								1040
							],
							[
								1053,
								1076
							],
							[
								1350,
								1361
							],
							[
								1366,
								1379
							],
							[
								1493,
								1513
							],
							[
								1650,
								1682
							],
							[
								1913,
								1948
							],
							[
								2303,
								2329
							],
							[
								2776,
								2787
							],
							[
								2842,
								2861
							],
							[
								2908,
								2912
							],
							[
								2945,
								2956
							],
							[
								3003,
								3021
							]
						],
						"symlist":
						[
							"indexOf = (haystack, needle) =>",
							"EventEmitter",
							"constructor()",
							"on(event, listener)",
							"removeListener(event, listener)",
							"removeAllListeners(event)",
							"rawListeners(event)",
							"emit(event, ...args)",
							"once(event, listener)",
							"callback = (...args) =>",
							"EventTarget",
							"constructor()",
							"typedListeners(type)",
							"addEventListener(type, listener)",
							"removeEventListener(type, listener)",
							"dispatchEvent(type, event)",
							"EventTarget",
							"getMethods = obj =>",
							"n =>",
							"(acc, n) =>",
							"eventify = self =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAATBwAAICBzdHJlcnIocmV0KQogIG51bWVycihyZXQpCiAgb2JqZXJyKGZuLCAuLi5hcmdzKQpTdGF0cwogIGNvbnN0cnVjdG9yKHN0KQogIGlzRGlyZWN0b3J5KCkKICBpc0NoYXJhY3RlckRldmljZSgpCiAgaXNCbG9ja0RldmljZSgpCiAgaXNGaWxlKCkKICBpc0ZJRk8oKQogIGlzU3ltYm9saWNMaW5rKCkKICBpc1NvY2tldCgpCiAgZ2V0IGVycm5vKCkKICBnZXQgZXJyc3RyKCkKICBidWZmZXIobGVuZ3RoKQogIGJ1ZmZlckZyb20oY2h1bmssIG9mZnNldCwgbGVuZ3RoKQogIGJ1ZmZlclNpemUoYnVmKQogIGJ1ZmZlclRvU3RyaW5nKGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgZm9wZW4oZmlsZW5hbWUsIGZsYWdzID0gJ3InLCBtb2RlID0gMG82NDQpCiAgZmRvcGVuKGZkLCBmbGFncyA9ICdyJykKICBmbHVzaFN5bmMoZmlsZSkKICBzZWVrKGZkLCBvZmZzZXQsIHdoZW5jZSkKICB0ZWxsKGZpbGUpCiAgc2l6ZVN5bmMoZmlsZSkKICBuYW1lU3luYyhmaWxlKQogIGdldGN3ZCgpCiAgY2hkaXIocGF0aCkKICBpc2F0dHkoZmlsZSkKICBmaWxlbm8oZmlsZSkKICByZWFkRmlsZVN5bmMoZmlsZSwgb3B0aW9ucyA9IHt9KQogIHdyaXRlRmlsZVN5bmMoZmlsZSwgZGF0YSwgb3ZlcndyaXRlID0gdHJ1ZSkKICBjbG9zZVN5bmMoZmQpCiAgZXhpc3RzU3luYyhwYXRoKQogIGxzdGF0U3luYyhwYXRoLCBjYikKICBta2RpclN5bmMocGF0aCwgbW9kZSA9IDBvNzc3KQogIG9wZW5TeW5jKGZpbGVuYW1lLCBmbGFncyA9ICdyJywgbW9kZSA9IDBvNjQ0KQogIHJlYWQoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgcmVhZFN5bmMoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgcmVhZGRpclN5bmMocGF0aCkKICByZWFkbGlua1N5bmMocGF0aCkKICByZWFscGF0aFN5bmMocGF0aCkKICByZW5hbWVTeW5jKG9sZG5hbWUsIG5ld25hbWUpCiAgc3RhdFN5bmMocGF0aCwgY2IpCiAgc3ltbGlua1N5bmModGFyZ2V0LCBwYXRoKQogIHRtcGZpbGVTeW5jKCkKICBta3N0ZW1wU3luYyh0ZW1wbGF0ZSkKICB0ZW1wbmFtU3luYyhkaXIsIHBmeCkKICB1bmxpbmtTeW5jKHBhdGgpCiAgd3JpdGUoZmQsIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCigpID0+CiAgd3JpdGVTeW5jKGZkLCBkYXRhLCBvZmZzZXQsIGxlbmd0aCkKICBwaXBlKCkKICBzZXRSZWFkSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIHNldFdyaXRlSGFuZGxlcihmaWxlLCBoYW5kbGVyKQogIG9uUmVhZChmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0UmVhZChmaWxlKQoocmVzb2x2ZSwgcmVqZWN0KSA9PgogICgpID0+CiAgb25Xcml0ZShmaWxlLCBoYW5kbGVyID0gbnVsbCkKICB3YWl0V3JpdGUoZmlsZSkKKHJlc29sdmUsIHJlamVjdCkgPT4KICAoKSA9PgogIHJlYWRBbGwoaW5wdXQsIGJ1ZlNpemUgPSAxMDI0KQogIHJlYWRBbGxTeW5jKGlucHV0LCBidWZTaXplID0gMTAyNCkKICBpbm90aWZ5X2V2ZW50CiAgY29uc3RydWN0b3Iob2JqID0ge30pCiAgc2V0IHdkKHZhbHVlKQogIGdldCB3ZCgpCiAgc2V0IG1hc2sodmFsdWUpCiAgZ2V0IG1hc2soKQogIHNldCBjb29raWUodmFsdWUpCiAgZ2V0IGNvb2tpZSgpCiAgc2V0IGxlbih2YWx1ZSkKICBnZXQgbGVuKCkKICBzZXQgbmFtZSh2YWx1ZSkKICBnZXQgbmFtZSgpCiAgc3RhdGljIGZyb20oYWRkcmVzcykKICBpbm90aWZ5X2V2ZW50CiAgdG9TdHJpbmcoKQogIHdhdGNoKGZpbGVuYW1lLCBvcHRpb25zID0ge30sIGNhbGxiYWNrID0gKGV2ZW50VHlwZSwgZmlsZW5hbWUpID0+IHt9KQogIGZpbGVuYW1lID0+CiAgZmlsZW5hbWUgPT4KICAoKSA9PgpFbmNvZGluZzJCeXRlcyhlbmNvZGluZykAAAAAAAAAANQBAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1933,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								867,
								890
							],
							[
								973,
								999
							],
							[
								1012,
								1026
							],
							[
								1341,
								1365
							],
							[
								1641,
								1647
							],
							[
								1652,
								1687
							],
							[
								2003,
								2031
							],
							[
								2472,
								2476
							],
							[
								2481,
								2529
							],
							[
								2889,
								2899
							],
							[
								2937,
								2953
							],
							[
								3071,
								3090
							],
							[
								3185,
								3204
							],
							[
								3326,
								3342
							],
							[
								3443,
								3459
							],
							[
								3608,
								3623
							],
							[
								3789,
								3806
							],
							[
								4085,
								4106
							],
							[
								4282,
								4299
							],
							[
								4487,
								4502
							],
							[
								4524,
								4542
							],
							[
								4718,
								4745
							],
							[
								5099,
								5116
							],
							[
								5404,
								5436
							],
							[
								5842,
								5860
							],
							[
								6094,
								6115
							],
							[
								6283,
								6290
							],
							[
								6706,
								6710
							],
							[
								6778,
								6787
							],
							[
								6849,
								6863
							],
							[
								6911,
								6922
							],
							[
								7293,
								7305
							],
							[
								7389,
								7420
							],
							[
								7850,
								7867
							],
							[
								7904,
								7924
							],
							[
								8429,
								8433
							],
							[
								8475,
								8508
							],
							[
								8519,
								8522
							],
							[
								8567,
								8583
							],
							[
								8728,
								8762
							],
							[
								8773,
								8776
							],
							[
								8836,
								8842
							],
							[
								8864,
								8879
							],
							[
								9113,
								9121
							],
							[
								9126,
								9149
							],
							[
								9180,
								9199
							],
							[
								9252,
								9268
							],
							[
								9316,
								9346
							],
							[
								9579,
								9611
							],
							[
								9850,
								9893
							],
							[
								10157,
								10175
							],
							[
								10224,
								10231
							],
							[
								10738,
								10746
							],
							[
								10798,
								10808
							],
							[
								11263,
								11297
							],
							[
								11373,
								11389
							],
							[
								11438,
								11465
							],
							[
								11624,
								11656
							],
							[
								12138,
								12156
							],
							[
								12290,
								12302
							],
							[
								12340,
								12352
							],
							[
								12368,
								12378
							],
							[
								12475,
								12484
							],
							[
								12516,
								12534
							],
							[
								12633,
								12654
							],
							[
								12718,
								12736
							],
							[
								13210,
								13224
							],
							[
								13286,
								13293
							],
							[
								13311,
								13335
							],
							[
								13508,
								13527
							],
							[
								13652,
								13668
							],
							[
								13749,
								13763
							],
							[
								13804,
								13817
							],
							[
								13861,
								13876
							],
							[
								13907,
								13921
							],
							[
								14601,
								14615
							],
							[
								14768,
								14791
							],
							[
								14850,
								14873
							],
							[
								14949,
								14953
							],
							[
								15055,
								15077
							],
							[
								15317,
								15325
							],
							[
								15371,
								15389
							],
							[
								15428,
								15441
							],
							[
								15468,
								15487
							],
							[
								15526,
								15539
							],
							[
								15573,
								15591
							],
							[
								15630,
								15643
							],
							[
								15672,
								15687
							],
							[
								15745,
								15766
							],
							[
								15798,
								15811
							],
							[
								15845,
								15867
							],
							[
								15911,
								15936
							],
							[
								15968,
								15981
							],
							[
								16043,
								16058
							],
							[
								16108,
								16124
							],
							[
								16244,
								16251
							],
							[
								18536,
								18544
							],
							[
								18565,
								18581
							],
							[
								18605,
								18613
							],
							[
								18633,
								18661
							],
							[
								18712,
								18734
							],
							[
								18819,
								18839
							],
							[
								18899,
								18915
							],
							[
								19012,
								19027
							],
							[
								19064,
								19079
							],
							[
								19155,
								19165
							],
							[
								19567,
								19571
							],
							[
								19626,
								19634
							],
							[
								19724,
								19728
							],
							[
								19746,
								19769
							],
							[
								19933,
								19943
							],
							[
								20131,
								20149
							],
							[
								20199,
								20218
							],
							[
								20260,
								20270
							],
							[
								20333,
								20344
							],
							[
								20381,
								20392
							],
							[
								20463,
								20475
							],
							[
								20717,
								20721
							],
							[
								20812,
								20816
							],
							[
								20875,
								20898
							],
							[
								21153,
								21164
							],
							[
								21187,
								21201
							],
							[
								21270,
								21281
							],
							[
								21306,
								21320
							],
							[
								21435,
								21445
							],
							[
								21476,
								21484
							],
							[
								21500,
								21515
							],
							[
								21546,
								21554
							],
							[
								21570,
								21580
							],
							[
								21808,
								21823
							],
							[
								21850,
								21854
							],
							[
								21877,
								21881
							],
							[
								21900,
								21904
							],
							[
								22053,
								22060
							],
							[
								22078,
								22101
							],
							[
								22224,
								22235
							],
							[
								22268,
								22282
							],
							[
								22344,
								22357
							],
							[
								22395,
								22411
							],
							[
								22455,
								22465
							],
							[
								22489,
								22497
							],
							[
								22530,
								22545
							],
							[
								22569,
								22577
							],
							[
								22741,
								22757
							],
							[
								22788,
								22795
							],
							[
								22818,
								22822
							],
							[
								22841,
								22848
							],
							[
								23009,
								23018
							],
							[
								23023,
								23056
							],
							[
								23146,
								23157
							],
							[
								23189,
								23203
							],
							[
								23272,
								23285
							],
							[
								23314,
								23330
							],
							[
								23374,
								23386
							],
							[
								23413,
								23421
							],
							[
								23444,
								23455
							],
							[
								23482,
								23490
							],
							[
								23516,
								23527
							],
							[
								23554,
								23562
							],
							[
								23585,
								23600
							],
							[
								23627,
								23635
							],
							[
								23672,
								23686
							],
							[
								23706,
								23719
							],
							[
								23867,
								23884
							],
							[
								23904,
								23917
							],
							[
								24069,
								24089
							],
							[
								24109,
								24122
							],
							[
								24256,
								24271
							],
							[
								24298,
								24325
							],
							[
								24345,
								24358
							],
							[
								24581,
								24590
							],
							[
								24656,
								24665
							],
							[
								24676,
								24694
							],
							[
								24716,
								24778
							],
							[
								24847,
								24879
							],
							[
								24975,
								24997
							],
							[
								25055,
								25098
							],
							[
								25344,
								25369
							],
							[
								25416,
								25446
							],
							[
								25464,
								25482
							],
							[
								26571,
								26606
							],
							[
								26729,
								26745
							],
							[
								26774,
								26795
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"applyPath = (path, obj) =>",
							"(acc, part) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"querySelector(str)",
							"querySelectorAll(str)",
							"path =>",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"path(arg, path = [])",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"c =>",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADUAQAAICBpbmRleE9mID0gKGhheXN0YWNrLCBuZWVkbGUpID0+CkV2ZW50RW1pdHRlcgogIGNvbnN0cnVjdG9yKCkKICBvbihldmVudCwgbGlzdGVuZXIpCiAgcmVtb3ZlTGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyKQogIHJlbW92ZUFsbExpc3RlbmVycyhldmVudCkKICByYXdMaXN0ZW5lcnMoZXZlbnQpCiAgZW1pdChldmVudCwgLi4uYXJncykKICBvbmNlKGV2ZW50LCBsaXN0ZW5lcikKICBjYWxsYmFjayA9ICguLi5hcmdzKSA9PgpFdmVudFRhcmdldAogIGNvbnN0cnVjdG9yKCkKICB0eXBlZExpc3RlbmVycyh0eXBlKQogIGFkZEV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpCiAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikKICBkaXNwYXRjaEV2ZW50KHR5cGUsIGV2ZW50KQpFdmVudFRhcmdldAogIGdldE1ldGhvZHMgPSBvYmogPT4KICBuID0+CihhY2MsIG4pID0+CiAgZXZlbnRpZnkgPSBzZWxmID0+AAAAAAAAAADFDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1934,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								539,
								559
							],
							[
								596,
								616
							],
							[
								648,
								655
							],
							[
								838,
								850
							],
							[
								930,
								952
							],
							[
								1904,
								1932
							],
							[
								2988,
								3005
							],
							[
								3812,
								3854
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADFDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGFwcGx5UGF0aCA9IChwYXRoLCBvYmopID0+CihhY2MsIHBhcnQpID0+CiAgY2hlY2tOb2RlKG5vZGUpClBhcnNlcgogIHBhcnNlRnJvbVN0cmluZyhzdHIsIGZpbGUsIC4uLnJlc3QpCkdldE5vZGUob2JqLCBvd25lcikKTm9kZQogIGNvbnN0cnVjdG9yKG9iaiwgcGFyZW50LCBwcm90byA9IE5vZGUucHJvdG90eXBlKQogIGdldCBwYXRoKCkKICBnZXQgcGFyZW50Tm9kZSgpCiAgZ2V0IHBhcmVudEVsZW1lbnQoKQogIGdldCBvd25lckRvY3VtZW50KCkKICBnZXQgY2hpbGROb2RlcygpCiAgZ2V0IGZpcnN0Q2hpbGQoKQogIGdldCBsYXN0Q2hpbGQoKQogIGdldCBuZXh0U2libGluZygpCiAgZ2V0IHByZXZpb3VzU2libGluZygpCiAgYXBwZW5kQ2hpbGQobm9kZSkKICAoKSA9PgogIHZhbHVlID0+CiAgaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZk5vZGUpCiAgcmVtb3ZlQ2hpbGQobm9kZSkKICByZXBsYWNlQ2hpbGQobmV3Q2hpbGQsIG9sZENoaWxkKQogIHF1ZXJ5U2VsZWN0b3Ioc3RyKQogIHF1ZXJ5U2VsZWN0b3JBbGwoc3RyKQogIHBhdGggPT4KTm9kZQogIHJhdyhub2RlKQogIGNoaWxkcmVuKG5vZGUpCiAgb3duZXIobm9kZSkKICBwYXJlbnQobm9kZSkKICBoaWVyKG5vZGUsIHByZWQgPSBub2RlID0+IHRydWUpCih7IG5vZGVUeXBlIH0pID0+CiAgcGF0aChhcmcsIHBhdGggPSBbXSkKTm9kZQpNYWtlQ2FjaGUoY3Rvciwgc3RvcmUgPSAKKCkpCiAgKGssIC4uLmFyZ3MpID0+Ck1ha2VDYWNoZTIoY3Rvciwgc3RvcmUgPSAKKCkpCiAga2V5ID0+CiAgKGlkLCBvd25lcikgPT4KTm9kZUxpc3QKICBjb25zdHJ1Y3RvcihvYmosIG93bmVyKQogIGlzRWxlbWVudCA9IHByb3AgPT4KICBpc0xpc3QgPSBwcm9wID0+CiAgd3JhcEVsZW1lbnQgPSAodmFsdWUsIHByb3ApID0+CiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICh0YXJnZXQsIHByb3ApID0+CiAgb3duS2V5czogdGFyZ2V0ID0+CiAgcHJvcCA9PgpOb2RlTGlzdAogIGdldCBwYXRoKCkKTmFtZWROb2RlTWFwKG9iaiwgb3duZXIpCiAgaXNBdHRyID0gcHJvcCA9PgogIHdyYXBBdHRyID0gKHZhbHVlLCBwcm9wKSA9PgogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgb3duS2V5czogdGFyZ2V0ID0+Ck5hbWVkTm9kZU1hcApOYW1lZE5vZGVNYXAKICBnZXQgcGF0aCgpCiAgaXRlbShrZXkpCiAgc2V0TmFtZWRJdGVtKGF0dHIpCiAgcmVtb3ZlTmFtZWRJdGVtKG5hbWUpCiAgZ2V0TmFtZWRJdGVtKG5hbWUpCihhY2MsIHByb3ApID0+CkVsZW1lbnQKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCkKICBnZXQgcGFyZW50RWxlbWVudCgpCiAgZ2V0IGF0dHJpYnV0ZXMoKQogIHNldCB0YWdOYW1lKHYpCiAgZ2V0IHRhZ05hbWUoKQogIHNldCBub2RlTmFtZSh2KQogIGdldCBub2RlTmFtZSgpCiAgZ2V0IGNoaWxkcmVuKCkKICBnZXQgY2hpbGRFbGVtZW50Q291bnQoKQogIGdldCBmaXJzdEVsZW1lbnRDaGlsZCgpCiAgbiA9PgogIGdldCBsYXN0RWxlbWVudENoaWxkKCkKICBnZXQgaWQoKQogIGdldEF0dHJpYnV0ZShuYW1lKQogIGF0dHJpYnV0ZXMgPT4KICBnZXRBdHRyaWJ1dGVOYW1lcygpCiAgYXR0cmlidXRlcyA9PgogIGhhc0F0dHJpYnV0ZShuYW1lKQogIGF0dHJpYnV0ZXMgPT4KICBoYXNBdHRyaWJ1dGVzKCkKICByZW1vdmVBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgZ2V0QXR0cmlidXRlTm9kZShuYW1lKQogIHNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkKICBhdHRyaWJ1dGVzID0+CihvYmosIG93bmVyKSA9PgogIGF0dHJpYnV0ZXMoZWxlbSkKRWxlbWVudApEb2N1bWVudAogIGNvbnN0cnVjdG9yKG9iaikKRG9jdW1lbnQKICBjcmVhdGVBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgY3JlYXRlRWxlbWVudCh0YWdOYW1lKQogIGNyZWF0ZVRleHROb2RlKHRleHQpCiAgcHJlZCA9IChuLCBrKSA9PgogIChuLCBrKSA9PgogIChuLCBwKSA9PgogIGdldCBib2R5KCkKICBjID0+CkRvY3VtZW50CkF0dHIKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCBwYXRoKCkKICBnZXQgb3duZXJFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IG5hbWUoKQogIHNldCBuYW1lKHYpCiAgZ2V0IHZhbHVlKCkKICBzZXQgdmFsdWUodikKQXR0cgpUZXh0CiAgY29uc3RydWN0b3Ioa2V5LCBvd25lcikKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCBkYXRhKCkKICB2YWx1ZSA9PgogIGdldCBub2RlVmFsdWUoKQogIHZhbHVlID0+CiAgdG9TdHJpbmcoKQooa2V5LCBvd25lcikgPT4KVGV4dApOb2RlClRleHQKQ29tbWVudAogIGNvbnN0cnVjdG9yKHJhdywgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogICgpID0+CiAgdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9Pgoobm9kZSwgb3duZXIpID0+CkNvbW1lbnQKTm9kZQpDb21tZW50ClRva2VuTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCBrZXkgPSAnY2xhc3MnKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGxlbmd0aCgpCiAgdmFsdWUgPT4KICBnZXQgdmFsdWUoKQogIHZhbHVlID0+CiAgaXRlbShpbmRleCkKICB2YWx1ZSA9PgogIGNvbnRhaW5zKHRva2VuKQogIHZhbHVlID0+CiAgYWRkKC4uLnRva2VucykKKGFyciwgc2V0KSA9PgogIHJlbW92ZSguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICB0b2dnbGUodG9rZW4sIGZvcmNlKQooYXJyLCBzZXQpID0+CiAgc3VwcG9ydHModG9rZW4pCiAgcmVwbGFjZShvbGRUb2tlbiwgbmV3VG9rZW4pCihhcnIsIHNldCkgPT4KVG9rZW5MaXN0ClRva2VuTGlzdAogIChjb250YWluZXIsIGkpID0+Ck1lbWJyYW5lKGluc3RhbmNlLCBvYmosIHByb3RvLCB3cmFwUHJvcCwgd3JhcEVsZW1lbnQpCiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBoYXM6ICh0YXJnZXQsIHByb3ApID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldFByb3RvdHlwZU9mOiB0YXJnZXQgPT4KICBzZXRQcm90b3R5cGVPZjogKHRhcmdldCwgcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KRmFjdG9yeShyYXcsIG93bmVyLCBjdG9yKQogIGlzQXJyYXkgPSBhcmcgPT4KICBpc0F0dHJpYnV0ZXMgPSBhcmcgPT4AAAAAAAAAAIwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1935,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								541,
								561
							],
							[
								598,
								618
							],
							[
								650,
								657
							],
							[
								840,
								852
							],
							[
								932,
								954
							],
							[
								1906,
								1934
							],
							[
								2990,
								3007
							],
							[
								3814,
								3856
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAIwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1936,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								1133,
								1147
							],
							[
								1227,
								1250
							],
							[
								1393,
								1410
							],
							[
								1451,
								1468
							],
							[
								1501,
								1510
							],
							[
								1544,
								1554
							],
							[
								1588,
								1598
							],
							[
								1633,
								1644
							],
							[
								1678,
								1688
							],
							[
								1723,
								1734
							],
							[
								1771,
								1784
							],
							[
								1822,
								1836
							],
							[
								1872,
								1884
							],
							[
								1920,
								1932
							],
							[
								1990,
								2010
							],
							[
								2282,
								2298
							],
							[
								2352,
								2371
							],
							[
								2406,
								2422
							],
							[
								2464,
								2479
							],
							[
								2500,
								2504
							],
							[
								2542,
								2576
							],
							[
								2599,
								2631
							],
							[
								2654,
								2697
							],
							[
								4681,
								4700
							],
							[
								4798,
								4814
							],
							[
								4876,
								4894
							],
							[
								4958,
								4977
							],
							[
								5042,
								5051
							],
							[
								5106,
								5123
							],
							[
								5186,
								5203
							],
							[
								5266,
								5280
							],
							[
								5340,
								5355
							],
							[
								5416,
								5431
							],
							[
								5492,
								5500
							],
							[
								5554,
								5566
							],
							[
								5624,
								5634
							],
							[
								5690,
								5701
							],
							[
								5758,
								5766
							],
							[
								5820,
								5842
							],
							[
								5910,
								5925
							],
							[
								5986,
								6008
							],
							[
								6076,
								6092
							],
							[
								6154,
								6170
							],
							[
								6232,
								6244
							],
							[
								6302,
								6314
							],
							[
								6372,
								6385
							],
							[
								6444,
								6462
							],
							[
								6520,
								6538
							],
							[
								6602,
								6624
							],
							[
								6692,
								6719
							],
							[
								6792,
								6809
							],
							[
								6866,
								6883
							],
							[
								6940,
								6957
							],
							[
								7004,
								7020
							],
							[
								7103,
								7119
							],
							[
								7191,
								7207
							],
							[
								7279,
								7296
							],
							[
								7353,
								7373
							],
							[
								7432,
								7452
							],
							[
								7611,
								7630
							],
							[
								7706,
								7713
							],
							[
								7742,
								7762
							],
							[
								7832,
								7847
							],
							[
								7908,
								7934
							],
							[
								8005,
								8021
							],
							[
								8077,
								8090
							],
							[
								8167,
								8185
							],
							[
								8267,
								8280
							],
							[
								8345,
								8359
							],
							[
								8461,
								8487
							],
							[
								8533,
								8558
							],
							[
								8643,
								8685
							],
							[
								8824,
								8864
							],
							[
								11798,
								11841
							],
							[
								12258,
								12293
							],
							[
								12449,
								12467
							],
							[
								12501,
								12506
							],
							[
								12596,
								12623
							],
							[
								12795,
								12812
							],
							[
								12813,
								12822
							],
							[
								12874,
								12891
							],
							[
								12892,
								12901
							],
							[
								12961,
								12978
							],
							[
								12979,
								13002
							],
							[
								13058,
								13082
							],
							[
								15719,
								15747
							],
							[
								16183,
								16187
							],
							[
								16315,
								16328
							],
							[
								16644,
								16656
							],
							[
								16919,
								16932
							],
							[
								17037,
								17051
							],
							[
								17944,
								17972
							],
							[
								18088,
								18101
							],
							[
								18213,
								18239
							],
							[
								18434,
								18482
							],
							[
								18530,
								18642
							],
							[
								18747,
								18770
							],
							[
								18919,
								18971
							],
							[
								19065,
								19081
							],
							[
								19165,
								19176
							],
							[
								19289,
								19293
							],
							[
								19572,
								19605
							],
							[
								19719,
								19771
							],
							[
								19945,
								19981
							],
							[
								20138,
								20154
							],
							[
								20172,
								20194
							],
							[
								20307,
								20313
							],
							[
								20417,
								20430
							],
							[
								21838,
								21880
							],
							[
								22075,
								22106
							],
							[
								22156,
								22198
							],
							[
								22318,
								22342
							],
							[
								22562,
								22572
							],
							[
								22625,
								22629
							],
							[
								22668,
								22695
							],
							[
								22742,
								22754
							],
							[
								22824,
								22836
							],
							[
								22899,
								22924
							],
							[
								22969,
								23000
							],
							[
								23011,
								23028
							],
							[
								23169,
								23204
							],
							[
								23252,
								23279
							],
							[
								23370,
								23408
							],
							[
								23617,
								23665
							],
							[
								24253,
								24280
							],
							[
								24483,
								24497
							],
							[
								24546,
								24552
							],
							[
								24593,
								24659
							],
							[
								24661,
								24665
							],
							[
								24823,
								24830
							],
							[
								24922,
								24932
							],
							[
								25043,
								25052
							],
							[
								25158,
								25184
							],
							[
								25317,
								25348
							],
							[
								25523,
								25542
							],
							[
								25593,
								25601
							],
							[
								25630,
								25664
							],
							[
								25808,
								25843
							],
							[
								26057,
								26061
							],
							[
								26094,
								26098
							],
							[
								26159,
								26201
							],
							[
								26395,
								26419
							],
							[
								26590,
								26621
							],
							[
								26790,
								26797
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function symmetricDifference(a, b)",
							"x =>",
							"x =>",
							" function* difference(container, excludes)",
							" function union(...args)",
							" function intersection(...args)",
							"item =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAEkLAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1937,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								1130,
								1144
							],
							[
								1224,
								1247
							],
							[
								1390,
								1407
							],
							[
								1448,
								1465
							],
							[
								1498,
								1507
							],
							[
								1541,
								1551
							],
							[
								1585,
								1595
							],
							[
								1630,
								1641
							],
							[
								1675,
								1685
							],
							[
								1720,
								1731
							],
							[
								1768,
								1781
							],
							[
								1819,
								1833
							],
							[
								1869,
								1881
							],
							[
								1917,
								1929
							],
							[
								1987,
								2007
							],
							[
								2279,
								2295
							],
							[
								2349,
								2368
							],
							[
								2403,
								2419
							],
							[
								2461,
								2476
							],
							[
								2497,
								2501
							],
							[
								2539,
								2573
							],
							[
								2596,
								2628
							],
							[
								2651,
								2694
							],
							[
								4678,
								4697
							],
							[
								4795,
								4811
							],
							[
								4873,
								4891
							],
							[
								4955,
								4974
							],
							[
								5039,
								5048
							],
							[
								5103,
								5120
							],
							[
								5183,
								5200
							],
							[
								5263,
								5277
							],
							[
								5337,
								5352
							],
							[
								5413,
								5428
							],
							[
								5489,
								5497
							],
							[
								5551,
								5563
							],
							[
								5621,
								5631
							],
							[
								5687,
								5698
							],
							[
								5755,
								5763
							],
							[
								5817,
								5839
							],
							[
								5907,
								5922
							],
							[
								5983,
								6005
							],
							[
								6073,
								6089
							],
							[
								6151,
								6167
							],
							[
								6229,
								6241
							],
							[
								6299,
								6311
							],
							[
								6369,
								6382
							],
							[
								6441,
								6459
							],
							[
								6517,
								6535
							],
							[
								6599,
								6621
							],
							[
								6689,
								6716
							],
							[
								6789,
								6806
							],
							[
								6863,
								6880
							],
							[
								6937,
								6954
							],
							[
								7001,
								7017
							],
							[
								7100,
								7116
							],
							[
								7188,
								7204
							],
							[
								7276,
								7293
							],
							[
								7350,
								7370
							],
							[
								7429,
								7449
							],
							[
								7608,
								7627
							],
							[
								7703,
								7710
							],
							[
								7739,
								7759
							],
							[
								7829,
								7844
							],
							[
								7905,
								7931
							],
							[
								8002,
								8018
							],
							[
								8074,
								8087
							],
							[
								8164,
								8182
							],
							[
								8264,
								8277
							],
							[
								8342,
								8356
							],
							[
								8458,
								8484
							],
							[
								8530,
								8555
							],
							[
								8640,
								8682
							],
							[
								8821,
								8861
							],
							[
								11795,
								11838
							],
							[
								12255,
								12290
							],
							[
								12446,
								12464
							],
							[
								12498,
								12503
							],
							[
								12593,
								12620
							],
							[
								12792,
								12809
							],
							[
								12810,
								12819
							],
							[
								12871,
								12888
							],
							[
								12889,
								12898
							],
							[
								12958,
								12975
							],
							[
								12976,
								12999
							],
							[
								13055,
								13079
							],
							[
								15716,
								15744
							],
							[
								16180,
								16184
							],
							[
								16312,
								16325
							],
							[
								16641,
								16653
							],
							[
								16916,
								16929
							],
							[
								17034,
								17048
							],
							[
								17941,
								17969
							],
							[
								18085,
								18098
							],
							[
								18210,
								18236
							],
							[
								18431,
								18479
							],
							[
								18527,
								18639
							],
							[
								18744,
								18767
							],
							[
								18916,
								18968
							],
							[
								19062,
								19078
							],
							[
								19162,
								19173
							],
							[
								19286,
								19290
							],
							[
								19569,
								19602
							],
							[
								19716,
								19768
							],
							[
								19942,
								19978
							],
							[
								20135,
								20151
							],
							[
								20169,
								20191
							],
							[
								20304,
								20310
							],
							[
								20414,
								20427
							],
							[
								21835,
								21877
							],
							[
								22072,
								22103
							],
							[
								22153,
								22195
							],
							[
								22315,
								22339
							],
							[
								22559,
								22569
							],
							[
								22622,
								22626
							],
							[
								22665,
								22692
							],
							[
								22739,
								22751
							],
							[
								22821,
								22833
							],
							[
								22896,
								22921
							],
							[
								22966,
								22997
							],
							[
								23008,
								23025
							],
							[
								23166,
								23201
							],
							[
								23249,
								23276
							],
							[
								23367,
								23405
							],
							[
								23614,
								23662
							],
							[
								24250,
								24277
							],
							[
								24480,
								24494
							],
							[
								24543,
								24549
							],
							[
								24590,
								24656
							],
							[
								24658,
								24662
							],
							[
								24820,
								24827
							],
							[
								24919,
								24929
							],
							[
								25040,
								25049
							],
							[
								25155,
								25181
							],
							[
								25314,
								25345
							],
							[
								25520,
								25539
							],
							[
								25590,
								25598
							],
							[
								25627,
								25661
							],
							[
								25805,
								25840
							],
							[
								26054,
								26058
							],
							[
								26091,
								26095
							],
							[
								26156,
								26198
							],
							[
								26392,
								26416
							],
							[
								26587,
								26618
							],
							[
								26787,
								26794
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function symmetricDifference(a, b)",
							"x =>",
							"x =>",
							" function* difference(container, excludes)",
							" function union(...args)",
							" function intersection(...args)",
							"item =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABJCwAAICBzbGljZUZuID0geCA9PgpBcnJheUJ1ZmZlcihzdGFydCwgZW5kKQpTaGFyZWRBcnJheUJ1ZmZlcgpVaW50OENsYW1wZWRBcnJheQpJbnQ4QXJyYXkKVWludDhBcnJheQpJbnQxNkFycmF5ClVpbnQxNkFycmF5CkludDMyQXJyYXkKVWludDMyQXJyYXkKQmlnSW50NjRBcnJheQpCaWdVaW50NjRBcnJheQpGbG9hdDMyQXJyYXkKRmxvYXQ2NEFycmF5CiAgc2xpY2UgPSAoeCwgcywgZSkgPT4KICBzdHJpbmdpZnkgPSB2ID0+CiAgZm9ybWF0TnVtYmVyID0gbiA9PgogIGlzTmF0aXZlID0gZm4gPT4KICB1dGlsKCkKICB1dGlsCkFzeW5jRnVuY3Rpb24gPSBmdW5jdGlvbiB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGN0b3IgPT4KICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNDb25zdHJ1Y3Rvcih2KQogIGlzSXRlcmFibGUodikKICBpc0FzeW5jSXRlcmFibGUodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIGdldE9wdChvcHRpb25zID0ge30sIGFyZ3MpCiAgZmluZE9wdCA9IGFyZyA9PgooW29wdG5hbWUsIG9wdGlvbl0pID0+CiAgb3B0ID0+CihhY2MsIGFyZykgPT4KICB0b1VuaXhUaW1lKGRhdGVPYmosIHV0YyA9IGZhbHNlKQogIHVuaXhUaW1lKHV0YyA9IGZhbHNlKQogIGZyb21Vbml4VGltZShlcG9jaCwgdXRjID0gZmFsc2UpCiAgcmFuZ2UoLi4uYXJncykKICAodiwgaykgPT4KICBuID0+CiAgcmVwZWF0ZXIobiwgd2hhdCkKKCkKKCkKICByZXBlYXQobiwgd2hhdCkKICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4KICBwdXNoVW5pcXVlKGFyciwgLi4uYXJncykKICBzeW1tZXRyaWNEaWZmZXJlbmNlKGEsIGIpCiAgeCA9PgogIHggPT4KICBkaWZmZXJlbmNlKGNvbnRhaW5lciwgZXhjbHVkZXMpCiAgdW5pb24oLi4uYXJncykKICBpbnRlcnNlY3Rpb24oLi4uYXJncykKICBpdGVtID0+AAAAAAAAAABJCwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1938,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								1128,
								1142
							],
							[
								1222,
								1245
							],
							[
								1388,
								1405
							],
							[
								1446,
								1463
							],
							[
								1496,
								1505
							],
							[
								1539,
								1549
							],
							[
								1583,
								1593
							],
							[
								1628,
								1639
							],
							[
								1673,
								1683
							],
							[
								1718,
								1729
							],
							[
								1766,
								1779
							],
							[
								1817,
								1831
							],
							[
								1867,
								1879
							],
							[
								1915,
								1927
							],
							[
								1985,
								2005
							],
							[
								2277,
								2293
							],
							[
								2347,
								2366
							],
							[
								2401,
								2417
							],
							[
								2459,
								2474
							],
							[
								2495,
								2499
							],
							[
								2537,
								2571
							],
							[
								2594,
								2626
							],
							[
								2649,
								2692
							],
							[
								4676,
								4695
							],
							[
								4793,
								4809
							],
							[
								4871,
								4889
							],
							[
								4953,
								4972
							],
							[
								5037,
								5046
							],
							[
								5101,
								5118
							],
							[
								5181,
								5198
							],
							[
								5261,
								5275
							],
							[
								5335,
								5350
							],
							[
								5411,
								5426
							],
							[
								5487,
								5495
							],
							[
								5549,
								5561
							],
							[
								5619,
								5629
							],
							[
								5685,
								5696
							],
							[
								5753,
								5761
							],
							[
								5815,
								5837
							],
							[
								5905,
								5920
							],
							[
								5981,
								6003
							],
							[
								6071,
								6087
							],
							[
								6149,
								6165
							],
							[
								6227,
								6239
							],
							[
								6297,
								6309
							],
							[
								6367,
								6380
							],
							[
								6439,
								6457
							],
							[
								6515,
								6533
							],
							[
								6597,
								6619
							],
							[
								6687,
								6714
							],
							[
								6787,
								6804
							],
							[
								6861,
								6878
							],
							[
								6935,
								6952
							],
							[
								6999,
								7015
							],
							[
								7098,
								7114
							],
							[
								7186,
								7202
							],
							[
								7274,
								7291
							],
							[
								7348,
								7368
							],
							[
								7427,
								7447
							],
							[
								7606,
								7625
							],
							[
								7701,
								7708
							],
							[
								7737,
								7757
							],
							[
								7827,
								7842
							],
							[
								7903,
								7929
							],
							[
								8000,
								8016
							],
							[
								8072,
								8085
							],
							[
								8162,
								8180
							],
							[
								8262,
								8275
							],
							[
								8340,
								8354
							],
							[
								8456,
								8482
							],
							[
								8528,
								8553
							],
							[
								8638,
								8680
							],
							[
								8819,
								8859
							],
							[
								11793,
								11836
							],
							[
								12253,
								12288
							],
							[
								12444,
								12462
							],
							[
								12496,
								12501
							],
							[
								12591,
								12618
							],
							[
								12790,
								12807
							],
							[
								12808,
								12817
							],
							[
								12869,
								12886
							],
							[
								12887,
								12896
							],
							[
								12956,
								12973
							],
							[
								12974,
								12997
							],
							[
								13053,
								13077
							],
							[
								15714,
								15742
							],
							[
								16178,
								16182
							],
							[
								16310,
								16323
							],
							[
								16639,
								16651
							],
							[
								16914,
								16927
							],
							[
								17032,
								17046
							],
							[
								17939,
								17967
							],
							[
								18083,
								18096
							],
							[
								18208,
								18234
							],
							[
								18429,
								18477
							],
							[
								18525,
								18637
							],
							[
								18742,
								18765
							],
							[
								18914,
								18966
							],
							[
								19060,
								19076
							],
							[
								19160,
								19171
							],
							[
								19284,
								19288
							],
							[
								19567,
								19600
							],
							[
								19714,
								19766
							],
							[
								19940,
								19976
							],
							[
								20133,
								20149
							],
							[
								20167,
								20189
							],
							[
								20302,
								20308
							],
							[
								20412,
								20425
							],
							[
								21833,
								21875
							],
							[
								22070,
								22101
							],
							[
								22151,
								22193
							],
							[
								22313,
								22337
							],
							[
								22557,
								22567
							],
							[
								22620,
								22624
							],
							[
								22663,
								22690
							],
							[
								22737,
								22749
							],
							[
								22819,
								22831
							],
							[
								22894,
								22919
							],
							[
								22964,
								22995
							],
							[
								23006,
								23023
							],
							[
								23164,
								23199
							],
							[
								23247,
								23274
							],
							[
								23365,
								23403
							],
							[
								23612,
								23660
							],
							[
								24248,
								24275
							],
							[
								24478,
								24492
							],
							[
								24541,
								24547
							],
							[
								24588,
								24654
							],
							[
								24656,
								24660
							],
							[
								24818,
								24825
							],
							[
								24917,
								24927
							],
							[
								25038,
								25047
							],
							[
								25153,
								25179
							],
							[
								25312,
								25343
							],
							[
								25518,
								25537
							],
							[
								25588,
								25596
							],
							[
								25625,
								25659
							],
							[
								25803,
								25838
							],
							[
								26052,
								26056
							],
							[
								26089,
								26093
							],
							[
								26154,
								26196
							],
							[
								26390,
								26414
							],
							[
								26585,
								26616
							],
							[
								26785,
								26792
							]
						],
						"symlist":
						[
							"sliceFn = x =>",
							"ArrayBuffer(start, end)",
							"SharedArrayBuffer",
							"Uint8ClampedArray",
							"Int8Array",
							"Uint8Array",
							"Int16Array",
							"Uint16Array",
							"Int32Array",
							"Uint32Array",
							"BigInt64Array",
							"BigUint64Array",
							"Float32Array",
							"Float64Array",
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"util",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>",
							" function pushUnique(arr, ...args)",
							" function symmetricDifference(a, b)",
							"x =>",
							"x =>",
							" function* difference(container, excludes)",
							" function union(...args)",
							" function intersection(...args)",
							"item =>"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1939,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								541,
								561
							],
							[
								598,
								618
							],
							[
								650,
								657
							],
							[
								840,
								852
							],
							[
								932,
								954
							],
							[
								1906,
								1934
							],
							[
								2990,
								3007
							],
							[
								3814,
								3856
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABJCwAAICBzbGljZUZuID0geCA9PgpBcnJheUJ1ZmZlcihzdGFydCwgZW5kKQpTaGFyZWRBcnJheUJ1ZmZlcgpVaW50OENsYW1wZWRBcnJheQpJbnQ4QXJyYXkKVWludDhBcnJheQpJbnQxNkFycmF5ClVpbnQxNkFycmF5CkludDMyQXJyYXkKVWludDMyQXJyYXkKQmlnSW50NjRBcnJheQpCaWdVaW50NjRBcnJheQpGbG9hdDMyQXJyYXkKRmxvYXQ2NEFycmF5CiAgc2xpY2UgPSAoeCwgcywgZSkgPT4KICBzdHJpbmdpZnkgPSB2ID0+CiAgZm9ybWF0TnVtYmVyID0gbiA9PgogIGlzTmF0aXZlID0gZm4gPT4KICB1dGlsKCkKICB1dGlsCkFzeW5jRnVuY3Rpb24gPSBmdW5jdGlvbiB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGN0b3IgPT4KICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNDb25zdHJ1Y3Rvcih2KQogIGlzSXRlcmFibGUodikKICBpc0FzeW5jSXRlcmFibGUodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIGdldE9wdChvcHRpb25zID0ge30sIGFyZ3MpCiAgZmluZE9wdCA9IGFyZyA9PgooW29wdG5hbWUsIG9wdGlvbl0pID0+CiAgb3B0ID0+CihhY2MsIGFyZykgPT4KICB0b1VuaXhUaW1lKGRhdGVPYmosIHV0YyA9IGZhbHNlKQogIHVuaXhUaW1lKHV0YyA9IGZhbHNlKQogIGZyb21Vbml4VGltZShlcG9jaCwgdXRjID0gZmFsc2UpCiAgcmFuZ2UoLi4uYXJncykKICAodiwgaykgPT4KICBuID0+CiAgcmVwZWF0ZXIobiwgd2hhdCkKKCkKKCkKICByZXBlYXQobiwgd2hhdCkKICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgYXJyYXlGYWNhZGUocHJvdG8sIGl0ZW1GbiA9IChjb250YWluZXIsIGkpID0+IGNvbnRhaW5lci4KKGkpKQoqa2V5cygpCiplbnRyaWVzKCkKKnZhbHVlcygpCiAgZm9yRWFjaChjYWxsYmFjaywgdGhpc0FyZykKICByZWR1Y2UoY2FsbGJhY2ssIGFjY3UsIHRoaXNBcmcpCiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4KICBwdXNoVW5pcXVlKGFyciwgLi4uYXJncykKICBzeW1tZXRyaWNEaWZmZXJlbmNlKGEsIGIpCiAgeCA9PgogIHggPT4KICBkaWZmZXJlbmNlKGNvbnRhaW5lciwgZXhjbHVkZXMpCiAgdW5pb24oLi4uYXJncykKICBpbnRlcnNlY3Rpb24oLi4uYXJncykKICBpdGVtID0+AAAAAAAAAACMAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1940,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								539,
								559
							],
							[
								596,
								616
							],
							[
								648,
								655
							],
							[
								838,
								850
							],
							[
								930,
								952
							],
							[
								1904,
								1932
							],
							[
								2988,
								3005
							],
							[
								3812,
								3854
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAIwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAIwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1941,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
						"symkeys":
						[
							[
								269,
								274
							],
							[
								295,
								315
							],
							[
								1658,
								1663
							],
							[
								1791,
								1816
							],
							[
								1827,
								1859
							],
							[
								1870,
								1901
							],
							[
								2514,
								2528
							],
							[
								3344,
								3379
							],
							[
								3645,
								3670
							],
							[
								3920,
								3925
							],
							[
								3941,
								3959
							],
							[
								4227,
								4234
							],
							[
								4647,
								4652
							]
						],
						"symlist":
						[
							"XPath",
							"constructor(...args)",
							"XPath",
							" function parseXPath(str)",
							" function getSiblings(ptr, root)",
							" function buildXPath(ptr, root)",
							"(acc, n, i) =>",
							" function AddKey(node, k, i, same)",
							" function NodeType(node)",
							"XPath",
							"function GetKey(p)",
							"prop =>",
							"XPath"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAALwAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1942,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/pointer.js",
						"symkeys":
						[
							[
								145,
								150
							],
							[
								167,
								174
							],
							[
								187,
								210
							],
							[
								266,
								273
							],
							[
								309,
								331
							],
							[
								414,
								432
							],
							[
								505,
								521
							],
							[
								678,
								688
							],
							[
								1185,
								1192
							],
							[
								1240,
								1247
							],
							[
								1297,
								1304
							],
							[
								1354,
								1361
							],
							[
								1409,
								1416
							],
							[
								1468,
								1475
							],
							[
								1521,
								1528
							],
							[
								1580,
								1587
							],
							[
								1641,
								1648
							],
							[
								1700,
								1707
							]
						],
						"symlist":
						[
							"() =>",
							"Pointer",
							"static fromArray(array)",
							"Pointer",
							"static fromString(str)",
							"static from(other)",
							"constructor(ptr)",
							"deref(obj)",
							"Pointer",
							"Pointer",
							"Pointer",
							"Pointer",
							"Pointer",
							"Pointer",
							"Pointer",
							"Pointer",
							"Pointer",
							"Pointer"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC8AAAAWFBhdGgKICBjb25zdHJ1Y3RvciguLi5hcmdzKQpYUGF0aAogIHBhcnNlWFBhdGgoc3RyKQogIGdldFNpYmxpbmdzKHB0ciwgcm9vdCkKICBidWlsZFhQYXRoKHB0ciwgcm9vdCkKKGFjYywgbiwgaSkgPT4KQWRkS2V5KG5vZGUsIGssIGksIHNhbWUpCk5vZGVUeXBlKG5vZGUpClhQYXRoCkdldEtleShwKQogIHByb3AgPT4KWFBhdGgAAAAAAAAAAM0AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1943,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								539,
								559
							],
							[
								596,
								616
							],
							[
								648,
								655
							],
							[
								838,
								850
							],
							[
								930,
								952
							],
							[
								1904,
								1932
							],
							[
								2988,
								3005
							],
							[
								3812,
								3854
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNAAAAKCkgPT4KUG9pbnRlcgogIHN0YXRpYyBmcm9tQXJyYXkoYXJyYXkpClBvaW50ZXIKICBzdGF0aWMgZnJvbVN0cmluZyhzdHIpCiAgc3RhdGljIGZyb20ob3RoZXIpCiAgY29uc3RydWN0b3IocHRyKQogIGRlcmVmKG9iaikKUG9pbnRlcgpQb2ludGVyClBvaW50ZXIKUG9pbnRlcgpQb2ludGVyClBvaW50ZXIKUG9pbnRlcgpQb2ludGVyClBvaW50ZXIKUG9pbnRlcgAAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1944,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
						"symkeys":
						[
							[
								523,
								535
							],
							[
								576,
								588
							],
							[
								612,
								624
							],
							[
								720,
								734
							],
							[
								1787,
								1800
							],
							[
								1916,
								1925
							],
							[
								2206,
								2223
							],
							[
								2738,
								2767
							],
							[
								2776,
								2805
							],
							[
								2981,
								2999
							],
							[
								3033,
								3046
							],
							[
								3312,
								3325
							],
							[
								3336,
								3362
							],
							[
								3464,
								3488
							],
							[
								3571,
								3597
							],
							[
								3682,
								3706
							],
							[
								4811,
								4845
							],
							[
								4895,
								4909
							],
							[
								5240,
								5252
							],
							[
								5960,
								5973
							],
							[
								6545,
								6560
							],
							[
								6727,
								6740
							],
							[
								6982,
								6996
							],
							[
								7793,
								7808
							],
							[
								7913,
								7927
							],
							[
								8090,
								8105
							],
							[
								9016,
								9035
							],
							[
								9075,
								9097
							],
							[
								9137,
								9157
							],
							[
								9197,
								9216
							],
							[
								9256,
								9275
							],
							[
								9315,
								9337
							],
							[
								9377,
								9401
							],
							[
								9441,
								9464
							],
							[
								9504,
								9530
							],
							[
								9570,
								9588
							],
							[
								9621,
								9637
							],
							[
								9727,
								9745
							],
							[
								10314,
								10334
							],
							[
								10720,
								10736
							],
							[
								10924,
								10940
							],
							[
								11951,
								11964
							],
							[
								12206,
								12222
							],
							[
								12512,
								12527
							],
							[
								13122,
								13137
							],
							[
								13492,
								13509
							],
							[
								14291,
								14308
							],
							[
								14986,
								15004
							],
							[
								15772,
								15787
							],
							[
								16371,
								16386
							],
							[
								17018,
								17035
							],
							[
								17943,
								17960
							],
							[
								18655,
								18675
							],
							[
								19778,
								19793
							],
							[
								20081,
								20098
							],
							[
								20797,
								20812
							],
							[
								20829,
								20844
							],
							[
								20862,
								20879
							],
							[
								20915,
								20926
							],
							[
								21269,
								21296
							],
							[
								21457,
								21485
							],
							[
								22863,
								22884
							],
							[
								22961,
								22977
							],
							[
								23407,
								23421
							],
							[
								23645,
								23662
							],
							[
								24964,
								24973
							],
							[
								24987,
								24995
							],
							[
								26120,
								26135
							],
							[
								27377,
								27392
							],
							[
								32258,
								32274
							],
							[
								32929,
								32933
							]
						],
						"symlist":
						[
							" Ⓜ  CONFIG_SHEXT … — macro object",
							" Ⓜ  CONFIG_SHEXT … — macro object",
							" Ⓜ  CONFIG_SHEXT … — macro object",
							"—Ⓕ– atomic_add_int ( ) { … } — function",
							"—Ⓕ– is_searchable ( ) { … } — function",
							"—Ⓕ– is_module ( ) { … } — function",
							"—Ⓕ– module_has_suffix ( ) { … } — function",
							"—Ⓕ– js_std_get_module_loader_func ( ) { … } — function",
							"—Ⓕ– js_std_set_module_loader_func ( ) { … } — function",
							"—Ⓕ– malloc_usable_size ( ) { … } — function",
							"—Ⓜ– trim_dotslash ( ) … — macro function",
							" Ⓣ  BuiltinModule ; — typedef",
							"—Ⓜ– jsm_module_extern_compiled ( ) … — macro function",
							"—Ⓜ– jsm_module_extern_native ( ) … — macro function",
							"—Ⓜ– jsm_module_record_compiled ( ) … — macro function",
							"—Ⓜ– jsm_module_record_native ( ) … — macro function",
							"—Ⓕ– js_std_set_worker_new_context_func ( ) { … } — function",
							"—Ⓕ– jsm_dump_error ( ) { … } — function",
							"—Ⓕ– jsm_eval_buf ( ) { … } — function",
							"—Ⓕ– jsm_eval_file ( ) { … } — function",
							"—Ⓕ– jsm_script_file ( ) { … } — function",
							"—Ⓕ– jsm_script_at ( ) { … } — function",
							"—Ⓕ– jsm_script_get ( ) { … } — function",
							"—Ⓕ– jsm_script_push ( ) { … } — function",
							"—Ⓕ– jsm_script_pop ( ) { … } — function",
							"—Ⓕ– jsm_script_load ( ) { … } — function",
							"—Ⓕ– js_init_module_deep ( ) { … } — function",
							"—Ⓕ– js_init_module_inspect ( ) { … } — function",
							"—Ⓕ– js_init_module_lexer ( ) { … } — function",
							"—Ⓕ– js_init_module_misc ( ) { … } — function",
							"—Ⓕ– js_init_module_path ( ) { … } — function",
							"—Ⓕ– js_init_module_pointer ( ) { … } — function",
							"—Ⓕ– js_init_module_predicate ( ) { … } — function",
							"—Ⓕ– js_init_module_repeater ( ) { … } — function",
							"—Ⓕ– js_init_module_tree_walker ( ) { … } — function",
							"—Ⓕ– js_init_module_xml ( ) { … } — function",
							"—Ⓕ– jsm_init_modules ( ) { … } — function",
							"—Ⓜ– jsm_builtin_native ( ) … — macro function",
							"—Ⓜ– jsm_builtin_compiled ( ) … — macro function",
							"—Ⓕ– jsm_builtin_find ( ) { … } — function",
							"—Ⓕ– jsm_builtin_init ( ) { … } — function",
							"—Ⓕ– jsm_load_json ( ) { … } — function",
							"—Ⓕ– jsm_load_package ( ) { … } — function",
							"—Ⓕ– jsm_search_list ( ) { … } — function",
							"—Ⓕ– jsm_search_path ( ) { … } — function",
							"—Ⓕ– jsm_search_suffix ( ) { … } — function",
							"—Ⓕ– jsm_search_module ( ) { … } — function",
							"—Ⓕ– jsm_module_package ( ) { … } — function",
							"—Ⓕ– jsm_module_load ( ) { … } — function",
							"—Ⓕ– jsm_module_json ( ) { … } — function",
							"—Ⓕ– jsm_module_locate ( ) { … } — function",
							"—Ⓕ– jsm_module_loader ( ) { … } — function",
							"—Ⓕ– jsm_module_normalize ( ) { … } — function",
							"—Ⓕ– jsm_context_new ( ) { … } — function",
							"—Ⓜ– jsm_module_native ( ) … — macro function",
							" Ⓜ  MALLOC_OVERHEAD … — macro object",
							" Ⓜ  MALLOC_OVERHEAD … — macro object",
							"trace_malloc_data",
							"—Ⓕ– dump_vector ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_ptr_offset ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_usable_size ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_init ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc ( ) { … } — function",
							"—Ⓕ– jsm_trace_free ( ) { … } — function",
							"—Ⓕ– jsm_trace_realloc ( ) { … } — function",
							" Ⓜ  PROG_NAME … — macro object",
							"—Ⓕ– jsm_help ( ) { … } — function",
							"—Ⓕ– jsm_eval_script ( ) { … } — function",
							"—Ⓕ– jsm_module_func ( ) { … } — function",
							"—Ⓕ– jsm_import_parse ( ) { … } — function",
							"—Ⓕ– main ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAANsLAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1945,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB5DgAAICDik4IgIENPTkZJR19TSEVYVCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgQ09ORklHX1NIRVhUIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBDT05GSUdfU0hFWFQg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK74oCTIGF0b21pY19hZGRfaW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaXNfc2VhcmNoYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlzX21vZHVsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1vZHVsZV9oYXNfc3VmZml4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3RkX2dldF9tb2R1bGVfbG9hZGVyX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdGRfc2V0X21vZHVsZV9sb2FkZXJfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1hbGxvY191c2FibGVfc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pOC4oCTIHRyaW1fZG90c2xhc2ggKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24KICDik4kgIEJ1aWx0aW5Nb2R1bGUgOyDigJQgdHlwZWRlZgrigJTik4LigJMganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMganNtX21vZHVsZV9yZWNvcmRfY29tcGlsZWQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9tb2R1bGVfcmVjb3JkX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTikrvigJMganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9kdW1wX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfYnVmICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfZmlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfZmlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfYXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fc2NyaXB0X2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcHVzaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3NjcmlwdF9sb2FkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5pdF9tb2R1bGVfZGVlcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbml0X21vZHVsZV9sZXhlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX21pc2MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbml0X21vZHVsZV9wYXRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5pdF9tb2R1bGVfcG9pbnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX3JlcGVhdGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5pdF9tb2R1bGVfdHJlZV93YWxrZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbml0X21vZHVsZV94bWwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21faW5pdF9tb2R1bGVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMganNtX2J1aWx0aW5fbmF0aXZlICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fYnVpbHRpbl9jb21waWxlZCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTikrvigJMganNtX2J1aWx0aW5fZmluZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9idWlsdGluX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbG9hZF9qc29uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2xvYWRfcGFja2FnZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zZWFyY2hfbGlzdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zZWFyY2hfcGF0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zZWFyY2hfc3VmZml4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3NlYXJjaF9tb2R1bGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX3BhY2thZ2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2xvYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2pzb24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2xvY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9tb2R1bGVfbG9hZGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9ub3JtYWxpemUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fY29udGV4dF9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fbW9kdWxlX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogIOKTgiAgTUFMTE9DX09WRVJIRUFEIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBNQUxMT0NfT1ZFUkhFQUQg4oCmIOKAlCBtYWNybyBvYmplY3QKICB0cmFjZV9tYWxsb2NfZGF0YQrigJTikrvigJMgZHVtcF92ZWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fdHJhY2VfbWFsbG9jX3B0cl9vZmZzZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fdHJhY2VfbWFsbG9jX3VzYWJsZV9zaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV90cmFjZV9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX3JlYWxsb2MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pOCICBQUk9HX05BTUUg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK74oCTIGpzbV9oZWxwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfc2NyaXB0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2ltcG9ydF9wYXJzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1haW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1946,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
						"symkeys":
						[
							[
								523,
								535
							],
							[
								576,
								588
							],
							[
								612,
								624
							],
							[
								720,
								734
							],
							[
								1787,
								1800
							],
							[
								1916,
								1925
							],
							[
								2206,
								2223
							],
							[
								2738,
								2767
							],
							[
								2776,
								2805
							],
							[
								2981,
								2999
							],
							[
								3033,
								3046
							],
							[
								3312,
								3325
							],
							[
								3336,
								3362
							],
							[
								3464,
								3488
							],
							[
								3571,
								3597
							],
							[
								3682,
								3706
							],
							[
								4811,
								4845
							],
							[
								4895,
								4909
							],
							[
								5240,
								5252
							],
							[
								5960,
								5973
							],
							[
								6545,
								6560
							],
							[
								6727,
								6740
							],
							[
								6982,
								6996
							],
							[
								7793,
								7808
							],
							[
								7913,
								7927
							],
							[
								8090,
								8105
							],
							[
								9016,
								9035
							],
							[
								9075,
								9097
							],
							[
								9137,
								9157
							],
							[
								9197,
								9216
							],
							[
								9256,
								9275
							],
							[
								9315,
								9337
							],
							[
								9377,
								9401
							],
							[
								9441,
								9464
							],
							[
								9504,
								9530
							],
							[
								9570,
								9588
							],
							[
								9621,
								9637
							],
							[
								9727,
								9745
							],
							[
								10314,
								10334
							],
							[
								10720,
								10736
							],
							[
								10924,
								10940
							],
							[
								11951,
								11964
							],
							[
								12206,
								12222
							],
							[
								12512,
								12527
							],
							[
								13122,
								13137
							],
							[
								13492,
								13509
							],
							[
								14291,
								14308
							],
							[
								14986,
								15004
							],
							[
								15772,
								15787
							],
							[
								16371,
								16386
							],
							[
								17018,
								17035
							],
							[
								17943,
								17960
							],
							[
								18655,
								18675
							],
							[
								19778,
								19793
							],
							[
								20081,
								20098
							],
							[
								20797,
								20812
							],
							[
								20829,
								20844
							],
							[
								20862,
								20879
							],
							[
								20915,
								20926
							],
							[
								21269,
								21296
							],
							[
								21457,
								21485
							],
							[
								22863,
								22884
							],
							[
								22961,
								22977
							],
							[
								23407,
								23421
							],
							[
								23645,
								23662
							],
							[
								24964,
								24973
							],
							[
								24987,
								24995
							],
							[
								26120,
								26135
							],
							[
								27377,
								27392
							],
							[
								32258,
								32274
							],
							[
								32929,
								32933
							]
						],
						"symlist":
						[
							" Ⓜ  CONFIG_SHEXT … — macro object",
							" Ⓜ  CONFIG_SHEXT … — macro object",
							" Ⓜ  CONFIG_SHEXT … — macro object",
							"—Ⓕ– atomic_add_int ( ) { … } — function",
							"—Ⓕ– is_searchable ( ) { … } — function",
							"—Ⓕ– is_module ( ) { … } — function",
							"—Ⓕ– module_has_suffix ( ) { … } — function",
							"—Ⓕ– js_std_get_module_loader_func ( ) { … } — function",
							"—Ⓕ– js_std_set_module_loader_func ( ) { … } — function",
							"—Ⓕ– malloc_usable_size ( ) { … } — function",
							"—Ⓜ– trim_dotslash ( ) … — macro function",
							" Ⓣ  BuiltinModule ; — typedef",
							"—Ⓜ– jsm_module_extern_compiled ( ) … — macro function",
							"—Ⓜ– jsm_module_extern_native ( ) … — macro function",
							"—Ⓜ– jsm_module_record_compiled ( ) … — macro function",
							"—Ⓜ– jsm_module_record_native ( ) … — macro function",
							"—Ⓕ– js_std_set_worker_new_context_func ( ) { … } — function",
							"—Ⓕ– jsm_dump_error ( ) { … } — function",
							"—Ⓕ– jsm_eval_buf ( ) { … } — function",
							"—Ⓕ– jsm_eval_file ( ) { … } — function",
							"—Ⓕ– jsm_script_file ( ) { … } — function",
							"—Ⓕ– jsm_script_at ( ) { … } — function",
							"—Ⓕ– jsm_script_get ( ) { … } — function",
							"—Ⓕ– jsm_script_push ( ) { … } — function",
							"—Ⓕ– jsm_script_pop ( ) { … } — function",
							"—Ⓕ– jsm_script_load ( ) { … } — function",
							"—Ⓕ– js_init_module_deep ( ) { … } — function",
							"—Ⓕ– js_init_module_inspect ( ) { … } — function",
							"—Ⓕ– js_init_module_lexer ( ) { … } — function",
							"—Ⓕ– js_init_module_misc ( ) { … } — function",
							"—Ⓕ– js_init_module_path ( ) { … } — function",
							"—Ⓕ– js_init_module_pointer ( ) { … } — function",
							"—Ⓕ– js_init_module_predicate ( ) { … } — function",
							"—Ⓕ– js_init_module_repeater ( ) { … } — function",
							"—Ⓕ– js_init_module_tree_walker ( ) { … } — function",
							"—Ⓕ– js_init_module_xml ( ) { … } — function",
							"—Ⓕ– jsm_init_modules ( ) { … } — function",
							"—Ⓜ– jsm_builtin_native ( ) … — macro function",
							"—Ⓜ– jsm_builtin_compiled ( ) … — macro function",
							"—Ⓕ– jsm_builtin_find ( ) { … } — function",
							"—Ⓕ– jsm_builtin_init ( ) { … } — function",
							"—Ⓕ– jsm_load_json ( ) { … } — function",
							"—Ⓕ– jsm_load_package ( ) { … } — function",
							"—Ⓕ– jsm_search_list ( ) { … } — function",
							"—Ⓕ– jsm_search_path ( ) { … } — function",
							"—Ⓕ– jsm_search_suffix ( ) { … } — function",
							"—Ⓕ– jsm_search_module ( ) { … } — function",
							"—Ⓕ– jsm_module_package ( ) { … } — function",
							"—Ⓕ– jsm_module_load ( ) { … } — function",
							"—Ⓕ– jsm_module_json ( ) { … } — function",
							"—Ⓕ– jsm_module_locate ( ) { … } — function",
							"—Ⓕ– jsm_module_loader ( ) { … } — function",
							"—Ⓕ– jsm_module_normalize ( ) { … } — function",
							"—Ⓕ– jsm_context_new ( ) { … } — function",
							"—Ⓜ– jsm_module_native ( ) … — macro function",
							" Ⓜ  MALLOC_OVERHEAD … — macro object",
							" Ⓜ  MALLOC_OVERHEAD … — macro object",
							"trace_malloc_data",
							"—Ⓕ– dump_vector ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_ptr_offset ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_usable_size ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc_init ( ) { … } — function",
							"—Ⓕ– jsm_trace_malloc ( ) { … } — function",
							"—Ⓕ– jsm_trace_free ( ) { … } — function",
							"—Ⓕ– jsm_trace_realloc ( ) { … } — function",
							" Ⓜ  PROG_NAME … — macro object",
							"—Ⓕ– jsm_help ( ) { … } — function",
							"—Ⓕ– jsm_eval_script ( ) { … } — function",
							"—Ⓕ– jsm_module_func ( ) { … } — function",
							"—Ⓕ– jsm_import_parse ( ) { … } — function",
							"—Ⓕ– main ( ) { … } — function"
						]
					},
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1947,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								539,
								559
							],
							[
								596,
								616
							],
							[
								648,
								655
							],
							[
								838,
								850
							],
							[
								930,
								952
							],
							[
								1904,
								1932
							],
							[
								2988,
								3005
							],
							[
								3812,
								3854
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB5DgAAICDik4IgIENPTkZJR19TSEVYVCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgQ09ORklHX1NIRVhUIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBDT05GSUdfU0hFWFQg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK74oCTIGF0b21pY19hZGRfaW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaXNfc2VhcmNoYWJsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlzX21vZHVsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1vZHVsZV9oYXNfc3VmZml4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3RkX2dldF9tb2R1bGVfbG9hZGVyX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdGRfc2V0X21vZHVsZV9sb2FkZXJfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1hbGxvY191c2FibGVfc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pOC4oCTIHRyaW1fZG90c2xhc2ggKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24KICDik4kgIEJ1aWx0aW5Nb2R1bGUgOyDigJQgdHlwZWRlZgrigJTik4LigJMganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMganNtX21vZHVsZV9yZWNvcmRfY29tcGlsZWQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9tb2R1bGVfcmVjb3JkX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTikrvigJMganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9kdW1wX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfYnVmICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfZmlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfZmlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfYXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fc2NyaXB0X2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcHVzaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3NjcmlwdF9sb2FkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5pdF9tb2R1bGVfZGVlcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbml0X21vZHVsZV9sZXhlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX21pc2MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbml0X21vZHVsZV9wYXRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5pdF9tb2R1bGVfcG9pbnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luaXRfbW9kdWxlX3JlcGVhdGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5pdF9tb2R1bGVfdHJlZV93YWxrZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbml0X21vZHVsZV94bWwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21faW5pdF9tb2R1bGVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMganNtX2J1aWx0aW5fbmF0aXZlICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fYnVpbHRpbl9jb21waWxlZCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTikrvigJMganNtX2J1aWx0aW5fZmluZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9idWlsdGluX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbG9hZF9qc29uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2xvYWRfcGFja2FnZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zZWFyY2hfbGlzdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zZWFyY2hfcGF0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zZWFyY2hfc3VmZml4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3NlYXJjaF9tb2R1bGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX3BhY2thZ2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2xvYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2pzb24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2xvY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9tb2R1bGVfbG9hZGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9ub3JtYWxpemUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fY29udGV4dF9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fbW9kdWxlX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogIOKTgiAgTUFMTE9DX09WRVJIRUFEIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBNQUxMT0NfT1ZFUkhFQUQg4oCmIOKAlCBtYWNybyBvYmplY3QKICB0cmFjZV9tYWxsb2NfZGF0YQrigJTikrvigJMgZHVtcF92ZWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fdHJhY2VfbWFsbG9jX3B0cl9vZmZzZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fdHJhY2VfbWFsbG9jX3VzYWJsZV9zaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV90cmFjZV9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX3JlYWxsb2MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pOCICBQUk9HX05BTUUg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK74oCTIGpzbV9oZWxwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfc2NyaXB0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2ltcG9ydF9wYXJzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1haW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAACMAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1948,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1949,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								539,
								559
							],
							[
								596,
								616
							],
							[
								648,
								655
							],
							[
								838,
								850
							],
							[
								930,
								952
							],
							[
								1904,
								1932
							],
							[
								2988,
								3005
							],
							[
								3812,
								3854
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AQAAAAAAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1950,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1951,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								539,
								559
							],
							[
								596,
								616
							],
							[
								648,
								655
							],
							[
								838,
								850
							],
							[
								930,
								952
							],
							[
								1904,
								1932
							],
							[
								2988,
								3005
							],
							[
								3812,
								3854
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AQAAAAAAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1952,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1953,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selectors.js",
						"symkeys":
						[
							[
								409,
								431
							]
						],
						"symlist":
						[
							"function main(...args)"
						]
					},
					"AQAAAAAAAAAAAAAADwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1954,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selectors.js",
						"symkeys":
						[
							[
								399,
								421
							]
						],
						"symlist":
						[
							"function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAICBtYWluKC4uLmFyZ3MpAAAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1955,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								539,
								559
							],
							[
								596,
								616
							],
							[
								648,
								655
							],
							[
								838,
								850
							],
							[
								930,
								952
							],
							[
								1904,
								1932
							],
							[
								2989,
								3006
							],
							[
								3813,
								3855
							]
						],
						"symlist":
						[
							"printStatus(...args)",
							"function StartREPL()",
							"REPL =>",
							"(...args) =>",
							"function main(...args)",
							" function processFile(file)",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAICBtYWluKC4uLmFyZ3MpAAAAAAAAAACMAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1956,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selectors.js",
						"symkeys":
						[
							[
								399,
								421
							]
						],
						"symlist":
						[
							"function main(...args)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACMAAAAICBwcmludFN0YXR1cyguLi5hcmdzKQpTdGFydFJFUEwoKQpSRVBMID0+CiguLi5hcmdzKSA9PgogIG1haW4oLi4uYXJncykKICBwcm9jZXNzRmlsZShmaWxlKQogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAA8AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1957,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selectors.js",
						"symkeys":
						[
							[
								373,
								395
							]
						],
						"symlist":
						[
							"function main(...args)"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAICBtYWluKC4uLmFyZ3MpAAAAAAAAAAAPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwAAACAgbWFpbiguLi5hcmdzKQAAAAAAAAAADwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1958,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								866,
								889
							],
							[
								972,
								998
							],
							[
								1011,
								1025
							],
							[
								1340,
								1364
							],
							[
								1640,
								1646
							],
							[
								1651,
								1686
							],
							[
								2002,
								2030
							],
							[
								2471,
								2475
							],
							[
								2480,
								2528
							],
							[
								2888,
								2898
							],
							[
								2936,
								2952
							],
							[
								3070,
								3089
							],
							[
								3184,
								3203
							],
							[
								3325,
								3341
							],
							[
								3442,
								3458
							],
							[
								3607,
								3622
							],
							[
								3788,
								3805
							],
							[
								4084,
								4105
							],
							[
								4281,
								4298
							],
							[
								4486,
								4501
							],
							[
								4523,
								4541
							],
							[
								4717,
								4744
							],
							[
								5098,
								5115
							],
							[
								5403,
								5435
							],
							[
								5841,
								5859
							],
							[
								6093,
								6114
							],
							[
								6282,
								6289
							],
							[
								6705,
								6709
							],
							[
								6777,
								6786
							],
							[
								6848,
								6862
							],
							[
								6910,
								6921
							],
							[
								7292,
								7304
							],
							[
								7388,
								7419
							],
							[
								7849,
								7866
							],
							[
								7903,
								7923
							],
							[
								8428,
								8432
							],
							[
								8474,
								8507
							],
							[
								8518,
								8521
							],
							[
								8566,
								8582
							],
							[
								8727,
								8761
							],
							[
								8772,
								8775
							],
							[
								8835,
								8841
							],
							[
								8863,
								8878
							],
							[
								9112,
								9120
							],
							[
								9125,
								9148
							],
							[
								9179,
								9198
							],
							[
								9251,
								9267
							],
							[
								9315,
								9345
							],
							[
								9578,
								9610
							],
							[
								9849,
								9892
							],
							[
								10156,
								10174
							],
							[
								10223,
								10230
							],
							[
								10737,
								10745
							],
							[
								10797,
								10807
							],
							[
								11262,
								11296
							],
							[
								11372,
								11388
							],
							[
								11437,
								11464
							],
							[
								11623,
								11655
							],
							[
								12137,
								12155
							],
							[
								12289,
								12301
							],
							[
								12339,
								12351
							],
							[
								12367,
								12377
							],
							[
								12474,
								12483
							],
							[
								12515,
								12533
							],
							[
								12632,
								12653
							],
							[
								12717,
								12735
							],
							[
								13209,
								13223
							],
							[
								13285,
								13292
							],
							[
								13310,
								13334
							],
							[
								13507,
								13526
							],
							[
								13651,
								13667
							],
							[
								13748,
								13762
							],
							[
								13803,
								13816
							],
							[
								13860,
								13875
							],
							[
								13906,
								13920
							],
							[
								14600,
								14614
							],
							[
								14767,
								14790
							],
							[
								14849,
								14872
							],
							[
								14948,
								14952
							],
							[
								15054,
								15076
							],
							[
								15316,
								15324
							],
							[
								15370,
								15388
							],
							[
								15427,
								15440
							],
							[
								15467,
								15486
							],
							[
								15525,
								15538
							],
							[
								15572,
								15590
							],
							[
								15629,
								15642
							],
							[
								15671,
								15686
							],
							[
								15744,
								15765
							],
							[
								15797,
								15810
							],
							[
								15844,
								15866
							],
							[
								15910,
								15935
							],
							[
								15967,
								15980
							],
							[
								16042,
								16057
							],
							[
								16107,
								16123
							],
							[
								16243,
								16250
							],
							[
								18535,
								18543
							],
							[
								18564,
								18580
							],
							[
								18604,
								18612
							],
							[
								18632,
								18660
							],
							[
								18711,
								18733
							],
							[
								18818,
								18838
							],
							[
								18898,
								18914
							],
							[
								19011,
								19026
							],
							[
								19063,
								19078
							],
							[
								19154,
								19164
							],
							[
								19566,
								19570
							],
							[
								19625,
								19633
							],
							[
								19723,
								19727
							],
							[
								19745,
								19768
							],
							[
								19932,
								19942
							],
							[
								20130,
								20148
							],
							[
								20198,
								20217
							],
							[
								20259,
								20269
							],
							[
								20332,
								20343
							],
							[
								20380,
								20391
							],
							[
								20462,
								20474
							],
							[
								20716,
								20720
							],
							[
								20811,
								20815
							],
							[
								20874,
								20897
							],
							[
								21152,
								21163
							],
							[
								21186,
								21200
							],
							[
								21269,
								21280
							],
							[
								21305,
								21319
							],
							[
								21434,
								21444
							],
							[
								21475,
								21483
							],
							[
								21499,
								21514
							],
							[
								21545,
								21553
							],
							[
								21569,
								21579
							],
							[
								21807,
								21822
							],
							[
								21849,
								21853
							],
							[
								21876,
								21880
							],
							[
								21899,
								21903
							],
							[
								22052,
								22059
							],
							[
								22077,
								22100
							],
							[
								22223,
								22234
							],
							[
								22267,
								22281
							],
							[
								22343,
								22356
							],
							[
								22394,
								22410
							],
							[
								22454,
								22464
							],
							[
								22488,
								22496
							],
							[
								22529,
								22544
							],
							[
								22568,
								22576
							],
							[
								22740,
								22756
							],
							[
								22787,
								22794
							],
							[
								22817,
								22821
							],
							[
								22840,
								22847
							],
							[
								23008,
								23017
							],
							[
								23022,
								23055
							],
							[
								23145,
								23156
							],
							[
								23188,
								23202
							],
							[
								23271,
								23284
							],
							[
								23313,
								23329
							],
							[
								23373,
								23385
							],
							[
								23412,
								23420
							],
							[
								23443,
								23454
							],
							[
								23481,
								23489
							],
							[
								23515,
								23526
							],
							[
								23553,
								23561
							],
							[
								23584,
								23599
							],
							[
								23626,
								23634
							],
							[
								23671,
								23685
							],
							[
								23705,
								23718
							],
							[
								23866,
								23883
							],
							[
								23903,
								23916
							],
							[
								24068,
								24088
							],
							[
								24108,
								24121
							],
							[
								24255,
								24270
							],
							[
								24297,
								24324
							],
							[
								24344,
								24357
							],
							[
								24580,
								24589
							],
							[
								24655,
								24664
							],
							[
								24675,
								24693
							],
							[
								24715,
								24777
							],
							[
								24846,
								24878
							],
							[
								24974,
								24996
							],
							[
								25054,
								25097
							],
							[
								25343,
								25368
							],
							[
								25415,
								25445
							],
							[
								25463,
								25481
							],
							[
								26570,
								26605
							],
							[
								26728,
								26744
							],
							[
								26773,
								26794
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"applyPath = (path, obj) =>",
							"(acc, part) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"querySelector(str)",
							"querySelectorAll(str)",
							"path =>",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"path(arg, path = [])",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"c =>",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAPAAAAICBtYWluKC4uLmFyZ3MpAAAAAAAAAADFDAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "src/qjsm.c",
			"settings":
			{
				"buffer_size": 43314,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1362,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEYAAAAAAAAIRgAAAAAAAAAAAAAAADwvw"
				],
				[
					1363,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEYAAAAAAAAIRgAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "import * as os from 'os';\nimport * as std from 'std';\nimport { escape, quote, isObject } from 'util';\nimport inspect from 'inspect';\nimport readXML from '../lib/xml/read.js';\nimport writeXMLp from '../lib/xml/write.js';\nimport * as path from 'path';\nimport * as deep from 'deep';\nimport Console from '../lib/console.js';\n\n('use strict');\n('use math');\n\nfunction WriteFile(file, data) {\n  let f = std.open(file, 'w+');\n  f.puts(data);\n  console.log('Wrote \"' + file + '\": ' + data.length + ' bytes');\n}\n\nfunction main(...args) {\n  globalThis.console = new Console(process.stdout, {\n    inspectOptions: {\n      colors: true,\n      depth: 10,\n      //stringBreakNewline: false,\n      maxArrayLength: Infinity,\n      compact: 1,\n      maxStringLength: 60\n    }\n  });\n\n  let file = args[0] ?? '/etc/fonts/fonts.conf';\n\n  let base = path.basename(file, path.extname(file));\n\n  let data = std.loadFile(file, 'utf-8');\n\n  let start = Date.now();\n\n  let result = readXML(data, file, false);\n  let end = Date.now();\n  //console.log('result[0]', inspect(result[0], { depth: Infinity, compact: 1, maxArrayLength: Infinity }));\n  let tags = deep.select(result, (n, k) => k == 'tagName', deep.RETURN_PATH).map(p => p.slice(0, -1));\n  //  console.log('tags',tags);\n  let numTags = tags.length;\n  console.log(`Parsing '${/*path.basename*/ file}' took ${end - start}ms (${numTags} elements)`);\n\n  if(/NETSCAPE-Bookmark-file-1/i.test(result[0].tagName)) {\n    let tag,\n      group,\n      elements = [],\n      links = [],\n      obj = {},\n      str = '';\n    for(let element of result) {\n      if(isObject(element) && element.tagName) {\n        tag = element.tagName;\n        str = '';\n      } else if(typeof element == 'string') {\n        str += (str.length ? ' ' : '') + element;\n      }\n      if(/^\\/h3$/i.test(tag)) group = str;\n      else if(/^(a)$/i.test(tag)) {\n        if(isObject(element.attributes)) {\n          obj.href = element.attributes['HREF'];\n          obj.date = new Date(+element.attributes['ADD_DATE'] * 1000);\n        }\n        if(group) obj.group = group;\n      }\n      if(/^\\/(a)$/i.test(tag)) {\n        if(str) obj.str = str;\n\n        elements.push(obj);\n        obj = {};\n      }\n    }\n    result = [];\n\n    elements.sort((a, b) => a.date - b.date);\n\n    for(let element of elements) {\n      const { href, date, group } = element;\n      result.push({ tagName: 'a', attributes: { href, date } });\n      if(isObject(element) && /^a$/i.test(element.tagName)) {\n        const add_date = new Date(+element.attributes['ADD_DATE'] * 1000);\n        const href = element.attributes['HREF'];\n        console.log('a', { href, add_date });\n      }\n    }\n  }\n\n  // console.log('result:', inspect(result, { depth: Infinity, compact: 1, maxArrayLength: Infinity }));\n  WriteFile(base + '.json', JSON.stringify(result, null, 2));\n\n  start = process.hrtime.bigint();\n  let str = writeXML(result);\n  end = process.hrtime.bigint();\n\n  console.log(`Generating took ${(end - start) / 1000n}\\u00b5s`);\n\n  WriteFile(base + '.xml', str);\n\n  std.gc();\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log(`FAIL: ${error.message}\\n${error.stack}`);\n  std.exit(1);\n}\n",
			"file": "tests/test_xml.js",
			"file_size": 3164,
			"file_write_time": 132925053645718362,
			"settings":
			{
				"buffer_size": 3165,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"",
					null,
					"AQAAALkDAAAAAAAAwAMAAAAAAAAIAAAAeG1sLnJlYWQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALkDAAAAAAAAwQMAAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					1,
					"",
					null,
					"AQAAADMLAAAAAAAAOwsAAAAAAAAJAAAAeG1sLndyaXRl",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADMLAAAAAAAAPAsAAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "readXML"
					},
					"CAAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACNAAAAAAAAAAcAAAB4bWxSZWFkjQAAAAAAAACOAAAAAAAAAAAAAACOAAAAAAAAAI8AAAAAAAAAAAAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwAAAAAAAAAkwAAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "writeXML"
					},
					"CQAAALYAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC3AAAAAAAAAAgAAAB4bWxXcml0ZbcAAAAAAAAAuAAAAAAAAAAAAAAAuAAAAAAAAAC5AAAAAAAAAAAAAAC5AAAAAAAAALoAAAAAAAAAAAAAALoAAAAAAAAAuwAAAAAAAAAAAAAAuwAAAAAAAAC8AAAAAAAAAAAAAAC8AAAAAAAAAL0AAAAAAAAAAAAAAL0AAAAAAAAAvgAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALYAAAAAAAAAvgAAAAAAAAAAAAAAAADwvw"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAL4AAAAAAAAAvwAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4AAAAAAAAAvgAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "import { escape, quote, isObject, define, mapObject, getset, gettersetter, once, memoize, getOpt } from 'util';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport Console from 'console';\nimport { nodeTypes, Parser, Node, NodeList, NamedNodeMap, Element, Document, Attr, Text, TokenList, Factory } from '../lib/dom.js';\nimport { ImmutableXPath, MutableXPath, buildXPath, parseXPath, XPath } from '../lib/xpath.js';\n//import REPL from '../lib/repl.js';\nimport { read as readXML, write as writeXML }  from 'xml';\n \nlet repl = {\n  printStatus(...args) {\n    console.log(...args);\n  }\n};\n\nfunction StartREPL() {\n  return import('repl').then(REPL => {\n    repl = new REPL(\n      '\\x1b[38;2;80;200;255m' + path.basename(process.argv[1], '.js').replace(/test_/, '') + ' \\x1b[0m',\n      false\n    );\n    repl.show = repl.printFunction((...args) => console.log(...args));\n    repl.historyLoad();\n    return repl.run();\n  });\n}\n\nfunction main(...args) {\n  globalThis.console = new Console({\n    stdout: process.stdout,\n    stderr: process.stderr,\n    inspectOptions: {\n      colors: true,\n      depth: 10,\n      maxArrayLength: 10000,\n      compact: false,\n      customInspect: true\n    }\n  });\n\n  let params = getOpt(\n    {\n      output: [true, null, 'o'],\n      interactive: [false, null, 'i'],\n      '@': 'xml'\n    },\n    args\n  );\n\n  console.log('params', params);\n\n/*  const dom = {\n    nodeTypes,\n    Parser,\n    Node,\n    NodeList,\n    NamedNodeMap,\n    Element,\n    Document,\n    Attr,\n    Text,\n    TokenList,\n    Factory\n  };\n  Object.assign(globalThis, {\n    ...{ escape, quote, isObject, define, mapObject, getset, gettersetter, memoize },\n    path,\n    ...dom,\n    dom,\n    ...{ ImmutableXPath, MutableXPath, buildXPath, parseXPath, XPath }\n  });\n*/\n  let files = params['@'].length ? params['@'] : ['tests/test1.xml', 'tests/test2.xml', 'tests/test3.xml'];\n\n  files.forEach(processFile);\n\n  function processFile(file) {\n    console.log('Processing file:', file);\n    let base = path.basename(file, path.extname(file));\n\n    let data = std.loadFile(file, 'utf-8');\n    let start = Date.now();\n    let end = Date.now();\n    console.log(`parsing took ${end - start}ms`);\n\n    start = Date.now();\n\n    /*  let result = readXML(data, file, false);\n  let doc=new Document(result[0]);*/\n\n    let parser = new Parser();\n    let doc = parser.parseFromString(data, file, { tolerant: true });\n\n    /*  let walker = doc.createTreeWalker(doc.body);\n\n  console.log('walker', walker);*/\n\n    let rawDoc = Node.raw(doc);\n    Object.assign(globalThis, { rawDoc, doc });\n\n    console.log('writeXML', writeXML);\n\n    fs.writeFileSync('output.xml', writeXML(rawDoc));\n\n    console.log('doc', doc);\n\n    globalThis.fs = fs;\n\n     let firstLayer = doc.querySelector('layer');\n    console.log('firstLayer', firstLayer);\n    let allLayers = doc.querySelectorAll('layer');\n    console.log('allLayers', console.config({ compact: false }), allLayers);\n\n    let count = 0;\n\n    if(0)\n      Recurse(doc, (node, stack) => {\n        const raw = Node.raw(node);\n        count++;\n        if(node.nodeType != node.ELEMENT_NODE && node.nodeType != node.DOCUMENT_NODE) {\n          return;\n        }\n        if(raw.children) {\n          let cl = node.children;\n          if(raw.children[0]) {\n            let y = cl.path;\n            let elm = cl[0];\n            if(cl.length) {\n              if(elm) {\n                /*  if(isObject(elm) && 'tagName' in elm) console.log('elm', elm.tagName, elm.path); else */\n                //console.log('elm', elm);\n              }\n            }\n          }\n        }\n        if(raw.attributes) {\n          let al = node.attributes;\n          let z = al.path;\n          let at = al[Object.keys(raw.attributes)[0]];\n          if(at) {\n            let x = at.path;\n          }\n        }\n      });\n\n    function Recurse(node, fn, stack = []) {\n      if(isObject(node)) {\n        if(isObject(node.children))\n          for(let child of node.children) {\n            Recurse(child, fn, [...stack, node]);\n          }\n        if(isObject(node.attributes)) {\n          const attributes = /*Node.raw(node)?.attributes ??*/ node.attributes;\n          for(let attr of /*Node.raw(node).*/ attributes) {\n            Recurse(attr, fn, [...stack, node]);\n            //console.log('Attr', attr, Node.path(attr));\n          } //Recurse({ name: attr, value:attributes[attr],[Symbol.toStringTag]: 'Attr', __proto__: Attr.prototype }, fn, [...stack, node]);\n        }\n      }\n      fn(node, stack);\n    }\n    end = Date.now();\n\n    repl.printStatus(`walking took ${end - start}ms (${count} nodes)`);\n  }\n\n  if(params.interactive) StartREPL();\n}\n\ntry {\n  main(...scriptArgs.slice(1));\n} catch(error) {\n  console.log(`FAIL: ${error.message}\\n${error.stack}`);\n}\n",
			"file": "tests/test_dom.js",
			"file_size": 4756,
			"file_write_time": 132925290402864177,
			"settings":
			{
				"buffer_size": 4757,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					12,
					2,
					"right_delete",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABAAAALwAAAAAAAAAAAAAAAAAAAAABAAAALw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					24,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAMHAAAAAAAABQcAAAAAAAAAAAAAIwYAAAAAAAAlBgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMGAAAAAAAAAwcAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"cut",
					null,
					"AQAAACMGAAAAAAAAIwYAAAAAAAACAAAALyo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUGAAAAAAAAIwYAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					1,
					"paste",
					null,
					"AQAAAH8FAAAAAAAAgQUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAH8FAAAAAAAAfwUAAAAAAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "util"
					},
					"BQAAAGkAAAAAAAAAagAAAAAAAAAAAAAAagAAAAAAAABqAAAAAAAAAA4AAAAuLi9saWIvdXRpbC5qc2oAAAAAAAAAawAAAAAAAAAAAAAAawAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAG0AAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGkAAAAAAAAAdwAAAAAAAAAAAAAAAADwvw"
				],
				[
					58,
					1,
					"paste",
					null,
					"AgAAAM8BAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAAKAgAAAAAAACoAAABpbXBvcnQgcmVhZFhNTCBmcm9tICcuLi9saWIveG1sL3JlYWQuanMnOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8BAAAAAAAA+QEAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAoCAAAAAAAACwIAAAAAAAAAAAAACwIAAAAAAAALAgAAAAAAACwAAABpbXBvcnQgd3JpdGVYTUwgZnJvbSAnLi4vbGliL3htbC93cml0ZS5qcyc7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAoCAAAAAAAANgIAAAAAAAAAAAAAAADwvw"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "(("
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					93,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAAKAAAAAAAAAAAAAAAAAAAAAABAAAAKA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				],
				[
					97,
					2,
					"left_delete",
					null,
					"AgAAAAEAAAAAAAAAAQAAAAAAAAABAAAALwAAAAAAAAAAAAAAAAAAAAABAAAALw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAADwvw"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ8KAAAAAAAAoAoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJ8KAAAAAAAAnwoAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "tests/test_css3_selectors.js",
			"settings":
			{
				"buffer_size": 1426,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					2,
					"left_delete",
					null,
					"AgAAAJYAAAAAAAAAlgAAAAAAAAACAAAAanOVAAAAAAAAAJUAAAAAAAAAAQAAAC4",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJYAAAAAAAAAmAAAAAAAAAAAAAAAAADwvw"
				],
				[
					12,
					4,
					"left_delete",
					null,
					"BAAAAIgAAAAAAAAAiAAAAAAAAAADAAAAbGlihwAAAAAAAACHAAAAAAAAAAEAAAAvhgAAAAAAAACGAAAAAAAAAAEAAAAuhQAAAAAAAACFAAAAAAAAAAEAAAAu",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIgAAAAAAAAAiwAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					1,
					"right_delete",
					null,
					"AQAAAIUAAAAAAAAAhQAAAAAAAAABAAAALw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIUAAAAAAAAAhQAAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"paste",
					null,
					"AgAAADgBAAAAAAAAcwEAAAAAAAAAAAAAcwEAAAAAAABzAQAAAAAAAFUAAABpbXBvcnQgcmVhZFhNTCBmcm9tICcuLi9saWIveG1sL3JlYWQuanMnOwppbXBvcnQgd3JpdGVYTUwgZnJvbSAnLi4vbGliL3htbC93cml0ZS5qcyc7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgBAAAAAAAAjQEAAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAACUBQAAaW1wb3J0IHsgVHlwZVNlbGVjdG9yLCBDbGFzc1NlbGVjdG9yLCBBdHRyaWJ1dGVTZWxlY3RvciwgcGFyc2VTZWxlY3RvciB9IGZyb20gJy4uL2xpYi9jc3MzLXNlbGVjdG9ycy5qcyc7CmltcG9ydCB7IFByZWRpY2F0ZSB9IGZyb20gJ3ByZWRpY2F0ZSc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfSBmcm9tICcuLi9saWIvZG9tLmpzJzsKaW1wb3J0IHsgcmVhZCBhcyByZWFkWE1MLCB3cml0ZSBhcyB3cml0ZVhNTCB9ICBmcm9tICd4bWwnOwoKCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHsKICAgIHN0ZG91dDogcHJvY2Vzcy5zdGRvdXQsCiAgICBzdGRlcnI6IHByb2Nlc3Muc3RkZXJyLAogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBkZXB0aDogSW5maW5pdHksCiAgICAgIGNvbXBhY3Q6IGZhbHNlCiAgICB9CiAgfSk7CgogIGxldCB0eXBlU2VsID0gbmV3IFR5cGVTZWxlY3RvcignaHRtbCcpOwogIC8vdHlwZVNlbD1QcmVkaWNhdGUuc3RyaW5nKCdIVE1MJyk7CgogIGNvbnNvbGUubG9nKCd0eXBlU2VsKCkgPScsIHR5cGVTZWwoeyB0YWdOYW1lOiAnSFRNTCcgfSkpOwoKICBsZXQgY2xhc3NTZWwgPSBuZXcgQ2xhc3NTZWxlY3RvcignY29tbW9uJyk7CgogIGNvbnNvbGUubG9nKCdjbGFzc1NlbCgpID0nLCBjbGFzc1NlbCh7IGF0dHJpYnV0ZXM6IHsgY2xhc3M6ICdjb21tb24gYmlnIGl0ZW0nIH0gfSkpOwoKICBsZXQgYXR0clNlbCA9IG5ldyBBdHRyaWJ1dGVTZWxlY3RvcignbmFtZScsICd0ZXN0Jyk7CgogIGNvbnNvbGUubG9nKCdhdHRyU2VsID0nLCBhdHRyU2VsLnRvU291cmNlKCkpOwogIGNvbnNvbGUubG9nKCdhdHRyU2VsKCkgPScsIGF0dHJTZWwoeyBhdHRyaWJ1dGVzOiB7IG5hbWU6ICd0ZXN0JyB9IH0pKTsKCiAgbGV0IHByb3BTZWwgPSBQcmVkaWNhdGUucHJvcGVydHkoJ25hbWUnLCBQcmVkaWNhdGUuc3RyaW5nKCd0ZXN0JykpOwogIGNvbnNvbGUubG9nKCdwcm9wU2VsKCkgPScsIHByb3BTZWwoeyBuYW1lOiAndGVzdCcgfSkpOwoKICBsZXQgc2VsZWN0b3IgPSBwYXJzZVNlbGVjdG9yKCdlbGVtZW50LmJpZ1tuYW1lPSJ0ZXN0Il0nKTsKCiAgY29uc29sZS5sb2coJ3NlbGVjdG9yJywgc2VsZWN0b3IpOwp9Cgp0cnkgewogIG1haW4oLi4ucHJvY2Vzcy5hcmd2LnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwp9IGZpbmFsbHkgewogIGNvbnNvbGUubG9nKCdTVUNDRVNTJyk7Cn0KAAAAAAAAAACSBQAAAAAAAAAAAAAAAAAAAAAAAJIFAAAAAAAAAAAAAAAAAAAAAAAAkgUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHMBAAAAAAAAcwEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/xpath.js",
			"settings":
			{
				"buffer_size": 4672,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABQEgAAaW1wb3J0IHsgUG9pbnRlciB9IGZyb20gJy4vcG9pbnRlci5qcyc7CmltcG9ydCB7IFByZWRpY2F0ZSB9IGZyb20gJy4vcHJlZGljYXRlLmpzJzsKaW1wb3J0IHsgZXh0ZW5kQXJyYXkgfSBmcm9tICcuL2V4dGVuZEFycmF5LmpzJzsKaW1wb3J0IHsgZGVmaW5lLCBpc09iamVjdCwgZ2V0Q2xhc3NOYW1lIH0gZnJvbSAnLi9taXNjLmpzJzsKaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4vZG9tLmpzJzsKaW1wb3J0IGRlZXAgZnJvbSAnLi9kZWVwLmpzJzsKCmV4cG9ydCBjbGFzcyBYUGF0aCBleHRlbmRzIFBvaW50ZXIgewogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHsKICAgIHN1cGVyKCk7CgogICAgaWYoYXJncy5sZW5ndGggPT0gMSkgewogICAgICBpZih0eXBlb2YgYXJnc1swXSA9PSAnc3RyaW5nJykgYXJncyA9IGFyZ3NbMF0uc3BsaXQoL1wvL2cpOwogICAgICBlbHNlIGlmKEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIGFyZ3MgPSBhcmdzWzBdOwogICAgfQoKICAgIGlmKGFyZ3MubGVuZ3RoID4gMSAmJiBhcmdzWzBdID09PSAnJykgYXJncy5zaGlmdCgpOwoKICAgIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgICAgaWYodHlwZW9mIGFyZyA9PSAnc3RyaW5nJykgewogICAgICAgIGlmKGFyZyAhPSAnY2hpbGRyZW4nICYmIGFyZyAhPSAnYXR0cmlidXRlcycpIHsKICAgICAgICAgIGxldCBtID0gL14oW0EtWmEtel1bLVx3XSopKFxbWzAtOV0rXF18KSQvLmV4ZWMoYXJnKTsKICAgICAgICAgIGlmKG0pIHsKICAgICAgICAgICAgbSA9IFsuLi5tXS5zbGljZSgxLCBtWzJdID09PSAnJyA/IDIgOiAzKTsKICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnbScsIG0pOwogICAgICAgICAgICBpZihtLmxlbmd0aCA+PSAxKSB7CiAgICAgICAgICAgICAgYXJnID0gUHJlZGljYXRlLnByb3BlcnR5KCd0YWdOYW1lJywgLypzID0+IHMgPT0gbVswXSA/PyovIFByZWRpY2F0ZS5zdHJpbmcobVswXSkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBpZihtLmxlbmd0aCA+PSAyKSB7CiAgICAgICAgICAgICAgbGV0IG51bSA9ICttWzFdLnNsaWNlKDEsIC0xKTsKICAgICAgICAgICAgICBhcmcgPSBQcmVkaWNhdGUuYW5kKGFyZywgUHJlZGljYXRlLmVxdWFsKG51bSkpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdhcmcnLCBhcmcpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB0aGlzLnB1c2goYXJnKTsKICAgIH0KICAgIGNvbnNvbGUubG9nKCdYUGF0aC5jb25zdHJ1Y3RvcicsIHRoaXMpOwogIH0KCiAgW1N5bWJvbC5pbnNwZWN0XShkZXB0aCwgb3B0cyA9IHt9KSB7CiAgICBsZXQgb2JqID0gWy4uLnRoaXNdLm1hcChHZXRLZXkpOwogICAgLy9jb25zb2xlLmxvZygnb2JqJywgb2JqKTsKICAgIHJldHVybiAoCiAgICAgIGBceDFiWzE7MzFtJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWUgPz8gdXRpbC5nZXRDbGFzc05hbWUodGhpcyl9XHgxYlswbSBgICsKICAgICAgaW5zcGVjdChvYmogPz8geyBfX3Byb3RvX186IHsgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdYUGF0aCcgfSwgLi4ub2JqIH0sIHsKICAgICAgICAuLi5vcHRzLAogICAgICAgIGN1c3RvbUluc3BlY3Q6IHRydWUKICAgICAgfSkKICAgICk7CiAgfQoKICBzdGF0aWMgZnJvbSA9IGJ1aWxkWFBhdGg7Cn0KCmRlZmluZShYUGF0aC5wcm90b3R5cGUsIHsgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdYUGF0aCcgfSk7CgpleHBvcnQgY29uc3QgSW1tdXRhYmxlWFBhdGggPSBYUGF0aDsKZXhwb3J0IGNvbnN0IE11dGFibGVYUGF0aCA9IFhQYXRoOwoKZXhwb3J0IGZ1bmN0aW9uIHBhcnNlWFBhdGgoc3RyKSB7fQoKZXhwb3J0IGZ1bmN0aW9uIGdldFNpYmxpbmdzKHB0ciwgcm9vdCkge30KCmV4cG9ydCBmdW5jdGlvbiBidWlsZFhQYXRoKHB0ciwgcm9vdCkgewogIGxldCBub2RlID0gcm9vdCwKICAgIHBhcmVudCwKICAgIHByZXZLZXksCiAgICBpID0gMCwKICAgIHBhcnRzID0gW10sCiAgICBzaWJsaW5ncywKICAgIHNpYmxpbmdTYW1lLAogICAga2V5cywKICAgIHR5cGUsCiAgICBzYW1lLAogICAgaGllciA9IFtdOwogIGZvcihsZXQga2V5IG9mIHB0cikgewogICAgaWYodHlwZW9mIGtleSA9PSAnZnVuY3Rpb24nKSB7CiAgICAgIGlmKGlzT2JqZWN0KG5vZGUpICYmICdsZW5ndGgnIGluIG5vZGUpIHsKICAgICAgICBsZXQgYSA9IEFycmF5LmZyb20obm9kZSksCiAgICAgICAgICBmbiA9IGtleTsKCiAgICAgICAga2V5ID0gYS5maW5kSW5kZXgoZm4pOwogICAgICB9CiAgICB9CgogICAgdHlwZSA9IGtleSA9PSAnY2hpbGRyZW4nID8gJ29iamVjdCcgOiBOb2RlVHlwZShub2RlKTsKCiAgICAvLyAgY29uc29sZS5sb2coJ3BhcmVudCcscGFyZW50KTsKCiAgICBpZihwYXJlbnQgJiYgJ2NoaWxkcmVuJyBpbiBwYXJlbnQpIHsKICAgICAgc2libGluZ3MgPSBbLi4ucGFyZW50LmNoaWxkcmVuXTsKICAgICAgLy9jb25zb2xlLmxvZygnc2libGluZ3MnLHNpYmxpbmdzKTsKICAgICAgc2libGluZ1NhbWUgPSBzaWJsaW5ncy5yZWR1Y2UoKGFjYywgbiwgaSkgPT4gewogICAgICAgIGlmKGlzT2JqZWN0KG4pICYmIGlzT2JqZWN0KG5vZGVba2V5XSkpIGlmIChuLnRhZ05hbWUgPT0gbm9kZVtrZXldLnRhZ05hbWUpIGFjYy5wdXNoKFtpLCBuLnRhZ05hbWVdKTsKICAgICAgICByZXR1cm4gYWNjOwogICAgICB9LCBbXSk7CiAgICB9IGVsc2UgewogICAgICBzaWJsaW5ncyA9IFtdOwogICAgICBzaWJsaW5nU2FtZSA9IFtdOwogICAgfQogICAgLy9pZihzaWJsaW5ncy5sZW5ndGggPj0gMikgY29uc29sZS5sb2coJ3NpYmxpbmdzU2FtZScsc2libGluZ1NhbWUpOwoKICAgIGtleXMgPSBpc09iamVjdChub2RlKSA/IE9iamVjdC5rZXlzKG5vZGUpIDogW107CgogICAgaWYoa2V5ID09ICdjaGlsZHJlbicpIHsKICAgICAgLy9wYXJ0cy5wdXNoKCcvJyk7CiAgICB9IGVsc2UgewogICAgICBzYW1lID0gc2libGluZ1NhbWUubGVuZ3RoOwoKICAgICAgLy8gY29uc29sZS5sb2coJ3NhbWUnLHNhbWUpCgogICAgICBsZXQgcGFydCA9IEFkZEtleShub2RlW2tleV0sIGtleSwgaSwgc2FtZSk7CgogICAgICBwYXJ0cy5wdXNoKHBhcnQpOwogICAgfQoKICAgIGlmKCFpc09iamVjdChub2RlKSkKICAgICAgdGhyb3cgbmV3IEVycm9yKAogICAgICAgIGBFcnJvciBpbmRleGluZyA8JHt0eXBlb2Ygbm9kZX0+IHdpdGggPCR7a2V5fT4gWyR7aGllci5qb2luKCcsICcpfV06ICR7cGFydHMubWFwKEdldEtleSkuam9pbignIC0+ICcpfWAKICAgICAgKTsKCiAgICBwYXJlbnQgPSBub2RlOwogICAgbm9kZSA9IG5vZGVba2V5XTsKICAgIGhpZXIucHVzaChrZXkpOwogICAgcHJldktleSA9IGtleTsKICAgIGkrKzsKICB9CgogIGZ1bmN0aW9uIEFkZEtleShub2RlLCBrLCBpLCBzYW1lKSB7CiAgICBsZXQgcyA9ICcnOwoKICAgIGlmKGlzT2JqZWN0KG5vZGUpICYmICd0YWdOYW1lJyBpbiBub2RlKSBzID0gbm9kZS50YWdOYW1lOwoKICAgIGlmKHR5cGVvZiBrID09ICdudW1iZXInKSB7CiAgICAgIGlmKHNhbWUgPiAxKSBzICs9IGBbJHtrfV1gOwogICAgfSBlbHNlIGlmKHR5cGVvZiBrID09ICdzdHJpbmcnKSB7CiAgICB9CiAgICBpZihzID09PSAnJykgcyA9IHsgY2hpbGRyZW46ICcvJyB9W2tdID8/IGsgPz8gJy8nOwogICAgcmV0dXJuIHM7CiAgfQoKICBmdW5jdGlvbiBOb2RlVHlwZShub2RlKSB7CiAgICByZXR1cm4gaXNPYmplY3Qobm9kZSkKICAgICAgPyAnbGVuZ3RoJyBpbiBub2RlICYmIHR5cGVvZiBub2RlLmxlbmd0aCA9PSAnbnVtYmVyJwogICAgICAgID8gJ2FycmF5JwogICAgICAgIDogZ2V0Q2xhc3NOYW1lKG5vZGUpLnRvTG93ZXJDYXNlKCkKICAgICAgOiB0eXBlb2Ygbm9kZTsKICB9CiAgLy9jb25zb2xlLmxvZygnYnVpbGRYUGF0aCcsIHBhcnRzKTsKICByZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mKHBhcnRzLCBYUGF0aC5wcm90b3R5cGUpOwp9CgpmdW5jdGlvbiBHZXRLZXkocCkgewogIGxldCBrOwogIGlmKChpc09iamVjdChwKSB8fCB0eXBlb2YgcCA9PSAnZnVuY3Rpb24nKSAmJiBwIGluc3RhbmNlb2YgUHJlZGljYXRlKSB7CiAgICBpZihwLmlkID09IFByZWRpY2F0ZS5QUk9QRVJUWSkgewogICAgICBjb25zdCBzdHIgPSBwLnZhbHVlcygpWzFdOwogICAgICBrID0gc3RyLnZhbHVlcygpWzBdOwogICAgfQogIH0gZWxzZSBpZih0eXBlb2YgcCA9PSAnb2JqZWN0JyAmJiBbJ3RhZ05hbWUnLCAnY2hpbGRyZW4nLCAnYXR0cmlidXRlcyddLnNvbWUocHJvcCA9PiBwcm9wIGluIHApKSB7CiAgICBrID0gcC50YWdOYW1lOwogIH0gZWxzZSBpZih0eXBlb2YgcCA9PSAnZnVuY3Rpb24nIC8qICYmICEocCBpbnN0YW5jZW9mIFByZWRpY2F0ZSkqLykgewogICAgaWYoL3RhZ05hbWVccyo9PS8udGVzdChwICsgJycpKSBrID0gKHAgKyAnJykucmVwbGFjZSgvLionKC4qKSckLywgJyQxJyk7CiAgICBlbHNlIGsgPSBwOwogIH0gZWxzZSBpZih0eXBlb2YgcCA9PSAnbnVtYmVyJyB8fCB0eXBlb2YgcCA9PSAnc3RyaW5nJykgewogICAgayA9IHA7CiAgfSBlbHNlIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBwYXJ0ICgke3V0aWwuZ2V0VHlwZVN0cihwKX0gJHt0eXBlb2YgcH0pOiAke2luc3BlY3QocCwgeyBjb2xvcnM6IHRydWUgfSl9YCk7CiAgcmV0dXJuIGsgPz8gcDsKfQoKZXh0ZW5kQXJyYXkoWFBhdGgucHJvdG90eXBlKTsKCmV4cG9ydCBkZWZhdWx0IFhQYXRoOwoAAAAAAAAAAEASAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				],
				[
					4,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABAEgAAaW1wb3J0IHsgUG9pbnRlciB9IGZyb20gJ3BvaW50ZXInOwppbXBvcnQgeyBQcmVkaWNhdGUgfSBmcm9tICdwcmVkaWNhdGUnOwppbXBvcnQgeyBkZWZpbmUsIGlzT2JqZWN0LCBpc0Z1bmN0aW9uLCBleHRlbmRBcnJheSwgZ2V0Q2xhc3NOYW1lIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IE5vZGUgfSBmcm9tICcuL2RvbS5qcyc7CmltcG9ydCAqIGFzIGRlZXAgZnJvbSAnZGVlcCc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwoKZXhwb3J0IGNsYXNzIFhQYXRoIGV4dGVuZHMgUG9pbnRlciB7CiAgY29uc3RydWN0b3IoLi4uYXJncykgewogICAgc3VwZXIoKTsKCiAgICBpZihhcmdzLmxlbmd0aCA9PSAxKSB7CiAgICAgIGlmKHR5cGVvZiBhcmdzWzBdID09ICdzdHJpbmcnKSBhcmdzID0gYXJnc1swXS5zcGxpdCgvXC8vZyk7CiAgICAgIGVsc2UgaWYoQXJyYXkuaXNBcnJheShhcmdzWzBdKSkgYXJncyA9IGFyZ3NbMF07CiAgICB9CgogICAgaWYoYXJncy5sZW5ndGggPiAxICYmIGFyZ3NbMF0gPT09ICcnKSBhcmdzLnNoaWZ0KCk7CgogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBpZih0eXBlb2YgYXJnID09ICdzdHJpbmcnKSB7CiAgICAgICAgaWYoYXJnICE9ICdjaGlsZHJlbicgJiYgYXJnICE9ICdhdHRyaWJ1dGVzJykgewogICAgICAgICAgbGV0IG0gPSAvXihbQS1aYS16XVstXHddKikoXFtbMC05XStcXXwpJC8uZXhlYyhhcmcpOwogICAgICAgICAgaWYobSkgewogICAgICAgICAgICBtID0gWy4uLm1dLnNsaWNlKDEsIG1bMl0gPT09ICcnID8gMiA6IDMpOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdtJywgbSk7CiAgICAgICAgICAgIGlmKG0ubGVuZ3RoID49IDEpIHsKICAgICAgICAgICAgICBhcmcgPSBQcmVkaWNhdGUucHJvcGVydHkoJ3RhZ05hbWUnLCAvKnMgPT4gcyA9PSBtWzBdID8/Ki8gUHJlZGljYXRlLnN0cmluZyhtWzBdKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKG0ubGVuZ3RoID49IDIpIHsKICAgICAgICAgICAgICBsZXQgbnVtID0gK21bMV0uc2xpY2UoMSwgLTEpOwogICAgICAgICAgICAgIGFyZyA9IFByZWRpY2F0ZS5hbmQoYXJnLCBQcmVkaWNhdGUuZXF1YWwobnVtKSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FyZycsIGFyZyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMucHVzaChhcmcpOwogICAgfQogICAgY29uc29sZS5sb2coJ1hQYXRoLmNvbnN0cnVjdG9yJywgdGhpcyk7CiAgfQoKICBbU3ltYm9sLmluc3BlY3RdKGRlcHRoLCBvcHRzID0ge30pIHsKICAgIGxldCBvYmogPSBbLi4udGhpc10ubWFwKEdldEtleSk7CiAgICAvL2NvbnNvbGUubG9nKCdvYmonLCBvYmopOwogICAgcmV0dXJuICgKICAgICAgYFx4MWJbMTszMW0ke3RoaXMuY29uc3RydWN0b3IubmFtZSA/PyB1dGlsLmdldENsYXNzTmFtZSh0aGlzKX1ceDFiWzBtIGAgKwogICAgICBpbnNwZWN0KG9iaiA/PyB7IF9fcHJvdG9fXzogeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1hQYXRoJyB9LCAuLi5vYmogfSwgewogICAgICAgIC4uLm9wdHMsCiAgICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZQogICAgICB9KQogICAgKTsKICB9CgogIHN0YXRpYyBmcm9tID0gYnVpbGRYUGF0aDsKfQoKZGVmaW5lKFhQYXRoLnByb3RvdHlwZSwgeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1hQYXRoJyB9KTsKCmV4cG9ydCBjb25zdCBJbW11dGFibGVYUGF0aCA9IFhQYXRoOwpleHBvcnQgY29uc3QgTXV0YWJsZVhQYXRoID0gWFBhdGg7CgpleHBvcnQgZnVuY3Rpb24gcGFyc2VYUGF0aChzdHIpIHt9CgpleHBvcnQgZnVuY3Rpb24gZ2V0U2libGluZ3MocHRyLCByb290KSB7fQoKZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkWFBhdGgocHRyLCByb290KSB7CiAgbGV0IG5vZGUgPSByb290LAogICAgcGFyZW50LAogICAgcHJldktleSwKICAgIGkgPSAwLAogICAgcGFydHMgPSBbXSwKICAgIHNpYmxpbmdzLAogICAgc2libGluZ1NhbWUsCiAgICBrZXlzLAogICAgdHlwZSwKICAgIHNhbWUsCiAgICBoaWVyID0gW107CiAgZm9yKGxldCBrZXkgb2YgcHRyKSB7CiAgICBpZih0eXBlb2Yga2V5ID09ICdmdW5jdGlvbicpIHsKICAgICAgaWYoaXNPYmplY3Qobm9kZSkgJiYgJ2xlbmd0aCcgaW4gbm9kZSkgewogICAgICAgIGxldCBhID0gQXJyYXkuZnJvbShub2RlKSwKICAgICAgICAgIGZuID0ga2V5OwoKICAgICAgICBrZXkgPSBhLmZpbmRJbmRleChmbik7CiAgICAgIH0KICAgIH0KCiAgICB0eXBlID0ga2V5ID09ICdjaGlsZHJlbicgPyAnb2JqZWN0JyA6IE5vZGVUeXBlKG5vZGUpOwoKICAgIC8vICBjb25zb2xlLmxvZygncGFyZW50JyxwYXJlbnQpOwoKICAgIGlmKHBhcmVudCAmJiAnY2hpbGRyZW4nIGluIHBhcmVudCkgewogICAgICBzaWJsaW5ncyA9IFsuLi5wYXJlbnQuY2hpbGRyZW5dOwogICAgICAvL2NvbnNvbGUubG9nKCdzaWJsaW5ncycsc2libGluZ3MpOwogICAgICBzaWJsaW5nU2FtZSA9IHNpYmxpbmdzLnJlZHVjZSgoYWNjLCBuLCBpKSA9PiB7CiAgICAgICAgaWYoaXNPYmplY3QobikgJiYgaXNPYmplY3Qobm9kZVtrZXldKSkgaWYgKG4udGFnTmFtZSA9PSBub2RlW2tleV0udGFnTmFtZSkgYWNjLnB1c2goW2ksIG4udGFnTmFtZV0pOwogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIFtdKTsKICAgIH0gZWxzZSB7CiAgICAgIHNpYmxpbmdzID0gW107CiAgICAgIHNpYmxpbmdTYW1lID0gW107CiAgICB9CiAgICAvL2lmKHNpYmxpbmdzLmxlbmd0aCA+PSAyKSBjb25zb2xlLmxvZygnc2libGluZ3NTYW1lJyxzaWJsaW5nU2FtZSk7CgogICAga2V5cyA9IGlzT2JqZWN0KG5vZGUpID8gT2JqZWN0LmtleXMobm9kZSkgOiBbXTsKCiAgICBpZihrZXkgPT0gJ2NoaWxkcmVuJykgewogICAgICAvL3BhcnRzLnB1c2goJy8nKTsKICAgIH0gZWxzZSB7CiAgICAgIHNhbWUgPSBzaWJsaW5nU2FtZS5sZW5ndGg7CgogICAgICAvLyBjb25zb2xlLmxvZygnc2FtZScsc2FtZSkKCiAgICAgIGxldCBwYXJ0ID0gQWRkS2V5KG5vZGVba2V5XSwga2V5LCBpLCBzYW1lKTsKCiAgICAgIHBhcnRzLnB1c2gocGFydCk7CiAgICB9CgogICAgaWYoIWlzT2JqZWN0KG5vZGUpKQogICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgYEVycm9yIGluZGV4aW5nIDwke3R5cGVvZiBub2RlfT4gd2l0aCA8JHtrZXl9PiBbJHtoaWVyLmpvaW4oJywgJyl9XTogJHtwYXJ0cy5tYXAoR2V0S2V5KS5qb2luKCcgLT4gJyl9YAogICAgICApOwoKICAgIHBhcmVudCA9IG5vZGU7CiAgICBub2RlID0gbm9kZVtrZXldOwogICAgaGllci5wdXNoKGtleSk7CiAgICBwcmV2S2V5ID0ga2V5OwogICAgaSsrOwogIH0KCiAgZnVuY3Rpb24gQWRkS2V5KG5vZGUsIGssIGksIHNhbWUpIHsKICAgIGxldCBzID0gJyc7CgogICAgaWYoaXNPYmplY3Qobm9kZSkgJiYgJ3RhZ05hbWUnIGluIG5vZGUpIHMgPSBub2RlLnRhZ05hbWU7CgogICAgaWYodHlwZW9mIGsgPT0gJ251bWJlcicpIHsKICAgICAgaWYoc2FtZSA+IDEpIHMgKz0gYFske2t9XWA7CiAgICB9IGVsc2UgaWYodHlwZW9mIGsgPT0gJ3N0cmluZycpIHsKICAgIH0KICAgIGlmKHMgPT09ICcnKSBzID0geyBjaGlsZHJlbjogJy8nIH1ba10gPz8gayA/PyAnLyc7CiAgICByZXR1cm4gczsKICB9CgogIGZ1bmN0aW9uIE5vZGVUeXBlKG5vZGUpIHsKICAgIHJldHVybiBpc09iamVjdChub2RlKQogICAgICA/ICdsZW5ndGgnIGluIG5vZGUgJiYgdHlwZW9mIG5vZGUubGVuZ3RoID09ICdudW1iZXInCiAgICAgICAgPyAnYXJyYXknCiAgICAgICAgOiBnZXRDbGFzc05hbWUobm9kZSkudG9Mb3dlckNhc2UoKQogICAgICA6IHR5cGVvZiBub2RlOwogIH0KICAvL2NvbnNvbGUubG9nKCdidWlsZFhQYXRoJywgcGFydHMpOwogIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YocGFydHMsIFhQYXRoLnByb3RvdHlwZSk7Cn0KCmZ1bmN0aW9uIEdldEtleShwKSB7CiAgbGV0IGs7CiAgaWYoKGlzT2JqZWN0KHApIHx8IGlzRnVuY3Rpb24ocCkpICYmIHAgaW5zdGFuY2VvZiBQcmVkaWNhdGUpIHsKICAgIGlmKHAuaWQgPT0gUHJlZGljYXRlLlBST1BFUlRZKSB7CiAgICAgIGNvbnN0IHN0ciA9IHAudmFsdWVzKClbMV07CiAgICAgIGsgPSBzdHIudmFsdWVzKClbMF07CiAgICB9CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdvYmplY3QnICYmIFsndGFnTmFtZScsICdjaGlsZHJlbicsICdhdHRyaWJ1dGVzJ10uc29tZShwcm9wID0+IHByb3AgaW4gcCkpIHsKICAgIGsgPSBwLnRhZ05hbWU7CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdmdW5jdGlvbicgLyogJiYgIShwIGluc3RhbmNlb2YgUHJlZGljYXRlKSovKSB7CiAgICBpZigvdGFnTmFtZVxzKj09Ly50ZXN0KHAgKyAnJykpIGsgPSAocCArICcnKS5yZXBsYWNlKC8uKicoLiopJyQvLCAnJDEnKTsKICAgIGVsc2UgayA9IHA7CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdudW1iZXInIHx8IHR5cGVvZiBwID09ICdzdHJpbmcnKSB7CiAgICBrID0gcDsKICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBhcnQgKCR7dXRpbC5nZXRUeXBlU3RyKHApfSAke3R5cGVvZiBwfSk6ICR7aW5zcGVjdChwLCB7IGNvbG9yczogdHJ1ZSB9KX1gKTsKICByZXR1cm4gayA/PyBwOwp9CgpleHRlbmRBcnJheShYUGF0aC5wcm90b3R5cGUpOwoKZXhwb3J0IGRlZmF1bHQgWFBhdGg7CgAAAAAAAAAAQBIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				],
				[
					5,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABAEgAAaW1wb3J0IHsgUG9pbnRlciB9IGZyb20gJ3BvaW50ZXInOwppbXBvcnQgeyBQcmVkaWNhdGUgfSBmcm9tICdwcmVkaWNhdGUnOwppbXBvcnQgeyBkZWZpbmUsIGlzT2JqZWN0LCBpc0Z1bmN0aW9uLCBleHRlbmRBcnJheSwgZ2V0Q2xhc3NOYW1lIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IE5vZGUgfSBmcm9tICcuL2RvbS5qcyc7CmltcG9ydCAqIGFzIGRlZXAgZnJvbSAnZGVlcCc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwoKZXhwb3J0IGNsYXNzIFhQYXRoIGV4dGVuZHMgUG9pbnRlciB7CiAgY29uc3RydWN0b3IoLi4uYXJncykgewogICAgc3VwZXIoKTsKCiAgICBpZihhcmdzLmxlbmd0aCA9PSAxKSB7CiAgICAgIGlmKHR5cGVvZiBhcmdzWzBdID09ICdzdHJpbmcnKSBhcmdzID0gYXJnc1swXS5zcGxpdCgvXC8vZyk7CiAgICAgIGVsc2UgaWYoQXJyYXkuaXNBcnJheShhcmdzWzBdKSkgYXJncyA9IGFyZ3NbMF07CiAgICB9CgogICAgaWYoYXJncy5sZW5ndGggPiAxICYmIGFyZ3NbMF0gPT09ICcnKSBhcmdzLnNoaWZ0KCk7CgogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBpZih0eXBlb2YgYXJnID09ICdzdHJpbmcnKSB7CiAgICAgICAgaWYoYXJnICE9ICdjaGlsZHJlbicgJiYgYXJnICE9ICdhdHRyaWJ1dGVzJykgewogICAgICAgICAgbGV0IG0gPSAvXihbQS1aYS16XVstXHddKikoXFtbMC05XStcXXwpJC8uZXhlYyhhcmcpOwogICAgICAgICAgaWYobSkgewogICAgICAgICAgICBtID0gWy4uLm1dLnNsaWNlKDEsIG1bMl0gPT09ICcnID8gMiA6IDMpOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdtJywgbSk7CiAgICAgICAgICAgIGlmKG0ubGVuZ3RoID49IDEpIHsKICAgICAgICAgICAgICBhcmcgPSBQcmVkaWNhdGUucHJvcGVydHkoJ3RhZ05hbWUnLCAvKnMgPT4gcyA9PSBtWzBdID8/Ki8gUHJlZGljYXRlLnN0cmluZyhtWzBdKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKG0ubGVuZ3RoID49IDIpIHsKICAgICAgICAgICAgICBsZXQgbnVtID0gK21bMV0uc2xpY2UoMSwgLTEpOwogICAgICAgICAgICAgIGFyZyA9IFByZWRpY2F0ZS5hbmQoYXJnLCBQcmVkaWNhdGUuZXF1YWwobnVtKSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FyZycsIGFyZyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMucHVzaChhcmcpOwogICAgfQogICAgY29uc29sZS5sb2coJ1hQYXRoLmNvbnN0cnVjdG9yJywgdGhpcyk7CiAgfQoKICBbU3ltYm9sLmluc3BlY3RdKGRlcHRoLCBvcHRzID0ge30pIHsKICAgIGxldCBvYmogPSBbLi4udGhpc10ubWFwKEdldEtleSk7CiAgICAvL2NvbnNvbGUubG9nKCdvYmonLCBvYmopOwogICAgcmV0dXJuICgKICAgICAgYFx4MWJbMTszMW0ke3RoaXMuY29uc3RydWN0b3IubmFtZSA/PyB1dGlsLmdldENsYXNzTmFtZSh0aGlzKX1ceDFiWzBtIGAgKwogICAgICBpbnNwZWN0KG9iaiA/PyB7IF9fcHJvdG9fXzogeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1hQYXRoJyB9LCAuLi5vYmogfSwgewogICAgICAgIC4uLm9wdHMsCiAgICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZQogICAgICB9KQogICAgKTsKICB9CgogIHN0YXRpYyBmcm9tID0gYnVpbGRYUGF0aDsKfQoKZGVmaW5lKFhQYXRoLnByb3RvdHlwZSwgeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1hQYXRoJyB9KTsKCmV4cG9ydCBjb25zdCBJbW11dGFibGVYUGF0aCA9IFhQYXRoOwpleHBvcnQgY29uc3QgTXV0YWJsZVhQYXRoID0gWFBhdGg7CgpleHBvcnQgZnVuY3Rpb24gcGFyc2VYUGF0aChzdHIpIHt9CgpleHBvcnQgZnVuY3Rpb24gZ2V0U2libGluZ3MocHRyLCByb290KSB7fQoKZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkWFBhdGgocHRyLCByb290KSB7CiAgbGV0IG5vZGUgPSByb290LAogICAgcGFyZW50LAogICAgcHJldktleSwKICAgIGkgPSAwLAogICAgcGFydHMgPSBbXSwKICAgIHNpYmxpbmdzLAogICAgc2libGluZ1NhbWUsCiAgICBrZXlzLAogICAgdHlwZSwKICAgIHNhbWUsCiAgICBoaWVyID0gW107CiAgZm9yKGxldCBrZXkgb2YgcHRyKSB7CiAgICBpZih0eXBlb2Yga2V5ID09ICdmdW5jdGlvbicpIHsKICAgICAgaWYoaXNPYmplY3Qobm9kZSkgJiYgJ2xlbmd0aCcgaW4gbm9kZSkgewogICAgICAgIGxldCBhID0gQXJyYXkuZnJvbShub2RlKSwKICAgICAgICAgIGZuID0ga2V5OwoKICAgICAgICBrZXkgPSBhLmZpbmRJbmRleChmbik7CiAgICAgIH0KICAgIH0KCiAgICB0eXBlID0ga2V5ID09ICdjaGlsZHJlbicgPyAnb2JqZWN0JyA6IE5vZGVUeXBlKG5vZGUpOwoKICAgIC8vICBjb25zb2xlLmxvZygncGFyZW50JyxwYXJlbnQpOwoKICAgIGlmKHBhcmVudCAmJiAnY2hpbGRyZW4nIGluIHBhcmVudCkgewogICAgICBzaWJsaW5ncyA9IFsuLi5wYXJlbnQuY2hpbGRyZW5dOwogICAgICAvL2NvbnNvbGUubG9nKCdzaWJsaW5ncycsc2libGluZ3MpOwogICAgICBzaWJsaW5nU2FtZSA9IHNpYmxpbmdzLnJlZHVjZSgoYWNjLCBuLCBpKSA9PiB7CiAgICAgICAgaWYoaXNPYmplY3QobikgJiYgaXNPYmplY3Qobm9kZVtrZXldKSkgaWYgKG4udGFnTmFtZSA9PSBub2RlW2tleV0udGFnTmFtZSkgYWNjLnB1c2goW2ksIG4udGFnTmFtZV0pOwogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIFtdKTsKICAgIH0gZWxzZSB7CiAgICAgIHNpYmxpbmdzID0gW107CiAgICAgIHNpYmxpbmdTYW1lID0gW107CiAgICB9CiAgICAvL2lmKHNpYmxpbmdzLmxlbmd0aCA+PSAyKSBjb25zb2xlLmxvZygnc2libGluZ3NTYW1lJyxzaWJsaW5nU2FtZSk7CgogICAga2V5cyA9IGlzT2JqZWN0KG5vZGUpID8gT2JqZWN0LmtleXMobm9kZSkgOiBbXTsKCiAgICBpZihrZXkgPT0gJ2NoaWxkcmVuJykgewogICAgICAvL3BhcnRzLnB1c2goJy8nKTsKICAgIH0gZWxzZSB7CiAgICAgIHNhbWUgPSBzaWJsaW5nU2FtZS5sZW5ndGg7CgogICAgICAvLyBjb25zb2xlLmxvZygnc2FtZScsc2FtZSkKCiAgICAgIGxldCBwYXJ0ID0gQWRkS2V5KG5vZGVba2V5XSwga2V5LCBpLCBzYW1lKTsKCiAgICAgIHBhcnRzLnB1c2gocGFydCk7CiAgICB9CgogICAgaWYoIWlzT2JqZWN0KG5vZGUpKQogICAgICB0aHJvdyBuZXcgRXJyb3IoCiAgICAgICAgYEVycm9yIGluZGV4aW5nIDwke3R5cGVvZiBub2RlfT4gd2l0aCA8JHtrZXl9PiBbJHtoaWVyLmpvaW4oJywgJyl9XTogJHtwYXJ0cy5tYXAoR2V0S2V5KS5qb2luKCcgLT4gJyl9YAogICAgICApOwoKICAgIHBhcmVudCA9IG5vZGU7CiAgICBub2RlID0gbm9kZVtrZXldOwogICAgaGllci5wdXNoKGtleSk7CiAgICBwcmV2S2V5ID0ga2V5OwogICAgaSsrOwogIH0KCiAgZnVuY3Rpb24gQWRkS2V5KG5vZGUsIGssIGksIHNhbWUpIHsKICAgIGxldCBzID0gJyc7CgogICAgaWYoaXNPYmplY3Qobm9kZSkgJiYgJ3RhZ05hbWUnIGluIG5vZGUpIHMgPSBub2RlLnRhZ05hbWU7CgogICAgaWYodHlwZW9mIGsgPT0gJ251bWJlcicpIHsKICAgICAgaWYoc2FtZSA+IDEpIHMgKz0gYFske2t9XWA7CiAgICB9IGVsc2UgaWYodHlwZW9mIGsgPT0gJ3N0cmluZycpIHsKICAgIH0KICAgIGlmKHMgPT09ICcnKSBzID0geyBjaGlsZHJlbjogJy8nIH1ba10gPz8gayA/PyAnLyc7CiAgICByZXR1cm4gczsKICB9CgogIGZ1bmN0aW9uIE5vZGVUeXBlKG5vZGUpIHsKICAgIHJldHVybiBpc09iamVjdChub2RlKQogICAgICA/ICdsZW5ndGgnIGluIG5vZGUgJiYgdHlwZW9mIG5vZGUubGVuZ3RoID09ICdudW1iZXInCiAgICAgICAgPyAnYXJyYXknCiAgICAgICAgOiBnZXRDbGFzc05hbWUobm9kZSkudG9Mb3dlckNhc2UoKQogICAgICA6IHR5cGVvZiBub2RlOwogIH0KICAvL2NvbnNvbGUubG9nKCdidWlsZFhQYXRoJywgcGFydHMpOwogIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YocGFydHMsIFhQYXRoLnByb3RvdHlwZSk7Cn0KCmZ1bmN0aW9uIEdldEtleShwKSB7CiAgbGV0IGs7CiAgaWYoKGlzT2JqZWN0KHApIHx8IGlzRnVuY3Rpb24ocCkpICYmIHAgaW5zdGFuY2VvZiBQcmVkaWNhdGUpIHsKICAgIGlmKHAuaWQgPT0gUHJlZGljYXRlLlBST1BFUlRZKSB7CiAgICAgIGNvbnN0IHN0ciA9IHAudmFsdWVzKClbMV07CiAgICAgIGsgPSBzdHIudmFsdWVzKClbMF07CiAgICB9CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdvYmplY3QnICYmIFsndGFnTmFtZScsICdjaGlsZHJlbicsICdhdHRyaWJ1dGVzJ10uc29tZShwcm9wID0+IHByb3AgaW4gcCkpIHsKICAgIGsgPSBwLnRhZ05hbWU7CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdmdW5jdGlvbicgLyogJiYgIShwIGluc3RhbmNlb2YgUHJlZGljYXRlKSovKSB7CiAgICBpZigvdGFnTmFtZVxzKj09Ly50ZXN0KHAgKyAnJykpIGsgPSAocCArICcnKS5yZXBsYWNlKC8uKicoLiopJyQvLCAnJDEnKTsKICAgIGVsc2UgayA9IHA7CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdudW1iZXInIHx8IHR5cGVvZiBwID09ICdzdHJpbmcnKSB7CiAgICBrID0gcDsKICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBhcnQgKCR7dXRpbC5nZXRUeXBlU3RyKHApfSAke3R5cGVvZiBwfSk6ICR7aW5zcGVjdChwLCB7IGNvbG9yczogdHJ1ZSB9KX1gKTsKICByZXR1cm4gayA/PyBwOwp9CgpleHRlbmRBcnJheShYUGF0aC5wcm90b3R5cGUpOwoKZXhwb3J0IGRlZmF1bHQgWFBhdGg7CgAAAAAAAAAAEBIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAQEgAAaW1wb3J0IHsgUG9pbnRlciB9IGZyb20gJ3BvaW50ZXInOwppbXBvcnQgeyBQcmVkaWNhdGUgfSBmcm9tICdwcmVkaWNhdGUnOwppbXBvcnQgeyBkZWZpbmUsIGlzT2JqZWN0LCBpc0Z1bmN0aW9uLCBleHRlbmRBcnJheSwgZ2V0Q2xhc3NOYW1lIH0gZnJvbSAndXRpbCc7CmltcG9ydCB7IE5vZGUgfSBmcm9tICcuL2RvbS5qcyc7CmltcG9ydCAqIGFzIGRlZXAgZnJvbSAnZGVlcCc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwoKZXhwb3J0IGNsYXNzIFhQYXRoIGV4dGVuZHMgUG9pbnRlciB7CiAgY29uc3RydWN0b3IoLi4uYXJncykgewogICAgc3VwZXIoKTsKCiAgICBpZihhcmdzLmxlbmd0aCA9PSAxKSB7CiAgICAgIGlmKHR5cGVvZiBhcmdzWzBdID09ICdzdHJpbmcnKSBhcmdzID0gYXJnc1swXS5zcGxpdCgvXC8vZyk7CiAgICAgIGVsc2UgaWYoQXJyYXkuaXNBcnJheShhcmdzWzBdKSkgYXJncyA9IGFyZ3NbMF07CiAgICB9CgogICAgaWYoYXJncy5sZW5ndGggPiAxICYmIGFyZ3NbMF0gPT09ICcnKSBhcmdzLnNoaWZ0KCk7CgogICAgZm9yKGxldCBhcmcgb2YgYXJncykgewogICAgICBpZih0eXBlb2YgYXJnID09ICdzdHJpbmcnKSB7CiAgICAgICAgaWYoYXJnICE9ICdjaGlsZHJlbicgJiYgYXJnICE9ICdhdHRyaWJ1dGVzJykgewogICAgICAgICAgbGV0IG0gPSAvXihbQS1aYS16XVstXHddKikoXFtbMC05XStcXXwpJC8uZXhlYyhhcmcpOwogICAgICAgICAgaWYobSkgewogICAgICAgICAgICBtID0gWy4uLm1dLnNsaWNlKDEsIG1bMl0gPT09ICcnID8gMiA6IDMpOwogICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdtJywgbSk7CiAgICAgICAgICAgIGlmKG0ubGVuZ3RoID49IDEpIHsKICAgICAgICAgICAgICBhcmcgPSBQcmVkaWNhdGUucHJvcGVydHkoJ3RhZ05hbWUnLCAvKnMgPT4gcyA9PSBtWzBdID8/Ki8gUHJlZGljYXRlLnN0cmluZyhtWzBdKSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmKG0ubGVuZ3RoID49IDIpIHsKICAgICAgICAgICAgICBsZXQgbnVtID0gK21bMV0uc2xpY2UoMSwgLTEpOwogICAgICAgICAgICAgIGFyZyA9IFByZWRpY2F0ZS5hbmQoYXJnLCBQcmVkaWNhdGUuZXF1YWwobnVtKSk7CiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2FyZycsIGFyZyk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KCiAgICAgIHRoaXMucHVzaChhcmcpOwogICAgfQogICAgY29uc29sZS5sb2coJ1hQYXRoLmNvbnN0cnVjdG9yJywgdGhpcyk7CiAgfQoKICBbU3ltYm9sLmluc3BlY3RdKGRlcHRoLCBvcHRzID0ge30pIHsKICAgIGxldCBvYmogPSBbLi4udGhpc10ubWFwKEdldEtleSk7CiAgICAvL2NvbnNvbGUubG9nKCdvYmonLCBvYmopOwogICAgcmV0dXJuICgKICAgICAgYFx4MWJbMTszMW0ke3RoaXMuY29uc3RydWN0b3IubmFtZSA/PyB1dGlsLmdldENsYXNzTmFtZSh0aGlzKX1ceDFiWzBtIGAgKwogICAgICBpbnNwZWN0KG9iaiA/PyB7IF9fcHJvdG9fXzogeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1hQYXRoJyB9LCAuLi5vYmogfSwgewogICAgICAgIC4uLm9wdHMsCiAgICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZQogICAgICB9KQogICAgKTsKICB9CgogIHN0YXRpYyBmcm9tID0gYnVpbGRYUGF0aDsKfQoKZGVmaW5lKFhQYXRoLnByb3RvdHlwZSwgeyBbU3ltYm9sLnRvU3RyaW5nVGFnXTogJ1hQYXRoJyB9KTsKCmV4cG9ydCBjb25zdCBJbW11dGFibGVYUGF0aCA9IFhQYXRoOwpleHBvcnQgY29uc3QgTXV0YWJsZVhQYXRoID0gWFBhdGg7CgpleHBvcnQgZnVuY3Rpb24gcGFyc2VYUGF0aChzdHIpIHt9CgpleHBvcnQgZnVuY3Rpb24gZ2V0U2libGluZ3MocHRyLCByb290KSB7fQoKZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkWFBhdGgocHRyLCByb290KSB7CiAgbGV0IG5vZGUgPSByb290LAogICAgcGFyZW50LAogICAgcHJldktleSwKICAgIGkgPSAwLAogICAgcGFydHMgPSBbXSwKICAgIHNpYmxpbmdzLAogICAgc2libGluZ1NhbWUsCiAgICBrZXlzLAogICAgdHlwZSwKICAgIHNhbWUsCiAgICBoaWVyID0gW107CiAgZm9yKGxldCBrZXkgb2YgcHRyKSB7CiAgICBpZih0eXBlb2Yga2V5ID09ICdmdW5jdGlvbicpIHsKICAgICAgaWYoaXNPYmplY3Qobm9kZSkgJiYgJ2xlbmd0aCcgaW4gbm9kZSkgewogICAgICAgIGxldCBhID0gQXJyYXkuZnJvbShub2RlKSwKICAgICAgICAgIGZuID0ga2V5OwoKICAgICAgICBrZXkgPSBhLmZpbmRJbmRleChmbik7CiAgICAgIH0KICAgIH0KCiAgICB0eXBlID0ga2V5ID09ICdjaGlsZHJlbicgPyAnb2JqZWN0JyA6IE5vZGVUeXBlKG5vZGUpOwoKICAgIC8vICBjb25zb2xlLmxvZygncGFyZW50JyxwYXJlbnQpOwoKICAgIGlmKHBhcmVudCAmJiAnY2hpbGRyZW4nIGluIHBhcmVudCkgewogICAgICBzaWJsaW5ncyA9IFsuLi5wYXJlbnQuY2hpbGRyZW5dOwogICAgICAvL2NvbnNvbGUubG9nKCdzaWJsaW5ncycsc2libGluZ3MpOwogICAgICBzaWJsaW5nU2FtZSA9IHNpYmxpbmdzLnJlZHVjZSgoYWNjLCBuLCBpKSA9PiB7CiAgICAgICAgaWYoaXNPYmplY3QobikgJiYgaXNPYmplY3Qobm9kZVtrZXldKSkgaWYgKG4udGFnTmFtZSA9PSBub2RlW2tleV0udGFnTmFtZSkgYWNjLnB1c2goW2ksIG4udGFnTmFtZV0pOwogICAgICAgIHJldHVybiBhY2M7CiAgICAgIH0sIFtdKTsKICAgIH0gZWxzZSB7CiAgICAgIHNpYmxpbmdzID0gW107CiAgICAgIHNpYmxpbmdTYW1lID0gW107CiAgICB9CiAgICAvL2lmKHNpYmxpbmdzLmxlbmd0aCA+PSAyKSBjb25zb2xlLmxvZygnc2libGluZ3NTYW1lJyxzaWJsaW5nU2FtZSk7CgogICAga2V5cyA9IGlzT2JqZWN0KG5vZGUpID8gT2JqZWN0LmtleXMobm9kZSkgOiBbXTsKCiAgICBpZihrZXkgPT0gJ2NoaWxkcmVuJykgewogICAgICAvL3BhcnRzLnB1c2goJy8nKTsKICAgIH0gZWxzZSB7CiAgICAgIHNhbWUgPSBzaWJsaW5nU2FtZS5sZW5ndGg7CgogICAgICAvLyBjb25zb2xlLmxvZygnc2FtZScsc2FtZSkKCiAgICAgIGxldCBwYXJ0ID0gQWRkS2V5KG5vZGVba2V5XSwga2V5LCBpLCBzYW1lKTsKCiAgICAgIHBhcnRzLnB1c2gocGFydCk7CiAgICB9CgogICAgaWYoIWlzT2JqZWN0KG5vZGUpKSB0aHJvdyBuZXcgRXJyb3IoYEVycm9yIGluZGV4aW5nIDwke3R5cGVvZiBub2RlfT4gd2l0aCA8JHtrZXl9PiBbJHtoaWVyLmpvaW4oJywgJyl9XTogJHtwYXJ0cy5tYXAoR2V0S2V5KS5qb2luKCcgLT4gJyl9YCk7CgogICAgcGFyZW50ID0gbm9kZTsKICAgIG5vZGUgPSBub2RlW2tleV07CiAgICBoaWVyLnB1c2goa2V5KTsKICAgIHByZXZLZXkgPSBrZXk7CiAgICBpKys7CiAgfQoKICBmdW5jdGlvbiBBZGRLZXkobm9kZSwgaywgaSwgc2FtZSkgewogICAgbGV0IHMgPSAnJzsKCiAgICBpZihpc09iamVjdChub2RlKSAmJiAndGFnTmFtZScgaW4gbm9kZSkgcyA9IG5vZGUudGFnTmFtZTsKCiAgICBpZih0eXBlb2YgayA9PSAnbnVtYmVyJykgewogICAgICBpZihzYW1lID4gMSkgcyArPSBgWyR7a31dYDsKICAgIH0gZWxzZSBpZih0eXBlb2YgayA9PSAnc3RyaW5nJykgewogICAgfQogICAgaWYocyA9PT0gJycpIHMgPSB7IGNoaWxkcmVuOiAnLycgfVtrXSA/PyBrID8/ICcvJzsKICAgIHJldHVybiBzOwogIH0KCiAgZnVuY3Rpb24gTm9kZVR5cGUobm9kZSkgewogICAgcmV0dXJuIGlzT2JqZWN0KG5vZGUpID8gKCdsZW5ndGgnIGluIG5vZGUgJiYgdHlwZW9mIG5vZGUubGVuZ3RoID09ICdudW1iZXInID8gJ2FycmF5JyA6IGdldENsYXNzTmFtZShub2RlKS50b0xvd2VyQ2FzZSgpKSA6IHR5cGVvZiBub2RlOwogIH0KICAvL2NvbnNvbGUubG9nKCdidWlsZFhQYXRoJywgcGFydHMpOwogIHJldHVybiBPYmplY3Quc2V0UHJvdG90eXBlT2YocGFydHMsIFhQYXRoLnByb3RvdHlwZSk7Cn0KCmZ1bmN0aW9uIEdldEtleShwKSB7CiAgbGV0IGs7CiAgaWYoKGlzT2JqZWN0KHApIHx8IGlzRnVuY3Rpb24ocCkpICYmIHAgaW5zdGFuY2VvZiBQcmVkaWNhdGUpIHsKICAgIGlmKHAuaWQgPT0gUHJlZGljYXRlLlBST1BFUlRZKSB7CiAgICAgIGNvbnN0IHN0ciA9IHAudmFsdWVzKClbMV07CiAgICAgIGsgPSBzdHIudmFsdWVzKClbMF07CiAgICB9CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdvYmplY3QnICYmIFsndGFnTmFtZScsICdjaGlsZHJlbicsICdhdHRyaWJ1dGVzJ10uc29tZShwcm9wID0+IHByb3AgaW4gcCkpIHsKICAgIGsgPSBwLnRhZ05hbWU7CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdmdW5jdGlvbicgLyogJiYgIShwIGluc3RhbmNlb2YgUHJlZGljYXRlKSovKSB7CiAgICBpZigvdGFnTmFtZVxzKj09Ly50ZXN0KHAgKyAnJykpIGsgPSAocCArICcnKS5yZXBsYWNlKC8uKicoLiopJyQvLCAnJDEnKTsKICAgIGVsc2UgayA9IHA7CiAgfSBlbHNlIGlmKHR5cGVvZiBwID09ICdudW1iZXInIHx8IHR5cGVvZiBwID09ICdzdHJpbmcnKSB7CiAgICBrID0gcDsKICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHBhcnQgKCR7dXRpbC5nZXRUeXBlU3RyKHApfSAke3R5cGVvZiBwfSk6ICR7aW5zcGVjdChwLCB7IGNvbG9yczogdHJ1ZSB9KX1gKTsKICByZXR1cm4gayA/PyBwOwp9CgpleHRlbmRBcnJheShYUGF0aC5wcm90b3R5cGUpOwoKZXhwb3J0IGRlZmF1bHQgWFBhdGg7CgAAAAAAAAAAQBIAAAAAAAAAAAAAAAAAAAAAAABAEgAAAAAAAAAAAAAAAAAAAAAAAEASAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/pointer.js",
			"settings":
			{
				"buffer_size": 1767,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 34945,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					25,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACBiAAALy9pbXBvcnQgeyBTeXNjYWxsRXJyb3IgfSBmcm9tICdzeXNjYWxsZXJyb3InOwppbXBvcnQgeyBKU19FVkFMX0ZMQUdfQkFDS1RSQUNFX0JBUlJJRVIsIExvY2F0aW9uLCBkdXBBcnJheUJ1ZmZlciwgZXNjYXBlIC8qLCBnZXRQcm90b3R5cGVDaGFpbiovLCBpc0FycmF5LCBpc0JpZ0RlY2ltYWwsIGlzQmlnRmxvYXQsIGlzQmlnSW50LCBpc0Jvb2wsIGlzQ0Z1bmN0aW9uLCBpc0NvbnN0cnVjdG9yLCBpc0VtcHR5U3RyaW5nLCBpc0Vycm9yLCBpc0V4Y2VwdGlvbiwgaXNFeHRlbnNpYmxlLCBpc0Z1bmN0aW9uLCBpc0hUTUxEREEsIGlzSW5zdGFuY2VPZiwgaXNJbnRlZ2VyLCBpc0pvYlBlbmRpbmcsIGlzTGl2ZU9iamVjdCwgaXNOdWxsLCBpc051bWJlciwgaXNPYmplY3QsIGlzUmVnaXN0ZXJlZENsYXNzLCBpc1N0cmluZywgaXNTeW1ib2wsIGlzVW5jYXRjaGFibGVFcnJvciwgaXNVbmRlZmluZWQsIGlzVW5pbml0aWFsaXplZCwgaXNBcnJheUJ1ZmZlciwgcmFuZCwgdG9BcnJheUJ1ZmZlciwgdG9TdHJpbmcsIHdhdGNoLCBiaXRzLCBnZXRUeXBlTmFtZSB9IGZyb20gJ21pc2MnOwppbXBvcnQgeyBleHRlbmRBcnJheSwgQXJyYXlFeHRlbnNpb25zIH0gZnJvbSAnLi9leHRlbmRBcnJheS5qcyc7CmltcG9ydCB7IGV4dGVuZEdlbmVyYXRvciwgR2VuZXJhdG9yRXh0ZW5zaW9ucywgR2VuZXJhdG9yUHJvdG90eXBlIH0gZnJvbSAnLi9leHRlbmRHZW5lcmF0b3IuanMnOwppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7Cgpjb25zdCBzbGljZUZuID0geCA9PgogICh7CiAgICBBcnJheTogQXJyYXkucHJvdG90eXBlLnNsaWNlLAogICAgU3RyaW5nOiBTdHJpbmcucHJvdG90eXBlLnNsaWNlLAogICAgQXJyYXlCdWZmZXIoc3RhcnQsIGVuZCkgewogICAgICBzdGFydCA/Pz0gMDsKICAgICAgZW5kID8/PSB0aGlzLmJ5dGVMZW5ndGg7CiAgICAgIHJldHVybiBkdXBBcnJheUJ1ZmZlcih0aGlzLCBzdGFydCwgZW5kIC0gc3RhcnQpOwogICAgfSwKICAgIFNoYXJlZEFycmF5QnVmZmVyOiBTaGFyZWRBcnJheUJ1ZmZlci5wcm90b3R5cGUuc2xpY2UsCiAgICBVaW50OENsYW1wZWRBcnJheTogVWludDhDbGFtcGVkQXJyYXkucHJvdG90eXBlLnNsaWNlLAogICAgSW50OEFycmF5OiBJbnQ4QXJyYXkucHJvdG90eXBlLnNsaWNlLAogICAgVWludDhBcnJheTogVWludDhBcnJheS5wcm90b3R5cGUuc2xpY2UsCiAgICBJbnQxNkFycmF5OiBJbnQxNkFycmF5LnByb3RvdHlwZS5zbGljZSwKICAgIFVpbnQxNkFycmF5OiBVaW50MTZBcnJheS5wcm90b3R5cGUuc2xpY2UsCiAgICBJbnQzMkFycmF5OiBJbnQzMkFycmF5LnByb3RvdHlwZS5zbGljZSwKICAgIFVpbnQzMkFycmF5OiBVaW50MzJBcnJheS5wcm90b3R5cGUuc2xpY2UsCiAgICBCaWdJbnQ2NEFycmF5OiBCaWdJbnQ2NEFycmF5LnByb3RvdHlwZS5zbGljZSwKICAgIEJpZ1VpbnQ2NEFycmF5OiBCaWdVaW50NjRBcnJheS5wcm90b3R5cGUuc2xpY2UsCiAgICBGbG9hdDMyQXJyYXk6IEZsb2F0MzJBcnJheS5wcm90b3R5cGUuc2xpY2UsCiAgICBGbG9hdDY0QXJyYXk6IEZsb2F0NjRBcnJheS5wcm90b3R5cGUuc2xpY2UKICB9W2dldFR5cGVOYW1lKHgpXSk7CgpleHBvcnQgY29uc3Qgc2xpY2UgPSAoeCwgcywgZSkgPT4gKHNsaWNlRm4oeCkgPz8geC5zbGljZSkuY2FsbCh4LCBzLCBlKTsKCi8qdHlwZW9mIHggPT0gJ29iamVjdCcKICAgID8gaXNBcnJheUJ1ZmZlcih4KQogICAgICA/IGR1cEFycmF5QnVmZmVyKHgsIHMsIGUpCiAgICAgIDogQXJyYXkuaXNBcnJheSh4KQogICAgICA/IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHgsIHMsIGUpCiAgICAgIDogeC5zbGljZShzLCBlKQogICAgOiBTdHJpbmcucHJvdG90eXBlLnNsaWNlLmNhbGwoeCwgcywgZSk7Ki8KY29uc3Qgc3RyaW5naWZ5ID0gdiA9PiBgJHt2fWA7CmNvbnN0IHByb3RvT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7CmNvbnN0IGZvcm1hdE51bWJlciA9IG4gPT4gKG4gPT09IC0wID8gJy0wJyA6IGAke259YCk7CmNvbnN0IGlzTmF0aXZlID0gZm4gPT4gL1xbbmF0aXZlXHNjb2RlXF0vLnRlc3Qoc3RyaW5naWZ5KGZuKSk7CgpmdW5jdGlvbiB1dGlsKCkgewogIHJldHVybiB1dGlsOwp9Cgp1dGlsLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHV0aWw7Cgpjb25zdCBBc3luY0Z1bmN0aW9uID0gYXN5bmMgZnVuY3Rpb24geCgpIHt9LmNvbnN0cnVjdG9yOwpjb25zdCBHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKiAoKSB7fS5jb25zdHJ1Y3RvcjsKY29uc3QgQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9IGFzeW5jIGZ1bmN0aW9uKiAoKSB7fS5jb25zdHJ1Y3RvcjsKY29uc3QgVHlwZWRBcnJheSA9IHByb3RvT2YocHJvdG9PZihuZXcgVWludDE2QXJyYXkoMTApKSkuY29uc3RydWN0b3I7Cgpjb25zdCBTZXRJdGVyYXRvclByb3RvdHlwZSA9IHByb3RvT2YobmV3IFNldCgpLnZhbHVlcygpKTsKY29uc3QgTWFwSXRlcmF0b3JQcm90b3R5cGUgPSBwcm90b09mKG5ldyBNYXAoKS5lbnRyaWVzKCkpOwovL2NvbnN0IEdlbmVyYXRvclByb3RvdHlwZSA9IHByb3RvT2YoKGZ1bmN0aW9uKiAoKSB7fSkoKSk7CgovLyBwcmV0dGllci1pZ25vcmUKZXhwb3J0IGNvbnN0IGVycm9ycyA9IFtudWxsLCAnRVBFUk0nLCAnRU5PRU5UJywgJ0VTUkNIJywgJ0VJTlRSJywgJ0VJTycsICdFTlhJTycsICdFMkJJRycsICdFTk9FWEVDJywgJ0VCQURGJywgJ0VDSElMRCcsICdFQUdBSU4nLCAnRU5PTUVNJywgJ0VBQ0NFUycsICdFRkFVTFQnLCAnRU5PVEJMSycsICdFQlVTWScsICdFRVhJU1QnLCAnRVhERVYnLCAnRU5PREVWJywgJ0VOT1RESVInLCAnRUlTRElSJywgJ0VJTlZBTCcsICdFTkZJTEUnLCAnRU1GSUxFJywgJ0VOT1RUWScsICdFVFhUQlNZJywgJ0VGQklHJywgJ0VOT1NQQycsICdFU1BJUEUnLCAnRVJPRlMnLCAnRU1MSU5LJywgJ0VQSVBFJywgJ0VET00nLCAnRVJBTkdFJywgJ0VERUFETEsnLCAnRU5BTUVUT09MT05HJywgJ0VOT0xDSycsICdFTk9TWVMnLCAnRU5PVEVNUFRZJywgbnVsbCwgbnVsbCwgJ0VOT01TRycsICdFSURSTScsICdFQ0hSTkcnLCAnRUwyTlNZTkMnLCAnRUwzSExUJywgJ0VMM1JTVCcsICdFTE5STkcnLCAnRVVOQVRDSCcsICdFTk9DU0knLCAnRUwySExUJywgJ0VCQURFJywgJ0VCQURSJywgJ0VYRlVMTCcsICdFTk9BTk8nLCAnRUJBRFJRQycsIG51bGwsICcnLCAnRUJGT05UJywgJ0VOT1NUUicsICdFTk9EQVRBJywgJ0VUSU1FJywgJ0VOT1NSJywgJ0VOT05FVCcsICdFTk9QS0cnLCAnRVJFTU9URScsICdFTk9MSU5LJywgJ0VBRFYnLCAnRVNSTU5UJywgJ0VDT01NJywgJ0VQUk9UTycsICdFTVVMVElIT1AnLCAnRURPVERPVCcsICdFQkFETVNHJywgJ0VPVkVSRkxPVycsICdFTk9UVU5JUScsICdFQkFERkQnLCAnRVJFTUNIRycsICdFTElCQUNDJywgJ0VMSUJCQUQnLCAnRUxJQlNDTicsICdFTElCTUFYJywgJ0VMSUJFWEVDJywgJ0VJTFNFUScsICdFUkVTVEFSVCcsICdFU1RSUElQRScsICdFVVNFUlMnLCAnRU5PVFNPQ0snLCAnRURFU1RBRERSUkVRJywgJ0VNU0dTSVpFJywgJ0VQUk9UT1RZUEUnLCAnRU5PUFJPVE9PUFQnLCAnRVBST1RPTk9TVVBQT1JUJywgJ0VTT0NLVE5PU1VQUE9SVCcsICdFT1BOT1RTVVBQJywgJ0VQRk5PU1VQUE9SVCcsICdFQUZOT1NVUFBPUlQnLCAnRUFERFJJTlVTRScsICdFQUREUk5PVEFWQUlMJywgJ0VORVRET1dOJywgJ0VORVRVTlJFQUNIJywgJ0VORVRSRVNFVCcsICdFQ09OTkFCT1JURUQnLCAnRUNPTk5SRVNFVCcsICdFTk9CVUZTJywgJ0VJU0NPTk4nLCAnRU5PVENPTk4nLCAnRVNIVVRET1dOJywgJ0VUT09NQU5ZUkVGUycsICdFVElNRURPVVQnLCAnRUNPTk5SRUZVU0VEJywgJ0VIT1NURE9XTicsICdFSE9TVFVOUkVBQ0gnLCAnRUFMUkVBRFknLCAnRUlOUFJPR1JFU1MnLCAnRVNUQUxFJywgJ0VVQ0xFQU4nLCAnRU5PVE5BTScsICdFTkFWQUlMJywgJ0VJU05BTScsICdFUkVNT1RFSU8nLCAnRURRVU9UJywgJ0VOT01FRElVTScsICdFTUVESVVNVFlQRScsICdFQ0FOQ0VMRUQnLCAnRU5PS0VZJywgJ0VLRVlFWFBJUkVEJywgJ0VLRVlSRVZPS0VEJywgJ0VLRVlSRUpFQ1RFRCcsICdFT1dORVJERUFEJywgJ0VOT1RSRUNPVkVSQUJMRScsICdFUkZLSUxMJ107CgpleHBvcnQgY29uc3QgdHlwZXMgPSB7CiAgaXNBbnlBcnJheUJ1ZmZlcih2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgKHYgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCB2IGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXIpOwogIH0sCiAgaXNBcnJheUJ1ZmZlcih2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyOwogIH0sCiAgaXNCaWdJbnQ2NEFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgQmlnSW50NjRBcnJheTsKICB9LAogIGlzQmlnVWludDY0QXJyYXkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBCaWdVaW50NjRBcnJheTsKICB9LAogIGlzRGF0ZSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIERhdGU7CiAgfSwKICBpc0Zsb2F0MzJBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheTsKICB9LAogIGlzRmxvYXQ2NEFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgRmxvYXQ2NEFycmF5OwogIH0sCiAgaXNJbnQ4QXJyYXkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBJbnQ4QXJyYXk7CiAgfSwKICBpc0ludDE2QXJyYXkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBJbnQxNkFycmF5OwogIH0sCiAgaXNJbnQzMkFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgSW50MzJBcnJheTsKICB9LAogIGlzTWFwKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgTWFwOwogIH0sCiAgaXNQcm9taXNlKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgUHJvbWlzZTsKICB9LAogIGlzUHJveHkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBQcm94eTsKICB9LAogIGlzUmVnRXhwKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgUmVnRXhwOwogIH0sCiAgaXNTZXQodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBTZXQ7CiAgfSwKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgU2hhcmVkQXJyYXlCdWZmZXI7CiAgfSwKICBpc1VpbnQ4QXJyYXkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBVaW50OEFycmF5OwogIH0sCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFVpbnQ4Q2xhbXBlZEFycmF5OwogIH0sCiAgaXNVaW50MTZBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFVpbnQxNkFycmF5OwogIH0sCiAgaXNVaW50MzJBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFVpbnQzMkFycmF5OwogIH0sCiAgaXNXZWFrTWFwKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgV2Vha01hcDsKICB9LAogIGlzV2Vha1NldCh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFdlYWtTZXQ7CiAgfSwKICBpc0RhdGFWaWV3KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgRGF0YVZpZXc7CiAgfSwKICBpc0Jvb2xlYW5PYmplY3QodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBCb29sZWFuOwogIH0sCiAgaXNBc3luY0Z1bmN0aW9uKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgQXN5bmNGdW5jdGlvbjsKICB9LAogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBHZW5lcmF0b3JGdW5jdGlvbjsKICB9LAogIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEFzeW5jR2VuZXJhdG9yRnVuY3Rpb247CiAgfSwKICBpc051bWJlck9iamVjdCh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIE51bWJlcjsKICB9LAogIGlzQmlnSW50T2JqZWN0KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgQmlnSW50OwogIH0sCiAgaXNTeW1ib2xPYmplY3QodikgewogICAgcmV0dXJuIHYgJiYgdiBpbnN0YW5jZW9mIFN5bWJvbDsKICB9LAogIGlzTmF0aXZlRXJyb3IodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBFcnJvciAmJiBpc05hdGl2ZSh2LmNvbnN0cnVjdG9yKTsKICB9LAogIGlzTWFwSXRlcmF0b3IodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHByb3RvT2YodikgPT0gTWFwSXRlcmF0b3JQcm90b3R5cGU7CiAgfSwKICBpc1NldEl0ZXJhdG9yKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiBwcm90b09mKHYpID09IFNldEl0ZXJhdG9yUHJvdG90eXBlOwogIH0sCiAgaXNTdHJpbmdPYmplY3QodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBTdHJpbmc7CiAgfSwKICBpc0FycmF5QnVmZmVyVmlldyh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KHYpOwogIH0sCiAgaXNBcmd1bWVudHNPYmplY3QodikgewogICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2KSA9PSAnW29iamVjdCBBcmd1bWVudHNdJzsKICB9LAoKICAvKiBpc0V4dGVybmFsKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgRXh0ZXJuYWw7CiAgfSwqLwoKICBpc0JveGVkUHJpbWl0aXZlKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiBbTnVtYmVyLCBTdHJpbmcsIEJvb2xlYW4sIEJpZ0ludCwgU3ltYm9sXS5zb21lKGN0b3IgPT4gdiBpbnN0YW5jZW9mIGN0b3IpOwogIH0sCgogIGlzR2VuZXJhdG9yT2JqZWN0KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiBwcm90b09mKHYpID09IEdlbmVyYXRvclByb3RvdHlwZTsKICB9LAogIGlzVHlwZWRBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7CiAgfSwKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdltTeW1ib2wudG9TdHJpbmdUYWddID09ICdNb2R1bGUnOwogIH0sCiAgaXNDb25zdHJ1Y3Rvcih2KSB7CiAgICByZXR1cm4gaXNGdW5jdGlvbih2KSAmJiAncHJvdG90eXBlJyBpbiB2OwogIH0sCiAgaXNJdGVyYWJsZSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdHlwZW9mIHZbU3ltYm9sLml0ZXJhdG9yXSA9PSAnZnVuY3Rpb24nOwogIH0sCiAgaXNBc3luY0l0ZXJhYmxlKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB0eXBlb2YgdltTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPT0gJ2Z1bmN0aW9uJzsKICB9LAogIGlzSXRlcmF0b3IodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHR5cGVvZiB2Lm5leHQgPT0gJ2Z1bmN0aW9uJzsKICB9LAogIGlzQXJyYXlMaWtlKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB0eXBlb2Ygdi5sZW5ndGggPT0gJ251bWJlcicgJiYgTnVtYmVyLmlzSW50ZWdlcih2Lmxlbmd0aCk7CiAgfQp9OwoKZXhwb3J0IGZ1bmN0aW9uIGhhc0J1aWx0SW4obywgbSkgewogIHJldHVybiBpc05hdGl2ZShwcm90b09mKG8pW21dKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdCguLi5hcmdzKSB7CiAgcmV0dXJuIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwoeyBoaWRlS2V5czogWydjb25zdHJ1Y3RvciddIH0sIGFyZ3MpOwp9CgpleHBvcnQgZnVuY3Rpb24gZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykgewogIGlmKCFpc09iamVjdChvcHRzKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihgb3B0aW9ucyBhcmd1bWVudCBpcyBub3QgYW4gb2JqZWN0YCk7CiAgcmV0dXJuIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwob3B0cywgYXJncyk7Cn0KCmZ1bmN0aW9uIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikgewogIGNvbnN0IHggPSB2WzBdOwogIGxldCBhID0gMDsKICBsZXQgcyA9ICcnOwogIGxldCBqID0gJyc7CiAgaWYodHlwZW9mIHggPT09ICdzdHJpbmcnKSB7CiAgICBpZih2Lmxlbmd0aCA9PT0gMSkgcmV0dXJuIHg7CiAgICBsZXQgdDsKICAgIGxldCBwID0gMDsKICAgIGZvcihsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aCAtIDE7IGkrKykgewogICAgICBpZih4W2ldID09ICclJykgewogICAgICAgIGxldCBmID0gJyc7CiAgICAgICAgd2hpbGUoJ3NqeGRPb2lmYyUnLmluZGV4T2YoeFtpICsgMV0pID09IC0xKSB7CiAgICAgICAgICBmICs9IHhbaSArIDFdOwogICAgICAgICAgKytpOwogICAgICAgIH0KICAgICAgICBpZihwIDwgaSkgcyArPSBzbGljZSh4LCBwLCBpKTsKICAgICAgICBwID0gaSArIDE7CgogICAgICAgIGNvbnN0IGMgPSBTdHJpbmcucHJvdG90eXBlLmNoYXJDb2RlQXQuY2FsbCh4LCArK2kpOwogICAgICAgIGlmKGEgKyAxICE9PSB2Lmxlbmd0aCkgewogICAgICAgICAgc3dpdGNoIChjKSB7CiAgICAgICAgICAgIGNhc2UgMTE1OiAvLyAlcwogICAgICAgICAgICAgIGNvbnN0IHkgPSB2WysrYV07CiAgICAgICAgICAgICAgaWYodHlwZW9mIHkgPT09ICdudW1iZXInKSB0ID0gZm9ybWF0TnVtYmVyKHkpOwogICAgICAgICAgICAgIGVsc2UgaWYodHlwZW9mIHkgPT09ICdiaWdpbnQnKSB0ID0gYCR7eX1uYDsKICAgICAgICAgICAgICBlbHNlIGlmKHR5cGVvZiB5ICE9PSAnb2JqZWN0JyB8fCB5ID09PSBudWxsIHx8ICFoYXNCdWlsdEluKHksICd0b1N0cmluZycpKSB0ID0gU3RyaW5nKHkpOwogICAgICAgICAgICAgIGVsc2UgdCA9IGluc3BlY3QoeSwgeyAuLi5vLCBjb21wYWN0OiAzLCBjb2xvcnM6IGZhbHNlLCBkZXB0aDogMCB9KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxMDY6IC8vICVqCiAgICAgICAgICAgICAgdCA9IHN0cmluZ2lmeSh2WysrYV0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDEyMDogLy8gJXgKICAgICAgICAgICAgY2FzZSAxMDA6IC8vICVkCiAgICAgICAgICAgICAgY29uc3QgbiA9IHZbKythXTsKICAgICAgICAgICAgICBpZih0eXBlb2YgbiA9PT0gJ2JpZ2ludCcpIHQgPSBgJHtufW5gOwogICAgICAgICAgICAgIGVsc2UgaWYodHlwZW9mIG4gPT09ICdzeW1ib2wnKSB0ID0gJ05hTic7CiAgICAgICAgICAgICAgZWxzZSB0ID0gZm9ybWF0TnVtYmVyKGMgPT0gMTIwID8gTnVtYmVyKG4pLnRvU3RyaW5nKDE2KSA6IE51bWJlcihuKSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgNzk6IC8vICVPCiAgICAgICAgICAgICAgdCA9IGluc3BlY3QodlsrK2FdLCBvKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxMTE6IC8vICVvCiAgICAgICAgICAgICAgdCA9IC8qdlsrK2FdKycnID8/ICovIGluc3BlY3QodlsrK2FdLCB7CiAgICAgICAgICAgICAgICAuLi5vLAogICAgICAgICAgICAgICAgc2hvd0hpZGRlbjogdHJ1ZSwKICAgICAgICAgICAgICAgIHNob3dQcm94eTogdHJ1ZSwKICAgICAgICAgICAgICAgIGRlcHRoOiAxLAogICAgICAgICAgICAgICAgcHJvdG9DaGFpbjogZmFsc2UKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxMDU6IC8vICVpCiAgICAgICAgICAgICAgY29uc3QgayA9IHZbKythXTsKICAgICAgICAgICAgICBpZih0eXBlb2YgayA9PT0gJ2JpZ2ludCcpIHQgPSBgJHtrfWA7CiAgICAgICAgICAgICAgZWxzZSBpZih0eXBlb2YgayA9PT0gJ3N5bWJvbCcpIHQgPSAnTmFOJzsKICAgICAgICAgICAgICBlbHNlIHQgPSBmb3JtYXROdW1iZXIocGFyc2VJbnQoaykpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDEwMjogLy8gJWYKICAgICAgICAgICAgICBjb25zdCBkID0gdlsrK2FdOwogICAgICAgICAgICAgIGlmKHR5cGVvZiBkID09PSAnc3ltYm9sJykgdCA9ICdOYU4nOwogICAgICAgICAgICAgIGVsc2UgdCA9IGZvcm1hdE51bWJlcihwYXJzZUZsb2F0KGQpKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA5OTogLy8gJWMKICAgICAgICAgICAgICBhICs9IDE7CiAgICAgICAgICAgICAgdCA9ICcnOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDM3OiAvLyAlJQogICAgICAgICAgICAgIHMgKz0gc2xpY2UoeCwgcCwgaSk7CiAgICAgICAgICAgICAgcCA9IGkgKyAxOwogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgaWYocCAhPT0gaSAtIDEpIHMgKz0gc2xpY2UoeCwgcCwgaSAtIDEpOwogICAgICAgICAgbGV0IHBhZCA9IHBhcnNlSW50KGYpOwogICAgICAgICAgaWYoTWF0aC5hYnMocGFkKSA+IDApIHQgPSB0WydwYWQnICsgKHBhZCA8IDAgPyAnRW5kJyA6ICdTdGFydCcpXShNYXRoLmFicyhwYWQpLCAvXi0/MC8udGVzdChmKSA/ICcwJyA6ICcgJyk7CiAgICAgICAgICBzICs9IHQ7CiAgICAgICAgICBwID0gaSArIDE7CiAgICAgICAgfSBlbHNlIGlmKGMgPT09IDM3KSB7CiAgICAgICAgICBzICs9IHNsaWNlKHgsIHAsIGkpOwogICAgICAgICAgcCA9IGkgKyAxOwogICAgICAgIH0KICAgICAgfQogICAgfQogICAgaWYocCAhPT0gMCkgewogICAgICBhKys7CiAgICAgIGogPSAnICc7CiAgICAgIGlmKHAgPCB4Lmxlbmd0aCkgcyArPSBzbGljZSh4LCBwKTsKICAgIH0KICB9CiAgd2hpbGUoYSA8IHYubGVuZ3RoKSB7CiAgICBjb25zdCB5ID0gdlthXTsKICAgIHMgKz0gajsKICAgIHMgKz0gdHlwZW9mIHkgIT09ICdzdHJpbmcnID8gaW5zcGVjdCh5LCBvKSA6IHk7CiAgICBqID0gJyAnOwogICAgYSsrOwogIH0KICByZXR1cm4gczsKfQoKZXhwb3J0IGZ1bmN0aW9uIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7CiAgaWYoYXJndW1lbnRzLmxlbmd0aCA9PSAxKSBleHBlY3RlZCA9IHRydWU7CgogIGlmKGFjdHVhbCA9PT0gZXhwZWN0ZWQpIHJldHVybjsKCiAgaWYoCiAgICBhY3R1YWwgIT09IG51bGwgJiYKICAgIGV4cGVjdGVkICE9PSBudWxsICYmCiAgICB0eXBlb2YgYWN0dWFsID09ICdvYmplY3QnICYmCiAgICB0eXBlb2YgZXhwZWN0ZWQgPT0gJ29iamVjdCcgJiYKICAgIGFjdHVhbC50b1N0cmluZygpID09PSBleHBlY3RlZC50b1N0cmluZygpCiAgKQogICAgcmV0dXJuOwoKICB0aHJvdyBFcnJvcigKICAgICdhc3NlcnRpb24gZmFpbGVkOiBnb3QgfCcgKyBhY3R1YWwgKyAnfCcgKyAnLCBleHBlY3RlZCB8JyArIGV4cGVjdGVkICsgJ3wnICsgKG1lc3NhZ2UgPyAnICgnICsgbWVzc2FnZSArICcpJyA6ICcnKQogICk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBzZXRJbnRlcnZhbChjYWxsYmFjaywgbXMpIHsKICBsZXQgbWFwID0gKHNldEludGVydmFsLm1hcCA/Pz0gbmV3IE1hcCgpKTsKICBsZXQgaWQgPSAoc2V0SW50ZXJ2YWwuaWQgPSAoc2V0SW50ZXJ2YWwuaWQgPz8gMCkgKyAxKTsKICBsZXQgb2JqID0geyBjYWxsYmFjaywgbXMgfTsKICBtYXAuc2V0KGlkLCBvYmopOwoKICBmdW5jdGlvbiBzdGFydCgpIHsKICAgIG9iai5pZCA9IG9zLnNldFRpbWVvdXQoKCkgPT4gewogICAgICBzdGFydCgpOwogICAgICBjYWxsYmFjaygpOwogICAgfSwgb2JqLm1zKTsKICB9CgogIHN0YXJ0KCk7CiAgcmV0dXJuIGlkOwp9CgpleHBvcnQgZnVuY3Rpb24gY2xlYXJJbnRlcnZhbChpZCkgewogIGxldCBtYXAgPSAoc2V0SW50ZXJ2YWwubWFwID8/PSBuZXcgTWFwKCkpOwoKICBsZXQgb2JqID0gbWFwLmdldChpZCk7CgogIGlmKG9iaikgb3MuY2xlYXJUaW1lb3V0KG9iai5pZCk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpIHsKICBpZihzdXBlckN0b3IpIHsKICAgIGN0b3Iuc3VwZXJfID0gc3VwZXJDdG9yOwogICAgZGVsZXRlIGN0b3IucHJvdG90eXBlOwogICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHsKICAgICAgY29uc3RydWN0b3I6IHsKICAgICAgICB2YWx1ZTogY3RvciwKICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgICB3cml0YWJsZTogdHJ1ZSwKICAgICAgICBjb25maWd1cmFibGU6IHRydWUKICAgICAgfQogICAgfSk7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gbWVtb2l6ZShmbiwgY2FjaGUgPSB7fSkgewogIGxldCBbZ2V0LCBzZXRdID0gZ2V0c2V0KGNhY2hlKTsKICByZXR1cm4gZGVmaW5lKAogICAgZnVuY3Rpb24gTWVtb2l6ZShuLCAuLi5yZXN0KSB7CiAgICAgIGxldCByOwogICAgICBpZigociA9IGdldChuKSkpIHJldHVybiByOwogICAgICByID0gZm4uY2FsbCh0aGlzLCBuLCAuLi5yZXN0KTsKICAgICAgc2V0KG4sIHIpOwogICAgICByZXR1cm4gcjsKICAgIH0sCiAgICB7IGNhY2hlLCBnZXQsIHNldCB9CiAgKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGdldHNldCh0YXJnZXQsIC4uLmFyZ3MpIHsKICBsZXQgcmV0ID0gW107CiAgaWYoaXNGdW5jdGlvbih0YXJnZXQpKSB7CiAgICByZXQgPSBbdGFyZ2V0LCB0eXBlb2YgYXJnc1swXSA9PSAnZnVuY3Rpb24nID8gYXJnc1swXSA6IHRhcmdldF07CiAgfSBlbHNlIGlmKGhhc0dldFNldCh0YXJnZXQpKSB7CiAgICBpZih0YXJnZXQuZ2V0ID09PSB0YXJnZXQuc2V0KSB7CiAgICAgIGNvbnN0IEdldFNldCA9ICguLi5hcmdzKSA9PiB0YXJnZXQuc2V0KC4uLmFyZ3MpOwogICAgICByZXQgPSBbR2V0U2V0LCBHZXRTZXRdOwogICAgfSBlbHNlIHJldCA9IFtrZXkgPT4gdGFyZ2V0LmdldChrZXkpLCAoa2V5LCB2YWx1ZSkgPT4gdGFyZ2V0LnNldChrZXksIHZhbHVlKV07CiAgfSBlbHNlIGlmKGlzT2JqZWN0KHRhcmdldCkpIHsKICAgIHJldCA9IFtrZXkgPT4gdGFyZ2V0W2tleV0sIChrZXksIHZhbHVlKSA9PiAodGFyZ2V0W2tleV0gPSB2YWx1ZSldOwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBnZXRzZXQgdW5rbm93biBhcmd1bWVudCB0eXBlICcke3R5cGVvZiB0YXJnZXR9J2ApOwogIH0KICBpZihhcmdzLmxlbmd0aCkgewogICAgbGV0IFtnZXQsIHNldF0gPSByZXQ7CiAgICByZXQgPSBbKCkgPT4gZ2V0KC4uLmFyZ3MpLCB2YWx1ZSA9PiBzZXQoLi4uYXJncywgdmFsdWUpXTsKICB9CiAgcmV0dXJuIHJldDsKfQoKZXhwb3J0IGZ1bmN0aW9uIG1vZGlmaWVyKC4uLmFyZ3MpIHsKICBsZXQgZ3MgPSBnZXR0ZXJzZXR0ZXIoLi4uYXJncyk7CiAgcmV0dXJuIGZuID0+IHsKICAgIGxldCB2YWx1ZSA9IGdzKCk7CiAgICByZXR1cm4gZm4odmFsdWUsIG5ld1ZhbHVlID0+IGdzKG5ld1ZhbHVlKSk7CiAgfTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGdldHRlcih0YXJnZXQsIC4uLmFyZ3MpIHsKICBpZihpc09iamVjdCh0YXJnZXQpICYmIGlzRnVuY3Rpb24odGFyZ2V0LmdldCkpIHJldHVybiAoKSA9PiB0YXJnZXQuZ2V0KC4uLmFyZ3MpOwogIGxldCByZXQ7CiAgaWYoaXNGdW5jdGlvbih0YXJnZXQpKSB7CiAgICByZXQgPSB0YXJnZXQ7CiAgfSBlbHNlIGlmKGhhc0dldFNldCh0YXJnZXQpKSB7CiAgICByZXQgPSBrZXkgPT4gdGFyZ2V0LmdldChrZXkpOwogIH0gZWxzZSBpZihpc09iamVjdCh0YXJnZXQpKSB7CiAgICByZXQgPSBrZXkgPT4gdGFyZ2V0W2tleV07CiAgfSBlbHNlIHsKICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYGdldHRlciB1bmtub3duIGFyZ3VtZW50IHR5cGUgJyR7dHlwZW9mIHRhcmdldH0nYCk7CiAgfQogIGlmKGFyZ3MubGVuZ3RoKSB7CiAgICBsZXQgZ2V0ID0gcmV0OwogICAgcmV0ID0gKCkgPT4gZ2V0KC4uLmFyZ3MpOwogIH0KICByZXR1cm4gcmV0Owp9CgpleHBvcnQgZnVuY3Rpb24gc2V0dGVyKHRhcmdldCwgLi4uYXJncykgewogIGlmKGlzT2JqZWN0KHRhcmdldCkgJiYgaXNGdW5jdGlvbih0YXJnZXQuc2V0KSkgcmV0dXJuIHZhbHVlID0+IHRhcmdldC5zZXQoLi4uYXJncywgdmFsdWUpOwogIGxldCByZXQ7CiAgaWYoaXNGdW5jdGlvbih0YXJnZXQpKSB7CiAgICByZXQgPSB0YXJnZXQ7CiAgfSBlbHNlIGlmKGhhc0dldFNldCh0YXJnZXQpKSB7CiAgICByZXQgPSAoa2V5LCB2YWx1ZSkgPT4gdGFyZ2V0LnNldChrZXksIHZhbHVlKTsKICB9IGVsc2UgaWYoaXNPYmplY3QodGFyZ2V0KSkgewogICAgcmV0ID0gKGtleSwgdmFsdWUpID0+ICh0YXJnZXRba2V5XSA9IHZhbHVlKTsKICB9IGVsc2UgewogICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgc2V0dGVyIHVua25vd24gYXJndW1lbnQgdHlwZSAnJHt0eXBlb2YgdGFyZ2V0fSdgKTsKICB9CiAgaWYoYXJncy5sZW5ndGgpIHsKICAgIGxldCBzZXQgPSByZXQ7CiAgICByZXQgPSB2YWx1ZSA9PiBzZXQoLi4uYXJncywgdmFsdWUpOwogIH0KICByZXR1cm4gcmV0Owp9CgpleHBvcnQgZnVuY3Rpb24gZ2V0dGVyc2V0dGVyKHRhcmdldCwgLi4uYXJncykgewogIGxldCBmbjsKICBpZihpc09iamVjdCh0YXJnZXQpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlY2VpdmVyKSkgcmV0dXJuICguLi5hcmdzMikgPT4gdGFyZ2V0LnJlY2VpdmVyKC4uLmFyZ3MsIC4uLmFyZ3MyKTsKICBpZihpc0Z1bmN0aW9uKHRhcmdldCkpIHsKICAgIGlmKGlzRnVuY3Rpb24oYXJnc1swXSkgJiYgYXJnc1swXSAhPT0gdGFyZ2V0KSB7CiAgICAgIGxldCBzZXR0ZXIgPSBhcmdzLnNoaWZ0KCk7CiAgICAgIGZuID0gKC4uLmFyZ3MpID0+IChhcmdzLmxlbmd0aCA9PSAwID8gdGFyZ2V0KCkgOiBzZXR0ZXIoLi4uYXJncykpOwogICAgfSBlbHNlIGZuID0gdGFyZ2V0OwogIH0gZWxzZSBpZihoYXNHZXRTZXQodGFyZ2V0KSkgewogICAgaWYodGFyZ2V0LmdldCA9PT0gdGFyZ2V0LnNldCkgZm4gPSAoLi4uYXJncykgPT4gdGFyZ2V0LnNldCguLi5hcmdzKTsKICAgIGVsc2UgZm4gPSAoLi4uYXJncykgPT4gKGFyZ3MubGVuZ3RoIDwgMiA/IHRhcmdldC5nZXQoLi4uYXJncykgOiB0YXJnZXQuc2V0KC4uLmFyZ3MpKTsKICB9IGVsc2UgaWYoaXNPYmplY3QodGFyZ2V0KSkgewogICAgZm4gPSAoLi4uYXJncykgPT4gewogICAgICBjb25zdCBba2V5LCB2YWx1ZV0gPSBhcmdzOwogICAgICBpZihhcmdzLmxlbmd0aCA9PSAxKSByZXR1cm4gdGFyZ2V0W2tleV07CiAgICAgIHRhcmdldFtrZXldID0gdmFsdWU7CiAgICB9OwogIH0gZWxzZSB7CiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBnZXR0ZXJzZXR0ZXIgdW5rbm93biBhcmd1bWVudCB0eXBlICcke3R5cGVvZiB0YXJnZXR9J2ApOwogIH0KICBpZihmbiAhPT0gdGFyZ2V0KSBkZWZpbmUoZm4sIHsgcmVjZWl2ZXI6IHRhcmdldCB9KTsKICBpZihhcmdzLmxlbmd0aCkgcmV0dXJuICguLi5hcmdzMikgPT4gZm4oLi4uYXJncywgLi4uYXJnczIpOwogIHJldHVybiBmbjsKfQoKZXhwb3J0IGZ1bmN0aW9uIGhhc0dldFNldChvYmopIHsKICByZXR1cm4gaXNPYmplY3Qob2JqKSAmJiBbJ2dldCcsICdzZXQnXS5ldmVyeShtID0+IHR5cGVvZiBvYmpbbV0gPT0gJ2Z1bmN0aW9uJyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBtYXBPYmplY3QodGFyZ2V0KSB7CiAgbGV0IG9iajsKICBpZihoYXNHZXRTZXQodGFyZ2V0LnJlY2VpdmVyKSkgcmV0dXJuIHRhcmdldC5yZWNlaXZlcjsKICBpZihoYXNHZXRTZXQodGFyZ2V0KSkgb2JqID0gdGFyZ2V0OwogIGVsc2UgaWYodHlwZW9mIHRhcmdldCA9PSAnZnVuY3Rpb24nKSBvYmogPSB7IGdldDogdGFyZ2V0LCBzZXQ6IHRhcmdldCB9OwogIGVsc2UgaWYoaXNPYmplY3QodGFyZ2V0KSkKICAgIG9iaiA9IHsKICAgICAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4gKHRhcmdldFtrZXldID0gdmFsdWUpLAogICAgICBnZXQ6IGtleSA9PiB0YXJnZXRba2V5XQogICAgfTsKICBpZihvYmogIT09IHRhcmdldCkgZGVmaW5lKG9iaiwgeyByZWNlaXZlcjogdGFyZ2V0IH0pOwogIHJldHVybiBvYmo7Cn0KCmV4cG9ydCBmdW5jdGlvbiBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pIHsKICBsZXQgcmV0LAogICAgcmFuID0gZmFsc2U7CgogIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7CiAgICBpZighcmFuKSB7CiAgICAgIHJhbiA9IHRydWU7CiAgICAgIHJldCA9IGZuLmFwcGx5KHRoaXNBcmcgfHwgdGhpcywgYXJncyk7CiAgICB9IGVsc2UgaWYodHlwZW9mIG1lbW9GbiA9PSAnZnVuY3Rpb24nKSB7CiAgICAgIHJldCA9IG1lbW9GbihyZXQpOwogICAgfQogICAgcmV0dXJuIHJldDsKICB9Owp9CgpleHBvcnQgZnVuY3Rpb24gd2FpdEZvcihtcykgewogIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IG9zLnNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGRlZmluZShvYmosIC4uLmFyZ3MpIHsKICBmb3IobGV0IHByb3BzIG9mIGFyZ3MpIHsKICAgIGxldCBkZXNjID0ge307CiAgICBsZXQgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcHMpLmNvbmNhdChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhwcm9wcykpOwogICAgZm9yKGxldCBwcm9wIG9mIHN5bXMpIHsKICAgICAgaWYocHJvcCA9PSAnX19wcm90b19fJykgewogICAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmosIHByb3BzW3Byb3BdKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBjb25zdCB7IHZhbHVlLCAuLi5yZXN0IH0gPSAoZGVzY1twcm9wXSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvcHMsIHByb3ApKTsKICAgICAgZGVzY1twcm9wXS5lbnVtZXJhYmxlID0gZmFsc2U7CiAgICAgIGlmKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSBkZXNjW3Byb3BdLndyaXRhYmxlID0gZmFsc2U7CiAgICB9CiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhvYmosIGRlc2MpOwogIH0KICByZXR1cm4gb2JqOwp9CgpleHBvcnQgZnVuY3Rpb24gd2Vha0Fzc2lnbihvYmosIC4uLmFyZ3MpIHsKICBsZXQgZGVzYyA9IHt9OwogIGZvcihsZXQgb3RoZXIgb2YgYXJncykgewogICAgbGV0IG90aGVyRGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG90aGVyKTsKICAgIGZvcihsZXQga2V5IGluIG90aGVyRGVzYykKICAgICAgaWYoIShrZXkgaW4gb2JqKSAmJiBkZXNjW2tleV0gPT09IHVuZGVmaW5lZCAmJiBvdGhlckRlc2Nba2V5XSAhPT0gdW5kZWZpbmVkKSBkZXNjW2tleV0gPSBvdGhlckRlc2Nba2V5XTsKICB9CiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgZGVzYyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBnZXRQcm90b3R5cGVDaGFpbihvYmosIGxpbWl0ID0gLTEsIHN0YXJ0ID0gMCkgewogIGxldCBpID0gLTEsCiAgICByZXQgPSBbXTsKICBkbyB7CiAgICBpZihpID49IHN0YXJ0ICYmIChsaW1pdCA9PSAtMSB8fCBpIDwgc3RhcnQgKyBsaW1pdCkpIHJldC5wdXNoKG9iaik7CiAgICBpZihvYmogPT09IE9iamVjdC5wcm90b3R5cGUgfHwgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3QpIGJyZWFrOwogICAgKytpOwogIH0gd2hpbGUoKG9iaiA9IG9iai5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpKTsKICByZXR1cm4gcmV0Owp9CgpleHBvcnQgZnVuY3Rpb24gZ2V0Q29uc3RydWN0b3JDaGFpbihvYmosIC4uLnJhbmdlKSB7CiAgbGV0IHJldCA9IFtdOwogIHB1c2hVbmlxdWUocmV0LCBvYmouY29uc3RydWN0b3IpOwogIGZvcihsZXQgcHJvdG8gb2YgZ2V0UHJvdG90eXBlQ2hhaW4ob2JqLCAuLi5yYW5nZSkpIHB1c2hVbmlxdWUocmV0LCBwcm90by5jb25zdHJ1Y3Rvcik7CiAgcmV0dXJuIHJldDsKfQoKZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3RvdHlwZShvYmosIHByb3RvKSB7CiAgcmV0dXJuIGdldFByb3RvdHlwZUNoYWluKG9iaikuaW5kZXhPZihwcm90bykgIT0gLTE7Cn0KCmV4cG9ydCBmdW5jdGlvbiBmaWx0ZXIoc2VxLCBwcmVkLCB0aGlzQXJnKSB7CiAgaWYoaXNPYmplY3QocHJlZCkgJiYgcHJlZCBpbnN0YW5jZW9mIFJlZ0V4cCkgewogICAgbGV0IHJlID0gcHJlZDsKICAgIHByZWQgPSAoZWwsIGkpID0+IHJlLnRlc3QoZWwpOwogIH0KICBsZXQgciA9IFtdLAogICAgaSA9IDA7CiAgZm9yKGxldCBlbCBvZiBzZXEpIHsKICAgIGlmKHByZWQuY2FsbCh0aGlzQXJnLCBlbCwgaSsrLCBzZXEpKSByLnB1c2goZWwpOwogIH0KICByZXR1cm4gcjsKfQoKZXhwb3J0IGNvbnN0IGN1cnJ5ID0KICAoZiwgYXJyID0gW10sIGxlbmd0aCA9IGYubGVuZ3RoKSA9PgogICguLi5hcmdzKSA9PgogICAgKGEgPT4gKGEubGVuZ3RoID09PSBsZW5ndGggPyBmKC4uLmEpIDogY3VycnkoZiwgYSkpKShbLi4uYXJyLCAuLi5hcmdzXSk7CgpleHBvcnQgZnVuY3Rpb24qIHNwbGl0KGJ1ZiwgLi4ucG9pbnRzKSB7CiAgcG9pbnRzLnNvcnQoKTsKICBjb25zdCBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PiB7CiAgICBsZXQgciA9IHBvcyA8IGIuYnl0ZUxlbmd0aCA/IFtzbGljZShiLCAwLCBwb3MpLCBzbGljZShiLCBwb3MpXSA6IFtudWxsLCBiXTsKICAgIHJldHVybiByOwogIH07CiAgbGV0IHByZXYsCiAgICBsZW4gPSAwOwogIGZvcihsZXQgb2Zmc2V0IG9mIHBvaW50cykgewogICAgbGV0IGF0ID0gb2Zmc2V0IC0gbGVuOwogICAgW3ByZXYsIGJ1Zl0gPSBzcGxpdEF0KGJ1ZiwgYXQsIGxlbik7CiAgICBpZihwcmV2KSB7CiAgICAgIHlpZWxkIHByZXY7CiAgICAgIGxlbiA9IG9mZnNldDsKICAgIH0KICB9CiAgaWYoYnVmKSB5aWVsZCBidWY7Cn0KCmV4cG9ydCBjb25zdCB1bmlxdWUgPSAoYXJyLCBjbXApID0+CiAgYXJyLmZpbHRlcigKICAgIHR5cGVvZiBjbXAgPT0gJ2Z1bmN0aW9uJwogICAgICA/IChlbCwgaSwgYXJyKSA9PiBhcnIuZmluZEluZGV4KGl0ZW0gPT4gY21wKGVsLCBpdGVtKSkgPT0gaQogICAgICA6IChlbCwgaSwgYXJyKSA9PiBhcnIuaW5kZXhPZihlbCkgPT0gaQogICk7CgpleHBvcnQgY29uc3QgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChmbiArICcnKQogICAgLnJlcGxhY2UoL1xuLiovZywgJycpCiAgICAucmVwbGFjZSgvKD0+fHt8XG4pLiovZywgJycpCiAgICAucmVwbGFjZSgvXmZ1bmN0aW9uXHMqLywgJycpCiAgICAucmVwbGFjZSgvXlwoKC4qKVwpXHMqJC9nLCAnJDEnKQogICAgLnNwbGl0KC8sXHMqL2cpOwoKY29uc3QgQU5TSV9CQUNLR1JPVU5EX09GRlNFVCA9IDEwOwoKY29uc3Qgd3JhcEFuc2kxNiA9CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogICAgYFx4MWJbJHtjb2RlICsgb2Zmc2V0fW1gOwoKY29uc3Qgd3JhcEFuc2kyNTYgPQogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAgIGBceDFiWyR7MzggKyBvZmZzZXR9OzU7JHtjb2RlfW1gOwoKY29uc3Qgd3JhcEFuc2kxNm0gPQogIChvZmZzZXQgPSAwKSA9PgogIChyZWQsIGdyZWVuLCBibHVlKSA9PgogICAgYFx4MWJbJHszOCArIG9mZnNldH07Mjske3JlZH07JHtncmVlbn07JHtibHVlfW1gOwoKZnVuY3Rpb24gZ2V0QW5zaVN0eWxlcygpIHsKICBjb25zdCBjb2RlcyA9IG5ldyBNYXAoKTsKICBjb25zdCBzdHlsZXMgPSB7CiAgICBtb2RpZmllcjogewogICAgICByZXNldDogWzAsIDBdLAogICAgICAvLyAyMSBpc24ndCB3aWRlbHkgc3VwcG9ydGVkIGFuZCAyMiBkb2VzIHRoZSBzYW1lIHRoaW5nCiAgICAgIGJvbGQ6IFsxLCAyMl0sCiAgICAgIGRpbTogWzIsIDIyXSwKICAgICAgaXRhbGljOiBbMywgMjNdLAogICAgICB1bmRlcmxpbmU6IFs0LCAyNF0sCiAgICAgIG92ZXJsaW5lOiBbNTMsIDU1XSwKICAgICAgaW52ZXJzZTogWzcsIDI3XSwKICAgICAgaGlkZGVuOiBbOCwgMjhdLAogICAgICBzdHJpa2V0aHJvdWdoOiBbOSwgMjldCiAgICB9LAogICAgY29sb3I6IHsKICAgICAgYmxhY2s6IFszMCwgMzldLAogICAgICByZWQ6IFszMSwgMzldLAogICAgICBncmVlbjogWzMyLCAzOV0sCiAgICAgIHllbGxvdzogWzMzLCAzOV0sCiAgICAgIGJsdWU6IFszNCwgMzldLAogICAgICBtYWdlbnRhOiBbMzUsIDM5XSwKICAgICAgY3lhbjogWzM2LCAzOV0sCiAgICAgIHdoaXRlOiBbMzcsIDM5XSwKCiAgICAgIC8vIEJyaWdodCBjb2xvcgogICAgICBibGFja0JyaWdodDogWzkwLCAzOV0sCiAgICAgIHJlZEJyaWdodDogWzkxLCAzOV0sCiAgICAgIGdyZWVuQnJpZ2h0OiBbOTIsIDM5XSwKICAgICAgeWVsbG93QnJpZ2h0OiBbOTMsIDM5XSwKICAgICAgYmx1ZUJyaWdodDogWzk0LCAzOV0sCiAgICAgIG1hZ2VudGFCcmlnaHQ6IFs5NSwgMzldLAogICAgICBjeWFuQnJpZ2h0OiBbOTYsIDM5XSwKICAgICAgd2hpdGVCcmlnaHQ6IFs5NywgMzldCiAgICB9LAogICAgYmdDb2xvcjogewogICAgICBiZ0JsYWNrOiBbNDAsIDQ5XSwKICAgICAgYmdSZWQ6IFs0MSwgNDldLAogICAgICBiZ0dyZWVuOiBbNDIsIDQ5XSwKICAgICAgYmdZZWxsb3c6IFs0MywgNDldLAogICAgICBiZ0JsdWU6IFs0NCwgNDldLAogICAgICBiZ01hZ2VudGE6IFs0NSwgNDldLAogICAgICBiZ0N5YW46IFs0NiwgNDldLAogICAgICBiZ1doaXRlOiBbNDcsIDQ5XSwKCiAgICAgIC8vIEJyaWdodCBjb2xvcgogICAgICBiZ0JsYWNrQnJpZ2h0OiBbMTAwLCA0OV0sCiAgICAgIGJnUmVkQnJpZ2h0OiBbMTAxLCA0OV0sCiAgICAgIGJnR3JlZW5CcmlnaHQ6IFsxMDIsIDQ5XSwKICAgICAgYmdZZWxsb3dCcmlnaHQ6IFsxMDMsIDQ5XSwKICAgICAgYmdCbHVlQnJpZ2h0OiBbMTA0LCA0OV0sCiAgICAgIGJnTWFnZW50YUJyaWdodDogWzEwNSwgNDldLAogICAgICBiZ0N5YW5CcmlnaHQ6IFsxMDYsIDQ5XSwKICAgICAgYmdXaGl0ZUJyaWdodDogWzEwNywgNDldCiAgICB9CiAgfTsKCiAgLy8gQWxpYXMgYnJpZ2h0IGJsYWNrIGFzIGdyYXkgKGFuZCBncmV5KQogIHN0eWxlcy5jb2xvci5ncmF5ID0gc3R5bGVzLmNvbG9yLmJsYWNrQnJpZ2h0OwogIHN0eWxlcy5iZ0NvbG9yLmJnR3JheSA9IHN0eWxlcy5iZ0NvbG9yLmJnQmxhY2tCcmlnaHQ7CiAgc3R5bGVzLmNvbG9yLmdyZXkgPSBzdHlsZXMuY29sb3IuYmxhY2tCcmlnaHQ7CiAgc3R5bGVzLmJnQ29sb3IuYmdHcmV5ID0gc3R5bGVzLmJnQ29sb3IuYmdCbGFja0JyaWdodDsKCiAgZm9yKGNvbnN0IFtncm91cE5hbWUsIGdyb3VwXSBvZiBPYmplY3QuZW50cmllcyhzdHlsZXMpKSB7CiAgICBmb3IoY29uc3QgW3N0eWxlTmFtZSwgc3R5bGVdIG9mIE9iamVjdC5lbnRyaWVzKGdyb3VwKSkgewogICAgICBzdHlsZXNbc3R5bGVOYW1lXSA9IHsKICAgICAgICBvcGVuOiBgXHUwMDFCWyR7c3R5bGVbMF19bWAsCiAgICAgICAgY2xvc2U6IGBcdTAwMUJbJHtzdHlsZVsxXX1tYAogICAgICB9OwoKICAgICAgZ3JvdXBbc3R5bGVOYW1lXSA9IHN0eWxlc1tzdHlsZU5hbWVdOwoKICAgICAgY29kZXMuc2V0KHN0eWxlWzBdLCBzdHlsZVsxXSk7CiAgICB9CgogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0eWxlcywgZ3JvdXBOYW1lLCB7CiAgICAgIHZhbHVlOiBncm91cCwKICAgICAgZW51bWVyYWJsZTogZmFsc2UKICAgIH0pOwogIH0KCiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN0eWxlcywgJ2NvZGVzJywgewogICAgdmFsdWU6IGNvZGVzLAogICAgZW51bWVyYWJsZTogZmFsc2UKICB9KTsKCiAgc3R5bGVzLmNvbG9yLmNsb3NlID0gJ1x1MDAxQlszOW0nOwogIHN0eWxlcy5iZ0NvbG9yLmNsb3NlID0gJ1x1MDAxQls0OW0nOwoKICBzdHlsZXMuY29sb3IuYW5zaSA9IHdyYXBBbnNpMTYoKTsKICBzdHlsZXMuY29sb3IuYW5zaTI1NiA9IHdyYXBBbnNpMjU2KCk7CiAgc3R5bGVzLmNvbG9yLmFuc2kxNm0gPSB3cmFwQW5zaTE2bSgpOwogIHN0eWxlcy5iZ0NvbG9yLmFuc2kgPSB3cmFwQW5zaTE2KEFOU0lfQkFDS0dST1VORF9PRkZTRVQpOwogIHN0eWxlcy5iZ0NvbG9yLmFuc2kyNTYgPSB3cmFwQW5zaTI1NihBTlNJX0JBQ0tHUk9VTkRfT0ZGU0VUKTsKICBzdHlsZXMuYmdDb2xvci5hbnNpMTZtID0gd3JhcEFuc2kxNm0oQU5TSV9CQUNLR1JPVU5EX09GRlNFVCk7CgogIC8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL1FpeC0vY29sb3ItY29udmVydC9ibG9iLzNmMGUwZDRlOTJlMjM1Nzk2Y2NiMTdmNmU4NWM3MjA5NGE2NTFmNDkvY29udmVyc2lvbnMuanMKICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzdHlsZXMsIHsKICAgIHJnYlRvQW5zaTI1NjogewogICAgICB2YWx1ZTogKHJlZCwgZ3JlZW4sIGJsdWUpID0+IHsKICAgICAgICAvLyBXZSB1c2UgdGhlIGV4dGVuZGVkIGdyZXlzY2FsZSBwYWxldHRlIGhlcmUsIHdpdGggdGhlIGV4Y2VwdGlvbiBvZgogICAgICAgIC8vIGJsYWNrIGFuZCB3aGl0ZS4gbm9ybWFsIHBhbGV0dGUgb25seSBoYXMgNCBncmV5c2NhbGUgc2hhZGVzLgogICAgICAgIGlmKHJlZCA9PT0gZ3JlZW4gJiYgZ3JlZW4gPT09IGJsdWUpIHsKICAgICAgICAgIGlmKHJlZCA8IDgpIHsKICAgICAgICAgICAgcmV0dXJuIDE2OwogICAgICAgICAgfQoKICAgICAgICAgIGlmKHJlZCA+IDI0OCkgewogICAgICAgICAgICByZXR1cm4gMjMxOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBNYXRoLnJvdW5kKCgocmVkIC0gOCkgLyAyNDcpICogMjQpICsgMjMyOwogICAgICAgIH0KICAgICAgICBjb25zdCBjID0gW3JlZCwgZ3JlZW4sIGJsdWVdLm1hcChjID0+IChjIC8gMjU1KSAqIDUpOwogICAgICAgIHJldHVybiAxNiArIDM2ICogY1swXSArIDYgKiBjWzFdICsgY1syXTsKICAgICAgfSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UKICAgIH0sCiAgICBoZXhUb1JnYjogewogICAgICB2YWx1ZTogaGV4ID0+IHsKICAgICAgICBjb25zdCBtYXRjaGVzID0gLyg/PGNvbG9yU3RyaW5nPlthLWZcZF17Nn18W2EtZlxkXXszfSkvaS5leGVjKGhleC50b1N0cmluZygxNikpOwogICAgICAgIGlmKCFtYXRjaGVzKSB7CiAgICAgICAgICByZXR1cm4gWzAsIDAsIDBdOwogICAgICAgIH0KCiAgICAgICAgbGV0IHsgY29sb3JTdHJpbmcgfSA9IG1hdGNoZXMuZ3JvdXBzOwoKICAgICAgICBpZihjb2xvclN0cmluZy5sZW5ndGggPT09IDMpIHsKICAgICAgICAgIGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcKICAgICAgICAgICAgLnNwbGl0KCcnKQogICAgICAgICAgICAubWFwKGNoYXJhY3RlciA9PiBjaGFyYWN0ZXIgKyBjaGFyYWN0ZXIpCiAgICAgICAgICAgIC5qb2luKCcnKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGludGVnZXIgPSBOdW1iZXIucGFyc2VJbnQoY29sb3JTdHJpbmcsIDE2KTsKCiAgICAgICAgcmV0dXJuIFsoaW50ZWdlciA+PiAxNikgJiAweGZmLCAoaW50ZWdlciA+PiA4KSAmIDB4ZmYsIGludGVnZXIgJiAweGZmXTsKICAgICAgfSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UKICAgIH0sCiAgICBoZXhUb0Fuc2kyNTY6IHsKICAgICAgdmFsdWU6IGhleCA9PiBzdHlsZXMucmdiVG9BbnNpMjU2KC4uLnN0eWxlcy5oZXhUb1JnYihoZXgpKSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UKICAgIH0sCiAgICBhbnNpMjU2VG9BbnNpOiB7CiAgICAgIHZhbHVlOiBjb2RlID0+IHsKICAgICAgICBpZihjb2RlIDwgOCkgewogICAgICAgICAgcmV0dXJuIDMwICsgY29kZTsKICAgICAgICB9CgogICAgICAgIGlmKGNvZGUgPCAxNikgewogICAgICAgICAgcmV0dXJuIDkwICsgKGNvZGUgLSA4KTsKICAgICAgICB9CgogICAgICAgIGxldCByZWQ7CiAgICAgICAgbGV0IGdyZWVuOwogICAgICAgIGxldCBibHVlOwoKICAgICAgICBpZihjb2RlID49IDIzMikgewogICAgICAgICAgcmVkID0gKChjb2RlIC0gMjMyKSAqIDEwICsgOCkgLyAyNTU7CiAgICAgICAgICBncmVlbiA9IHJlZDsKICAgICAgICAgIGJsdWUgPSByZWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvZGUgLT0gMTY7CgogICAgICAgICAgY29uc3QgcmVtYWluZGVyID0gY29kZSAlIDM2OwoKICAgICAgICAgIHJlZCA9IE1hdGguZmxvb3IoY29kZSAvIDM2KSAqIDAuMjsKICAgICAgICAgIGdyZWVuID0gTWF0aC5mbG9vcihyZW1haW5kZXIgLyA2KSAqIDAuMjsKICAgICAgICAgIGJsdWUgPSAocmVtYWluZGVyICUgNikgKiAwLjI7CiAgICAgICAgfQoKICAgICAgICBjb25zdCB2YWx1ZSA9IE1hdGgubWF4KHJlZCwgZ3JlZW4sIGJsdWUpICogMjsKCiAgICAgICAgaWYodmFsdWUgPT09IDApIHsKICAgICAgICAgIHJldHVybiAzMDsKICAgICAgICB9CgogICAgICAgIGxldCByZXN1bHQgPSAzMCArICgoTWF0aC5yb3VuZChibHVlKSA8PCAyKSB8IChNYXRoLnJvdW5kKGdyZWVuKSA8PCAxKSB8IE1hdGgucm91bmQocmVkKSk7CgogICAgICAgIGlmKHZhbHVlID09PSAyKSB7CiAgICAgICAgICByZXN1bHQgKz0gNjA7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9LAogICAgICBlbnVtZXJhYmxlOiBmYWxzZQogICAgfSwKICAgIHJnYlRvQW5zaTogewogICAgICB2YWx1ZTogKHJlZCwgZ3JlZW4sIGJsdWUpID0+IHN0eWxlcy5hbnNpMjU2VG9BbnNpKHN0eWxlcy5yZ2JUb0Fuc2kyNTYocmVkLCBncmVlbiwgYmx1ZSkpLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZQogICAgfSwKICAgIGhleFRvQW5zaTogewogICAgICB2YWx1ZTogaGV4ID0+IHN0eWxlcy5hbnNpMjU2VG9BbnNpKHN0eWxlcy5oZXhUb0Fuc2kyNTYoaGV4KSksCiAgICAgIGVudW1lcmFibGU6IGZhbHNlCiAgICB9CiAgfSk7CgogIHJldHVybiBzdHlsZXM7Cn0KCmV4cG9ydCBmdW5jdGlvbiByYW5kSW50KC4uLmFyZ3MpIHsKICBsZXQgcmFuZ2UgPSBhcmdzLnNwbGljZSgwLCAyKTsKICBsZXQgcm5nID0gYXJncy5zaGlmdCgpID8/IE1hdGgucmFuZG9tOwogIGlmKHJhbmdlLmxlbmd0aCA8IDIpIHJhbmdlLnVuc2hpZnQoMCk7CiAgcmV0dXJuIE1hdGgucm91bmQocmFuZChyYW5nZVsxXSAtIHJhbmdlWzBdICsgMSkgKyByYW5nZVswXSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiByYW5kRmxvYXQobWluLCBtYXgsIHJuZyA9IE1hdGgucmFuZG9tKSB7CiAgcmV0dXJuIHJuZygpICogKG1heCAtIG1pbikgKyBtaW47Cn0KCmV4cG9ydCBmdW5jdGlvbiByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkgewogIGxldCBvID0gJyc7CgogIHdoaWxlKC0tbiA+PSAwKSBvICs9IHNldFtNYXRoLnJvdW5kKHJuZygpICogKHNldC5sZW5ndGggLSAxKSldOwogIHJldHVybiBvOwp9CgpleHBvcnQgZnVuY3Rpb24gdG9CaWdJbnQoYXJnKSB7CiAgaWYodHlwZXMuaXNBcnJheUJ1ZmZlcihhcmcpKSB7CiAgICBjb25zdCBiaXRzID0gYml0cyhhcmcpLmpvaW4oJycpOwogICAgcmV0dXJuIGV2YWwoYDBiJHtiaXRzfW5gKTsKICB9CiAgcmV0dXJuIEJpZ0ludChhcmcpOwp9CgpleHBvcnQgZnVuY3Rpb24gbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pIHsKICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwgewogICAgZ2V0OiB0eXBlcy5pc0FzeW5jRnVuY3Rpb24oZ2V0dGVyKQogICAgICA/IGFzeW5jIGZ1bmN0aW9uKCkgewogICAgICAgICAgcmV0dXJuIHJlcGxhY2VQcm9wZXJ0eShhd2FpdCBnZXR0ZXIuY2FsbChvYmosIG5hbWUpKTsKICAgICAgICB9CiAgICAgIDogZnVuY3Rpb24oKSB7CiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGdldHRlci5jYWxsKG9iaiwgbmFtZSk7CiAgICAgICAgICBpZih0eXBlcy5pc1Byb21pc2UodmFsdWUpKSB7CiAgICAgICAgICAgIHZhbHVlLnRoZW4odiA9PiB7CiAgICAgICAgICAgICAgcmVwbGFjZVByb3BlcnR5KHYpOwogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGB1dGlsLmxhenlQcm9wZXJ0eSByZXNvbHZlZCBgLCBvYmpbbmFtZV0pOwogICAgICAgICAgICAgIHJldHVybiB2OwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIHZhbHVlOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHJlcGxhY2VQcm9wZXJ0eSh2YWx1ZSk7CiAgICAgICAgfSwKICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSwKICAgIC4uLm9wdHMKICB9KTsKCiAgZnVuY3Rpb24gcmVwbGFjZVByb3BlcnR5KHZhbHVlKSB7CiAgICBkZWxldGUgb2JqW25hbWVdOwogICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwgeyB2YWx1ZSwgLi4ub3B0cyB9KTsKICAgIHJldHVybiB2YWx1ZTsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBsYXp5UHJvcGVydGllcyhvYmosIGdldHRlcnNPYmosIG9wdHMgPSB7fSkgewogIG9wdHMgPSB7IGVudW1lcmFibGU6IGZhbHNlLCAuLi5vcHRzIH07CiAgZm9yKGxldCBwcm9wIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGdldHRlcnNPYmopKSBsYXp5UHJvcGVydHkob2JqLCBwcm9wLCBnZXR0ZXJzT2JqW3Byb3BdLCBvcHRzKTsKICByZXR1cm4gb2JqOwp9CgpleHBvcnQgZnVuY3Rpb24gZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykgewogIGxldCBzaG9ydCwgbG9uZzsKICBsZXQgcmVzdWx0ID0ge307CiAgbGV0IHBvc2l0aW9uYWwgPSAocmVzdWx0WydAJ10gPSBbXSk7CiAgaWYoIShvcHRpb25zIGluc3RhbmNlb2YgQXJyYXkpKSBvcHRpb25zID0gT2JqZWN0LmVudHJpZXMob3B0aW9ucyk7CiAgY29uc3QgZmluZE9wdCA9IGFyZyA9PgogICAgb3B0aW9ucy5maW5kKChbb3B0bmFtZSwgb3B0aW9uXSkgPT4gKEFycmF5LmlzQXJyYXkob3B0aW9uKSA/IG9wdGlvbi5pbmRleE9mKGFyZykgIT0gLTEgOiBmYWxzZSkgfHwgYXJnID09IG9wdG5hbWUpOwogIGxldCBbLCBwYXJhbXNdID0gb3B0aW9ucy5maW5kKG9wdCA9PiBvcHRbMF0gPT0gJ0AnKSB8fCBbXTsKICBpZih0eXBlb2YgcGFyYW1zID09ICdzdHJpbmcnKSBwYXJhbXMgPSBwYXJhbXMuc3BsaXQoJywnKTsKICBhcmdzID0gYXJncy5yZWR1Y2UoKGFjYywgYXJnKSA9PiB7CiAgICBpZigvXi1bXi1dLy50ZXN0KGFyZykpIGZvcihsZXQgY2ggb2YgYXJnLnNsaWNlKDEpKSBhY2MucHVzaCgnLScgKyBjaCk7CiAgICBlbHNlIGFjYy5wdXNoKGFyZyk7CiAgICByZXR1cm4gYWNjOwogIH0sIFtdKTsKICBmb3IobGV0IGkgPSAwOyBpIDwgYXJncy5sZW5ndGg7IGkrKykgewogICAgY29uc3QgYXJnID0gYXJnc1tpXTsKICAgIGxldCBvcHQ7CgogICAgaWYoYXJnWzBdID09ICctJykgewogICAgICBsZXQgbmFtZSwgdmFsdWUsIHN0YXJ0LCBlbmQ7CiAgICAgIGlmKGFyZ1sxXSA9PSAnLScpIGxvbmcgPSB0cnVlOwogICAgICBlbHNlIHNob3J0ID0gdHJ1ZTsKICAgICAgc3RhcnQgPSBzaG9ydCA/IDEgOiAyOwogICAgICBpZihzaG9ydCkgZW5kID0gMjsKICAgICAgZWxzZSBpZigoZW5kID0gYXJnLmluZGV4T2YoJz0nKSkgPT0gLTEpIGVuZCA9IGFyZy5sZW5ndGg7CiAgICAgIG5hbWUgPSBhcmcuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpOwogICAgICBpZigob3B0ID0gZmluZE9wdChuYW1lKSkpIHsKICAgICAgICBjb25zdCBbaGFzX2FyZywgaGFuZGxlcl0gPSBvcHRbMV07CiAgICAgICAgaWYoaGFzX2FyZykgewogICAgICAgICAgaWYoYXJnLmxlbmd0aCA+IGVuZCkgdmFsdWUgPSBhcmcuc3Vic3RyaW5nKGVuZCArIChhcmdbZW5kXSA9PSAnPScpKTsKICAgICAgICAgIGVsc2UgdmFsdWUgPSBhcmdzWysraV07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHZhbHVlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHZhbHVlID0gaGFuZGxlcih2YWx1ZSwgcmVzdWx0W29wdFswXV0sIG9wdGlvbnMsIHJlc3VsdCk7CiAgICAgICAgfSBjYXRjaChlKSB7fQogICAgICAgIHJlc3VsdFtvcHRbMF1dID0gdmFsdWU7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgIH0KICAgIGlmKHBhcmFtcy5sZW5ndGgpIHsKICAgICAgY29uc3QgcGFyYW0gPSBwYXJhbXMuc2hpZnQoKTsKICAgICAgaWYoKG9wdCA9IGZpbmRPcHQocGFyYW0pKSkgewogICAgICAgIGNvbnN0IFssIFssIGhhbmRsZXJdXSA9IG9wdDsKICAgICAgICBsZXQgdmFsdWUgPSBhcmc7CiAgICAgICAgaWYodHlwZW9mIGhhbmRsZXIgPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgdmFsdWUgPSBoYW5kbGVyKHZhbHVlLCByZXN1bHRbb3B0WzBdXSwgb3B0aW9ucywgcmVzdWx0KTsKICAgICAgICAgIH0gY2F0Y2goZSkge30KICAgICAgICB9CiAgICAgICAgY29uc3QgbmFtZSA9IG9wdFswXTsKICAgICAgICByZXN1bHRbb3B0WzBdXSA9IHZhbHVlOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICB9CiAgICByZXN1bHRbJ0AnXSA9IFsuLi4ocmVzdWx0WydAJ10gPz8gW10pLCBhcmddOwogIH0KICByZXR1cm4gcmVzdWx0Owp9CgpleHBvcnQgZnVuY3Rpb24gdG9Vbml4VGltZShkYXRlT2JqLCB1dGMgPSBmYWxzZSkgewogIGlmKCEoZGF0ZU9iaiBpbnN0YW5jZW9mIERhdGUpKSBkYXRlT2JqID0gbmV3IERhdGUoZGF0ZU9iaik7CiAgbGV0IGVwb2NoID0gTWF0aC5mbG9vcihkYXRlT2JqLmdldFRpbWUoKSAvIDEwMDApOwogIGlmKHV0YykgZXBvY2ggKz0gZGF0ZU9iai5nZXRUaW1lem9uZU9mZnNldCgpICogNjA7CiAgcmV0dXJuIGVwb2NoOwp9CgpleHBvcnQgZnVuY3Rpb24gdW5peFRpbWUodXRjID0gZmFsc2UpIHsKICByZXR1cm4gdG9Vbml4VGltZShuZXcgRGF0ZSgpLCB1dGMpOwp9CgpleHBvcnQgZnVuY3Rpb24gZnJvbVVuaXhUaW1lKGVwb2NoLCB1dGMgPSBmYWxzZSkgewogIGxldCB0ID0gcGFyc2VJbnQoZXBvY2gpOwogIGxldCBkID0gbmV3IERhdGUoMCk7CiAgdXRjID8gZC5zZXRVVENTZWNvbmRzKHQpIDogZC5zZXRTZWNvbmRzKHQpOwogIHJldHVybiBkOwp9CgpleHBvcnQgZnVuY3Rpb24gcmFuZ2UoLi4uYXJncykgewogIGxldCBbc3RhcnQsIGVuZCwgc3RlcCA9IDFdID0gYXJnczsKICBsZXQgcmV0OwogIHN0YXJ0IC89IHN0ZXA7CiAgZW5kIC89IHN0ZXA7CiAgaWYoc3RhcnQgPiBlbmQpIHsKICAgIHJldCA9IFtdOwogICAgd2hpbGUoc3RhcnQgPj0gZW5kKSByZXQucHVzaChzdGFydC0tKTsKICB9IGVsc2UgewogICAgcmV0ID0gQXJyYXkuZnJvbSh7IGxlbmd0aDogZW5kIC0gc3RhcnQgKyAxIH0sICh2LCBrKSA9PiBrICsgc3RhcnQpOwogIH0KICBpZihzdGVwICE9IDEpIHsKICAgIHJldCA9IHJldC5tYXAobiA9PiBuICogc3RlcCk7CiAgfQogIHJldHVybiByZXQ7Cn0KCmV4cG9ydCBmdW5jdGlvbiByZXBlYXRlcihuLCB3aGF0KSB7CiAgaWYodHlwZW9mIHdoYXQgPT0gJ2Z1bmN0aW9uJykKICAgIHJldHVybiAoZnVuY3Rpb24qICgpIHsKICAgICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgeWllbGQgd2hhdCgpOwogICAgfSkoKTsKICByZXR1cm4gKGZ1bmN0aW9uKiAoKSB7CiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB5aWVsZCB3aGF0OwogIH0pKCk7Cn0KCmV4cG9ydCBmdW5jdGlvbiByZXBlYXQobiwgd2hhdCkgewogIHJldHVybiBbLi4ucmVwZWF0ZXIobiwgd2hhdCldOwp9CgpleHBvcnQgZnVuY3Rpb24gY2h1bmtBcnJheShhcnIsIHNpemUpIHsKICBjb25zdCBmbiA9IChhLCB2LCBpKSA9PiB7CiAgICBjb25zdCBqID0gaSAlIHNpemU7CiAgICBpZihqID09IDApIGEucHVzaChbXSk7CiAgICBhW2EubGVuZ3RoIC0gMV0ucHVzaCh2KTsKICAgIHJldHVybiBhOwogIH07CgogIHJldHVybiBhcnIucmVkdWNlKGZuLCBbXSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBjYW1lbGl6ZShzdHIsIGRlbGltID0gJycpIHsKICByZXR1cm4gc3RyLnJlcGxhY2UoL14oW0EtWl0pfFtccy1fXSsoXHcpL2csIChtYXRjaCwgcDEsIHAyLCBvZmZzZXQpID0+IHsKICAgIGlmKHAyKSByZXR1cm4gZGVsaW0gKyBwMi50b1VwcGVyQ2FzZSgpOwogICAgcmV0dXJuIHAxLnRvTG93ZXJDYXNlKCk7CiAgfSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBkZWNhbWVsaXplKHN0ciwgZGVsaW0gPSAnLScpIHsKICByZXR1cm4gLy5bQS1aXS8udGVzdChzdHIpCiAgICA/IHN0cgogICAgICAgIC5yZXBsYWNlKC8oW2EtelxkXSkoW0EtWl0pL2csICckMScgKyBkZWxpbSArICckMicpCiAgICAgICAgLnJlcGxhY2UoLyhbQS1aXSspKFtBLVpdW2EtelxkXSspL2csICckMScgKyBkZWxpbSArICckMicpCiAgICAgICAgLnRvTG93ZXJDYXNlKCkKICAgIDogc3RyOwp9CgpleHBvcnQgZnVuY3Rpb24gc2hvcnRlbihzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykgewogIG1heCA9ICttYXg7CiAgaWYoaXNOYU4obWF4KSkgbWF4ID0gSW5maW5pdHk7CiAgaWYoQXJyYXkuaXNBcnJheShzdHIpKSByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoc3RyLCAwLCBNYXRoLm1pbihzdHIubGVuZ3RoLCBtYXgpKS5jb25jYXQoW3N1ZmZpeF0pOwogIGlmKHR5cGVvZiBzdHIgIT0gJ3N0cmluZycgfHwgIU51bWJlci5pc0Zpbml0ZShtYXgpIHx8IG1heCA8IDApIHJldHVybiBzdHI7CiAgc3RyID0gJycgKyBzdHI7CgogIGlmKHN0ci5sZW5ndGggPiBtYXgpIHsKICAgIGxldCBuID0gTWF0aC5mbG9vcigobWF4IC0gKDIgKyBzdWZmaXgubGVuZ3RoKSkgLyAyKTsKICAgIGxldCB0YWlsID0gc3RyLmxlbmd0aCAtIG47CiAgICBsZXQgbGVuID0gTWF0aC5taW4obiwgdGFpbCk7CiAgICBsZXQgaW5zZXJ0ID0gJyAnICsgc3VmZml4ICsgJyAnICsgKHN0ci5sZW5ndGggLSAobGVuICsgbikpICsgJyBieXRlcyAnICsgc3VmZml4ICsgJyAnOwoKICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKDAsIGxlbikgKyBpbnNlcnQgKyBzdHIuc3Vic3RyaW5nKHRhaWwpOwogIH0KICByZXR1cm4gc3RyOwp9CgpleHBvcnQgZnVuY3Rpb24gYXJyYXlzSW5Db21tb24oYSkgewogIGxldCBpLAogICAgYywKICAgIG4gPSBhLmxlbmd0aCwKICAgIG1pbiA9IEluZmluaXR5OwogIHdoaWxlKG4pIHsKICAgIGlmKGFbLS1uXS5sZW5ndGggPCBtaW4pIHsKICAgICAgbWluID0gYVtuXS5sZW5ndGg7CiAgICAgIGkgPSBuOwogICAgfQogIH0KICBjID0gQXJyYXkuZnJvbShhLnNwbGljZShpLCAxKVswXSk7CiAgcmV0dXJuIGMuZmlsdGVyKChpdG0sIGluZHgpID0+IHsKICAgIGlmKGMuaW5kZXhPZihpdG0pID09IGluZHgpIHJldHVybiBhLmV2ZXJ5KGFyciA9PiBhcnIuaW5kZXhPZihpdG0pICE9IC0xKTsKICB9KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGFycmF5RmFjYWRlKHByb3RvLCBpdGVtRm4gPSAoY29udGFpbmVyLCBpKSA9PiBjb250YWluZXIuYXQoaSkpIHsKICByZXR1cm4gZGVmaW5lKHByb3RvLCB7CiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7CiAgICAgIGNvbnN0IHsgbGVuZ3RoIH0gPSB0aGlzOwogICAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHlpZWxkIGl0ZW1Gbih0aGlzLCBpKTsKICAgIH0sCiAgICAqa2V5cygpIHsKICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXM7CiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeWllbGQgaTsKICAgIH0sCiAgICAqZW50cmllcygpIHsKICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXM7CiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeWllbGQgW2ksIGl0ZW1Gbih0aGlzLCBpKV07CiAgICB9LAogICAgKnZhbHVlcygpIHsKICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXM7CiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeWllbGQgaXRlbUZuKHRoaXMsIGkpOwogICAgfSwKICAgIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpIHsKICAgICAgY29uc3QgeyBsZW5ndGggfSA9IHRoaXM7CiAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBpdGVtRm4odGhpcywgaSksIGksIHRoaXMpOwogICAgfSwKICAgIHJlZHVjZShjYWxsYmFjaywgYWNjdSwgdGhpc0FyZykgewogICAgICBjb25zdCB7IGxlbmd0aCB9ID0gdGhpczsKICAgICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSBhY2N1ID0gY2FsbGJhY2suY2FsbCh0aGlzQXJnLCBhY2N1LCBpdGVtRm4odGhpcywgaSksIGksIHRoaXMpOwogICAgICByZXR1cm4gYWNjdTsKICAgIH0KICB9KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIG1vZChhLCBiKSB7CiAgcmV0dXJuIHR5cGVvZiBiID09ICdudW1iZXInID8gKChhICUgYikgKyBiKSAlIGIgOiBuID0+ICgobiAlIGEpICsgYSkgJSBhOwp9CgpleHBvcnQgZnVuY3Rpb24gcHVzaFVuaXF1ZShhcnIsIC4uLmFyZ3MpIHsKICBsZXQgcmVqZWN0ID0gW107CiAgZm9yKGxldCBhcmcgb2YgYXJncykKICAgIGlmKGFyci5pbmRleE9mKGFyZykgPT0gLTEpIGFyci5wdXNoKGFyZyk7CiAgICBlbHNlIHJlamVjdC5wdXNoKGFyZyk7CiAgcmV0dXJuIHJlamVjdDsKfQoKZXhwb3J0IGNvbnN0IGFuc2lTdHlsZXMgPSBnZXRBbnNpU3R5bGVzKCk7Cgpjb25zdCBpbnNwZWN0TWV0aG9kID0gU3ltYm9sLmZvcignbm9kZWpzLnV0aWwuaW5zcGVjdC5jdXN0b20nKTsKCmRlZmluZSh1dGlsLCB7CiAgZXJyb3JzLAogIHR5cGVzLAogIGhhc0J1aWx0SW4sCiAgZm9ybWF0LAogIGZvcm1hdFdpdGhPcHRpb25zLAogIGFzc2VydCwKICBzZXRJbnRlcnZhbCwKICBjbGVhckludGVydmFsLAogIGluaGVyaXRzLAogIG1lbW9pemUsCiAgZ2V0c2V0LAogIGdldHRlcnNldHRlciwKICBoYXNHZXRTZXQsCiAgbWFwT2JqZWN0LAogIG9uY2UsCiAgd2FpdEZvciwKICBkZWZpbmUsCiAgd2Vha0Fzc2lnbiwKICBnZXRDb25zdHJ1Y3RvckNoYWluLAogIGhhc1Byb3RvdHlwZSwKICBmaWx0ZXIsCiAgY3VycnksCiAgc3BsaXQsCiAgdW5pcXVlLAogIGdldEZ1bmN0aW9uQXJndW1lbnRzLAogIHJhbmRJbnQsCiAgcmFuZEZsb2F0LAogIHJhbmRTdHIsCiAgdG9CaWdJbnQsCiAgbGF6eVByb3BlcnR5LAogIGxhenlQcm9wZXJ0aWVzLAogIGdldE9wdCwKICB0b1VuaXhUaW1lLAogIHVuaXhUaW1lLAogIGZyb21Vbml4VGltZSwKICByYW5nZSwKICByZXBlYXRlciwKICByZXBlYXQsCiAgY2h1bmtBcnJheSwKICBjYW1lbGl6ZSwKICBkZWNhbWVsaXplLAogIHNob3J0ZW4sCiAgYXJyYXlzSW5Db21tb24sCiAgbW9kLAogIGFuc2lTdHlsZXMsCiAgZXh0ZW5kQXJyYXkKfSk7CgovKgp1dGlsLmZvcm1hdCA9IGZvcm1hdDsKdXRpbC5mb3JtYXRXaXRoT3B0aW9ucyA9IGZvcm1hdFdpdGhPcHRpb25zOwp1dGlsLnR5cGVzID0gdHlwZXM7CnV0aWwuYXNzZXJ0ID0gYXNzZXJ0Owp1dGlsLmhhc0J1aWx0SW4gPSBoYXNCdWlsdEluOwp1dGlsLnRvU3RyaW5nID0gdG9TdHJpbmc7CnV0aWwudG9BcnJheUJ1ZmZlciA9IHRvQXJyYXlCdWZmZXI7CnV0aWwuc2V0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbDsKdXRpbC5jbGVhckludGVydmFsID0gY2xlYXJJbnRlcnZhbDsKdXRpbC5tZW1vaXplID0gbWVtb2l6ZTsKdXRpbC5vbmNlID0gb25jZTsKdXRpbC5kZWZpbmUgPSBkZWZpbmU7CnV0aWwud2Vha0Fzc2lnbiA9IHdlYWtBc3NpZ247CnV0aWwuQXJyYXlFeHRlbnNpb25zID0gQXJyYXlFeHRlbnNpb25zOwp1dGlsLmV4dGVuZEFycmF5ID0gKHByb3RvID0gQXJyYXkucHJvdG90eXBlLCBkZWYgPSB1dGlsLmRlZmluZSkgPT4gZGVmKHByb3RvLCBBcnJheUV4dGVuc2lvbnMpOwp1dGlsLmV4dGVuZEdlbmVyYXRvciA9IChwcm90byA9IEdlbmVyYXRvclByb3RvdHlwZSwgZGVmID0gdXRpbC5kZWZpbmUpID0+IGRlZihwcm90bywgR2VuZXJhdG9yRXh0ZW5zaW9ucyk7CnV0aWwuZXJyb3JzID0gZXJyb3JzOwp1dGlsLmdldFByb3RvdHlwZUNoYWluID0gZ2V0UHJvdG90eXBlQ2hhaW47CnV0aWwuZ2V0Q29uc3RydWN0b3JDaGFpbiA9IGdldENvbnN0cnVjdG9yQ2hhaW47CnV0aWwuaGFzUHJvdG90eXBlID0gaGFzUHJvdG90eXBlOwp1dGlsLmFuc2lTdHlsZXMgPSBhbnNpU3R5bGVzOwp1dGlsLnJhbmRJbnQgPSByYW5kSW50Owp1dGlsLmN1cnJ5ID0gY3Vycnk7CnV0aWwuZmlsdGVyID0gZmlsdGVyOwp1dGlsLnNwbGl0ID0gc3BsaXQ7CnV0aWwudW5pcXVlID0gdW5pcXVlOwp1dGlsLmVzY2FwZSA9IGVzY2FwZTsKCk9iamVjdC5hc3NpZ24odXRpbCwgewogIFtpbnNwZWN0TWV0aG9kXSgpIHsKICAgIGxldCBvYmogPSB7IC4uLnV0aWwgfTsKICAgIGRlbGV0ZSBvYmpbaW5zcGVjdE1ldGhvZF07CiAgICByZXR1cm4gaW5zcGVjdChvYmosIHsgY3VzdG9tSW5zcGVjdDogZmFsc2UgfSk7CiAgfQp9KTsqLwoKZXhwb3J0IHsgZXh0ZW5kQXJyYXksIEFycmF5RXh0ZW5zaW9ucyB9IGZyb20gJy4vZXh0ZW5kQXJyYXkuanMnOwovL2V4cG9ydCB7IFN5c2NhbGxFcnJvciB9IGZyb20gJ3N5c2NhbGxlcnJvcic7CmV4cG9ydCAqIGZyb20gJ21pc2MnOwpleHBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnaW5zcGVjdCc7Ci8vZXhwb3J0IGRlZmF1bHQgdXRpbDsKLypleHBvcnQgewogIEpTX0VWQUxfRkxBR19CQUNLVFJBQ0VfQkFSUklFUiwKICBMb2NhdGlvbiwKICBkdXBBcnJheUJ1ZmZlciwKICBlc2NhcGUsCiAgZ2V0UHJvdG90eXBlQ2hhaW4sCiAgaXNBcnJheSwKICBpc0JpZ0RlY2ltYWwsCiAgaXNCaWdGbG9hdCwKICBpc0JpZ0ludCwKICBpc0Jvb2wsCiAgaXNDRnVuY3Rpb24sCiAgaXNDb25zdHJ1Y3RvciwKICBpc0VtcHR5U3RyaW5nLAogIGlzRXJyb3IsCiAgaXNFeGNlcHRpb24sCiAgaXNFeHRlbnNpYmxlLAogIGlzRnVuY3Rpb24sCiAgaXNIVE1MRERBLAogIGlzSW5zdGFuY2VPZiwKICBpc0ludGVnZXIsCiAgaXNKb2JQZW5kaW5nLAogIGlzTGl2ZU9iamVjdCwKICBpc051bGwsCiAgaXNOdW1iZXIsCiAgaXNPYmplY3QsCiAgaXNSZWdpc3RlcmVkQ2xhc3MsCiAgaXNTdHJpbmcsCiAgaXNTeW1ib2wsCiAgaXNVbmNhdGNoYWJsZUVycm9yLAogIGlzVW5kZWZpbmVkLAogIGlzVW5pbml0aWFsaXplZCwKICBpc0FycmF5QnVmZmVyLAogIHJhbmQsCiAgdG9BcnJheUJ1ZmZlciwKICB0b1N0cmluZywKICB3YXRjaAp9IGZyb20gJ21pc2MnOyovCgAAAAAAAAAAPYgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUHAAAAAAAARQcAAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUHAAAAAAAARQcAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/events.js",
			"settings":
			{
				"buffer_size": 3229,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/dom.js",
			"settings":
			{
				"buffer_size": 27011,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					66,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsPAAAAAAAA/Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsPAAAAAAAA/Q8AAAAAAAAAAAAAAADwvw"
				],
				[
					68,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPsPAAAAAAAA/Q8AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/fs.js",
			"settings":
			{
				"buffer_size": 15517,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAEBAAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAADAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAEBAAAAAAAAAQEAAAAAAAAAAAAAAAAAAA"
				],
				[
					17,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIAAAAAAAAA4gAAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOIAAAAAAAAA4gAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/css3-selectors.js",
			"settings":
			{
				"buffer_size": 1162,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					2,
					"left_delete",
					null,
					"AgAAABwAAAAAAAAAHAAAAAAAAAABAAAALxsAAAAAAAAAGwAAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB0AAAAAAAAAHQAAAAAAAAAAAAAAAADwvw"
				],
				[
					6,
					3,
					"left_delete",
					null,
					"AwAAACYAAAAAAAAAJgAAAAAAAAABAAAAcyUAAAAAAAAAJQAAAAAAAAABAAAAaiQAAAAAAAAAJAAAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcAAAAAAAAAJwAAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/deep.js",
			"settings":
			{
				"buffer_size": 9667,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/utils.h",
			"settings":
			{
				"buffer_size": 29919,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"cut",
					null,
					"AQAAAGZtAAAAAAAAZm0AAAAAAABZAAAASlNWYWx1ZSBqc19ldmFsX2J1ZihKU0NvbnRleHQqLCBjb25zdCB2b2lkKiwgaW50LCBjb25zdCBjaGFyKiBmaWxlbmFtZSwgaW50IGV2YWxfZmxhZ3MpOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGZtAAAAAAAAv20AAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					2,
					"paste",
					null,
					"AgAAAGZtAAAAAAAAv20AAAAAAAAAAAAAv20AAAAAAAAYbgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGZtAAAAAAAAZm0AAAAAAAAAAAAAAADwvw"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "fuil"
					},
					"BQAAAM9tAAAAAAAA0G0AAAAAAAAAAAAA0G0AAAAAAADQbQAAAAAAAAMAAABidWbQbQAAAAAAANFtAAAAAAAAAAAAANFtAAAAAAAA0m0AAAAAAAAAAAAA0m0AAAAAAADTbQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM9tAAAAAAAA0m0AAAAAAAAAAAAAAADwvw"
				],
				[
					27,
					3,
					"left_delete",
					null,
					"AwAAANJtAAAAAAAA0m0AAAAAAAABAAAAbNFtAAAAAAAA0W0AAAAAAAABAAAAadBtAAAAAAAA0G0AAAAAAAABAAAAdQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANNtAAAAAAAA020AAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "ile"
					},
					"AwAAANBtAAAAAAAA0W0AAAAAAAAAAAAA0W0AAAAAAADSbQAAAAAAAAAAAADSbQAAAAAAANNtAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANBtAAAAAAAA0G0AAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					2,
					"left_delete",
					null,
					"AgAAAOBtAAAAAAAA4G0AAAAAAAARAAAAY29uc3Qgdm9pZCosIGludCzfbQAAAAAAAN9tAAAAAAAAAQAAACA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOBtAAAAAAAA8W0AAAAAAAAAAAAAAADwvw"
				],
				[
					41,
					1,
					"paste",
					null,
					"AgAAAOhsAAAAAAAAbG4AAAAAAAAAAAAAbG4AAAAAAABsbgAAAAAAAGEBAABKU1ZhbHVlIGpzX2V2YWxfbW9kdWxlKEpTQ29udGV4dCosIEpTVmFsdWUsIEJPT0wpOwpKU1ZhbHVlIGpzX2V2YWxfYmluYXJ5KEpTQ29udGV4dCosIGNvbnN0IHVpbnQ4X3QqLCBzaXplX3QsIGludCBsb2FkX29ubHkpOwpKU1ZhbHVlIGpzX2V2YWxfYnVmKEpTQ29udGV4dCosIGNvbnN0IHZvaWQqLCBpbnQsIGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBpbnQgZXZhbF9mbGFncyk7CkpTVmFsdWUganNfZXZhbF9maWxlKEpTQ29udGV4dCosIGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBpbnQgZXZhbF9mbGFncyk7CmludCBqc19ldmFsX3N0cihKU0NvbnRleHQqLCBjb25zdCBjaGFyKiwgY29uc3QgY2hhciosIGludCBmbGFncyk7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEluAAAAAAAA6GwAAAAAAAAAAAAAAADwvw"
				],
				[
					46,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGxuAAAAAAAAbG4AAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGxuAAAAAAAAbG4AAAAAAAAAAAAAAADwvw"
				],
				[
					48,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAABedAAAI2lmbmRlZiBVVElMU19ICiNkZWZpbmUgVVRJTFNfSAoKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgInF1aWNranMtaW50ZXJuYWwuaCIKI2luY2x1ZGUgPGN1dGlscy5oPgojaW5jbHVkZSA8c3RyaW5nLmg+CiNpbmNsdWRlIDxtYXRoLmg+CiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPHN0ZGxpYi5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpZmRlZiBIQVZFX1RIUkVBRFNfSAojaW5jbHVkZSA8dGhyZWFkcy5oPgojZW5kaWYKI2luY2x1ZGUgImRlYnVnLmgiCgovKioKICogXGRlZmdyb3VwIHV0aWxzIFV0aWxpdGllcwogKiBAewogKi8KCiNkZWZpbmUgSlNfSXNNb2R1bGUodmFsdWUpIChKU19WQUxVRV9HRVRfVEFHKCh2YWx1ZSkpID09IEpTX1RBR19NT0RVTEUpCgpjaGFyKiBiYXNlbmFtZShjb25zdCBjaGFyKik7Cgp0eXBlZGVmIGVudW0gZW5kaWFuIHsgTElMID0gMCwgQklHID0gMSB9IEVuZGlhbjsKCnR5cGVkZWYgZW51bSBwcmVjZWRlbmNlIHsKICBQUkVDRURFTkNFX0NPTU1BX1NFUVVFTkNFID0gMSwKICBQUkVDRURFTkNFX1lJRUxELAogIFBSRUNFREVOQ0VfQVNTSUdOTUVOVCwKICBQUkVDRURFTkNFX1RFUk5BUlksCiAgUFJFQ0VERU5DRV9OVUxMSVNIX0NPQUxFU0NJTkcsCiAgUFJFQ0VERU5DRV9MT0dJQ0FMX09SLAogIFBSRUNFREVOQ0VfTE9HSUNBTF9BTkQsCiAgUFJFQ0VERU5DRV9CSVRXSVNFX09SLAogIFBSRUNFREVOQ0VfQklUV0lTRV9YT1IsCiAgUFJFQ0VERU5DRV9CSVRXSVNFX0FORCwKICBQUkVDRURFTkNFX0VRVUFMSVRZLAogIFBSRUNFREVOQ0VfTEVTU19HUkVBVEVSX0lOLAogIFBSRUNFREVOQ0VfQklUV0lTRV9TSElGVCwKICBQUkVDRURFTkNFX0FERElUSVZFLAogIFBSRUNFREVOQ0VfTVVMVElQTElDQVRJVkUsCiAgUFJFQ0VERU5DRV9FWFBPTkVOVElBVElPTiwKICBQUkVDRURFTkNFX1VOQVJZLAogIFBSRUNFREVOQ0VfUE9TVEZJWCwKICBQUkVDRURFTkNFX05FVywKICBQUkVDRURFTkNFX01FTUJFUl9BQ0NFU1MsCiAgUFJFQ0VERU5DRV9HUk9VUElORywKfSBKU1ByZWNlZGVuY2U7CnR5cGVkZWYgc3RydWN0IHsKICBCT09MIGRvbmU7CiAgSlNWYWx1ZSB2YWx1ZTsKfSBJdGVyYXRvclZhbHVlOwoKdHlwZWRlZiBzdHJ1Y3QgewogIHVpbnQxNl90IHAsIGMsIGE7CiAgY29uc3QgY2hhcioqIHY7Cn0gQXJndW1lbnRzOwoKdHlwZWRlZiB2b2lkKiByZWFsbG9jX2Z1bmModm9pZCosIHZvaWQqLCBzaXplX3QpOwoKdm9pZCogdXRpbHNfanNfcmVhbGxvYyhKU0NvbnRleHQqIGN0eCwgdm9pZCogcHRyLCBzaXplX3Qgc2l6ZSk7CnZvaWQqIHV0aWxzX2pzX3JlYWxsb2NfcnQoSlNSdW50aW1lKiBydCwgdm9pZCogcHRyLCBzaXplX3Qgc2l6ZSk7CgpzdGF0aWMgaW5saW5lIHNpemVfdApsaXN0X3NpemUoc3RydWN0IGxpc3RfaGVhZCogbGlzdCkgewogIHN0cnVjdCBsaXN0X2hlYWQqIGVsOwogIHNpemVfdCBpID0gMDsKICBsaXN0X2Zvcl9lYWNoKGVsLCBsaXN0KSB7ICsraTsgfQogIHJldHVybiBpOwp9CgpzdGF0aWMgaW5saW5lIHN0cnVjdCBsaXN0X2hlYWQqCmxpc3RfaGVhZChjb25zdCBzdHJ1Y3QgbGlzdF9oZWFkKiBsaXN0KSB7CiAgcmV0dXJuIGxpc3QtPm5leHQgIT0gbGlzdCA/IGxpc3QtPm5leHQgOiAwOwp9CgpzdGF0aWMgaW5saW5lIHN0cnVjdCBsaXN0X2hlYWQqCmxpc3RfdGFpbChjb25zdCBzdHJ1Y3QgbGlzdF9oZWFkKiBsaXN0KSB7CiAgcmV0dXJuIGxpc3QtPnByZXYgIT0gbGlzdCA/IGxpc3QtPnByZXYgOiAwOwp9CgpzdGF0aWMgaW5saW5lIEFyZ3VtZW50cwphcmd1bWVudHNfbmV3KGludCBhcmdjLCBjb25zdCBjaGFyKiBhcmd2W10pIHsKICBBcmd1bWVudHMgYXJnczsKICBhcmdzLnAgPSAwOwogIGFyZ3MuYyA9IGFyZ2M7CiAgYXJncy5hID0gMDsKICBhcmdzLnYgPSBhcmd2OwogIHJldHVybiBhcmdzOwp9CgpzdGF0aWMgaW5saW5lIGNvbnN0IGNoYXIqCmFyZ3VtZW50c19zaGlmdChBcmd1bWVudHMqIGFyZ3MpIHsKICBjb25zdCBjaGFyKiByZXQgPSAwOwogIGlmKGFyZ3MtPnAgPCBhcmdzLT5jKSB7CiAgICByZXQgPSBhcmdzLT52W2FyZ3MtPnBdOwogICAgYXJncy0+cCsrOwogIH0KICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW5saW5lIGNvbnN0IGNoYXIqCmFyZ3VtZW50c19hdChBcmd1bWVudHMqIGFyZ3MsIGludCBpKSB7CiAgcmV0dXJuIGkgPj0gMCAmJiBpIDwgYXJncy0+YyA/IGFyZ3MtPnZbaV0gOiAwOwp9CgpzdGF0aWMgaW5saW5lIHVpbnQzMl90CmFyZ3VtZW50c19zaGlmdG4oQXJndW1lbnRzKiBhcmdzLCB1aW50MzJfdCBuKSB7CiAgdWludDMyX3QgaSA9IDA7CgogIHdoaWxlKG4gPiAwKSB7CiAgICBpZighYXJndW1lbnRzX3NoaWZ0KGFyZ3MpKQogICAgICBicmVhazsKICAgIGkrKzsKICAgIG4tLTsKICB9CiAgcmV0dXJuIGk7Cn0KCkJPT0wgYXJndW1lbnRzX2FsbG9jKEFyZ3VtZW50cyogYXJncywgSlNDb250ZXh0KiBjdHgsIGludCBuKTsKY29uc3QgY2hhciogYXJndW1lbnRzX3B1c2goQXJndW1lbnRzKiwgSlNDb250ZXh0KiwgY29uc3QgY2hhciopOwoKdm9pZCBhcmd1bWVudHNfZHVtcChBcmd1bWVudHMgY29uc3QqLCBEeW5CdWYqKTsKCnR5cGVkZWYgc3RydWN0IHsKICB1aW50MTZfdCBwLCBjLCBhOwogIEpTVmFsdWVDb25zdCogdjsKfSBKU0FyZ3VtZW50czsKCnN0YXRpYyBpbmxpbmUgSlNBcmd1bWVudHMKanNfYXJndW1lbnRzX25ldyhpbnQgYXJnYywgSlNWYWx1ZUNvbnN0KiBhcmd2KSB7CiAgSlNBcmd1bWVudHMgYXJnczsKICBhcmdzLnAgPSAwOwogIGFyZ3MuYyA9IGFyZ2M7CiAgYXJncy5hID0gMDsKICBhcmdzLnYgPSBhcmd2OwogIHJldHVybiBhcmdzOwp9CgpCT09MIGpzX2FyZ3VtZW50c19hbGxvYyhKU0FyZ3VtZW50cyogYXJncywgSlNDb250ZXh0KiBjdHgsIGludCBuKTsKCnN0YXRpYyBpbmxpbmUgSlNWYWx1ZUNvbnN0CmpzX2FyZ3VtZW50c19zaGlmdChKU0FyZ3VtZW50cyogYXJncykgewogIEpTVmFsdWUgcmV0ID0gSlNfRVhDRVBUSU9OOwogIGlmKGFyZ3MtPnAgPCBhcmdzLT5jKSB7CiAgICByZXQgPSBhcmdzLT52W2FyZ3MtPnBdOwogICAgYXJncy0+cCsrOwogIH0KICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW5saW5lIGludApqc19hcmd1bWVudHNfY291bnQoY29uc3QgSlNBcmd1bWVudHMqIGFyZ3MpIHsKICByZXR1cm4gYXJncy0+YyAtIGFyZ3MtPnA7Cn0KCnN0YXRpYyBpbmxpbmUgSlNWYWx1ZUNvbnN0CmpzX2FyZ3VtZW50c19hdChKU0FyZ3VtZW50cyogYXJncywgaW50IGkpIHsKICByZXR1cm4gaSA+PSAwICYmIGkgPCBhcmdzLT5jID8gYXJncy0+dltpXSA6IEpTX1VOREVGSU5FRDsKfQoKc3RhdGljIGlubGluZSB1aW50MzJfdApqc19hcmd1bWVudHNfc2hpZnRuKEpTQXJndW1lbnRzKiBhcmdzLCB1aW50MzJfdCBuKSB7CiAgdWludDMyX3QgaSA9IDA7CgogIHdoaWxlKG4gPiAwKSB7CiAgICBpZihKU19Jc0V4Y2VwdGlvbihqc19hcmd1bWVudHNfc2hpZnQoYXJncykpKQogICAgICBicmVhazsKICAgIGkrKzsKICAgIG4tLTsKICB9CiAgcmV0dXJuIGk7Cn0KCnZvaWQganNfYXJndW1lbnRzX2R1bXAoSlNBcmd1bWVudHMgY29uc3QqLCBKU0NvbnRleHQqLCBEeW5CdWYqKTsKCnN0YXRpYyBpbmxpbmUgc2l6ZV90Cm1pbl9zaXplKHNpemVfdCBhLCBzaXplX3QgYikgewogIGlmKGEgPCBiKQogICAgcmV0dXJuIGE7CiAgZWxzZQogICAgcmV0dXJuIGI7Cn0KCnN0YXRpYyBpbmxpbmUgdWludDY0X3QKaW50NjRfYWJzKGludDY0X3QgYSkgewogIHJldHVybiBhIDwgMCA/IC1hIDogYTsKfQoKc3RhdGljIGlubGluZSB1aW50MzJfdAppbnQzMl9hYnMoaW50MzJfdCBpKSB7CiAgcmV0dXJuIGkgPCAwID8gLWkgOiBpOwp9CgovKiBjbGFuZy1mb3JtYXQgb2ZmICovCnN0YXRpYyBpbmxpbmUgdm9pZCAgICAgdWludDE2X3B1dF9iZSAodm9pZCogeCwgdWludDE2X3QgdSkgeyB1aW50OF90KiB5ID0geDsgeVswXSA9IHUgPj4gODsgeVsxXSA9IHU7IH0Kc3RhdGljIGlubGluZSB1aW50MTZfdCB1aW50MTZfZ2V0X2JlIChjb25zdCB2b2lkKiB4KSB7IGNvbnN0IHVpbnQ4X3QqIHkgPSB4OyByZXR1cm4gKHlbMF0gPDwgOCkgfCB5WzFdOyB9CnN0YXRpYyBpbmxpbmUgdm9pZCAgICAgdWludDE2X3JlYWRfYmUoY29uc3Qgdm9pZCogeCwgdWludDE2X3QqIHkpIHsgKnkgPSB1aW50MTZfZ2V0X2JlKHgpOyB9CnN0YXRpYyBpbmxpbmUgdm9pZCAgICAgdWludDE2X3B1dF9sZSAodm9pZCogeCwgdWludDE2X3QgdSkgeyB1aW50OF90KiB5ID0geDsgeVswXSA9IHU7IHlbMV0gPSB1ID4+IDg7IH0Kc3RhdGljIGlubGluZSB1aW50MTZfdCB1aW50MTZfZ2V0X2xlIChjb25zdCB2b2lkKiB4KSB7IGNvbnN0IHVpbnQ4X3QqIHkgPSB4OyByZXR1cm4gKHlbMV0gPDwgOCkgfCB5WzBdOyB9CnN0YXRpYyBpbmxpbmUgdm9pZCAgICAgdWludDE2X3JlYWRfbGUoY29uc3Qgdm9pZCogeCwgdWludDE2X3QqIHkpIHsgKnkgPSB1aW50MTZfZ2V0X2xlKHgpOyB9CnN0YXRpYyBpbmxpbmUgdm9pZCAgICAgdWludDE2X3B1dF9lbmRpYW4gKHZvaWQqIHgsIHVpbnQxNl90IHUsIEVuZGlhbiBlbmRpYW4pIHsgKGVuZGlhbiA9PSBCSUcgPyB1aW50MTZfcHV0X2JlIDogdWludDE2X3B1dF9sZSkoeCwgdSk7IH0Kc3RhdGljIGlubGluZSB1aW50MTZfdCB1aW50MTZfZ2V0X2VuZGlhbiAoY29uc3Qgdm9pZCogeCwgRW5kaWFuIGVuZGlhbikgeyByZXR1cm4gKGVuZGlhbiA9PSBCSUcgPyB1aW50MTZfZ2V0X2JlIDogdWludDE2X2dldF9sZSkoeCk7IH0Kc3RhdGljIGlubGluZSB2b2lkICAgICB1aW50MTZfcmVhZF9lbmRpYW4oY29uc3Qgdm9pZCogeCwgdWludDE2X3QqIHksIEVuZGlhbiBlbmRpYW4pIHsgKGVuZGlhbiA9PSBCSUcgPyB1aW50MTZfcmVhZF9iZSA6IHVpbnQxNl9yZWFkX2xlKSh4LHkpOyB9CnN0YXRpYyBpbmxpbmUgdm9pZCAgICAgdWludDMyX3B1dF9iZSAodm9pZCogeCwgdWludDMyX3QgdSkgeyB1aW50OF90KiB5ID0geDsgeVswXSA9IHUgPj4gMjQ7IHlbMV0gPSB1ID4+IDE2OyB5WzJdID0gdSA+PiA4OyB5WzNdID0gdTsgfQpzdGF0aWMgaW5saW5lIHVpbnQzMl90IHVpbnQzMl9nZXRfYmUgKGNvbnN0IHZvaWQqIHgpIHtjb25zdCB1aW50MTZfdCogeSA9IHg7IHJldHVybiAodWludDE2X2dldF9iZSh5KSA8PCAxNikgfCB1aW50MTZfZ2V0X2JlKHkrMSk7IH0Kc3RhdGljIGlubGluZSB2b2lkICAgICB1aW50MzJfcmVhZF9iZShjb25zdCB2b2lkKiB4LCB1aW50MzJfdCogeSkgeyAqeSA9IHVpbnQzMl9nZXRfYmUoeCk7IH0Kc3RhdGljIGlubGluZSB2b2lkICAgICB1aW50MzJfcHV0X2xlICh2b2lkKiB4LCB1aW50MzJfdCB1KSB7IHVpbnQ4X3QqIHkgPSB4OyAgeVszXSA9IHUgPj4gMjQ7IHlbMl0gPSB1ID4+IDE2OyB5WzFdID0gdSA+PiA4OyB5WzBdID0gdTsgfQpzdGF0aWMgaW5saW5lIHVpbnQzMl90IHVpbnQzMl9nZXRfbGUgKGNvbnN0IHZvaWQqIHgpIHtjb25zdCB1aW50MTZfdCogeSA9IHg7IHJldHVybiAodWludDE2X2dldF9sZSh5KzEpIDw8IDE2KSB8IHVpbnQxNl9nZXRfbGUoeSk7IH0Kc3RhdGljIGlubGluZSB2b2lkICAgICB1aW50MzJfcmVhZF9sZShjb25zdCB2b2lkKiB4LCB1aW50MzJfdCogeSkgeyAqeSA9IHVpbnQzMl9nZXRfbGUoeCk7IH0Kc3RhdGljIGlubGluZSB2b2lkICAgICB1aW50MzJfcHV0X2VuZGlhbiAodm9pZCogeCwgdWludDMyX3QgdSwgRW5kaWFuIGVuZGlhbikgeyAoZW5kaWFuID09IEJJRyA/IHVpbnQzMl9wdXRfYmUgOiB1aW50MzJfcHV0X2xlKSh4LCB1KTsgfQpzdGF0aWMgaW5saW5lIHVpbnQzMl90IHVpbnQzMl9nZXRfZW5kaWFuIChjb25zdCB2b2lkKiB4LCBFbmRpYW4gZW5kaWFuKSB7IHJldHVybiAoZW5kaWFuID09IEJJRyA/IHVpbnQzMl9nZXRfYmUgOiB1aW50MzJfZ2V0X2xlKSh4KTsgfQpzdGF0aWMgaW5saW5lIHZvaWQgICAgIHVpbnQzMl9yZWFkX2VuZGlhbihjb25zdCB2b2lkKiB4LCB1aW50MzJfdCogeSwgRW5kaWFuIGVuZGlhbikgeyAoZW5kaWFuID09IEJJRyA/IHVpbnQzMl9yZWFkX2JlIDogdWludDMyX3JlYWRfbGUpKHgseSk7IH0KLyogY2xhbmctZm9ybWF0IG9uICovCgpzdGF0aWMgaW5saW5lIGludDMyX3QKaW50MzJfc2lnbih1aW50MzJfdCBpKSB7CiAgcmV0dXJuIChpICYgMHg4MDAwMDAwMCkgPyAtMSA6IDE7Cn0KCnN0YXRpYyBpbmxpbmUgaW50MzJfdAppbnQzMl9tb2QoaW50MzJfdCBhLCBpbnQzMl90IGIpIHsKICBpbnQzMl90IGMgPSBhICUgYjsKICByZXR1cm4gKGMgPCAwKSA/IGMgKyBiIDogYzsKfQoKdWludDY0X3QgdGltZV91cyh2b2lkKTsKCnR5cGVkZWYgc3RydWN0IHsKICBjaGFyKiBzb3VyY2U7CiAgc2l6ZV90IGxlbjsKICBpbnQgZmxhZ3M7Cn0gUmVnRXhwOwoKaW50IHJlZ2V4cF9mbGFnc190b3N0cmluZyhpbnQsIGNoYXIqKTsKaW50IHJlZ2V4cF9mbGFnc19mcm9tc3RyaW5nKGNvbnN0IGNoYXIqKTsKUmVnRXhwIHJlZ2V4cF9mcm9tX2FyZ3YoaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIEpTQ29udGV4dCogY3R4KTsKUmVnRXhwIHJlZ2V4cF9mcm9tX3N0cmluZyhjaGFyKiBzdHIsIGludCBmbGFncyk7ClJlZ0V4cCByZWdleHBfZnJvbV9kYnVmKER5bkJ1ZiogZGJ1ZiwgaW50IGZsYWdzKTsKdWludDhfdCogcmVnZXhwX2NvbXBpbGUoUmVnRXhwIHJlLCBKU0NvbnRleHQqIGN0eCk7CkpTVmFsdWUgcmVnZXhwX3RvX3ZhbHVlKFJlZ0V4cCByZSwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIHJlZ2V4cF9mcmVlX3J0KFJlZ0V4cCByZSwgSlNSdW50aW1lKiBydCk7CkJPT0wgcmVnZXhwX21hdGNoKGNvbnN0IHVpbnQ4X3QqIGJjLCBjb25zdCB2b2lkKiBjYnVmLCBzaXplX3QgY2xlbiwgSlNDb250ZXh0KiBjdHgpOwoKc3RhdGljIGlubGluZSB2b2lkCnJlZ2V4cF9mcmVlKFJlZ0V4cCByZSwgSlNDb250ZXh0KiBjdHgpIHsKICByZWdleHBfZnJlZV9ydChyZSwgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKSlNWYWx1ZSBqc19nbG9iYWxfZ2V0X3N0cihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcHJvcCk7CkpTVmFsdWUganNfZ2xvYmFsX2dldF9zdHJfbihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcHJvcCwgc2l6ZV90IGxlbik7CkpTVmFsdWUganNfZ2xvYmFsX2dldF9hdG9tKEpTQ29udGV4dCogY3R4LCBKU0F0b20gcHJvcCk7CgpzdGF0aWMgaW5saW5lIEpTVmFsdWUKanNfZ2xvYmFsX25ldyhKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogY2xhc3NfbmFtZSwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIGN0b3IgPSBqc19nbG9iYWxfZ2V0X3N0cihjdHgsIGNsYXNzX25hbWUpOwogIEpTVmFsdWUgb2JqID0gSlNfQ2FsbENvbnN0cnVjdG9yKGN0eCwgY3RvciwgYXJnYywgYXJndik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY3Rvcik7CiAgcmV0dXJuIG9iajsKfQoKSlNWYWx1ZSBqc19nbG9iYWxfcHJvdG90eXBlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBjbGFzc19uYW1lKTsKSlNWYWx1ZSBqc19nbG9iYWxfcHJvdG90eXBlX2Z1bmMoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGNsYXNzX25hbWUsIGNvbnN0IGNoYXIqIGZ1bmNfbmFtZSk7CkpTVmFsdWUganNfZ2xvYmFsX3N0YXRpY19mdW5jKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBjbGFzc19uYW1lLCBjb25zdCBjaGFyKiBmdW5jX25hbWUpOwoKZW51bSB2YWx1ZV90eXBlcyB7CiAgRkxBR19VTkRFRklORUQgPSAwLAogIEZMQUdfTlVMTCwgICAgICAgIC8vIDEKICBGTEFHX0JPT0wsICAgICAgICAvLyAyCiAgRkxBR19JTlQsICAgICAgICAgLy8gMwogIEZMQUdfT0JKRUNULCAgICAgIC8vIDQKICBGTEFHX1NUUklORywgICAgICAvLyA1CiAgRkxBR19TWU1CT0wsICAgICAgLy8gNgogIEZMQUdfQklHX0ZMT0FULCAgIC8vIDcKICBGTEFHX0JJR19JTlQsICAgICAvLyA4CiAgRkxBR19CSUdfREVDSU1BTCwgLy8gOQogIEZMQUdfRkxPQVQ2NCwgICAgIC8vIDEwCiAgRkxBR19OQU4sICAgICAgICAgLy8gMTEKICBGTEFHX0ZVTkNUSU9OLCAgICAvLyAxMgogIEZMQUdfQVJSQVksICAgICAgIC8vIDEzCiAgRkxBR19NT0RVTEUsCiAgRkxBR19GVU5DVElPTl9CWVRFQ09ERSwKICBGTEFHX1VOSU5JVElBTElaRUQsCiAgRkxBR19DQVRDSF9PRkZTRVQsCiAgRkxBR19FWENFUFRJT04KCn07CgplbnVtIHZhbHVlX21hc2sgewogIFRZUEVfVU5ERUZJTkVEID0gKDEgPDwgRkxBR19VTkRFRklORUQpLAogIFRZUEVfTlVMTCA9ICgxIDw8IEZMQUdfTlVMTCksCiAgVFlQRV9CT09MID0gKDEgPDwgRkxBR19CT09MKSwKICBUWVBFX0lOVCA9ICgxIDw8IEZMQUdfSU5UKSwKICBUWVBFX09CSkVDVCA9ICgxIDw8IEZMQUdfT0JKRUNUKSwKICBUWVBFX1NUUklORyA9ICgxIDw8IEZMQUdfU1RSSU5HKSwKICBUWVBFX1NZTUJPTCA9ICgxIDw8IEZMQUdfU1lNQk9MKSwKICBUWVBFX0JJR19GTE9BVCA9ICgxIDw8IEZMQUdfQklHX0ZMT0FUKSwKICBUWVBFX0JJR19JTlQgPSAoMSA8PCBGTEFHX0JJR19JTlQpLAogIFRZUEVfQklHX0RFQ0lNQUwgPSAoMSA8PCBGTEFHX0JJR19ERUNJTUFMKSwKICBUWVBFX0ZMT0FUNjQgPSAoMSA8PCBGTEFHX0ZMT0FUNjQpLAogIFRZUEVfTkFOID0gKDEgPDwgRkxBR19OQU4pLAogIFRZUEVfTlVNQkVSID0gKFRZUEVfSU5UIHwgVFlQRV9CSUdfRkxPQVQgfCBUWVBFX0JJR19JTlQgfCBUWVBFX0JJR19ERUNJTUFMIHwgVFlQRV9GTE9BVDY0KSwKICBUWVBFX1BSSU1JVElWRSA9CiAgICAgIChUWVBFX1VOREVGSU5FRCB8IFRZUEVfTlVMTCB8IFRZUEVfQk9PTCB8IFRZUEVfSU5UIHwgVFlQRV9TVFJJTkcgfCBUWVBFX1NZTUJPTCB8IFRZUEVfQklHX0ZMT0FUIHwgVFlQRV9CSUdfSU5UIHwgVFlQRV9CSUdfREVDSU1BTCB8IFRZUEVfTkFOKSwKICBUWVBFX0FMTCA9IChUWVBFX1BSSU1JVElWRSB8IFRZUEVfT0JKRUNUKSwKICBUWVBFX0ZVTkNUSU9OID0gKDEgPDwgRkxBR19GVU5DVElPTiksCiAgVFlQRV9BUlJBWSA9ICgxIDw8IEZMQUdfQVJSQVkpLAp9OwoKaW50MzJfdCBqc192YWx1ZV90eXBlX2ZsYWcoSlNWYWx1ZUNvbnN0IHZhbHVlKTsKaW50MzJfdCBqc192YWx1ZV90eXBlX2dldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKCnN0YXRpYyBpbmxpbmUgaW50MzJfdApqc192YWx1ZV90eXBlMmZsYWcodWludDMyX3QgdHlwZSkgewogIGludDMyX3QgZmxhZzsKICBmb3IoZmxhZyA9IDA7ICh0eXBlID4+PSAxKTsgZmxhZysrKSB7fQogIHJldHVybiBmbGFnOwp9CgplbnVtIHZhbHVlX21hc2sganNfdmFsdWVfdHlwZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKCnN0YXRpYyBpbmxpbmUgY29uc3QgY2hhciogY29uc3QqCmpzX3ZhbHVlX3R5cGVzKCkgewogIHJldHVybiAoY29uc3QgY2hhciogY29uc3RbXSl7CiAgICAgICJ1bmRlZmluZWQiLCAgICAgIm51bGwiLCAgICAgICAgICJib29sIiwgICAgICAiaW50IiwgIm9iamVjdCIsICAgInN0cmluZyIsICJzeW1ib2wiLCAiYmlnX2Zsb2F0IiwKICAgICAgImJpZ19pbnQiLCAgICAgICAiYmlnX2RlY2ltYWwiLCAgImZsb2F0NjQiLCAgICJuYW4iLCAiZnVuY3Rpb24iLCAiYXJyYXkiLCAgIm1vZHVsZSIsICJmdW5jdGlvbl9ieXRlY29kZSIsCiAgICAgICJ1bmluaXRpYWxpemVkIiwgImNhdGNoX29mZnNldCIsICJleGNlcHRpb24iLCAwLAogIH07Cn0KCnN0YXRpYyBpbmxpbmUgY29uc3QgY2hhcioKanNfdmFsdWVfdHlwZW9mKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGludDMyX3QgZmxhZyA9IGpzX3ZhbHVlX3R5cGVfZmxhZyh2YWx1ZSk7CiAgcmV0dXJuICgoY29uc3QgY2hhciogY29uc3RbXSl7CiAgICAgICJ1bmRlZmluZWQiLCAgICAgIm9iamVjdCIsICAgICAgICJib29sZWFuIiwgICAibnVtYmVyIiwgIm9iamVjdCIsICAgInN0cmluZyIsICJzeW1ib2wiLCAiYmlnZmxvYXQiLAogICAgICAiYmlnaW50IiwgICAgICAgICJiaWdkZWNpbWFsIiwgICAibnVtYmVyIiwgICAgIm51bWJlciIsICJmdW5jdGlvbiIsICJvYmplY3QiLCAibW9kdWxlIiwgImZ1bmN0aW9uX2J5dGVjb2RlIiwKICAgICAgInVuaW5pdGlhbGl6ZWQiLCAiY2F0Y2hfb2Zmc2V0IiwgImV4Y2VwdGlvbiIsIDAsCiAgfSlbZmxhZ107Cn0KCmNvbnN0IGNoYXIqIGpzX3ZhbHVlX3R5cGVfbmFtZShpbnQzMl90IHR5cGUpOwpjb25zdCBjaGFyKiBqc192YWx1ZV90eXBlc3RyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwoKLyogY2xhbmctZm9ybWF0IG9mZiAqLyAKc3RhdGljIGlubGluZSBpbnQgICAgICAganNfdmFsdWVfdGFnKEpTVmFsdWVDb25zdCB2KSB7IHJldHVybiBKU19WQUxVRV9HRVRfVEFHKHYpOyB9CnN0YXRpYyBpbmxpbmUgdm9pZCogICAgIGpzX3ZhbHVlX3B0cihKU1ZhbHVlQ29uc3QgdikgeyByZXR1cm4gSlNfVkFMVUVfR0VUX1BUUih2KTsgfQpzdGF0aWMgaW5saW5lIGludCAgICAgICBqc192YWx1ZV9pbnQoSlNWYWx1ZUNvbnN0IHYpIHsgcmV0dXJuIEpTX1ZBTFVFX0dFVF9JTlQodik7IH0Kc3RhdGljIGlubGluZSBCT09MICAgICAganNfdmFsdWVfYm9vbChKU1ZhbHVlQ29uc3QgdikgeyByZXR1cm4gSlNfVkFMVUVfR0VUX0JPT0wodik7IH0Kc3RhdGljIGlubGluZSBkb3VibGUgICAganNfdmFsdWVfZmxvYXQ2NChKU1ZhbHVlQ29uc3QgdikgeyByZXR1cm4gSlNfVkFMVUVfR0VUX0ZMT0FUNjQodik7IH0Kc3RhdGljIGlubGluZSBKU1ZhbHVlICAganNfdmFsdWVfbWtwdHIoaW50IHRhZywgdm9pZCogcHRyKSB7IHJldHVybiBKU19NS1BUUih0YWcsIHB0cik7IH0Kc3RhdGljIGlubGluZSBKU1ZhbHVlICAganNfdmFsdWVfbWt2YWwoaW50IHRhZywgaW50cHRyX3QgdmFsKSB7IHJldHVybiBKU19NS1ZBTCh0YWcsIHZhbCk7IH0Kc3RhdGljIGlubGluZSBKU09iamVjdCoganNfdmFsdWVfb2JqKEpTVmFsdWVDb25zdCB2KSB7IHJldHVybiBKU19Jc09iamVjdCh2KSA/IEpTX1ZBTFVFX0dFVF9PQkoodikgOiAwOyB9Ci8qIGNsYW5nLWZvcm1hdCBvbiAqLwoKQk9PTCBqc192YWx1ZV9oYXNfcmVmX2NvdW50KEpTVmFsdWVDb25zdCB2KTsKCnZvaWQganNfdmFsdWVfZnJlZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSB2KTsKdm9pZCBqc192YWx1ZV9mcmVlX3J0KEpTUnVudGltZSogcnQsIEpTVmFsdWUgdik7CgpCT09MIGpzX3ZhbHVlX2VxdWFscyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGEsIEpTVmFsdWVDb25zdCBiKTsKdm9pZCBqc192YWx1ZV9wcmludChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKSlNWYWx1ZSBqc192YWx1ZV9jbG9uZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHBlKTsKSlNWYWx1ZSoganNfdmFsdWVzX2R1cChKU0NvbnRleHQqIGN0eCwgaW50IG52YWx1ZXMsIEpTVmFsdWVDb25zdCogdmFsdWVzKTsKdm9pZCBqc192YWx1ZXNfZnJlZShKU1J1bnRpbWUqIHJ0LCBpbnQgbnZhbHVlcywgSlNWYWx1ZUNvbnN0KiB2YWx1ZXMpOwpKU1ZhbHVlIGpzX3ZhbHVlc190b2FycmF5KEpTQ29udGV4dCogY3R4LCBpbnQgbnZhbHVlcywgSlNWYWx1ZUNvbnN0KiB2YWx1ZXMpOwpKU1ZhbHVlKiBqc192YWx1ZXNfZnJvbWFycmF5KEpTQ29udGV4dCogY3R4LCBzaXplX3QqIG52YWx1ZXNfcCwgSlNWYWx1ZUNvbnN0IGFycik7CnZvaWQganNfdmFsdWVfZndyaXRlKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCwgRklMRSogZik7CnZvaWQganNfdmFsdWVfZHVtcChKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QsIER5bkJ1ZiogZGIpOwoKLy8jaW5jbHVkZSAiYnVmZmVyLXV0aWxzLmgiCgpjaGFyKiBqc19jc3RyaW5nX2R1cChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogc3RyKTsKY2hhcioganNfY3N0cmluZ19wdHIoSlNWYWx1ZUNvbnN0IHYpOwpzaXplX3QganNfY3N0cmluZ19sZW4oSlNWYWx1ZUNvbnN0IHYpOwpKU1ZhbHVlQ29uc3QganNfY3N0cmluZ192YWx1ZShjb25zdCBjaGFyKiBwdHIpOwp2b2lkIGpzX2NzdHJpbmdfZHVtcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlLCBEeW5CdWYqIGRiKTsKCnN0YXRpYyBpbmxpbmUgY29uc3QgY2hhcioKanNfY3N0cmluZ19uZXcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN0cikgewogIEpTVmFsdWUgdiA9IEpTX05ld1N0cmluZyhjdHgsIHN0cik7CiAgY29uc3QgY2hhciogcyA9IEpTX1RvQ1N0cmluZyhjdHgsIHYpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHYpOwogIHJldHVybiBzOwp9CnN0YXRpYyBpbmxpbmUgY29uc3QgY2hhcioKanNfY3N0cmluZ19uZXdsZW4oSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN0ciwgc2l6ZV90IGxlbikgewogIEpTVmFsdWUgdiA9IEpTX05ld1N0cmluZ0xlbihjdHgsIHN0ciwgbGVuKTsKICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgdik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdik7CiAgcmV0dXJuIHM7Cn0KCnN0YXRpYyBpbmxpbmUgdm9pZApqc19jc3RyaW5nX2ZyZWUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHB0cikgewogIGlmKCFwdHIpCiAgICByZXR1cm47CgogIEpTX0ZyZWVWYWx1ZShjdHgsIEpTX01LUFRSKEpTX1RBR19TVFJJTkcsICh2b2lkKikocHRyIC0gb2Zmc2V0b2YoSlNTdHJpbmcsIHUpKSkpOwp9CgpzdGF0aWMgaW5saW5lIGludDY0X3QKanNfdG9pbnQ2NChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgaW50NjRfdCByZXQgPSAwOwogIEpTX1RvSW50NjQoY3R4LCAmcmV0LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKY2hhcioganNfdG9zdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsIHNpemVfdCogbGVucCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKY2hhcioganNfdG9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CndjaGFyX3QqIGpzX3Rvd3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgc2l6ZV90KiBsZW5wLCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwoKc3RhdGljIGlubGluZSB3Y2hhcl90Kgpqc190b3dzdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBqc190b3dzdHJpbmdsZW4oY3R4LCAwLCB2YWx1ZSk7Cn0KCnN0YXRpYyBpbmxpbmUgSlNWYWx1ZQpqc192YWx1ZV90b3N0cmluZyhKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogY2xhc3NfbmFtZSwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNBdG9tIGF0b207CiAgSlNWYWx1ZSBwcm90bywgdG9zdHJpbmcsIHN0cjsKICBwcm90byA9IGpzX2dsb2JhbF9wcm90b3R5cGUoY3R4LCBjbGFzc19uYW1lKTsKICBhdG9tID0gSlNfTmV3QXRvbShjdHgsICJ0b1N0cmluZyIpOwogIHRvc3RyaW5nID0gSlNfR2V0UHJvcGVydHkoY3R4LCBwcm90bywgYXRvbSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcHJvdG8pOwogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgc3RyID0gSlNfQ2FsbChjdHgsIHRvc3RyaW5nLCB2YWx1ZSwgMCwgMCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdG9zdHJpbmcpOwogIHJldHVybiBzdHI7Cn0KCmludCBqc192YWx1ZV90b3NpemUoSlNDb250ZXh0KiBjdHgsIHNpemVfdCogc3osIEpTVmFsdWVDb25zdCB2YWx1ZSk7CgpzdGF0aWMgaW5saW5lIGRvdWJsZQpqc192YWx1ZV90b2RvdWJsZV9mcmVlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBkb3VibGUgcmV0ID0gMDsKICBKU19Ub0Zsb2F0NjQoY3R4LCAmcmV0LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgaW50NjRfdApqc192YWx1ZV90b2ludDY0X2ZyZWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGludDY0X3QgcmV0ID0gMDsKICBKU19Ub0ludDY0KGN0eCwgJnJldCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW5saW5lIEJPT0wKanNfdmFsdWVfdG9ib29sX2ZyZWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEJPT0wgcmV0ID0gSlNfVG9Cb29sKGN0eCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW5saW5lIEpTQXRvbQpqc192YWx1ZV90b2F0b21fZnJlZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNBdG9tIGF0b20gPSBKU19WYWx1ZVRvQXRvbShjdHgsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIGF0b207Cn0KCkpTVmFsdWUganNfdmFsdWVfZnJvbV9jaGFyKEpTQ29udGV4dCogY3R4LCBpbnQgYyk7CnN0YXRpYyBpbmxpbmUgaW50CmpzX3ZhbHVlX2NtcHN0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlLCBjb25zdCBjaGFyKiBvdGhlcikgewogIGNvbnN0IGNoYXIqIHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIHZhbHVlKTsKICBpbnQgcmV0ID0gc3RyY21wKHN0ciwgb3RoZXIpOwogIEpTX0ZyZWVDU3RyaW5nKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9Cgp2b2lkIGpzX3Byb3BlcnR5ZW51bXNfZnJlZShKU0NvbnRleHQqIGN0eCwgSlNQcm9wZXJ0eUVudW0qIHByb3BzLCBzaXplX3QgbGVuKTsKCnN0YXRpYyBpbmxpbmUgdm9pZApqc19wcm9wZXJ0eWRlc2NyaXB0b3JfZnJlZShKU0NvbnRleHQqIGN0eCwgSlNQcm9wZXJ0eURlc2NyaXB0b3IqIGRlc2MpIHsKICBKU19GcmVlVmFsdWUoY3R4LCBkZXNjLT52YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZGVzYy0+Z2V0dGVyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBkZXNjLT5zZXR0ZXIpOwp9CgpKU1ZhbHVlIGpzX3N5bWJvbF9jdG9yKEpTQ29udGV4dCogY3R4KTsKCkpTVmFsdWUganNfc3ltYm9sX2ludm9rZV9zdGF0aWMoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUsIEpTVmFsdWVDb25zdCBhcmcpOwoKSlNWYWx1ZSBqc19zeW1ib2xfdG9fc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgc3ltKTsKCmNvbnN0IGNoYXIqIGpzX3N5bWJvbF90b19jc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgc3ltKTsKCkpTVmFsdWUganNfc3ltYm9sX3N0YXRpY192YWx1ZShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSk7CkpTQXRvbSBqc19zeW1ib2xfc3RhdGljX2F0b20oSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUpOwpCT09MIGpzX2lzX2l0ZXJhYmxlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKTsKQk9PTCBqc19pc19pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaik7CkpTVmFsdWUganNfaXRlcmF0b3JfbWV0aG9kKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKTsKSlNWYWx1ZSBqc19pdGVyYXRvcl9uZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmopOwpKU1ZhbHVlIGpzX2l0ZXJhdG9yX25leHQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIEJPT0wqIGRvbmVfcCk7CkpTVmFsdWUganNfaXRlcmF0b3JfcmVzdWx0KEpTQ29udGV4dCosIEpTVmFsdWUgdmFsdWUsIEJPT0wgZG9uZSk7CkpTVmFsdWUganNfaXRlcmF0b3JfdGhlbihKU0NvbnRleHQqLCBCT09MIGRvbmUpOwpKU1ZhbHVlIGpzX3N5bWJvbF9mb3IoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN5bV9mb3IpOwpKU0F0b20ganNfc3ltYm9sX2Zvcl9hdG9tKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBzeW1fZm9yKTsKCkpTVmFsdWUganNfc3ltYm9sX29wZXJhdG9yc2V0X3ZhbHVlKEpTQ29udGV4dCogY3R4KTsKCkpTQXRvbSBqc19zeW1ib2xfb3BlcmF0b3JzZXRfYXRvbShKU0NvbnRleHQqIGN0eCk7CgpKU1ZhbHVlIGpzX29wZXJhdG9yc19jcmVhdGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUqIHRoaXNfb2JqKTsKCnN0YXRpYyBpbmxpbmUgaW50NjRfdApqc19pbnQ2NF9kZWZhdWx0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUsIGludDY0X3QgaSkgewogIGlmKEpTX0lzTnVtYmVyKHZhbHVlKSkKICAgIEpTX1RvSW50NjQoY3R4LCAmaSwgdmFsdWUpOwogIHJldHVybiBpOwp9CgpKU1ZhbHVlIGpzX251bWJlcl9uZXcoSlNDb250ZXh0KiBjdHgsIGludDMyX3Qgbik7CgpzdGF0aWMgaW5saW5lIEpTVmFsdWUKanNfbmV3X2Jvb2xfb3JfbnVtYmVyKEpTQ29udGV4dCogY3R4LCBpbnQzMl90IG4pIHsKICBpZihuID09IDApCiAgICByZXR1cm4gSlNfTmV3Qm9vbChjdHgsIEZBTFNFKTsKICByZXR1cm4ganNfbnVtYmVyX25ldyhjdHgsIG4pOwp9CgpKU0F0b20ganNfYXRvbV9mcm9tKEpTQ29udGV4dCosIGNvbnN0IGNoYXIqKTsKaW50IGpzX2F0b21fdG9pbnQ2NChKU0NvbnRleHQqIGN0eCwgaW50NjRfdCogaSwgSlNBdG9tIGF0b20pOwppbnQzMl90IGpzX2F0b21fdG9pbnQzMihKU0NvbnRleHQqIGN0eCwgSlNBdG9tIGF0b20pOwoKc3RhdGljIGlubGluZSBKU1ZhbHVlCmpzX2F0b21fdG92YWx1ZShKU0NvbnRleHQqIGN0eCwgSlNBdG9tIGF0b20pIHsKICBpZihqc19hdG9tX2lzaW50KGF0b20pKQogICAgcmV0dXJuIEpTX01LVkFMKEpTX1RBR19JTlQsIGpzX2F0b21fdG9pbnQoYXRvbSkpOwoKICByZXR1cm4gSlNfQXRvbVRvVmFsdWUoY3R4LCBhdG9tKTsKfQoKdW5zaWduZWQgaW50IGpzX2F0b21fdG9iaW5hcnkoSlNBdG9tIGF0b20pOwpjb25zdCBjaGFyKiBqc19hdG9tX3RvX2NzdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsIHNpemVfdCogbGVuLCBKU0F0b20gYXRvbSk7CnZvaWQganNfYXRvbV9kdW1wKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSwgRHluQnVmKiBkYiwgQk9PTCBjb2xvcik7CkJPT0wganNfYXRvbV9pc19pbmRleChKU0NvbnRleHQqIGN0eCwgaW50NjRfdCogcHZhbCwgSlNBdG9tIGF0b20pOwpCT09MIGpzX2F0b21faXNfc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSwgY29uc3QgY2hhciogb3RoZXIpOwpCT09MIGpzX2F0b21faXNfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSk7Cgpjb25zdCBjaGFyKiBqc19vYmplY3RfdG9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CmNvbnN0IGNoYXIqIGpzX29iamVjdF90b3N0cmluZzIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBtZXRob2QsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CmNvbnN0IGNoYXIqIGpzX2Z1bmN0aW9uX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CmNvbnN0IGNoYXIqIGpzX2Z1bmN0aW9uX3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwpKU0NGdW5jdGlvbioganNfZnVuY3Rpb25fY2Z1bmMoSlNDb250ZXh0KiwgSlNWYWx1ZSB2YWx1ZSk7CkJPT0wganNfZnVuY3Rpb25faXNuYXRpdmUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CmludCBqc19mdW5jdGlvbl9hcmdjKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwpKU1ZhbHVlIGpzX2Z1bmN0aW9uX2JpbmQoSlNDb250ZXh0KiwgSlNWYWx1ZSBmdW5jLCBpbnQgYXJnYywgSlNWYWx1ZSBhcmd2W10pOwpKU1ZhbHVlIGpzX2Z1bmN0aW9uX2JpbmRfdGhpcyhKU0NvbnRleHQqLCBKU1ZhbHVlIGZ1bmMsIEpTVmFsdWUgdGhpc192YWwpOwpKU1ZhbHVlIGpzX2Z1bmN0aW9uX3Rocm93KEpTQ29udGV4dCosIEpTVmFsdWUgZXJyKTsKSlNWYWx1ZSBqc19mdW5jdGlvbl9yZXR1cm5fdW5kZWZpbmVkKEpTQ29udGV4dCopOwpKU1ZhbHVlIGpzX2Z1bmN0aW9uX3JldHVybl92YWx1ZShKU0NvbnRleHQqLCBKU1ZhbHVlIHZhbHVlKTsKCmNoYXIqIGpzX29iamVjdF9jbGFzc25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CmludCBqc19vYmplY3RfaXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgY29uc3QgY2hhciogY21wKTsKSlNWYWx1ZSBqc19vYmplY3RfY29uc3RydWN0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgY3Rvcik7CkpTVmFsdWUganNfb2JqZWN0X2Vycm9yKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtZXNzYWdlKTsKSlNWYWx1ZSBqc19vYmplY3RfbmV3KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBjbGFzc19uYW1lLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSk7CkpTVmFsdWUganNfb2JqZWN0X2Z1bmN0aW9uKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBmdW5jX25hbWUsIEpTVmFsdWVDb25zdCBvYmopOwoKc3RhdGljIGlubGluZSBCT09MCmpzX29iamVjdF9zYW1lKEpTVmFsdWVDb25zdCBhLCBKU1ZhbHVlQ29uc3QgYikgewogIEpTT2JqZWN0ICphb2JqLCAqYm9iajsKICBpZighSlNfSXNPYmplY3QoYSkgfHwgIUpTX0lzT2JqZWN0KGIpKQogICAgcmV0dXJuIEZBTFNFOwoKICBhb2JqID0gSlNfVkFMVUVfR0VUX09CSihhKTsKICBib2JqID0gSlNfVkFMVUVfR0VUX09CSihiKTsKICByZXR1cm4gYW9iaiA9PSBib2JqOwp9CgpzdGF0aWMgaW5saW5lIEpTQ2xhc3NJRApqc19nZXRfY2xhc3NpZChKU1ZhbHVlIHYpIHsKICBKU09iamVjdCogcDsKICAvKiBpZihKU19WQUxVRV9HRVRfVEFHKHYpICE9IEpTX1RBR19PQkpFQ1QpCiAgICAgcmV0dXJuIDA7Ki8KICBwID0gSlNfVkFMVUVfR0VUX09CSih2KTsKICBhc3NlcnQocCAhPSAwKTsKICByZXR1cm4gcC0+Y2xhc3NfaWQ7Cn0KCkJPT0wganNfaGFzX3Byb3BlcnR5c3RyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpOwpCT09MIGpzX2dldF9wcm9wZXJ0eXN0cl9ib29sKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpOwp2b2lkIGpzX3NldF9wcm9wZXJ0eWludF9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIHVpbnQzMl90IGksIGNvbnN0IGNoYXIqIHN0cik7CnZvaWQganNfc2V0X3Byb3BlcnR5aW50X2ludChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgdWludDMyX3QgaSwgaW50MzJfdCB2YWx1ZSk7CnZvaWQganNfc2V0X3Byb3BlcnR5c3RyX3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCwgY29uc3QgY2hhciogc3RyKTsKdm9pZCBqc19zZXRfcHJvcGVydHlzdHJfc3RyaW5nbGVuKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wLCBjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4pOwpjb25zdCBjaGFyKiBqc19nZXRfcHJvcGVydHlpbnRfY3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgdWludDMyX3QgaSk7CmludDMyX3QganNfZ2V0X3Byb3BlcnR5aW50X2ludDMyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCB1aW50MzJfdCBpKTsKY29uc3QgY2hhcioganNfZ2V0X3Byb3BlcnR5c3RyX2NzdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApOwpjb25zdCBjaGFyKiBqc19nZXRfcHJvcGVydHlzdHJfY3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCwgc2l6ZV90KiBsZW5wKTsKY2hhcioganNfZ2V0X3Byb3BlcnR5c3RyX3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCk7CmNoYXIqIGpzX2dldF9wcm9wZXJ0eXN0cl9zdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3AsIHNpemVfdCogbGVucCk7CmludDMyX3QganNfZ2V0X3Byb3BlcnR5c3RyX2ludDMyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wKTsKdWludDY0X3QganNfZ2V0X3Byb3BlcnR5c3RyX3VpbnQ2NChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCk7CmludCBqc19nZXRfcHJvcGVydHlkZXNjcmlwdG9yKEpTQ29udGV4dCogY3R4LCBKU1Byb3BlcnR5RGVzY3JpcHRvciogZGVzYywgSlNWYWx1ZUNvbnN0IG9iaiwgSlNBdG9tIHByb3ApOwpKU0F0b20ganNfZ2V0X3Byb3BlcnR5c3RyX2F0b20oSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApOwoKc3RhdGljIGlubGluZSB2b2lkCmpzX3NldF9pbnNwZWN0X21ldGhvZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgSlNDRnVuY3Rpb24qIGZ1bmMpIHsKICBKU0F0b20gaW5zcGVjdF9zeW1ib2wgPSBqc19zeW1ib2xfZm9yX2F0b20oY3R4LCAicXVpY2tqcy5pbnNwZWN0LmN1c3RvbSIpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWUoY3R4LCBvYmosIGluc3BlY3Rfc3ltYm9sLCBKU19OZXdDRnVuY3Rpb24oY3R4LCBmdW5jLCAiaW5zcGVjdCIsIDEpLCBKU19QUk9QX0NPTkZJR1VSQUJMRSB8IEpTX1BST1BfV1JJVEFCTEUpOwogIEpTX0ZyZWVBdG9tKGN0eCwgaW5zcGVjdF9zeW1ib2wpOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQKanNfc2V0X3Rvc3RyaW5ndGFnX3ZhbHVlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBKU1ZhbHVlIHZhbHVlKSB7CiAgSlNBdG9tIHRvc3RyaW5nX3RhZyA9IGpzX3N5bWJvbF9zdGF0aWNfYXRvbShjdHgsICJ0b1N0cmluZ1RhZyIpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWUoY3R4LCBvYmosIHRvc3RyaW5nX3RhZywgdmFsdWUsIEpTX1BST1BfQ09ORklHVVJBQkxFIHwgSlNfUFJPUF9XUklUQUJMRSk7CiAgSlNfRnJlZUF0b20oY3R4LCB0b3N0cmluZ190YWcpOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQKanNfc2V0X3Rvc3RyaW5ndGFnX3N0cihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogc3RyKSB7CiAganNfc2V0X3Rvc3RyaW5ndGFnX3ZhbHVlKGN0eCwgb2JqLCBKU19OZXdTdHJpbmcoY3R4LCBzdHIpKTsKfQoKSlNDbGFzc0lEIGpzX2NsYXNzX2lkKEpTQ29udGV4dCogY3R4LCBpbnQgaWQpOwpKU0NsYXNzSUQganNfY2xhc3NfbmV3aWQodm9pZCk7CkpTQ2xhc3MqIGpzX2NsYXNzX2dldChKU0NvbnRleHQqIGN0eCwgSlNDbGFzc0lEIGlkKTsKSlNBdG9tIGpzX2NsYXNzX2F0b20oSlNDb250ZXh0KiBjdHgsIEpTQ2xhc3NJRCBpZCk7CmNvbnN0IGNoYXIqIGpzX2NsYXNzX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTQ2xhc3NJRCBpZCk7CkpTQ2xhc3NJRCBqc19jbGFzc19maW5kKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKTsKCnN0YXRpYyBpbmxpbmUgQk9PTApqc19vYmplY3RfaXNjbGFzcyhKU1ZhbHVlIG9iaiwgaW50MzJfdCBjbGFzc19pZCkgewogIHJldHVybiBKU19HZXRPcGFxdWUob2JqLCBjbGFzc19pZCkgIT0gMDsKfQoKc3RhdGljIGlubGluZSBCT09MCmpzX3ZhbHVlX2lzY2xhc3MoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgb2JqLCBpbnQgaWQpIHsKICBpbnQzMl90IGNsYXNzX2lkID0ganNfY2xhc3NfaWQoY3R4LCBpZCk7CiAgcmV0dXJuIGpzX29iamVjdF9pc2NsYXNzKG9iaiwgY2xhc3NfaWQpOwp9CgpCT09MIGpzX2lzX2FycmF5YnVmZmVyKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CkJPT0wganNfaXNfc2hhcmVkYXJyYXlidWZmZXIoSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0KTsKQk9PTCBqc19pc19kYXRlKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CkJPT0wganNfaXNfbWFwKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CkJPT0wganNfaXNfc2V0KEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CkJPT0wganNfaXNfZ2VuZXJhdG9yKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CkJPT0wganNfaXNfcmVnZXhwKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CkJPT0wganNfaXNfcHJvbWlzZShKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QpOwpCT09MIGpzX2lzX2RhdGF2aWV3KEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CgpzdGF0aWMgaW5saW5lIEJPT0wKanNfaXNfbnVsbF9vcl91bmRlZmluZWQoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc051bGwodmFsdWUpOwp9CgpzdGF0aWMgaW5saW5lIEJPT0wKanNfaXNfZmFsc2lzaChKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBzd2l0Y2goSlNfVkFMVUVfR0VUX1RBRyh2YWx1ZSkpIHsKICAgIGNhc2UgSlNfVEFHX05VTEw6IHJldHVybiBUUlVFOwogICAgY2FzZSBKU19UQUdfVU5ERUZJTkVEOiByZXR1cm4gVFJVRTsKICAgIGNhc2UgSlNfVEFHX0lOVDogcmV0dXJuIEpTX1ZBTFVFX0dFVF9JTlQodmFsdWUpID09IDA7CiAgICBjYXNlIEpTX1RBR19CT09MOiByZXR1cm4gIUpTX1ZBTFVFX0dFVF9CT09MKHZhbHVlKTsKICAgIGNhc2UgSlNfVEFHX0ZMT0FUNjQ6IHJldHVybiBKU19WQUxVRV9HRVRfRkxPQVQ2NCh2YWx1ZSkgPT0gMDsKICAgIGRlZmF1bHQ6IHJldHVybiBGQUxTRTsKICB9Cn0KCnN0YXRpYyBpbmxpbmUgQk9PTApqc19pc190cnVpc2goSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuICFqc19pc19mYWxzaXNoKHZhbHVlKTsKfQoKc3RhdGljIGlubGluZSBCT09MCmpzX2lzX251bGxpc2goSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGludDY0X3QgaSA9IC0xOwoKICBpZihKU19Jc1VuZGVmaW5lZCh2YWx1ZSkgfHwgSlNfSXNOdWxsKHZhbHVlKSkKICAgIHJldHVybiBUUlVFOwogIEpTX1RvSW50NjQoY3R4LCAmaSwgdmFsdWUpOwogIHJldHVybiBpID09IDA7Cn0KCkpTVmFsdWUganNfdHlwZWRhcnJheV9wcm90b3R5cGUoSlNDb250ZXh0KiBjdHgpOwpKU1ZhbHVlIGpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgpOwpKU1ZhbHVlIGpzX3R5cGVkYXJyYXlfbmV3KEpTQ29udGV4dCosIGludCBiaXRzLCBCT09MIGZsb2F0aW5nLCBCT09MIHNpZ24sIEpTVmFsdWUgYnVmZmVyKTsKCnN0YXRpYyBpbmxpbmUgQk9PTApqc19pc19iYXNpY19hcnJheShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNWYWx1ZSBjdG9yID0ganNfZ2xvYmFsX2dldF9zdHIoY3R4LCAiQXJyYXkiKTsKICBCT09MIHJldCA9IEpTX0lzSW5zdGFuY2VPZihjdHgsIHZhbHVlLCBjdG9yKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW5saW5lIEJPT0wKanNfaXNfdHlwZWRhcnJheShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpZihKU19Jc09iamVjdCh2YWx1ZSkpIHsKICAgIEpTQ2xhc3NJRCBpZCA9IGpzX2dldF9jbGFzc2lkKHZhbHVlKTsKICAgIHJldHVybiBpZCA+PSBKU19DTEFTU19VSU5UOENfQVJSQVkgJiYgaWQgPD0gSlNfQ0xBU1NfRkxPQVQ2NF9BUlJBWTsKICB9CiAgcmV0dXJuIEZBTFNFOwp9CgppbnQ2NF90IGpzX2FycmF5X2xlbmd0aChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGFycmF5KTsKCnN0YXRpYyBpbmxpbmUgQk9PTApqc19pc19hcnJheShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzQXJyYXkoY3R4LCB2YWx1ZSkgfHwganNfaXNfdHlwZWRhcnJheSh2YWx1ZSk7Cn0KCnN0YXRpYyBpbmxpbmUgQk9PTApqc19pc19hcnJheV9saWtlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKSB7CiAgaW50NjRfdCBsZW4gPSBqc19hcnJheV9sZW5ndGgoY3R4LCBvYmopOwogIHJldHVybiBsZW4gPj0gMDsKfQoKQk9PTCBqc19pc19pbnB1dChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKCmludCBqc19wcm9wZW51bV9jbXAoY29uc3Qgdm9pZCogYSwgY29uc3Qgdm9pZCogYiwgdm9pZCogcHRyKTsKQk9PTCBqc19vYmplY3RfZXF1YWxzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYSwgSlNWYWx1ZUNvbnN0IGIpOwp2b2lkIGpzX2FycmF5X2NsZWFyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYXJyYXkpOwoKc2l6ZV90IGpzX3N0cnZfbGVuZ3RoKGNoYXIqKiBzdHJ2KTsKCmNoYXIqKiBqc19zdHJ2X2R1cChKU0NvbnRleHQqIGN0eCwgY2hhcioqIHN0cnYpOwoKdm9pZCBqc19zdHJ2X2ZyZWVfbihKU0NvbnRleHQqLCBpbnQsIGNoYXIqIGFyZ3ZbXSk7CnZvaWQganNfc3Rydl9mcmVlKEpTQ29udGV4dCogY3R4LCBjaGFyKiogc3Rydik7CnZvaWQganNfc3Rydl9mcmVlX3J0KEpTUnVudGltZSogcnQsIGNoYXIqKiBzdHJ2KTsKSlNWYWx1ZSBqc19zdHJ2X3RvX2FycmF5KEpTQ29udGV4dCogY3R4LCBjaGFyKiogc3Rydik7CkpTVmFsdWUganNfaW50dl90b19hcnJheShKU0NvbnRleHQqIGN0eCwgaW50KiBpbnR2LCBzaXplX3QgbGVuKTsKY2hhcioqIGpzX2FycmF5X3RvX2FyZ3YoSlNDb250ZXh0KiBjdHgsIGludCogYXJnY3AsIEpTVmFsdWVDb25zdCBhcnJheSk7CmludCBqc19hcnJheV9jb3B5cyhKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QsIGludCBuLCBjaGFyKiogc3RyYSk7CmludCBqc19zdHJ2X2NvcHlzKEpTQ29udGV4dCosIGludCwgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG4sIGNoYXIqKiBzdHJhKTsKCkpTVmFsdWUganNfaW52b2tlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc19vYmosIGNvbnN0IGNoYXIqIG1ldGhvZCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pOwoKSlNWYWx1ZSBqc190b19zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX29iaik7CkpTVmFsdWUganNfdG9fc291cmNlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc19vYmopOwpjaGFyKiBqc190b3NvdXJjZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmpzX2FycmF5YnVmZmVyX2xlbmd0aChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGJ1ZmZlcikgewogIHVpbnQ4X3QqIHB0cjsKICBzaXplX3QgbGVuOwoKICBpZihKU19HZXRBcnJheUJ1ZmZlcihjdHgsICZsZW4sIGJ1ZmZlcikpCiAgICByZXR1cm4gbGVuOwogIHJldHVybiAwOwp9CgppbnQ2NF90IGpzX2FycmF5YnVmZmVyX2J5dGVsZW5ndGgoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CgpzdGF0aWMgaW5saW5lIGludApqc19maW5kX2NmdW5jdGlvbl9lbnRyeShjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSogZW50cmllcywgc2l6ZV90IG5fZW50cmllcywgY29uc3QgY2hhciogbmFtZSwgaW50IGRlZl90eXBlKSB7CiAgc2l6ZV90IGk7CiAgZm9yKGkgPSAwOyBpIDwgbl9lbnRyaWVzOyBpKyspCiAgICBpZihlbnRyaWVzW2ldLmRlZl90eXBlID09IGRlZl90eXBlICYmICFzdHJjbXAoZW50cmllc1tpXS5uYW1lLCBuYW1lKSkKICAgICAgcmV0dXJuIGk7CiAgcmV0dXJuIC0xOwp9CgpzdGF0aWMgaW5saW5lIGludApqc19maW5kX2NmdW5jdGlvbl9hdG9tKEpTQ29udGV4dCogY3R4LCBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSogZW50cmllcywgc2l6ZV90IG5fZW50cmllcywgSlNBdG9tIGF0b20sIGludCBkZWZfdHlwZSkgewogIGNvbnN0IGNoYXIqIG5hbWUgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgYXRvbSk7CiAgaW50IGk7CiAgaSA9IGpzX2ZpbmRfY2Z1bmN0aW9uX2VudHJ5KGVudHJpZXMsIG5fZW50cmllcywgbmFtZSwgZGVmX3R5cGUpOwogIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbmFtZSk7CiAgcmV0dXJuIGk7Cn0KCkpTVmFsdWUganNfZGF0ZV9uZXcoSlNDb250ZXh0KiwgSlNWYWx1ZSBhcmcpOwpKU1ZhbHVlIGpzX2RhdGVfZnJvbV9tcyhKU0NvbnRleHQqLCBpbnQ2NF90IG1zKTsKSlNWYWx1ZSBqc19kYXRlX2Zyb21fdGltZV9ucyhKU0NvbnRleHQqLCB0aW1lX3QgdCwgbG9uZyBucyk7CkpTVmFsdWUganNfZGF0ZV9mcm9tX3RpbWVzcGVjKEpTQ29udGV4dCosIGNvbnN0IHN0cnVjdCB0aW1lc3BlYyB0cyk7CmludDY0X3QganNfZGF0ZV9nZXR0aW1lKEpTQ29udGV4dCosIEpTVmFsdWUgYXJnKTsKaW50NjRfdCBqc19kYXRlX3RpbWUoSlNDb250ZXh0KiwgSlNWYWx1ZSBhcmcpOwpzdHJ1Y3QgdGltZXNwZWMganNfZGF0ZV90aW1lc3BlYyhKU0NvbnRleHQqLCBKU1ZhbHVlIGFyZyk7Cgp2b2lkIGpzX2FycmF5YnVmZmVyX2ZyZWV2YWx1ZShKU1J1bnRpbWUqLCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cik7CkpTVmFsdWUganNfYXJyYXlidWZmZXJfZnJvbXZhbHVlKEpTQ29udGV4dCosIHZvaWQqIHgsIHNpemVfdCBuLCBKU1ZhbHVlIHZhbCk7CgpKU1ZhbHVlIGpzX21hcF9uZXcoSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0KTsKCnR5cGVkZWYgdW5pb24gaW1wb3J0X2RpcmVjdGl2ZSB7CiAgc3RydWN0IHsKICAgIGNvbnN0IGNoYXIqIHBhdGg7IC8qKjwgTW9kdWxlIHBhdGggKi8KICAgIGNvbnN0IGNoYXIqIHNwZWM7IC8qKjwgSW1wb3J0IHNwZWNpZmllcihzKSAqLwogICAgY29uc3QgY2hhciogcHJvcDsgLyoqPCBpZiAhPSAwICYmICpwcm9wLCBucyArPSAiLiIgKyBwcm9wICovCiAgICBjb25zdCBjaGFyKiB2YXI7ICAvKio8IEdsb2JhbCB2YXJpYWJsZSBuYW1lICovCiAgICBjb25zdCBjaGFyKiBuczsgICAvKio8IE5hbWVzcGFjZSB2YXJpYWJsZSAqLwogIH07CiAgY29uc3QgY2hhciogYXJnc1s1XTsKfSBJbXBvcnREaXJlY3RpdmU7CgpKU1ZhbHVlIG1vZHVsZV9uYW1lKEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CmNoYXIqIG1vZHVsZV9uYW1lc3RyKEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CkpTVmFsdWUgbW9kdWxlX2Z1bmMoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKSlNWYWx1ZSBtb2R1bGVfbnMoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKSlNWYWx1ZSBtb2R1bGVfZXhwb3J0c19maW5kKEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKiwgSlNBdG9tKTsKdm9pZCBtb2R1bGVfZXhwb3J0c19nZXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqLCBCT09MIHJlbmFtZV9kZWZhdWx0LCBKU1ZhbHVlQ29uc3QgZXhwb3J0cyk7CkpTVmFsdWUgbW9kdWxlX2V4cG9ydHMoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKSlNWYWx1ZSBtb2R1bGVfdmFsdWUoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKSlNWYWx1ZSBtb2R1bGVfZW50cnkoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqKTsKSlNWYWx1ZSBtb2R1bGVfb2JqZWN0KEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKik7CgpzdHJ1Y3QgbGlzdF9oZWFkKiBqc19tb2R1bGVzX2xpc3QoSlNDb250ZXh0Kik7CkpTVmFsdWUganNfbW9kdWxlc19hcnJheShKU0NvbnRleHQqLCBKU1ZhbHVlIHRoaXNfdmFsLCBpbnQgbWFnaWMpOwpKU1ZhbHVlIGpzX21vZHVsZXNfZW50cmllcyhKU0NvbnRleHQqLCBKU1ZhbHVlIHRoaXNfdmFsLCBpbnQgbWFnaWMpOwpKU1ZhbHVlIGpzX21vZHVsZXNfbWFwKEpTQ29udGV4dCosIEpTVmFsdWUgdGhpc192YWwsIGludCBtYWdpYyk7CkpTVmFsdWUganNfbW9kdWxlc19vYmplY3QoSlNDb250ZXh0KiwgSlNWYWx1ZSB0aGlzX3ZhbCwgaW50IG1hZ2ljKTsKCiNkZWZpbmUganNfbW9kdWxlX2ZpbmQganNfbW9kdWxlX2ZpbmRfZndkCgpKU01vZHVsZURlZioganNfbW9kdWxlX2RlZihKU0NvbnRleHQqLCBKU1ZhbHVlIHZhbHVlKTsKSlNNb2R1bGVEZWYqIGpzX21vZHVsZV9maW5kX2Z3ZChKU0NvbnRleHQqLCBjb25zdCBjaGFyKiBuYW1lKTsKSlNNb2R1bGVEZWYqIGpzX21vZHVsZV9maW5kX3JldihKU0NvbnRleHQqLCBjb25zdCBjaGFyKiBuYW1lKTsKaW50IGpzX21vZHVsZV9pbmRleG9mKEpTQ29udGV4dCosIEpTTW9kdWxlRGVmKiBkZWYpOwpKU01vZHVsZURlZioganNfbW9kdWxlX2F0KEpTQ29udGV4dCosIGludCBpbmRleCk7CgpKU1ZhbHVlIGpzX2V2YWxfbW9kdWxlKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCwgQk9PTCBsb2FkX29ubHkpOwpKU1ZhbHVlIGpzX2V2YWxfYmluYXJ5KEpTQ29udGV4dCosIGNvbnN0IHVpbnQ4X3QqLCBzaXplX3QgYnVmX2xlbiwgQk9PTCBsb2FkX29ubHkpOwpKU1ZhbHVlIGpzX2V2YWxfYnVmKEpTQ29udGV4dCosIGNvbnN0IHZvaWQqLCBpbnQgYnVmX2xlbiwgY29uc3QgY2hhciogZmlsZW5hbWUsIGludCBldmFsX2ZsYWdzKTsKaW50IGpzX2V2YWxfc3RyKEpTQ29udGV4dCosIGNvbnN0IGNoYXIqLCBjb25zdCBjaGFyKiBmaWxlLCBpbnQgZmxhZ3MpOwppbnQgX19hdHRyaWJ1dGVfXygoZm9ybWF0KHByaW50ZiwgMywgNCkpKSBqc19ldmFsX2ZtdChKU0NvbnRleHQqIGN0eCwgaW50IGZsYWdzLCBjb25zdCBjaGFyKiBmbXQsIC4uLik7CgppbnQ2NF90IGpzX3RpbWVfbXModm9pZCk7CmludCBqc19pbnRlcnJ1cHRfaGFuZGxlcihKU1J1bnRpbWUqLCB2b2lkKik7Cgp2b2lkIGpzX3RpbWVyX3VubGluayhKU1J1bnRpbWUqLCBKU09TVGltZXIqKTsKdm9pZCBqc190aW1lcl9mcmVlKEpTUnVudGltZSosIEpTT1NUaW1lciopOwoKdm9pZCBqc19jYWxsX2hhbmRsZXIoSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0KTsKCnZvaWQqIGpzX3NhYl9hbGxvYyh2b2lkKiwgc2l6ZV90KTsKdm9pZCBqc19zYWJfZnJlZSh2b2lkKiwgdm9pZCopOwp2b2lkIGpzX3NhYl9kdXAodm9pZCosIHZvaWQqKTsKCkpTV29ya2VyTWVzc2FnZVBpcGUqIGpzX25ld19tZXNzYWdlX3BpcGUodm9pZCk7CkpTV29ya2VyTWVzc2FnZVBpcGUqIGpzX2R1cF9tZXNzYWdlX3BpcGUoSlNXb3JrZXJNZXNzYWdlUGlwZSopOwoKdm9pZCBqc19mcmVlX21lc3NhZ2UoSlNXb3JrZXJNZXNzYWdlKik7CnZvaWQganNfZnJlZV9tZXNzYWdlX3BpcGUoSlNXb3JrZXJNZXNzYWdlUGlwZSopOwoKdm9pZCBqc19lcnJvcl9kdW1wKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCwgRHluQnVmKiBkYik7CmNoYXIqIGpzX2Vycm9yX3Rvc3RyaW5nKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CnZvaWQganNfZXJyb3JfcHJpbnQoSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0KTsKSlNWYWx1ZSBqc19lcnJvcl9zdGFjayhKU0NvbnRleHQqIGN0eCk7CgpKU1ZhbHVlIGpzX3Byb21pc2VfcmVzb2x2ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHByb21pc2UpOwpKU1ZhbHVlIGpzX3Byb21pc2VfdGhlbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHByb21pc2UsIEpTVmFsdWVDb25zdCBmdW5jKTsKCnN0YXRpYyBpbmxpbmUgSlNWYWx1ZQpqc19wcm9taXNlX3Jlc29sdmVfdGhlbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHByb21pc2UsIEpTVmFsdWVDb25zdCBmdW5jKSB7CiAgSlNWYWx1ZSB0bXAsIHJldDsKICB0bXAgPSBqc19wcm9taXNlX3Jlc29sdmUoY3R4LCBwcm9taXNlKTsKICByZXQgPSBqc19wcm9taXNlX3RoZW4oY3R4LCB0bXAsIGZ1bmMpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHRtcCk7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZSBqc19wcm9taXNlX3dyYXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CkpTVmFsdWUganNfcHJvbWlzZV9hZG9wdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKTsKCmNoYXIqIGpzX2pzb25fc3RyaW5naWZ5KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpOwoKQk9PTCBqc19pc19pZGVudGlmaWVyX2xlbihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuKTsKQk9PTCBqc19pc19pZGVudGlmaWVyX2F0b20oSlNDb250ZXh0KiBjdHgsIEpTQXRvbSBhdG9tKTsKCnN0YXRpYyBpbmxpbmUgQk9PTApqc19pc19pZGVudGlmaWVyKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBzdHIpIHsKICByZXR1cm4ganNfaXNfaWRlbnRpZmllcl9sZW4oY3R4LCBzdHIsIHN0cmxlbihzdHIpKTsKfQoKLyoqCiAqIEB9CiAqLwoKI2VuZGlmIC8qIGRlZmluZWQoVVRJTFNfSCkgKi8KAAAAAAAAAADfdAAAAAAAAAAAAAAAAAAAAAAAAN90AAAAAAAAAAAAAAAAAAAAAAAA33QAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGxuAAAAAAAAbG4AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "Searching 513 files for \"js_eval_f\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h:\n  824  JSValue js_eval_buf(JSContext*, const void*, int, const char* filename, int eval_flags);\n  825  int js_eval_str(JSContext*, const char*, const char*, int flags);\n  826: int __attribute__((format(printf, 3, 4))) js_eval_fmt(JSContext* ctx, int flags, const char* fmt, ...);\n  827  \n  828  int64_t js_time_ms(void);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c:\n 2192  }\n 2193  \n 2194: int __attribute__((format(printf, 3, 4))) js_eval_fmt(JSContext* ctx, int flags, const char* fmt, ...) {\n 2195    int ret;\n 2196    va_list ap;\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c:\n  337    jsm_script_push(ctx, file);\n  338  \n  339:   val = js_eval_file(ctx, file, module);\n  340    jsm_script_pop(ctx);\n  341    if(JS_IsException(val)) {\n  ...\n 1006    switch(magic) {\n 1007      case 0: {\n 1008:       ret = js_eval_file(ctx, str, module);\n 1009        break;\n 1010      }\n ....\n 1505          }*/\n 1506  \n 1507:         if(!js_eval_fmt(ctx, JS_EVAL_TYPE_MODULE, \"import tmp from '%s';\\nglobalThis['%s'] = tmp;\\n\", name, name))\n 1508            continue;\n 1509  \n 1510:         if(!js_eval_fmt(ctx, JS_EVAL_TYPE_MODULE, \"import * as tmp from '%s';\\nglobalThis['%s'] = tmp;\\n\", name, name))\n 1511            continue;\n 1512  \n\n6 matches across 3 files\n\n\nSearching 513 files for \"js_eval_\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c:\n 2119      js_set_inspect_method(ctx, async_socket_proto, js_socket_inspect);\n 2120  \n 2121:     /*fdset_module = js_eval_binary(ctx, qjsm_fd_set, qjsm_fd_set_size, FALSE);\n 2122      fdset_ns = js_module_ns(ctx, fdset_module);\n 2123      fdset_ctor = js_module_func(ctx, fdset_module);\n 2124  \n 2125:     socklen_module = js_eval_binary(ctx, qjsm_socklen_t, qjsm_socklen_t_size, FALSE);\n 2126      socklen_ns = js_module_ns(ctx, socklen_module);\n 2127      socklen_ctor = js_module_func(ctx, socklen_module);*/\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h:\n  820  JSModuleDef* js_module_at(JSContext*, int index);\n  821  \n  822: JSValue js_eval_module(JSContext*, JSValue, BOOL);\n  823: JSValue js_eval_binary(JSContext*, const uint8_t*, size_t, int load_only);\n  824: JSValue js_eval_buf(JSContext*, const void*, int, const char* filename, int eval_flags);\n  825: int js_eval_str(JSContext*, const char*, const char*, int flags);\n  826: int __attribute__((format(printf, 3, 4))) js_eval_fmt(JSContext* ctx, int flags, const char* fmt, ...);\n  827  \n  828  int64_t js_time_ms(void);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c:\n 2131  \n 2132  JSValue\n 2133: js_eval_module(JSContext* ctx, JSValueConst obj, BOOL load_only) {\n 2134    JSValue ret = JS_UNDEFINED;\n 2135    int tag = JS_VALUE_GET_TAG(obj);\n ....\n 2146  \n 2147  JSValue\n 2148: js_eval_binary(JSContext* ctx, const uint8_t* buf, size_t buf_len, BOOL load_only) {\n 2149    JSValue obj = JS_ReadObject(ctx, buf, buf_len, JS_READ_OBJ_BYTECODE);\n 2150    if(JS_IsException(obj))\n 2151      return obj;\n 2152:   // printf(\"js_eval_binary obj=%s\\n\", js_value_typestr(ctx, obj));\n 2153    if(!load_only) {\n 2154:     JSValue tmp = js_eval_module(ctx, obj, load_only);\n 2155      int tag = JS_VALUE_GET_TAG(tmp);\n 2156:     // printf(\"js_eval_binary tmp=%s\\n\", js_value_typestr(ctx, tmp));\n 2157      if(!JS_IsException(tmp) && !JS_IsUndefined(tmp))\n 2158        if(tag >= JS_TAG_FIRST && tag <= JS_TAG_FLOAT64)\n ....\n 2163  \n 2164  JSValue\n 2165: js_eval_buf(JSContext* ctx, const void* buf, int buf_len, const char* filename, int eval_flags) {\n 2166    JSValue val;\n 2167  \n ....\n 2182  \n 2183  int\n 2184: js_eval_str(JSContext* ctx, const char* str, const char* file, int flags) {\n 2185    int32_t ret = 0;\n 2186:   JSValue val = js_eval_buf(ctx, str, strlen(str), file, flags);\n 2187    if(JS_IsException(val))\n 2188      ret = -1;\n ....\n 2192  }\n 2193  \n 2194: int __attribute__((format(printf, 3, 4))) js_eval_fmt(JSContext* ctx, int flags, const char* fmt, ...) {\n 2195    int ret;\n 2196    va_list ap;\n ....\n 2201    va_end(ap);\n 2202    dbuf_0(&buf);\n 2203:   ret = js_eval_str(ctx, (const char*)buf.buf, \"<input>\", flags);\n 2204    dbuf_free(&buf);\n 2205    return ret;\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c:\n  337    jsm_script_push(ctx, file);\n  338  \n  339:   val = js_eval_file(ctx, file, module);\n  340    jsm_script_pop(ctx);\n  341    if(JS_IsException(val)) {\n  ...\n  441        JSValue ret = JS_EvalFunction(ctx, obj);\n  442  \n  443:       /*  obj = js_eval_binary(ctx, rec->byte_code, rec->byte_code_len, FALSE);\n  444              m = js_value_ptr(obj);\n  445              rec->initialized = TRUE;*/\n  ...\n 1006    switch(magic) {\n 1007      case 0: {\n 1008:       ret = js_eval_file(ctx, str, module);\n 1009        break;\n 1010      }\n 1011      case 1: {\n 1012:       ret = js_eval_buf(ctx, str, len, 0, module);\n 1013        break;\n 1014      }\n ....\n 1461  #ifdef CONFIG_BIGNUM\n 1462      if(load_jscalc) {\n 1463:       js_eval_binary(ctx, qjsc_qjscalc, qjsc_qjscalc_size, 0);\n 1464      }\n 1465  #endif\n ....\n 1468      {\n 1469        const char* str = \"import process from 'process';\\nglobalThis.process = process;\\n\";\n 1470:       // js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1471        dbuf_putstr(&db, str);\n 1472      }\n ....\n 1474        const char* str = \"import require from 'require';\\nglobalThis.require = require;\\n\";\n 1475       // dbuf_putstr(&db, str);\n 1476:       // js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1477      }\n 1478  \n ....\n 1482                          \"os.setTimeout;\\nglobalThis.clearTimeout = os.clearTimeout;\\n\";\n 1483        dbuf_putstr(&db, str);\n 1484:       // js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1485      }\n 1486  \n 1487      if(db.size) {\n 1488        dbuf_0(&db);\n 1489:       js_eval_str(ctx, db.buf, \"<input>\", JS_EVAL_TYPE_MODULE);\n 1490        // jsm_list_modules(ctx)\n 1491      }\n ....\n 1500          /*char s[512];\n 1501          snprintf(s, sizeof(s), \"import * as tmp from '%s';\\nglobalThis['%s'] = tmp;\\n\", name, name);\n 1502:         if(-1 == js_eval_str(ctx, s, 0, JS_EVAL_TYPE_MODULE)) {\n 1503            jsm_dump_error(ctx);\n 1504            return 1;\n 1505          }*/\n 1506  \n 1507:         if(!js_eval_fmt(ctx, JS_EVAL_TYPE_MODULE, \"import tmp from '%s';\\nglobalThis['%s'] = tmp;\\n\", name, name))\n 1508            continue;\n 1509  \n 1510:         if(!js_eval_fmt(ctx, JS_EVAL_TYPE_MODULE, \"import * as tmp from '%s';\\nglobalThis['%s'] = tmp;\\n\", name, name))\n 1511            continue;\n 1512  \n ....\n 1522  \n 1523      if(expr) {\n 1524:       if(js_eval_str(ctx, expr, \"<cmdline>\", 0) == -1)\n 1525          goto fail;\n 1526      } else if(optind >= argc) {\n ....\n 1535        }\n 1536      }\n 1537:     js_eval_str(ctx,\n 1538                  \"import { Console } from 'console';\\n\"\n 1539                  \"import { out } from 'std';\\n\"\n ....\n 1560        /* clang-format on */\n 1561  \n 1562:       js_eval_binary(ctx, qjsc_repl, qjsc_repl_size, 0);\n 1563:       js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1564      }\n 1565  \n\n33 matches across 4 files\n\n\nSearching 513 files for \" js_eval_\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c:\n 2119      js_set_inspect_method(ctx, async_socket_proto, js_socket_inspect);\n 2120  \n 2121:     /*fdset_module = js_eval_binary(ctx, qjsm_fd_set, qjsm_fd_set_size, FALSE);\n 2122      fdset_ns = js_module_ns(ctx, fdset_module);\n 2123      fdset_ctor = js_module_func(ctx, fdset_module);\n 2124  \n 2125:     socklen_module = js_eval_binary(ctx, qjsm_socklen_t, qjsm_socklen_t_size, FALSE);\n 2126      socklen_ns = js_module_ns(ctx, socklen_module);\n 2127      socklen_ctor = js_module_func(ctx, socklen_module);*/\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h:\n  820  JSModuleDef* js_module_at(JSContext*, int index);\n  821  \n  822: JSValue js_eval_module(JSContext*, JSValue, BOOL);\n  823: JSValue js_eval_binary(JSContext*, const uint8_t*, size_t, int load_only);\n  824: JSValue js_eval_buf(JSContext*, const void*, int, const char* filename, int eval_flags);\n  825: int js_eval_str(JSContext*, const char*, const char*, int flags);\n  826: int __attribute__((format(printf, 3, 4))) js_eval_fmt(JSContext* ctx, int flags, const char* fmt, ...);\n  827  \n  828  int64_t js_time_ms(void);\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c:\n 2152    // printf(\"js_eval_binary obj=%s\\n\", js_value_typestr(ctx, obj));\n 2153    if(!load_only) {\n 2154:     JSValue tmp = js_eval_module(ctx, obj, load_only);\n 2155      int tag = JS_VALUE_GET_TAG(tmp);\n 2156      // printf(\"js_eval_binary tmp=%s\\n\", js_value_typestr(ctx, tmp));\n ....\n 2184  js_eval_str(JSContext* ctx, const char* str, const char* file, int flags) {\n 2185    int32_t ret = 0;\n 2186:   JSValue val = js_eval_buf(ctx, str, strlen(str), file, flags);\n 2187    if(JS_IsException(val))\n 2188      ret = -1;\n ....\n 2192  }\n 2193  \n 2194: int __attribute__((format(printf, 3, 4))) js_eval_fmt(JSContext* ctx, int flags, const char* fmt, ...) {\n 2195    int ret;\n 2196    va_list ap;\n ....\n 2201    va_end(ap);\n 2202    dbuf_0(&buf);\n 2203:   ret = js_eval_str(ctx, (const char*)buf.buf, \"<input>\", flags);\n 2204    dbuf_free(&buf);\n 2205    return ret;\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c:\n  337    jsm_script_push(ctx, file);\n  338  \n  339:   val = js_eval_file(ctx, file, module);\n  340    jsm_script_pop(ctx);\n  341    if(JS_IsException(val)) {\n  ...\n  441        JSValue ret = JS_EvalFunction(ctx, obj);\n  442  \n  443:       /*  obj = js_eval_binary(ctx, rec->byte_code, rec->byte_code_len, FALSE);\n  444              m = js_value_ptr(obj);\n  445              rec->initialized = TRUE;*/\n  ...\n 1006    switch(magic) {\n 1007      case 0: {\n 1008:       ret = js_eval_file(ctx, str, module);\n 1009        break;\n 1010      }\n 1011      case 1: {\n 1012:       ret = js_eval_buf(ctx, str, len, 0, module);\n 1013        break;\n 1014      }\n ....\n 1461  #ifdef CONFIG_BIGNUM\n 1462      if(load_jscalc) {\n 1463:       js_eval_binary(ctx, qjsc_qjscalc, qjsc_qjscalc_size, 0);\n 1464      }\n 1465  #endif\n ....\n 1468      {\n 1469        const char* str = \"import process from 'process';\\nglobalThis.process = process;\\n\";\n 1470:       // js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1471        dbuf_putstr(&db, str);\n 1472      }\n ....\n 1474        const char* str = \"import require from 'require';\\nglobalThis.require = require;\\n\";\n 1475       // dbuf_putstr(&db, str);\n 1476:       // js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1477      }\n 1478  \n ....\n 1482                          \"os.setTimeout;\\nglobalThis.clearTimeout = os.clearTimeout;\\n\";\n 1483        dbuf_putstr(&db, str);\n 1484:       // js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1485      }\n 1486  \n 1487      if(db.size) {\n 1488        dbuf_0(&db);\n 1489:       js_eval_str(ctx, db.buf, \"<input>\", JS_EVAL_TYPE_MODULE);\n 1490        // jsm_list_modules(ctx)\n 1491      }\n ....\n 1500          /*char s[512];\n 1501          snprintf(s, sizeof(s), \"import * as tmp from '%s';\\nglobalThis['%s'] = tmp;\\n\", name, name);\n 1502:         if(-1 == js_eval_str(ctx, s, 0, JS_EVAL_TYPE_MODULE)) {\n 1503            jsm_dump_error(ctx);\n 1504            return 1;\n ....\n 1535        }\n 1536      }\n 1537:     js_eval_str(ctx,\n 1538                  \"import { Console } from 'console';\\n\"\n 1539                  \"import { out } from 'std';\\n\"\n ....\n 1560        /* clang-format on */\n 1561  \n 1562:       js_eval_binary(ctx, qjsc_repl, qjsc_repl_size, 0);\n 1563:       js_eval_str(ctx, str, 0, JS_EVAL_TYPE_MODULE);\n 1564      }\n 1565  \n\n24 matches across 4 files\n\n\nSearching 513 files for \"^JSValue js_eval_\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h:\n  820  JSModuleDef* js_module_at(JSContext*, int index);\n  821  \n  822: JSValue js_eval_module(JSContext*, JSValue, BOOL);\n  823: JSValue js_eval_binary(JSContext*, const uint8_t*, size_t, int load_only);\n  824: JSValue js_eval_buf(JSContext*, const void*, int, const char* filename, int eval_flags);\n  825  int js_eval_str(JSContext*, const char*, const char*, int flags);\n  826  int __attribute__((format(printf, 3, 4))) js_eval_fmt(JSContext* ctx, int flags, const char* fmt, ...);\n\n3 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 12435,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "src/utils.c",
			"settings":
			{
				"buffer_size": 85654,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					150,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC/fAAAAAAAAL98AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "include/buffer-utils.h",
			"settings":
			{
				"buffer_size": 9537,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvw"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libarchive",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml/write.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tree_walker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml/read.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/predicate.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/css3-selectors.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selectors.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/require.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/timers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tree-walker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_textcode.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml-write.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml-parse.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selector.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/callgrind.out.142973",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/src/tutf8e.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e/iso_8859_15.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/include/libutf.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/src/libutf.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/err",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/doc/latex/unionVector.tex",
		"/home/roman/.config/sublime-text/Packages/User/Themes/[ Argonaut ].tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/usr/include/archive.h"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"events",
			"escape",
			"xml\\.write",
			"xml\\.read",
			"^JSValue js_eval_",
			" js_eval_",
			"js_eval_",
			"js_eval_f",
			"js_eval_file",
			"load_file",
			"jsm*_eval_(buf|file)",
			"^js_eval_buf",
			"eval_buf",
			"jsm_eval_buf",
			"js_eval_buf",
			"jsm_eval_buf",
			"mmap",
			"jsm_eval_file",
			"jsm_script_load",
			"jsm_eval_script",
			"\t",
			"jsm_eval_script",
			"jsm_eval_file",
			"EventEmitter",
			"events",
			"path\\.",
			"fs\\.",
			"import",
			"jsm_builtin_init",
			"events",
			"builtin_init",
			"inspect",
			"require\\(",
			"requireModule",
			"require\\(",
			"std\\.",
			"util'",
			"debug",
			"constants\\.\\.",
			"\\.\\.constants",
			"os\\.",
			"std.loadFile",
			"std\\.",
			"fs.readFileSync",
			"std\\.",
			"stdout",
			"function puts",
			"readFileSync",
			"fs\\.read",
			"std\\.",
			"StartREPL",
			"process.release.name\\s*==\\s*'quickjs'\\s*\\?\\s*requireModule",
			"process.release.name\\s*==\\s*'quickjs'\\s*\\?\\s*require",
			"process.release.name\\s*==\\s*'quickjs'\\s*\\?\\s*require\\(",
			"process.release.name == 'quickjs'\\s*\\?\\s*require\\(",
			"\\.so'",
			"process.release.name == 'quickjs' \\? require\\(",
			"glob",
			"glob\\",
			"glob",
			"getClassName",
			"isFunction\\(([^)]*)\\)",
			"getClassName",
			"js_pointer_new",
			"Util\\.",
			"Util\\.inspect",
			"Util\\.",
			"Pointer",
			"xml",
			"deep",
			"Pointer",
			"POinter",
			"xml\\.write",
			"xml\\.read",
			"misc'",
			"misc",
			"inspect\\(",
			"inspect",
			"console",
			"\\.inspect",
			"toString",
			"GLOB ",
			"\\.js",
			"*\\.js",
			"misc.js",
			"isObject\\(([^)]*)\\)",
			"isFunction\\(([^)]*)\\)",
			"quote",
			"memoize",
			"SCRIPT_FILENAME",
			"jsm_script_file",
			"scriptList\"",
			"jsm_script_push",
			"jsm_script_load",
			"jsm_script_push",
			"jsm_scripts",
			"Vector",
			"memoize",
			"path\\.",
			"normalize",
			"js_strdup",
			"std\\.",
			"misc\\.is(Function|Object)",
			"isFunction",
			"eval_buf",
			"return \"(.*)\"",
			"js_value",
			";\\\\n",
			"^js_eval_buf",
			"^js_eval_binary",
			"struct JSModuleDef",
			"js_inspect_print_module",
			"module_exports",
			"module_default_export",
			"mod",
			"module_default_export",
			"jsm_module_loader",
			"jsm_builtin_init",
			"TextDecoder",
			"module_name",
			"jsm_module_search",
			"jsm_module_find",
			"jsm_search_module",
			"require",
			"isObject",
			"TextDec",
			"'misc'",
			"os\\."
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"writeXML",
			"readXML",
			"fs.readFileSync",
			"process.release.name == 'quickjs' ? requireModule",
			"process.release.name == 'quickjs' ? requireModule(",
			"typeof \\1 == 'function'",
			"typeof(\\1) == 'function'",
			"inspect",
			"writeXML",
			"readXML",
			"(typeof \\1 == 'object' && \\1 != null)",
			"typeof \\1 == 'function'",
			"is\\1",
			"return TYPE_\\1",
			";\\\\n\" \"",
			"timers.",
			"",
			"\\1\\2(",
			"\\1function \\2(",
			"\\1//console.",
			"createModule",
			"static \\1\\2 {",
			"static ",
			"pnws",
			"sel = \\1;",
			"js_is_array",
			"if(debug_module_loader >= 2)",
			"INSPECT_LEVEL(opts, depth)",
			"BOOL compact =",
			"INSPECT_IS_COMPACT\\(opts, depth\\)",
			"path_skip_component(\\1, \\2, 0);",
			"-18s",
			"%-\\1s",
			"__FUNCTION__",
			".value",
			"->value",
			"\\1//printf",
			"stream",
			"_ENDIANNESS",
			"_ENDIAN",
			"be'",
			"le'",
			"'utf-",
			"-BE'",
			"'UTF-",
			"endian",
			"->endian == BIG",
			"transform_terminate",
			"transform_",
			"\\1",
			"type",
			"js_misc_duparraybuffer",
			"out.puts",
			"putline",
			"\\1: \\2,",
			"",
			"{ return",
			"\\\\\"",
			"\\1if(debug_module_loader) \\2",
			"",
			"BuiltinModule",
			"Text.store",
			"Tokens",
			"tokenModifiers",
			"xml_debug",
			"\\1",
			"xml_debug",
			"WRITABLE_GET_WRITER",
			"WRITABLE_CLOSE",
			"struct stream_reader",
			"readable_cancel",
			"READABLE_CANCEL",
			"readable_unlock",
			"writable_get_writer",
			"writable_\\1lock",
			"READABLE_",
			"writ",
			"FUNC_CLOSE",
			"js_reader_method",
			"js_writer_method",
			"js_stream_method",
			"STREAM_LOCKED",
			"->reader",
			"\"StreamReader",
			"Reader",
			"METHOD_",
			"array",
			"funcs.array",
			"js_resolve_functions",
			"js_resolvefunctions",
			"funcs[1]",
			"funcs[0]",
			"js_resolvingfunctions_free",
			"js_resolvingfunctions_ree",
			"length",
			"Chunk",
			"loc",
			"prevLength",
			"prevOffset",
			"compact(\\1)",
			"js_location_create",
			"lexer_token(",
			"token_lex(",
			"LOCATION_PROP_CHAROFFSET",
			"loc->",
			"\\1_release",
			"token",
			"ALLOC_PTR",
			"ALLOC_BLOCK(p)",
			"ALLOC_BLOCK_SIZE",
			"",
			"const char* str\\1",
			"void* p,",
			"size_t size)",
			"JSRuntime* rt,",
			"JSContext\\* ctx,",
			";",
			" &(((struct alloc_block*)p)[-1]);",
			"add_to_list",
			"",
			"DEFINES_H",
			"int",
			"log",
			"out",
			"array_",
			"[%p]",
			"pthread_self()",
			"js_token_data2(ctx,"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3269,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/Outline/outline-Dark.hidden-tmTheme",
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
							"function_name_status_row": 18,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									866,
									889
								],
								[
									972,
									998
								],
								[
									1011,
									1025
								],
								[
									1340,
									1364
								],
								[
									1640,
									1646
								],
								[
									1651,
									1686
								],
								[
									2002,
									2030
								],
								[
									2471,
									2475
								],
								[
									2480,
									2528
								],
								[
									2888,
									2898
								],
								[
									2936,
									2952
								],
								[
									3070,
									3089
								],
								[
									3184,
									3203
								],
								[
									3325,
									3341
								],
								[
									3442,
									3458
								],
								[
									3607,
									3622
								],
								[
									3788,
									3805
								],
								[
									4084,
									4105
								],
								[
									4281,
									4298
								],
								[
									4486,
									4501
								],
								[
									4523,
									4541
								],
								[
									4717,
									4744
								],
								[
									5098,
									5115
								],
								[
									5403,
									5435
								],
								[
									5841,
									5859
								],
								[
									6093,
									6114
								],
								[
									6282,
									6289
								],
								[
									6705,
									6709
								],
								[
									6777,
									6786
								],
								[
									6848,
									6862
								],
								[
									6910,
									6921
								],
								[
									7292,
									7304
								],
								[
									7388,
									7419
								],
								[
									7849,
									7866
								],
								[
									7903,
									7923
								],
								[
									8428,
									8432
								],
								[
									8474,
									8507
								],
								[
									8518,
									8521
								],
								[
									8566,
									8582
								],
								[
									8727,
									8761
								],
								[
									8772,
									8775
								],
								[
									8835,
									8841
								],
								[
									8863,
									8878
								],
								[
									9112,
									9120
								],
								[
									9125,
									9148
								],
								[
									9179,
									9198
								],
								[
									9251,
									9267
								],
								[
									9315,
									9345
								],
								[
									9578,
									9610
								],
								[
									9849,
									9892
								],
								[
									10156,
									10174
								],
								[
									10223,
									10230
								],
								[
									10737,
									10745
								],
								[
									10797,
									10807
								],
								[
									11262,
									11296
								],
								[
									11372,
									11388
								],
								[
									11437,
									11464
								],
								[
									11623,
									11655
								],
								[
									12137,
									12155
								],
								[
									12289,
									12301
								],
								[
									12339,
									12351
								],
								[
									12367,
									12377
								],
								[
									12474,
									12483
								],
								[
									12515,
									12533
								],
								[
									12632,
									12653
								],
								[
									12717,
									12735
								],
								[
									13209,
									13223
								],
								[
									13285,
									13292
								],
								[
									13310,
									13334
								],
								[
									13507,
									13526
								],
								[
									13651,
									13667
								],
								[
									13748,
									13762
								],
								[
									13803,
									13816
								],
								[
									13860,
									13875
								],
								[
									13906,
									13920
								],
								[
									14600,
									14614
								],
								[
									14767,
									14790
								],
								[
									14849,
									14872
								],
								[
									14948,
									14952
								],
								[
									15054,
									15076
								],
								[
									15316,
									15324
								],
								[
									15370,
									15388
								],
								[
									15427,
									15440
								],
								[
									15467,
									15486
								],
								[
									15525,
									15538
								],
								[
									15572,
									15590
								],
								[
									15629,
									15642
								],
								[
									15671,
									15686
								],
								[
									15744,
									15765
								],
								[
									15797,
									15810
								],
								[
									15844,
									15866
								],
								[
									15910,
									15935
								],
								[
									15967,
									15980
								],
								[
									16042,
									16057
								],
								[
									16107,
									16123
								],
								[
									16243,
									16250
								],
								[
									18535,
									18543
								],
								[
									18564,
									18580
								],
								[
									18604,
									18612
								],
								[
									18632,
									18660
								],
								[
									18711,
									18733
								],
								[
									18818,
									18838
								],
								[
									18898,
									18914
								],
								[
									19011,
									19026
								],
								[
									19063,
									19078
								],
								[
									19154,
									19164
								],
								[
									19566,
									19570
								],
								[
									19625,
									19633
								],
								[
									19723,
									19727
								],
								[
									19745,
									19768
								],
								[
									19932,
									19942
								],
								[
									20130,
									20148
								],
								[
									20198,
									20217
								],
								[
									20259,
									20269
								],
								[
									20332,
									20343
								],
								[
									20380,
									20391
								],
								[
									20462,
									20474
								],
								[
									20716,
									20720
								],
								[
									20811,
									20815
								],
								[
									20874,
									20897
								],
								[
									21152,
									21163
								],
								[
									21186,
									21200
								],
								[
									21269,
									21280
								],
								[
									21305,
									21319
								],
								[
									21434,
									21444
								],
								[
									21475,
									21483
								],
								[
									21499,
									21514
								],
								[
									21545,
									21553
								],
								[
									21569,
									21579
								],
								[
									21807,
									21822
								],
								[
									21849,
									21853
								],
								[
									21876,
									21880
								],
								[
									21899,
									21903
								],
								[
									22052,
									22059
								],
								[
									22077,
									22100
								],
								[
									22223,
									22234
								],
								[
									22267,
									22281
								],
								[
									22343,
									22356
								],
								[
									22394,
									22410
								],
								[
									22454,
									22464
								],
								[
									22488,
									22496
								],
								[
									22529,
									22544
								],
								[
									22568,
									22576
								],
								[
									22740,
									22756
								],
								[
									22787,
									22794
								],
								[
									22817,
									22821
								],
								[
									22840,
									22847
								],
								[
									23008,
									23017
								],
								[
									23022,
									23055
								],
								[
									23145,
									23156
								],
								[
									23188,
									23202
								],
								[
									23271,
									23284
								],
								[
									23313,
									23329
								],
								[
									23373,
									23385
								],
								[
									23412,
									23420
								],
								[
									23443,
									23454
								],
								[
									23481,
									23489
								],
								[
									23515,
									23526
								],
								[
									23553,
									23561
								],
								[
									23584,
									23599
								],
								[
									23626,
									23634
								],
								[
									23671,
									23685
								],
								[
									23705,
									23718
								],
								[
									23866,
									23883
								],
								[
									23903,
									23916
								],
								[
									24068,
									24088
								],
								[
									24108,
									24121
								],
								[
									24255,
									24270
								],
								[
									24297,
									24324
								],
								[
									24344,
									24357
								],
								[
									24580,
									24589
								],
								[
									24655,
									24664
								],
								[
									24675,
									24693
								],
								[
									24715,
									24777
								],
								[
									24846,
									24878
								],
								[
									24974,
									24996
								],
								[
									25054,
									25097
								],
								[
									25343,
									25368
								],
								[
									25415,
									25445
								],
								[
									25463,
									25481
								],
								[
									26570,
									26605
								],
								[
									26728,
									26744
								],
								[
									26773,
									26794
								]
							],
							"symlist":
							[
								"  keyOf = (obj, value) =>",
								"  applyPath = (path, obj) =>",
								"(acc, part) =>",
								"  checkNode(node)",
								"Parser",
								"  parseFromString(str, file, ...rest)",
								"GetNode(obj, owner)",
								"Node",
								"  constructor(obj, parent, proto = Node.prototype)",
								"  get path()",
								"  get parentNode()",
								"  get parentElement()",
								"  get ownerDocument()",
								"  get childNodes()",
								"  get firstChild()",
								"  get lastChild()",
								"  get nextSibling()",
								"  get previousSibling()",
								"  appendChild(node)",
								"\t() =>",
								"\tvalue =>",
								"  insertBefore(node, refNode)",
								"  removeChild(node)",
								"  replaceChild(newChild, oldChild)",
								"  querySelector(str)",
								"  querySelectorAll(str)",
								"  path =>",
								"Node",
								"  raw(node)",
								"  children(node)",
								"  owner(node)",
								"  parent(node)",
								"  hier(node, pred = node => true)",
								"({ nodeType }) =>",
								"  path(arg, path = [])",
								"Node",
								"MakeCache(ctor, store = ",
								"())",
								"\t(k, ...args) =>",
								"MakeCache2(ctor, store = ",
								"())",
								"  key =>",
								"\t(id, owner) =>",
								"NodeList",
								"  constructor(obj, owner)",
								"  isElement = prop =>",
								"  isList = prop =>",
								"  wrapElement = (value, prop) =>",
								"  get: (target, prop, receiver) =>",
								"  getOwnPropertyDescriptor: (target, prop) =>",
								"  ownKeys: target =>",
								"  prop =>",
								"NodeList",
								"  get path()",
								"NamedNodeMap(obj, owner)",
								"  isAttr = prop =>",
								"  wrapAttr = (value, prop) =>",
								"  get: (target, prop, receiver) =>",
								"  ownKeys: target =>",
								"NamedNodeMap",
								"NamedNodeMap",
								"  get path()",
								"  item(key)",
								"  setNamedItem(attr)",
								"  removeNamedItem(name)",
								"  getNamedItem(name)",
								"(acc, prop) =>",
								"Element",
								"  constructor(obj, parent)",
								"  get parentElement()",
								"  get attributes()",
								"  set tagName(v)",
								"  get tagName()",
								"  set nodeName(v)",
								"  get nodeName()",
								"  get children()",
								"  get childElementCount()",
								"  get firstElementChild()",
								"  n =>",
								"  get lastElementChild()",
								"  get id()",
								"  getAttribute(name)",
								"  attributes =>",
								"  getAttributeNames()",
								"  attributes =>",
								"  hasAttribute(name)",
								"  attributes =>",
								"  hasAttributes()",
								"  removeAttribute(name)",
								"  attributes =>",
								"  getAttributeNode(name)",
								"  setAttribute(name, value)",
								"  attributes =>",
								"(obj, owner) =>",
								"  attributes(elem)",
								"Element",
								"Document",
								"  constructor(obj)",
								"Document",
								"  createAttribute(name, value)",
								"  createElement(tagName)",
								"  createTextNode(text)",
								"  pred = (n, k) =>",
								"\t(n, k) =>",
								"\t(n, p) =>",
								"  get body()",
								"  c =>",
								"Document",
								"Attr",
								"  constructor(raw, owner)",
								"  get path()",
								"  get ownerElement()",
								"  get ownerDocument()",
								"  get name()",
								"  set name(v)",
								"  get value()",
								"  set value(v)",
								"Attr",
								"Text",
								"  constructor(key, owner)",
								"  get = () =>",
								"  set = value =>",
								"  get = () =>",
								"  set = value =>",
								"  get data()",
								"  value =>",
								"  get nodeValue()",
								"  value =>",
								"  toString()",
								"(key, owner) =>",
								"Text",
								"Node",
								"Text",
								"Comment",
								"  constructor(raw, owner)",
								"  get = () =>",
								"  set = value =>",
								"\t() =>",
								"\tvalue =>",
								"  get data()",
								"  value =>",
								"  get nodeValue()",
								"  value =>",
								"(node, owner) =>",
								"Comment",
								"Node",
								"Comment",
								"TokenList",
								"  constructor(owner, key = 'class')",
								"  get = () =>",
								"  set = value =>",
								"\t() =>",
								"\tvalue =>",
								"  get length()",
								"  value =>",
								"  get value()",
								"  value =>",
								"  item(index)",
								"  value =>",
								"  contains(token)",
								"  value =>",
								"  add(...tokens)",
								"(arr, set) =>",
								"  remove(...tokens)",
								"(arr, set) =>",
								"  toggle(token, force)",
								"(arr, set) =>",
								"  supports(token)",
								"  replace(oldToken, newToken)",
								"(arr, set) =>",
								"TokenList",
								"TokenList",
								"\t(container, i) =>",
								"Membrane(instance, obj, proto, wrapProp, wrapElement)",
								"  get: (target, prop, receiver) =>",
								"  has: (target, prop) =>",
								"  getOwnPropertyDescriptor: (target, prop) =>",
								"  getPrototypeOf: target =>",
								"  setPrototypeOf: (target, p) =>",
								"  ownKeys: target =>",
								"Factory(raw, owner, ctor)",
								"  isArray = arg =>",
								"  isAttributes = arg =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648031288.12,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "src/qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 43314,
						"regions":
						{
						},
						"selection":
						[
							[
								39233,
								39226
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1468,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648056638.74,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								7,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 36116.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tests/test_xml.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3165,
						"regions":
						{
						},
						"selection":
						[
							[
								191,
								191
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 5,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648031788.92,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "tests/test_dom.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4757,
						"regions":
						{
						},
						"selection":
						[
							[
								463,
								522
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 7,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648056749.54,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "tests/test_css3_selectors.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1426,
						"regions":
						{
						},
						"selection":
						[
							[
								371,
								371
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 6,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648056794.67,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/xpath.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4672,
						"regions":
						{
							"col_DD0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										1393,
										1403
									]
								],
								"scope": "col_DD0000FF"
							},
							"col_DD0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD0000FF_circle.png",
								"regions":
								[
									[
										1386,
										1386
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								28,
								28
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648055573.29,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/pointer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1767,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648055573.47,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34945,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										19610,
										19614
									],
									[
										19664,
										19668
									],
									[
										20155,
										20159
									],
									[
										22345,
										22349
									],
									[
										22543,
										22547
									],
									[
										22774,
										22778
									],
									[
										23834,
										23838
									],
									[
										23947,
										23951
									],
									[
										24145,
										24149
									],
									[
										24229,
										24233
									],
									[
										24338,
										24342
									],
									[
										24565,
										24569
									],
									[
										24627,
										24631
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										19595,
										19595
									],
									[
										19619,
										19619
									],
									[
										20149,
										20149
									],
									[
										22319,
										22319
									],
									[
										22505,
										22505
									],
									[
										22743,
										22743
									],
									[
										23822,
										23822
									],
									[
										23937,
										23937
									],
									[
										24135,
										24135
									],
									[
										24186,
										24186
									],
									[
										24299,
										24299
									],
									[
										24539,
										24539
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										19603,
										19608
									],
									[
										19655,
										19660
									],
									[
										20108,
										20113
									],
									[
										22338,
										22343
									],
									[
										22524,
										22529
									],
									[
										22533,
										22538
									],
									[
										22767,
										22772
									],
									[
										23815,
										23820
									],
									[
										23924,
										23929
									],
									[
										24094,
										24099
									],
									[
										24222,
										24227
									],
									[
										24364,
										24369
									],
									[
										24558,
										24563
									],
									[
										24620,
										24625
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										19595,
										19595
									],
									[
										19619,
										19619
									],
									[
										20102,
										20102
									],
									[
										22319,
										22319
									],
									[
										22505,
										22505
									],
									[
										22743,
										22743
									],
									[
										23803,
										23803
									],
									[
										23914,
										23914
									],
									[
										24084,
										24084
									],
									[
										24186,
										24186
									],
									[
										24299,
										24299
									],
									[
										24539,
										24539
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20202,
										20206
									]
								],
								"scope": "col_00FFFFFF"
							},
							"col_00FFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFFF_circle.png",
								"regions":
								[
									[
										20196,
										20196
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20064,
										20069
									],
									[
										21022,
										21027
									],
									[
										22444,
										22449
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										20058,
										20058
									],
									[
										21004,
										21004
									],
									[
										22433,
										22433
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21031,
										21035
									],
									[
										21041,
										21045
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										21004,
										21004
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										19598,
										19601
									],
									[
										19648,
										19651
									],
									[
										20087,
										20090
									],
									[
										22333,
										22336
									],
									[
										22516,
										22519
									],
									[
										22564,
										22567
									],
									[
										22624,
										22627
									],
									[
										22704,
										22707
									],
									[
										22762,
										22765
									],
									[
										23798,
										23801
									],
									[
										23877,
										23880
									],
									[
										23932,
										23935
									],
									[
										23954,
										23957
									],
									[
										24049,
										24052
									],
									[
										24217,
										24220
									],
									[
										24390,
										24393
									],
									[
										24553,
										24556
									],
									[
										24615,
										24618
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										19595,
										19595
									],
									[
										19619,
										19619
									],
									[
										20081,
										20081
									],
									[
										22319,
										22319
									],
									[
										22505,
										22505
									],
									[
										22551,
										22551
									],
									[
										22611,
										22611
									],
									[
										22674,
										22674
									],
									[
										22743,
										22743
									],
									[
										23786,
										23786
									],
									[
										23867,
										23867
									],
									[
										23914,
										23914
									],
									[
										23937,
										23937
									],
									[
										24039,
										24039
									],
									[
										24186,
										24186
									],
									[
										24299,
										24299
									],
									[
										24539,
										24539
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20177,
										20184
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										20171,
										20171
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20131,
										20137
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										20125,
										20125
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20224,
										20229
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										20218,
										20218
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								1861,
								1861
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 37,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648055437.86,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 825.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/events.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3229,
						"regions":
						{
						},
						"selection":
						[
							[
								3229,
								3229
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 111,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648055293.37,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1959.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "lib/dom.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 27011,
						"regions":
						{
							"col_0000DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20661,
										20671
									]
								],
								"scope": "col_0000DDFF"
							},
							"col_0000DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000DDFF_circle.png",
								"regions":
								[
									[
										20632,
										20632
									]
								],
								"scope": "col_gutter"
							},
							"col_00DDDDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										13085,
										13095
									]
								],
								"scope": "col_00DDDDFF"
							},
							"col_00DDDDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00DDDDFF_circle.png",
								"regions":
								[
									[
										13050,
										13050
									]
								],
								"scope": "col_gutter"
							},
							"col_7070FCFF":
							{
								"flags": 16,
								"regions":
								[
									[
										25775,
										25797
									],
									[
										26180,
										26202
									]
								],
								"scope": "col_7070FCFF"
							},
							"col_7070FCFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7070FCFF_circle.png",
								"regions":
								[
									[
										25758,
										25758
									],
									[
										26161,
										26161
									]
								],
								"scope": "col_gutter"
							},
							"col_B800EAFF":
							{
								"flags": 16,
								"regions":
								[
									[
										22670,
										22690
									]
								],
								"scope": "col_B800EAFF"
							},
							"col_B800EAFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_B800EAFF_circle.png",
								"regions":
								[
									[
										22650,
										22650
									]
								],
								"scope": "col_gutter"
							},
							"col_DD0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										6362,
										6372
									],
									[
										19420,
										19430
									],
									[
										21681,
										21691
									]
								],
								"scope": "col_DD0000FF"
							},
							"col_DD0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD0000FF_circle.png",
								"regions":
								[
									[
										6350,
										6350
									],
									[
										19408,
										19408
									],
									[
										21669,
										21669
									]
								],
								"scope": "col_gutter"
							},
							"col_DD00DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										13063,
										13073
									],
									[
										20644,
										20654
									]
								],
								"scope": "col_DD00DDFF"
							},
							"col_DD00DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD00DDFF_circle.png",
								"regions":
								[
									[
										13050,
										13050
									],
									[
										20632,
										20632
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								4091,
								4093
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 151,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648056798.43,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 966.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/fs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15517,
						"regions":
						{
						},
						"selection":
						[
							[
								226,
								226
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 4,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648055293.13,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "lib/css3-selectors.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1162,
						"regions":
						{
						},
						"selection":
						[
							[
								348,
								348
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 11,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648055166.89,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 75.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/deep.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9667,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648055159.47,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "include/utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29919,
						"regions":
						{
						},
						"selection":
						[
							[
								28268,
								28268
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 827,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648031650.95,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20208.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12435,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										345,
										354
									],
									[
										577,
										586
									],
									[
										801,
										810
									],
									[
										970,
										979
									],
									[
										1087,
										1096
									],
									[
										1244,
										1253
									],
									[
										1657,
										1665
									],
									[
										1866,
										1874
									],
									[
										2202,
										2210
									],
									[
										2260,
										2268
									],
									[
										2342,
										2350
									],
									[
										2434,
										2442
									],
									[
										2545,
										2553
									],
									[
										2741,
										2749
									],
									[
										2923,
										2931
									],
									[
										3163,
										3171
									],
									[
										3269,
										3277
									],
									[
										3372,
										3380
									],
									[
										3585,
										3593
									],
									[
										3745,
										3753
									],
									[
										3870,
										3878
									],
									[
										4045,
										4053
									],
									[
										4212,
										4220
									],
									[
										4439,
										4447
									],
									[
										4628,
										4636
									],
									[
										4851,
										4859
									],
									[
										4956,
										4964
									],
									[
										5104,
										5112
									],
									[
										5321,
										5329
									],
									[
										5575,
										5583
									],
									[
										5796,
										5804
									],
									[
										5928,
										5936
									],
									[
										6205,
										6213
									],
									[
										6363,
										6371
									],
									[
										6520,
										6528
									],
									[
										6715,
										6723
									],
									[
										6871,
										6879
									],
									[
										7066,
										7074
									],
									[
										7130,
										7138
									],
									[
										7469,
										7478
									],
									[
										7678,
										7687
									],
									[
										8014,
										8023
									],
									[
										8072,
										8081
									],
									[
										8154,
										8163
									],
									[
										8246,
										8255
									],
									[
										8357,
										8366
									],
									[
										8649,
										8658
									],
									[
										8945,
										8954
									],
									[
										9120,
										9129
									],
									[
										9287,
										9296
									],
									[
										9514,
										9523
									],
									[
										9703,
										9712
									],
									[
										9926,
										9935
									],
									[
										10031,
										10040
									],
									[
										10179,
										10188
									],
									[
										10396,
										10405
									],
									[
										10650,
										10659
									],
									[
										10871,
										10880
									],
									[
										11003,
										11012
									],
									[
										11280,
										11289
									],
									[
										11437,
										11446
									],
									[
										11632,
										11641
									],
									[
										11696,
										11705
									],
									[
										12001,
										12017
									],
									[
										12059,
										12075
									],
									[
										12141,
										12157
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								12151,
								12151
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 330,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1648031653.75,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 8900.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 85654,
						"regions":
						{
						},
						"selection":
						[
							[
								57135,
								57135
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2192,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648031651.65,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 54362.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "include/buffer-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9537,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1648031652.97,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 675.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.703749060074,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139621680902448)":
	{
		"height": 0.0
	},
	"output.Protocol(139700989780224)":
	{
		"height": 0.0
	},
	"output.Protocol(139713493134064)":
	{
		"height": 0.0
	},
	"output.Protocol(139717986633232)":
	{
		"height": 0.0
	},
	"output.Protocol(139737089962816)":
	{
		"height": 0.0
	},
	"output.Protocol(139742375937312)":
	{
		"height": 0.0
	},
	"output.Protocol(139743392563408)":
	{
		"height": 0.0
	},
	"output.Protocol(139869175351088)":
	{
		"height": 0.0
	},
	"output.Protocol(140020109919472)":
	{
		"height": 0.0
	},
	"output.Protocol(140057995247920)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752673856)":
	{
		"height": 0.0
	},
	"output.Protocol(140156677514432)":
	{
		"height": 0.0
	},
	"output.Protocol(140190208797904)":
	{
		"height": 0.0
	},
	"output.Protocol(140274144834032)":
	{
		"height": 0.0
	},
	"output.Protocol(140329701419328)":
	{
		"height": 0.0
	},
	"output.Protocol(140434608857040)":
	{
		"height": 0.0
	},
	"output.Protocol(140444770579072)":
	{
		"height": 0.0
	},
	"output.Protocol(140481508459424)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873537696)":
	{
		"height": 0.0
	},
	"output.Protocol(140517145188336)":
	{
		"height": 0.0
	},
	"output.Protocol(140557325510688)":
	{
		"height": 0.0
	},
	"output.Protocol(140569677099648)":
	{
		"height": 0.0
	},
	"output.Protocol(140585353818944)":
	{
		"height": 0.0
	},
	"output.Protocol(140589364043584)":
	{
		"height": 0.0
	},
	"output.Protocol(140603239164464)":
	{
		"height": 0.0
	},
	"output.Protocol(140614610715648)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"test_css",
				"tests/test_css3_selectors.js"
			],
			[
				"events.j",
				"lib/events.js"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"resolve-import",
				"resolve-imports.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"require.js",
				"lib/require.js"
			],
			[
				"test_do",
				"tests/test_dom.js"
			],
			[
				"css3-se",
				"lib/css3-selectors.js"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"console.",
				"lib/console.js"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"test_dom.js",
				"tests/test_dom.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"write.js",
				"lib/xml/write.js"
			],
			[
				"css-",
				"lib/css3-selectors.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"path.h",
				"include/path.h"
			],
			[
				"location.h",
				"include/location.h"
			],
			[
				"l",
				"quickjs-lexer.c"
			],
			[
				"path.c",
				"src/path.c"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"js-u",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"streams.js",
				"tests/test_streams.js"
			],
			[
				"buffer",
				"src/buffer-utils.c"
			],
			[
				"test_te",
				"tests/test_textcode.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"extract-str",
				"extract-structs.js"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"token.c",
				"token.c"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"jsutil",
				"js-utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"quickjs-location",
				"quickjs-location.h"
			],
			[
				"quickjs-loca",
				"quickjs-location.c"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"char-ut",
				"char-utils.h"
			],
			[
				"buff",
				"buffer-utils.h"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"location",
				"location.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"CMakeLi",
				"CMakeLists.txt"
			],
			[
				"defines.h",
				"defines.h"
			],
			[
				"queue.c",
				"queue.c"
			],
			[
				"extend",
				"lib/extendArray.js"
			],
			[
				"quickjs-sockets",
				"quickjs-sockets.c"
			],
			[
				"lexer",
				"quickjs-lexer.c"
			],
			[
				"buffer-ut",
				"buffer-utils.h"
			],
			[
				"ringbuf",
				"ringbuffer.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"quickjs-lexer.c",
				"quickjs-lexer.c"
			],
			[
				"quickjs-loc",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"xpath.j",
				"lib/xpath.js"
			],
			[
				"predicate.h",
				"predicate.h"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"list.h",
				"~/Projects/plot-cv/quickjs/list.h"
			],
			[
				"queue",
				"queue.c"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"test_wa",
				"tests/test_watch.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
