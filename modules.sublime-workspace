{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Ret",
				"ReturnValuePathFunction"
			],
			[
				"cFunc",
				"cFuncListObjects"
			],
			[
				"isC",
				"isCFuncCall"
			],
			[
				"En",
				"EntityNames"
			],
			[
				"parseFrom",
				"parseFromString"
			],
			[
				"pseu",
				"pseudoClassArg"
			],
			[
				"pseudoC",
				"pseudoClassName"
			],
			[
				"Key",
				"KeyboardEvent"
			],
			[
				"getOp",
				"getOptionEntries"
			],
			[
				"setProp",
				"setPropertyValue"
			],
			[
				"parse",
				"parseSelectors"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyStr"
			],
			[
				"jsm_buil",
				"jsm_builtin_init"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_Set",
				"JS_SetProperty"
			],
			[
				"JS_New",
				"JS_NewObject"
			],
			[
				"ide",
				"importIdentifiers"
			],
			[
				"iden",
				"importIdentifiers"
			],
			[
				"import",
				"importIdentifiers"
			],
			[
				"ident",
				"identifierSets"
			],
			[
				"path_is",
				"path_is_absolute"
			],
			[
				"js_is_",
				"js_is_null_or_undefined"
			],
			[
				"path_skip_se",
				"path_skip_separator_s"
			],
			[
				"WRITABLE_METHO",
				"WRITABLE_METHOD_CLOSE"
			],
			[
				"list_fo",
				"list_for_each_prev"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  Ⓜ  QUICKJS_H … — macro object\n—Ⓜ– js_likely ( ) … — macro function\n—Ⓜ– js_unlikely ( ) … — macro function\n  Ⓜ  js_force_inline … — macro object\n—Ⓜ– __js_printf_like ( ) … — macro function\n—Ⓜ– js_likely ( ) … — macro function\n—Ⓜ– js_unlikely ( ) … — macro function\n  Ⓜ  js_force_inline … — macro object\n—Ⓜ– __js_printf_like ( ) … — macro function\n  Ⓜ  JS_BOOL … — macro object\n  Ⓣ  JSRuntime ; — typedef\n  Ⓣ  JSContext ; — typedef\n  Ⓣ  JSObject ; — typedef\n  Ⓣ  JSClass ; — typedef\n  Ⓣ  JSClassID ; — typedef\n  Ⓣ  JSAtom ; — typedef\n  Ⓜ  JS_PTR64 … — macro object\n—Ⓜ– JS_PTR64_DEF ( ) … — macro function\n—Ⓜ– JS_PTR64_DEF ( ) … — macro function\n  Ⓜ  JS_NAN_BOXING … — macro object\n  Ⓣ  JSRefCountHeader ; — typedef\n  Ⓜ  JS_FLOAT64_NAN … — macro object\n  Ⓣ  JSValue ; — typedef\n  Ⓣ  JSValueConst ; — typedef\n—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function\n—Ⓜ– JS_MKVAL ( ) … — macro function\n—Ⓜ– JS_MKPTR ( ) … — macro function\n—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function\n  Ⓜ  JS_NAN … — macro object\n—Ⓕ– __JS_NewFloat64 ( ) { … } — function\n—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function\n  Ⓣ  JSValue ; — typedef\n  Ⓜ  JSValueConst … — macro object\n—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function\n—Ⓜ– JS_MKVAL ( ) … — macro function\n—Ⓜ– JS_MKPTR ( ) … — macro function\n  Ⓜ  JS_FLOAT64_TAG_ADDEND … — macro object\n—Ⓕ– JS_VALUE_GET_FLOAT64 ( ) { … } — function\n  Ⓜ  JS_NAN … — macro object\n—Ⓕ– __JS_NewFloat64 ( ) { … } — function\n—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function\n—Ⓕ– JS_VALUE_GET_NORM_TAG ( ) { … } — function\n—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function\n  Ⓣ  JSValueUnion ; — typedef\n  Ⓣ  JSValue ; — typedef\n  Ⓜ  JSValueConst … — macro object\n—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function\n—Ⓜ– JS_MKVAL ( ) … — macro function\n—Ⓜ– JS_MKPTR ( ) … — macro function\n—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function\n  Ⓜ  JS_NAN … — macro object\n—Ⓕ– __JS_NewFloat64 ( ) { … } — function\n—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function\n—Ⓜ– JS_VALUE_IS_BOTH_INT ( ) … — macro function\n—Ⓜ– JS_VALUE_IS_BOTH_FLOAT ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_OBJ ( ) … — macro function\n—Ⓜ– JS_VALUE_GET_STRING ( ) … — macro function\n—Ⓜ– JS_VALUE_HAS_REF_COUNT ( ) … — macro function\n  Ⓜ  JS_NULL … — macro object\n  Ⓜ  JS_UNDEFINED … — macro object\n  Ⓜ  JS_FALSE … — macro object\n  Ⓜ  JS_TRUE … — macro object\n  Ⓜ  JS_EXCEPTION … — macro object\n  Ⓜ  JS_UNINITIALIZED … — macro object\n  Ⓜ  JS_PROP_CONFIGURABLE … — macro object\n  Ⓜ  JS_PROP_WRITABLE … — macro object\n  Ⓜ  JS_PROP_ENUMERABLE … — macro object\n  Ⓜ  JS_PROP_C_W_E … — macro object\n  Ⓜ  JS_PROP_LENGTH … — macro object\n  Ⓜ  JS_PROP_TMASK … — macro object\n  Ⓜ  JS_PROP_NORMAL … — macro object\n  Ⓜ  JS_PROP_GETSET … — macro object\n  Ⓜ  JS_PROP_VARREF … — macro object\n  Ⓜ  JS_PROP_AUTOINIT … — macro object\n  Ⓜ  JS_PROP_HAS_SHIFT … — macro object\n  Ⓜ  JS_PROP_HAS_CONFIGURABLE … — macro object\n  Ⓜ  JS_PROP_HAS_WRITABLE … — macro object\n  Ⓜ  JS_PROP_HAS_ENUMERABLE … — macro object\n  Ⓜ  JS_PROP_HAS_GET … — macro object\n  Ⓜ  JS_PROP_HAS_SET … — macro object\n  Ⓜ  JS_PROP_HAS_VALUE … — macro object\n  Ⓜ  JS_PROP_THROW … — macro object\n  Ⓜ  JS_PROP_THROW_STRICT … — macro object\n  Ⓜ  JS_PROP_NO_ADD … — macro object\n  Ⓜ  JS_PROP_NO_EXOTIC … — macro object\n  Ⓜ  JS_DEFAULT_STACK_SIZE … — macro object\n  Ⓜ  JS_EVAL_TYPE_GLOBAL … — macro object\n  Ⓜ  JS_EVAL_TYPE_MODULE … — macro object\n  Ⓜ  JS_EVAL_TYPE_DIRECT … — macro object\n  Ⓜ  JS_EVAL_TYPE_INDIRECT … — macro object\n  Ⓜ  JS_EVAL_TYPE_MASK … — macro object\n  Ⓜ  JS_EVAL_FLAG_STRICT … — macro object\n  Ⓜ  JS_EVAL_FLAG_STRIP … — macro object\n  Ⓜ  JS_EVAL_FLAG_COMPILE_ONLY … — macro object\n  Ⓜ  JS_EVAL_FLAG_BACKTRACE_BARRIER … — macro object\n  Ⓣ  JSMallocState ; — typedef\n  Ⓣ  JSMallocFunctions ; — typedef\n  Ⓣ  JSGCObjectHeader ; — typedef\n—Ⓕ– JS_NewRuntime ( ) { … } — function\n—Ⓕ– JS_SetRuntimeInfo ( ) { … } — function\n—Ⓕ– JS_SetMemoryLimit ( ) { … } — function\n—Ⓕ– JS_SetGCThreshold ( ) { … } — function\n—Ⓕ– JS_SetMaxStackSize ( ) { … } — function\n—Ⓕ– JS_UpdateStackTop ( ) { … } — function\n—Ⓕ– JS_NewRuntime2 ( ) { … } — function\n—Ⓕ– JS_FreeRuntime ( ) { … } — function\n—Ⓕ– JS_GetRuntimeOpaque ( ) { … } — function\n—Ⓕ– JS_SetRuntimeOpaque ( ) { … } — function\n—Ⓕ– JS_MarkValue ( ) { … } — function\n—Ⓕ– JS_RunGC ( ) { … } — function\n—Ⓕ– JS_IsLiveObject ( ) { … } — function\n—Ⓕ– JS_NewContext ( ) { … } — function\n—Ⓕ– JS_FreeContext ( ) { … } — function\n—Ⓕ– JS_DupContext ( ) { … } — function\n—Ⓕ– JS_GetContextOpaque ( ) { … } — function\n—Ⓕ– JS_SetContextOpaque ( ) { … } — function\n—Ⓕ– JS_GetRuntime ( ) { … } — function\n—Ⓕ– JS_SetClassProto ( ) { … } — function\n—Ⓕ– JS_GetClassProto ( ) { … } — function\n—Ⓕ– JS_NewContextRaw ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicBaseObjects ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicDate ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicEval ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicStringNormalize ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicRegExpCompiler ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicRegExp ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicJSON ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicProxy ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicMapSet ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicTypedArrays ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicPromise ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicBigInt ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicBigFloat ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicBigDecimal ( ) { … } — function\n—Ⓕ– JS_AddIntrinsicOperators ( ) { … } — function\n—Ⓕ– JS_EnableBignumExt ( ) { … } — function\n—Ⓕ– js_string_codePointRange ( ) { … } — function\n—Ⓕ– js_malloc_rt ( ) { … } — function\n—Ⓕ– js_free_rt ( ) { … } — function\n—Ⓕ– js_realloc_rt ( ) { … } — function\n—Ⓕ– js_malloc_usable_size_rt ( ) { … } — function\n—Ⓕ– js_mallocz_rt ( ) { … } — function\n—Ⓕ– js_malloc ( ) { … } — function\n—Ⓕ– js_free ( ) { … } — function\n—Ⓕ– js_realloc ( ) { … } — function\n—Ⓕ– js_malloc_usable_size ( ) { … } — function\n—Ⓕ– js_realloc2 ( ) { … } — function\n—Ⓕ– js_mallocz ( ) { … } — function\n—Ⓕ– js_strdup ( ) { … } — function\n—Ⓕ– js_strndup ( ) { … } — function\n  Ⓣ  JSMemoryUsage ; — typedef\n—Ⓕ– JS_ComputeMemoryUsage ( ) { … } — function\n—Ⓕ– JS_DumpMemoryUsage ( ) { … } — function\n  Ⓜ  JS_ATOM_NULL … — macro object\n—Ⓕ– JS_NewAtomLen ( ) { … } — function\n—Ⓕ– JS_NewAtom ( ) { … } — function\n—Ⓕ– JS_NewAtomUInt32 ( ) { … } — function\n—Ⓕ– JS_DupAtom ( ) { … } — function\n—Ⓕ– JS_FreeAtom ( ) { … } — function\n—Ⓕ– JS_FreeAtomRT ( ) { … } — function\n—Ⓕ– JS_AtomToValue ( ) { … } — function\n—Ⓕ– JS_AtomToString ( ) { … } — function\n—Ⓕ– JS_AtomToCString ( ) { … } — function\n—Ⓕ– JS_ValueToAtom ( ) { … } — function\n  Ⓣ  JSPropertyEnum ; — typedef\n  Ⓣ  JSPropertyDescriptor ; — typedef\n  Ⓣ  JSClassExoticMethods ; — typedef\n  Ⓜ  JS_CALL_FLAG_CONSTRUCTOR … — macro object\n  Ⓣ  JSClassDef ; — typedef\n—Ⓕ– JS_NewClassID ( ) { … } — function\n—Ⓕ– JS_GetClassID ( ) { … } — function\n—Ⓕ– JS_NewClass ( ) { … } — function\n—Ⓕ– JS_IsRegisteredClass ( ) { … } — function\n—Ⓕ– JSValue ( ) { … } — function\n—Ⓕ– JSValue ( ) { … } — function\n—Ⓕ– JSValue ( ) { … } — function\n—Ⓕ– JSValue ( ) { … } — function\n—Ⓕ– JSValue ( ) { … } — function\n—Ⓕ– JS_NewBigInt64 ( ) { … } — function\n—Ⓕ– JS_NewBigUint64 ( ) { … } — function\n—Ⓕ– JSValue ( ) { … } — function\n—Ⓕ– JS_IsNumber ( ) { … } — function\n—Ⓕ– JS_IsBigInt ( ) { … } — function\n—Ⓕ– JS_IsBigFloat ( ) { … } — function\n—Ⓕ– JS_IsBigDecimal ( ) { … } — function\n—Ⓕ– JS_IsBool ( ) { … } — function\n—Ⓕ– JS_IsNull ( ) { … } — function\n—Ⓕ– JS_IsUndefined ( ) { … } — function\n—Ⓕ– JS_IsException ( ) { … } — function\n—Ⓕ– JS_IsUninitialized ( ) { … } — function\n—Ⓕ– JS_IsString ( ) { … } — function\n—Ⓕ– JS_IsSymbol ( ) { … } — function\n—Ⓕ– JS_IsObject ( ) { … } — function\n—Ⓕ– JS_Throw ( ) { … } — function\n—Ⓕ– JS_GetException ( ) { … } — function\n—Ⓕ– JS_IsError ( ) { … } — function\n—Ⓕ– JS_ResetUncatchableError ( ) { … } — function\n—Ⓕ– JS_NewError ( ) { … } — function\n—Ⓕ– JS_NewUncatchableError ( ) { … } — function\n—Ⓕ– __js_printf_like ( ) { … } — function\n—Ⓕ– __js_printf_like ( ) { … } — function\n—Ⓕ– __js_printf_like ( ) { … } — function\n—Ⓕ– __js_printf_like ( ) { … } — function\n—Ⓕ– __js_printf_like ( ) { … } — function\n—Ⓕ– JS_ThrowOutOfMemory ( ) { … } — function\n—Ⓕ– __JS_FreeValue ( ) { … } — function\n—Ⓕ– JS_FreeValue ( ) { … } — function\n—Ⓕ– __JS_FreeValueRT ( ) { … } — function\n—Ⓕ– JS_FreeValueRT ( ) { … } — function\n—Ⓕ– JS_DupValue ( ) { … } — function\n—Ⓕ– JS_DupValueRT ( ) { … } — function\n—Ⓕ– JS_ToBool ( ) { … } — function\n—Ⓕ– JS_ToInt32 ( ) { … } — function\n—Ⓕ– JS_ToUint32 ( ) { … } — function\n—Ⓕ– JS_ToInt64 ( ) { … } — function\n—Ⓕ– JS_ToIndex ( ) { … } — function\n—Ⓕ– JS_ToFloat64 ( ) { … } — function\n—Ⓕ– JS_ToBigInt64 ( ) { … } — function\n—Ⓕ– JS_ToInt64Ext ( ) { … } — function\n—Ⓕ– JS_NewStringLen ( ) { … } — function\n—Ⓕ– JS_NewString ( ) { … } — function\n—Ⓕ– JS_NewAtomString ( ) { … } — function\n—Ⓕ– JS_ToString ( ) { … } — function\n—Ⓕ– JS_ToPropertyKey ( ) { … } — function\n—Ⓕ– JS_ToCStringLen2 ( ) { … } — function\n—Ⓕ– JS_ToCStringLen ( ) { … } — function\n—Ⓕ– JS_ToCString ( ) { … } — function\n—Ⓕ– JS_FreeCString ( ) { … } — function\n—Ⓕ– JS_NewObjectProtoClass ( ) { … } — function\n—Ⓕ– JS_NewObjectClass ( ) { … } — function\n—Ⓕ– JS_NewObjectProto ( ) { … } — function\n—Ⓕ– JS_NewObject ( ) { … } — function\n—Ⓕ– JS_IsFunction ( ) { … } — function\n—Ⓕ– JS_IsConstructor ( ) { … } — function\n—Ⓕ– JS_SetConstructorBit ( ) { … } — function\n—Ⓕ– JS_NewArray ( ) { … } — function\n—Ⓕ– JS_IsArray ( ) { … } — function\n—Ⓕ– JS_GetPropertyInternal ( ) { … } — function\n—Ⓕ– JSValue ( ) { … } — function\n—Ⓕ– JS_GetPropertyStr ( ) { … } — function\n—Ⓕ– JS_GetPropertyUint32 ( ) { … } — function\n—Ⓕ– JS_SetPropertyInternal ( ) { … } — function\n—Ⓕ– JS_SetProperty ( ) { … } — function\n—Ⓕ– JS_SetPropertyUint32 ( ) { … } — function\n—Ⓕ– JS_SetPropertyInt64 ( ) { … } — function\n—Ⓕ– JS_SetPropertyStr ( ) { … } — function\n—Ⓕ– JS_HasProperty ( ) { … } — function\n—Ⓕ– JS_IsExtensible ( ) { … } — function\n—Ⓕ– JS_PreventExtensions ( ) { … } — function\n—Ⓕ– JS_DeleteProperty ( ) { … } — function\n—Ⓕ– JS_SetPrototype ( ) { … } — function\n—Ⓕ– JS_GetPrototype ( ) { … } — function\n  Ⓜ  JS_GPN_STRING_MASK … — macro object\n  Ⓜ  JS_GPN_SYMBOL_MASK … — macro object\n  Ⓜ  JS_GPN_PRIVATE_MASK … — macro object\n  Ⓜ  JS_GPN_ENUM_ONLY … — macro object\n  Ⓜ  JS_GPN_SET_ENUM … — macro object\n—Ⓕ– JS_GetOwnPropertyNames ( ) { … } — function\n—Ⓕ– JS_GetOwnProperty ( ) { … } — function\n—Ⓕ– JS_Call ( ) { … } — function\n—Ⓕ– JS_Invoke ( ) { … } — function\n—Ⓕ– JS_CallConstructor ( ) { … } — function\n—Ⓕ– JS_CallConstructor2 ( ) { … } — function\n—Ⓕ– JS_DetectModule ( ) { … } — function\n—Ⓕ– JS_Eval ( ) { … } — function\n—Ⓕ– JS_EvalThis ( ) { … } — function\n—Ⓕ– JS_GetGlobalObject ( ) { … } — function\n—Ⓕ– JS_IsInstanceOf ( ) { … } — function\n—Ⓕ– JS_DefineProperty ( ) { … } — function\n—Ⓕ– JS_DefinePropertyValue ( ) { … } — function\n—Ⓕ– JS_DefinePropertyValueUint32 ( ) { … } — function\n—Ⓕ– JS_DefinePropertyValueStr ( ) { … } — function\n—Ⓕ– JS_DefinePropertyGetSet ( ) { … } — function\n—Ⓕ– JS_SetOpaque ( ) { … } — function\n—Ⓕ– JS_GetOpaque ( ) { … } — function\n—Ⓕ– JS_GetOpaque2 ( ) { … } — function\n—Ⓕ– JS_ParseJSON ( ) { … } — function\n  Ⓜ  JS_PARSE_JSON_EXT … — macro object\n—Ⓕ– JS_ParseJSON2 ( ) { … } — function\n—Ⓕ– JS_JSONStringify ( ) { … } — function\n—Ⓕ– JS_NewArrayBuffer ( ) { … } — function\n—Ⓕ– JS_NewArrayBufferCopy ( ) { … } — function\n—Ⓕ– JS_DetachArrayBuffer ( ) { … } — function\n—Ⓕ– JS_GetArrayBuffer ( ) { … } — function\n—Ⓕ– JS_GetTypedArrayBuffer ( ) { … } — function\n  Ⓣ  JSSharedArrayBufferFunctions ; — typedef\n—Ⓕ– JS_SetSharedArrayBufferFunctions ( ) { … } — function\n—Ⓕ– JS_NewPromiseCapability ( ) { … } — function\n—Ⓕ– JS_SetHostPromiseRejectionTracker ( ) { … } — function\n—Ⓕ– JS_SetInterruptHandler ( ) { … } — function\n—Ⓕ– JS_SetCanBlock ( ) { … } — function\n—Ⓕ– JS_SetIsHTMLDDA ( ) { … } — function\n  Ⓣ  JSModuleDef ; — typedef\n—Ⓕ– JS_SetModuleLoaderFunc ( ) { … } — function\n—Ⓕ– JS_GetImportMeta ( ) { … } — function\n—Ⓕ– JS_GetModuleName ( ) { … } — function\n—Ⓕ– JS_EnqueueJob ( ) { … } — function\n—Ⓕ– JS_IsJobPending ( ) { … } — function\n—Ⓕ– JS_ExecutePendingJob ( ) { … } — function\n  Ⓜ  JS_WRITE_OBJ_BYTECODE … — macro object\n  Ⓜ  JS_WRITE_OBJ_BSWAP … — macro object\n  Ⓜ  JS_WRITE_OBJ_SAB … — macro object\n  Ⓜ  JS_WRITE_OBJ_REFERENCE … — macro object\n—Ⓕ– JS_WriteObject ( ) { … } — function\n—Ⓕ– JS_WriteObject2 ( ) { … } — function\n  Ⓜ  JS_READ_OBJ_BYTECODE … — macro object\n  Ⓜ  JS_READ_OBJ_ROM_DATA … — macro object\n  Ⓜ  JS_READ_OBJ_SAB … — macro object\n  Ⓜ  JS_READ_OBJ_REFERENCE … — macro object\n—Ⓕ– JS_ReadObject ( ) { … } — function\n—Ⓕ– JS_EvalFunction ( ) { … } — function\n—Ⓕ– JS_ResolveModule ( ) { … } — function\n—Ⓕ– JS_GetScriptOrModuleName ( ) { … } — function\n—Ⓕ– JS_RunModule ( ) { … } — function\n  Ⓣ  JSCFunctionEnum ; — typedef\n  Ⓣ  JSCFunctionType ; — typedef\n—Ⓕ– JS_NewCFunction2 ( ) { … } — function\n—Ⓕ– JS_NewCFunctionData ( ) { … } — function\n—Ⓕ– JS_NewCClosure ( ) { … } — function\n—Ⓕ– JS_NewCFunction ( ) { … } — function\n—Ⓕ– JS_NewCFunctionMagic ( ) { … } — function\n—Ⓕ– JS_SetConstructor ( ) { … } — function\n  Ⓣ  JSCFunctionListEntry ; — typedef\n  Ⓜ  JS_DEF_CFUNC … — macro object\n  Ⓜ  JS_DEF_CGETSET … — macro object\n  Ⓜ  JS_DEF_CGETSET_MAGIC … — macro object\n  Ⓜ  JS_DEF_PROP_STRING … — macro object\n  Ⓜ  JS_DEF_PROP_INT32 … — macro object\n  Ⓜ  JS_DEF_PROP_INT64 … — macro object\n  Ⓜ  JS_DEF_PROP_DOUBLE … — macro object\n  Ⓜ  JS_DEF_PROP_UNDEFINED … — macro object\n  Ⓜ  JS_DEF_OBJECT … — macro object\n  Ⓜ  JS_DEF_ALIAS … — macro object\n—Ⓜ– JS_CFUNC_DEF ( ) … — macro function\n—Ⓜ– JS_CFUNC_MAGIC_DEF ( ) … — macro function\n—Ⓜ– JS_CFUNC_SPECIAL_DEF ( ) … — macro function\n—Ⓜ– JS_ITERATOR_NEXT_DEF ( ) … — macro function\n—Ⓜ– JS_CGETSET_DEF ( ) … — macro function\n—Ⓜ– JS_CGETSET_MAGIC_DEF ( ) … — macro function\n—Ⓜ– JS_PROP_STRING_DEF ( ) … — macro function\n—Ⓜ– JS_PROP_INT32_DEF ( ) … — macro function\n—Ⓜ– JS_PROP_INT64_DEF ( ) … — macro function\n—Ⓜ– JS_PROP_DOUBLE_DEF ( ) … — macro function\n—Ⓜ– JS_PROP_UNDEFINED_DEF ( ) … — macro function\n—Ⓜ– JS_OBJECT_DEF ( ) … — macro function\n—Ⓜ– JS_ALIAS_DEF ( ) … — macro function\n—Ⓜ– JS_ALIAS_BASE_DEF ( ) … — macro function\n—Ⓕ– JS_SetPropertyFunctionList ( ) { … } — function\n—Ⓕ– JS_NewCModule ( ) { … } — function\n—Ⓕ– JS_AddModuleExport ( ) { … } — function\n—Ⓕ– JS_AddModuleExportList ( ) { … } — function\n—Ⓕ– JS_SetModuleExport ( ) { … } — function\n—Ⓕ– JS_SetModuleExportList ( ) { … } — function",
			"settings":
			{
				"buffer_size": 14890,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					67,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
						"symkeys":
						[
							[
								360,
								377
							],
							[
								475,
								493
							],
							[
								599,
								611
							],
							[
								807,
								825
							],
							[
								1232,
								1248
							],
							[
								1402,
								1419
							],
							[
								1547,
								1554
							],
							[
								1984,
								1991
							],
							[
								2301,
								2325
							],
							[
								8584,
								8603
							],
							[
								9317,
								9338
							],
							[
								10530,
								10551
							],
							[
								11065,
								11081
							],
							[
								11494,
								11515
							],
							[
								17096,
								17113
							],
							[
								17923,
								17943
							],
							[
								22443,
								22465
							],
							[
								29581,
								29598
							],
							[
								32124,
								32138
							],
							[
								32168,
								32182
							],
							[
								32237,
								32251
							]
						],
						"symlist":
						[
							"—Ⓕ– js_predicate_data ( ) { … } — function",
							"—Ⓕ– js_predicate_data2 ( ) { … } — function",
							"predicate_id",
							"—Ⓕ– predicate_constant ( ) { … } — function",
							"—Ⓕ– predicate_duparg ( ) { … } — function",
							"—Ⓕ– predicate_nextarg ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– js_predicate_constructor ( ) { … } — function",
							"—Ⓕ– js_predicate_method ( ) { … } — function",
							"—Ⓕ– js_predicate_operator ( ) { … } — function",
							"—Ⓕ– js_predicate_tostring ( ) { … } — function",
							"—Ⓕ– js_predicate_get ( ) { … } — function",
							"—Ⓕ– js_predicate_function ( ) { … } — function",
							"—Ⓕ– js_predicate_call ( ) { … } — function",
							"—Ⓕ– js_predicate_inspect ( ) { … } — function",
							"—Ⓕ– js_predicate_finalizer ( ) { … } — function",
							"—Ⓕ– js_predicate_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							"—Ⓕ– JS_INIT_MODULE ( ) { … } — function"
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					68,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
						"symkeys":
						[
							[
								1225,
								1234
							],
							[
								1368,
								1377
							],
							[
								1416,
								1427
							],
							[
								1466,
								1481
							],
							[
								1528,
								1544
							],
							[
								1603,
								1612
							],
							[
								1628,
								1639
							],
							[
								1655,
								1670
							],
							[
								1686,
								1702
							],
							[
								1725,
								1732
							],
							[
								1763,
								1772
							],
							[
								1799,
								1808
							],
							[
								1834,
								1842
							],
							[
								1867,
								1874
							],
							[
								1893,
								1902
							],
							[
								1921,
								1927
							],
							[
								1966,
								1974
							],
							[
								1983,
								1995
							],
							[
								2015,
								2027
							],
							[
								2064,
								2077
							],
							[
								2736,
								2752
							],
							[
								2763,
								2777
							],
							[
								3126,
								3133
							],
							[
								3167,
								3179
							],
							[
								3190,
								3206
							],
							[
								3318,
								3339
							],
							[
								3371,
								3387
							],
							[
								3425,
								3442
							],
							[
								3474,
								3494
							],
							[
								3534,
								3550
							],
							[
								3593,
								3601
							],
							[
								3662,
								3670
							],
							[
								3721,
								3738
							],
							[
								3789,
								3795
							],
							[
								3847,
								3862
							],
							[
								3959,
								3974
							],
							[
								4050,
								4057
							],
							[
								4068,
								4080
							],
							[
								4098,
								4114
							],
							[
								4143,
								4159
							],
							[
								4180,
								4197
							],
							[
								4218,
								4234
							],
							[
								4268,
								4276
							],
							[
								4339,
								4347
							],
							[
								4412,
								4433
							],
							[
								4513,
								4533
							],
							[
								4677,
								4683
							],
							[
								4770,
								4785
							],
							[
								5081,
								5098
							],
							[
								5265,
								5286
							],
							[
								5449,
								5464
							],
							[
								5665,
								5677
							],
							[
								5740,
								5747
							],
							[
								5758,
								5770
							],
							[
								5788,
								5804
							],
							[
								5909,
								5930
							],
							[
								5962,
								5978
							],
							[
								6004,
								6021
							],
							[
								6047,
								6067
							],
							[
								6095,
								6111
							],
							[
								6136,
								6144
							],
							[
								6215,
								6223
							],
							[
								6289,
								6306
							],
							[
								6357,
								6363
							],
							[
								6449,
								6464
							],
							[
								6588,
								6603
							],
							[
								6831,
								6851
							],
							[
								6921,
								6943
							],
							[
								7046,
								7062
							],
							[
								7107,
								7126
							],
							[
								7171,
								7193
							],
							[
								7285,
								7292
							],
							[
								7326,
								7338
							],
							[
								7377,
								7385
							],
							[
								7419,
								7426
							],
							[
								7460,
								7472
							],
							[
								7511,
								7527
							],
							[
								7605,
								7625
							],
							[
								7643,
								7659
							],
							[
								7677,
								7695
							],
							[
								7713,
								7726
							],
							[
								7798,
								7812
							],
							[
								7862,
								7875
							],
							[
								7942,
								7956
							],
							[
								7974,
								7988
							],
							[
								8006,
								8020
							],
							[
								8062,
								8078
							],
							[
								8153,
								8170
							],
							[
								8181,
								8205
							],
							[
								8223,
								8243
							],
							[
								8261,
								8283
							],
							[
								8302,
								8317
							],
							[
								8336,
								8351
							],
							[
								8370,
								8387
							],
							[
								8497,
								8510
							],
							[
								8616,
								8636
							],
							[
								8656,
								8670
							],
							[
								8711,
								8728
							],
							[
								8767,
								8788
							],
							[
								8833,
								8852
							],
							[
								8900,
								8919
							],
							[
								8957,
								8976
							],
							[
								9029,
								9050
							],
							[
								9103,
								9120
							],
							[
								9139,
								9158
							],
							[
								9202,
								9220
							],
							[
								9421,
								9446
							],
							[
								9544,
								9574
							],
							[
								10188,
								10201
							],
							[
								10459,
								10476
							],
							[
								10511,
								10527
							],
							[
								10541,
								10554
							],
							[
								10610,
								10627
							],
							[
								10667,
								10684
							],
							[
								10720,
								10737
							],
							[
								10828,
								10846
							],
							[
								10994,
								11011
							],
							[
								11039,
								11053
							],
							[
								11103,
								11117
							],
							[
								11140,
								11159
							],
							[
								11181,
								11200
							],
							[
								11299,
								11311
							],
							[
								11375,
								11383
							],
							[
								11408,
								11423
							],
							[
								11470,
								11483
							],
							[
								11505,
								11519
							],
							[
								11546,
								11559
							],
							[
								11583,
								11602
							],
							[
								11625,
								11644
							],
							[
								11687,
								11700
							],
							[
								11723,
								11739
							],
							[
								11798,
								11814
							],
							[
								11952,
								11968
							],
							[
								11990,
								12016
							],
							[
								12039,
								12058
							],
							[
								12081,
								12100
							],
							[
								12123,
								12153
							],
							[
								12176,
								12205
							],
							[
								12228,
								12249
							],
							[
								12272,
								12291
							],
							[
								12314,
								12334
							],
							[
								12357,
								12378
							],
							[
								12401,
								12427
							],
							[
								12450,
								12472
							],
							[
								12495,
								12516
							],
							[
								12539,
								12562
							],
							[
								12585,
								12610
							],
							[
								12667,
								12691
							],
							[
								12738,
								12756
							],
							[
								12799,
								12823
							],
							[
								12901,
								12913
							],
							[
								12948,
								12958
							],
							[
								12992,
								13005
							],
							[
								13053,
								13077
							],
							[
								13117,
								13130
							],
							[
								13167,
								13176
							],
							[
								13212,
								13219
							],
							[
								13254,
								13264
							],
							[
								13313,
								13334
							],
							[
								13375,
								13386
							],
							[
								13450,
								13460
							],
							[
								13497,
								13506
							],
							[
								13547,
								13557
							],
							[
								14155,
								14168
							],
							[
								14176,
								14197
							],
							[
								14237,
								14255
							],
							[
								14334,
								14346
							],
							[
								14357,
								14370
							],
							[
								14424,
								14434
							],
							[
								14476,
								14492
							],
							[
								14529,
								14539
							],
							[
								14572,
								14583
							],
							[
								14616,
								14629
							],
							[
								14664,
								14678
							],
							[
								14717,
								14732
							],
							[
								14775,
								14791
							],
							[
								14829,
								14843
							],
							[
								14982,
								14996
							],
							[
								15105,
								15125
							],
							[
								16704,
								16724
							],
							[
								16879,
								16903
							],
							[
								17650,
								17660
							],
							[
								17673,
								17686
							],
							[
								17720,
								17733
							],
							[
								17755,
								17766
							],
							[
								17836,
								17856
							],
							[
								17939,
								17946
							],
							[
								18059,
								18066
							],
							[
								18172,
								18179
							],
							[
								18300,
								18307
							],
							[
								18511,
								18518
							],
							[
								18707,
								18721
							],
							[
								18758,
								18773
							],
							[
								18827,
								18834
							],
							[
								19226,
								19237
							],
							[
								19368,
								19379
							],
							[
								19504,
								19517
							],
							[
								19628,
								19643
							],
							[
								19756,
								19765
							],
							[
								19854,
								19863
							],
							[
								19952,
								19966
							],
							[
								20060,
								20074
							],
							[
								20181,
								20199
							],
							[
								20310,
								20321
							],
							[
								20412,
								20423
							],
							[
								20514,
								20525
							],
							[
								20602,
								20610
							],
							[
								20649,
								20664
							],
							[
								20690,
								20700
							],
							[
								20741,
								20765
							],
							[
								20791,
								20802
							],
							[
								20828,
								20850
							],
							[
								20876,
								20892
							],
							[
								20966,
								20982
							],
							[
								21054,
								21070
							],
							[
								21147,
								21163
							],
							[
								21236,
								21252
							],
							[
								21328,
								21347
							],
							[
								21371,
								21385
							],
							[
								21433,
								21445
							],
							[
								21652,
								21668
							],
							[
								21715,
								21729
							],
							[
								21954,
								21965
							],
							[
								22170,
								22183
							],
							[
								22369,
								22378
							],
							[
								22451,
								22461
							],
							[
								22530,
								22541
							],
							[
								22647,
								22657
							],
							[
								22712,
								22722
							],
							[
								22778,
								22790
							],
							[
								22891,
								22904
							],
							[
								23003,
								23016
							],
							[
								23076,
								23091
							],
							[
								23148,
								23160
							],
							[
								23203,
								23219
							],
							[
								23262,
								23273
							],
							[
								23317,
								23333
							],
							[
								23381,
								23397
							],
							[
								23489,
								23504
							],
							[
								23631,
								23643
							],
							[
								23735,
								23749
							],
							[
								23793,
								23815
							],
							[
								23881,
								23898
							],
							[
								23938,
								23955
							],
							[
								24001,
								24013
							],
							[
								24040,
								24053
							],
							[
								24097,
								24113
							],
							[
								24157,
								24177
							],
							[
								24240,
								24251
							],
							[
								24273,
								24283
							],
							[
								24328,
								24350
							],
							[
								24470,
								24477
							],
							[
								24624,
								24641
							],
							[
								24708,
								24728
							],
							[
								24788,
								24810
							],
							[
								24906,
								24920
							],
							[
								25068,
								25088
							],
							[
								25160,
								25179
							],
							[
								25250,
								25267
							],
							[
								25343,
								25357
							],
							[
								25415,
								25430
							],
							[
								25470,
								25490
							],
							[
								25530,
								25547
							],
							[
								25611,
								25626
							],
							[
								25694,
								25709
							],
							[
								25754,
								25772
							],
							[
								25790,
								25808
							],
							[
								25826,
								25845
							],
							[
								25908,
								25924
							],
							[
								25990,
								26005
							],
							[
								26020,
								26042
							],
							[
								26132,
								26149
							],
							[
								26235,
								26242
							],
							[
								26344,
								26353
							],
							[
								26445,
								26463
							],
							[
								26542,
								26561
							],
							[
								26665,
								26680
							],
							[
								26795,
								26802
							],
							[
								26969,
								26980
							],
							[
								27104,
								27122
							],
							[
								27144,
								27159
							],
							[
								27217,
								27234
							],
							[
								27368,
								27390
							],
							[
								27472,
								27500
							],
							[
								27583,
								27608
							],
							[
								27695,
								27718
							],
							[
								27820,
								27832
							],
							[
								27867,
								27879
							],
							[
								27925,
								27938
							],
							[
								28065,
								28077
							],
							[
								28158,
								28175
							],
							[
								28219,
								28232
							],
							[
								28324,
								28340
							],
							[
								28509,
								28526
							],
							[
								28654,
								28675
							],
							[
								28730,
								28750
							],
							[
								28795,
								28812
							],
							[
								28871,
								28893
							],
							[
								29183,
								29211
							],
							[
								29218,
								29250
							],
							[
								29316,
								29339
							],
							[
								29586,
								29619
							],
							[
								29809,
								29831
							],
							[
								29946,
								29960
							],
							[
								30041,
								30056
							],
							[
								30120,
								30131
							],
							[
								30540,
								30562
							],
							[
								30725,
								30741
							],
							[
								30782,
								30798
							],
							[
								30932,
								30945
							],
							[
								31023,
								31038
							],
							[
								31059,
								31079
							],
							[
								31199,
								31220
							],
							[
								31266,
								31284
							],
							[
								31331,
								31347
							],
							[
								31400,
								31422
							],
							[
								31540,
								31554
							],
							[
								31625,
								31640
							],
							[
								31754,
								31774
							],
							[
								31821,
								31841
							],
							[
								31895,
								31910
							],
							[
								31964,
								31985
							],
							[
								32033,
								32046
							],
							[
								32237,
								32252
							],
							[
								32389,
								32405
							],
							[
								32485,
								32509
							],
							[
								32596,
								32608
							],
							[
								33476,
								33491
							],
							[
								34328,
								34343
							],
							[
								34354,
								34370
							],
							[
								34480,
								34499
							],
							[
								34605,
								34619
							],
							[
								34747,
								34762
							],
							[
								34928,
								34948
							],
							[
								35144,
								35161
							],
							[
								35869,
								35889
							],
							[
								35900,
								35912
							],
							[
								35923,
								35937
							],
							[
								35948,
								35968
							],
							[
								35979,
								35997
							],
							[
								36008,
								36025
							],
							[
								36036,
								36053
							],
							[
								36064,
								36082
							],
							[
								36093,
								36114
							],
							[
								36125,
								36138
							],
							[
								36149,
								36161
							],
							[
								36222,
								36234
							],
							[
								36477,
								36495
							],
							[
								36775,
								36795
							],
							[
								37046,
								37066
							],
							[
								37346,
								37360
							],
							[
								37601,
								37621
							],
							[
								37899,
								37917
							],
							[
								38072,
								38089
							],
							[
								38241,
								38258
							],
							[
								38410,
								38428
							],
							[
								38581,
								38602
							],
							[
								38751,
								38764
							],
							[
								38930,
								38942
							],
							[
								39141,
								39158
							],
							[
								39363,
								39389
							],
							[
								39571,
								39584
							],
							[
								39711,
								39729
							],
							[
								39789,
								39811
							],
							[
								39949,
								39967
							],
							[
								40043,
								40065
							]
						],
						"symlist":
						[
							" Ⓜ  QUICKJS_H … — macro object",
							"—Ⓜ– js_likely ( ) … — macro function",
							"—Ⓜ– js_unlikely ( ) … — macro function",
							" Ⓜ  js_force_inline … — macro object",
							"—Ⓜ– __js_printf_like ( ) … — macro function",
							"—Ⓜ– js_likely ( ) … — macro function",
							"—Ⓜ– js_unlikely ( ) … — macro function",
							" Ⓜ  js_force_inline … — macro object",
							"—Ⓜ– __js_printf_like ( ) … — macro function",
							" Ⓜ  JS_BOOL … — macro object",
							" Ⓣ  JSRuntime ; — typedef",
							" Ⓣ  JSContext ; — typedef",
							" Ⓣ  JSObject ; — typedef",
							" Ⓣ  JSClass ; — typedef",
							" Ⓣ  JSClassID ; — typedef",
							" Ⓣ  JSAtom ; — typedef",
							" Ⓜ  JS_PTR64 … — macro object",
							"—Ⓜ– JS_PTR64_DEF ( ) … — macro function",
							"—Ⓜ– JS_PTR64_DEF ( ) … — macro function",
							" Ⓜ  JS_NAN_BOXING … — macro object",
							" Ⓣ  JSRefCountHeader ; — typedef",
							" Ⓜ  JS_FLOAT64_NAN … — macro object",
							" Ⓣ  JSValue ; — typedef",
							" Ⓣ  JSValueConst ; — typedef",
							"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
							"—Ⓜ– JS_MKVAL ( ) … — macro function",
							"—Ⓜ– JS_MKPTR ( ) … — macro function",
							"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
							" Ⓜ  JS_NAN … — macro object",
							"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
							"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
							" Ⓣ  JSValue ; — typedef",
							" Ⓜ  JSValueConst … — macro object",
							"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
							"—Ⓜ– JS_MKVAL ( ) … — macro function",
							"—Ⓜ– JS_MKPTR ( ) … — macro function",
							" Ⓜ  JS_FLOAT64_TAG_ADDEND … — macro object",
							"—Ⓕ– JS_VALUE_GET_FLOAT64 ( ) { … } — function",
							" Ⓜ  JS_NAN … — macro object",
							"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
							"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
							"—Ⓕ– JS_VALUE_GET_NORM_TAG ( ) { … } — function",
							"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
							" Ⓣ  JSValueUnion ; — typedef",
							" Ⓣ  JSValue ; — typedef",
							" Ⓜ  JSValueConst … — macro object",
							"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
							"—Ⓜ– JS_MKVAL ( ) … — macro function",
							"—Ⓜ– JS_MKPTR ( ) … — macro function",
							"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
							" Ⓜ  JS_NAN … — macro object",
							"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
							"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
							"—Ⓜ– JS_VALUE_IS_BOTH_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_IS_BOTH_FLOAT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_OBJ ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_STRING ( ) … — macro function",
							"—Ⓜ– JS_VALUE_HAS_REF_COUNT ( ) … — macro function",
							" Ⓜ  JS_NULL … — macro object",
							" Ⓜ  JS_UNDEFINED … — macro object",
							" Ⓜ  JS_FALSE … — macro object",
							" Ⓜ  JS_TRUE … — macro object",
							" Ⓜ  JS_EXCEPTION … — macro object",
							" Ⓜ  JS_UNINITIALIZED … — macro object",
							" Ⓜ  JS_PROP_CONFIGURABLE … — macro object",
							" Ⓜ  JS_PROP_WRITABLE … — macro object",
							" Ⓜ  JS_PROP_ENUMERABLE … — macro object",
							" Ⓜ  JS_PROP_C_W_E … — macro object",
							" Ⓜ  JS_PROP_LENGTH … — macro object",
							" Ⓜ  JS_PROP_TMASK … — macro object",
							" Ⓜ  JS_PROP_NORMAL … — macro object",
							" Ⓜ  JS_PROP_GETSET … — macro object",
							" Ⓜ  JS_PROP_VARREF … — macro object",
							" Ⓜ  JS_PROP_AUTOINIT … — macro object",
							" Ⓜ  JS_PROP_HAS_SHIFT … — macro object",
							" Ⓜ  JS_PROP_HAS_CONFIGURABLE … — macro object",
							" Ⓜ  JS_PROP_HAS_WRITABLE … — macro object",
							" Ⓜ  JS_PROP_HAS_ENUMERABLE … — macro object",
							" Ⓜ  JS_PROP_HAS_GET … — macro object",
							" Ⓜ  JS_PROP_HAS_SET … — macro object",
							" Ⓜ  JS_PROP_HAS_VALUE … — macro object",
							" Ⓜ  JS_PROP_THROW … — macro object",
							" Ⓜ  JS_PROP_THROW_STRICT … — macro object",
							" Ⓜ  JS_PROP_NO_ADD … — macro object",
							" Ⓜ  JS_PROP_NO_EXOTIC … — macro object",
							" Ⓜ  JS_DEFAULT_STACK_SIZE … — macro object",
							" Ⓜ  JS_EVAL_TYPE_GLOBAL … — macro object",
							" Ⓜ  JS_EVAL_TYPE_MODULE … — macro object",
							" Ⓜ  JS_EVAL_TYPE_DIRECT … — macro object",
							" Ⓜ  JS_EVAL_TYPE_INDIRECT … — macro object",
							" Ⓜ  JS_EVAL_TYPE_MASK … — macro object",
							" Ⓜ  JS_EVAL_FLAG_STRICT … — macro object",
							" Ⓜ  JS_EVAL_FLAG_STRIP … — macro object",
							" Ⓜ  JS_EVAL_FLAG_COMPILE_ONLY … — macro object",
							" Ⓜ  JS_EVAL_FLAG_BACKTRACE_BARRIER … — macro object",
							" Ⓣ  JSMallocState ; — typedef",
							" Ⓣ  JSMallocFunctions ; — typedef",
							" Ⓣ  JSGCObjectHeader ; — typedef",
							"—Ⓕ– JS_NewRuntime ( ) { … } — function",
							"—Ⓕ– JS_SetRuntimeInfo ( ) { … } — function",
							"—Ⓕ– JS_SetMemoryLimit ( ) { … } — function",
							"—Ⓕ– JS_SetGCThreshold ( ) { … } — function",
							"—Ⓕ– JS_SetMaxStackSize ( ) { … } — function",
							"—Ⓕ– JS_UpdateStackTop ( ) { … } — function",
							"—Ⓕ– JS_NewRuntime2 ( ) { … } — function",
							"—Ⓕ– JS_FreeRuntime ( ) { … } — function",
							"—Ⓕ– JS_GetRuntimeOpaque ( ) { … } — function",
							"—Ⓕ– JS_SetRuntimeOpaque ( ) { … } — function",
							"—Ⓕ– JS_MarkValue ( ) { … } — function",
							"—Ⓕ– JS_RunGC ( ) { … } — function",
							"—Ⓕ– JS_IsLiveObject ( ) { … } — function",
							"—Ⓕ– JS_NewContext ( ) { … } — function",
							"—Ⓕ– JS_FreeContext ( ) { … } — function",
							"—Ⓕ– JS_DupContext ( ) { … } — function",
							"—Ⓕ– JS_GetContextOpaque ( ) { … } — function",
							"—Ⓕ– JS_SetContextOpaque ( ) { … } — function",
							"—Ⓕ– JS_GetRuntime ( ) { … } — function",
							"—Ⓕ– JS_SetClassProto ( ) { … } — function",
							"—Ⓕ– JS_GetClassProto ( ) { … } — function",
							"—Ⓕ– JS_NewContextRaw ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBaseObjects ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicDate ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicEval ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicStringNormalize ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicRegExpCompiler ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicRegExp ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicJSON ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicProxy ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicMapSet ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicTypedArrays ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicPromise ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBigInt ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBigFloat ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBigDecimal ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicOperators ( ) { … } — function",
							"—Ⓕ– JS_EnableBignumExt ( ) { … } — function",
							"—Ⓕ– js_string_codePointRange ( ) { … } — function",
							"—Ⓕ– js_malloc_rt ( ) { … } — function",
							"—Ⓕ– js_free_rt ( ) { … } — function",
							"—Ⓕ– js_realloc_rt ( ) { … } — function",
							"—Ⓕ– js_malloc_usable_size_rt ( ) { … } — function",
							"—Ⓕ– js_mallocz_rt ( ) { … } — function",
							"—Ⓕ– js_malloc ( ) { … } — function",
							"—Ⓕ– js_free ( ) { … } — function",
							"—Ⓕ– js_realloc ( ) { … } — function",
							"—Ⓕ– js_malloc_usable_size ( ) { … } — function",
							"—Ⓕ– js_realloc2 ( ) { … } — function",
							"—Ⓕ– js_mallocz ( ) { … } — function",
							"—Ⓕ– js_strdup ( ) { … } — function",
							"—Ⓕ– js_strndup ( ) { … } — function",
							" Ⓣ  JSMemoryUsage ; — typedef",
							"—Ⓕ– JS_ComputeMemoryUsage ( ) { … } — function",
							"—Ⓕ– JS_DumpMemoryUsage ( ) { … } — function",
							" Ⓜ  JS_ATOM_NULL … — macro object",
							"—Ⓕ– JS_NewAtomLen ( ) { … } — function",
							"—Ⓕ– JS_NewAtom ( ) { … } — function",
							"—Ⓕ– JS_NewAtomUInt32 ( ) { … } — function",
							"—Ⓕ– JS_DupAtom ( ) { … } — function",
							"—Ⓕ– JS_FreeAtom ( ) { … } — function",
							"—Ⓕ– JS_FreeAtomRT ( ) { … } — function",
							"—Ⓕ– JS_AtomToValue ( ) { … } — function",
							"—Ⓕ– JS_AtomToString ( ) { … } — function",
							"—Ⓕ– JS_AtomToCString ( ) { … } — function",
							"—Ⓕ– JS_ValueToAtom ( ) { … } — function",
							" Ⓣ  JSPropertyEnum ; — typedef",
							" Ⓣ  JSPropertyDescriptor ; — typedef",
							" Ⓣ  JSClassExoticMethods ; — typedef",
							" Ⓜ  JS_CALL_FLAG_CONSTRUCTOR … — macro object",
							" Ⓣ  JSClassDef ; — typedef",
							"—Ⓕ– JS_NewClassID ( ) { … } — function",
							"—Ⓕ– JS_GetClassID ( ) { … } — function",
							"—Ⓕ– JS_NewClass ( ) { … } — function",
							"—Ⓕ– JS_IsRegisteredClass ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JS_NewBigInt64 ( ) { … } — function",
							"—Ⓕ– JS_NewBigUint64 ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JS_IsNumber ( ) { … } — function",
							"—Ⓕ– JS_IsBigInt ( ) { … } — function",
							"—Ⓕ– JS_IsBigFloat ( ) { … } — function",
							"—Ⓕ– JS_IsBigDecimal ( ) { … } — function",
							"—Ⓕ– JS_IsBool ( ) { … } — function",
							"—Ⓕ– JS_IsNull ( ) { … } — function",
							"—Ⓕ– JS_IsUndefined ( ) { … } — function",
							"—Ⓕ– JS_IsException ( ) { … } — function",
							"—Ⓕ– JS_IsUninitialized ( ) { … } — function",
							"—Ⓕ– JS_IsString ( ) { … } — function",
							"—Ⓕ– JS_IsSymbol ( ) { … } — function",
							"—Ⓕ– JS_IsObject ( ) { … } — function",
							"—Ⓕ– JS_Throw ( ) { … } — function",
							"—Ⓕ– JS_GetException ( ) { … } — function",
							"—Ⓕ– JS_IsError ( ) { … } — function",
							"—Ⓕ– JS_ResetUncatchableError ( ) { … } — function",
							"—Ⓕ– JS_NewError ( ) { … } — function",
							"—Ⓕ– JS_NewUncatchableError ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– JS_ThrowOutOfMemory ( ) { … } — function",
							"—Ⓕ– __JS_FreeValue ( ) { … } — function",
							"—Ⓕ– JS_FreeValue ( ) { … } — function",
							"—Ⓕ– __JS_FreeValueRT ( ) { … } — function",
							"—Ⓕ– JS_FreeValueRT ( ) { … } — function",
							"—Ⓕ– JS_DupValue ( ) { … } — function",
							"—Ⓕ– JS_DupValueRT ( ) { … } — function",
							"—Ⓕ– JS_ToBool ( ) { … } — function",
							"—Ⓕ– JS_ToInt32 ( ) { … } — function",
							"—Ⓕ– JS_ToUint32 ( ) { … } — function",
							"—Ⓕ– JS_ToInt64 ( ) { … } — function",
							"—Ⓕ– JS_ToIndex ( ) { … } — function",
							"—Ⓕ– JS_ToFloat64 ( ) { … } — function",
							"—Ⓕ– JS_ToBigInt64 ( ) { … } — function",
							"—Ⓕ– JS_ToInt64Ext ( ) { … } — function",
							"—Ⓕ– JS_NewStringLen ( ) { … } — function",
							"—Ⓕ– JS_NewString ( ) { … } — function",
							"—Ⓕ– JS_NewAtomString ( ) { … } — function",
							"—Ⓕ– JS_ToString ( ) { … } — function",
							"—Ⓕ– JS_ToPropertyKey ( ) { … } — function",
							"—Ⓕ– JS_ToCStringLen2 ( ) { … } — function",
							"—Ⓕ– JS_ToCStringLen ( ) { … } — function",
							"—Ⓕ– JS_ToCString ( ) { … } — function",
							"—Ⓕ– JS_FreeCString ( ) { … } — function",
							"—Ⓕ– JS_NewObjectProtoClass ( ) { … } — function",
							"—Ⓕ– JS_NewObjectClass ( ) { … } — function",
							"—Ⓕ– JS_NewObjectProto ( ) { … } — function",
							"—Ⓕ– JS_NewObject ( ) { … } — function",
							"—Ⓕ– JS_IsFunction ( ) { … } — function",
							"—Ⓕ– JS_IsConstructor ( ) { … } — function",
							"—Ⓕ– JS_SetConstructorBit ( ) { … } — function",
							"—Ⓕ– JS_NewArray ( ) { … } — function",
							"—Ⓕ– JS_IsArray ( ) { … } — function",
							"—Ⓕ– JS_GetPropertyInternal ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JS_GetPropertyStr ( ) { … } — function",
							"—Ⓕ– JS_GetPropertyUint32 ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyInternal ( ) { … } — function",
							"—Ⓕ– JS_SetProperty ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyUint32 ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyInt64 ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyStr ( ) { … } — function",
							"—Ⓕ– JS_HasProperty ( ) { … } — function",
							"—Ⓕ– JS_IsExtensible ( ) { … } — function",
							"—Ⓕ– JS_PreventExtensions ( ) { … } — function",
							"—Ⓕ– JS_DeleteProperty ( ) { … } — function",
							"—Ⓕ– JS_SetPrototype ( ) { … } — function",
							"—Ⓕ– JS_GetPrototype ( ) { … } — function",
							" Ⓜ  JS_GPN_STRING_MASK … — macro object",
							" Ⓜ  JS_GPN_SYMBOL_MASK … — macro object",
							" Ⓜ  JS_GPN_PRIVATE_MASK … — macro object",
							" Ⓜ  JS_GPN_ENUM_ONLY … — macro object",
							" Ⓜ  JS_GPN_SET_ENUM … — macro object",
							"—Ⓕ– JS_GetOwnPropertyNames ( ) { … } — function",
							"—Ⓕ– JS_GetOwnProperty ( ) { … } — function",
							"—Ⓕ– JS_Call ( ) { … } — function",
							"—Ⓕ– JS_Invoke ( ) { … } — function",
							"—Ⓕ– JS_CallConstructor ( ) { … } — function",
							"—Ⓕ– JS_CallConstructor2 ( ) { … } — function",
							"—Ⓕ– JS_DetectModule ( ) { … } — function",
							"—Ⓕ– JS_Eval ( ) { … } — function",
							"—Ⓕ– JS_EvalThis ( ) { … } — function",
							"—Ⓕ– JS_GetGlobalObject ( ) { … } — function",
							"—Ⓕ– JS_IsInstanceOf ( ) { … } — function",
							"—Ⓕ– JS_DefineProperty ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyValue ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyValueUint32 ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyValueStr ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyGetSet ( ) { … } — function",
							"—Ⓕ– JS_SetOpaque ( ) { … } — function",
							"—Ⓕ– JS_GetOpaque ( ) { … } — function",
							"—Ⓕ– JS_GetOpaque2 ( ) { … } — function",
							"—Ⓕ– JS_ParseJSON ( ) { … } — function",
							" Ⓜ  JS_PARSE_JSON_EXT … — macro object",
							"—Ⓕ– JS_ParseJSON2 ( ) { … } — function",
							"—Ⓕ– JS_JSONStringify ( ) { … } — function",
							"—Ⓕ– JS_NewArrayBuffer ( ) { … } — function",
							"—Ⓕ– JS_NewArrayBufferCopy ( ) { … } — function",
							"—Ⓕ– JS_DetachArrayBuffer ( ) { … } — function",
							"—Ⓕ– JS_GetArrayBuffer ( ) { … } — function",
							"—Ⓕ– JS_GetTypedArrayBuffer ( ) { … } — function",
							" Ⓣ  JSSharedArrayBufferFunctions ; — typedef",
							"—Ⓕ– JS_SetSharedArrayBufferFunctions ( ) { … } — function",
							"—Ⓕ– JS_NewPromiseCapability ( ) { … } — function",
							"—Ⓕ– JS_SetHostPromiseRejectionTracker ( ) { … } — function",
							"—Ⓕ– JS_SetInterruptHandler ( ) { … } — function",
							"—Ⓕ– JS_SetCanBlock ( ) { … } — function",
							"—Ⓕ– JS_SetIsHTMLDDA ( ) { … } — function",
							" Ⓣ  JSModuleDef ; — typedef",
							"—Ⓕ– JS_SetModuleLoaderFunc ( ) { … } — function",
							"—Ⓕ– JS_GetImportMeta ( ) { … } — function",
							"—Ⓕ– JS_GetModuleName ( ) { … } — function",
							"—Ⓕ– JS_EnqueueJob ( ) { … } — function",
							"—Ⓕ– JS_IsJobPending ( ) { … } — function",
							"—Ⓕ– JS_ExecutePendingJob ( ) { … } — function",
							" Ⓜ  JS_WRITE_OBJ_BYTECODE … — macro object",
							" Ⓜ  JS_WRITE_OBJ_BSWAP … — macro object",
							" Ⓜ  JS_WRITE_OBJ_SAB … — macro object",
							" Ⓜ  JS_WRITE_OBJ_REFERENCE … — macro object",
							"—Ⓕ– JS_WriteObject ( ) { … } — function",
							"—Ⓕ– JS_WriteObject2 ( ) { … } — function",
							" Ⓜ  JS_READ_OBJ_BYTECODE … — macro object",
							" Ⓜ  JS_READ_OBJ_ROM_DATA … — macro object",
							" Ⓜ  JS_READ_OBJ_SAB … — macro object",
							" Ⓜ  JS_READ_OBJ_REFERENCE … — macro object",
							"—Ⓕ– JS_ReadObject ( ) { … } — function",
							"—Ⓕ– JS_EvalFunction ( ) { … } — function",
							"—Ⓕ– JS_ResolveModule ( ) { … } — function",
							"—Ⓕ– JS_GetScriptOrModuleName ( ) { … } — function",
							"—Ⓕ– JS_RunModule ( ) { … } — function",
							" Ⓣ  JSCFunctionEnum ; — typedef",
							" Ⓣ  JSCFunctionType ; — typedef",
							"—Ⓕ– JS_NewCFunction2 ( ) { … } — function",
							"—Ⓕ– JS_NewCFunctionData ( ) { … } — function",
							"—Ⓕ– JS_NewCClosure ( ) { … } — function",
							"—Ⓕ– JS_NewCFunction ( ) { … } — function",
							"—Ⓕ– JS_NewCFunctionMagic ( ) { … } — function",
							"—Ⓕ– JS_SetConstructor ( ) { … } — function",
							" Ⓣ  JSCFunctionListEntry ; — typedef",
							" Ⓜ  JS_DEF_CFUNC … — macro object",
							" Ⓜ  JS_DEF_CGETSET … — macro object",
							" Ⓜ  JS_DEF_CGETSET_MAGIC … — macro object",
							" Ⓜ  JS_DEF_PROP_STRING … — macro object",
							" Ⓜ  JS_DEF_PROP_INT32 … — macro object",
							" Ⓜ  JS_DEF_PROP_INT64 … — macro object",
							" Ⓜ  JS_DEF_PROP_DOUBLE … — macro object",
							" Ⓜ  JS_DEF_PROP_UNDEFINED … — macro object",
							" Ⓜ  JS_DEF_OBJECT … — macro object",
							" Ⓜ  JS_DEF_ALIAS … — macro object",
							"—Ⓜ– JS_CFUNC_DEF ( ) … — macro function",
							"—Ⓜ– JS_CFUNC_MAGIC_DEF ( ) … — macro function",
							"—Ⓜ– JS_CFUNC_SPECIAL_DEF ( ) … — macro function",
							"—Ⓜ– JS_ITERATOR_NEXT_DEF ( ) … — macro function",
							"—Ⓜ– JS_CGETSET_DEF ( ) … — macro function",
							"—Ⓜ– JS_CGETSET_MAGIC_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_STRING_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_INT32_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_INT64_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_DOUBLE_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_UNDEFINED_DEF ( ) … — macro function",
							"—Ⓜ– JS_OBJECT_DEF ( ) … — macro function",
							"—Ⓜ– JS_ALIAS_DEF ( ) … — macro function",
							"—Ⓜ– JS_ALIAS_BASE_DEF ( ) … — macro function",
							"—Ⓕ– JS_SetPropertyFunctionList ( ) { … } — function",
							"—Ⓕ– JS_NewCModule ( ) { … } — function",
							"—Ⓕ– JS_AddModuleExport ( ) { … } — function",
							"—Ⓕ– JS_AddModuleExportList ( ) { … } — function",
							"—Ⓕ– JS_SetModuleExport ( ) { … } — function",
							"—Ⓕ– JS_SetModuleExportList ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAkBAAA4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9kYXRhICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIHByZWRpY2F0ZV9pZArigJTikrvigJMgcHJlZGljYXRlX2NvbnN0YW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX2R1cGFyZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9uZXh0YXJnICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgSlNWYWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIEpTVmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfbWV0aG9kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX29wZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK74oCTIEpTX0lOSVRfTU9EVUxFICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAKjoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					69,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					70,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
						"symkeys":
						[
							[
								1225,
								1234
							],
							[
								1368,
								1377
							],
							[
								1416,
								1427
							],
							[
								1466,
								1481
							],
							[
								1528,
								1544
							],
							[
								1603,
								1612
							],
							[
								1628,
								1639
							],
							[
								1655,
								1670
							],
							[
								1686,
								1702
							],
							[
								1725,
								1732
							],
							[
								1763,
								1772
							],
							[
								1799,
								1808
							],
							[
								1834,
								1842
							],
							[
								1867,
								1874
							],
							[
								1893,
								1902
							],
							[
								1921,
								1927
							],
							[
								1966,
								1974
							],
							[
								1983,
								1995
							],
							[
								2015,
								2027
							],
							[
								2064,
								2077
							],
							[
								2736,
								2752
							],
							[
								2763,
								2777
							],
							[
								3126,
								3133
							],
							[
								3167,
								3179
							],
							[
								3190,
								3206
							],
							[
								3318,
								3339
							],
							[
								3371,
								3387
							],
							[
								3425,
								3442
							],
							[
								3474,
								3494
							],
							[
								3534,
								3550
							],
							[
								3593,
								3601
							],
							[
								3662,
								3670
							],
							[
								3721,
								3738
							],
							[
								3789,
								3795
							],
							[
								3847,
								3862
							],
							[
								3959,
								3974
							],
							[
								4050,
								4057
							],
							[
								4068,
								4080
							],
							[
								4098,
								4114
							],
							[
								4143,
								4159
							],
							[
								4180,
								4197
							],
							[
								4218,
								4234
							],
							[
								4268,
								4276
							],
							[
								4339,
								4347
							],
							[
								4412,
								4433
							],
							[
								4513,
								4533
							],
							[
								4677,
								4683
							],
							[
								4770,
								4785
							],
							[
								5081,
								5098
							],
							[
								5265,
								5286
							],
							[
								5449,
								5464
							],
							[
								5665,
								5677
							],
							[
								5740,
								5747
							],
							[
								5758,
								5770
							],
							[
								5788,
								5804
							],
							[
								5909,
								5930
							],
							[
								5962,
								5978
							],
							[
								6004,
								6021
							],
							[
								6047,
								6067
							],
							[
								6095,
								6111
							],
							[
								6136,
								6144
							],
							[
								6215,
								6223
							],
							[
								6289,
								6306
							],
							[
								6357,
								6363
							],
							[
								6449,
								6464
							],
							[
								6588,
								6603
							],
							[
								6831,
								6851
							],
							[
								6921,
								6943
							],
							[
								7046,
								7062
							],
							[
								7107,
								7126
							],
							[
								7171,
								7193
							],
							[
								7285,
								7292
							],
							[
								7326,
								7338
							],
							[
								7377,
								7385
							],
							[
								7419,
								7426
							],
							[
								7460,
								7472
							],
							[
								7511,
								7527
							],
							[
								7605,
								7625
							],
							[
								7643,
								7659
							],
							[
								7677,
								7695
							],
							[
								7713,
								7726
							],
							[
								7798,
								7812
							],
							[
								7862,
								7875
							],
							[
								7942,
								7956
							],
							[
								7974,
								7988
							],
							[
								8006,
								8020
							],
							[
								8062,
								8078
							],
							[
								8153,
								8170
							],
							[
								8181,
								8205
							],
							[
								8223,
								8243
							],
							[
								8261,
								8283
							],
							[
								8302,
								8317
							],
							[
								8336,
								8351
							],
							[
								8370,
								8387
							],
							[
								8497,
								8510
							],
							[
								8616,
								8636
							],
							[
								8656,
								8670
							],
							[
								8711,
								8728
							],
							[
								8767,
								8788
							],
							[
								8833,
								8852
							],
							[
								8900,
								8919
							],
							[
								8957,
								8976
							],
							[
								9029,
								9050
							],
							[
								9103,
								9120
							],
							[
								9139,
								9158
							],
							[
								9202,
								9220
							],
							[
								9421,
								9446
							],
							[
								9544,
								9574
							],
							[
								10188,
								10201
							],
							[
								10459,
								10476
							],
							[
								10511,
								10527
							],
							[
								10541,
								10554
							],
							[
								10610,
								10627
							],
							[
								10667,
								10684
							],
							[
								10720,
								10737
							],
							[
								10828,
								10846
							],
							[
								10994,
								11011
							],
							[
								11039,
								11053
							],
							[
								11103,
								11117
							],
							[
								11140,
								11159
							],
							[
								11181,
								11200
							],
							[
								11299,
								11311
							],
							[
								11375,
								11383
							],
							[
								11408,
								11423
							],
							[
								11470,
								11483
							],
							[
								11505,
								11519
							],
							[
								11546,
								11559
							],
							[
								11583,
								11602
							],
							[
								11625,
								11644
							],
							[
								11687,
								11700
							],
							[
								11723,
								11739
							],
							[
								11798,
								11814
							],
							[
								11952,
								11968
							],
							[
								11990,
								12016
							],
							[
								12039,
								12058
							],
							[
								12081,
								12100
							],
							[
								12123,
								12153
							],
							[
								12176,
								12205
							],
							[
								12228,
								12249
							],
							[
								12272,
								12291
							],
							[
								12314,
								12334
							],
							[
								12357,
								12378
							],
							[
								12401,
								12427
							],
							[
								12450,
								12472
							],
							[
								12495,
								12516
							],
							[
								12539,
								12562
							],
							[
								12585,
								12610
							],
							[
								12667,
								12691
							],
							[
								12738,
								12756
							],
							[
								12799,
								12823
							],
							[
								12901,
								12913
							],
							[
								12948,
								12958
							],
							[
								12992,
								13005
							],
							[
								13053,
								13077
							],
							[
								13117,
								13130
							],
							[
								13167,
								13176
							],
							[
								13212,
								13219
							],
							[
								13254,
								13264
							],
							[
								13313,
								13334
							],
							[
								13375,
								13386
							],
							[
								13450,
								13460
							],
							[
								13497,
								13506
							],
							[
								13547,
								13557
							],
							[
								14155,
								14168
							],
							[
								14176,
								14197
							],
							[
								14237,
								14255
							],
							[
								14334,
								14346
							],
							[
								14357,
								14370
							],
							[
								14424,
								14434
							],
							[
								14476,
								14492
							],
							[
								14529,
								14539
							],
							[
								14572,
								14583
							],
							[
								14616,
								14629
							],
							[
								14664,
								14678
							],
							[
								14717,
								14732
							],
							[
								14775,
								14791
							],
							[
								14829,
								14843
							],
							[
								14982,
								14996
							],
							[
								15105,
								15125
							],
							[
								16704,
								16724
							],
							[
								16879,
								16903
							],
							[
								17650,
								17660
							],
							[
								17673,
								17686
							],
							[
								17720,
								17733
							],
							[
								17755,
								17766
							],
							[
								17836,
								17856
							],
							[
								17939,
								17946
							],
							[
								18059,
								18066
							],
							[
								18172,
								18179
							],
							[
								18300,
								18307
							],
							[
								18511,
								18518
							],
							[
								18707,
								18721
							],
							[
								18758,
								18773
							],
							[
								18827,
								18834
							],
							[
								19226,
								19237
							],
							[
								19368,
								19379
							],
							[
								19504,
								19517
							],
							[
								19628,
								19643
							],
							[
								19756,
								19765
							],
							[
								19854,
								19863
							],
							[
								19952,
								19966
							],
							[
								20060,
								20074
							],
							[
								20181,
								20199
							],
							[
								20310,
								20321
							],
							[
								20412,
								20423
							],
							[
								20514,
								20525
							],
							[
								20602,
								20610
							],
							[
								20649,
								20664
							],
							[
								20690,
								20700
							],
							[
								20741,
								20765
							],
							[
								20791,
								20802
							],
							[
								20828,
								20850
							],
							[
								20876,
								20892
							],
							[
								20966,
								20982
							],
							[
								21054,
								21070
							],
							[
								21147,
								21163
							],
							[
								21236,
								21252
							],
							[
								21328,
								21347
							],
							[
								21371,
								21385
							],
							[
								21433,
								21445
							],
							[
								21652,
								21668
							],
							[
								21715,
								21729
							],
							[
								21954,
								21965
							],
							[
								22170,
								22183
							],
							[
								22369,
								22378
							],
							[
								22451,
								22461
							],
							[
								22530,
								22541
							],
							[
								22647,
								22657
							],
							[
								22712,
								22722
							],
							[
								22778,
								22790
							],
							[
								22891,
								22904
							],
							[
								23003,
								23016
							],
							[
								23076,
								23091
							],
							[
								23148,
								23160
							],
							[
								23203,
								23219
							],
							[
								23262,
								23273
							],
							[
								23317,
								23333
							],
							[
								23381,
								23397
							],
							[
								23489,
								23504
							],
							[
								23631,
								23643
							],
							[
								23735,
								23749
							],
							[
								23793,
								23815
							],
							[
								23881,
								23898
							],
							[
								23938,
								23955
							],
							[
								24001,
								24013
							],
							[
								24040,
								24053
							],
							[
								24097,
								24113
							],
							[
								24157,
								24177
							],
							[
								24240,
								24251
							],
							[
								24273,
								24283
							],
							[
								24328,
								24350
							],
							[
								24470,
								24477
							],
							[
								24624,
								24641
							],
							[
								24708,
								24728
							],
							[
								24788,
								24810
							],
							[
								24906,
								24920
							],
							[
								25068,
								25088
							],
							[
								25160,
								25179
							],
							[
								25250,
								25267
							],
							[
								25343,
								25357
							],
							[
								25415,
								25430
							],
							[
								25470,
								25490
							],
							[
								25530,
								25547
							],
							[
								25611,
								25626
							],
							[
								25694,
								25709
							],
							[
								25754,
								25772
							],
							[
								25790,
								25808
							],
							[
								25826,
								25845
							],
							[
								25908,
								25924
							],
							[
								25990,
								26005
							],
							[
								26020,
								26042
							],
							[
								26132,
								26149
							],
							[
								26235,
								26242
							],
							[
								26344,
								26353
							],
							[
								26445,
								26463
							],
							[
								26542,
								26561
							],
							[
								26665,
								26680
							],
							[
								26795,
								26802
							],
							[
								26969,
								26980
							],
							[
								27104,
								27122
							],
							[
								27144,
								27159
							],
							[
								27217,
								27234
							],
							[
								27368,
								27390
							],
							[
								27472,
								27500
							],
							[
								27583,
								27608
							],
							[
								27695,
								27718
							],
							[
								27820,
								27832
							],
							[
								27867,
								27879
							],
							[
								27925,
								27938
							],
							[
								28065,
								28077
							],
							[
								28158,
								28175
							],
							[
								28219,
								28232
							],
							[
								28324,
								28340
							],
							[
								28509,
								28526
							],
							[
								28654,
								28675
							],
							[
								28730,
								28750
							],
							[
								28795,
								28812
							],
							[
								28871,
								28893
							],
							[
								29183,
								29211
							],
							[
								29218,
								29250
							],
							[
								29316,
								29339
							],
							[
								29586,
								29619
							],
							[
								29809,
								29831
							],
							[
								29946,
								29960
							],
							[
								30041,
								30056
							],
							[
								30120,
								30131
							],
							[
								30540,
								30562
							],
							[
								30725,
								30741
							],
							[
								30782,
								30798
							],
							[
								30932,
								30945
							],
							[
								31023,
								31038
							],
							[
								31059,
								31079
							],
							[
								31199,
								31220
							],
							[
								31266,
								31284
							],
							[
								31331,
								31347
							],
							[
								31400,
								31422
							],
							[
								31540,
								31554
							],
							[
								31625,
								31640
							],
							[
								31754,
								31774
							],
							[
								31821,
								31841
							],
							[
								31895,
								31910
							],
							[
								31964,
								31985
							],
							[
								32033,
								32046
							],
							[
								32237,
								32252
							],
							[
								32389,
								32405
							],
							[
								32485,
								32509
							],
							[
								32596,
								32608
							],
							[
								33476,
								33491
							],
							[
								34328,
								34343
							],
							[
								34354,
								34370
							],
							[
								34480,
								34499
							],
							[
								34605,
								34619
							],
							[
								34747,
								34762
							],
							[
								34928,
								34948
							],
							[
								35144,
								35161
							],
							[
								35869,
								35889
							],
							[
								35900,
								35912
							],
							[
								35923,
								35937
							],
							[
								35948,
								35968
							],
							[
								35979,
								35997
							],
							[
								36008,
								36025
							],
							[
								36036,
								36053
							],
							[
								36064,
								36082
							],
							[
								36093,
								36114
							],
							[
								36125,
								36138
							],
							[
								36149,
								36161
							],
							[
								36222,
								36234
							],
							[
								36477,
								36495
							],
							[
								36775,
								36795
							],
							[
								37046,
								37066
							],
							[
								37346,
								37360
							],
							[
								37601,
								37621
							],
							[
								37899,
								37917
							],
							[
								38072,
								38089
							],
							[
								38241,
								38258
							],
							[
								38410,
								38428
							],
							[
								38581,
								38602
							],
							[
								38751,
								38764
							],
							[
								38930,
								38942
							],
							[
								39141,
								39158
							],
							[
								39363,
								39389
							],
							[
								39571,
								39584
							],
							[
								39711,
								39729
							],
							[
								39789,
								39811
							],
							[
								39949,
								39967
							],
							[
								40043,
								40065
							]
						],
						"symlist":
						[
							" Ⓜ  QUICKJS_H … — macro object",
							"—Ⓜ– js_likely ( ) … — macro function",
							"—Ⓜ– js_unlikely ( ) … — macro function",
							" Ⓜ  js_force_inline … — macro object",
							"—Ⓜ– __js_printf_like ( ) … — macro function",
							"—Ⓜ– js_likely ( ) … — macro function",
							"—Ⓜ– js_unlikely ( ) … — macro function",
							" Ⓜ  js_force_inline … — macro object",
							"—Ⓜ– __js_printf_like ( ) … — macro function",
							" Ⓜ  JS_BOOL … — macro object",
							" Ⓣ  JSRuntime ; — typedef",
							" Ⓣ  JSContext ; — typedef",
							" Ⓣ  JSObject ; — typedef",
							" Ⓣ  JSClass ; — typedef",
							" Ⓣ  JSClassID ; — typedef",
							" Ⓣ  JSAtom ; — typedef",
							" Ⓜ  JS_PTR64 … — macro object",
							"—Ⓜ– JS_PTR64_DEF ( ) … — macro function",
							"—Ⓜ– JS_PTR64_DEF ( ) … — macro function",
							" Ⓜ  JS_NAN_BOXING … — macro object",
							" Ⓣ  JSRefCountHeader ; — typedef",
							" Ⓜ  JS_FLOAT64_NAN … — macro object",
							" Ⓣ  JSValue ; — typedef",
							" Ⓣ  JSValueConst ; — typedef",
							"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
							"—Ⓜ– JS_MKVAL ( ) … — macro function",
							"—Ⓜ– JS_MKPTR ( ) … — macro function",
							"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
							" Ⓜ  JS_NAN … — macro object",
							"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
							"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
							" Ⓣ  JSValue ; — typedef",
							" Ⓜ  JSValueConst … — macro object",
							"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
							"—Ⓜ– JS_MKVAL ( ) … — macro function",
							"—Ⓜ– JS_MKPTR ( ) … — macro function",
							" Ⓜ  JS_FLOAT64_TAG_ADDEND … — macro object",
							"—Ⓕ– JS_VALUE_GET_FLOAT64 ( ) { … } — function",
							" Ⓜ  JS_NAN … — macro object",
							"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
							"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
							"—Ⓕ– JS_VALUE_GET_NORM_TAG ( ) { … } — function",
							"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
							" Ⓣ  JSValueUnion ; — typedef",
							" Ⓣ  JSValue ; — typedef",
							" Ⓜ  JSValueConst … — macro object",
							"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
							"—Ⓜ– JS_MKVAL ( ) … — macro function",
							"—Ⓜ– JS_MKPTR ( ) … — macro function",
							"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
							" Ⓜ  JS_NAN … — macro object",
							"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
							"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
							"—Ⓜ– JS_VALUE_IS_BOTH_INT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_IS_BOTH_FLOAT ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_OBJ ( ) … — macro function",
							"—Ⓜ– JS_VALUE_GET_STRING ( ) … — macro function",
							"—Ⓜ– JS_VALUE_HAS_REF_COUNT ( ) … — macro function",
							" Ⓜ  JS_NULL … — macro object",
							" Ⓜ  JS_UNDEFINED … — macro object",
							" Ⓜ  JS_FALSE … — macro object",
							" Ⓜ  JS_TRUE … — macro object",
							" Ⓜ  JS_EXCEPTION … — macro object",
							" Ⓜ  JS_UNINITIALIZED … — macro object",
							" Ⓜ  JS_PROP_CONFIGURABLE … — macro object",
							" Ⓜ  JS_PROP_WRITABLE … — macro object",
							" Ⓜ  JS_PROP_ENUMERABLE … — macro object",
							" Ⓜ  JS_PROP_C_W_E … — macro object",
							" Ⓜ  JS_PROP_LENGTH … — macro object",
							" Ⓜ  JS_PROP_TMASK … — macro object",
							" Ⓜ  JS_PROP_NORMAL … — macro object",
							" Ⓜ  JS_PROP_GETSET … — macro object",
							" Ⓜ  JS_PROP_VARREF … — macro object",
							" Ⓜ  JS_PROP_AUTOINIT … — macro object",
							" Ⓜ  JS_PROP_HAS_SHIFT … — macro object",
							" Ⓜ  JS_PROP_HAS_CONFIGURABLE … — macro object",
							" Ⓜ  JS_PROP_HAS_WRITABLE … — macro object",
							" Ⓜ  JS_PROP_HAS_ENUMERABLE … — macro object",
							" Ⓜ  JS_PROP_HAS_GET … — macro object",
							" Ⓜ  JS_PROP_HAS_SET … — macro object",
							" Ⓜ  JS_PROP_HAS_VALUE … — macro object",
							" Ⓜ  JS_PROP_THROW … — macro object",
							" Ⓜ  JS_PROP_THROW_STRICT … — macro object",
							" Ⓜ  JS_PROP_NO_ADD … — macro object",
							" Ⓜ  JS_PROP_NO_EXOTIC … — macro object",
							" Ⓜ  JS_DEFAULT_STACK_SIZE … — macro object",
							" Ⓜ  JS_EVAL_TYPE_GLOBAL … — macro object",
							" Ⓜ  JS_EVAL_TYPE_MODULE … — macro object",
							" Ⓜ  JS_EVAL_TYPE_DIRECT … — macro object",
							" Ⓜ  JS_EVAL_TYPE_INDIRECT … — macro object",
							" Ⓜ  JS_EVAL_TYPE_MASK … — macro object",
							" Ⓜ  JS_EVAL_FLAG_STRICT … — macro object",
							" Ⓜ  JS_EVAL_FLAG_STRIP … — macro object",
							" Ⓜ  JS_EVAL_FLAG_COMPILE_ONLY … — macro object",
							" Ⓜ  JS_EVAL_FLAG_BACKTRACE_BARRIER … — macro object",
							" Ⓣ  JSMallocState ; — typedef",
							" Ⓣ  JSMallocFunctions ; — typedef",
							" Ⓣ  JSGCObjectHeader ; — typedef",
							"—Ⓕ– JS_NewRuntime ( ) { … } — function",
							"—Ⓕ– JS_SetRuntimeInfo ( ) { … } — function",
							"—Ⓕ– JS_SetMemoryLimit ( ) { … } — function",
							"—Ⓕ– JS_SetGCThreshold ( ) { … } — function",
							"—Ⓕ– JS_SetMaxStackSize ( ) { … } — function",
							"—Ⓕ– JS_UpdateStackTop ( ) { … } — function",
							"—Ⓕ– JS_NewRuntime2 ( ) { … } — function",
							"—Ⓕ– JS_FreeRuntime ( ) { … } — function",
							"—Ⓕ– JS_GetRuntimeOpaque ( ) { … } — function",
							"—Ⓕ– JS_SetRuntimeOpaque ( ) { … } — function",
							"—Ⓕ– JS_MarkValue ( ) { … } — function",
							"—Ⓕ– JS_RunGC ( ) { … } — function",
							"—Ⓕ– JS_IsLiveObject ( ) { … } — function",
							"—Ⓕ– JS_NewContext ( ) { … } — function",
							"—Ⓕ– JS_FreeContext ( ) { … } — function",
							"—Ⓕ– JS_DupContext ( ) { … } — function",
							"—Ⓕ– JS_GetContextOpaque ( ) { … } — function",
							"—Ⓕ– JS_SetContextOpaque ( ) { … } — function",
							"—Ⓕ– JS_GetRuntime ( ) { … } — function",
							"—Ⓕ– JS_SetClassProto ( ) { … } — function",
							"—Ⓕ– JS_GetClassProto ( ) { … } — function",
							"—Ⓕ– JS_NewContextRaw ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBaseObjects ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicDate ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicEval ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicStringNormalize ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicRegExpCompiler ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicRegExp ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicJSON ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicProxy ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicMapSet ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicTypedArrays ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicPromise ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBigInt ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBigFloat ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicBigDecimal ( ) { … } — function",
							"—Ⓕ– JS_AddIntrinsicOperators ( ) { … } — function",
							"—Ⓕ– JS_EnableBignumExt ( ) { … } — function",
							"—Ⓕ– js_string_codePointRange ( ) { … } — function",
							"—Ⓕ– js_malloc_rt ( ) { … } — function",
							"—Ⓕ– js_free_rt ( ) { … } — function",
							"—Ⓕ– js_realloc_rt ( ) { … } — function",
							"—Ⓕ– js_malloc_usable_size_rt ( ) { … } — function",
							"—Ⓕ– js_mallocz_rt ( ) { … } — function",
							"—Ⓕ– js_malloc ( ) { … } — function",
							"—Ⓕ– js_free ( ) { … } — function",
							"—Ⓕ– js_realloc ( ) { … } — function",
							"—Ⓕ– js_malloc_usable_size ( ) { … } — function",
							"—Ⓕ– js_realloc2 ( ) { … } — function",
							"—Ⓕ– js_mallocz ( ) { … } — function",
							"—Ⓕ– js_strdup ( ) { … } — function",
							"—Ⓕ– js_strndup ( ) { … } — function",
							" Ⓣ  JSMemoryUsage ; — typedef",
							"—Ⓕ– JS_ComputeMemoryUsage ( ) { … } — function",
							"—Ⓕ– JS_DumpMemoryUsage ( ) { … } — function",
							" Ⓜ  JS_ATOM_NULL … — macro object",
							"—Ⓕ– JS_NewAtomLen ( ) { … } — function",
							"—Ⓕ– JS_NewAtom ( ) { … } — function",
							"—Ⓕ– JS_NewAtomUInt32 ( ) { … } — function",
							"—Ⓕ– JS_DupAtom ( ) { … } — function",
							"—Ⓕ– JS_FreeAtom ( ) { … } — function",
							"—Ⓕ– JS_FreeAtomRT ( ) { … } — function",
							"—Ⓕ– JS_AtomToValue ( ) { … } — function",
							"—Ⓕ– JS_AtomToString ( ) { … } — function",
							"—Ⓕ– JS_AtomToCString ( ) { … } — function",
							"—Ⓕ– JS_ValueToAtom ( ) { … } — function",
							" Ⓣ  JSPropertyEnum ; — typedef",
							" Ⓣ  JSPropertyDescriptor ; — typedef",
							" Ⓣ  JSClassExoticMethods ; — typedef",
							" Ⓜ  JS_CALL_FLAG_CONSTRUCTOR … — macro object",
							" Ⓣ  JSClassDef ; — typedef",
							"—Ⓕ– JS_NewClassID ( ) { … } — function",
							"—Ⓕ– JS_GetClassID ( ) { … } — function",
							"—Ⓕ– JS_NewClass ( ) { … } — function",
							"—Ⓕ– JS_IsRegisteredClass ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JS_NewBigInt64 ( ) { … } — function",
							"—Ⓕ– JS_NewBigUint64 ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JS_IsNumber ( ) { … } — function",
							"—Ⓕ– JS_IsBigInt ( ) { … } — function",
							"—Ⓕ– JS_IsBigFloat ( ) { … } — function",
							"—Ⓕ– JS_IsBigDecimal ( ) { … } — function",
							"—Ⓕ– JS_IsBool ( ) { … } — function",
							"—Ⓕ– JS_IsNull ( ) { … } — function",
							"—Ⓕ– JS_IsUndefined ( ) { … } — function",
							"—Ⓕ– JS_IsException ( ) { … } — function",
							"—Ⓕ– JS_IsUninitialized ( ) { … } — function",
							"—Ⓕ– JS_IsString ( ) { … } — function",
							"—Ⓕ– JS_IsSymbol ( ) { … } — function",
							"—Ⓕ– JS_IsObject ( ) { … } — function",
							"—Ⓕ– JS_Throw ( ) { … } — function",
							"—Ⓕ– JS_GetException ( ) { … } — function",
							"—Ⓕ– JS_IsError ( ) { … } — function",
							"—Ⓕ– JS_ResetUncatchableError ( ) { … } — function",
							"—Ⓕ– JS_NewError ( ) { … } — function",
							"—Ⓕ– JS_NewUncatchableError ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– __js_printf_like ( ) { … } — function",
							"—Ⓕ– JS_ThrowOutOfMemory ( ) { … } — function",
							"—Ⓕ– __JS_FreeValue ( ) { … } — function",
							"—Ⓕ– JS_FreeValue ( ) { … } — function",
							"—Ⓕ– __JS_FreeValueRT ( ) { … } — function",
							"—Ⓕ– JS_FreeValueRT ( ) { … } — function",
							"—Ⓕ– JS_DupValue ( ) { … } — function",
							"—Ⓕ– JS_DupValueRT ( ) { … } — function",
							"—Ⓕ– JS_ToBool ( ) { … } — function",
							"—Ⓕ– JS_ToInt32 ( ) { … } — function",
							"—Ⓕ– JS_ToUint32 ( ) { … } — function",
							"—Ⓕ– JS_ToInt64 ( ) { … } — function",
							"—Ⓕ– JS_ToIndex ( ) { … } — function",
							"—Ⓕ– JS_ToFloat64 ( ) { … } — function",
							"—Ⓕ– JS_ToBigInt64 ( ) { … } — function",
							"—Ⓕ– JS_ToInt64Ext ( ) { … } — function",
							"—Ⓕ– JS_NewStringLen ( ) { … } — function",
							"—Ⓕ– JS_NewString ( ) { … } — function",
							"—Ⓕ– JS_NewAtomString ( ) { … } — function",
							"—Ⓕ– JS_ToString ( ) { … } — function",
							"—Ⓕ– JS_ToPropertyKey ( ) { … } — function",
							"—Ⓕ– JS_ToCStringLen2 ( ) { … } — function",
							"—Ⓕ– JS_ToCStringLen ( ) { … } — function",
							"—Ⓕ– JS_ToCString ( ) { … } — function",
							"—Ⓕ– JS_FreeCString ( ) { … } — function",
							"—Ⓕ– JS_NewObjectProtoClass ( ) { … } — function",
							"—Ⓕ– JS_NewObjectClass ( ) { … } — function",
							"—Ⓕ– JS_NewObjectProto ( ) { … } — function",
							"—Ⓕ– JS_NewObject ( ) { … } — function",
							"—Ⓕ– JS_IsFunction ( ) { … } — function",
							"—Ⓕ– JS_IsConstructor ( ) { … } — function",
							"—Ⓕ– JS_SetConstructorBit ( ) { … } — function",
							"—Ⓕ– JS_NewArray ( ) { … } — function",
							"—Ⓕ– JS_IsArray ( ) { … } — function",
							"—Ⓕ– JS_GetPropertyInternal ( ) { … } — function",
							"—Ⓕ– JSValue ( ) { … } — function",
							"—Ⓕ– JS_GetPropertyStr ( ) { … } — function",
							"—Ⓕ– JS_GetPropertyUint32 ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyInternal ( ) { … } — function",
							"—Ⓕ– JS_SetProperty ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyUint32 ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyInt64 ( ) { … } — function",
							"—Ⓕ– JS_SetPropertyStr ( ) { … } — function",
							"—Ⓕ– JS_HasProperty ( ) { … } — function",
							"—Ⓕ– JS_IsExtensible ( ) { … } — function",
							"—Ⓕ– JS_PreventExtensions ( ) { … } — function",
							"—Ⓕ– JS_DeleteProperty ( ) { … } — function",
							"—Ⓕ– JS_SetPrototype ( ) { … } — function",
							"—Ⓕ– JS_GetPrototype ( ) { … } — function",
							" Ⓜ  JS_GPN_STRING_MASK … — macro object",
							" Ⓜ  JS_GPN_SYMBOL_MASK … — macro object",
							" Ⓜ  JS_GPN_PRIVATE_MASK … — macro object",
							" Ⓜ  JS_GPN_ENUM_ONLY … — macro object",
							" Ⓜ  JS_GPN_SET_ENUM … — macro object",
							"—Ⓕ– JS_GetOwnPropertyNames ( ) { … } — function",
							"—Ⓕ– JS_GetOwnProperty ( ) { … } — function",
							"—Ⓕ– JS_Call ( ) { … } — function",
							"—Ⓕ– JS_Invoke ( ) { … } — function",
							"—Ⓕ– JS_CallConstructor ( ) { … } — function",
							"—Ⓕ– JS_CallConstructor2 ( ) { … } — function",
							"—Ⓕ– JS_DetectModule ( ) { … } — function",
							"—Ⓕ– JS_Eval ( ) { … } — function",
							"—Ⓕ– JS_EvalThis ( ) { … } — function",
							"—Ⓕ– JS_GetGlobalObject ( ) { … } — function",
							"—Ⓕ– JS_IsInstanceOf ( ) { … } — function",
							"—Ⓕ– JS_DefineProperty ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyValue ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyValueUint32 ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyValueStr ( ) { … } — function",
							"—Ⓕ– JS_DefinePropertyGetSet ( ) { … } — function",
							"—Ⓕ– JS_SetOpaque ( ) { … } — function",
							"—Ⓕ– JS_GetOpaque ( ) { … } — function",
							"—Ⓕ– JS_GetOpaque2 ( ) { … } — function",
							"—Ⓕ– JS_ParseJSON ( ) { … } — function",
							" Ⓜ  JS_PARSE_JSON_EXT … — macro object",
							"—Ⓕ– JS_ParseJSON2 ( ) { … } — function",
							"—Ⓕ– JS_JSONStringify ( ) { … } — function",
							"—Ⓕ– JS_NewArrayBuffer ( ) { … } — function",
							"—Ⓕ– JS_NewArrayBufferCopy ( ) { … } — function",
							"—Ⓕ– JS_DetachArrayBuffer ( ) { … } — function",
							"—Ⓕ– JS_GetArrayBuffer ( ) { … } — function",
							"—Ⓕ– JS_GetTypedArrayBuffer ( ) { … } — function",
							" Ⓣ  JSSharedArrayBufferFunctions ; — typedef",
							"—Ⓕ– JS_SetSharedArrayBufferFunctions ( ) { … } — function",
							"—Ⓕ– JS_NewPromiseCapability ( ) { … } — function",
							"—Ⓕ– JS_SetHostPromiseRejectionTracker ( ) { … } — function",
							"—Ⓕ– JS_SetInterruptHandler ( ) { … } — function",
							"—Ⓕ– JS_SetCanBlock ( ) { … } — function",
							"—Ⓕ– JS_SetIsHTMLDDA ( ) { … } — function",
							" Ⓣ  JSModuleDef ; — typedef",
							"—Ⓕ– JS_SetModuleLoaderFunc ( ) { … } — function",
							"—Ⓕ– JS_GetImportMeta ( ) { … } — function",
							"—Ⓕ– JS_GetModuleName ( ) { … } — function",
							"—Ⓕ– JS_EnqueueJob ( ) { … } — function",
							"—Ⓕ– JS_IsJobPending ( ) { … } — function",
							"—Ⓕ– JS_ExecutePendingJob ( ) { … } — function",
							" Ⓜ  JS_WRITE_OBJ_BYTECODE … — macro object",
							" Ⓜ  JS_WRITE_OBJ_BSWAP … — macro object",
							" Ⓜ  JS_WRITE_OBJ_SAB … — macro object",
							" Ⓜ  JS_WRITE_OBJ_REFERENCE … — macro object",
							"—Ⓕ– JS_WriteObject ( ) { … } — function",
							"—Ⓕ– JS_WriteObject2 ( ) { … } — function",
							" Ⓜ  JS_READ_OBJ_BYTECODE … — macro object",
							" Ⓜ  JS_READ_OBJ_ROM_DATA … — macro object",
							" Ⓜ  JS_READ_OBJ_SAB … — macro object",
							" Ⓜ  JS_READ_OBJ_REFERENCE … — macro object",
							"—Ⓕ– JS_ReadObject ( ) { … } — function",
							"—Ⓕ– JS_EvalFunction ( ) { … } — function",
							"—Ⓕ– JS_ResolveModule ( ) { … } — function",
							"—Ⓕ– JS_GetScriptOrModuleName ( ) { … } — function",
							"—Ⓕ– JS_RunModule ( ) { … } — function",
							" Ⓣ  JSCFunctionEnum ; — typedef",
							" Ⓣ  JSCFunctionType ; — typedef",
							"—Ⓕ– JS_NewCFunction2 ( ) { … } — function",
							"—Ⓕ– JS_NewCFunctionData ( ) { … } — function",
							"—Ⓕ– JS_NewCClosure ( ) { … } — function",
							"—Ⓕ– JS_NewCFunction ( ) { … } — function",
							"—Ⓕ– JS_NewCFunctionMagic ( ) { … } — function",
							"—Ⓕ– JS_SetConstructor ( ) { … } — function",
							" Ⓣ  JSCFunctionListEntry ; — typedef",
							" Ⓜ  JS_DEF_CFUNC … — macro object",
							" Ⓜ  JS_DEF_CGETSET … — macro object",
							" Ⓜ  JS_DEF_CGETSET_MAGIC … — macro object",
							" Ⓜ  JS_DEF_PROP_STRING … — macro object",
							" Ⓜ  JS_DEF_PROP_INT32 … — macro object",
							" Ⓜ  JS_DEF_PROP_INT64 … — macro object",
							" Ⓜ  JS_DEF_PROP_DOUBLE … — macro object",
							" Ⓜ  JS_DEF_PROP_UNDEFINED … — macro object",
							" Ⓜ  JS_DEF_OBJECT … — macro object",
							" Ⓜ  JS_DEF_ALIAS … — macro object",
							"—Ⓜ– JS_CFUNC_DEF ( ) … — macro function",
							"—Ⓜ– JS_CFUNC_MAGIC_DEF ( ) … — macro function",
							"—Ⓜ– JS_CFUNC_SPECIAL_DEF ( ) … — macro function",
							"—Ⓜ– JS_ITERATOR_NEXT_DEF ( ) … — macro function",
							"—Ⓜ– JS_CGETSET_DEF ( ) … — macro function",
							"—Ⓜ– JS_CGETSET_MAGIC_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_STRING_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_INT32_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_INT64_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_DOUBLE_DEF ( ) … — macro function",
							"—Ⓜ– JS_PROP_UNDEFINED_DEF ( ) … — macro function",
							"—Ⓜ– JS_OBJECT_DEF ( ) … — macro function",
							"—Ⓜ– JS_ALIAS_DEF ( ) … — macro function",
							"—Ⓜ– JS_ALIAS_BASE_DEF ( ) … — macro function",
							"—Ⓕ– JS_SetPropertyFunctionList ( ) { … } — function",
							"—Ⓕ– JS_NewCModule ( ) { … } — function",
							"—Ⓕ– JS_AddModuleExport ( ) { … } — function",
							"—Ⓕ– JS_AddModuleExportList ( ) { … } — function",
							"—Ⓕ– JS_SetModuleExport ( ) { … } — function",
							"—Ⓕ– JS_SetModuleExportList ( ) { … } — function"
						]
					},
					"AQAAAAAAAAAAAAAAKjoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "Wetterstation und Himmelsbeobachtung Projekte:\n\nhttps://thepihut.com/blogs/raspberry-pi-roundup/raspberry-pi-roundup-a-flight-tracker-a-cctv-camera-and-a-sensehat-driven-weather-station\nhttps://olegkutkov.me/2018/03/20/autonomous-allsky-camera-with-raspberry-pi-part-1-overview/\nhttps://olegkutkov.me/2018/03/22/autonomous-allsky-camera-with-raspberry-pi-part-2-powering-and-lightning-protection/\nhttps://olegkutkov.me/2018/06/07/autonomous-allsky-camera-with-raspberry-pi-part-3-shooting-night-sky-in-fits-using-qhy5-iim-camera/\nhttps://www.switchdoc.com/2016/12/tutorial-part-1-building-a-solar-powered-raspberry-pi-weather-station-groveweatherpi/\n\nEigener ADS-B flighttracker mit SDR (Software Defined Radio):\n\nhttps://hackaday.com/2011/09/22/tracking-commercial-aircraft-with-salvaged-electronics/\nhttps://hackaday.com/2014/08/25/piaware-automated-airliner-tracking-on-the-raspberry-pi/\nhttps://hackaday.com/2014/11/27/keep-tabs-on-passing-jets-with-pi-and-sdr/\nhttps://hackaday.com/2015/07/18/tracking-nearly-every-aircraft-with-a-raspberry-pi/\nhttps://hackaday.com/2017/09/05/19-rtl-sdr-dongles-reviewed/\nhttps://hackaday.com/2018/06/05/cat-compels-raspberry-pi-flight-tracker/\nhttps://hackaday.com/2019/07/31/rtl-sdr-seven-years-later/\nhttps://hackaday.com/2019/08/14/remote-ads-b-install-listens-in-on-all-the-aircraft-transmissions-with-rtl-sdr-trio-phones-home-on-cellular/\n\nFlighttracker-Systeme, evtl. haben sie schon Abdeckung für unsere Gebiete und wenn nicht dann könnten wir ihnen Daten liefern:\n\nhttps://opensky-network.org/ (unzensiert, also auch militär)\nhttps://opensky-network.org/aircraft-database/\nhttps://www.adsbexchange.com/\nhttp://openadsbapp.com/\nhttps://www.planewatcher.app/\n\n\nLösung für Standort Wylerringstr. 90, 13. Stock\n\n- kann keinen Strom von Waschküche auf Dachterrasse ziehen, brauche Lösung mit 2 wechselbaren Akkus\n- mein Wifi reicht nicht aufs Dach, brauche von den oberen Nachbarn oder einen 3G/4G Stick, allerdings würd das die Akkulaufzeit erheblich verkürzen\n- vorerst nur Aufnahme wenn Bewegung am Himmel dann Video und ADS-B Daten mit USB-Stick holen gehen\n- Noch keine Erfahrung ob Fischauge geeignet, zum Glück Preis nicht so hoch\n- Ausführung: Sperrholzbox mit Bitumenlack oder Dachpappe, seitliche Klappe für Akkuwechsel und USB-ports\n- Ohne 1090 MHz Filter kann auch Flugfunk (118-136 MHz) aufgezeichnet werden\n\n\nhttps://www.pi-shop.ch/raspberry-pi-camera-i-fisheye-lens-fischauge (CHF 29.90) oder\nhttps://www.pi-shop.ch/raspberry-pi-camera-h-fisheye-lens-supports-night-vision (CHF 37.90)\n\n(nightvision heisst im Prinzip einfach ohne IR-filter, da CMOS/CCD kameras auch IR-empfindlich sind.\nErwartungsgemäss könnten Trails selber sichtbar sein auf Infrarot, die Flugis aber wohl nicht.\nAber am Tag kann eine IR-filter-lose Kamera durch Streulicht geblendet werden durch zusätzlichen IR-Einfall)\n\nhttps://www.pi-shop.ch/flightaware-pro-stick-usb-sdr-ads-b-receiver (CHF 49.90)\nhttps://www.pi-shop.ch/3dbi-ads-b-1090mhz-sma-antenna-w-magnetic-base (CHF 15.90)\n\noptional: https://www.pi-shop.ch/sma-male-to-n-type-male-antenna-cable-5m (CHF 29.90)\n\nhttps://www.pi-shop.ch/sandisk-microsdxc-karte-ultra-uhs-i-a1-64-gb (CHF 15.90)\n\nhttps://www.pi-shop.ch/ansmann-powerbank-10ah-mit-usb (2x CHF 39.90)\n\n\nTotal: (nightvision) CHF 199.40 (normal) CHF 191.40\n\n\n\nhttps://www.maker-shop.ch/raspberry-pi-camera-i-fisheye-lens-fischauge\nhttps://www.maker-shop.ch/flightaware-pro-stick-usb-sdr-ads-b-receiver\nhttps://www.maker-shop.ch/3dbi-ads-b-1090mhz-sma-antenna-w-magnetic-base\nhttps://www.maker-shop.ch/cm3-8gb-single-board-computer-raspberry-pi-compute-module-3-bcm2837b0-soc-1\nhttps://www.maker-shop.ch/ersatzkabel-fuer-kamera-modul-ca-35cm\nhttps://www.maker-shop.ch/ansmann-powerbank-10ah-mit-usb\nhttps://www.maker-shop.ch/heatsink-kit-for-raspberry-pi-4b\n\n\nhttps://www.maker-shop.ch/as7341-spectral-color-sensor-visible-spectrum-sensor-multi-channels-high-precision-i2c-bus\n\nRaspberry Pi 4 (minicomputer mit Wifi) hab ich schon 2 solche:\nhttps://www.reichelt.com/ch/de/raspberry-pi-4-b-4x-1-5-ghz-2-gb-ram-wlan-bt-rasp-pi-4-b-2gb-p259919.html\nmit Kühlkörper, Netzgerät, Gehäuse, Speicherkarte, HDMI-Kabel ca. CHF 80\n\nalternative Kamera:\n \nhttps://www.adafruit.com/product/1722 (siehe erster Link, \"Wetterstation und Himmelsbeobachtung Projekte\")\n\n\n ",
			"file": "/home/roman/Dokumente/Himmelsbeobachtung.txt",
			"file_size": 4316,
			"file_write_time": 132932132543347648,
			"settings":
			{
				"buffer_size": 4298,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMkQAAAAAAAAyhAAAAAAAAAAAAAA",
					"FAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJEAAAAAAAAMkQAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/timers.js",
			"settings":
			{
				"buffer_size": 528,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-misc.c",
			"settings":
			{
				"buffer_size": 63523,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"EQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiCwAAAAAAAHULAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/utils.c",
			"settings":
			{
				"buffer_size": 85897,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-predicate.c",
			"settings":
			{
				"buffer_size": 32742,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAA5ZAAAAAAAAD1kAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOWQAAAAAAAA5ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAA5ZAAAAAAAADlkAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPWQAAAAAAAA9ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAA5ZAAAAAAAAD1kAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOWQAAAAAAAA5ZAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARWQAAAAAAABFZAAAAAAAA////////738"
				],
				[
					56,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAD1fwAAI2luY2x1ZGUgImluY2x1ZGUvZGVmaW5lcy5oIgojaW5jbHVkZSA8cXVpY2tqcy5oPgojaW5jbHVkZSAicXVpY2tqcy1wcmVkaWNhdGUuaCIKI2luY2x1ZGUgImluY2x1ZGUvYnVmZmVyLXV0aWxzLmgiCiNpbmNsdWRlICJpbmNsdWRlL2RlYnVnLmgiCgovKioKICogXGFkZHRvZ3JvdXAgcXVpY2tqcy1wcmVkaWNhdGUKICogQHsKICovCnRocmVhZF9sb2NhbCBKU0NsYXNzSUQganNfcHJlZGljYXRlX2NsYXNzX2lkID0gMDsKdGhyZWFkX2xvY2FsIEpTVmFsdWUgcHJlZGljYXRlX3Byb3RvID0ge3tKU19UQUdfVU5ERUZJTkVEfX0sIHByZWRpY2F0ZV9jdG9yID0ge3tKU19UQUdfVU5ERUZJTkVEfX07CgpWSVNJQkxFIFByZWRpY2F0ZSoKanNfcHJlZGljYXRlX2RhdGEoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfcHJlZGljYXRlX2NsYXNzX2lkKTsKfQoKVklTSUJMRSBQcmVkaWNhdGUqCmpzX3ByZWRpY2F0ZV9kYXRhMihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfcHJlZGljYXRlX2NsYXNzX2lkKTsKfQoKZW51bSBwcmVkaWNhdGVfaWQKcHJlZGljYXRlX2lkKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFByZWRpY2F0ZSogcHJlZDsKICBlbnVtIHByZWRpY2F0ZV9pZCByZXQgPSAtMTsKCiAgaWYoKHByZWQgPSBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3ByZWRpY2F0ZV9jbGFzc19pZCkpKQogICAgcmV0ID0gcHJlZC0+aWQ7CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKcHJlZGljYXRlX2NvbnN0YW50KGNvbnN0IFByZWRpY2F0ZSogcHIsIEpTQ29udGV4dCogY3R4LCBCT09MIGNvbG9yKSB7CiAgRHluQnVmIGRidWYgPSB7MH07CiAgZGJ1Zl9pbml0MigmZGJ1ZiwgMCwgMCk7CiAgLy8ganNfZGJ1Zl9pbml0KGN0eCwgJmRidWYpOwoKICBkYnVmX3B1dHN0cigmZGJ1ZiwgY29sb3IgPyAiUHJlZGljYXRlIiBDT0xPUl9DWUFOIDogIlByZWRpY2F0ZSIpOwogIGRidWZfcHV0c3RyKCZkYnVmLCBjb2xvciA/ICIuIiBDT0xPUl9ZRUxMT1cgOiAiLiIpOwogIGRidWZfcHV0c3RyKCZkYnVmLCBwcmVkaWNhdGVfdHlwZW5hbWUocHIpKTsKICBkYnVmX3B1dHN0cigmZGJ1ZiwgY29sb3IgPyBDT0xPUl9OT05FIDogIiIpOwoKICByZXR1cm4gZGJ1Zl90b3N0cmluZ19mcmVlKCZkYnVmLCBjdHgpOwp9CgpzdGF0aWMgSlNWYWx1ZQpwcmVkaWNhdGVfZHVwYXJnKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpZihqc19pc19udWxsX29yX3VuZGVmaW5lZCh2YWx1ZSkpCiAgICByZXR1cm4gSlNfVU5ERUZJTkVEOwoKICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7Cn0KCnN0YXRpYyBKU1ZhbHVlCnByZWRpY2F0ZV9uZXh0YXJnKEpTQ29udGV4dCogY3R4LCBKU0FyZ3VtZW50cyogYXJncykgewogIEpTVmFsdWUgYXJnID0ganNfYXJndW1lbnRzX3NoaWZ0KGFyZ3MpOwogIHJldHVybiBwcmVkaWNhdGVfZHVwYXJnKGN0eCwgYXJnKTsKfQoKVklTSUJMRSBKU1ZhbHVlCmpzX3ByZWRpY2F0ZV9uZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBwcm90bywgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgUHJlZGljYXRlKiBwcjsKICBKU1ZhbHVlIG9iajsKICBpZighKHByID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihQcmVkaWNhdGUpKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIHByLT5pZCA9IC0xOwogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCBwcm90bywganNfcHJlZGljYXRlX2NsYXNzX2lkKTsKICBpZihKU19Jc0V4Y2VwdGlvbihvYmopKQogICAgZ290byBmYWlsOwogIEpTX1NldE9wYXF1ZShvYmosIHByKTsKICByZXR1cm4gb2JqOwpmYWlsOgogIGpzX2ZyZWUoY3R4LCBwcik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgpWSVNJQkxFIEpTVmFsdWUKanNfcHJlZGljYXRlX3dyYXAoSlNDb250ZXh0KiBjdHgsIFByZWRpY2F0ZSBwcikgewogIEpTVmFsdWUgb2JqOwogIFByZWRpY2F0ZSogcmV0OwoKICBpZighKHJldCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoUHJlZGljYXRlKSkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgKnJldCA9IHByOwoKICBvYmogPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgcHJlZGljYXRlX3Byb3RvLCBqc19wcmVkaWNhdGVfY2xhc3NfaWQpOwogIEpTX1NldE9wYXF1ZShvYmosIHJldCk7CiAgcmV0dXJuIG9iajsKfQoKc3RhdGljIEpTVmFsdWUKanNfcHJlZGljYXRlX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBQcmVkaWNhdGUqIHByOwogIEpTVmFsdWUgb2JqID0gSlNfVU5ERUZJTkVELCBwcm90byA9IEpTX1VOREVGSU5FRDsKCiAgaWYoIShwciA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoUHJlZGljYXRlKSkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgLyogdXNpbmcgbmV3X3RhcmdldCB0byBnZXQgdGhlIHByb3RvdHlwZSBpcyBuZWNlc3Nhcnkgd2hlbiB0aGUKICAgICBjbGFzcyBpcyBleHRlbmRlZC4gKi8KICBwcm90byA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgbmV3X3RhcmdldCwgInByb3RvdHlwZSIpOwogIGlmKEpTX0lzRXhjZXB0aW9uKHByb3RvKSkKICAgIGdvdG8gZmFpbDsKICBvYmogPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgcHJvdG8sIGpzX3ByZWRpY2F0ZV9jbGFzc19pZCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcHJvdG8pOwogIGlmKEpTX0lzRXhjZXB0aW9uKG9iaikpCiAgICBnb3RvIGZhaWw7CgogIEpTX1NldE9wYXF1ZShvYmosIHByKTsKCiAgaWYoYXJnYyA+IDAgJiYgSlNfSXNTdHJpbmcoYXJndlswXSkpIHsKICAgIHNpemVfdCBsZW4gPSAwOwogICAgY29uc3QgY2hhciogc3RyID0ganNfdG9zdHJpbmdsZW4oY3R4LCAmbGVuLCBhcmd2WzBdKTsKCiAgICAqcHIgPSBwcmVkaWNhdGVfc3RyaW5nKHN0ciwgbGVuKTsKCiAgfSBlbHNlIGlmKGFyZ2MgPiAwICYmIGpzX2lzX3JlZ2V4cChjdHgsIGFyZ3ZbMF0pKSB7CiAgICBhcmdjKys7CiAgICBhcmd2LS07CiAgICBnb3RvIHJlZ2V4cDsKCiAgfSBlbHNlIGlmKGFyZ2MgPiAwICYmIEpTX0lzTnVtYmVyKGFyZ3ZbMF0pKSB7CiAgICBpbnQzMl90IGlkOwogICAgSlNBcmd1bWVudHMgYXJncyA9IGpzX2FyZ3VtZW50c19uZXcoYXJnYywgYXJndik7CiAgICBKU19Ub0ludDMyKGN0eCwgJmlkLCBqc19hcmd1bWVudHNfc2hpZnQoJmFyZ3MpKTsKCiAgICBzd2l0Y2goaWQpIHsKICAgICAgY2FzZSBQUkVESUNBVEVfVFlQRTogewogICAgICAgIGlkID0gLTE7CiAgICAgICAgSlNfVG9JbnQzMihjdHgsICZpZCwganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKSk7CiAgICAgICAgKnByID0gcHJlZGljYXRlX3R5cGUoaWQpOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9DSEFSU0VUOiB7CiAgICAgICAgc2l6ZV90IGxlbiA9IDA7CiAgICAgICAgSlNWYWx1ZSBsZW52OwogICAgICAgIGNvbnN0IGNoYXIqIHN0ciA9IGpzX3Rvc3RyaW5nbGVuKGN0eCwgJmxlbiwganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKSk7CiAgICAgICAgaWYoSlNfSXNOdW1iZXIoKGxlbnYgPSBqc19hcmd1bWVudHNfc2hpZnQoJmFyZ3MpKSkpCiAgICAgICAgICBqc192YWx1ZV90b3NpemUoY3R4LCAmbGVuLCBsZW52KTsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfY2hhcnNldChzdHIsIGxlbik7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgUFJFRElDQVRFX1NUUklORzogewogICAgICAgIHNpemVfdCBsZW4gPSAwOwogICAgICAgIGNvbnN0IGNoYXIqIHN0ciA9IGpzX3Rvc3RyaW5nbGVuKGN0eCwgJmxlbiwganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKSk7CiAgICAgICAgKnByID0gcHJlZGljYXRlX3N0cmluZyhzdHIsIGxlbik7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgUFJFRElDQVRFX05PVE5PVDogewogICAgICAgICpwciA9IHByZWRpY2F0ZV9ub3Rub3QocHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncykpOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9OT1Q6IHsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfbm90KHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpKTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfQUREOiB7CiAgICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfYWRkKGxlZnQsIHJpZ2h0KTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfU1VCOiB7CiAgICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfc3ViKGxlZnQsIHJpZ2h0KTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfTVVMOiB7CiAgICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfbXVsKGxlZnQsIHJpZ2h0KTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfRElWOiB7CiAgICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfZGl2KGxlZnQsIHJpZ2h0KTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfTU9EOiB7CiAgICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfbW9kKGxlZnQsIHJpZ2h0KTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfQk9SOiB7CiAgICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfYm9yKGxlZnQsIHJpZ2h0KTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfQkFORDogewogICAgICAgIEpTVmFsdWUgbGVmdCwgcmlnaHQ7CiAgICAgICAgbGVmdCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICAgIHJpZ2h0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgICAgKnByID0gcHJlZGljYXRlX2JhbmQobGVmdCwgcmlnaHQpOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9PUjogewogICAgICAgICpwciA9IHByZWRpY2F0ZV9vcihhcmdjLCBqc192YWx1ZXNfZHVwKGN0eCwgYXJnYywgYXJndikpOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9BTkQ6IHsKICAgICAgICAqcHIgPSBwcmVkaWNhdGVfYW5kKGFyZ2MsIGpzX3ZhbHVlc19kdXAoY3R4LCBhcmdjLCBhcmd2KSk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgUFJFRElDQVRFX1hPUjogewogICAgICAgICpwciA9IHByZWRpY2F0ZV94b3IoYXJnYywganNfdmFsdWVzX2R1cChjdHgsIGFyZ2MsIGFyZ3YpKTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfUkVHRVhQOiB7CiAgICAgICAgUmVnRXhwIGV4cHI7CiAgICAgIHJlZ2V4cDoKICAgICAgICBleHByID0gcmVnZXhwX2Zyb21fYXJndihhcmdjIC0gMSwgYXJndiArIDEsIGN0eCk7CiAgICAgICAgKnByID0gcHJlZGljYXRlX3JlZ2V4cChleHByLnNvdXJjZSwgZXhwci5sZW4sIGV4cHIuZmxhZ3MpOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9JTlNUQU5DRU9GOiB7CiAgICAgICAgKnByID0gcHJlZGljYXRlX2luc3RhbmNlb2YocHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncykpOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9QUk9UT1RZUEVJUzogewogICAgICAgICpwciA9IHByZWRpY2F0ZV9wcm90b3R5cGUocHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncykpOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9FUVVBTDogewogICAgICAgICpwciA9IHByZWRpY2F0ZV9lcXVhbChwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKSk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgUFJFRElDQVRFX1BST1BFUlRZOiB7CiAgICAgICAgSlNBdG9tIHByb3AgPSAwOwogICAgICAgIEpTVmFsdWUgb2JqID0gSlNfVU5ERUZJTkVEOwoKICAgICAgICBKU1ZhbHVlIHByb3B2LCBvYmp2OwoKICAgICAgICBpZighanNfaXNfbnVsbF9vcl91bmRlZmluZWQoKHByb3B2ID0ganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKSkpKQogICAgICAgICAgcHJvcCA9IEpTX1ZhbHVlVG9BdG9tKGN0eCwgcHJvcHYpOwogICAgICAgIGlmKHByZWRpY2F0ZV9jYWxsYWJsZShjdHgsIChvYmp2ID0ganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKSkpKQogICAgICAgICAgb2JqID0gSlNfRHVwVmFsdWUoY3R4LCBvYmp2KTsKCiAgICAgICAgKnByID0gcHJlZGljYXRlX3Byb3BlcnR5KHByb3AsIG9iaik7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KCiAgICAgIGNhc2UgUFJFRElDQVRFX01FTUJFUjogewogICAgICAgIEpTVmFsdWUgb2JqID0ganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKTsKCiAgICAgICAgKnByID0gcHJlZGljYXRlX21lbWJlcihvYmopOwogICAgICAgIGJyZWFrOwogICAgICB9CgogICAgICBjYXNlIFBSRURJQ0FURV9TSElGVDogewogICAgICAgIGludDMyX3Qgc2hpZnQ7CiAgICAgICAgSlNfVG9JbnQzMihjdHgsICZzaGlmdCwganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKSk7CiAgICAgICAgKnByID0gcHJlZGljYXRlX3NoaWZ0KHNoaWZ0LCBqc19hcmd1bWVudHNfc2hpZnQoJmFyZ3MpKTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfU0xJQ0U6IHsKICAgICAgICBpbnQ2NF90IHN0YXJ0LCBlbmQ7CiAgICAgICAgSlNfVG9JbnQ2NChjdHgsICZzdGFydCwganNfYXJndW1lbnRzX3NoaWZ0KCZhcmdzKSk7CiAgICAgICAgSlNfVG9JbnQ2NChjdHgsICZlbmQsIGpzX2FyZ3VtZW50c19zaGlmdCgmYXJncykpOwogICAgICAgICpwciA9IHByZWRpY2F0ZV9zbGljZShzdGFydCwgZW5kKTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfSU5ERVg6IHsKICAgICAgICBpbnQ2NF90IHBvczsKICAgICAgICBKU1ZhbHVlIG9iaiA9IEpTX1VOREVGSU5FRDsKICAgICAgICBKU1ZhbHVlIG9ianY7CiAgICAgICAgSlNfVG9JbnQ2NChjdHgsICZwb3MsIGpzX2FyZ3VtZW50c19zaGlmdCgmYXJncykpOwoKICAgICAgICBpZihwcmVkaWNhdGVfY2FsbGFibGUoY3R4LCAob2JqdiA9IGpzX2FyZ3VtZW50c19zaGlmdCgmYXJncykpKSkKICAgICAgICAgIG9iaiA9IEpTX0R1cFZhbHVlKGN0eCwgb2Jqdik7CiAgICAgICAgKnByID0gcHJlZGljYXRlX2luZGV4KHBvcywgb2JqKTsKICAgICAgICBicmVhazsKICAgICAgfQoKICAgICAgY2FzZSBQUkVESUNBVEVfRlVOQ1RJT046IHsKICAgICAgICBKU1ZhbHVlIGZ1bmMsIHRoaXNfb2JqID0gSlNfVU5ERUZJTkVEOwogICAgICAgIGZ1bmMgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgICBpZihhcmdzLmMpCiAgICAgICAgICB0aGlzX29iaiA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICAgICpwciA9IHByZWRpY2F0ZV9mdW5jdGlvbihmdW5jLCB0aGlzX29iaiwgTUFYX05VTSgxLCBqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoY3R4LCBmdW5jLCAibGVuZ3RoIikpKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgfQogIH0KICByZXR1cm4gb2JqOwpmYWlsOgogIGpzX2ZyZWUoY3R4LCBwcik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgplbnVtIHsKICBNRVRIT0RfRVZBTCA9IDAsCiAgTUVUSE9EX0tFWVMsCiAgTUVUSE9EX1ZBTFVFUywKfTsKCnN0YXRpYyBKU1ZhbHVlCmpzX3ByZWRpY2F0ZV9tZXRob2QoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBtYWdpYykgewogIFByZWRpY2F0ZSogcHI7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKCEocHIgPSBqc19wcmVkaWNhdGVfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIE1FVEhPRF9FVkFMOiB7CiAgICAgIEpTQXJndW1lbnRzIGFyZ3MgPSBqc19hcmd1bWVudHNfbmV3KGFyZ2MsIGFyZ3YpOwogICAgICByZXQgPSBwcmVkaWNhdGVfZXZhbChwciwgY3R4LCAmYXJncyk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX0tFWVM6IHsKICAgICAgcmV0ID0gcHJlZGljYXRlX2tleXMocHIsIGN0eCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBNRVRIT0RfVkFMVUVTOiB7CiAgICAgIHJldCA9IHByZWRpY2F0ZV92YWx1ZXMocHIsIGN0eCk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gcmV0Owp9CgplbnVtIHsKICBPUEVSQVRPUl9QTFVTID0gMCwKICBPUEVSQVRPUl9NSU5VUywKICBPUEVSQVRPUl9NVUwsCiAgT1BFUkFUT1JfRElWLAogIE9QRVJBVE9SX01PRCwKICBPUEVSQVRPUl9CT1IsCiAgT1BFUkFUT1JfQkFORCwKICBPUEVSQVRPUl9QT1csCn07CgpzdGF0aWMgSlNWYWx1ZQpqc19wcmVkaWNhdGVfb3BlcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBtYWdpYykgewogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIEpTQXJndW1lbnRzIGFyZ3MgPSBqc19hcmd1bWVudHNfbmV3KGFyZ2MsIGFyZ3YpOwogIEpTVmFsdWUgbGVmdCwgcmlnaHQ7CiAgbGVmdCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogIHJpZ2h0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIE9QRVJBVE9SX1BMVVM6IHsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfYWRkKGxlZnQsIHJpZ2h0KSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBPUEVSQVRPUl9NSU5VUzogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9zdWIobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIE9QRVJBVE9SX01VTDogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9tdWwobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIE9QRVJBVE9SX0RJVjogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9kaXYobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIE9QRVJBVE9SX01PRDogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9tb2QobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIE9QRVJBVE9SX0JPUjogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9ib3IobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIE9QRVJBVE9SX0JBTkQ6IHsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfYmFuZChsZWZ0LCByaWdodCkpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgT1BFUkFUT1JfUE9XOiB7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX3BvdyhsZWZ0LCByaWdodCkpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfcHJlZGljYXRlX3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbWFnaWMpIHsKICBEeW5CdWYgZGJ1ZiA9IHswfTsKICBQcmVkaWNhdGUqIHByID0gMDsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAganNfZGJ1Zl9pbml0KGN0eCwgJmRidWYpOwoKICBpZighKHByID0ganNfcHJlZGljYXRlX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIGlmKG1hZ2ljKQogICAgcHJlZGljYXRlX3Rvc291cmNlKHByLCBjdHgsICZkYnVmLCAwKTsKICBlbHNlCiAgICBwcmVkaWNhdGVfZHVtcChwciwgY3R4LCAmZGJ1Zik7CgogIHJldCA9IEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKilkYnVmLmJ1ZiwgZGJ1Zi5zaXplKTsKICBkYnVmX2ZyZWUoJmRidWYpOwogIHJldHVybiByZXQ7Cn0KCmVudW0gewogIFBST1BfSUQgPSAwLAogIFBST1BfQVJHQywKfTsKCnN0YXRpYyBKU1ZhbHVlCmpzX3ByZWRpY2F0ZV9nZXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgUHJlZGljYXRlKiBwcjsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoIShwciA9IGpzX3ByZWRpY2F0ZV9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgUFJPUF9JRDogewogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIHByLT5pZCk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9BUkdDOiB7CiAgICAgIHJldCA9IEpTX05ld1VpbnQzMihjdHgsIHByZWRpY2F0ZV9yZWN1cnNpdmVfbnVtX2FyZ3MocHIpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3ByZWRpY2F0ZV9mdW5jdGlvbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljKSB7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIEpTQXJndW1lbnRzIGFyZ3MgPSBqc19hcmd1bWVudHNfbmV3KGFyZ2MsIGFyZ3YpOwoKICBzd2l0Y2gobWFnaWMpIHsKCiAgICBjYXNlIFBSRURJQ0FURV9UWVBFOiB7CiAgICAgIGludDMyX3QgdHlwZSA9IDA7CiAgICAgIEpTX1RvSW50MzIoY3R4LCAmdHlwZSwgYXJndlswXSk7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX3R5cGUodHlwZSkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBSRURJQ0FURV9DSEFSU0VUOiB7CiAgICAgIHNpemVfdCBzaXplID0gMDsKICAgICAgY29uc3QgY2hhciogc3RyID0ganNfdG9zdHJpbmdsZW4oY3R4LCAmc2l6ZSwgYXJndlswXSk7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX2NoYXJzZXQoc3RyLCBzaXplKSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX1NUUklORzogewogICAgICBzaXplX3Qgc2l6ZSA9IDA7CiAgICAgIGNvbnN0IGNoYXIqIHN0ciA9IGpzX3Rvc3RyaW5nbGVuKGN0eCwgJnNpemUsIGFyZ3ZbMF0pOwogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9zdHJpbmcoc3RyLCBzaXplKSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX05PVE5PVDogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9ub3Rub3QoSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzBdKSkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBSRURJQ0FURV9OT1Q6IHsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfbm90KHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpKSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX0FERDogewogICAgICBKU1ZhbHVlIGxlZnQsIHJpZ2h0OwogICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgIHJpZ2h0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX2FkZChsZWZ0LCByaWdodCkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBSRURJQ0FURV9TVUI6IHsKICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgbGVmdCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICByaWdodCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9zdWIobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUkVESUNBVEVfTVVMOiB7CiAgICAgIEpTVmFsdWUgbGVmdCwgcmlnaHQ7CiAgICAgIGxlZnQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfbXVsKGxlZnQsIHJpZ2h0KSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX0RJVjogewogICAgICBKU1ZhbHVlIGxlZnQsIHJpZ2h0OwogICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgIHJpZ2h0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX2RpdihsZWZ0LCByaWdodCkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBSRURJQ0FURV9NT0Q6IHsKICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgbGVmdCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICByaWdodCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9tb2QobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUkVESUNBVEVfQk9SOiB7CiAgICAgIEpTVmFsdWUgbGVmdCwgcmlnaHQ7CiAgICAgIGxlZnQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgcmlnaHQgPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfYm9yKGxlZnQsIHJpZ2h0KSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBQUkVESUNBVEVfQkFORDogewogICAgICBKU1ZhbHVlIGxlZnQsIHJpZ2h0OwogICAgICBsZWZ0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgIHJpZ2h0ID0gcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncyk7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX2JhbmQobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFBSRURJQ0FURV9QT1c6IHsKICAgICAgSlNWYWx1ZSBsZWZ0LCByaWdodDsKICAgICAgbGVmdCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICByaWdodCA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9wb3cobGVmdCwgcmlnaHQpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUkVESUNBVEVfT1I6IHsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfb3IoYXJnYywganNfdmFsdWVzX2R1cChjdHgsIGFyZ2MsIGFyZ3YpKSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX0FORDogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9hbmQoYXJnYywganNfdmFsdWVzX2R1cChjdHgsIGFyZ2MsIGFyZ3YpKSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX1hPUjogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV94b3IoYXJnYywganNfdmFsdWVzX2R1cChjdHgsIGFyZ2MsIGFyZ3YpKSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX1JFR0VYUDogewogICAgICBSZWdFeHAgZXhwciA9IHJlZ2V4cF9mcm9tX2FyZ3YoYXJnYywgYXJndiwgY3R4KTsKICAgICAgUHJlZGljYXRlIHByZWQgPSBwcmVkaWNhdGVfcmVnZXhwKGV4cHIuc291cmNlLCBleHByLmxlbiwgZXhwci5mbGFncyk7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZCk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJFRElDQVRFX0lOU1RBTkNFT0Y6IHsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfaW5zdGFuY2VvZihwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKSkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBSRURJQ0FURV9QUk9UT1RZUEVJUzogewogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9wcm90b3R5cGUocHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncykpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUkVESUNBVEVfRVFVQUw6IHsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfZXF1YWwocHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncykpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUkVESUNBVEVfUFJPUEVSVFk6IHsKICAgICAgSlNBdG9tIHByb3AgPSAwOwogICAgICBKU1ZhbHVlIHByZWQgPSBKU19VTkRFRklORUQ7CgogICAgICBpZihhcmdjID49IDEgJiYgIUpTX0lzTnVsbChhcmd2WzBdKSAmJiAhSlNfSXNVbmRlZmluZWQoYXJndlswXSkpCiAgICAgICAgcHJvcCA9IEpTX1ZhbHVlVG9BdG9tKGN0eCwgYXJndlswXSk7CiAgICAgIGlmKGFyZ2MgPj0gMiAmJiBwcmVkaWNhdGVfY2FsbGFibGUoY3R4LCBhcmd2WzFdKSkKICAgICAgICBwcmVkID0gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKTsKCiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX3Byb3BlcnR5KHByb3AsIHByZWQpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUkVESUNBVEVfTUVNQkVSOiB7CiAgICAgIEpTVmFsdWUgb2JqID0gSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzBdKTsKCiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX21lbWJlcihvYmopKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFBSRURJQ0FURV9TSElGVDogewogICAgICBpbnQzMl90IHNoaWZ0OwogICAgICBKU19Ub0ludDMyKGN0eCwgJnNoaWZ0LCBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKSk7CiAgICAgIHJldCA9IGpzX3ByZWRpY2F0ZV93cmFwKGN0eCwgcHJlZGljYXRlX3NoaWZ0KHNoaWZ0LCBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKSkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBSRURJQ0FURV9TTElDRTogewogICAgICBpbnQ2NF90IHN0YXJ0LCBlbmQ7CiAgICAgIEpTX1RvSW50NjQoY3R4LCAmc3RhcnQsIHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpKTsKICAgICAgSlNfVG9JbnQ2NChjdHgsICZlbmQsIHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpKTsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfc2xpY2Uoc3RhcnQsIGVuZCkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBSRURJQ0FURV9JTkRFWDogewogICAgICBpbnQ2NF90IHBvczsKICAgICAgSlNWYWx1ZSBwcmVkID0gSlNfVU5ERUZJTkVEOwogICAgICBKU19Ub0ludDY0KGN0eCwgJnBvcywgcHJlZGljYXRlX25leHRhcmcoY3R4LCAmYXJncykpOwogICAgICBpZihhcmdjID49IDIgJiYgcHJlZGljYXRlX2NhbGxhYmxlKGN0eCwgYXJndlsxXSkpCiAgICAgICAgcHJlZCA9IEpTX0R1cFZhbHVlKGN0eCwgYXJndlsxXSk7CgogICAgICByZXQgPSBqc19wcmVkaWNhdGVfd3JhcChjdHgsIHByZWRpY2F0ZV9pbmRleChwb3MsIHByZWQpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUkVESUNBVEVfRlVOQ1RJT046IHsKICAgICAgSlNWYWx1ZSBmdW5jLCB0aGlzX29iaiA9IEpTX1VOREVGSU5FRDsKICAgICAgZnVuYyA9IHByZWRpY2F0ZV9uZXh0YXJnKGN0eCwgJmFyZ3MpOwogICAgICBpZihhcmdzLmMpCiAgICAgICAgdGhpc19vYmogPSBwcmVkaWNhdGVfbmV4dGFyZyhjdHgsICZhcmdzKTsKICAgICAgcmV0ID0ganNfcHJlZGljYXRlX3dyYXAoY3R4LCBwcmVkaWNhdGVfZnVuY3Rpb24oZnVuYywgdGhpc19vYmosIE1BWF9OVU0oMSwganNfZ2V0X3Byb3BlcnR5c3RyX2ludDMyKGN0eCwgZnVuYywgImxlbmd0aCIpKSkpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19wcmVkaWNhdGVfY2FsbChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZ1bmNfb2JqLCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgZmxhZ3MpIHsKICBQcmVkaWNhdGUqIHByOwogIGludDMyX3QgcmVzdWx0OwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIEpTVmFsdWVDb25zdCBhcmcgPSBhcmdjID4gMCA/IGFyZ3ZbMF0gOiBKU19VTkRFRklORUQ7CgogIGlmKCEocHIgPSBqc19wcmVkaWNhdGVfZGF0YTIoY3R4LCBmdW5jX29iaikpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgaWYoanNfaXNfcHJvbWlzZShjdHgsIGFyZykpIHsKICAgIEpTQXRvbSB0aGVuID0gSlNfTmV3QXRvbShjdHgsICJ0aGVuIik7CiAgICByZXQgPSBKU19JbnZva2UoY3R4LCBhcmcsIHRoZW4sIDEsICZmdW5jX29iaik7CiAgICBKU19GcmVlQXRvbShjdHgsIHRoZW4pOwogIH0gZWxzZSB7CiAgICBKU0FyZ3VtZW50cyBhcmdzID0ganNfYXJndW1lbnRzX25ldyhhcmdjLCBhcmd2KTsKICAgIHJldCA9IHByZWRpY2F0ZV9ldmFsKHByLCBjdHgsICZhcmdzKTsKICAgIC8qCiAgICAgICAgc3dpdGNoKHJlc3VsdCkgewogICAgICAgICAgY2FzZSAwOiByZXQgPSBKU19OZXdCb29sKGN0eCwgRkFMU0UpOyBicmVhazsKICAgICAgICAgIGNhc2UgMTogcmV0ID0gSlNfTmV3Qm9vbChjdHgsIFRSVUUpOyBicmVhazsKICAgICAgICAgIGRlZmF1bHQ6IHJldCA9IEpTX05ld0ludDMyKGN0eCwgcmVzdWx0KTsgYnJlYWs7CiAgICAgICAgfSovCiAgfQogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3ByZWRpY2F0ZV9pbnNwZWN0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgUHJlZGljYXRlKiBwcjsKCiAgaWYoIShwciA9IGpzX3ByZWRpY2F0ZV9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICAvLyByZXR1cm4gcHJlZGljYXRlX3ZhbHVlcyhwciwgY3R4KTsKCiAgSlNWYWx1ZSBvYmogPSBKU19OZXdPYmplY3QgLypQcm90byovIChjdHggLyosIHByZWRpY2F0ZV9wcm90byovKTsKCiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImlkIiwgSlNfTmV3SW50MzIoY3R4LCBwci0+aWQpLCAwKTsKCiAganNfc2V0X3Rvc3RyaW5ndGFnX3ZhbHVlKGN0eCwgb2JqLCBwcmVkaWNhdGVfY29uc3RhbnQocHIsIGN0eCwgVFJVRSkpOwoKICBzd2l0Y2gocHItPmlkKSB7CiAgICBjYXNlIFBSRURJQ0FURV9UWVBFOiB7CiAgICAgIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJmbGFncyIsIEpTX05ld0ludDMyKGN0eCwgcHItPnR5cGUuZmxhZ3MpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX0NIQVJTRVQ6IHsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInNldCIsIEpTX05ld1N0cmluZ0xlbihjdHgsIHByLT5jaGFyc2V0LnNldCwgcHItPmNoYXJzZXQubGVuKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImxlbiIsIEpTX05ld1VpbnQzMihjdHgsIHByLT5jaGFyc2V0LmxlbiksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBQUkVESUNBVEVfU1RSSU5HOiB7CiAgICAgIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJzdHIiLCBKU19OZXdTdHJpbmdMZW4oY3R4LCBwci0+c3RyaW5nLnN0ciwgcHItPnN0cmluZy5sZW4pLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAibGVuIiwgSlNfTmV3VWludDMyKGN0eCwgcHItPnN0cmluZy5sZW4pLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX05PVDoKICAgIGNhc2UgUFJFRElDQVRFX05PVE5PVDoKICAgIGNhc2UgUFJFRElDQVRFX0JOT1Q6CiAgICBjYXNlIFBSRURJQ0FURV9TUVJUOiB7CiAgICAgIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJwcmVkaWNhdGUiLCBKU19EdXBWYWx1ZShjdHgsIHByLT51bmFyeS5wcmVkaWNhdGUpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX0FERDoKICAgIGNhc2UgUFJFRElDQVRFX1NVQjoKICAgIGNhc2UgUFJFRElDQVRFX01VTDoKICAgIGNhc2UgUFJFRElDQVRFX0RJVjoKICAgIGNhc2UgUFJFRElDQVRFX01PRDoKICAgIGNhc2UgUFJFRElDQVRFX0JPUjoKICAgIGNhc2UgUFJFRElDQVRFX0JBTkQ6CiAgICBjYXNlIFBSRURJQ0FURV9QT1c6CiAgICBjYXNlIFBSRURJQ0FURV9BVEFOMjogewogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAibGVmdCIsIEpTX0R1cFZhbHVlKGN0eCwgcHItPmJpbmFyeS5sZWZ0KSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInJpZ2h0IiwgSlNfRHVwVmFsdWUoY3R4LCBwci0+YmluYXJ5LnJpZ2h0KSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFBSRURJQ0FURV9PUjoKICAgIGNhc2UgUFJFRElDQVRFX0FORDoKICAgIGNhc2UgUFJFRElDQVRFX1hPUjogewogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAidmFsdWVzIiwganNfdmFsdWVzX3RvYXJyYXkoY3R4LCBwci0+Ym9vbGVhbi5ucHJlZGljYXRlcywgcHItPmJvb2xlYW4ucHJlZGljYXRlcyksIEpTX1BST1BfRU5VTUVSQUJMRSk7CgogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX1JFR0VYUDogewogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiZXhwciIsIHJlZ2V4cF90b192YWx1ZShwci0+cmVnZXhwLmV4cHIsIGN0eCksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBQUkVESUNBVEVfSU5TVEFOQ0VPRjogewogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiY29uc3RydWN0b3IiLCBKU19EdXBWYWx1ZShjdHgsIHByLT51bmFyeS5wcmVkaWNhdGUpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX1BST1RPVFlQRUlTOiB7CiAgICAgIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJwcm90b3R5cGUiLCBKU19EdXBWYWx1ZShjdHgsIHByLT51bmFyeS5wcmVkaWNhdGUpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX0VRVUFMOiB7CiAgICAgIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJwcmVkaWNhdGUiLCBKU19EdXBWYWx1ZShjdHgsIHByLT51bmFyeS5wcmVkaWNhdGUpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX1BST1BFUlRZOiB7CiAgICAgIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJhdG9tIiwgSlNfQXRvbVRvVmFsdWUoY3R4LCBwci0+cHJvcGVydHkuYXRvbSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgICAgIGlmKCFqc19pc19udWxsX29yX3VuZGVmaW5lZChwci0+cHJvcGVydHkucHJlZGljYXRlKSkKICAgICAgICBpZihwcmVkaWNhdGVfY2FsbGFibGUoY3R4LCBwci0+cHJvcGVydHkucHJlZGljYXRlKSkKICAgICAgICAgIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJwcmVkaWNhdGUiLCBKU19EdXBWYWx1ZShjdHgsIHByLT5wcm9wZXJ0eS5wcmVkaWNhdGUpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJFRElDQVRFX01FTUJFUjogewogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAib2JqZWN0IiwgSlNfRHVwVmFsdWUoY3R4LCBwci0+bWVtYmVyLm9iamVjdCksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBQUkVESUNBVEVfU0hJRlQ6IHsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgIm4iLCBKU19OZXdJbnQzMihjdHgsIHByLT5zaGlmdC5uKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInByZWRpY2F0ZSIsIEpTX0R1cFZhbHVlKGN0eCwgcHItPnNoaWZ0LnByZWRpY2F0ZSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBQUkVESUNBVEVfU0xJQ0U6IHsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInN0YXJ0IiwgSlNfTmV3SW50NjQoY3R4LCBwci0+c2xpY2Uuc3RhcnQpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiZW5kIiwgSlNfTmV3SW50NjQoY3R4LCBwci0+c2xpY2UuZW5kKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFBSRURJQ0FURV9JTkRFWDogewogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAicG9zIiwgSlNfTmV3SW50NjQoY3R4LCBwci0+aW5kZXgucG9zKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInByZWRpY2F0ZSIsIEpTX0R1cFZhbHVlKGN0eCwgcHItPmluZGV4LnByZWRpY2F0ZSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBQUkVESUNBVEVfRlVOQ1RJT046IHsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImZ1bmMiLCBKU19EdXBWYWx1ZShjdHgsIHByLT5mdW5jdGlvbi5mdW5jKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInRoaXNfb2JqIiwgSlNfRHVwVmFsdWUoY3R4LCBwci0+ZnVuY3Rpb24udGhpc192YWwpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogICAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiYXJpdHkiLCBKU19OZXdJbnQzMihjdHgsIHByLT5mdW5jdGlvbi5hcml0eSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KCiAgcmV0dXJuIG9iajsKfQoKc3RhdGljIHZvaWQKanNfcHJlZGljYXRlX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCBKU1ZhbHVlIHZhbCkgewogIFByZWRpY2F0ZSogcHI7CgogIGlmKChwciA9IEpTX0dldE9wYXF1ZSh2YWwsIGpzX3ByZWRpY2F0ZV9jbGFzc19pZCkpKSB7CgogICAgcHJlZGljYXRlX2ZyZWVfcnQocHIsIHJ0KTsKCiAgICAvLyAgIGpzX2ZyZWVfcnQocnQsIHByKTsKICB9CiAgLy8gSlNfRnJlZVZhbHVlUlQocnQsIHZhbCk7Cn0KCnN0YXRpYyBKU0NsYXNzRGVmIGpzX3ByZWRpY2F0ZV9jbGFzcyA9IHsKICAgIC5jbGFzc19uYW1lID0gIlByZWRpY2F0ZSIsCiAgICAuZmluYWxpemVyID0ganNfcHJlZGljYXRlX2ZpbmFsaXplciwKICAgIC5jYWxsID0ganNfcHJlZGljYXRlX2NhbGwsCn07CgpzdGF0aWMgY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfcHJlZGljYXRlX29wZXJhdG9yX2Z1bmNzW10gPSB7CiAgICBKU19DRlVOQ19NQUdJQ19ERUYoIisiLCAyLCBqc19wcmVkaWNhdGVfb3BlcmF0b3IsIE9QRVJBVE9SX1BMVVMpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCItIiwgMiwganNfcHJlZGljYXRlX29wZXJhdG9yLCBPUEVSQVRPUl9NSU5VUyksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoIioiLCAyLCBqc19wcmVkaWNhdGVfb3BlcmF0b3IsIE9QRVJBVE9SX01VTCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoIi8iLCAyLCBqc19wcmVkaWNhdGVfb3BlcmF0b3IsIE9QRVJBVE9SX0RJViksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoIiUiLCAyLCBqc19wcmVkaWNhdGVfb3BlcmF0b3IsIE9QRVJBVE9SX01PRCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInwiLCAyLCBqc19wcmVkaWNhdGVfb3BlcmF0b3IsIE9QRVJBVE9SX0JPUiksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoIiYiLCAyLCBqc19wcmVkaWNhdGVfb3BlcmF0b3IsIE9QRVJBVE9SX0JBTkQpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCIqKiIsIDIsIGpzX3ByZWRpY2F0ZV9vcGVyYXRvciwgT1BFUkFUT1JfUE9XKSwKfTsKCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19wcmVkaWNhdGVfcHJvdG9fZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZXZhbCIsIDEsIGpzX3ByZWRpY2F0ZV9tZXRob2QsIE1FVEhPRF9FVkFMKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigidG9TdHJpbmciLCAwLCBqc19wcmVkaWNhdGVfdG9zdHJpbmcsIDApLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJ0b1NvdXJjZSIsIDAsIGpzX3ByZWRpY2F0ZV90b3N0cmluZywgMSksCiAgICBKU19BTElBU19ERUYoImNhbGwiLCAiZXZhbCIpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19GTEFHU19ERUYoImlkIiwganNfcHJlZGljYXRlX2dldCwgMCwgUFJPUF9JRCwgSlNfUFJPUF9DT05GSUdVUkFCTEUpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJrZXlzIiwgMCwganNfcHJlZGljYXRlX21ldGhvZCwgTUVUSE9EX0tFWVMpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJ2YWx1ZXMiLCAwLCBqc19wcmVkaWNhdGVfbWV0aG9kLCBNRVRIT0RfVkFMVUVTKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJsZW5ndGgiLCBqc19wcmVkaWNhdGVfZ2V0LCAwLCBQUk9QX0FSR0MpLAogICAgLy8gSlNfUFJPUF9TVFJJTkdfREVGKCJbU3ltYm9sLnRvU3RyaW5nVGFnXSIsICJQcmVkaWNhdGUiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksCn07CgpzdGF0aWMgY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfcHJlZGljYXRlX2Z1bmNzW10gPSB7CiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInR5cGUiLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9UWVBFKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiY2hhcnNldCIsIDEsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX0NIQVJTRVQpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJzdHJpbmciLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9TVFJJTkcpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJub3QiLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9OT1QpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJub3Rub3QiLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9OT1ROT1QpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJibm90IiwgMSwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfQk5PVCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNxcnQiLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9TUVJUKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiYWRkIiwgMiwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfQUREKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigic3ViIiwgMiwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfU1VCKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigibXVsIiwgMiwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfTVVMKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZGl2IiwgMiwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfRElWKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigibW9kIiwgMiwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfTU9EKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiYm9yIiwgMiwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfQk9SKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiYmFuZCIsIDIsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX0JBTkQpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJwb3ciLCAyLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9QT1cpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJhdGFuMiIsIDIsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX0FUQU4yKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigib3IiLCAyLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9PUiksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImFuZCIsIDIsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX0FORCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInhvciIsIDIsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX1hPUiksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInJlZ2V4cCIsIDEsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX1JFR0VYUCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImluc3RhbmNlT2YiLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9JTlNUQU5DRU9GKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigicHJvdG90eXBlSXMiLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9QUk9UT1RZUEVJUyksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImVxdWFsIiwgMSwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfRVFVQUwpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJwcm9wZXJ0eSIsIDEsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX1BST1BFUlRZKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigibWVtYmVyIiwgMSwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfTUVNQkVSKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2hpZnQiLCAyLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9TSElGVCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNsaWNlIiwgMCwganNfcHJlZGljYXRlX2Z1bmN0aW9uLCBQUkVESUNBVEVfU0xJQ0UpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJpbmRleCIsIDEsIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiwgUFJFRElDQVRFX0lOREVYKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZnVuY3Rpb24iLCAxLCBqc19wcmVkaWNhdGVfZnVuY3Rpb24sIFBSRURJQ0FURV9GVU5DVElPTiksCn07CgpzdGF0aWMgY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfcHJlZGljYXRlX2lkc1tdID0gewogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlRZUEUiLCBQUkVESUNBVEVfVFlQRSwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJDSEFSU0VUIiwgUFJFRElDQVRFX0NIQVJTRVQsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiU1RSSU5HIiwgUFJFRElDQVRFX1NUUklORywgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJOT1ROT1QiLCBQUkVESUNBVEVfTk9UTk9ULCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIk5PVCIsIFBSRURJQ0FURV9OT1QsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiQk5PVCIsIFBSRURJQ0FURV9CTk9ULCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlNRUlQiLCBQUkVESUNBVEVfU1FSVCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJBREQiLCBQUkVESUNBVEVfQURELCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlNVQiIsIFBSRURJQ0FURV9TVUIsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTVVMIiwgUFJFRElDQVRFX01VTCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJESVYiLCBQUkVESUNBVEVfRElWLCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIk1PRCIsIFBSRURJQ0FURV9NT0QsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiQk9SIiwgUFJFRElDQVRFX0JPUiwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJCQU5EIiwgUFJFRElDQVRFX0JBTkQsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiUE9XIiwgUFJFRElDQVRFX1BPVywgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJBVEFOMiIsIFBSRURJQ0FURV9BVEFOMiwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJPUiIsIFBSRURJQ0FURV9PUiwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJBTkQiLCBQUkVESUNBVEVfQU5ELCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlhPUiIsIFBSRURJQ0FURV9YT1IsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiUkVHRVhQIiwgUFJFRElDQVRFX1JFR0VYUCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJJTlNUQU5DRU9GIiwgUFJFRElDQVRFX0lOU1RBTkNFT0YsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiUFJPVE9UWVBFSVMiLCBQUkVESUNBVEVfUFJPVE9UWVBFSVMsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiRVFVQUwiLCBQUkVESUNBVEVfRVFVQUwsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiUFJPUEVSVFkiLCBQUkVESUNBVEVfUFJPUEVSVFksIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiTUVNQkVSIiwgUFJFRElDQVRFX01FTUJFUiwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJTSElGVCIsIFBSRURJQ0FURV9TSElGVCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJTTElDRSIsIFBSRURJQ0FURV9TTElDRSwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJJTkRFWCIsIFBSRURJQ0FURV9JTkRFWCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKfTsKCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19wcmVkaWNhdGVfdHlwZXNbXSA9IHsKICAgIEpTX1BST1BfSU5UMzJfREVGKCJUWVBFX1VOREVGSU5FRCIsIFRZUEVfVU5ERUZJTkVELCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlRZUEVfTlVMTCIsIFRZUEVfTlVMTCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJUWVBFX0JPT0wiLCBUWVBFX0JPT0wsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiVFlQRV9JTlQiLCBUWVBFX0lOVCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJUWVBFX09CSkVDVCIsIFRZUEVfT0JKRUNULCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlRZUEVfU1RSSU5HIiwgVFlQRV9TVFJJTkcsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiVFlQRV9TWU1CT0wiLCBUWVBFX1NZTUJPTCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJUWVBFX0JJR19GTE9BVCIsIFRZUEVfQklHX0ZMT0FULCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlRZUEVfQklHX0lOVCIsIFRZUEVfQklHX0lOVCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJUWVBFX0JJR19ERUNJTUFMIiwgVFlQRV9CSUdfREVDSU1BTCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJUWVBFX0ZMT0FUNjQiLCBUWVBFX0ZMT0FUNjQsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiVFlQRV9OVU1CRVIiLCBUWVBFX05VTUJFUiwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJUWVBFX1BSSU1JVElWRSIsIFRZUEVfUFJJTUlUSVZFLCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIlRZUEVfQUxMIiwgVFlQRV9BTEwsIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiVFlQRV9GVU5DVElPTiIsIFRZUEVfRlVOQ1RJT04sIEpTX1BST1BfRU5VTUVSQUJMRSksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiVFlQRV9BUlJBWSIsIFRZUEVfQVJSQVksIEpTX1BST1BfRU5VTUVSQUJMRSksCn07CgpzdGF0aWMgaW50CmpzX3ByZWRpY2F0ZV9pbml0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewoKICBKU19OZXdDbGFzc0lEKCZqc19wcmVkaWNhdGVfY2xhc3NfaWQpOwogIEpTX05ld0NsYXNzKEpTX0dldFJ1bnRpbWUoY3R4KSwganNfcHJlZGljYXRlX2NsYXNzX2lkLCAmanNfcHJlZGljYXRlX2NsYXNzKTsKCiAgcHJlZGljYXRlX3Byb3RvID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBwcmVkaWNhdGVfcHJvdG8sIGpzX3ByZWRpY2F0ZV9wcm90b19mdW5jcywgY291bnRvZihqc19wcmVkaWNhdGVfcHJvdG9fZnVuY3MpKTsKICBKU19TZXRDbGFzc1Byb3RvKGN0eCwganNfcHJlZGljYXRlX2NsYXNzX2lkLCBwcmVkaWNhdGVfcHJvdG8pOwoKICBwcmVkaWNhdGVfY3RvciA9IEpTX05ld0NGdW5jdGlvbjIoY3R4LCBqc19wcmVkaWNhdGVfY29uc3RydWN0b3IsICJQcmVkaWNhdGUiLCAxLCBKU19DRlVOQ19jb25zdHJ1Y3RvciwgMCk7CgogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgcHJlZGljYXRlX2N0b3IsIHByZWRpY2F0ZV9wcm90byk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBwcmVkaWNhdGVfY3RvciwganNfcHJlZGljYXRlX2Z1bmNzLCBjb3VudG9mKGpzX3ByZWRpY2F0ZV9mdW5jcykpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgcHJlZGljYXRlX2N0b3IsIGpzX3ByZWRpY2F0ZV9pZHMsIGNvdW50b2YoanNfcHJlZGljYXRlX2lkcykpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgcHJlZGljYXRlX2N0b3IsIGpzX3ByZWRpY2F0ZV90eXBlcywgY291bnRvZihqc19wcmVkaWNhdGVfdHlwZXMpKTsKCiAganNfc2V0X2luc3BlY3RfbWV0aG9kKGN0eCwgcHJlZGljYXRlX3Byb3RvLCBqc19wcmVkaWNhdGVfaW5zcGVjdCk7CgogIEpTVmFsdWUgb3BlcmF0b3JzLCBvcGVyYXRvcnNfY3JlYXRlOwogIEpTQXRvbSBvcGVyYXRvcnNfc2V0ID0ganNfc3ltYm9sX29wZXJhdG9yc2V0X2F0b20oY3R4KTsKCiAgb3BlcmF0b3JzX2NyZWF0ZSA9IGpzX29wZXJhdG9yc19jcmVhdGUoY3R4LCAmb3BlcmF0b3JzKTsKCiAgSlNWYWx1ZSBwcmVkaWNhdGVfb3BlcmF0b3JzID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBwcmVkaWNhdGVfb3BlcmF0b3JzLCBqc19wcmVkaWNhdGVfb3BlcmF0b3JfZnVuY3MsIGNvdW50b2YoanNfcHJlZGljYXRlX29wZXJhdG9yX2Z1bmNzKSk7CgogIEpTVmFsdWVDb25zdCBhcmdzWzNdID0ge3ByZWRpY2F0ZV9vcGVyYXRvcnMsIEpTX05ld09iamVjdChjdHgpLCBKU19OZXdPYmplY3QoY3R4KX07CgogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgYXJnc1sxXSwganNfcHJlZGljYXRlX29wZXJhdG9yX2Z1bmNzLCBjb3VudG9mKGpzX3ByZWRpY2F0ZV9vcGVyYXRvcl9mdW5jcykpOwoKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGFyZ3NbMV0sICJsZWZ0IiwganNfZ2xvYmFsX2dldF9zdHIoY3R4LCAiTnVtYmVyIikpOwoKICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIGFyZ3NbMl0sIGpzX3ByZWRpY2F0ZV9vcGVyYXRvcl9mdW5jcywgY291bnRvZihqc19wcmVkaWNhdGVfb3BlcmF0b3JfZnVuY3MpKTsKCiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBhcmdzWzJdLCAicmlnaHQiLCBqc19nbG9iYWxfZ2V0X3N0cihjdHgsICJOdW1iZXIiKSk7CgogIEpTVmFsdWUgcHJlZGljYXRlX29wZXJhdG9yc2V0ID0gSlNfQ2FsbChjdHgsIG9wZXJhdG9yc19jcmVhdGUsIG9wZXJhdG9ycywgMywgYXJncyk7CiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZShjdHgsIHByZWRpY2F0ZV9wcm90bywgb3BlcmF0b3JzX3NldCwgcHJlZGljYXRlX29wZXJhdG9yc2V0LCBKU19QUk9QX0NPTkZJR1VSQUJMRSB8IEpTX1BST1BfV1JJVEFCTEUpOwoKICBKU19GcmVlVmFsdWUoY3R4LCBvcGVyYXRvcnMpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIG9wZXJhdG9yc19jcmVhdGUpOwogIC8vIEpTX0ZyZWVWYWx1ZShjdHgsIHByZWRpY2F0ZV9vcGVyYXRvcnMpOwogIEpTX0ZyZWVBdG9tKGN0eCwgb3BlcmF0b3JzX3NldCk7CgogIGlmKG0pIHsKICAgIEpTX1NldE1vZHVsZUV4cG9ydChjdHgsIG0sICJQcmVkaWNhdGUiLCBwcmVkaWNhdGVfY3Rvcik7CiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUHJlZGljYXRlT3BlcmF0b3JzIiwgcHJlZGljYXRlX29wZXJhdG9ycyk7CiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUHJlZGljYXRlT3BlcmF0b3JTZXQiLCBwcmVkaWNhdGVfb3BlcmF0b3JzZXQpOwogICAgSlNfU2V0TW9kdWxlRXhwb3J0TGlzdChjdHgsIG0sIGpzX3ByZWRpY2F0ZV9mdW5jcywgY291bnRvZihqc19wcmVkaWNhdGVfZnVuY3MpKTsKICAgIEpTX1NldE1vZHVsZUV4cG9ydExpc3QoY3R4LCBtLCBqc19wcmVkaWNhdGVfdHlwZXMsIGNvdW50b2YoanNfcHJlZGljYXRlX3R5cGVzKSk7CiAgfQoKICByZXR1cm4gMDsKfQoKI2lmZGVmIEpTX1NIQVJFRF9MSUJSQVJZCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSBqc19pbml0X21vZHVsZV9wcmVkaWNhdGUKI2VuZGlmCgpWSVNJQkxFIEpTTW9kdWxlRGVmKgpKU19JTklUX01PRFVMRShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpIHsKICBKU01vZHVsZURlZiogbTsKICBtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCAmanNfcHJlZGljYXRlX2luaXQpOwogIGlmKCFtKQogICAgcmV0dXJuIE5VTEw7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlByZWRpY2F0ZSIpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJQcmVkaWNhdGVPcGVyYXRvcnMiKTsKICBKU19BZGRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiUHJlZGljYXRlT3BlcmF0b3JTZXQiKTsKICBKU19BZGRNb2R1bGVFeHBvcnRMaXN0KGN0eCwgbSwganNfcHJlZGljYXRlX2Z1bmNzLCBjb3VudG9mKGpzX3ByZWRpY2F0ZV9mdW5jcykpOwogIEpTX0FkZE1vZHVsZUV4cG9ydExpc3QoY3R4LCBtLCBqc19wcmVkaWNhdGVfdHlwZXMsIGNvdW50b2YoanNfcHJlZGljYXRlX3R5cGVzKSk7CiAgcmV0dXJuIG07Cn0KCi8qKgogKiBAfQogKi8KAAAAAAAAAADmfwAAAAAAAAAAAAAAAAAAAAAAAOZ/AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/QgAAAAAAAERDAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "/*\n * QuickJS Javascript Engine\n *\n * Copyright (c) 2017-2021 Fabrice Bellard\n * Copyright (c) 2017-2021 Charlie Gordon\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n#ifndef QUICKJS_H\n#define QUICKJS_H\n\n#include <stdio.h>\n#include <stdint.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(__GNUC__) || defined(__clang__)\n#define js_likely(x) __builtin_expect(!!(x), 1)\n#define js_unlikely(x) __builtin_expect(!!(x), 0)\n#define js_force_inline inline __attribute__((always_inline))\n#define __js_printf_like(f, a) __attribute__((format(printf, f, a)))\n#else\n#define js_likely(x) (x)\n#define js_unlikely(x) (x)\n#define js_force_inline inline\n#define __js_printf_like(a, b)\n#endif\n\n#define JS_BOOL int\n\ntypedef struct JSRuntime JSRuntime;\ntypedef struct JSContext JSContext;\ntypedef struct JSObject JSObject;\ntypedef struct JSClass JSClass;\ntypedef uint32_t JSClassID;\ntypedef uint32_t JSAtom;\n\n#if INTPTR_MAX >= INT64_MAX\n#define JS_PTR64\n#define JS_PTR64_DEF(a) a\n#else\n#define JS_PTR64_DEF(a)\n#endif\n\n#ifndef JS_PTR64\n#define JS_NAN_BOXING\n#endif\n\nenum {\n  /* all tags with a reference count are negative */\n  JS_TAG_FIRST = -11, /* first negative tag */\n  JS_TAG_BIG_DECIMAL = -11,\n  JS_TAG_BIG_INT = -10,\n  JS_TAG_BIG_FLOAT = -9,\n  JS_TAG_SYMBOL = -8,\n  JS_TAG_STRING = -7,\n  JS_TAG_MODULE = -3,            /* used internally */\n  JS_TAG_FUNCTION_BYTECODE = -2, /* used internally */\n  JS_TAG_OBJECT = -1,\n\n  JS_TAG_INT = 0,\n  JS_TAG_BOOL = 1,\n  JS_TAG_NULL = 2,\n  JS_TAG_UNDEFINED = 3,\n  JS_TAG_UNINITIALIZED = 4,\n  JS_TAG_CATCH_OFFSET = 5,\n  JS_TAG_EXCEPTION = 6,\n  JS_TAG_FLOAT64 = 7,\n  /* any larger tag is FLOAT64 if JS_NAN_BOXING */\n};\n\ntypedef struct JSRefCountHeader {\n  int ref_count;\n} JSRefCountHeader;\n\n#define JS_FLOAT64_NAN NAN\n\n#ifdef CONFIG_CHECK_JSVALUE\n/* JSValue consistency : it is not possible to run the code in this\n   mode, but it is useful to detect simple reference counting\n   errors. It would be interesting to modify a static C analyzer to\n   handle specific annotations (clang has such annotations but only\n   for objective C) */\ntypedef struct __JSValue* JSValue;\ntypedef const struct __JSValue* JSValueConst;\n\n#define JS_VALUE_GET_TAG(v) (int)((uintptr_t)(v)&0xf)\n/* same as JS_VALUE_GET_TAG, but return JS_TAG_FLOAT64 with NaN boxing */\n#define JS_VALUE_GET_NORM_TAG(v) JS_VALUE_GET_TAG(v)\n#define JS_VALUE_GET_INT(v) (int)((intptr_t)(v) >> 4)\n#define JS_VALUE_GET_BOOL(v) JS_VALUE_GET_INT(v)\n#define JS_VALUE_GET_FLOAT64(v) (double)JS_VALUE_GET_INT(v)\n#define JS_VALUE_GET_PTR(v) (void*)((intptr_t)(v) & ~0xf)\n\n#define JS_MKVAL(tag, val) (JSValue)(intptr_t)(((val) << 4) | (tag))\n#define JS_MKPTR(tag, p) (JSValue)((intptr_t)(p) | (tag))\n\n#define JS_TAG_IS_FLOAT64(tag) ((unsigned)(tag) == JS_TAG_FLOAT64)\n\n#define JS_NAN JS_MKVAL(JS_TAG_FLOAT64, 1)\n\nstatic inline JSValue\n__JS_NewFloat64(JSContext* ctx, double d) {\n  return JS_MKVAL(JS_TAG_FLOAT64, (int)d);\n}\n\nstatic inline JS_BOOL\nJS_VALUE_IS_NAN(JSValue v) {\n  return 0;\n}\n\n#elif defined(JS_NAN_BOXING)\n\ntypedef uint64_t JSValue;\n\n#define JSValueConst JSValue\n\n#define JS_VALUE_GET_TAG(v) (int)((v) >> 32)\n#define JS_VALUE_GET_INT(v) (int)(v)\n#define JS_VALUE_GET_BOOL(v) (int)(v)\n#define JS_VALUE_GET_PTR(v) (void*)(intptr_t)(v)\n\n#define JS_MKVAL(tag, val) (((uint64_t)(tag) << 32) | (uint32_t)(val))\n#define JS_MKPTR(tag, ptr) (((uint64_t)(tag) << 32) | (uintptr_t)(ptr))\n\n#define JS_FLOAT64_TAG_ADDEND (0x7ff80000 - JS_TAG_FIRST + 1) /* quiet NaN encoding */\n\nstatic inline double\nJS_VALUE_GET_FLOAT64(JSValue v) {\n  union {\n    JSValue v;\n    double d;\n  } u;\n  u.v = v;\n  u.v += (uint64_t)JS_FLOAT64_TAG_ADDEND << 32;\n  return u.d;\n}\n\n#define JS_NAN (0x7ff8000000000000 - ((uint64_t)JS_FLOAT64_TAG_ADDEND << 32))\n\nstatic inline JSValue\n__JS_NewFloat64(JSContext* ctx, double d) {\n  union {\n    double d;\n    uint64_t u64;\n  } u;\n  JSValue v;\n  u.d = d;\n  /* normalize NaN */\n  if(js_unlikely((u.u64 & 0x7fffffffffffffff) > 0x7ff0000000000000))\n    v = JS_NAN;\n  else\n    v = u.u64 - ((uint64_t)JS_FLOAT64_TAG_ADDEND << 32);\n  return v;\n}\n\n#define JS_TAG_IS_FLOAT64(tag) ((unsigned)((tag)-JS_TAG_FIRST) >= (JS_TAG_FLOAT64 - JS_TAG_FIRST))\n\n/* same as JS_VALUE_GET_TAG, but return JS_TAG_FLOAT64 with NaN boxing */\nstatic inline int\nJS_VALUE_GET_NORM_TAG(JSValue v) {\n  uint32_t tag;\n  tag = JS_VALUE_GET_TAG(v);\n  if(JS_TAG_IS_FLOAT64(tag))\n    return JS_TAG_FLOAT64;\n  else\n    return tag;\n}\n\nstatic inline JS_BOOL\nJS_VALUE_IS_NAN(JSValue v) {\n  uint32_t tag;\n  tag = JS_VALUE_GET_TAG(v);\n  return tag == (JS_NAN >> 32);\n}\n\n#else /* !JS_NAN_BOXING */\n\ntypedef union JSValueUnion {\n  int32_t int32;\n  double float64;\n  void* ptr;\n} JSValueUnion;\n\ntypedef struct JSValue {\n  JSValueUnion u;\n  int64_t tag;\n} JSValue;\n\n#define JSValueConst JSValue\n\n#define JS_VALUE_GET_TAG(v) ((int32_t)(v).tag)\n/* same as JS_VALUE_GET_TAG, but return JS_TAG_FLOAT64 with NaN boxing */\n#define JS_VALUE_GET_NORM_TAG(v) JS_VALUE_GET_TAG(v)\n#define JS_VALUE_GET_INT(v) ((v).u.int32)\n#define JS_VALUE_GET_BOOL(v) ((v).u.int32)\n#define JS_VALUE_GET_FLOAT64(v) ((v).u.float64)\n#define JS_VALUE_GET_PTR(v) ((v).u.ptr)\n\n#define JS_MKVAL(tag, val) \\\n  (JSValue) { (JSValueUnion){.int32 = val}, tag }\n#define JS_MKPTR(tag, p) \\\n  (JSValue) { (JSValueUnion){.ptr = p}, tag }\n\n#define JS_TAG_IS_FLOAT64(tag) ((unsigned)(tag) == JS_TAG_FLOAT64)\n\n#define JS_NAN \\\n  (JSValue) { .u.float64 = JS_FLOAT64_NAN, JS_TAG_FLOAT64 }\n\nstatic inline JSValue\n__JS_NewFloat64(JSContext* ctx, double d) {\n  JSValue v;\n  v.tag = JS_TAG_FLOAT64;\n  v.u.float64 = d;\n  return v;\n}\n\nstatic inline JS_BOOL\nJS_VALUE_IS_NAN(JSValue v) {\n  union {\n    double d;\n    uint64_t u64;\n  } u;\n  if(v.tag != JS_TAG_FLOAT64)\n    return 0;\n  u.d = v.u.float64;\n  return (u.u64 & 0x7fffffffffffffff) > 0x7ff0000000000000;\n}\n\n#endif /* !JS_NAN_BOXING */\n\n#define JS_VALUE_IS_BOTH_INT(v1, v2) ((JS_VALUE_GET_TAG(v1) | JS_VALUE_GET_TAG(v2)) == 0)\n#define JS_VALUE_IS_BOTH_FLOAT(v1, v2) (JS_TAG_IS_FLOAT64(JS_VALUE_GET_TAG(v1)) && JS_TAG_IS_FLOAT64(JS_VALUE_GET_TAG(v2)))\n\n#define JS_VALUE_GET_OBJ(v) ((JSObject*)JS_VALUE_GET_PTR(v))\n#define JS_VALUE_GET_STRING(v) ((JSString*)JS_VALUE_GET_PTR(v))\n#define JS_VALUE_HAS_REF_COUNT(v) ((unsigned)JS_VALUE_GET_TAG(v) >= (unsigned)JS_TAG_FIRST)\n\n/* special values */\n#define JS_NULL JS_MKVAL(JS_TAG_NULL, 0)\n#define JS_UNDEFINED JS_MKVAL(JS_TAG_UNDEFINED, 0)\n#define JS_FALSE JS_MKVAL(JS_TAG_BOOL, 0)\n#define JS_TRUE JS_MKVAL(JS_TAG_BOOL, 1)\n#define JS_EXCEPTION JS_MKVAL(JS_TAG_EXCEPTION, 0)\n#define JS_UNINITIALIZED JS_MKVAL(JS_TAG_UNINITIALIZED, 0)\n\n/* flags for object properties */\n#define JS_PROP_CONFIGURABLE (1 << 0)\n#define JS_PROP_WRITABLE (1 << 1)\n#define JS_PROP_ENUMERABLE (1 << 2)\n#define JS_PROP_C_W_E (JS_PROP_CONFIGURABLE | JS_PROP_WRITABLE | JS_PROP_ENUMERABLE)\n#define JS_PROP_LENGTH (1 << 3) /* used internally in Arrays */\n#define JS_PROP_TMASK (3 << 4)  /* mask for NORMAL, GETSET, VARREF, AUTOINIT */\n#define JS_PROP_NORMAL (0 << 4)\n#define JS_PROP_GETSET (1 << 4)\n#define JS_PROP_VARREF (2 << 4)   /* used internally */\n#define JS_PROP_AUTOINIT (3 << 4) /* used internally */\n\n/* flags for JS_DefineProperty */\n#define JS_PROP_HAS_SHIFT 8\n#define JS_PROP_HAS_CONFIGURABLE (1 << 8)\n#define JS_PROP_HAS_WRITABLE (1 << 9)\n#define JS_PROP_HAS_ENUMERABLE (1 << 10)\n#define JS_PROP_HAS_GET (1 << 11)\n#define JS_PROP_HAS_SET (1 << 12)\n#define JS_PROP_HAS_VALUE (1 << 13)\n\n/* throw an exception if false would be returned\n   (JS_DefineProperty/JS_SetProperty) */\n#define JS_PROP_THROW (1 << 14)\n/* throw an exception if false would be returned in strict mode\n   (JS_SetProperty) */\n#define JS_PROP_THROW_STRICT (1 << 15)\n\n#define JS_PROP_NO_ADD (1 << 16)    /* internal use */\n#define JS_PROP_NO_EXOTIC (1 << 17) /* internal use */\n\n#define JS_DEFAULT_STACK_SIZE (256 * 1024)\n\n/* JS_Eval() flags */\n#define JS_EVAL_TYPE_GLOBAL (0 << 0)   /* global code (default) */\n#define JS_EVAL_TYPE_MODULE (1 << 0)   /* module code */\n#define JS_EVAL_TYPE_DIRECT (2 << 0)   /* direct call (internal use) */\n#define JS_EVAL_TYPE_INDIRECT (3 << 0) /* indirect call (internal use) */\n#define JS_EVAL_TYPE_MASK (3 << 0)\n\n#define JS_EVAL_FLAG_STRICT (1 << 3) /* force 'strict' mode */\n#define JS_EVAL_FLAG_STRIP (1 << 4)  /* force 'strip' mode */\n/* compile but do not run. The result is an object with a\n   JS_TAG_FUNCTION_BYTECODE or JS_TAG_MODULE tag. It can be executed\n   with JS_EvalFunction(). */\n#define JS_EVAL_FLAG_COMPILE_ONLY (1 << 5)\n/* don't include the stack frames before this eval in the Error() backtraces */\n#define JS_EVAL_FLAG_BACKTRACE_BARRIER (1 << 6)\n\ntypedef JSValue JSCFunction(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv);\ntypedef JSValue JSCFunctionMagic(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic);\ntypedef JSValue\nJSCFunctionData(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic, JSValue* func_data);\ntypedef JSValue JSCClosure(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic, void* opaque);\n\ntypedef struct JSMallocState {\n  size_t malloc_count;\n  size_t malloc_size;\n  size_t malloc_limit;\n  void* opaque; /* user opaque */\n} JSMallocState;\n\ntypedef struct JSMallocFunctions {\n  void* (*js_malloc)(JSMallocState* s, size_t size);\n  void (*js_free)(JSMallocState* s, void* ptr);\n  void* (*js_realloc)(JSMallocState* s, void* ptr, size_t size);\n  size_t (*js_malloc_usable_size)(const void* ptr);\n} JSMallocFunctions;\n\ntypedef struct JSGCObjectHeader JSGCObjectHeader;\n\nJSRuntime* JS_NewRuntime(void);\n/* info lifetime must exceed that of rt */\nvoid JS_SetRuntimeInfo(JSRuntime* rt, const char* info);\nvoid JS_SetMemoryLimit(JSRuntime* rt, size_t limit);\nvoid JS_SetGCThreshold(JSRuntime* rt, size_t gc_threshold);\n/* use 0 to disable maximum stack size check */\nvoid JS_SetMaxStackSize(JSRuntime* rt, size_t stack_size);\n/* should be called when changing thread to update the stack top value\n   used to check stack overflow. */\nvoid JS_UpdateStackTop(JSRuntime* rt);\nJSRuntime* JS_NewRuntime2(const JSMallocFunctions* mf, void* opaque);\nvoid JS_FreeRuntime(JSRuntime* rt);\nvoid* JS_GetRuntimeOpaque(JSRuntime* rt);\nvoid JS_SetRuntimeOpaque(JSRuntime* rt, void* opaque);\ntypedef void JS_MarkFunc(JSRuntime* rt, JSGCObjectHeader* gp);\nvoid JS_MarkValue(JSRuntime* rt, JSValueConst val, JS_MarkFunc* mark_func);\nvoid JS_RunGC(JSRuntime* rt);\nJS_BOOL JS_IsLiveObject(JSRuntime* rt, JSValueConst obj);\n\nJSContext* JS_NewContext(JSRuntime* rt);\nvoid JS_FreeContext(JSContext* s);\nJSContext* JS_DupContext(JSContext* ctx);\nvoid* JS_GetContextOpaque(JSContext* ctx);\nvoid JS_SetContextOpaque(JSContext* ctx, void* opaque);\nJSRuntime* JS_GetRuntime(JSContext* ctx);\nvoid JS_SetClassProto(JSContext* ctx, JSClassID class_id, JSValue obj);\nJSValue JS_GetClassProto(JSContext* ctx, JSClassID class_id);\n\n/* the following functions are used to select the intrinsic object to\n   save memory */\nJSContext* JS_NewContextRaw(JSRuntime* rt);\nvoid JS_AddIntrinsicBaseObjects(JSContext* ctx);\nvoid JS_AddIntrinsicDate(JSContext* ctx);\nvoid JS_AddIntrinsicEval(JSContext* ctx);\nvoid JS_AddIntrinsicStringNormalize(JSContext* ctx);\nvoid JS_AddIntrinsicRegExpCompiler(JSContext* ctx);\nvoid JS_AddIntrinsicRegExp(JSContext* ctx);\nvoid JS_AddIntrinsicJSON(JSContext* ctx);\nvoid JS_AddIntrinsicProxy(JSContext* ctx);\nvoid JS_AddIntrinsicMapSet(JSContext* ctx);\nvoid JS_AddIntrinsicTypedArrays(JSContext* ctx);\nvoid JS_AddIntrinsicPromise(JSContext* ctx);\nvoid JS_AddIntrinsicBigInt(JSContext* ctx);\nvoid JS_AddIntrinsicBigFloat(JSContext* ctx);\nvoid JS_AddIntrinsicBigDecimal(JSContext* ctx);\n/* enable operator overloading */\nvoid JS_AddIntrinsicOperators(JSContext* ctx);\n/* enable \"use math\" */\nvoid JS_EnableBignumExt(JSContext* ctx, JS_BOOL enable);\n\nJSValue js_string_codePointRange(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv);\n\nvoid* js_malloc_rt(JSRuntime* rt, size_t size);\nvoid js_free_rt(JSRuntime* rt, void* ptr);\nvoid* js_realloc_rt(JSRuntime* rt, void* ptr, size_t size);\nsize_t js_malloc_usable_size_rt(JSRuntime* rt, const void* ptr);\nvoid* js_mallocz_rt(JSRuntime* rt, size_t size);\n\nvoid* js_malloc(JSContext* ctx, size_t size);\nvoid js_free(JSContext* ctx, void* ptr);\nvoid* js_realloc(JSContext* ctx, void* ptr, size_t size);\nsize_t js_malloc_usable_size(JSContext* ctx, const void* ptr);\nvoid* js_realloc2(JSContext* ctx, void* ptr, size_t size, size_t* pslack);\nvoid* js_mallocz(JSContext* ctx, size_t size);\nchar* js_strdup(JSContext* ctx, const char* str);\nchar* js_strndup(JSContext* ctx, const char* s, size_t n);\n\ntypedef struct JSMemoryUsage {\n  int64_t malloc_size, malloc_limit, memory_used_size;\n  int64_t malloc_count;\n  int64_t memory_used_count;\n  int64_t atom_count, atom_size;\n  int64_t str_count, str_size;\n  int64_t obj_count, obj_size;\n  int64_t prop_count, prop_size;\n  int64_t shape_count, shape_size;\n  int64_t js_func_count, js_func_size, js_func_code_size;\n  int64_t js_func_pc2line_count, js_func_pc2line_size;\n  int64_t c_func_count, array_count;\n  int64_t fast_array_count, fast_array_elements;\n  int64_t binary_object_count, binary_object_size;\n} JSMemoryUsage;\n\nvoid JS_ComputeMemoryUsage(JSRuntime* rt, JSMemoryUsage* s);\nvoid JS_DumpMemoryUsage(FILE* fp, const JSMemoryUsage* s, JSRuntime* rt);\n\n/* atom support */\n#define JS_ATOM_NULL 0\n\nJSAtom JS_NewAtomLen(JSContext* ctx, const char* str, size_t len);\nJSAtom JS_NewAtom(JSContext* ctx, const char* str);\nJSAtom JS_NewAtomUInt32(JSContext* ctx, uint32_t n);\nJSAtom JS_DupAtom(JSContext* ctx, JSAtom v);\nvoid JS_FreeAtom(JSContext* ctx, JSAtom v);\nvoid JS_FreeAtomRT(JSRuntime* rt, JSAtom v);\nJSValue JS_AtomToValue(JSContext* ctx, JSAtom atom);\nJSValue JS_AtomToString(JSContext* ctx, JSAtom atom);\nconst char* JS_AtomToCString(JSContext* ctx, JSAtom atom);\nJSAtom JS_ValueToAtom(JSContext* ctx, JSValueConst val);\n\n/* object class support */\n\ntypedef struct JSPropertyEnum {\n  JS_BOOL is_enumerable;\n  JSAtom atom;\n} JSPropertyEnum;\n\ntypedef struct JSPropertyDescriptor {\n  int flags;\n  JSValue value;\n  JSValue getter;\n  JSValue setter;\n} JSPropertyDescriptor;\n\ntypedef struct JSClassExoticMethods {\n  /* Return -1 if exception (can only happen in case of Proxy object),\n     FALSE if the property does not exists, TRUE if it exists. If 1 is\n     returned, the property descriptor 'desc' is filled if != NULL. */\n  int (*get_own_property)(JSContext* ctx, JSPropertyDescriptor* desc, JSValueConst obj, JSAtom prop);\n  /* '*ptab' should hold the '*plen' property keys. Return 0 if OK,\n     -1 if exception. The 'is_enumerable' field is ignored.\n  */\n  int (*get_own_property_names)(JSContext* ctx, JSPropertyEnum** ptab, uint32_t* plen, JSValueConst obj);\n  /* return < 0 if exception, or TRUE/FALSE */\n  int (*delete_property)(JSContext* ctx, JSValueConst obj, JSAtom prop);\n  /* return < 0 if exception or TRUE/FALSE */\n  int (*define_own_property)(JSContext* ctx,\n                             JSValueConst this_obj,\n                             JSAtom prop,\n                             JSValueConst val,\n                             JSValueConst getter,\n                             JSValueConst setter,\n                             int flags);\n  /* The following methods can be emulated with the previous ones,\n     so they are usually not needed */\n  /* return < 0 if exception or TRUE/FALSE */\n  int (*has_property)(JSContext* ctx, JSValueConst obj, JSAtom atom);\n  JSValue (*get_property)(JSContext* ctx, JSValueConst obj, JSAtom atom, JSValueConst receiver);\n  /* return < 0 if exception or TRUE/FALSE */\n  int (*set_property)(JSContext* ctx, JSValueConst obj, JSAtom atom, JSValueConst value, JSValueConst receiver, int flags);\n} JSClassExoticMethods;\n\ntypedef void JSClassFinalizer(JSRuntime* rt, JSValue val);\ntypedef void JSClassGCMark(JSRuntime* rt, JSValueConst val, JS_MarkFunc* mark_func);\n#define JS_CALL_FLAG_CONSTRUCTOR (1 << 0)\ntypedef JSValue\nJSClassCall(JSContext* ctx, JSValueConst func_obj, JSValueConst this_val, int argc, JSValueConst* argv, int flags);\n\ntypedef struct JSClassDef {\n  const char* class_name;\n  JSClassFinalizer* finalizer;\n  JSClassGCMark* gc_mark;\n  /* if call != NULL, the object is a function. If (flags &\n     JS_CALL_FLAG_CONSTRUCTOR) != 0, the function is called as a\n     constructor. In this case, 'this_val' is new.target. A\n     constructor call only happens if the object constructor bit is\n     set (see JS_SetConstructorBit()). */\n  JSClassCall* call;\n  /* XXX: suppress this indirection ? It is here only to save memory\n     because only a few classes need these methods */\n  JSClassExoticMethodsJSClassExoticMethods* exotic;\n} JSClassDef;\n\nJSClassID JS_NewClassID(JSClassID* pclass_id);\nJSClassID JS_GetClassID(JSValueConst v);\nint JS_NewClass(JSRuntime* rt, JSClassID class_id, const JSClassDef* class_def);\nint JS_IsRegisteredClass(JSRuntime* rt, JSClassID class_id);\n\n/* value handling */\n\nstatic js_force_inline JSValue\nJS_NewBool(JSContext* ctx, JS_BOOL val) {\n  return JS_MKVAL(JS_TAG_BOOL, (val != 0));\n}\n\nstatic js_force_inline JSValue\nJS_NewInt32(JSContext* ctx, int32_t val) {\n  return JS_MKVAL(JS_TAG_INT, val);\n}\n\nstatic js_force_inline JSValue\nJS_NewCatchOffset(JSContext* ctx, int32_t val) {\n  return JS_MKVAL(JS_TAG_CATCH_OFFSET, val);\n}\n\nstatic js_force_inline JSValue\nJS_NewInt64(JSContext* ctx, int64_t val) {\n  JSValue v;\n  if(val == (int32_t)val) {\n    v = JS_NewInt32(ctx, val);\n  } else {\n    v = __JS_NewFloat64(ctx, val);\n  }\n  return v;\n}\n\nstatic js_force_inline JSValue\nJS_NewUint32(JSContext* ctx, uint32_t val) {\n  JSValue v;\n  if(val <= 0x7fffffff) {\n    v = JS_NewInt32(ctx, val);\n  } else {\n    v = __JS_NewFloat64(ctx, val);\n  }\n  return v;\n}\n\nJSValue JS_NewBigInt64(JSContext* ctx, int64_t v);\nJSValue JS_NewBigUint64(JSContext* ctx, uint64_t v);\n\nstatic js_force_inline JSValue\nJS_NewFloat64(JSContext* ctx, double d) {\n  JSValue v;\n  int32_t val;\n  union {\n    double d;\n    uint64_t u;\n  } u, t;\n  u.d = d;\n  val = (int32_t)d;\n  t.d = val;\n  /* -0 cannot be represented as integer, so we compare the bit\n      representation */\n  if(u.u == t.u) {\n    v = JS_MKVAL(JS_TAG_INT, val);\n  } else {\n    v = __JS_NewFloat64(ctx, d);\n  }\n  return v;\n}\n\nstatic inline JS_BOOL\nJS_IsNumber(JSValueConst v) {\n  int tag = JS_VALUE_GET_TAG(v);\n  return tag == JS_TAG_INT || JS_TAG_IS_FLOAT64(tag);\n}\n\nstatic inline JS_BOOL\nJS_IsBigInt(JSContext* ctx, JSValueConst v) {\n  int tag = JS_VALUE_GET_TAG(v);\n  return tag == JS_TAG_BIG_INT;\n}\n\nstatic inline JS_BOOL\nJS_IsBigFloat(JSValueConst v) {\n  int tag = JS_VALUE_GET_TAG(v);\n  return tag == JS_TAG_BIG_FLOAT;\n}\n\nstatic inline JS_BOOL\nJS_IsBigDecimal(JSValueConst v) {\n  int tag = JS_VALUE_GET_TAG(v);\n  return tag == JS_TAG_BIG_DECIMAL;\n}\n\nstatic inline JS_BOOL\nJS_IsBool(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v) == JS_TAG_BOOL;\n}\n\nstatic inline JS_BOOL\nJS_IsNull(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v) == JS_TAG_NULL;\n}\n\nstatic inline JS_BOOL\nJS_IsUndefined(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v) == JS_TAG_UNDEFINED;\n}\n\nstatic inline JS_BOOL\nJS_IsException(JSValueConst v) {\n  return js_unlikely(JS_VALUE_GET_TAG(v) == JS_TAG_EXCEPTION);\n}\n\nstatic inline JS_BOOL\nJS_IsUninitialized(JSValueConst v) {\n  return js_unlikely(JS_VALUE_GET_TAG(v) == JS_TAG_UNINITIALIZED);\n}\n\nstatic inline JS_BOOL\nJS_IsString(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v) == JS_TAG_STRING;\n}\n\nstatic inline JS_BOOL\nJS_IsSymbol(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v) == JS_TAG_SYMBOL;\n}\n\nstatic inline JS_BOOL\nJS_IsObject(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v) == JS_TAG_OBJECT;\n}\n\nJSValue JS_Throw(JSContext* ctx, JSValue obj);\nJSValue JS_GetException(JSContext* ctx);\nJS_BOOL JS_IsError(JSContext* ctx, JSValueConst val);\nvoid JS_ResetUncatchableError(JSContext* ctx);\nJSValue JS_NewError(JSContext* ctx);\nJSValue JS_NewUncatchableError(JSContext* ctx);\nJSValue __js_printf_like(2, 3) JS_ThrowSyntaxError(JSContext* ctx, const char* fmt, ...);\nJSValue __js_printf_like(2, 3) JS_ThrowTypeError(JSContext* ctx, const char* fmt, ...);\nJSValue __js_printf_like(2, 3) JS_ThrowReferenceError(JSContext* ctx, const char* fmt, ...);\nJSValue __js_printf_like(2, 3) JS_ThrowRangeError(JSContext* ctx, const char* fmt, ...);\nJSValue __js_printf_like(2, 3) JS_ThrowInternalError(JSContext* ctx, const char* fmt, ...);\nJSValue JS_ThrowOutOfMemory(JSContext* ctx);\n\nvoid __JS_FreeValue(JSContext* ctx, JSValue v);\nstatic inline void\nJS_FreeValue(JSContext* ctx, JSValue v) {\n  if(JS_VALUE_HAS_REF_COUNT(v)) {\n    JSRefCountHeader* p = (JSRefCountHeader*)JS_VALUE_GET_PTR(v);\n    if(--p->ref_count <= 0) {\n      __JS_FreeValue(ctx, v);\n    }\n  }\n}\nvoid __JS_FreeValueRT(JSRuntime* rt, JSValue v);\nstatic inline void\nJS_FreeValueRT(JSRuntime* rt, JSValue v) {\n  if(JS_VALUE_HAS_REF_COUNT(v)) {\n    JSRefCountHeader* p = (JSRefCountHeader*)JS_VALUE_GET_PTR(v);\n    if(--p->ref_count <= 0) {\n      __JS_FreeValueRT(rt, v);\n    }\n  }\n}\n\nstatic inline JSValue\nJS_DupValue(JSContext* ctx, JSValueConst v) {\n  if(JS_VALUE_HAS_REF_COUNT(v)) {\n    JSRefCountHeader* p = (JSRefCountHeader*)JS_VALUE_GET_PTR(v);\n    p->ref_count++;\n  }\n  return (JSValue)v;\n}\n\nstatic inline JSValue\nJS_DupValueRT(JSRuntime* rt, JSValueConst v) {\n  if(JS_VALUE_HAS_REF_COUNT(v)) {\n    JSRefCountHeader* p = (JSRefCountHeader*)JS_VALUE_GET_PTR(v);\n    p->ref_count++;\n  }\n  return (JSValue)v;\n}\n\nint JS_ToBool(JSContext* ctx, JSValueConst val); /* return -1 for JS_EXCEPTION */\nint JS_ToInt32(JSContext* ctx, int32_t* pres, JSValueConst val);\nstatic inline int\nJS_ToUint32(JSContext* ctx, uint32_t* pres, JSValueConst val) {\n  return JS_ToInt32(ctx, (int32_t*)pres, val);\n}\nint JS_ToInt64(JSContext* ctx, int64_t* pres, JSValueConst val);\nint JS_ToIndex(JSContext* ctx, uint64_t* plen, JSValueConst val);\nint JS_ToFloat64(JSContext* ctx, double* pres, JSValueConst val);\n/* return an exception if 'val' is a Number */\nint JS_ToBigInt64(JSContext* ctx, int64_t* pres, JSValueConst val);\n/* same as JS_ToInt64() but allow BigInt */\nint JS_ToInt64Ext(JSContext* ctx, int64_t* pres, JSValueConst val);\n\nJSValue JS_NewStringLen(JSContext* ctx, const char* str1, size_t len1);\nJSValue JS_NewString(JSContext* ctx, const char* str);\nJSValue JS_NewAtomString(JSContext* ctx, const char* str);\nJSValue JS_ToString(JSContext* ctx, JSValueConst val);\nJSValue JS_ToPropertyKey(JSContext* ctx, JSValueConst val);\nconst char* JS_ToCStringLen2(JSContext* ctx, size_t* plen, JSValueConst val1, JS_BOOL cesu8);\nstatic inline const char*\nJS_ToCStringLen(JSContext* ctx, size_t* plen, JSValueConst val1) {\n  return JS_ToCStringLen2(ctx, plen, val1, 0);\n}\nstatic inline const char*\nJS_ToCString(JSContext* ctx, JSValueConst val1) {\n  return JS_ToCStringLen2(ctx, NULL, val1, 0);\n}\nvoid JS_FreeCString(JSContext* ctx, const char* ptr);\n\nJSValue JS_NewObjectProtoClass(JSContext* ctx, JSValueConst proto, JSClassID class_id);\nJSValue JS_NewObjectClass(JSContext* ctx, int class_id);\nJSValue JS_NewObjectProto(JSContext* ctx, JSValueConst proto);\nJSValue JS_NewObject(JSContext* ctx);\n\nJS_BOOL JS_IsFunction(JSContext* ctx, JSValueConst val);\nJS_BOOL JS_IsConstructor(JSContext* ctx, JSValueConst val);\nJS_BOOL JS_SetConstructorBit(JSContext* ctx, JSValueConst func_obj, JS_BOOL val);\n\nJSValue JS_NewArray(JSContext* ctx);\nint JS_IsArray(JSContext* ctx, JSValueConst val);\n\nJSValue JS_GetPropertyInternal(JSContext* ctx, JSValueConst obj, JSAtom prop, JSValueConst receiver, JS_BOOL throw_ref_error);\nstatic js_force_inline JSValue\nJS_GetProperty(JSContext* ctx, JSValueConst this_obj, JSAtom prop) {\n  return JS_GetPropertyInternal(ctx, this_obj, prop, this_obj, 0);\n}\nJSValue JS_GetPropertyStr(JSContext* ctx, JSValueConst this_obj, const char* prop);\nJSValue JS_GetPropertyUint32(JSContext* ctx, JSValueConst this_obj, uint32_t idx);\n\nint JS_SetPropertyInternal(JSContext* ctx, JSValueConst this_obj, JSAtom prop, JSValue val, int flags);\nstatic inline int\nJS_SetProperty(JSContext* ctx, JSValueConst this_obj, JSAtom prop, JSValue val) {\n  return JS_SetPropertyInternal(ctx, this_obj, prop, val, JS_PROP_THROW);\n}\nint JS_SetPropertyUint32(JSContext* ctx, JSValueConst this_obj, uint32_t idx, JSValue val);\nint JS_SetPropertyInt64(JSContext* ctx, JSValueConst this_obj, int64_t idx, JSValue val);\nint JS_SetPropertyStr(JSContext* ctx, JSValueConst this_obj, const char* prop, JSValue val);\nint JS_HasProperty(JSContext* ctx, JSValueConst this_obj, JSAtom prop);\nint JS_IsExtensible(JSContext* ctx, JSValueConst obj);\nint JS_PreventExtensions(JSContext* ctx, JSValueConst obj);\nint JS_DeleteProperty(JSContext* ctx, JSValueConst obj, JSAtom prop, int flags);\nint JS_SetPrototype(JSContext* ctx, JSValueConst obj, JSValueConst proto_val);\nJSValue JS_GetPrototype(JSContext* ctx, JSValueConst val);\n\n#define JS_GPN_STRING_MASK (1 << 0)\n#define JS_GPN_SYMBOL_MASK (1 << 1)\n#define JS_GPN_PRIVATE_MASK (1 << 2)\n/* only include the enumerable properties */\n#define JS_GPN_ENUM_ONLY (1 << 4)\n/* set theJSPropertyEnum.is_enumerable field */\n#define JS_GPN_SET_ENUM (1 << 5)\n\nint JS_GetOwnPropertyNames(JSContext* ctx, JSPropertyEnum** ptab, uint32_t* plen, JSValueConst obj, int flags);\nint JS_GetOwnProperty(JSContext* ctx, JSPropertyDescriptor* desc, JSValueConst obj, JSAtom prop);\n\nJSValue JS_Call(JSContext* ctx, JSValueConst func_obj, JSValueConst this_obj, int argc, JSValueConst* argv);\nJSValue JS_Invoke(JSContext* ctx, JSValueConst this_val, JSAtom atom, int argc, JSValueConst* argv);\nJSValue JS_CallConstructor(JSContext* ctx, JSValueConst func_obj, int argc, JSValueConst* argv);\nJSValue JS_CallConstructor2(JSContext* ctx, JSValueConst func_obj, JSValueConst new_target, int argc, JSValueConst* argv);\nJS_BOOL JS_DetectModule(const char* input, size_t input_len);\n/* 'input' must be zero terminated i.e. input[input_len] = '\\0'. */\nJSValue JS_Eval(JSContext* ctx, const char* input, size_t input_len, const char* filename, int eval_flags);\n/* same as JS_Eval() but with an explicit 'this_obj' parameter */\nJSValue\nJS_EvalThis(JSContext* ctx, JSValueConst this_obj, const char* input, size_t input_len, const char* filename, int eval_flags);\nJSValue JS_GetGlobalObject(JSContext* ctx);\nint JS_IsInstanceOf(JSContext* ctx, JSValueConst val, JSValueConst obj);\nint JS_DefineProperty(\n    JSContext* ctx, JSValueConst this_obj, JSAtom prop, JSValueConst val, JSValueConst getter, JSValueConst setter, int flags);\nint JS_DefinePropertyValue(JSContext* ctx, JSValueConst this_obj, JSAtom prop, JSValue val, int flags);\nint JS_DefinePropertyValueUint32(JSContext* ctx, JSValueConst this_obj, uint32_t idx, JSValue val, int flags);\nint JS_DefinePropertyValueStr(JSContext* ctx, JSValueConst this_obj, const char* prop, JSValue val, int flags);\nint JS_DefinePropertyGetSet(JSContext* ctx, JSValueConst this_obj, JSAtom prop, JSValue getter, JSValue setter, int flags);\nvoid JS_SetOpaque(JSValue obj, void* opaque);\nvoid* JS_GetOpaque(JSValueConst obj, JSClassID class_id);\nvoid* JS_GetOpaque2(JSContext* ctx, JSValueConst obj, JSClassID class_id);\n\n/* 'buf' must be zero terminated i.e. buf[buf_len] = '\\0'. */\nJSValue JS_ParseJSON(JSContext* ctx, const char* buf, size_t buf_len, const char* filename);\n#define JS_PARSE_JSON_EXT (1 << 0) /* allow extended JSON */\nJSValue JS_ParseJSON2(JSContext* ctx, const char* buf, size_t buf_len, const char* filename, int flags);\nJSValue JS_JSONStringify(JSContext* ctx, JSValueConst obj, JSValueConst replacer, JSValueConst space0);\n\ntypedef void JSFreeArrayBufferDataFunc(JSRuntime* rt, void* opaque, void* ptr);\nJSValue JS_NewArrayBuffer(\n    JSContext* ctx, uint8_t* buf, size_t len, JSFreeArrayBufferDataFunc* free_func, void* opaque, JS_BOOL is_shared);\nJSValue JS_NewArrayBufferCopy(JSContext* ctx, const uint8_t* buf, size_t len);\nvoid JS_DetachArrayBuffer(JSContext* ctx, JSValueConst obj);\nuint8_t* JS_GetArrayBuffer(JSContext* ctx, size_t* psize, JSValueConst obj);\nJSValue JS_GetTypedArrayBuffer(\n    JSContext* ctx, JSValueConst obj, size_t* pbyte_offset, size_t* pbyte_length, size_t* pbytes_per_element);\ntypedef struct {\n  void* (*sab_alloc)(void* opaque, size_t size);\n  void (*sab_free)(void* opaque, void* ptr);\n  void (*sab_dup)(void* opaque, void* ptr);\n  void* sab_opaque;\n} JSSharedArrayBufferFunctions;\nvoid JS_SetSharedArrayBufferFunctions(JSRuntime* rt, const JSSharedArrayBufferFunctions* sf);\n\nJSValue JS_NewPromiseCapability(JSContext* ctx, JSValue* resolving_funcs);\n\n/* is_handled = TRUE means that the rejection is handled */\ntypedef void\nJSHostPromiseRejectionTracker(JSContext* ctx, JSValueConst promise, JSValueConst reason, JS_BOOL is_handled, void* opaque);\nvoid JS_SetHostPromiseRejectionTracker(JSRuntime* rt, JSHostPromiseRejectionTracker* cb, void* opaque);\n\n/* return != 0 if the JS code needs to be interrupted */\ntypedef int JSInterruptHandler(JSRuntime* rt, void* opaque);\nvoid JS_SetInterruptHandler(JSRuntime* rt, JSInterruptHandler* cb, void* opaque);\n/* if can_block is TRUE, Atomics.wait() can be used */\nvoid JS_SetCanBlock(JSRuntime* rt, JS_BOOL can_block);\n/* set the [IsHTMLDDA] internal slot */\nvoid JS_SetIsHTMLDDA(JSContext* ctx, JSValueConst obj);\n\ntypedef struct JSModuleDef JSModuleDef;\n\n/* return the module specifier (allocated with js_malloc()) or NULL if\n   exception */\ntypedef char* JSModuleNormalizeFunc(JSContext* ctx, const char* module_base_name, const char* module_name, void* opaque);\ntypedef JSModuleDef* JSModuleLoaderFunc(JSContext* ctx, const char* module_name, void* opaque);\n\n/* module_normalize = NULL is allowed and invokes the default module\n   filename normalizer */\nvoid\nJS_SetModuleLoaderFunc(JSRuntime* rt, JSModuleNormalizeFunc* module_normalize, JSModuleLoaderFunc* module_loader, void* opaque);\n/* return the import.meta object of a module */\nJSValue JS_GetImportMeta(JSContext* ctx, JSModuleDef* m);\nJSAtom JS_GetModuleName(JSContext* ctx, JSModuleDef* m);\n\n/* JS Job support */\n\ntypedef JSValue JSJobFunc(JSContext* ctx, int argc, JSValueConst* argv);\nint JS_EnqueueJob(JSContext* ctx, JSJobFunc* job_func, int argc, JSValueConst* argv);\n\nJS_BOOL JS_IsJobPending(JSRuntime* rt);\nint JS_ExecutePendingJob(JSRuntime* rt, JSContext** pctx);\n\n/* Object Writer/Reader (currently only used to handle precompiled code) */\n#define JS_WRITE_OBJ_BYTECODE (1 << 0) /* allow function/module */\n#define JS_WRITE_OBJ_BSWAP (1 << 1)    /* byte swapped output */\n#define JS_WRITE_OBJ_SAB (1 << 2)      /* allow SharedArrayBuffer */\n#define JS_WRITE_OBJ_REFERENCE \\\n  (1 << 3) /* allow object references to \\\n              encode arbitrary object \\\n              graph */\nuint8_t* JS_WriteObject(JSContext* ctx, size_t* psize, JSValueConst obj, int flags);\nuint8_t* JS_WriteObject2(JSContext* ctx, size_t* psize, JSValueConst obj, int flags, uint8_t*** psab_tab, size_t* psab_tab_len);\n\n#define JS_READ_OBJ_BYTECODE (1 << 0)  /* allow function/module */\n#define JS_READ_OBJ_ROM_DATA (1 << 1)  /* avoid duplicating 'buf' data */\n#define JS_READ_OBJ_SAB (1 << 2)       /* allow SharedArrayBuffer */\n#define JS_READ_OBJ_REFERENCE (1 << 3) /* allow object references */\nJSValue JS_ReadObject(JSContext* ctx, const uint8_t* buf, size_t buf_len, int flags);\n/* instantiate and evaluate a bytecode function. Only used when\n   reading a script or module with JS_ReadObject() */\nJSValue JS_EvalFunction(JSContext* ctx, JSValue fun_obj);\n/* load the dependencies of the module 'obj'. Useful when JS_ReadObject()\n   returns a module. */\nint JS_ResolveModule(JSContext* ctx, JSValueConst obj);\n\n/* only exported for os.Worker() */\nJSAtom JS_GetScriptOrModuleName(JSContext* ctx, int n_stack_levels);\n/* only exported for os.Worker() */\nJSModuleDef* JS_RunModule(JSContext* ctx, const char* basename, const char* filename);\n\n/* C function definition */\ntypedef enum JSCFunctionEnum { /* XXX: should rename for namespace isolation */\n                               JS_CFUNC_generic,\n                               JS_CFUNC_generic_magic,\n                               JS_CFUNC_constructor,\n                               JS_CFUNC_constructor_magic,\n                               JS_CFUNC_constructor_or_func,\n                               JS_CFUNC_constructor_or_func_magic,\n                               JS_CFUNC_f_f,\n                               JS_CFUNC_f_f_f,\n                               JS_CFUNC_getter,\n                               JS_CFUNC_setter,\n                               JS_CFUNC_getter_magic,\n                               JS_CFUNC_setter_magic,\n                               JS_CFUNC_iterator_next,\n} JSCFunctionEnum;\n\ntypedef union JSCFunctionType {\n  JSCFunction* generic;\n  JSValue (*generic_magic)(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int magic);\n  JSCFunction* constructor;\n  JSValue (*constructor_magic)(JSContext* ctx, JSValueConst new_target, int argc, JSValueConst* argv, int magic);\n  JSCFunction* constructor_or_func;\n  double (*f_f)(double);\n  double (*f_f_f)(double, double);\n  JSValue (*getter)(JSContext* ctx, JSValueConst this_val);\n  JSValue (*setter)(JSContext* ctx, JSValueConst this_val, JSValueConst val);\n  JSValue (*getter_magic)(JSContext* ctx, JSValueConst this_val, int magic);\n  JSValue (*setter_magic)(JSContext* ctx, JSValueConst this_val, JSValueConst val, int magic);\n  JSValue (*iterator_next)(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst* argv, int* pdone, int magic);\n} JSCFunctionType;\n\nJSValue JS_NewCFunction2(JSContext* ctx, JSCFunction* func, const char* name, int length, JSCFunctionEnum cproto, int magic);\nJSValue JS_NewCFunctionData(JSContext* ctx, JSCFunctionData* func, int length, int magic, int data_len, JSValueConst* data);\nJSValue JS_NewCClosure(JSContext* ctx, JSCClosure* func, int length, int magic, void* opaque, void (*opaque_finalize)(void*));\n\nstatic inline JSValue\nJS_NewCFunction(JSContext* ctx, JSCFunction* func, const char* name, int length) {\n  return JS_NewCFunction2(ctx, func, name, length, JS_CFUNC_generic, 0);\n}\n\nstatic inline JSValue\nJS_NewCFunctionMagic(JSContext* ctx, JSCFunctionMagic* func, const char* name, int length, JSCFunctionEnum cproto, int magic) {\n  return JS_NewCFunction2(ctx, (JSCFunction*)func, name, length, cproto, magic);\n}\nvoid JS_SetConstructor(JSContext* ctx, JSValueConst func_obj, JSValueConst proto);\n\n/* C property definition */\n\ntypedef struct JSCFunctionListEntry {\n  const char* name;\n  uint8_t prop_flags;\n  uint8_t def_type;\n  int16_t magic;\n  union {\n    struct {\n      uint8_t length; /* XXX: should move outside union */\n      uint8_t cproto; /* XXX: should move outside union */\n      JSCFunctionType cfunc;\n    } func;\n    struct {\n      JSCFunctionType get;\n      JSCFunctionType set;\n    } getset;\n    struct {\n      const char* name;\n      int base;\n    } alias;\n    struct {\n      const struct JSCFunctionListEntry* tab;\n      int len;\n    } prop_list;\n    const char* str;\n    int32_t i32;\n    int64_t i64;\n    double f64;\n  } u;\n} JSCFunctionListEntry;\n\n#define JS_DEF_CFUNC 0\n#define JS_DEF_CGETSET 1\n#define JS_DEF_CGETSET_MAGIC 2\n#define JS_DEF_PROP_STRING 3\n#define JS_DEF_PROP_INT32 4\n#define JS_DEF_PROP_INT64 5\n#define JS_DEF_PROP_DOUBLE 6\n#define JS_DEF_PROP_UNDEFINED 7\n#define JS_DEF_OBJECT 8\n#define JS_DEF_ALIAS 9\n\n/* Note: c++ does not like nested designators */\n#define JS_CFUNC_DEF(prop_name, length, func1) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE, .def_type = JS_DEF_CFUNC, .magic = 0, .u = { \\\n      .func = {length, JS_CFUNC_generic, {.generic = func1}} \\\n    } \\\n  }\n#define JS_CFUNC_MAGIC_DEF(prop_name, length, func1, magic_num) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE, .def_type = JS_DEF_CFUNC, .magic = magic_num, \\\n    .u = { \\\n      .func = {length, JS_CFUNC_generic_magic, {.generic_magic = func1}} \\\n    } \\\n  }\n#define JS_CFUNC_SPECIAL_DEF(prop_name, length, cproto, func1) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE, .def_type = JS_DEF_CFUNC, .magic = 0, .u = { \\\n      .func = {length, JS_CFUNC_##cproto, {.cproto = func1}} \\\n    } \\\n  }\n#define JS_ITERATOR_NEXT_DEF(prop_name, length, func1, magic_num) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE, .def_type = JS_DEF_CFUNC, .magic = magic_num, \\\n    .u = { \\\n      .func = {length, JS_CFUNC_iterator_next, {.iterator_next = func1}} \\\n    } \\\n  }\n#define JS_CGETSET_DEF(prop_name, fgetter, fsetter) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_CONFIGURABLE, .def_type = JS_DEF_CGETSET, .magic = 0, .u = { \\\n      .getset = {.get = {.getter = fgetter}, .set = {.setter = fsetter}} \\\n    } \\\n  }\n#define JS_CGETSET_MAGIC_DEF(prop_name, fgetter, fsetter, magic_num) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_CONFIGURABLE, .def_type = JS_DEF_CGETSET_MAGIC, .magic = magic_num, .u = { \\\n      .getset = {.get = {.getter_magic = fgetter}, .set = {.setter_magic = fsetter}} \\\n    } \\\n  }\n#define JS_PROP_STRING_DEF(prop_name, cstr, flags) \\\n  { \\\n    .name = prop_name, .prop_flags = flags, .def_type = JS_DEF_PROP_STRING, .magic = 0, .u = {.str = cstr } \\\n  }\n#define JS_PROP_INT32_DEF(prop_name, val, flags) \\\n  { \\\n    .name = prop_name, .prop_flags = flags, .def_type = JS_DEF_PROP_INT32, .magic = 0, .u = {.i32 = val } \\\n  }\n#define JS_PROP_INT64_DEF(prop_name, val, flags) \\\n  { \\\n    .name = prop_name, .prop_flags = flags, .def_type = JS_DEF_PROP_INT64, .magic = 0, .u = {.i64 = val } \\\n  }\n#define JS_PROP_DOUBLE_DEF(prop_name, val, flags) \\\n  { \\\n    .name = prop_name, .prop_flags = flags, .def_type = JS_DEF_PROP_DOUBLE, .magic = 0, .u = {.f64 = val } \\\n  }\n#define JS_PROP_UNDEFINED_DEF(prop_name, flags) \\\n  { \\\n    .name = prop_name, .prop_flags = flags, .def_type = JS_DEF_PROP_UNDEFINED, .magic = 0, .u = {.i32 = 0 } \\\n  }\n#define JS_OBJECT_DEF(prop_name, tab, len, flags) \\\n  { \\\n    .name = prop_name, .prop_flags = flags, .def_type = JS_DEF_OBJECT, .magic = 0, .u = {.prop_list = {tab, len} } \\\n  }\n#define JS_ALIAS_DEF(prop_name, from) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE, .def_type = JS_DEF_ALIAS, .magic = 0, .u = { \\\n      .alias = {from, -1} \\\n    } \\\n  }\n#define JS_ALIAS_BASE_DEF(prop_name, from, base) \\\n  { \\\n    .name = prop_name, .prop_flags = JS_PROP_WRITABLE | JS_PROP_CONFIGURABLE, .def_type = JS_DEF_ALIAS, .magic = 0, .u = { \\\n      .alias = {from, base} \\\n    } \\\n  }\n\nvoid JS_SetPropertyFunctionList(JSContext* ctx, JSValueConst obj, const JSCFunctionListEntry* tab, int len);\n\n/* C module definition */\n\ntypedef int JSModuleInitFunc(JSContext* ctx, JSModuleDef* m);\n\nJSModuleDef* JS_NewCModule(JSContext* ctx, const char* name_str, JSModuleInitFunc* func);\n/* can only be called before the module is instantiated */\nint JS_AddModuleExport(JSContext* ctx, JSModuleDef* m, const char* name_str);\nint JS_AddModuleExportList(JSContext* ctx, JSModuleDef* m, const JSCFunctionListEntry* tab, int len);\n/* can only be called after the module is instantiated */\nint JS_SetModuleExport(JSContext* ctx, JSModuleDef* m, const char* export_name, JSValue val);\nint JS_SetModuleExportList(JSContext* ctx, JSModuleDef* m, const JSCFunctionListEntry* tab, int len);\n\n#undef js_unlikely\n#undef js_force_inline\n\n#ifdef __cplusplus\n} /* extern \"C\" { */\n#endif\n\n#endif /* QUICKJS_H */\n",
			"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
			"file_size": 40236,
			"file_write_time": 132908641723990688,
			"settings":
			{
				"buffer_size": 40256,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					14,
					1,
					"duplicate_line",
					null,
					"AQAAANJEAAAAAAAA5kQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+RAAAAAAAANJEAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "Searching 328 files for \"JSClassExoticMethods\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c:\n  461  }\n  462  \n  463: static JSClassExoticMethods js_pointer_exotic_methods = {\n  464      .get_own_property = js_pointer_get_own_property,\n  465      .get_own_property_names = js_pointer_get_own_property_names,\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h:\n  186    JSClassCall* call;\n  187    /* pointers for exotic behavior, can be NULL if none are present */\n  188:   const JSClassExoticMethods* exotic;\n  189  };\n  190  \n\n2 matches across 2 files\n",
			"settings":
			{
				"buffer_size": 618,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "quickjs-pointer.c",
			"settings":
			{
				"buffer_size": 14930,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					49,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0LwAAAAAAANUvAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "include/utils.h",
			"settings":
			{
				"buffer_size": 29935,
				"line_ending": "Unix"
			}
		},
		{
			"file": "include/js-utils.h",
			"settings":
			{
				"buffer_size": 984,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-xml.c",
			"settings":
			{
				"buffer_size": 23529,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					28,
					1,
					"revert",
					null,
					"BwAAAAAAAAAAAAAAAAAAAAAAAADpWwAAI2luY2x1ZGUgImluY2x1ZGUvZGVmaW5lcy5oIgojaW5jbHVkZSA8Y3V0aWxzLmg+CiNpbmNsdWRlICJpbmNsdWRlL3Byb3BlcnR5LWVudW1lcmF0aW9uLmgiCiNpbmNsdWRlIDxxdWlja2pzLmg+CiNpbmNsdWRlICJpbmNsdWRlL3V0aWxzLmgiCiNpbmNsdWRlICJpbmNsdWRlL3ZlY3Rvci5oIgojaW5jbHVkZSAiaW5jbHVkZS9idWZmZXItdXRpbHMuaCIKI2luY2x1ZGUgImluY2x1ZGUvbG9jYXRpb24uaCIKI2luY2x1ZGUgImluY2x1ZGUvZGVidWcuaCIKCiNpbmNsdWRlIDxzdGRpbnQuaD4KCmNoYXIqIGpzX2luc3BlY3RfdG9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSk7CgovKioKICogXGRlZmdyb3VwIHF1aWNranMteG1sIFF1aWNrSlMgbW9kdWxlOiB4bWwgLSBYTUwgcGFyc2VyICYgcHJpbnRlcgogKiBAewogKi8KI2RlZmluZSBXUyAweDAxCiNkZWZpbmUgU1RBUlQgMHgwMgojZGVmaW5lIEVORCAweDA0CiNkZWZpbmUgUVVPVEUgMHgwOAojZGVmaW5lIENMT1NFIDB4MTAKI2RlZmluZSBFUVVBTCAweDIwCiNkZWZpbmUgU1BFQ0lBTCAweDQwCiNkZWZpbmUgU0xBU0ggMHg4MAojZGVmaW5lIEJBQ0tTTEFTSCAweDEwMAojZGVmaW5lIFFVRVNUSU9OIDB4MjAwCiNkZWZpbmUgRVhDTEFNIDB4NDAwCiNkZWZpbmUgSFlQSEVOIDB4NDAwCgpzdGF0aWMgaW50IGNoYXJzWzI1Nl0gPSB7MH07CgpzdGF0aWMgY29uc3QgY2hhciogY29uc3QgZGVmYXVsdF9zZWxmX2Nsb3NpbmdfdGFnc1tdID0gewogICAgImFyZWEiLAogICAgImJhc2UiLAogICAgImJyIiwKICAgICJjb2wiLAogICAgImVtYmVkIiwKICAgICJociIsCiAgICAiaW1nIiwKICAgICJpbnB1dCIsCiAgICAibGluayIsCiAgICAibWV0YSIsCiAgICAicGFyYW0iLAogICAgInNvdXJjZSIsCiAgICAidHJhY2siLAogICAgIndiciIsCiAgICAwLAp9OwoKdHlwZWRlZiBzdHJ1Y3QgewogIHVpbnQzMl90IGlkeDsKICBKU1ZhbHVlIG9iajsKICBjb25zdCB1aW50OF90KiBuYW1lOwogIHNpemVfdCBuYW1lbGVuOwp9IE91dHB1dFZhbHVlOwoKdHlwZWRlZiBzdHJ1Y3QgewogIEJPT0wgZmxhdCwgdG9sZXJhbnQ7CiAgY29uc3QgY2hhciogY29uc3QqIHNlbGZfY2xvc2luZ190YWdzOwp9IFBhcnNlT3B0aW9uczsKCnZvaWQKY2hhcmFjdGVyX2NsYXNzZXNfaW5pdChpbnQgY1syNTZdKSB7CiAgY1snICddID0gV1M7CiAgY1snXHQnXSA9IFdTOwogIGNbJ1xyJ10gPSBXUzsKICBjWydcbiddID0gV1M7CiAgY1snISddID0gU1BFQ0lBTCB8IEVYQ0xBTTsKICBjWyciJ10gPSBRVU9URTsKICBjWydcJyddID0gUVVPVEU7CiAgY1snLyddID0gRU5EIHwgU0xBU0g7CiAgY1snPCddID0gU1RBUlQ7CiAgY1snPSddID0gRVFVQUw7CiAgY1snPiddID0gRU5EIHwgQ0xPU0U7CiAgY1snPyddID0gU1BFQ0lBTCB8IFFVRVNUSU9OOwogIGNbJ1xcJ10gPSBCQUNLU0xBU0g7CiAgY1snLSddID0gSFlQSEVOOwp9CgojaWZkZWYgREVCVUdfT1VUUFVUCiNkZWZpbmUgeG1sX2RlYnVnKGFyZ3MuLi4pIHByaW50ZihhcmdzKQojZWxzZQojZGVmaW5lIHhtbF9kZWJ1ZyhhcmdzLi4uKQojZW5kaWYKCiNkZWZpbmUgeWllbGRfcHVzaCgpIFwKICBkbyB7IFwKICAgIHhtbF9kZWJ1ZygicHVzaCAgWyV6dV0gJS4qc1xuIiwgdmVjdG9yX3NpemUoJnN0LCBzaXplb2YoT3V0cHV0VmFsdWUpKSwgKGludCluYW1lbGVuLCBuYW1lKTsgXAogICAgb3V0ID0gdmVjdG9yX3B1c2goJnN0LCAoKE91dHB1dFZhbHVlKXswLCBKU19OZXdBcnJheShjdHgpLCBuYW1lLCBuYW1lbGVufSkpOyBcCiAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGVsZW1lbnQsICJjaGlsZHJlbiIsIG91dC0+b2JqKTsgXAogIH0gd2hpbGUoMCkKCiNkZWZpbmUgeWllbGRfcG9wKCkgXAogIGRvIHsgXAogICAgT3V0cHV0VmFsdWUqIHRvcCA9IHZlY3Rvcl9iYWNrKCZzdCwgc2l6ZW9mKE91dHB1dFZhbHVlKSk7IFwKICAgIHhtbF9kZWJ1ZygicG9wICAgICUuKnNcbiIsIChpbnQpdG9wLT5uYW1lbGVuLCB0b3AtPm5hbWUpOyBcCiAgICBpZih2ZWN0b3Jfc2l6ZSgmc3QsIHNpemVvZihPdXRwdXRWYWx1ZSkpID49IDIgPykgeyBcCiAgICAgIHZlY3Rvcl9wb3AoJnN0LCBzaXplb2YoT3V0cHV0VmFsdWUpKTsgXAogICAgICBvdXQgPSB2ZWN0b3JfYmFjaygmc3QsIHNpemVvZihPdXRwdXRWYWx1ZSkpKTsgXAogICAgfSBcCiAgICB3aGlsZSgwKQoKI2RlZmluZSB5aWVsZF9hZGQodmFsKSBcCiAgZG8geyBcCiAgICB4bWxfZGVidWcoImFkZCAgIHslenV9XG4iLCBvdXQtPmlkeCk7IFwKICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgb3V0LT5vYmosIG91dC0+aWR4KyssICh2YWwpKTsgXAogIH0gd2hpbGUoMCkKCiNkZWZpbmUgeWllbGRfbmV4dCgpIFwKICBkbyB7IFwKICAgIHhtbF9kZWJ1ZygibmV4dCAgeyV6dX1cbiIsIG91dC0+aWR4KTsgXAogICAgZWxlbWVudCA9IEpTX05ld09iamVjdChjdHgpOyBcCiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIG91dC0+b2JqLCBvdXQtPmlkeCsrLCBlbGVtZW50KTsgXAogIH0gd2hpbGUoMCkKCiNkZWZpbmUgeWllbGRfcmV0dXJuKGluZGV4KSBcCiAgZG8geyBcCiAgICBpZihpbmRleCA+PSAxKSB7IFwKICAgICAgeG1sX2RlYnVnKCJyZXR1cm5bJXp1XSAlemRcbiIsIGluZGV4LCB2ZWN0b3Jfc2l6ZSgmc3QsIHNpemVvZihPdXRwdXRWYWx1ZSkpIC0gaW5kZXgpOyBcCiAgICAgIHZlY3Rvcl9zaHJpbmsoJnN0LCBzaXplb2YoT3V0cHV0VmFsdWUpLCBpbmRleCk7IFwKICAgICAgb3V0ID0gdmVjdG9yX2JhY2soJnN0LCBzaXplb2YoT3V0cHV0VmFsdWUpKTsgXAogICAgfSBcCiAgfSB3aGlsZSgwKQoKI2RlZmluZSBwYXJzZV9nZXRjKCkgKChjID0gKisrcHRyKSwgcHRyID49IGVuZCA/IGRvbmUgPSBUUlVFIDogMCkKI2RlZmluZSBwYXJzZV9za2lwKGNvbmQpIFwKICBkbyB7IFwKICAgIGMgPSAqcHRyOyBcCiAgICBpZighKGNvbmQpKSBcCiAgICAgIGJyZWFrOyBcCiAgICBpZigrK3B0ciA+PSBlbmQpIFwKICAgICAgZG9uZSA9IFRSVUU7IFwKICB9IHdoaWxlKCFkb25lKQoKI2RlZmluZSBwYXJzZV91bnRpbChjb25kKSBwYXJzZV9za2lwKCEoY29uZCkpCiNkZWZpbmUgcGFyc2Vfc2tpcHNwYWNlKCkgcGFyc2Vfc2tpcChjaGFyc1tjXSAmIFdTKQojZGVmaW5lIHBhcnNlX2lzKGMsIGNsYXNzZXMpIChjaGFyc1soYyldICYgKGNsYXNzZXMpKQojZGVmaW5lIHBhcnNlX2luc2lkZSh0YWcpIChzdHJsZW4oKHRhZykpID09IG91dC0+bmFtZWxlbiAmJiAhc3RybmNtcCgoY29uc3QgY2hhciopb3V0LT5uYW1lLCAoY29uc3QgY2hhciopKHRhZyksIG91dC0+bmFtZWxlbikpCiNkZWZpbmUgcGFyc2VfY2xvc2UoKSAocHRyWzBdID09ICc8JyAmJiBwdHJbMV0gPT0gJy8nICYmICFzdHJuY21wKChjb25zdCBjaGFyKikmcHRyWzJdLCAoY29uc3QgY2hhciopb3V0LT5uYW1lLCBvdXQtPm5hbWVsZW4pICYmIHB0clsyICsgb3V0LT5uYW1lbGVuXSA9PSAnPicpCi8vKHB0ciArIG91dC0+bmFtZWxlbiArIDIgPD0gZW5kICYmIHB0clswXSA9PSAnPCcgJiYgcHRyWzFdID09ICcvJyAmJiAhc3RybmNtcCgmcHRyWzJdLCBvdXQtPm5hbWUsIG91dC0+bmFtZWxlbiArIDEpKQoKc3RhdGljIGludDMyX3QKZmluZF90YWcoVmVjdG9yKiBzdCwgY29uc3QgY2hhciogbmFtZSwgc2l6ZV90IG5hbWVsZW4pIHsKICBPdXRwdXRWYWx1ZSogbzsKICBpbnQzMl90IGluZGV4ID0gdmVjdG9yX3NpemUoc3QsIHNpemVvZihPdXRwdXRWYWx1ZSkpOwoKICBmb3IobyA9IHZlY3Rvcl9iYWNrKHN0LCBzaXplb2YoT3V0cHV0VmFsdWUpKTsgbyA+PSAoT3V0cHV0VmFsdWUqKXZlY3Rvcl9iZWdpbihzdCk7IG8tLSkgewogICAgLS1pbmRleDsKCiAgICBpZihvLT5uYW1lbGVuID09IG5hbWVsZW4gJiYgIXN0cm5jbXAoKGNvbnN0IGNoYXIqKW8tPm5hbWUsIG5hbWUsIG5hbWVsZW4pKQogICAgICByZXR1cm4gaW5kZXg7CiAgfQogIHJldHVybiAtMTsKfQoKc3RhdGljIEJPT0wKaXNfc2VsZl9jbG9zaW5nX3RhZyhjb25zdCBjaGFyKiBuYW1lLCBzaXplX3QgbmFtZWxlbiwgY29uc3QgUGFyc2VPcHRpb25zKiBvcHRzKSB7CiAgY29uc3QgY2hhcioqIHY7CgogIGZvcih2ID0gKGNvbnN0IGNoYXIqKilvcHRzLT5zZWxmX2Nsb3NpbmdfdGFnczsgKnY7IHYrKykgewogICAgc2l6ZV90IG4gPSBzdHJsZW4oKnYpOwoKICAgIGlmKG4gPT0gbmFtZWxlbiAmJiAhc3RybmNtcChuYW1lLCAqdiwgbmFtZWxlbikpCiAgICAgIHJldHVybiBUUlVFOwogIH0KCiAgcmV0dXJuIEZBTFNFOwp9CgpzdGF0aWMgaW50MzJfdAp4bWxfbnVtX2NoaWxkcmVuKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZWxlbWVudCkgewogIGludDY0X3QgbnVtX2NoaWxkcmVuID0gLTE7CiAgSlNWYWx1ZSBjaGlsZHJlbiA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgZWxlbWVudCwgImNoaWxkcmVuIik7CgogIGlmKEpTX0lzQXJyYXkoY3R4LCBjaGlsZHJlbikpCiAgICBudW1fY2hpbGRyZW4gPSBqc19hcnJheV9sZW5ndGgoY3R4LCBjaGlsZHJlbik7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIGNoaWxkcmVuKTsKICByZXR1cm4gbnVtX2NoaWxkcmVuOwp9CgpzdGF0aWMgdm9pZAp4bWxfc2V0X2F0dHJfdmFsdWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIGF0dHIsIHNpemVfdCBhbGVuLCBKU1ZhbHVlIHZhbHVlKSB7CiAgSlNBdG9tIHByb3A7CiAgcHJvcCA9IEpTX05ld0F0b21MZW4oY3R4LCAoY29uc3QgY2hhciopYXR0ciwgYWxlbik7CiAgSlNfU2V0UHJvcGVydHkoY3R4LCBvYmosIHByb3AsIHZhbHVlKTsKICBKU19GcmVlQXRvbShjdHgsIHByb3ApOwp9CgpzdGF0aWMgdm9pZAp4bWxfc2V0X2F0dHJfYnl0ZXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIGF0dHIsIHNpemVfdCBhbGVuLCBjb25zdCB1aW50OF90KiBzdHIsIHNpemVfdCBzbGVuKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKilzdHIsIHNsZW4pOwogIHhtbF9zZXRfYXR0cl92YWx1ZShjdHgsIG9iaiwgYXR0ciwgYWxlbiwgdmFsdWUpOwogIC8vIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKfQoKc3RhdGljIHZvaWQKeG1sX3dyaXRlX2F0dHJpYnV0ZXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhdHRyaWJ1dGVzLCBEeW5CdWYqIGRiKSB7CiAgc2l6ZV90IGk7CiAgUHJvcGVydHlFbnVtZXJhdGlvbiBwcm9wcyA9IHswfTsKCiAgcHJvcGVydHlfZW51bWVyYXRpb25faW5pdCgmcHJvcHMsIGN0eCwgSlNfRHVwVmFsdWUoY3R4LCBhdHRyaWJ1dGVzKSwgUFJPUEVOVU1fREVGQVVMVF9GTEFHUyk7CgogIGZvcihpID0gMDsgaSA8IHByb3BzLnRhYl9hdG9tX2xlbjsgaSsrKSB7CiAgICBjb25zdCBjaGFyICprZXlzdHIsICp2YWx1ZXN0cjsKICAgIEpTVmFsdWUgdmFsdWU7CiAgICBwcm9wZXJ0eV9lbnVtZXJhdGlvbl9zZXRwb3MoJnByb3BzLCBpKTsKICAgIGtleXN0ciA9IHByb3BlcnR5X2VudW1lcmF0aW9uX2tleXN0cigmcHJvcHMsIGN0eCk7CiAgICB2YWx1ZSA9IHByb3BlcnR5X2VudW1lcmF0aW9uX3ZhbHVlKCZwcm9wcywgY3R4KTsKICAgIGRidWZfcHV0YyhkYiwgJyAnKTsKICAgIGRidWZfcHV0c3RyKGRiLCBrZXlzdHIpOwogICAgaWYoIShKU19Jc0Jvb2wodmFsdWUpICYmIEpTX1RvQm9vbChjdHgsIHZhbHVlKSkpIHsKICAgICAgdmFsdWVzdHIgPSBwcm9wZXJ0eV9lbnVtZXJhdGlvbl92YWx1ZXN0cigmcHJvcHMsIGN0eCk7CiAgICAgIGRidWZfcHV0c3RyKGRiLCAiPVwiIik7CiAgICAgIGRidWZfcHV0c3RyKGRiLCB2YWx1ZXN0cik7CiAgICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIHZhbHVlc3RyKTsKICAgICAgZGJ1Zl9wdXRjKGRiLCAnIicpOwogICAgfQogICAganNfY3N0cmluZ19mcmVlKGN0eCwga2V5c3RyKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICB9CgogIHByb3BlcnR5X2VudW1lcmF0aW9uX3Jlc2V0KCZwcm9wcywgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKc3RhdGljIGlubGluZSB2b2lkCnhtbF93cml0ZV9pbmRlbnQoRHluQnVmKiBkYiwgaW50MzJfdCBkZXB0aCkgewogIHdoaWxlKGRlcHRoLS0gPiAwKSBkYnVmX3B1dHN0cihkYiwgIiAgIik7Cn0KCnN0YXRpYyB2b2lkCnhtbF93cml0ZV9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHRleHRTdHIsIHNpemVfdCB0ZXh0TGVuLCBEeW5CdWYqIGRiLCBpbnQzMl90IGRlcHRoKSB7CiAgY29uc3QgY2hhciogcDsKICBmb3IocCA9IHRleHRTdHI7OykgewogICAgc2l6ZV90IG47CgogICAgaWYoMCkgewogICAgICB3aGlsZSh0ZXh0TGVuKSB7CiAgICAgICAgaWYoYnl0ZV9jaHIoIlxyXG4gXHQiLCA0LCAqcCkgPT0gNCkKICAgICAgICAgIGJyZWFrOwogICAgICAgIHArKzsKICAgICAgICB0ZXh0TGVuLS07CiAgICAgIH0KICAgIH0KICAgIG4gPSBieXRlX2NocihwLCB0ZXh0TGVuLCAnXG4nKTsKICAgIGRidWZfYXBwZW5kKGRiLCAoY29uc3QgdWludDhfdCopcCwgbik7CiAgICBpZihuIDwgdGV4dExlbikKICAgICAgbisrOwogICAgcCArPSBuOwogICAgdGV4dExlbiAtPSBuOwoKICAgIC8qd2hpbGUodGV4dExlbiA+IDAgJiYgIChwWzBdID09ICcgJyB8fCAgcFswXSA9PSAnXHQnKSkgewogICAgICB0ZXh0TGVuLS07CiAgICAgIHArKzsKICAgIH0gICAgKi8KCiAgICBpZih0ZXh0TGVuID09IDApCiAgICAgIGJyZWFrOwoKICAgIGlmKGRlcHRoID4gMCkgewogICAgICBkYnVmX3B1dGMoZGIsICdcbicpOwogICAgICB4bWxfd3JpdGVfaW5kZW50KGRiLCBkZXB0aCArIDEpOwogICAgfQogIH0KfQoKc3RhdGljIHZvaWQKeG1sX3dyaXRlX3RleHQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0ZXh0LCBEeW5CdWYqIGRiLCBpbnQzMl90IGRlcHRoLCBCT09MIG11bHRpbGluZSkgewogIGNvbnN0IGNoYXIqIHRleHRTdHI7CiAgc2l6ZV90IHRleHRMZW47CiAgdGV4dFN0ciA9IEpTX1RvQ1N0cmluZ0xlbihjdHgsICZ0ZXh0TGVuLCB0ZXh0KTsKICBpZihtdWx0aWxpbmUpCiAgICB4bWxfd3JpdGVfaW5kZW50KGRiLCBkZXB0aCk7CiAgZWxzZSB7CiAgICB3aGlsZShkYi0+c2l6ZSA+IDAgJiYgaXNfd2hpdGVzcGFjZV9jaGFyKGRiLT5idWZbZGItPnNpemUgLSAxXSkpIGRiLT5zaXplLS07CiAgfQogIHhtbF93cml0ZV9zdHJpbmcoY3R4LCB0ZXh0U3RyLCB0ZXh0TGVuLCBkYiwgbXVsdGlsaW5lID8gZGVwdGggOiAwKTsKICBqc19jc3RyaW5nX2ZyZWUoY3R4LCB0ZXh0U3RyKTsKICBpZihtdWx0aWxpbmUpCiAgICBkYnVmX3B1dGMoZGIsICdcbicpOwp9CgpzdGF0aWMgdm9pZAp4bWxfd3JpdGVfZWxlbWVudChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGVsZW1lbnQsIER5bkJ1ZiogZGIsIGludDMyX3QgZGVwdGgsIEJPT0wgc2VsZl9jbG9zaW5nKSB7CiAgSlNWYWx1ZSBhdHRyaWJ1dGVzID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBlbGVtZW50LCAiYXR0cmlidXRlcyIpOwogIGludDMyX3QgbnVtX2NoaWxkcmVuOwogIHNpemVfdCB0YWdMZW47CiAgY29uc3QgY2hhciogdGFnTmFtZSA9IGpzX2dldF9wcm9wZXJ0eXN0cl9jc3RyaW5nbGVuKGN0eCwgZWxlbWVudCwgInRhZ05hbWUiLCAmdGFnTGVuKTsKICBCT09MIGlzQ29tbWVudDsKCiAgaWYoIXRhZ05hbWUgfHwgIXRhZ05hbWVbMF0pCiAgICByZXR1cm47CgogIGFzc2VydCh0YWdOYW1lKTsKICBpc0NvbW1lbnQgPSAhc3RybmNtcCh0YWdOYW1lLCAiIS0tIiwgMyk7CgogIGlmKGRlcHRoID4gMCkKICAgIHhtbF93cml0ZV9pbmRlbnQoZGIsIGRlcHRoKTsKCiAgaWYodGFnTmFtZVswXSkKICAgIGRidWZfcHV0YyhkYiwgJzwnKTsKCiAgaWYoaXNDb21tZW50KSB7CiAgICBpZihUUlVFIHx8IGJ5dGVfY2hyKHRhZ05hbWUsIHRhZ0xlbiwgJ1xuJykgPCB0YWdMZW4pIHsKICAgICAgLyp4bWxfd3JpdGVfc3RyaW5nKGN0eCwgdGFnTmFtZSwgdGFnTGVuIC0gMiwgZGIsIGRlcHRoIC0gMSk7CiAgICAgIGRidWZfcHV0YyhkYiwgJ1xuJyk7CiAgICAgIHhtbF93cml0ZV9pbmRlbnQoZGIsIGRlcHRoICsgMSk7CiAgICAgIGRidWZfcHV0YyhkYiwgJy0nKTsKICAgICAgZGJ1Zl9wdXRjKGRiLCAnLScpOyovCiAgICAgIGRidWZfcHV0KGRiLCAoY29uc3QgdWludDhfdCopdGFnTmFtZSwgdGFnTGVuKTsKICAgIH0gZWxzZSB7CiAgICAgIHhtbF93cml0ZV9zdHJpbmcoY3R4LCB0YWdOYW1lLCB0YWdMZW4sIGRiLCBkZXB0aCAtIDEpOwogICAgfQogIH0gZWxzZSBpZih0YWdOYW1lWzBdID09ICchJykgewogICAgZGJ1Zl9wdXRzdHIoZGIsIHRhZ05hbWUpOwogIH0gZWxzZSB7CiAgICBkYnVmX3B1dHN0cihkYiwgdGFnTmFtZSk7CiAgICBpZihKU19Jc09iamVjdChhdHRyaWJ1dGVzKSkKICAgICAgeG1sX3dyaXRlX2F0dHJpYnV0ZXMoY3R4LCBhdHRyaWJ1dGVzLCBkYik7CiAgfQogIG51bV9jaGlsZHJlbiA9IHhtbF9udW1fY2hpbGRyZW4oY3R4LCBlbGVtZW50KTsKCiAgLy8gICAgICh0YWdOYW1lWzBdID09ICcvJyB8fCBudW1fY2hpbGRyZW4gPT0gLTEpID8KICBpZih0YWdOYW1lWzBdKQogICAgZGJ1Zl9wdXRzdHIoZGIsCiAgICAgICAgICAgICAgICB0YWdOYW1lWzBdID09ICc/JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gIj8+IgogICAgICAgICAgICAgICAgOiAoc2VsZl9jbG9zaW5nIC8qfHwgbnVtX2NoaWxkcmVuID09IC0xKi8pICYmICEodGFnTmFtZVswXSA9PSAnIScgfHwgbnVtX2NoaWxkcmVuID49IDAgfHwgaXNDb21tZW50KSA/ICIgLz4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogIj4iKTsKICBkYnVmX3B1dGMoZGIsICdcbicpOwoKICBqc19jc3RyaW5nX2ZyZWUoY3R4LCB0YWdOYW1lKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhdHRyaWJ1dGVzKTsKfQoKc3RhdGljIHZvaWQKeG1sX2Nsb3NlX2VsZW1lbnQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBlbGVtZW50LCBEeW5CdWYqIGRiLCBpbnQzMl90IGRlcHRoKSB7CiAgaW50MzJfdCBudW1fY2hpbGRyZW4gPSB4bWxfbnVtX2NoaWxkcmVuKGN0eCwgZWxlbWVudCk7CgogIGlmKG51bV9jaGlsZHJlbiA+PSAwKSB7CiAgICBzaXplX3QgdGFnTGVuOwogICAgY29uc3QgY2hhciogdGFnTmFtZSA9IGpzX2dldF9wcm9wZXJ0eXN0cl9jc3RyaW5nbGVuKGN0eCwgZWxlbWVudCwgInRhZ05hbWUiLCAmdGFnTGVuKTsKCiAgICBpZih0YWdOYW1lWzBdICE9ICc/JyAmJiB0YWdOYW1lWzBdKSB7CiAgICAgIGlmKGRiLT5zaXplID4gMCAmJiBkYi0+YnVmW2RiLT5zaXplIC0gMV0gPT0gJ1xuJykKICAgICAgICB4bWxfd3JpdGVfaW5kZW50KGRiLCBkZXB0aCk7CgogICAgICBkYnVmX3B1dHN0cihkYiwgIjwvIik7CiAgICAgIGRidWZfYXBwZW5kKGRiLCAoY29uc3QgdWludDhfdCopdGFnTmFtZSwgdGFnTGVuKTsKICAgICAgZGJ1Zl9wdXRzdHIoZGIsICI+Iik7CiAgICAgIGRidWZfcHV0YyhkYiwgJ1xuJyk7CiAgICB9CiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCB0YWdOYW1lKTsKICB9Cn0KCnN0YXRpYyBQcm9wZXJ0eUVudW1lcmF0aW9uKgp4bWxfZW51bWVyYXRpb25fbmV4dChWZWN0b3IqIHZlYywgSlNDb250ZXh0KiBjdHgsIER5bkJ1ZiogZGIsIGludDMyX3QgbWF4X2RlcHRoKSB7CiAgUHJvcGVydHlFbnVtZXJhdGlvbiogaXQ7CiAgSlNWYWx1ZSB2YWx1ZSA9IEpTX1VOREVGSU5FRCwgY2hpbGRyZW47CgogIGl0ID0gdmVjdG9yX2JhY2sodmVjLCBzaXplb2YoUHJvcGVydHlFbnVtZXJhdGlvbikpOwogIHZhbHVlID0gcHJvcGVydHlfZW51bWVyYXRpb25fdmFsdWUoaXQsIGN0eCk7CgogIGlmKEpTX0lzT2JqZWN0KHZhbHVlKSkgewogICAgY2hpbGRyZW4gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHZhbHVlLCAiY2hpbGRyZW4iKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICAgIGlmKCFKU19Jc1VuZGVmaW5lZChjaGlsZHJlbikgJiYgKG1heF9kZXB0aCA9PSBJTlQzMl9NQVggfHwgdmVjdG9yX3NpemUodmVjLCBzaXplb2YoUHJvcGVydHlFbnVtZXJhdGlvbikpIDwgKHVpbnQzMl90KW1heF9kZXB0aCkpIHsKICAgICAgaWYoKGl0ID0gcHJvcGVydHlfZW51bWVyYXRpb25fcHVzaCh2ZWMsIGN0eCwgY2hpbGRyZW4sIFBST1BFTlVNX0RFRkFVTFRfRkxBR1MpKSkKICAgICAgICBpZihwcm9wZXJ0eV9lbnVtZXJhdGlvbl9zZXRwb3MoaXQsIDApKQogICAgICAgICAgcmV0dXJuIGl0OwogICAgfQogIH0gZWxzZSB7CiAgICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgfQoKICBmb3IoOzspIHsKICAgIGlmKHByb3BlcnR5X2VudW1lcmF0aW9uX3NldHBvcyhpdCwgaXQtPmlkeCArIDEpKQogICAgICBicmVhazsKCiAgICBpZigoaXQgPSBwcm9wZXJ0eV9lbnVtZXJhdGlvbl9wb3AodmVjLCBjdHgpKSA9PSAwKQogICAgICBicmVhazsKCiAgICB2YWx1ZSA9IHByb3BlcnR5X2VudW1lcmF0aW9uX3ZhbHVlKGl0LCBjdHgpOwogICAgewogICAgICBpbnQzMl90IGRlcHRoID0gdmVjdG9yX3NpemUodmVjLCBzaXplb2YoUHJvcGVydHlFbnVtZXJhdGlvbikpIC0gMTsKICAgICAgZGVwdGggPSBNQVhfTlVNKDAsIGRlcHRoIC0gMSk7CiAgICAgIHhtbF9jbG9zZV9lbGVtZW50KGN0eCwgdmFsdWUsIGRiLCBkZXB0aCk7CiAgICB9CiAgICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgfQoKICByZXR1cm4gaXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX3htbF9wYXJzZShKU0NvbnRleHQqIGN0eCwgY29uc3QgdWludDhfdCogYnVmLCBzaXplX3QgbGVuLCBjb25zdCBjaGFyKiBpbnB1dF9uYW1lLCBQYXJzZU9wdGlvbnMgb3B0cykgewogIEJPT0wgZG9uZSA9IEZBTFNFOwogIGNvbnN0IHVpbnQ4X3QgKnB0ciwgKmVuZCwgKnN0YXJ0OwogIHVpbnQ4X3QgYzsKICBPdXRwdXRWYWx1ZSogb3V0OwogIEpTVmFsdWUgcmV0LCBlbGVtZW50ID0gSlNfVU5ERUZJTkVEOwogIFZlY3RvciBzdCA9IFZFQ1RPUihjdHgpOwogIExvY2F0aW9uIGxvYyA9IHswLCBKU19OZXdBdG9tKGN0eCwgaW5wdXRfbmFtZSl9OwogIHB0ciA9IGJ1ZjsKICBlbmQgPSBidWYgKyBsZW47CgogIHhtbF9kZWJ1ZygianNfeG1sX3BhcnNlIGlucHV0X25hbWU6ICVzIGZsYXQ6ICVzXG4iLCBpbnB1dF9uYW1lLCBvcHRzLmZsYXQgPyAiVFJVRSIgOiAiRkFMU0UiKTsKCiAgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKCiAgb3V0ID0gdmVjdG9yX2VtcGxhY2UoJnN0LCBzaXplb2YoT3V0cHV0VmFsdWUpKTsKICBvdXQtPm9iaiA9IHJldDsKICBvdXQtPmlkeCA9IDA7CgogIHdoaWxlKCFkb25lKSB7CiAgICAvLyBwYXJzZV9za2lwc3BhY2UoKTsKICAgIHN0YXJ0ID0gcHRyOwoKICAgIEJPT0wgaW5zaWRlX3NjcmlwdCA9IHBhcnNlX2luc2lkZSgic2NyaXB0Iik7CgogICAgaWYoaW5zaWRlX3NjcmlwdCkgewogICAgICB3aGlsZSghcGFyc2VfY2xvc2UoKSkgewogICAgICAgICsrcHRyOwogICAgICAgIGlmKChwdHIgKz0gYnl0ZV9jaHIocHRyLCBlbmQgLSBwdHIsICc8JykpID09IGVuZCkKICAgICAgICAgIGJyZWFrOwogICAgICB9CgogICAgfSBlbHNlIHsKICAgICAgcGFyc2VfdW50aWwocGFyc2VfaXMoYywgU1RBUlQpKTsKICAgIH0KCiAgICBzaXplX3QgbGVhZGluZ193cyA9IHNjYW5fd2hpdGVuc2tpcCgoY29uc3QgY2hhciopc3RhcnQsIHB0ciAtIHN0YXJ0KTsKCiAgICB3aGlsZShzdGFydCA8IHB0cikgewogICAgICBzaXplX3QgbGVuLCByZWFsX2xlbjsKCiAgICAgIHN0YXJ0ICs9IHNjYW5fd2hpdGVuc2tpcCgoY29uc3QgY2hhciopc3RhcnQsIGxlYWRpbmdfd3MpOwoKICAgICAgLy8gd2hpbGUoc3RhcnQgPCBwdHIgJiYgaXNfd2hpdGVzcGFjZV9jaGFyKCpzdGFydCkpIHN0YXJ0Kys7CgogICAgICByZWFsX2xlbiA9IGxlbiA9IHB0ciAtIHN0YXJ0OwogICAgICBpZihpbnNpZGVfc2NyaXB0KSB7CiAgICAgICAgcmVhbF9sZW4gPSBieXRlX2NocihzdGFydCwgbGVuLCAnXG4nKTsKICAgICAgICBpZihyZWFsX2xlbiA8IGxlbikKICAgICAgICAgIHJlYWxfbGVuKys7CiAgICAgICAgbGVuID0gcmVhbF9sZW47CiAgICAgIH0KCiAgICAgIGlmKCFpbnNpZGVfc2NyaXB0KQogICAgICAgIHdoaWxlKGxlbiA+IDAgJiYgaXNfd2hpdGVzcGFjZV9jaGFyKHN0YXJ0W2xlbiAtIDFdKSkgbGVuLS07CgogICAgICBpZihsZW4gPiAwKSB7CiAgICAgICAgSlNWYWx1ZSBzdHIgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopc3RhcnQsIGxlbik7CiAgICAgICAgeWllbGRfYWRkKHN0cik7CiAgICAgIH0KCiAgICAgIHN0YXJ0ICs9IHJlYWxfbGVuOwogICAgfQoKICAgIGlmKGRvbmUpCiAgICAgIGJyZWFrOwoKICAgIHN0YXJ0ID0gcHRyOwogICAgYyA9ICpwdHI7CgogICAgaWYocGFyc2VfaXMoYywgU1RBUlQpKSB7CiAgICAgIGNvbnN0IHVpbnQ4X3QqIG5hbWU7CiAgICAgIHNpemVfdCBuYW1lbGVuOwogICAgICBCT09MIGNsb3NpbmcgPSBGQUxTRSwgc2VsZl9jbG9zaW5nID0gRkFMU0U7CiAgICAgIHBhcnNlX2dldGMoKTsKICAgICAgaWYocGFyc2VfaXMoYywgU0xBU0gpKSB7CiAgICAgICAgY2xvc2luZyA9IFRSVUU7CiAgICAgICAgcGFyc2VfZ2V0YygpOwogICAgICB9CiAgICAgIG5hbWUgPSBwdHI7CiAgICAgIGlmKHBhcnNlX2lzKHB0clswXSwgRVhDTEFNKSAmJiBwYXJzZV9pcyhwdHJbMV0sIEhZUEhFTikgJiYgcGFyc2VfaXMocHRyWzJdLCBIWVBIRU4pKSB7CiAgICAgICAgcGFyc2VfZ2V0YygpOwogICAgICAgIHBhcnNlX2dldGMoKTsKICAgICAgICBwYXJzZV9nZXRjKCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcGFyc2VfdW50aWwocGFyc2VfaXMoYywgV1MgfCBFTkQpKTsKICAgICAgfQogICAgICBuYW1lbGVuID0gcHRyIC0gbmFtZTsKCiAgICAgIGlmKGNsb3NpbmcpIHsKICAgICAgICBpbnQzMl90IGluZGV4ID0gMDsKICAgICAgICBwYXJzZV9za2lwc3BhY2UoKTsKICAgICAgICBpZihwYXJzZV9pcyhjLCBDTE9TRSkpCiAgICAgICAgICBwYXJzZV9nZXRjKCk7CgogICAgICAgIHhtbF9kZWJ1ZygiZW5kLW9mIFslemRdIHRhZ05hbWU6ICVzJS4qc1xuIiwgaW5kZXggLSAxLCBjbG9zaW5nID8gIi8iIDogIiIsIG5hbWVsZW4sIG5hbWUpOwoKICAgICAgICBpZihvcHRzLmZsYXQpIHsKICAgICAgICAgIHlpZWxkX25leHQoKTsKICAgICAgICAgIHhtbF9zZXRfYXR0cl9ieXRlcyhjdHgsIGVsZW1lbnQsICJ0YWdOYW1lIiwgNywgbmFtZSAtIDEsIG5hbWVsZW4gKyAxKTsKCiAgICAgICAgfSBlbHNlIHsKCiAgICAgICAgICBpbmRleCA9IGZpbmRfdGFnKCZzdCwgKGNvbnN0IGNoYXIqKW5hbWUsIG5hbWVsZW4pOwoKICAgICAgICAgIGlmKGluZGV4ID09IC0xKSB7CgogICAgICAgICAgICBpZighb3B0cy50b2xlcmFudCkgewogICAgICAgICAgICAgIGNoYXIqIGZpbGU7CiAgICAgICAgICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgcmV0KTsKICAgICAgICAgICAgICBsb2NhdGlvbl9jb3VudCgmbG9jLCBidWYsIHN0YXJ0IC0gYnVmKTsKICAgICAgICAgICAgICBmaWxlID0gbG9jYXRpb25fZmlsZSgmbG9jLCBjdHgpOwogICAgICAgICAgICAgIHhtbF9kZWJ1ZygKICAgICAgICAgICAgICAgICAgIm1pc21hdGNoIDwvJS4qcz4gYXQgJXM6JXU6JXUgKGJ5dGUgJXp1L2NoYXIgJXp1KSIsIChpbnQpbmFtZWxlbiwgbmFtZSwgZmlsZSwgbG9jLmxpbmUgKyAxLCBsb2MuY29sdW1uICsgMSwgbG9jLmJ5dGVfb2Zmc2V0LCBsb2MuY2hhcl9vZmZzZXQpOwogICAgICAgICAgICAgIHJldCA9IEpTX1Rocm93U3ludGF4RXJyb3IoY3R4LCAibWlzbWF0Y2ggPC8lLipzPiBhdCAlczoldToldSIsIChpbnQpbmFtZWxlbiwgbmFtZSwgZmlsZSwgbG9jLmxpbmUgKyAxLCBsb2MuY29sdW1uICsgMSk7CiAgICAgICAgICAgICAgaWYoZmlsZSkKICAgICAgICAgICAgICAgIGpzX2ZyZWUoY3R4LCBmaWxlKTsKICAgICAgICAgICAgICByZXR1cm4gcmV0OwogICAgICAgICAgICB9CgogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KCiAgICAgICAgICB5aWVsZF9yZXR1cm4oaW5kZXgpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB5aWVsZF9uZXh0KCk7CgogICAgICAgIGlmKG5hbWVsZW4gJiYgKHBhcnNlX2lzKG5hbWVbMF0sICgvKlFVRVNUSU9OIHwqLyBFWENMQU0pKSkpIHsKICAgICAgICAgIHNlbGZfY2xvc2luZyA9IFRSVUU7CiAgICAgICAgfQoKICAgICAgICBpZihpc19zZWxmX2Nsb3NpbmdfdGFnKChjb25zdCBjaGFyKiluYW1lLCBuYW1lbGVuLCAmb3B0cykpCiAgICAgICAgICBzZWxmX2Nsb3NpbmcgPSBUUlVFOwoKICAgICAgICBpZihuYW1lbGVuID49IDMgJiYgcGFyc2VfaXMobmFtZVswXSwgRVhDTEFNKSAmJiBwYXJzZV9pcyhuYW1lWzFdLCBIWVBIRU4pICYmIHBhcnNlX2lzKG5hbWVbMl0sIEhZUEhFTikpIHsKICAgICAgICAgIHdoaWxlKCFkb25lKSB7CiAgICAgICAgICAgIHBhcnNlX2dldGMoKTsKICAgICAgICAgICAgaWYoZW5kIC0gcHRyID49IDMgJiYgcGFyc2VfaXMocHRyWzBdLCBIWVBIRU4pICYmIHBhcnNlX2lzKHB0clsxXSwgSFlQSEVOKSAmJiBwYXJzZV9pcyhwdHJbMl0sIENMT1NFKSkgewogICAgICAgICAgICAgIHB0ciArPSAyOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBuYW1lbGVuID0gcHRyIC0gbmFtZTsKCiAgICAgICAgfSBlbHNlIGlmKG5hbWVsZW4gJiYgcGFyc2VfaXMobmFtZVswXSwgRVhDTEFNKSkgewogICAgICAgICAgcGFyc2VfdW50aWwocGFyc2VfaXMoYywgQ0xPU0UpKTsKICAgICAgICAgIG5hbWVsZW4gPSBwdHIgLSBuYW1lOwogICAgICAgIH0KCiAgICAgICAgeG1sX3NldF9hdHRyX2J5dGVzKGN0eCwgZWxlbWVudCwgInRhZ05hbWUiLCA3LCBuYW1lLCBuYW1lbGVuKTsKCiAgICAgICAgaWYobmFtZWxlbiAmJiBwYXJzZV9pcyhuYW1lWzBdLCBFWENMQU0pKSB7CiAgICAgICAgICBwYXJzZV9nZXRjKCk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CgogICAgICAgIC8qIFBhcnNlIGF0dHJpYnV0ZXMgaWYgbm90IGEgY2xvc2luZyB0YWcgKi8KICAgICAgICBjb25zdCB1aW50OF90ICphdHRyLCAqdmFsdWU7CiAgICAgICAgc2l6ZV90IGFsZW4sIHZsZW4sIG51bV9hdHRycyA9IDA7CiAgICAgICAgSlNWYWx1ZSBhdHRyaWJ1dGVzID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgICAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBlbGVtZW50LCAiYXR0cmlidXRlcyIsIGF0dHJpYnV0ZXMpOwogICAgICAgIHdoaWxlKCFkb25lKSB7CiAgICAgICAgICBwYXJzZV9za2lwc3BhY2UoKTsKICAgICAgICAgIGlmKHBhcnNlX2lzKGMsIEVORCkpCiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgYXR0ciA9IHB0cjsKICAgICAgICAgIHBhcnNlX3VudGlsKHBhcnNlX2lzKGMsIEVRVUFMIHwgV1MgfCBTUEVDSUFMIHwgQ0xPU0UpKTsKICAgICAgICAgIGlmKChhbGVuID0gcHRyIC0gYXR0cikgPT0gMCkKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBpZihwYXJzZV9pcyhjLCBXUyB8IENMT1NFIHwgU0xBU0gpKSB7CiAgICAgICAgICAgIHhtbF9zZXRfYXR0cl92YWx1ZShjdHgsIGF0dHJpYnV0ZXMsIChjb25zdCBjaGFyKilhdHRyLCBhbGVuLCBKU19OZXdCb29sKGN0eCwgVFJVRSkpOwogICAgICAgICAgICBudW1fYXR0cnMrKzsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CgogICAgICAgICAgaWYocGFyc2VfaXMoYywgRVFVQUwpKSB7CiAgICAgICAgICAgIGNoYXIgcXVvdGUgPSAwOwogICAgICAgICAgICBwYXJzZV9nZXRjKCk7CiAgICAgICAgICAgIGlmKHBhcnNlX2lzKGMsIFFVT1RFKSkgewogICAgICAgICAgICAgIHF1b3RlID0gYzsKICAgICAgICAgICAgICBwYXJzZV9nZXRjKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFsdWUgPSBwdHI7CiAgICAgICAgICAgIGlmKHF1b3RlKQogICAgICAgICAgICAgIHBhcnNlX3VudGlsKGMgPT0gcXVvdGUpOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgcGFyc2VfdW50aWwocGFyc2VfaXMoYywgKFdTIHwgQ0xPU0UpKSk7CgogICAgICAgICAgICB2bGVuID0gcHRyIC0gdmFsdWU7CiAgICAgICAgICAgIGlmKHF1b3RlICYmIHBhcnNlX2lzKGMsIFFVT1RFKSkKICAgICAgICAgICAgICBwYXJzZV9nZXRjKCk7CiAgICAgICAgICAgIHhtbF9zZXRfYXR0cl9ieXRlcyhjdHgsIGF0dHJpYnV0ZXMsIChjb25zdCBjaGFyKilhdHRyLCBhbGVuLCB2YWx1ZSwgdmxlbik7CiAgICAgICAgICAgIG51bV9hdHRycysrOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgaWYocGFyc2VfaXMoYywgU0xBU0gpKSB7CiAgICAgICAgICBzZWxmX2Nsb3NpbmcgPSBUUlVFOwogICAgICAgICAgcGFyc2VfZ2V0YygpOwogICAgICAgIH0KCiAgICAgICAgaWYocGFyc2VfaXMobmFtZVswXSwgUVVFU1RJT04gfCBFWENMQU0pKSB7CiAgICAgICAgICBpZihjaGFyc1tjXSA9PSBjaGFyc1tuYW1lWzBdXSkgewogICAgICAgICAgICBwYXJzZV9nZXRjKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmKCFvcHRzLmZsYXQgJiYgIXNlbGZfY2xvc2luZykKICAgICAgICAgIHlpZWxkX3B1c2goKTsKICAgICAgfQoKICAgICAgaWYoc2VsZl9jbG9zaW5nICYmIG9wdHMuZmxhdCkgewogICAgICAgIGNoYXIqIHRhZ05hbWUgPSBqc19tYWxsb2N6KGN0eCwgbmFtZWxlbiArIDIpOwogICAgICAgIHRhZ05hbWVbMF0gPSAnLyc7CiAgICAgICAgc3RyX2NvcHluKCZ0YWdOYW1lWzFdLCAoY29uc3QgY2hhciopbmFtZSwgbmFtZWxlbik7CgogICAgICAgIHlpZWxkX25leHQoKTsKICAgICAgICB4bWxfc2V0X2F0dHJfYnl0ZXMoY3R4LCBlbGVtZW50LCAidGFnTmFtZSIsIDcsIChjb25zdCB1aW50OF90Kil0YWdOYW1lLCBuYW1lbGVuICsgMSk7CiAgICAgICAganNfZnJlZShjdHgsIHRhZ05hbWUpOwogICAgICB9CgogICAgICBwYXJzZV9za2lwc3BhY2UoKTsKICAgICAgaWYocGFyc2VfaXMoYywgQ0xPU0UpKQogICAgICAgIHBhcnNlX2dldGMoKTsKICAgIH0KICB9CiAgSlNfRnJlZUF0b20oY3R4LCBsb2MuZmlsZSk7CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfeG1sX3JlYWQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldDsKICBJbnB1dEJ1ZmZlciBpbnB1dCA9IGpzX2lucHV0X2NoYXJzKGN0eCwgYXJndlswXSk7CiAgY29uc3QgY2hhciogaW5wdXRfbmFtZSA9IDA7CiAgUGFyc2VPcHRpb25zIG9wdHMgPSB7LmZsYXQgPSBGQUxTRSwgLnRvbGVyYW50ID0gRkFMU0UsIC5zZWxmX2Nsb3NpbmdfdGFncyA9IGRlZmF1bHRfc2VsZl9jbG9zaW5nX3RhZ3N9OwoKICBpZihpbnB1dC5kYXRhID09IDAgfHwgaW5wdXQuc2l6ZSA9PSAwKSB7CiAgICBKU19UaHJvd1JlZmVyZW5jZUVycm9yKGN0eCwgInhtbC5yZWFkKCk6IGV4cGVjdGluZyBidWZmZXIgb3Igc3RyaW5nIik7CiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIH0KCiAgaWYoYXJnYyA+PSAyKQogICAgaW5wdXRfbmFtZSA9IEpTX1RvQ1N0cmluZyhjdHgsIGFyZ3ZbMV0pOwoKICBpZihhcmdjID49IDMpIHsKICAgIGlmKEpTX0lzT2JqZWN0KGFyZ3ZbMl0pKSB7CiAgICAgIEpTVmFsdWUgdGFnczsKICAgICAgb3B0cy5mbGF0ID0ganNfZ2V0X3Byb3BlcnR5c3RyX2Jvb2woY3R4LCBhcmd2WzJdLCAiZmxhdCIpOwogICAgICBvcHRzLnRvbGVyYW50ID0ganNfZ2V0X3Byb3BlcnR5c3RyX2Jvb2woY3R4LCBhcmd2WzJdLCAidG9sZXJhbnQiKTsKICAgICAgdGFncyA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgYXJndlsyXSwgInNlbGZDbG9zaW5nVGFncyIpOwogICAgICBpZihKU19Jc0FycmF5KGN0eCwgdGFncykpIHsKICAgICAgICBpbnQgYWMgPSAtMTsKICAgICAgICBvcHRzLnNlbGZfY2xvc2luZ190YWdzID0gKGNvbnN0IGNoYXIqIGNvbnN0Kilqc19hcnJheV90b19hcmd2KGN0eCwgJmFjLCB0YWdzKTsKICAgICAgfQogICAgICBKU19GcmVlVmFsdWUoY3R4LCB0YWdzKTsKCiAgICB9IGVsc2UgewogICAgICBvcHRzLmZsYXQgPSBKU19Ub0Jvb2woY3R4LCBhcmd2WzJdKTsKCiAgICAgIGlmKGFyZ2MgPj0gNCkKICAgICAgICBvcHRzLnRvbGVyYW50ID0gSlNfVG9Cb29sKGN0eCwgYXJndlszXSk7CiAgICB9CiAgfQoKICByZXQgPSBqc194bWxfcGFyc2UoY3R4LCBpbnB1dC5kYXRhLCBpbnB1dC5zaXplLCBpbnB1dF9uYW1lID8gaW5wdXRfbmFtZSA6ICI8aW5wdXQ+Iiwgb3B0cyk7CgogIGlmKGlucHV0X25hbWUpCiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIGlucHV0X25hbWUpOwoKICBpbnB1dF9idWZmZXJfZnJlZSgmaW5wdXQsIGN0eCk7CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIEpTVmFsdWUKanNfeG1sX3dyaXRlX3RyZWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGludCBtYXhfZGVwdGgsIER5bkJ1Ziogb3V0cHV0KSB7CiAgVmVjdG9yIGVudW1lcmF0aW9ucyA9IFZFQ1RPUihjdHgpOwogIFByb3BlcnR5RW51bWVyYXRpb24qIGl0OwogIEpTVmFsdWUgc3RyLCB2YWx1ZSA9IEpTX1VOREVGSU5FRDsKCiAgaXQgPSBwcm9wZXJ0eV9lbnVtZXJhdGlvbl9wdXNoKCZlbnVtZXJhdGlvbnMsIGN0eCwgSlNfRHVwVmFsdWUoY3R4LCBvYmopLCBQUk9QRU5VTV9ERUZBVUxUX0ZMQUdTKTsKCiAgZG8gewogICAgaW50MzJfdCBkZXB0aCA9IHZlY3Rvcl9zaXplKCZlbnVtZXJhdGlvbnMsIHNpemVvZihQcm9wZXJ0eUVudW1lcmF0aW9uKSkgLSAxOwoKICAgIGRlcHRoID0gTUFYX05VTSgwLCBkZXB0aCAtIDEpOwoKICAgIHZhbHVlID0gcHJvcGVydHlfZW51bWVyYXRpb25fdmFsdWUoaXQsIGN0eCk7CgogICAgaWYoSlNfSXNTdHJpbmcodmFsdWUpKSB7CiAgICAgIHhtbF93cml0ZV90ZXh0KGN0eCwgdmFsdWUsIG91dHB1dCwgZGVwdGgsIGl0LT50YWJfYXRvbV9sZW4gPiAxKTsKICAgIH0gZWxzZSBpZihKU19Jc09iamVjdCh2YWx1ZSkgJiYgIUpTX0lzQXJyYXkoY3R4LCB2YWx1ZSkpIHsKICAgICAgaW50MzJfdCBudW1fY2hpbGRyZW4gPSB4bWxfbnVtX2NoaWxkcmVuKGN0eCwgdmFsdWUpOwogICAgICB4bWxfd3JpdGVfZWxlbWVudChjdHgsIHZhbHVlLCBvdXRwdXQsIGRlcHRoLCBudW1fY2hpbGRyZW4gPT0gLTEpOwogICAgfQoKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICB9IHdoaWxlKChpdCA9IHhtbF9lbnVtZXJhdGlvbl9uZXh0KCZlbnVtZXJhdGlvbnMsIGN0eCwgb3V0cHV0LCBtYXhfZGVwdGgpKSk7CgogIHdoaWxlKG91dHB1dC0+c2l6ZSA+IDAgJiYgKG91dHB1dC0+YnVmW291dHB1dC0+c2l6ZSAtIDFdID09ICdcMCcgfHwgYnl0ZV9jaHIoIlxyXG5cdCAiLCA0LCBvdXRwdXQtPmJ1ZltvdXRwdXQtPnNpemUgLSAxXSkgPCA0KSkgb3V0cHV0LT5zaXplLS07CiAgZGJ1Zl9wdXRjKG91dHB1dCwgJ1wwJyk7CgogIHN0ciA9IEpTX05ld1N0cmluZyhjdHgsIChjb25zdCBjaGFyKilvdXRwdXQtPmJ1Zik7CiAgLy8gc3RyID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgb3V0cHV0LT5idWYsIG91dHB1dC0+c2l6ZSk7CgogIHZlY3Rvcl9mb3JlYWNoX3QoJmVudW1lcmF0aW9ucywgaXQpIHsgcHJvcGVydHlfZW51bWVyYXRpb25fcmVzZXQoaXQsIEpTX0dldFJ1bnRpbWUoY3R4KSk7IH0KICB2ZWN0b3JfZnJlZSgmZW51bWVyYXRpb25zKTsKICByZXR1cm4gc3RyOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc194bWxfd3JpdGVfbGlzdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgc2l6ZV90IGxlbiwgRHluQnVmKiBvdXRwdXQpIHsKICBzaXplX3QgaTsKICBpbnQzMl90IGRlcHRoID0gMDsKICBCT09MIHNpbmdsZV9saW5lID0gRkFMU0U7CiAgY29uc3QgY2hhciAqdGFnTmFtZSA9IDAsICpuZXh0VGFnOwoKICBKU1ZhbHVlIHZhbHVlID0gSlNfVU5ERUZJTkVELCBuZXh0ID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIDApOwogIG5leHRUYWcgPSBKU19Jc09iamVjdChuZXh0KSA/IGpzX2dldF9wcm9wZXJ0eXN0cl9jc3RyaW5nKGN0eCwgbmV4dCwgInRhZ05hbWUiKSA6IDA7CgogIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgICB2YWx1ZSA9IG5leHQ7CiAgICBuZXh0ID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIGkgKyAxKTsKCiAgICB0YWdOYW1lID0gbmV4dFRhZzsKICAgIG5leHRUYWcgPSBKU19Jc09iamVjdChuZXh0KSA/IGpzX2dldF9wcm9wZXJ0eXN0cl9jc3RyaW5nKGN0eCwgbmV4dCwgInRhZ05hbWUiKSA6IDA7CgogICAgaWYoSlNfSXNTdHJpbmcodmFsdWUpKSB7CiAgICAgIGNvbnN0IGNoYXIqIHMgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSk7CiAgICAgIHVpbnQzMl90IG5ld2xpbmVzID0gc3RyX2NvdW50KHMsICdcbicpOwogICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHMpOwogICAgICBzaW5nbGVfbGluZSA9IG5ld2xpbmVzID09IDA7CgogICAgICB4bWxfd3JpdGVfdGV4dChjdHgsIHZhbHVlLCBvdXRwdXQsIGRlcHRoLCAhc2luZ2xlX2xpbmUpOwoKICAgIH0gZWxzZSBpZihKU19Jc09iamVjdCh2YWx1ZSkgJiYgIUpTX0lzQXJyYXkoY3R4LCB2YWx1ZSkpIHsKICAgICAgY29uc3QgY2hhciogdGFnTmFtZSA9IGpzX2dldF9wcm9wZXJ0eXN0cl9jc3RyaW5nKGN0eCwgdmFsdWUsICJ0YWdOYW1lIik7CiAgICAgIEJPT0wgc2VsZl9jbG9zaW5nID0gbmV4dFRhZyAmJiBuZXh0VGFnWzBdID09ICcvJyAmJiAhc3RyY21wKHRhZ05hbWUsICZuZXh0VGFnWzFdKTsKCiAgICAgIGlmKHRhZ05hbWVbMF0gPT0gJy8nKQogICAgICAgIGRlcHRoLS07CgogICAgICB4bWxfd3JpdGVfZWxlbWVudChjdHgsIHZhbHVlLCBvdXRwdXQsIHNpbmdsZV9saW5lID8gMCA6IGRlcHRoLCBzZWxmX2Nsb3NpbmcpOwoKICAgICAgaWYoc2VsZl9jbG9zaW5nKQogICAgICAgIG5leHQgPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIG9iaiwgKytpICsgMSk7CiAgICAgIGVsc2UgaWYodGFnTmFtZVswXSAhPSAnLycgJiYgdGFnTmFtZVswXSAhPSAnPycgJiYgdGFnTmFtZVswXSAhPSAnIScgJiYgIXN0cmNhc2VjbXAodGFnTmFtZSwgImR0IikpCiAgICAgICAgZGVwdGgrKzsKCiAgICAgIC8vICBKU19GcmVlQ1N0cmluZyhjdHgsIHRhZ05hbWUpOwogICAgICBzaW5nbGVfbGluZSA9IEZBTFNFOwogICAgfQogICAgaWYodGFnTmFtZSkKICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCB0YWdOYW1lKTsKICB9CiAgcmV0dXJuIEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKilvdXRwdXQtPmJ1Ziwgb3V0cHV0LT5zaXplKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfeG1sX3dyaXRlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgRHluQnVmIG91dHB1dCA9IHswfTsKICBKU1ZhbHVlQ29uc3Qgb2JqID0gYXJnYyA+IDAgPyBhcmd2WzBdIDogSlNfVU5ERUZJTkVEOwogIEpTVmFsdWUgcmV0LCBsYXN0LCBjaGlsZHJlbiA9IEpTX1VOREVGSU5FRCwgYXJyID0gSlNfVU5ERUZJTkVEOwogIGludDMyX3QgbWF4X2RlcHRoID0gSU5UMzJfTUFYOwogIHNpemVfdCBsZW47CiAgQk9PTCBmbGF0ID0gVFJVRTsKCiAganNfZGJ1Zl9pbml0KGN0eCwgJm91dHB1dCk7CgogIGlmKGFyZ2MgPj0gMikKICAgIEpTX1RvSW50MzIoY3R4LCAmbWF4X2RlcHRoLCBhcmd2WzFdKTsKCiAgaWYoIUpTX0lzQXJyYXkoY3R4LCBvYmopKSB7CiAgICBhcnIgPSBKU19OZXdBcnJheShjdHgpOwogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBhcnIsIDAsIEpTX0R1cFZhbHVlKGN0eCwgb2JqKSk7CiAgICBvYmogPSBhcnI7CiAgfQoKICBsZW4gPSBqc19hcnJheV9sZW5ndGgoY3R4LCBvYmopOwoKICBsYXN0ID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIGxlbiAtIDEpOwoKICBpZihKU19Jc09iamVjdChsYXN0KSkgewogICAgY2hpbGRyZW4gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGxhc3QsICJjaGlsZHJlbiIpOwoKICAgIGlmKEpTX0lzQXJyYXkoY3R4LCBjaGlsZHJlbikpCiAgICAgIGZsYXQgPSBGQUxTRTsKICB9CgogIHhtbF9kZWJ1ZygianNfeG1sX3dyaXRlIGxlbj0lenUsIGNoaWxkcmVuPSVzLCBmbGF0PSVkXG4iLCBsZW4sIEpTX1RvQ1N0cmluZyhjdHgsIGNoaWxkcmVuKSwgZmxhdCk7CgogIGlmKGZsYXQpCiAgICByZXQgPSBqc194bWxfd3JpdGVfbGlzdChjdHgsIG9iaiwgbGVuLCAmb3V0cHV0KTsKICBlbHNlCiAgICByZXQgPSBqc194bWxfd3JpdGVfdHJlZShjdHgsIG9iaiwgbWF4X2RlcHRoLCAmb3V0cHV0KTsKCiAgZGJ1Zl9mcmVlKCZvdXRwdXQpOwoKICBpZighSlNfSXNVbmRlZmluZWQoYXJyKSkKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGFycik7CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc194bWxfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX0RFRigicmVhZCIsIDEsIGpzX3htbF9yZWFkKSwKICAgIEpTX0NGVU5DX0RFRigid3JpdGUiLCAyLCBqc194bWxfd3JpdGUpLAp9OwoKc3RhdGljIGludApqc194bWxfaW5pdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKCiAgY2hhcmFjdGVyX2NsYXNzZXNfaW5pdChjaGFycyk7CgogIEpTX1NldE1vZHVsZUV4cG9ydExpc3QoY3R4LCBtLCBqc194bWxfZnVuY3MsIGNvdW50b2YoanNfeG1sX2Z1bmNzKSk7CgogIEpTVmFsdWUgZGVmYXVsdE9iaiA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgZGVmYXVsdE9iaiwgInJlYWQiLCBKU19OZXdDRnVuY3Rpb24oY3R4LCBqc194bWxfcmVhZCwgInJlYWQiLCAxKSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBkZWZhdWx0T2JqLCAid3JpdGUiLCBKU19OZXdDRnVuY3Rpb24oY3R4LCBqc194bWxfd3JpdGUsICJ3cml0ZSIsIDIpKTsKICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiZGVmYXVsdCIsIGRlZmF1bHRPYmopOwoKICByZXR1cm4gMDsKfQoKI2lmZGVmIEpTX1NIQVJFRF9MSUJSQVJZCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUganNfaW5pdF9tb2R1bGUKI2Vsc2UKI2RlZmluZSBKU19JTklUX01PRFVMRSBqc19pbml0X21vZHVsZV94bWwKI2VuZGlmCgpWSVNJQkxFIEpTTW9kdWxlRGVmKgpKU19JTklUX01PRFVMRShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpIHsKICBKU01vZHVsZURlZiogbTsKICBtID0gSlNfTmV3Q01vZHVsZShjdHgsIG1vZHVsZV9uYW1lLCBqc194bWxfaW5pdCk7CiAgaWYoIW0pCiAgICByZXR1cm4gTlVMTDsKICBKU19BZGRNb2R1bGVFeHBvcnRMaXN0KGN0eCwgbSwganNfeG1sX2Z1bmNzLCBjb3VudG9mKGpzX3htbF9mdW5jcykpOwogIEpTX0FkZE1vZHVsZUV4cG9ydChjdHgsIG0sICJkZWZhdWx0Iik7CiAgcmV0dXJuIG07Cn0KAAAAAAAAAADpWwAAAAAAAAAAAAAAAAAAAAAAAOlbAAAAAAAAAAAAAAAAAAAAAAAA6VsAAAAAAAAAAAAAAAAAAAAAAADpWwAAAAAAAAAAAAAAAAAAAAAAAOlbAAAAAAAAAAAAAAAAAAAAAAAA6VsAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL4FAAAAAAAAygUAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 40210,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2992,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAAOqQAAAAAAAA65AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6pAAAAAAAADqkAAAAAAAAAAAAAAAAPC/"
				],
				[
					2993,
					1,
					"left_delete",
					null,
					"AQAAAOqQAAAAAAAA6pAAAAAAAAABAAAAag",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA65AAAAAAAADrkAAAAAAAAAAAAAAAAPC/"
				],
				[
					2994,
					1,
					"insert",
					{
						"characters": "ect.assign("
					},
					"CwAAAOqQAAAAAAAA65AAAAAAAAAAAAAA65AAAAAAAADskAAAAAAAAAAAAADskAAAAAAAAO2QAAAAAAAAAAAAAO2QAAAAAAAA7pAAAAAAAAAAAAAA7pAAAAAAAADvkAAAAAAAAAAAAADvkAAAAAAAAPCQAAAAAAAAAAAAAPCQAAAAAAAA8ZAAAAAAAAAAAAAA8ZAAAAAAAADykAAAAAAAAAAAAADykAAAAAAAAPOQAAAAAAAAAAAAAPOQAAAAAAAA9JAAAAAAAAAAAAAA9JAAAAAAAAD1kAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA6pAAAAAAAADqkAAAAAAAAAAAAAAAAPC/"
				],
				[
					2995,
					1,
					"insert",
					{
						"characters": "catchable,"
					},
					"CgAAAPWQAAAAAAAA9pAAAAAAAAAAAAAA9pAAAAAAAAD3kAAAAAAAAAAAAAD3kAAAAAAAAPiQAAAAAAAAAAAAAPiQAAAAAAAA+ZAAAAAAAAAAAAAA+ZAAAAAAAAD6kAAAAAAAAAAAAAD6kAAAAAAAAPuQAAAAAAAAAAAAAPuQAAAAAAAA/JAAAAAAAAAAAAAA/JAAAAAAAAD9kAAAAAAAAAAAAAD9kAAAAAAAAP6QAAAAAAAAAAAAAP6QAAAAAAAA/5AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA9ZAAAAAAAAD1kAAAAAAAAAAAAAAAAPC/"
				],
				[
					2996,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAAP+QAAAAAAAAAJEAAAAAAAAAAAAAAJEAAAAAAAABkQAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA/5AAAAAAAAD/kAAAAAAAAAAAAAAAAPC/"
				],
				[
					2997,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAGRAAAAAAAAApEAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAZEAAAAAAAABkQAAAAAAAAAAAAAAAPC/"
				],
				[
					3000,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AgAAABKRAAAAAAAAE5EAAAAAAAAAAAAAE5EAAAAAAAATkQAAAAAAAAUAAAAoKSAgPQ",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAEpEAAAAAAAAXkQAAAAAAAAAAAAAAAPC/"
				],
				[
					3002,
					1,
					"left_delete",
					null,
					"AQAAAB2RAAAAAAAAHZEAAAAAAAABAAAAOw",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHpEAAAAAAAAekQAAAAAAAP///////+9/"
				],
				[
					3003,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAB2RAAAAAAAAHpEAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHZEAAAAAAAAdkQAAAAAAAAAAAAAAAPC/"
				],
				[
					3004,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB6RAAAAAAAAH5EAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAHpEAAAAAAAAekQAAAAAAAAAAAAAAAPC/"
				],
				[
					3006,
					2,
					"right_delete",
					null,
					"AgAAACSRAAAAAAAAJJEAAAAAAAABAAAAYySRAAAAAAAAJJEAAAAAAAABAAAAYQ",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAJJEAAAAAAAAkkQAAAAAAAAAAAAAAAPC/"
				],
				[
					3010,
					1,
					"revert",
					null,
					"",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAABJQAAAAAAAAElAAAAAAAAAAAAAAAAERA"
				],
				[
					3023,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AwAAAEmQAAAAAAAASpAAAAAAAAAAAAAASpAAAAAAAABKkAAAAAAAAAQAAAAgIC8vSpAAAAAAAABLkAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAATZAAAAAAAABJkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3026,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAG2QAAAAAAAAbpAAAAAAAAAAAAAAbpAAAAAAAABvkAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAbZAAAAAAAABtkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3052,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKOQAAAAAAAApJAAAAAAAAAAAAAApJAAAAAAAAClkAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo5AAAAAAAACjkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3054,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAKOQAAAAAAAApJAAAAAAAAAAAAAApJAAAAAAAAClkAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAo5AAAAAAAACjkAAAAAAAAAAAAAAAACRA"
				],
				[
					3055,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKWQAAAAAAAAp5AAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAApZAAAAAAAAClkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3056,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKaQAAAAAAAAqJAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAppAAAAAAAACmkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3057,
					1,
					"insert",
					{
						"characters": "constructor"
					},
					"CwAAAKeQAAAAAAAAqJAAAAAAAAAAAAAAqJAAAAAAAACpkAAAAAAAAAAAAACpkAAAAAAAAKqQAAAAAAAAAAAAAKqQAAAAAAAAq5AAAAAAAAAAAAAAq5AAAAAAAACskAAAAAAAAAAAAACskAAAAAAAAK2QAAAAAAAAAAAAAK2QAAAAAAAArpAAAAAAAAAAAAAArpAAAAAAAACvkAAAAAAAAAAAAACvkAAAAAAAALCQAAAAAAAAAAAAALCQAAAAAAAAsZAAAAAAAAAAAAAAsZAAAAAAAACykAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAp5AAAAAAAACnkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3059,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAALOQAAAAAAAAtJAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAs5AAAAAAAACzkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3060,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALSQAAAAAAAAtZAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtJAAAAAAAAC0kAAAAAAAAAAAAAAAAPC/"
				],
				[
					3061,
					2,
					"left_delete",
					null,
					"AgAAALSQAAAAAAAAtJAAAAAAAAABAAAAILOQAAAAAAAAs5AAAAAAAAABAAAAMA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtZAAAAAAAAC1kAAAAAAAAAAAAAAAAPC/"
				],
				[
					3062,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAALOQAAAAAAAAtJAAAAAAAAAAAAAAtJAAAAAAAAC1kAAAAAAAAAAAAAC1kAAAAAAAALaQAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAs5AAAAAAAACzkAAAAAAAAAAAAAAAAPC/"
				],
				[
					3063,
					1,
					"insert",
					{
						"characters": " self"
					},
					"BQAAALaQAAAAAAAAt5AAAAAAAAAAAAAAt5AAAAAAAAC4kAAAAAAAAAAAAAC4kAAAAAAAALmQAAAAAAAAAAAAALmQAAAAAAAAupAAAAAAAAAAAAAAupAAAAAAAAC7kAAAAAAAAAAAAAA",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAtpAAAAAAAAC2kAAAAAAAAAAAAAAAAPC/"
				],
				[
					3072,
					1,
					"revert",
					null,
					"",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAu5AAAAAAAAC7kAAAAAAAAAAAAAAAAPC/"
				],
				[
					3131,
					1,
					"paste",
					null,
					"AgAAAPePAAAAAAAAU5MAAAAAAAAAAAAAU5MAAAAAAABTkwAAAAAAAHADAAAKZXhwb3J0IGNvbnN0IGNhdGNoYWJsZSA9IGZ1bmN0aW9uIENhdGNoYWJsZShzZWxmKSB7CiAgYXNzZXJ0KGlzRnVuY3Rpb24oc2VsZikpOwoKICBpZighKHNlbGYgaW5zdGFuY2VvZiBjYXRjaGFibGUpKSBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc2VsZiwgY2F0Y2hhYmxlLnByb3RvdHlwZSk7CiAgaWYoJ2NvbnN0cnVjdG9yJyBpbiBzZWxmKSBzZWxmLmNvbnN0cnVjdG9yID0gY2F0Y2hhYmxlOwoKICByZXR1cm4gc2VsZjsKfTsKCk9iamVjdC5hc3NpZ24oY2F0Y2hhYmxlLCB7CiAgW1N5bWJvbC5zcGVjaWVzXTogY2F0Y2hhYmxlLAogIHByb3RvdHlwZTogT2JqZWN0LmFzc2lnbihmdW5jdGlvbiBDYXRjaGFibGUoKSB7fSwgewogICAgdGhlbihoYW5kbGVyKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yW1N5bWJvbC5zcGVjaWVzXSgoLi4uYXJncykgPT4gewogICAgICAgIGxldCByZXRWYWw7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldFZhbCA9IHRoaXMoLi4uYXJncyk7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICB0aHJvdyBlOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgICByZXR1cm4gaGFuZGxlcihyZXRWYWwpOwogICAgICB9KTsKICAgIH0sCiAgICBjYXRjaChoYW5kbGVyKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yW1N5bWJvbC5zcGVjaWVzXSgoLi4uYXJncykgPT4gewogICAgICAgIGxldCByZXRWYWw7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIHJldFZhbCA9IHRoaXMoLi4uYXJncyk7CiAgICAgICAgfSBjYXRjaChlKSB7CiAgICAgICAgICByZXR1cm4gaGFuZGxlcihlKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIHJldFZhbDsKICAgICAgfSk7CiAgICB9CiAgfSkKfSk7",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAA948AAAAAAABnkwAAAAAAAAAAAAAAAPC/"
				],
				[
					3203,
					2,
					"left_delete",
					null,
					"AgAAAEqRAAAAAAAASpEAAAAAAAAJAAAAQ2F0Y2hhYmxlSZEAAAAAAABJkQAAAAAAAAEAAAAg",
					"EAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAASpEAAAAAAABTkQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-blob.c",
			"settings":
			{
				"buffer_size": 8449,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prettier",
				"JsPrettier: Format Code"
			],
			[
				"prett",
				"JsPrettier: Format Code"
			],
			[
				"list pack",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/deconflict.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_textcode.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/os.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/css3-selectors.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/predicate.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/std.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tree_walker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml/write.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml/read.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/c.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/timers.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_predicate.js",
		"/home/roman/Schreibtisch/Ophtalmologische Gruppen.txt",
		"/home/roman/Schreibtisch/discogs-shipping-policies.js",
		"/home/roman/.config/sublime-text/Packages/JsPrettier/JsPrettier.sublime-settings",
		"/home/roman/.config/sublime-text/Packages/User/JsPrettier.sublime-settings",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selectors.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/modules.sublime-project",
		"/home/roman/Projects/c-mcp3301/fast-arduino-lib/cores/fastarduino/devices/mcp3001.h",
		"/home/roman/Projects/c-mcp3301/mcp300x/mcp300x.c",
		"/home/roman/Projects/c-mcp3301/mcp3001/src/mcp3001.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/c-mcp3301/fast-arduino-lib/cores/fastarduino/devices/mcp3x0x.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/require.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tree-walker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml-write.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xml-parse.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_css3_selector.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/callgrind.out.142973",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-textcode.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/src/tutf8e.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e/iso_8859_15.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tutf8e/include/tutf8e.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/ecmascript.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/include/libutf.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libutf/src/libutf.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/src/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/include/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,-*/inst/*,*.cmake,CMakeLists.txt",
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"JS_NewAtom",
			"JSClassExoticMethods",
			"js_predicate_finalizer",
			"\"mem",
			"xml_debug",
			"^\\s*f*printf",
			"isFunction",
			"function asser",
			"catchable",
			"isFunct",
			"assert",
			"this",
			"try {",
			"try",
			"function [^ ]*filter",
			"function [^ ]*eys",
			"functiuon [^ ]*eys",
			"Keys",
			"function [^ ]*[Oo]bject",
			"ntries",
			"function union",
			"symmetric",
			"setInterval",
			"toArray",
			"IFREG",
			"statSync",
			"readSync",
			"\\((path|file)",
			"readlinkSync",
			"'getset'",
			"memoize",
			"search",
			"ListExports",
			"onlyUp",
			"getOpt",
			"FileSystemWritableFileStream",
			"waitFor",
			"timer",
			"Timer",
			"gettersetter",
			"getset\\(",
			"gettersetter",
			"gettersetter ",
			"gettersetter",
			"getset\\(",
			"gettersetter\\(",
			"memoize",
			" getset\\(",
			"getset\\(",
			"memoize",
			"getset\\(",
			"'');",
			"^(\\s*)console.log",
			"checkNode",
			"hier\\(",
			"hier",
			"hier\\(",
			"get attributes",
			"NamedNodeMap",
			"'NamedNodeMap'",
			"Attr ",
			"factories",
			"function Factory",
			"Factory",
			"for =",
			"Factory.for",
			"querySelectorAll",
			"applyPath",
			"deep\\.",
			"ReturnValuePathFunction",
			"ReturnValuePath",
			"iterate =",
			"deep\\.",
			"  static ([^=]*) = \\(?([^=\\(\\)]*)\\)? => {",
			"static ",
			"Util\\.",
			"_AND:",
			"\"and\"",
			"NodeList",
			"static cache",
			"constructor.cache",
			"\\.create",
			"os\\.",
			"getFileDescriptor",
			"misc\\.",
			"getFileDesc",
			"watch",
			"export \\*",
			"watch",
			"watchj",
			"\"watch",
			"RANDOM_RAND:",
			"isUndefined",
			"IS_INTEGER:",
			"IS_INSTANCE",
			"obj",
			"IS_CONSTRUCTOR:",
			"isConstructor",
			"isBigDec",
			"functionName",
			"dupArrayBuffer",
			"now",
			"getFunction",
			"functionName",
			"Util",
			"Util\\.",
			"abbreviate",
			"BITFIELD_BITS:",
			"BITFIELD_BITS",
			"\"",
			"bits",
			"Location",
			"JS_EVAL_FLAG_BACKTRACE_BARRIER",
			"repeater",
			"std.open",
			"std\\.",
			"pars",
			"parse2",
			"Util\\.",
			"isIterator",
			"Util\\.",
			"inspect",
			"Inexist",
			"printFiles",
			"list-impo",
			"Inexistent",
			"Inexistens",
			"printFiles"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"js_input_buffer",
			"\\1//console.log",
			"export function \\1(\\2) {",
			"export const ",
			"num",
			"fopen",
			"",
			"isCFuncList",
			"",
			"js_arguments_at\\(args, 1\\)",
			"js_arguments_at\\(args, 0\\)",
			"js_arguments_at\\(args, 1\\)",
			"js_arguments_at\\(args, 0\\)",
			"js_arguments_at\\(args, i\\)",
			"getSelectPos",
			"getSelectText",
			"g.",
			"globalThis.\\1 = ",
			"  ",
			"ret = \\1\\nbreak;",
			"ret = \\1",
			"ret = \\1\\nbreak;",
			"->filter",
			"\\1//console",
			"}\\n\\n\\1",
			"writeXML",
			"readXML",
			"fs.readFileSync",
			"process.release.name == 'quickjs' ? requireModule",
			"process.release.name == 'quickjs' ? requireModule(",
			"typeof \\1 == 'function'",
			"typeof(\\1) == 'function'",
			"inspect",
			"writeXML",
			"readXML",
			"(typeof \\1 == 'object' && \\1 != null)",
			"typeof \\1 == 'function'",
			"is\\1",
			"return TYPE_\\1",
			";\\\\n\" \"",
			"timers.",
			"",
			"\\1\\2(",
			"\\1function \\2(",
			"\\1//console.",
			"createModule",
			"static \\1\\2 {",
			"static ",
			"pnws",
			"sel = \\1;",
			"js_is_array",
			"if(debug_module_loader >= 2)",
			"INSPECT_LEVEL(opts, depth)",
			"BOOL compact =",
			"INSPECT_IS_COMPACT\\(opts, depth\\)",
			"path_skip_component(\\1, \\2, 0);",
			"-18s",
			"%-\\1s",
			"__FUNCTION__",
			".value",
			"->value",
			"\\1//printf",
			"stream",
			"_ENDIANNESS",
			"_ENDIAN",
			"be'",
			"le'",
			"'utf-",
			"-BE'",
			"'UTF-",
			"endian",
			"->endian == BIG",
			"transform_terminate",
			"transform_",
			"\\1",
			"type",
			"js_misc_duparraybuffer",
			"out.puts",
			"putline",
			"\\1: \\2,",
			"",
			"{ return",
			"\\\\\"",
			"\\1if(debug_module_loader) \\2",
			"",
			"BuiltinModule",
			"Text.store",
			"Tokens",
			"tokenModifiers",
			"xml_debug",
			"\\1",
			"xml_debug",
			"WRITABLE_GET_WRITER",
			"WRITABLE_CLOSE",
			"struct stream_reader",
			"readable_cancel",
			"READABLE_CANCEL",
			"readable_unlock",
			"writable_get_writer",
			"writable_\\1lock",
			"READABLE_",
			"writ",
			"FUNC_CLOSE",
			"js_reader_method",
			"js_writer_method",
			"js_stream_method",
			"STREAM_LOCKED",
			"->reader",
			"\"StreamReader",
			"Reader",
			"METHOD_",
			"array",
			"funcs.array",
			"js_resolve_functions",
			"js_resolvefunctions",
			"funcs[1]",
			"funcs[0]",
			"js_resolvingfunctions_free",
			"js_resolvingfunctions_ree",
			"length",
			"Chunk",
			"loc",
			"prevLength",
			"prevOffset",
			"compact(\\1)",
			"js_location_create",
			"lexer_token(",
			"token_lex("
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14890,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										14890,
										14890
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										14890,
										14890
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										14890,
										14890
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										14890,
										14890
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										14890,
										14890
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										14890,
										14890
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/Outline/outline-Dark.hidden-tmTheme",
							"current_file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
							"function_name_status_row": 11,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1225,
									1234
								],
								[
									1368,
									1377
								],
								[
									1416,
									1427
								],
								[
									1466,
									1481
								],
								[
									1528,
									1544
								],
								[
									1603,
									1612
								],
								[
									1628,
									1639
								],
								[
									1655,
									1670
								],
								[
									1686,
									1702
								],
								[
									1725,
									1732
								],
								[
									1763,
									1772
								],
								[
									1799,
									1808
								],
								[
									1834,
									1842
								],
								[
									1867,
									1874
								],
								[
									1893,
									1902
								],
								[
									1921,
									1927
								],
								[
									1966,
									1974
								],
								[
									1983,
									1995
								],
								[
									2015,
									2027
								],
								[
									2064,
									2077
								],
								[
									2736,
									2752
								],
								[
									2763,
									2777
								],
								[
									3126,
									3133
								],
								[
									3167,
									3179
								],
								[
									3190,
									3206
								],
								[
									3318,
									3339
								],
								[
									3371,
									3387
								],
								[
									3425,
									3442
								],
								[
									3474,
									3494
								],
								[
									3534,
									3550
								],
								[
									3593,
									3601
								],
								[
									3662,
									3670
								],
								[
									3721,
									3738
								],
								[
									3789,
									3795
								],
								[
									3847,
									3862
								],
								[
									3959,
									3974
								],
								[
									4050,
									4057
								],
								[
									4068,
									4080
								],
								[
									4098,
									4114
								],
								[
									4143,
									4159
								],
								[
									4180,
									4197
								],
								[
									4218,
									4234
								],
								[
									4268,
									4276
								],
								[
									4339,
									4347
								],
								[
									4412,
									4433
								],
								[
									4513,
									4533
								],
								[
									4677,
									4683
								],
								[
									4770,
									4785
								],
								[
									5081,
									5098
								],
								[
									5265,
									5286
								],
								[
									5449,
									5464
								],
								[
									5665,
									5677
								],
								[
									5740,
									5747
								],
								[
									5758,
									5770
								],
								[
									5788,
									5804
								],
								[
									5909,
									5930
								],
								[
									5962,
									5978
								],
								[
									6004,
									6021
								],
								[
									6047,
									6067
								],
								[
									6095,
									6111
								],
								[
									6136,
									6144
								],
								[
									6215,
									6223
								],
								[
									6289,
									6306
								],
								[
									6357,
									6363
								],
								[
									6449,
									6464
								],
								[
									6588,
									6603
								],
								[
									6831,
									6851
								],
								[
									6921,
									6943
								],
								[
									7046,
									7062
								],
								[
									7107,
									7126
								],
								[
									7171,
									7193
								],
								[
									7285,
									7292
								],
								[
									7326,
									7338
								],
								[
									7377,
									7385
								],
								[
									7419,
									7426
								],
								[
									7460,
									7472
								],
								[
									7511,
									7527
								],
								[
									7605,
									7625
								],
								[
									7643,
									7659
								],
								[
									7677,
									7695
								],
								[
									7713,
									7726
								],
								[
									7798,
									7812
								],
								[
									7862,
									7875
								],
								[
									7942,
									7956
								],
								[
									7974,
									7988
								],
								[
									8006,
									8020
								],
								[
									8062,
									8078
								],
								[
									8153,
									8170
								],
								[
									8181,
									8205
								],
								[
									8223,
									8243
								],
								[
									8261,
									8283
								],
								[
									8302,
									8317
								],
								[
									8336,
									8351
								],
								[
									8370,
									8387
								],
								[
									8497,
									8510
								],
								[
									8616,
									8636
								],
								[
									8656,
									8670
								],
								[
									8711,
									8728
								],
								[
									8767,
									8788
								],
								[
									8833,
									8852
								],
								[
									8900,
									8919
								],
								[
									8957,
									8976
								],
								[
									9029,
									9050
								],
								[
									9103,
									9120
								],
								[
									9139,
									9158
								],
								[
									9202,
									9220
								],
								[
									9421,
									9446
								],
								[
									9544,
									9574
								],
								[
									10188,
									10201
								],
								[
									10459,
									10476
								],
								[
									10511,
									10527
								],
								[
									10541,
									10554
								],
								[
									10610,
									10627
								],
								[
									10667,
									10684
								],
								[
									10720,
									10737
								],
								[
									10828,
									10846
								],
								[
									10994,
									11011
								],
								[
									11039,
									11053
								],
								[
									11103,
									11117
								],
								[
									11140,
									11159
								],
								[
									11181,
									11200
								],
								[
									11299,
									11311
								],
								[
									11375,
									11383
								],
								[
									11408,
									11423
								],
								[
									11470,
									11483
								],
								[
									11505,
									11519
								],
								[
									11546,
									11559
								],
								[
									11583,
									11602
								],
								[
									11625,
									11644
								],
								[
									11687,
									11700
								],
								[
									11723,
									11739
								],
								[
									11798,
									11814
								],
								[
									11952,
									11968
								],
								[
									11990,
									12016
								],
								[
									12039,
									12058
								],
								[
									12081,
									12100
								],
								[
									12123,
									12153
								],
								[
									12176,
									12205
								],
								[
									12228,
									12249
								],
								[
									12272,
									12291
								],
								[
									12314,
									12334
								],
								[
									12357,
									12378
								],
								[
									12401,
									12427
								],
								[
									12450,
									12472
								],
								[
									12495,
									12516
								],
								[
									12539,
									12562
								],
								[
									12585,
									12610
								],
								[
									12667,
									12691
								],
								[
									12738,
									12756
								],
								[
									12799,
									12823
								],
								[
									12901,
									12913
								],
								[
									12948,
									12958
								],
								[
									12992,
									13005
								],
								[
									13053,
									13077
								],
								[
									13117,
									13130
								],
								[
									13167,
									13176
								],
								[
									13212,
									13219
								],
								[
									13254,
									13264
								],
								[
									13313,
									13334
								],
								[
									13375,
									13386
								],
								[
									13450,
									13460
								],
								[
									13497,
									13506
								],
								[
									13547,
									13557
								],
								[
									14155,
									14168
								],
								[
									14176,
									14197
								],
								[
									14237,
									14255
								],
								[
									14334,
									14346
								],
								[
									14357,
									14370
								],
								[
									14424,
									14434
								],
								[
									14476,
									14492
								],
								[
									14529,
									14539
								],
								[
									14572,
									14583
								],
								[
									14616,
									14629
								],
								[
									14664,
									14678
								],
								[
									14717,
									14732
								],
								[
									14775,
									14791
								],
								[
									14829,
									14843
								],
								[
									14982,
									14996
								],
								[
									15105,
									15125
								],
								[
									16704,
									16724
								],
								[
									16879,
									16903
								],
								[
									17650,
									17660
								],
								[
									17673,
									17686
								],
								[
									17720,
									17733
								],
								[
									17755,
									17766
								],
								[
									17836,
									17856
								],
								[
									17939,
									17946
								],
								[
									18059,
									18066
								],
								[
									18172,
									18179
								],
								[
									18300,
									18307
								],
								[
									18511,
									18518
								],
								[
									18707,
									18721
								],
								[
									18758,
									18773
								],
								[
									18827,
									18834
								],
								[
									19226,
									19237
								],
								[
									19368,
									19379
								],
								[
									19504,
									19517
								],
								[
									19628,
									19643
								],
								[
									19756,
									19765
								],
								[
									19854,
									19863
								],
								[
									19952,
									19966
								],
								[
									20060,
									20074
								],
								[
									20181,
									20199
								],
								[
									20310,
									20321
								],
								[
									20412,
									20423
								],
								[
									20514,
									20525
								],
								[
									20602,
									20610
								],
								[
									20649,
									20664
								],
								[
									20690,
									20700
								],
								[
									20741,
									20765
								],
								[
									20791,
									20802
								],
								[
									20828,
									20850
								],
								[
									20876,
									20892
								],
								[
									20966,
									20982
								],
								[
									21054,
									21070
								],
								[
									21147,
									21163
								],
								[
									21236,
									21252
								],
								[
									21328,
									21347
								],
								[
									21371,
									21385
								],
								[
									21433,
									21445
								],
								[
									21652,
									21668
								],
								[
									21715,
									21729
								],
								[
									21954,
									21965
								],
								[
									22170,
									22183
								],
								[
									22369,
									22378
								],
								[
									22451,
									22461
								],
								[
									22530,
									22541
								],
								[
									22647,
									22657
								],
								[
									22712,
									22722
								],
								[
									22778,
									22790
								],
								[
									22891,
									22904
								],
								[
									23003,
									23016
								],
								[
									23076,
									23091
								],
								[
									23148,
									23160
								],
								[
									23203,
									23219
								],
								[
									23262,
									23273
								],
								[
									23317,
									23333
								],
								[
									23381,
									23397
								],
								[
									23489,
									23504
								],
								[
									23631,
									23643
								],
								[
									23735,
									23749
								],
								[
									23793,
									23815
								],
								[
									23881,
									23898
								],
								[
									23938,
									23955
								],
								[
									24001,
									24013
								],
								[
									24040,
									24053
								],
								[
									24097,
									24113
								],
								[
									24157,
									24177
								],
								[
									24240,
									24251
								],
								[
									24273,
									24283
								],
								[
									24328,
									24350
								],
								[
									24470,
									24477
								],
								[
									24624,
									24641
								],
								[
									24708,
									24728
								],
								[
									24788,
									24810
								],
								[
									24906,
									24920
								],
								[
									25068,
									25088
								],
								[
									25160,
									25179
								],
								[
									25250,
									25267
								],
								[
									25343,
									25357
								],
								[
									25415,
									25430
								],
								[
									25470,
									25490
								],
								[
									25530,
									25547
								],
								[
									25611,
									25626
								],
								[
									25694,
									25709
								],
								[
									25754,
									25772
								],
								[
									25790,
									25808
								],
								[
									25826,
									25845
								],
								[
									25908,
									25924
								],
								[
									25990,
									26005
								],
								[
									26020,
									26042
								],
								[
									26132,
									26149
								],
								[
									26235,
									26242
								],
								[
									26344,
									26353
								],
								[
									26445,
									26463
								],
								[
									26542,
									26561
								],
								[
									26665,
									26680
								],
								[
									26795,
									26802
								],
								[
									26969,
									26980
								],
								[
									27104,
									27122
								],
								[
									27144,
									27159
								],
								[
									27217,
									27234
								],
								[
									27368,
									27390
								],
								[
									27472,
									27500
								],
								[
									27583,
									27608
								],
								[
									27695,
									27718
								],
								[
									27820,
									27832
								],
								[
									27867,
									27879
								],
								[
									27925,
									27938
								],
								[
									28065,
									28077
								],
								[
									28158,
									28175
								],
								[
									28219,
									28232
								],
								[
									28324,
									28340
								],
								[
									28509,
									28526
								],
								[
									28654,
									28675
								],
								[
									28730,
									28750
								],
								[
									28795,
									28812
								],
								[
									28871,
									28893
								],
								[
									29183,
									29211
								],
								[
									29218,
									29250
								],
								[
									29316,
									29339
								],
								[
									29586,
									29619
								],
								[
									29809,
									29831
								],
								[
									29946,
									29960
								],
								[
									30041,
									30056
								],
								[
									30120,
									30131
								],
								[
									30540,
									30562
								],
								[
									30725,
									30741
								],
								[
									30782,
									30798
								],
								[
									30932,
									30945
								],
								[
									31023,
									31038
								],
								[
									31059,
									31079
								],
								[
									31199,
									31220
								],
								[
									31266,
									31284
								],
								[
									31331,
									31347
								],
								[
									31400,
									31422
								],
								[
									31540,
									31554
								],
								[
									31625,
									31640
								],
								[
									31754,
									31774
								],
								[
									31821,
									31841
								],
								[
									31895,
									31910
								],
								[
									31964,
									31985
								],
								[
									32033,
									32046
								],
								[
									32237,
									32252
								],
								[
									32389,
									32405
								],
								[
									32485,
									32509
								],
								[
									32596,
									32608
								],
								[
									33476,
									33491
								],
								[
									34328,
									34343
								],
								[
									34354,
									34370
								],
								[
									34480,
									34499
								],
								[
									34605,
									34619
								],
								[
									34747,
									34762
								],
								[
									34928,
									34948
								],
								[
									35144,
									35161
								],
								[
									35869,
									35889
								],
								[
									35900,
									35912
								],
								[
									35923,
									35937
								],
								[
									35948,
									35968
								],
								[
									35979,
									35997
								],
								[
									36008,
									36025
								],
								[
									36036,
									36053
								],
								[
									36064,
									36082
								],
								[
									36093,
									36114
								],
								[
									36125,
									36138
								],
								[
									36149,
									36161
								],
								[
									36222,
									36234
								],
								[
									36477,
									36495
								],
								[
									36775,
									36795
								],
								[
									37046,
									37066
								],
								[
									37346,
									37360
								],
								[
									37601,
									37621
								],
								[
									37899,
									37917
								],
								[
									38072,
									38089
								],
								[
									38241,
									38258
								],
								[
									38410,
									38428
								],
								[
									38581,
									38602
								],
								[
									38751,
									38764
								],
								[
									38930,
									38942
								],
								[
									39141,
									39158
								],
								[
									39363,
									39389
								],
								[
									39571,
									39584
								],
								[
									39711,
									39729
								],
								[
									39789,
									39811
								],
								[
									39949,
									39967
								],
								[
									40043,
									40065
								]
							],
							"symlist":
							[
								"\tⓂ  QUICKJS_H … — macro object",
								"—Ⓜ– js_likely ( ) … — macro function",
								"—Ⓜ– js_unlikely ( ) … — macro function",
								"\tⓂ  js_force_inline … — macro object",
								"—Ⓜ– __js_printf_like ( ) … — macro function",
								"—Ⓜ– js_likely ( ) … — macro function",
								"—Ⓜ– js_unlikely ( ) … — macro function",
								"\tⓂ  js_force_inline … — macro object",
								"—Ⓜ– __js_printf_like ( ) … — macro function",
								"\tⓂ  JS_BOOL … — macro object",
								"\tⓉ  JSRuntime ; — typedef",
								"\tⓉ  JSContext ; — typedef",
								"\tⓉ  JSObject ; — typedef",
								"\tⓉ  JSClass ; — typedef",
								"\tⓉ  JSClassID ; — typedef",
								"\tⓉ  JSAtom ; — typedef",
								"\tⓂ  JS_PTR64 … — macro object",
								"—Ⓜ– JS_PTR64_DEF ( ) … — macro function",
								"—Ⓜ– JS_PTR64_DEF ( ) … — macro function",
								"\tⓂ  JS_NAN_BOXING … — macro object",
								"\tⓉ  JSRefCountHeader ; — typedef",
								"\tⓂ  JS_FLOAT64_NAN … — macro object",
								"\tⓉ  JSValue ; — typedef",
								"\tⓉ  JSValueConst ; — typedef",
								"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
								"—Ⓜ– JS_MKVAL ( ) … — macro function",
								"—Ⓜ– JS_MKPTR ( ) … — macro function",
								"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
								"\tⓂ  JS_NAN … — macro object",
								"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
								"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
								"\tⓉ  JSValue ; — typedef",
								"\tⓂ  JSValueConst … — macro object",
								"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
								"—Ⓜ– JS_MKVAL ( ) … — macro function",
								"—Ⓜ– JS_MKPTR ( ) … — macro function",
								"\tⓂ  JS_FLOAT64_TAG_ADDEND … — macro object",
								"—Ⓕ– JS_VALUE_GET_FLOAT64 ( ) { … } — function",
								"\tⓂ  JS_NAN … — macro object",
								"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
								"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
								"—Ⓕ– JS_VALUE_GET_NORM_TAG ( ) { … } — function",
								"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
								"\tⓉ  JSValueUnion ; — typedef",
								"\tⓉ  JSValue ; — typedef",
								"\tⓂ  JSValueConst … — macro object",
								"—Ⓜ– JS_VALUE_GET_TAG ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_NORM_TAG ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_INT ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_BOOL ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_FLOAT64 ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_PTR ( ) … — macro function",
								"—Ⓜ– JS_MKVAL ( ) … — macro function",
								"—Ⓜ– JS_MKPTR ( ) … — macro function",
								"—Ⓜ– JS_TAG_IS_FLOAT64 ( ) … — macro function",
								"\tⓂ  JS_NAN … — macro object",
								"—Ⓕ– __JS_NewFloat64 ( ) { … } — function",
								"—Ⓕ– JS_VALUE_IS_NAN ( ) { … } — function",
								"—Ⓜ– JS_VALUE_IS_BOTH_INT ( ) … — macro function",
								"—Ⓜ– JS_VALUE_IS_BOTH_FLOAT ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_OBJ ( ) … — macro function",
								"—Ⓜ– JS_VALUE_GET_STRING ( ) … — macro function",
								"—Ⓜ– JS_VALUE_HAS_REF_COUNT ( ) … — macro function",
								"\tⓂ  JS_NULL … — macro object",
								"\tⓂ  JS_UNDEFINED … — macro object",
								"\tⓂ  JS_FALSE … — macro object",
								"\tⓂ  JS_TRUE … — macro object",
								"\tⓂ  JS_EXCEPTION … — macro object",
								"\tⓂ  JS_UNINITIALIZED … — macro object",
								"\tⓂ  JS_PROP_CONFIGURABLE … — macro object",
								"\tⓂ  JS_PROP_WRITABLE … — macro object",
								"\tⓂ  JS_PROP_ENUMERABLE … — macro object",
								"\tⓂ  JS_PROP_C_W_E … — macro object",
								"\tⓂ  JS_PROP_LENGTH … — macro object",
								"\tⓂ  JS_PROP_TMASK … — macro object",
								"\tⓂ  JS_PROP_NORMAL … — macro object",
								"\tⓂ  JS_PROP_GETSET … — macro object",
								"\tⓂ  JS_PROP_VARREF … — macro object",
								"\tⓂ  JS_PROP_AUTOINIT … — macro object",
								"\tⓂ  JS_PROP_HAS_SHIFT … — macro object",
								"\tⓂ  JS_PROP_HAS_CONFIGURABLE … — macro object",
								"\tⓂ  JS_PROP_HAS_WRITABLE … — macro object",
								"\tⓂ  JS_PROP_HAS_ENUMERABLE … — macro object",
								"\tⓂ  JS_PROP_HAS_GET … — macro object",
								"\tⓂ  JS_PROP_HAS_SET … — macro object",
								"\tⓂ  JS_PROP_HAS_VALUE … — macro object",
								"\tⓂ  JS_PROP_THROW … — macro object",
								"\tⓂ  JS_PROP_THROW_STRICT … — macro object",
								"\tⓂ  JS_PROP_NO_ADD … — macro object",
								"\tⓂ  JS_PROP_NO_EXOTIC … — macro object",
								"\tⓂ  JS_DEFAULT_STACK_SIZE … — macro object",
								"\tⓂ  JS_EVAL_TYPE_GLOBAL … — macro object",
								"\tⓂ  JS_EVAL_TYPE_MODULE … — macro object",
								"\tⓂ  JS_EVAL_TYPE_DIRECT … — macro object",
								"\tⓂ  JS_EVAL_TYPE_INDIRECT … — macro object",
								"\tⓂ  JS_EVAL_TYPE_MASK … — macro object",
								"\tⓂ  JS_EVAL_FLAG_STRICT … — macro object",
								"\tⓂ  JS_EVAL_FLAG_STRIP … — macro object",
								"\tⓂ  JS_EVAL_FLAG_COMPILE_ONLY … — macro object",
								"\tⓂ  JS_EVAL_FLAG_BACKTRACE_BARRIER … — macro object",
								"\tⓉ  JSMallocState ; — typedef",
								"\tⓉ  JSMallocFunctions ; — typedef",
								"\tⓉ  JSGCObjectHeader ; — typedef",
								"—Ⓕ– JS_NewRuntime ( ) { … } — function",
								"—Ⓕ– JS_SetRuntimeInfo ( ) { … } — function",
								"—Ⓕ– JS_SetMemoryLimit ( ) { … } — function",
								"—Ⓕ– JS_SetGCThreshold ( ) { … } — function",
								"—Ⓕ– JS_SetMaxStackSize ( ) { … } — function",
								"—Ⓕ– JS_UpdateStackTop ( ) { … } — function",
								"—Ⓕ– JS_NewRuntime2 ( ) { … } — function",
								"—Ⓕ– JS_FreeRuntime ( ) { … } — function",
								"—Ⓕ– JS_GetRuntimeOpaque ( ) { … } — function",
								"—Ⓕ– JS_SetRuntimeOpaque ( ) { … } — function",
								"—Ⓕ– JS_MarkValue ( ) { … } — function",
								"—Ⓕ– JS_RunGC ( ) { … } — function",
								"—Ⓕ– JS_IsLiveObject ( ) { … } — function",
								"—Ⓕ– JS_NewContext ( ) { … } — function",
								"—Ⓕ– JS_FreeContext ( ) { … } — function",
								"—Ⓕ– JS_DupContext ( ) { … } — function",
								"—Ⓕ– JS_GetContextOpaque ( ) { … } — function",
								"—Ⓕ– JS_SetContextOpaque ( ) { … } — function",
								"—Ⓕ– JS_GetRuntime ( ) { … } — function",
								"—Ⓕ– JS_SetClassProto ( ) { … } — function",
								"—Ⓕ– JS_GetClassProto ( ) { … } — function",
								"—Ⓕ– JS_NewContextRaw ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicBaseObjects ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicDate ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicEval ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicStringNormalize ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicRegExpCompiler ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicRegExp ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicJSON ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicProxy ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicMapSet ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicTypedArrays ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicPromise ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicBigInt ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicBigFloat ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicBigDecimal ( ) { … } — function",
								"—Ⓕ– JS_AddIntrinsicOperators ( ) { … } — function",
								"—Ⓕ– JS_EnableBignumExt ( ) { … } — function",
								"—Ⓕ– js_string_codePointRange ( ) { … } — function",
								"—Ⓕ– js_malloc_rt ( ) { … } — function",
								"—Ⓕ– js_free_rt ( ) { … } — function",
								"—Ⓕ– js_realloc_rt ( ) { … } — function",
								"—Ⓕ– js_malloc_usable_size_rt ( ) { … } — function",
								"—Ⓕ– js_mallocz_rt ( ) { … } — function",
								"—Ⓕ– js_malloc ( ) { … } — function",
								"—Ⓕ– js_free ( ) { … } — function",
								"—Ⓕ– js_realloc ( ) { … } — function",
								"—Ⓕ– js_malloc_usable_size ( ) { … } — function",
								"—Ⓕ– js_realloc2 ( ) { … } — function",
								"—Ⓕ– js_mallocz ( ) { … } — function",
								"—Ⓕ– js_strdup ( ) { … } — function",
								"—Ⓕ– js_strndup ( ) { … } — function",
								"\tⓉ  JSMemoryUsage ; — typedef",
								"—Ⓕ– JS_ComputeMemoryUsage ( ) { … } — function",
								"—Ⓕ– JS_DumpMemoryUsage ( ) { … } — function",
								"\tⓂ  JS_ATOM_NULL … — macro object",
								"—Ⓕ– JS_NewAtomLen ( ) { … } — function",
								"—Ⓕ– JS_NewAtom ( ) { … } — function",
								"—Ⓕ– JS_NewAtomUInt32 ( ) { … } — function",
								"—Ⓕ– JS_DupAtom ( ) { … } — function",
								"—Ⓕ– JS_FreeAtom ( ) { … } — function",
								"—Ⓕ– JS_FreeAtomRT ( ) { … } — function",
								"—Ⓕ– JS_AtomToValue ( ) { … } — function",
								"—Ⓕ– JS_AtomToString ( ) { … } — function",
								"—Ⓕ– JS_AtomToCString ( ) { … } — function",
								"—Ⓕ– JS_ValueToAtom ( ) { … } — function",
								"\tⓉ  JSPropertyEnum ; — typedef",
								"\tⓉ  JSPropertyDescriptor ; — typedef",
								"\tⓉ  JSClassExoticMethods ; — typedef",
								"\tⓂ  JS_CALL_FLAG_CONSTRUCTOR … — macro object",
								"\tⓉ  JSClassDef ; — typedef",
								"—Ⓕ– JS_NewClassID ( ) { … } — function",
								"—Ⓕ– JS_GetClassID ( ) { … } — function",
								"—Ⓕ– JS_NewClass ( ) { … } — function",
								"—Ⓕ– JS_IsRegisteredClass ( ) { … } — function",
								"—Ⓕ– JSValue ( ) { … } — function",
								"—Ⓕ– JSValue ( ) { … } — function",
								"—Ⓕ– JSValue ( ) { … } — function",
								"—Ⓕ– JSValue ( ) { … } — function",
								"—Ⓕ– JSValue ( ) { … } — function",
								"—Ⓕ– JS_NewBigInt64 ( ) { … } — function",
								"—Ⓕ– JS_NewBigUint64 ( ) { … } — function",
								"—Ⓕ– JSValue ( ) { … } — function",
								"—Ⓕ– JS_IsNumber ( ) { … } — function",
								"—Ⓕ– JS_IsBigInt ( ) { … } — function",
								"—Ⓕ– JS_IsBigFloat ( ) { … } — function",
								"—Ⓕ– JS_IsBigDecimal ( ) { … } — function",
								"—Ⓕ– JS_IsBool ( ) { … } — function",
								"—Ⓕ– JS_IsNull ( ) { … } — function",
								"—Ⓕ– JS_IsUndefined ( ) { … } — function",
								"—Ⓕ– JS_IsException ( ) { … } — function",
								"—Ⓕ– JS_IsUninitialized ( ) { … } — function",
								"—Ⓕ– JS_IsString ( ) { … } — function",
								"—Ⓕ– JS_IsSymbol ( ) { … } — function",
								"—Ⓕ– JS_IsObject ( ) { … } — function",
								"—Ⓕ– JS_Throw ( ) { … } — function",
								"—Ⓕ– JS_GetException ( ) { … } — function",
								"—Ⓕ– JS_IsError ( ) { … } — function",
								"—Ⓕ– JS_ResetUncatchableError ( ) { … } — function",
								"—Ⓕ– JS_NewError ( ) { … } — function",
								"—Ⓕ– JS_NewUncatchableError ( ) { … } — function",
								"—Ⓕ– __js_printf_like ( ) { … } — function",
								"—Ⓕ– __js_printf_like ( ) { … } — function",
								"—Ⓕ– __js_printf_like ( ) { … } — function",
								"—Ⓕ– __js_printf_like ( ) { … } — function",
								"—Ⓕ– __js_printf_like ( ) { … } — function",
								"—Ⓕ– JS_ThrowOutOfMemory ( ) { … } — function",
								"—Ⓕ– __JS_FreeValue ( ) { … } — function",
								"—Ⓕ– JS_FreeValue ( ) { … } — function",
								"—Ⓕ– __JS_FreeValueRT ( ) { … } — function",
								"—Ⓕ– JS_FreeValueRT ( ) { … } — function",
								"—Ⓕ– JS_DupValue ( ) { … } — function",
								"—Ⓕ– JS_DupValueRT ( ) { … } — function",
								"—Ⓕ– JS_ToBool ( ) { … } — function",
								"—Ⓕ– JS_ToInt32 ( ) { … } — function",
								"—Ⓕ– JS_ToUint32 ( ) { … } — function",
								"—Ⓕ– JS_ToInt64 ( ) { … } — function",
								"—Ⓕ– JS_ToIndex ( ) { … } — function",
								"—Ⓕ– JS_ToFloat64 ( ) { … } — function",
								"—Ⓕ– JS_ToBigInt64 ( ) { … } — function",
								"—Ⓕ– JS_ToInt64Ext ( ) { … } — function",
								"—Ⓕ– JS_NewStringLen ( ) { … } — function",
								"—Ⓕ– JS_NewString ( ) { … } — function",
								"—Ⓕ– JS_NewAtomString ( ) { … } — function",
								"—Ⓕ– JS_ToString ( ) { … } — function",
								"—Ⓕ– JS_ToPropertyKey ( ) { … } — function",
								"—Ⓕ– JS_ToCStringLen2 ( ) { … } — function",
								"—Ⓕ– JS_ToCStringLen ( ) { … } — function",
								"—Ⓕ– JS_ToCString ( ) { … } — function",
								"—Ⓕ– JS_FreeCString ( ) { … } — function",
								"—Ⓕ– JS_NewObjectProtoClass ( ) { … } — function",
								"—Ⓕ– JS_NewObjectClass ( ) { … } — function",
								"—Ⓕ– JS_NewObjectProto ( ) { … } — function",
								"—Ⓕ– JS_NewObject ( ) { … } — function",
								"—Ⓕ– JS_IsFunction ( ) { … } — function",
								"—Ⓕ– JS_IsConstructor ( ) { … } — function",
								"—Ⓕ– JS_SetConstructorBit ( ) { … } — function",
								"—Ⓕ– JS_NewArray ( ) { … } — function",
								"—Ⓕ– JS_IsArray ( ) { … } — function",
								"—Ⓕ– JS_GetPropertyInternal ( ) { … } — function",
								"—Ⓕ– JSValue ( ) { … } — function",
								"—Ⓕ– JS_GetPropertyStr ( ) { … } — function",
								"—Ⓕ– JS_GetPropertyUint32 ( ) { … } — function",
								"—Ⓕ– JS_SetPropertyInternal ( ) { … } — function",
								"—Ⓕ– JS_SetProperty ( ) { … } — function",
								"—Ⓕ– JS_SetPropertyUint32 ( ) { … } — function",
								"—Ⓕ– JS_SetPropertyInt64 ( ) { … } — function",
								"—Ⓕ– JS_SetPropertyStr ( ) { … } — function",
								"—Ⓕ– JS_HasProperty ( ) { … } — function",
								"—Ⓕ– JS_IsExtensible ( ) { … } — function",
								"—Ⓕ– JS_PreventExtensions ( ) { … } — function",
								"—Ⓕ– JS_DeleteProperty ( ) { … } — function",
								"—Ⓕ– JS_SetPrototype ( ) { … } — function",
								"—Ⓕ– JS_GetPrototype ( ) { … } — function",
								"\tⓂ  JS_GPN_STRING_MASK … — macro object",
								"\tⓂ  JS_GPN_SYMBOL_MASK … — macro object",
								"\tⓂ  JS_GPN_PRIVATE_MASK … — macro object",
								"\tⓂ  JS_GPN_ENUM_ONLY … — macro object",
								"\tⓂ  JS_GPN_SET_ENUM … — macro object",
								"—Ⓕ– JS_GetOwnPropertyNames ( ) { … } — function",
								"—Ⓕ– JS_GetOwnProperty ( ) { … } — function",
								"—Ⓕ– JS_Call ( ) { … } — function",
								"—Ⓕ– JS_Invoke ( ) { … } — function",
								"—Ⓕ– JS_CallConstructor ( ) { … } — function",
								"—Ⓕ– JS_CallConstructor2 ( ) { … } — function",
								"—Ⓕ– JS_DetectModule ( ) { … } — function",
								"—Ⓕ– JS_Eval ( ) { … } — function",
								"—Ⓕ– JS_EvalThis ( ) { … } — function",
								"—Ⓕ– JS_GetGlobalObject ( ) { … } — function",
								"—Ⓕ– JS_IsInstanceOf ( ) { … } — function",
								"—Ⓕ– JS_DefineProperty ( ) { … } — function",
								"—Ⓕ– JS_DefinePropertyValue ( ) { … } — function",
								"—Ⓕ– JS_DefinePropertyValueUint32 ( ) { … } — function",
								"—Ⓕ– JS_DefinePropertyValueStr ( ) { … } — function",
								"—Ⓕ– JS_DefinePropertyGetSet ( ) { … } — function",
								"—Ⓕ– JS_SetOpaque ( ) { … } — function",
								"—Ⓕ– JS_GetOpaque ( ) { … } — function",
								"—Ⓕ– JS_GetOpaque2 ( ) { … } — function",
								"—Ⓕ– JS_ParseJSON ( ) { … } — function",
								"\tⓂ  JS_PARSE_JSON_EXT … — macro object",
								"—Ⓕ– JS_ParseJSON2 ( ) { … } — function",
								"—Ⓕ– JS_JSONStringify ( ) { … } — function",
								"—Ⓕ– JS_NewArrayBuffer ( ) { … } — function",
								"—Ⓕ– JS_NewArrayBufferCopy ( ) { … } — function",
								"—Ⓕ– JS_DetachArrayBuffer ( ) { … } — function",
								"—Ⓕ– JS_GetArrayBuffer ( ) { … } — function",
								"—Ⓕ– JS_GetTypedArrayBuffer ( ) { … } — function",
								"\tⓉ  JSSharedArrayBufferFunctions ; — typedef",
								"—Ⓕ– JS_SetSharedArrayBufferFunctions ( ) { … } — function",
								"—Ⓕ– JS_NewPromiseCapability ( ) { … } — function",
								"—Ⓕ– JS_SetHostPromiseRejectionTracker ( ) { … } — function",
								"—Ⓕ– JS_SetInterruptHandler ( ) { … } — function",
								"—Ⓕ– JS_SetCanBlock ( ) { … } — function",
								"—Ⓕ– JS_SetIsHTMLDDA ( ) { … } — function",
								"\tⓉ  JSModuleDef ; — typedef",
								"—Ⓕ– JS_SetModuleLoaderFunc ( ) { … } — function",
								"—Ⓕ– JS_GetImportMeta ( ) { … } — function",
								"—Ⓕ– JS_GetModuleName ( ) { … } — function",
								"—Ⓕ– JS_EnqueueJob ( ) { … } — function",
								"—Ⓕ– JS_IsJobPending ( ) { … } — function",
								"—Ⓕ– JS_ExecutePendingJob ( ) { … } — function",
								"\tⓂ  JS_WRITE_OBJ_BYTECODE … — macro object",
								"\tⓂ  JS_WRITE_OBJ_BSWAP … — macro object",
								"\tⓂ  JS_WRITE_OBJ_SAB … — macro object",
								"\tⓂ  JS_WRITE_OBJ_REFERENCE … — macro object",
								"—Ⓕ– JS_WriteObject ( ) { … } — function",
								"—Ⓕ– JS_WriteObject2 ( ) { … } — function",
								"\tⓂ  JS_READ_OBJ_BYTECODE … — macro object",
								"\tⓂ  JS_READ_OBJ_ROM_DATA … — macro object",
								"\tⓂ  JS_READ_OBJ_SAB … — macro object",
								"\tⓂ  JS_READ_OBJ_REFERENCE … — macro object",
								"—Ⓕ– JS_ReadObject ( ) { … } — function",
								"—Ⓕ– JS_EvalFunction ( ) { … } — function",
								"—Ⓕ– JS_ResolveModule ( ) { … } — function",
								"—Ⓕ– JS_GetScriptOrModuleName ( ) { … } — function",
								"—Ⓕ– JS_RunModule ( ) { … } — function",
								"\tⓉ  JSCFunctionEnum ; — typedef",
								"\tⓉ  JSCFunctionType ; — typedef",
								"—Ⓕ– JS_NewCFunction2 ( ) { … } — function",
								"—Ⓕ– JS_NewCFunctionData ( ) { … } — function",
								"—Ⓕ– JS_NewCClosure ( ) { … } — function",
								"—Ⓕ– JS_NewCFunction ( ) { … } — function",
								"—Ⓕ– JS_NewCFunctionMagic ( ) { … } — function",
								"—Ⓕ– JS_SetConstructor ( ) { … } — function",
								"\tⓉ  JSCFunctionListEntry ; — typedef",
								"\tⓂ  JS_DEF_CFUNC … — macro object",
								"\tⓂ  JS_DEF_CGETSET … — macro object",
								"\tⓂ  JS_DEF_CGETSET_MAGIC … — macro object",
								"\tⓂ  JS_DEF_PROP_STRING … — macro object",
								"\tⓂ  JS_DEF_PROP_INT32 … — macro object",
								"\tⓂ  JS_DEF_PROP_INT64 … — macro object",
								"\tⓂ  JS_DEF_PROP_DOUBLE … — macro object",
								"\tⓂ  JS_DEF_PROP_UNDEFINED … — macro object",
								"\tⓂ  JS_DEF_OBJECT … — macro object",
								"\tⓂ  JS_DEF_ALIAS … — macro object",
								"—Ⓜ– JS_CFUNC_DEF ( ) … — macro function",
								"—Ⓜ– JS_CFUNC_MAGIC_DEF ( ) … — macro function",
								"—Ⓜ– JS_CFUNC_SPECIAL_DEF ( ) … — macro function",
								"—Ⓜ– JS_ITERATOR_NEXT_DEF ( ) … — macro function",
								"—Ⓜ– JS_CGETSET_DEF ( ) … — macro function",
								"—Ⓜ– JS_CGETSET_MAGIC_DEF ( ) … — macro function",
								"—Ⓜ– JS_PROP_STRING_DEF ( ) … — macro function",
								"—Ⓜ– JS_PROP_INT32_DEF ( ) … — macro function",
								"—Ⓜ– JS_PROP_INT64_DEF ( ) … — macro function",
								"—Ⓜ– JS_PROP_DOUBLE_DEF ( ) … — macro function",
								"—Ⓜ– JS_PROP_UNDEFINED_DEF ( ) … — macro function",
								"—Ⓜ– JS_OBJECT_DEF ( ) … — macro function",
								"—Ⓜ– JS_ALIAS_DEF ( ) … — macro function",
								"—Ⓜ– JS_ALIAS_BASE_DEF ( ) … — macro function",
								"—Ⓕ– JS_SetPropertyFunctionList ( ) { … } — function",
								"—Ⓕ– JS_NewCModule ( ) { … } — function",
								"—Ⓕ– JS_AddModuleExport ( ) { … } — function",
								"—Ⓕ– JS_AddModuleExportList ( ) { … } — function",
								"—Ⓕ– JS_SetModuleExport ( ) { … } — function",
								"—Ⓕ– JS_SetModuleExportList ( ) { … } — function"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659305026.92,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "/home/roman/Dokumente/Himmelsbeobachtung.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4298,
						"regions":
						{
						},
						"selection":
						[
							[
								4298,
								4298
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 79,
							"syntax": "Packages/CMakeEditor/CMakeEditor.tmLanguage",
							"tabs_extra_last_activated": 1659304943.68,
							"tabs_extra_last_activated_sheet_index": 0
						},
						"translation.x": 0.0,
						"translation.y": 1065.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/timers.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 528,
						"regions":
						{
						},
						"selection":
						[
							[
								25,
								25
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1658887302.97,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs-misc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 63523,
						"regions":
						{
						},
						"selection":
						[
							[
								54630,
								54630
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1975,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659303025.75,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 38430.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 85897,
						"regions":
						{
						},
						"selection":
						[
							[
								8352,
								8365
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 348,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659306355.19,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6272.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs-predicate.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32742,
						"regions":
						{
						},
						"selection":
						[
							[
								17501,
								17502
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 668,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659313791.25,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10848.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40256,
						"regions":
						{
						},
						"selection":
						[
							[
								24478,
								24547
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 726,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659381819.56,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13832.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 618,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										171,
										191
									],
									[
										544,
										564
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								183,
								183
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 5,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1659304955.99,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs-pointer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14930,
						"regions":
						{
						},
						"selection":
						[
							[
								12212,
								12245
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 437,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659306762.46,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8589.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "include/utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29935,
						"regions":
						{
						},
						"selection":
						[
							[
								16892,
								16908
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 542,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659305696.96,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9882.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "include/js-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 984,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1659305632.17,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "quickjs-xml.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23529,
						"regions":
						{
						},
						"selection":
						[
							[
								1470,
								1482
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 81,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1658887304.34,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1142.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40210,
						"regions":
						{
							"col_0000FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20100,
										20104
									],
									[
										20154,
										20158
									],
									[
										20645,
										20649
									],
									[
										22835,
										22839
									],
									[
										23033,
										23037
									],
									[
										23264,
										23268
									],
									[
										24324,
										24328
									],
									[
										24437,
										24441
									],
									[
										24635,
										24639
									],
									[
										24719,
										24723
									],
									[
										24828,
										24832
									],
									[
										25055,
										25059
									],
									[
										25117,
										25121
									]
								],
								"scope": "col_0000FFFF"
							},
							"col_0000FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000FFFF_circle.png",
								"regions":
								[
									[
										20085,
										20085
									],
									[
										20109,
										20109
									],
									[
										20639,
										20639
									],
									[
										22809,
										22809
									],
									[
										22995,
										22995
									],
									[
										23233,
										23233
									],
									[
										24312,
										24312
									],
									[
										24427,
										24427
									],
									[
										24625,
										24625
									],
									[
										24676,
										24676
									],
									[
										24789,
										24789
									],
									[
										25029,
										25029
									]
								],
								"scope": "col_gutter"
							},
							"col_008000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20093,
										20098
									],
									[
										20145,
										20150
									],
									[
										20598,
										20603
									],
									[
										22828,
										22833
									],
									[
										23014,
										23019
									],
									[
										23023,
										23028
									],
									[
										23257,
										23262
									],
									[
										24305,
										24310
									],
									[
										24414,
										24419
									],
									[
										24584,
										24589
									],
									[
										24712,
										24717
									],
									[
										24854,
										24859
									],
									[
										25048,
										25053
									],
									[
										25110,
										25115
									]
								],
								"scope": "col_008000FF"
							},
							"col_008000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_008000FF_circle.png",
								"regions":
								[
									[
										20085,
										20085
									],
									[
										20109,
										20109
									],
									[
										20592,
										20592
									],
									[
										22809,
										22809
									],
									[
										22995,
										22995
									],
									[
										23233,
										23233
									],
									[
										24293,
										24293
									],
									[
										24404,
										24404
									],
									[
										24574,
										24574
									],
									[
										24676,
										24676
									],
									[
										24789,
										24789
									],
									[
										25029,
										25029
									]
								],
								"scope": "col_gutter"
							},
							"col_00FFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20692,
										20696
									]
								],
								"scope": "col_00FFFFFF"
							},
							"col_00FFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00FFFFFF_circle.png",
								"regions":
								[
									[
										20686,
										20686
									]
								],
								"scope": "col_gutter"
							},
							"col_010101FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20554,
										20559
									],
									[
										21512,
										21517
									],
									[
										22934,
										22939
									]
								],
								"scope": "col_010101FF"
							},
							"col_010101FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_010101FF_circle.png",
								"regions":
								[
									[
										20548,
										20548
									],
									[
										21494,
										21494
									],
									[
										22923,
										22923
									]
								],
								"scope": "col_gutter"
							},
							"col_808080FF":
							{
								"flags": 16,
								"regions":
								[
									[
										21521,
										21525
									],
									[
										21531,
										21535
									]
								],
								"scope": "col_808080FF"
							},
							"col_808080FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_808080FF_circle.png",
								"regions":
								[
									[
										21494,
										21494
									]
								],
								"scope": "col_gutter"
							},
							"col_FF0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20088,
										20091
									],
									[
										20138,
										20141
									],
									[
										20577,
										20580
									],
									[
										22823,
										22826
									],
									[
										23006,
										23009
									],
									[
										23054,
										23057
									],
									[
										23114,
										23117
									],
									[
										23194,
										23197
									],
									[
										23252,
										23255
									],
									[
										24288,
										24291
									],
									[
										24367,
										24370
									],
									[
										24422,
										24425
									],
									[
										24444,
										24447
									],
									[
										24539,
										24542
									],
									[
										24707,
										24710
									],
									[
										24880,
										24883
									],
									[
										25043,
										25046
									],
									[
										25105,
										25108
									]
								],
								"scope": "col_FF0000FF"
							},
							"col_FF0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF0000FF_circle.png",
								"regions":
								[
									[
										20085,
										20085
									],
									[
										20109,
										20109
									],
									[
										20571,
										20571
									],
									[
										22809,
										22809
									],
									[
										22995,
										22995
									],
									[
										23041,
										23041
									],
									[
										23101,
										23101
									],
									[
										23164,
										23164
									],
									[
										23233,
										23233
									],
									[
										24276,
										24276
									],
									[
										24357,
										24357
									],
									[
										24404,
										24404
									],
									[
										24427,
										24427
									],
									[
										24529,
										24529
									],
									[
										24676,
										24676
									],
									[
										24789,
										24789
									],
									[
										25029,
										25029
									]
								],
								"scope": "col_gutter"
							},
							"col_FF00FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20667,
										20674
									]
								],
								"scope": "col_FF00FFFF"
							},
							"col_FF00FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FF00FFFF_circle.png",
								"regions":
								[
									[
										20661,
										20661
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFF00FF":
							{
								"flags": 16,
								"regions":
								[
									[
										20621,
										20627
									]
								],
								"scope": "col_FFFF00FF"
							},
							"col_FFFF00FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFF00FF_circle.png",
								"regions":
								[
									[
										20615,
										20615
									]
								],
								"scope": "col_gutter"
							},
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20714,
										20719
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										20708,
										20708
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								37413,
								37413
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1300,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1656475523.48,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26120.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "quickjs-blob.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8449,
						"regions":
						{
						},
						"selection":
						[
							[
								2458,
								2477
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 121,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1658500080.49,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2004.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.792447636134,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139621680902448)":
	{
		"height": 0.0
	},
	"output.Protocol(139700989780224)":
	{
		"height": 0.0
	},
	"output.Protocol(139713493134064)":
	{
		"height": 0.0
	},
	"output.Protocol(139717986633232)":
	{
		"height": 0.0
	},
	"output.Protocol(139737089962816)":
	{
		"height": 0.0
	},
	"output.Protocol(139742375937312)":
	{
		"height": 0.0
	},
	"output.Protocol(139743392563408)":
	{
		"height": 0.0
	},
	"output.Protocol(139869175351088)":
	{
		"height": 0.0
	},
	"output.Protocol(140020109919472)":
	{
		"height": 0.0
	},
	"output.Protocol(140057995247920)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752673856)":
	{
		"height": 0.0
	},
	"output.Protocol(140156677514432)":
	{
		"height": 0.0
	},
	"output.Protocol(140172266688720)":
	{
		"height": 0.0
	},
	"output.Protocol(140190208797904)":
	{
		"height": 0.0
	},
	"output.Protocol(140274144834032)":
	{
		"height": 0.0
	},
	"output.Protocol(140329701419328)":
	{
		"height": 0.0
	},
	"output.Protocol(140434608857040)":
	{
		"height": 0.0
	},
	"output.Protocol(140444770579072)":
	{
		"height": 0.0
	},
	"output.Protocol(140481508459424)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873537696)":
	{
		"height": 0.0
	},
	"output.Protocol(140517145188336)":
	{
		"height": 0.0
	},
	"output.Protocol(140557325510688)":
	{
		"height": 0.0
	},
	"output.Protocol(140569677099648)":
	{
		"height": 0.0
	},
	"output.Protocol(140571426803920)":
	{
		"height": 0.0
	},
	"output.Protocol(140585353818944)":
	{
		"height": 0.0
	},
	"output.Protocol(140589364043584)":
	{
		"height": 0.0
	},
	"output.Protocol(140603239164464)":
	{
		"height": 0.0
	},
	"output.Protocol(140614610715648)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-deep",
				"quickjs-deep.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"lit-ex",
				"list-exports.js"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"dom",
				"lib/dom.js"
			],
			[
				"css3-",
				"lib/css3-selectors.js"
			],
			[
				"predicate.c",
				"src/predicate.c"
			],
			[
				"writ",
				"lib/xml/write.js"
			],
			[
				"xpath.js",
				"lib/xpath.js"
			],
			[
				"quickjs-bl",
				"quickjs-blob.c"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"c.js",
				"lib/lexer/c.js"
			],
			[
				"console.j",
				"lib/console.js"
			],
			[
				"inspect",
				"quickjs-inspect.c"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"prop",
				"src/property-enumeration.c"
			],
			[
				"proper",
				"include/property-enumeration.h"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"predicate.h",
				"include/predicate.h"
			],
			[
				"quickjs-pred",
				"quickjs-predicate.c"
			],
			[
				"test_pred",
				"tests/test_predicate.js"
			],
			[
				"utils.h",
				"include/utils.h"
			],
			[
				"utils.c",
				"src/utils.c"
			],
			[
				"char-u",
				"include/char-utils.h"
			],
			[
				"vector.h",
				"include/vector.h"
			],
			[
				"path.h",
				"include/path.h"
			],
			[
				"vecto",
				"src/vector.c"
			],
			[
				"events",
				"lib/events.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"extract",
				"extract-structs.js"
			],
			[
				"test_lexe",
				"tests/test_lexer.js"
			],
			[
				"test_css",
				"tests/test_css3_selectors.js"
			],
			[
				"events.j",
				"lib/events.js"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"qjsm.c",
				"src/qjsm.c"
			],
			[
				"qjsm",
				"src/qjsm.c"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"resolve-import",
				"resolve-imports.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"require.js",
				"lib/require.js"
			],
			[
				"test_do",
				"tests/test_dom.js"
			],
			[
				"css3-se",
				"lib/css3-selectors.js"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"console.",
				"lib/console.js"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"test_dom.js",
				"tests/test_dom.js"
			],
			[
				"deep.js",
				"lib/deep.js"
			],
			[
				"write.js",
				"lib/xml/write.js"
			],
			[
				"css-",
				"lib/css3-selectors.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"resolve-impo",
				"resolve-imports.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"list-ex",
				"list-exports.js"
			],
			[
				"location.h",
				"include/location.h"
			],
			[
				"l",
				"quickjs-lexer.c"
			],
			[
				"path.c",
				"src/path.c"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"repl.j",
				"lib/repl.js"
			],
			[
				"js-u",
				"src/js-utils.c"
			],
			[
				"js-ut",
				"include/js-utils.h"
			],
			[
				"streams.js",
				"tests/test_streams.js"
			],
			[
				"buffer",
				"src/buffer-utils.c"
			],
			[
				"test_te",
				"tests/test_textcode.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"extract-str",
				"extract-structs.js"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"token.c",
				"token.c"
			],
			[
				"jsutil",
				"js-utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"quickjs-location",
				"quickjs-location.h"
			],
			[
				"quickjs-loca",
				"quickjs-location.c"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"char-ut",
				"char-utils.h"
			],
			[
				"buff",
				"buffer-utils.h"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"location",
				"location.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"CMakeLi",
				"CMakeLists.txt"
			],
			[
				"defines.h",
				"defines.h"
			],
			[
				"queue.c",
				"queue.c"
			],
			[
				"extend",
				"lib/extendArray.js"
			],
			[
				"quickjs-sockets",
				"quickjs-sockets.c"
			],
			[
				"lexer",
				"quickjs-lexer.c"
			],
			[
				"buffer-ut",
				"buffer-utils.h"
			],
			[
				"ringbuf",
				"ringbuffer.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"quickjs-lexer.c",
				"quickjs-lexer.c"
			],
			[
				"quickjs-loc",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 244.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
