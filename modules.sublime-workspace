{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_Set",
				"JS_SetPropertyStr"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"js_sys",
				"js_syscallerror_get"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_",
				"js_sockaddr_class_id"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewStringLen"
			],
			[
				"JS_",
				"JS_GetPropertyUint32"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"get",
				"getOwnPropertyNames"
			],
			[
				"JS_Thr",
				"JS_ThrowInternalError"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "",
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					257,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					258,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30376,
								30397
							],
							[
								31062,
								31079
							],
							[
								32072,
								32089
							],
							[
								32503,
								32522
							],
							[
								41190,
								41205
							],
							[
								43638,
								43652
							],
							[
								43682,
								43696
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAA7gUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					259,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30375,
								30396
							],
							[
								31061,
								31078
							],
							[
								32071,
								32088
							],
							[
								32502,
								32521
							],
							[
								41189,
								41204
							],
							[
								43637,
								43651
							],
							[
								43681,
								43695
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					260,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30398,
								30419
							],
							[
								31084,
								31101
							],
							[
								32094,
								32111
							],
							[
								32525,
								32544
							],
							[
								41212,
								41227
							],
							[
								43660,
								43674
							],
							[
								43704,
								43718
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					261,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30343,
								30364
							],
							[
								31029,
								31046
							],
							[
								32039,
								32056
							],
							[
								32470,
								32489
							],
							[
								41157,
								41172
							],
							[
								43605,
								43619
							],
							[
								43649,
								43663
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					262,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30393,
								30414
							],
							[
								31079,
								31096
							],
							[
								32089,
								32106
							],
							[
								32520,
								32539
							],
							[
								41207,
								41222
							],
							[
								43655,
								43669
							],
							[
								43699,
								43713
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					263,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30393,
								30414
							],
							[
								31079,
								31096
							],
							[
								32089,
								32106
							],
							[
								32520,
								32539
							],
							[
								41207,
								41222
							],
							[
								43655,
								43669
							],
							[
								43699,
								43713
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					264,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30393,
								30414
							],
							[
								31079,
								31096
							],
							[
								32089,
								32106
							],
							[
								32520,
								32539
							],
							[
								41207,
								41222
							],
							[
								43655,
								43669
							],
							[
								43699,
								43713
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					265,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30339,
								30360
							],
							[
								31025,
								31042
							],
							[
								32035,
								32052
							],
							[
								32466,
								32485
							],
							[
								41153,
								41168
							],
							[
								43601,
								43615
							],
							[
								43645,
								43659
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					266,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					267,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					268,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3186,
								3209
							],
							[
								3340,
								3356
							],
							[
								3597,
								3612
							],
							[
								3786,
								3802
							],
							[
								5324,
								5347
							],
							[
								6152,
								6170
							],
							[
								7163,
								7178
							],
							[
								8124,
								8139
							],
							[
								8999,
								9018
							],
							[
								9731,
								9752
							],
							[
								11042,
								11054
							],
							[
								12001,
								12014
							],
							[
								12638,
								12648
							],
							[
								13251,
								13262
							],
							[
								13798,
								13811
							],
							[
								14075,
								14086
							],
							[
								14948,
								14960
							],
							[
								15900,
								15909
							],
							[
								16881,
								16888
							],
							[
								18960,
								18969
							],
							[
								19391,
								19404
							],
							[
								20229,
								20248
							],
							[
								20680,
								20693
							],
							[
								20999,
								21012
							],
							[
								23224,
								23237
							],
							[
								23939,
								23955
							],
							[
								30280,
								30301
							],
							[
								30966,
								30983
							],
							[
								31976,
								31993
							],
							[
								32407,
								32426
							],
							[
								41094,
								41109
							],
							[
								43542,
								43556
							],
							[
								43586,
								43600
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAA7gUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					269,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3189,
								3212
							],
							[
								3343,
								3359
							],
							[
								3602,
								3617
							],
							[
								3795,
								3811
							],
							[
								5349,
								5372
							],
							[
								6183,
								6201
							],
							[
								7200,
								7215
							],
							[
								8169,
								8184
							],
							[
								9053,
								9072
							],
							[
								9792,
								9813
							],
							[
								11106,
								11118
							],
							[
								12065,
								12078
							],
							[
								12702,
								12712
							],
							[
								13315,
								13326
							],
							[
								13862,
								13875
							],
							[
								14139,
								14150
							],
							[
								15012,
								15024
							],
							[
								15964,
								15973
							],
							[
								16945,
								16952
							],
							[
								19024,
								19033
							],
							[
								19455,
								19468
							],
							[
								20293,
								20312
							],
							[
								20744,
								20757
							],
							[
								21063,
								21076
							],
							[
								23294,
								23307
							],
							[
								24009,
								24025
							],
							[
								30367,
								30388
							],
							[
								31053,
								31070
							],
							[
								32063,
								32080
							],
							[
								32494,
								32513
							],
							[
								41181,
								41196
							],
							[
								43629,
								43643
							],
							[
								43673,
								43687
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAO4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					270,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					271,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								484,
								497
							],
							[
								630,
								648
							],
							[
								767,
								787
							],
							[
								3052,
								3064
							],
							[
								3186,
								3209
							],
							[
								3340,
								3356
							],
							[
								3597,
								3612
							],
							[
								3786,
								3802
							],
							[
								5324,
								5347
							],
							[
								6152,
								6170
							],
							[
								7163,
								7178
							],
							[
								8124,
								8139
							],
							[
								8999,
								9018
							],
							[
								9731,
								9752
							],
							[
								11042,
								11054
							],
							[
								12001,
								12014
							],
							[
								12638,
								12648
							],
							[
								13251,
								13262
							],
							[
								13798,
								13811
							],
							[
								14075,
								14086
							],
							[
								14948,
								14960
							],
							[
								15900,
								15909
							],
							[
								16881,
								16888
							],
							[
								18960,
								18969
							],
							[
								19391,
								19404
							],
							[
								20229,
								20248
							],
							[
								20680,
								20693
							],
							[
								20999,
								21012
							],
							[
								23224,
								23237
							],
							[
								23939,
								23955
							],
							[
								30280,
								30301
							],
							[
								30966,
								30983
							],
							[
								31976,
								31993
							],
							[
								32407,
								32426
							],
							[
								41094,
								41109
							],
							[
								43542,
								43556
							],
							[
								43586,
								43600
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAA7gUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					272,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABYBwAA4oCU4pOC4oCTIEpTX1NPQ0tFVENBTEwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEpTX1NPQ0tFVENBTExfRkFJTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSlNfU09DS0VUQ0FMTF9SRVRVUk4gKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2ZyZWVfYnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrYWRkcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB0aW1ldmFsX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGZkc2V0X3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZmRzZXRfdG9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBvbGxmZF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcG9sbGZkX3dyaXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc2VsZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcG9sbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldHBhaXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfbmV3X3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X25ldyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2tldF9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X3ZhbHVlb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0c19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					273,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					274,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					275,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
						"symkeys":
						[
							[
								34,
								51
							],
							[
								233,
								241
							],
							[
								274,
								286
							],
							[
								450,
								456
							],
							[
								631,
								642
							],
							[
								963,
								976
							],
							[
								1044,
								1054
							],
							[
								1121,
								1132
							],
							[
								1168,
								1180
							],
							[
								1228,
								1242
							],
							[
								1290,
								1309
							],
							[
								1348,
								1361
							],
							[
								1388,
								1409
							],
							[
								1477,
								1490
							],
							[
								1679,
								1692
							],
							[
								1872,
								1888
							],
							[
								2079,
								2092
							],
							[
								2289,
								2305
							],
							[
								2407,
								2424
							],
							[
								2545,
								2559
							],
							[
								2690,
								2705
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUICKJS_SOCKETS_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉSockAddr‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚í∏‚Äì‚ÄÉsocket_state‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉSocket‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚í∏‚Äì‚ÄÉSocketCalls‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚ìÇ‚Äì‚ÄÉsocket_closed‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉsocket_eof‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉsocket_open‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉsocket_error‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉsocket_syscall‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_port‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_addr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_addrlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_data2‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_data2‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AQAAAAAAAAAAAAAASQMAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					276,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
						"symkeys":
						[
							[
								24,
								31
							],
							[
								278,
								286
							],
							[
								363,
								370
							],
							[
								443,
								456
							],
							[
								539,
								551
							],
							[
								674,
								686
							],
							[
								726,
								738
							],
							[
								821,
								831
							],
							[
								1370,
								1382
							],
							[
								1393,
								1418
							],
							[
								2121,
								2147
							],
							[
								2849,
								2867
							],
							[
								3577,
								3588
							],
							[
								3701,
								3708
							],
							[
								3739,
								3745
							],
							[
								3760,
								3767
							],
							[
								3815,
								3821
							],
							[
								3892,
								3899
							],
							[
								3961,
								3968
							],
							[
								4108,
								4121
							],
							[
								4170,
								4179
							],
							[
								4206,
								4219
							],
							[
								4348,
								4363
							],
							[
								4525,
								4537
							],
							[
								4639,
								4655
							],
							[
								4851,
								4862
							],
							[
								4891,
								4907
							],
							[
								5039,
								5057
							],
							[
								5229,
								5244
							],
							[
								5359,
								5378
							],
							[
								5568,
								5576
							],
							[
								5672,
								5681
							],
							[
								5746,
								5755
							],
							[
								5819,
								5829
							],
							[
								5905,
								5914
							],
							[
								6001,
								6010
							],
							[
								6030,
								6041
							],
							[
								6061,
								6073
							],
							[
								6093,
								6103
							],
							[
								6123,
								6136
							],
							[
								6156,
								6168
							],
							[
								6188,
								6203
							],
							[
								6223,
								6233
							],
							[
								6255,
								6265
							],
							[
								6284,
								6298
							],
							[
								6321,
								6337
							],
							[
								6359,
								6376
							],
							[
								6398,
								6413
							],
							[
								6435,
								6453
							],
							[
								6475,
								6492
							],
							[
								6514,
								6525
							],
							[
								6549,
								6556
							],
							[
								6573,
								6585
							],
							[
								6641,
								6655
							],
							[
								6745,
								6760
							],
							[
								6867,
								6879
							],
							[
								7028,
								7034
							],
							[
								7041,
								7062
							],
							[
								7080,
								7103
							],
							[
								7125,
								7141
							],
							[
								7197,
								7213
							],
							[
								7249,
								7263
							],
							[
								7300,
								7315
							],
							[
								7364,
								7378
							],
							[
								7457,
								7468
							],
							[
								7551,
								7564
							],
							[
								7623,
								7636
							],
							[
								7870,
								7889
							],
							[
								7937,
								7948
							],
							[
								8413,
								8423
							],
							[
								9251,
								9269
							],
							[
								9299,
								9316
							],
							[
								9377,
								9395
							],
							[
								9504,
								9517
							],
							[
								9589,
								9603
							],
							[
								9904,
								9919
							],
							[
								10284,
								10302
							],
							[
								10331,
								10347
							],
							[
								10550,
								10562
							],
							[
								10638,
								10650
							],
							[
								10741,
								10753
							],
							[
								10810,
								10832
							],
							[
								10856,
								10869
							],
							[
								10903,
								10919
							],
							[
								10953,
								10968
							],
							[
								11023,
								11037
							],
							[
								11083,
								11097
							],
							[
								11144,
								11157
							],
							[
								11215,
								11229
							],
							[
								11289,
								11306
							],
							[
								11364,
								11379
							],
							[
								11416,
								11429
							],
							[
								11500,
								11514
							],
							[
								11555,
								11569
							],
							[
								11600,
								11616
							],
							[
								11640,
								11655
							],
							[
								11732,
								11746
							],
							[
								11924,
								11941
							],
							[
								12133,
								12148
							],
							[
								12317,
								12327
							],
							[
								12454,
								12468
							],
							[
								12766,
								12777
							],
							[
								12882,
								12897
							],
							[
								13337,
								13349
							],
							[
								13454,
								13471
							],
							[
								13865,
								13880
							],
							[
								13952,
								13974
							],
							[
								14132,
								14153
							],
							[
								14307,
								14327
							],
							[
								14468,
								14488
							],
							[
								14625,
								14643
							],
							[
								14686,
								14704
							],
							[
								14893,
								14906
							],
							[
								15871,
								15887
							],
							[
								16850,
								16871
							],
							[
								17160,
								17183
							],
							[
								17471,
								17494
							],
							[
								17561,
								17585
							],
							[
								17864,
								17888
							],
							[
								17937,
								17963
							],
							[
								19153,
								19174
							],
							[
								19247,
								19273
							],
							[
								19435,
								19449
							],
							[
								19476,
								19499
							],
							[
								19562,
								19581
							],
							[
								19630,
								19650
							],
							[
								19695,
								19717
							],
							[
								19760,
								19781
							],
							[
								19822,
								19836
							],
							[
								19877,
								19891
							],
							[
								19935,
								19953
							],
							[
								19997,
								20012
							],
							[
								20056,
								20072
							],
							[
								20130,
								20143
							],
							[
								20189,
								20207
							],
							[
								20255,
								20282
							],
							[
								20308,
								20334
							],
							[
								20361,
								20380
							],
							[
								20440,
								20456
							],
							[
								20586,
								20599
							],
							[
								20651,
								20672
							],
							[
								20793,
								20808
							],
							[
								20828,
								20843
							],
							[
								20875,
								20888
							],
							[
								20932,
								20947
							],
							[
								21009,
								21022
							],
							[
								21084,
								21099
							],
							[
								21150,
								21165
							],
							[
								21219,
								21234
							],
							[
								21399,
								21415
							],
							[
								21442,
								21463
							],
							[
								21512,
								21524
							],
							[
								21584,
								21600
							],
							[
								21651,
								21668
							],
							[
								21712,
								21730
							],
							[
								21780,
								21796
							],
							[
								21846,
								21866
							],
							[
								21909,
								21929
							],
							[
								21974,
								21993
							],
							[
								22035,
								22047
							],
							[
								22110,
								22129
							],
							[
								22174,
								22189
							],
							[
								22236,
								22251
							],
							[
								22289,
								22303
							],
							[
								22533,
								22547
							],
							[
								22714,
								22732
							],
							[
								22790,
								22813
							],
							[
								22871,
								22896
							],
							[
								22966,
								22988
							],
							[
								23056,
								23081
							],
							[
								23157,
								23185
							],
							[
								23280,
								23306
							],
							[
								23362,
								23386
							],
							[
								23446,
								23472
							],
							[
								23538,
								23567
							],
							[
								23641,
								23666
							],
							[
								23726,
								23754
							],
							[
								23830,
								23854
							],
							[
								23917,
								23942
							],
							[
								24000,
								24025
							],
							[
								24122,
								24143
							],
							[
								24469,
								24493
							],
							[
								24766,
								24788
							],
							[
								24917,
								24928
							],
							[
								24964,
								24978
							],
							[
								24995,
								25007
							],
							[
								25046,
								25059
							],
							[
								25103,
								25116
							],
							[
								25168,
								25185
							],
							[
								25284,
								25300
							],
							[
								25434,
								25451
							],
							[
								25484,
								25507
							],
							[
								25540,
								25549
							],
							[
								25582,
								25591
							],
							[
								25624,
								25639
							],
							[
								25672,
								25684
							],
							[
								25717,
								25730
							],
							[
								25763,
								25777
							],
							[
								25825,
								25848
							],
							[
								25945,
								25958
							],
							[
								26325,
								26337
							],
							[
								26414,
								26427
							],
							[
								26608,
								26631
							],
							[
								26657,
								26682
							],
							[
								26720,
								26737
							],
							[
								26933,
								26949
							],
							[
								27155,
								27166
							],
							[
								27273,
								27284
							],
							[
								27327,
								27342
							],
							[
								27390,
								27406
							],
							[
								27464,
								27479
							],
							[
								27522,
								27536
							],
							[
								27582,
								27596
							],
							[
								27619,
								27630
							],
							[
								27667,
								27681
							],
							[
								27719,
								27731
							],
							[
								27767,
								27782
							],
							[
								27820,
								27836
							],
							[
								27875,
								27891
							],
							[
								27927,
								27943
							],
							[
								27997,
								28011
							],
							[
								28063,
								28076
							],
							[
								28145,
								28154
							],
							[
								28268,
								28289
							],
							[
								28442,
								28467
							],
							[
								28524,
								28547
							],
							[
								28806,
								28828
							],
							[
								29107,
								29118
							],
							[
								29153,
								29168
							],
							[
								29202,
								29222
							],
							[
								29263,
								29284
							],
							[
								29332,
								29347
							],
							[
								29382,
								29394
							],
							[
								29437,
								29453
							],
							[
								29486,
								29510
							],
							[
								29557,
								29581
							],
							[
								29642,
								29652
							],
							[
								29695,
								29711
							],
							[
								29976,
								29991
							],
							[
								30002,
								30013
							],
							[
								30053,
								30067
							],
							[
								30103,
								30114
							],
							[
								30150,
								30159
							],
							[
								30195,
								30209
							],
							[
								30255,
								30270
							],
							[
								30292,
								30308
							],
							[
								30355,
								30373
							],
							[
								30420,
								30434
							],
							[
								30481,
								30498
							],
							[
								30545,
								30558
							],
							[
								30594,
								30606
							],
							[
								30640,
								30656
							],
							[
								30689,
								30709
							],
							[
								30759,
								30778
							],
							[
								30850,
								30863
							],
							[
								30904,
								30918
							],
							[
								30953,
								30967
							],
							[
								31011,
								31035
							],
							[
								31092,
								31118
							],
							[
								31169,
								31185
							],
							[
								31276,
								31295
							],
							[
								31331,
								31345
							],
							[
								31397,
								31411
							],
							[
								31481,
								31492
							],
							[
								31561,
								31572
							],
							[
								31637,
								31647
							],
							[
								31659,
								31679
							],
							[
								31706,
								31721
							],
							[
								31752,
								31765
							],
							[
								31797,
								31812
							],
							[
								31842,
								31854
							],
							[
								31876,
								31887
							],
							[
								31908,
								31918
							],
							[
								31956,
								31975
							],
							[
								32004,
								32023
							],
							[
								32052,
								32067
							],
							[
								32092,
								32112
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉUTILS_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉoffsetof‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉinrange‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉtrim_dotslash‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉprecedence‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉJSPrecedence‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CGETSET_ENUMERABLE_DEF‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CGETSET_MAGIC_FLAGS_DEF‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CFUNC_DEF_FLAGS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CONSTANT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉVISIBLE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHIDDEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉVISIBLE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHIDDEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉMAX_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉMIN_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉIteratorValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉArguments‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉarguments_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_shift‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_at‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_shiftn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉJSArguments‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_shift‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_at‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_shiftn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmin_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉabs_int64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉabs_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsign_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmod_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_RED‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_GREEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_YELLOW‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_BLUE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_MAGENTA‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_MARINE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTGRAY‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_GRAY‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_NONE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTRED‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTGREEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTYELLOW‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTBLUE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTMAGENTA‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTMARINE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_WHITE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉtime_us‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉarray_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚ìÇ‚Äì‚ÄÉarray_contains‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉjs_dbuf_init_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_dbuf_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉRegExp‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_flags_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_flags_fromstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_from_argv‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_from_dbuf‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_compile‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_to_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_free_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_global_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_global_prototype‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉvalue_types‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉvalue_mask‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_flag‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_type2flag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_types‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_typeof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_typestr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_ptr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_has_ref_count‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_free_rt‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_equals‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_clone‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_toarray‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_fwrite‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_ptr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_newlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_toint64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_towstringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_towstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_tosize‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_todouble_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_toint64_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tobool_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_toatom_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_from_char‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_cmpstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_VALUE_FREE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_VALUE_FREE_RT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_set‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_clear‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_isset‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_set‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_get‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_clear‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_propertyenums_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_propertydescriptor_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_ctor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_invoke_static‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_to_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_to_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_static_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_static_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_iterable‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_iterator‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_method‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_next‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_for‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_for_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_operatorset_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_operatorset_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_operators_create‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_int64_default‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_number_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_new_bool_or_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_ATOM_TAG_INT‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_ATOM_MAX_INT‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_isint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_fromint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_toint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_toint64‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_toint32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_tovalue‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_tobinary‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_to_cstringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_is_index‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_is_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_isnative‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_classname‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_is‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_construct‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_error‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_stack‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_same‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_has_propertystr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_bool‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertyint_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertyint_int‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertystr_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertystr_stringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertyint_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertyint_int32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_cstringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_stringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_int32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_uint64‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertydescriptor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_inspect_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_tostringtag_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_tostringtag_str‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_id‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_newid‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_isclass‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_isclass‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_arraybuffer‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_sharedarraybuffer‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_map‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_set‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_generator‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_regexp‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_promise‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_dataview‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_null_or_undefined‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_falsish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_truish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_nullish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_typedarray_prototype‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_typedarray_constructor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_basic_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_typedarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_input‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_propenum_cmp‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_equals‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_clear‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free_n‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free_rt‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_to_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_intv_to_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_to_argv‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_copys‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_copys‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_invoke‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_bytelength‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_find_cfunction_entry‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_find_cfunction_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_ms‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_time_ns‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_timespec‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_gettime‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_time‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_timespec‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_freevalue‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_fromvalue‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_map_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉimport_directive‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉImportDirective‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_namestr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_func‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_ns‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_exports‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_list‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_entries‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_map‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_object‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_object‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_entry‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_search_ext‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_normalize‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_def‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_find‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_import_eval‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import_default‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import_namespace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_loader_so‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_module‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_binary‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_buf‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_str‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_time_ms‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_interrupt_handler‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_timer_unlink‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_timer_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_call_handler‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_alloc‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_new_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_dup_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_free_message‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_free_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5AwAAICAg4pOCICBRVUlDS0pTX1NPQ0tFVFNfSCDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4kgIFNvY2tBZGRyIDsg4oCUIHR5cGVkZWYK4oCU4pK44oCTIHNvY2tldF9zdGF0ZSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBTb2NrZXQgOyDigJQgdHlwZWRlZgrigJTikrjigJMgU29ja2V0Q2FsbHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKTguKAkyBzb2NrZXRfY2xvc2VkICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBzb2NrZXRfZW9mICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBzb2NrZXRfb3BlbiAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgc29ja2V0X2Vycm9yICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBzb2NrZXRfc3lzY2FsbCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDikqEgIGpzX3NvY2tldF9uZXdfcHJvdG8gKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAganNfc29ja2V0X25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19zb2NrZXRfY29uc3RydWN0b3IgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBzb2NrYWRkcl9wb3J0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgc29ja2FkZHJfYWRkciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHNvY2thZGRyX2FkZHJsZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBzb2NrYWRkcl9zaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2FkZHJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3NvY2thZGRyX2RhdGEyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc29ja2V0X2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zb2NrZXRfZGF0YTIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAAvMwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					277,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					278,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					279,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					280,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "utils.c",
			"settings":
			{
				"buffer_size": 52189,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAArJsAAAAAAACsmwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "tests/test_lexer.js",
			"settings":
			{
				"buffer_size": 7221,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs-sockets.c",
			"settings":
			{
				"buffer_size": 44427,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1936,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAJWUAAAAAAAAlZQAAAAAAAAAAAAAAAPC/"
				],
				[
					1937,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAJWUAAAAAAAAlZQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
			"settings":
			{
				"buffer_size": 42478,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs-archive.c",
			"settings":
			{
				"buffer_size": 38520,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					39,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA8QUAAAAAAACpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA8QUAAAAAAACpBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-sockets.h",
			"settings":
			{
				"buffer_size": 2885,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"cut",
					null,
					"AQAAAJwAAAAAAAAAnAAAAAAAAAAZAAAAICBzdHJ1Y3Qgc29ja2FkZHJfaW4gaW47Cg",
					"AQAAAAAAAAABAAAAnAAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					2,
					"paste",
					null,
					"AgAAAJwAAAAAAAAAtQAAAAAAAAAAAAAAtQAAAAAAAADOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAK0AAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACuAAAAAAAAAAMAAABfaW4",
					"AQAAAAAAAAABAAAArQAAAAAAAACwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAK8AAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAACwAAAAAAAAAAIAAABpbg",
					"AQAAAAAAAAABAAAArwAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"paste",
					null,
					"AQAAAD8DAAAAAAAATQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwMAAAAAAAA/AwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAE0DAAAAAAAATgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQMAAAAAAABNAwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"paste",
					null,
					"AQAAAC8DAAAAAAAAPQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwMAAAAAAAAvAwAAAAAAAAAAAAAA4HBA"
				],
				[
					46,
					6,
					"left_delete",
					null,
					"BgAAADwDAAAAAAAAPAMAAAAAAAABAAAATzsDAAAAAAAAOwMAAAAAAAABAAAAVDoDAAAAAAAAOgMAAAAAAAABAAAARDkDAAAAAAAAOQMAAAAAAAABAAAATjgDAAAAAAAAOAMAAAAAAAABAAAARTcDAAAAAAAANwMAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAPQMAAAAAAAA9AwAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "RECV_"
					},
					"BQAAADcDAAAAAAAAOAMAAAAAAAAAAAAAOAMAAAAAAAA5AwAAAAAAAAAAAAA5AwAAAAAAADoDAAAAAAAAAAAAADoDAAAAAAAAOwMAAAAAAAAAAAAAOwMAAAAAAAA8AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwMAAAAAAAA3AwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAADsDAAAAAAAAOwMAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAPAMAAAAAAAA8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "FROM,"
					},
					"BQAAADsDAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAD4DAAAAAAAAAAAAAD4DAAAAAAAAPwMAAAAAAAAAAAAAPwMAAAAAAABAAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwMAAAAAAAA7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA4CwAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSAidXRpbHMuaCIKI2luY2x1ZGUgPHN5cy9zb2NrZXQuaD4KI2luY2x1ZGUgPG5ldGluZXQvaW4uaD4KCnR5cGVkZWYgdW5pb24gewogIHVpbnQxNl90IGZhbWlseTsKICBzdHJ1Y3Qgc29ja2FkZHIgIHM7CiAgc3RydWN0IHNvY2thZGRyX2luIGluOwogIHN0cnVjdCBzb2NrYWRkcl9pbjYgaW42Owp9IFNvY2tBZGRyOwoKX19hdHRyaWJ1dGVfXygocGFja2VkKSkgdW5pb24gc29ja2V0X3N0YXRlIHsKICBzdHJ1Y3QgewogICAgdWludDE2X3QgZmQ7CiAgICB1bnNpZ25lZCBlcnJvciA6IDEyOwogICAgdW5zaWduZWQgc3lzY2FsbCA6IDQ7CiAgICBpbnQzMl90IHJldDsKICB9OwogIHVpbnQ2NF90IHU2NDsKICB2b2lkKiBwdHI7Cn07Cgp0eXBlZGVmIHVuaW9uIHNvY2tldF9zdGF0ZSBTb2NrZXQ7CgpleHRlcm4gdGhyZWFkX2xvY2FsIFZJU0lCTEUgSlNDbGFzc0lEIGpzX3NvY2thZGRyX2NsYXNzX2lkLCBqc19zb2NrZXRfY2xhc3NfaWQ7CmV4dGVybiB0aHJlYWRfbG9jYWwgSlNWYWx1ZSBzb2NrYWRkcl9wcm90bywgc29ja2FkZHJfY3Rvciwgc29ja2V0X3Byb3RvLCBzb2NrZXRfY3RvcjsKCmVudW0gU29ja2V0Q2FsbHMgewogIFNZU0NBTExfU09DS0VUID0gMSwKICBTWVNDQUxMX0dFVFNPQ0tOQU1FLAogIFNZU0NBTExfR0VUUEVFUk5BTUUsCiAgU1lTQ0FMTF9GQ05UTCwKICBTWVNDQUxMX0JJTkQsCiAgU1lTQ0FMTF9BQ0NFUFQsCiAgU1lTQ0FMTF9DT05ORUNULAogIFNZU0NBTExfTElTVEVOLAogIFNZU0NBTExfUkVDVixTWVNDQUxMX1JFQ1ZGUk9NLAogIFNZU0NBTExfU0VORCxTWVNDQUxMX1NFTkRUTywKICBTWVNDQUxMX1NIVVRET1dOLAogIFNZU0NBTExfQ0xPU0UsCiAgU1lTQ0FMTF9HRVRTT0NLT1BULAogIFNZU0NBTExfU0VUU09DS09QVAp9OwoKI2RlZmluZSBzb2NrZXRfY2xvc2VkKHNvY2spICgoc29jaykuc3lzY2FsbCA9PSBTWVNDQUxMX0NMT1NFICYmIChzb2NrKS5yZXQgPT0gMCkKI2RlZmluZSBzb2NrZXRfZW9mKHNvY2spICgoc29jaykuc3lzY2FsbCA9PSBTWVNDQUxMX1JFQ1YgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9vcGVuKHNvY2spICFzb2NrZXRfY2xvc2VkKHNvY2spCiNkZWZpbmUgc29ja2V0X2Vycm9yKHNvY2spICgoc29jaykucmV0IDwgMCAmJiAoc29jaykuZXJyb3IpCiNkZWZpbmUgc29ja2V0X3N5c2NhbGwoc29jaykgc29ja2V0X3N5c2NhbGxzWyhzb2NrKS5zeXNjYWxsXQoKSlNWYWx1ZSBqc19zb2NrZXRfbmV3X3Byb3RvKEpTQ29udGV4dCosIEpTVmFsdWUsIGludCBmZCk7CkpTVmFsdWUganNfc29ja2V0X25ldyhKU0NvbnRleHQqLCBpbnQpOwpKU1ZhbHVlIGpzX3NvY2tldF9jb25zdHJ1Y3RvcihKU0NvbnRleHQqLCBKU1ZhbHVlLCBpbnQgYXJnYywgSlNWYWx1ZSBhcmd2W10pOwoKc3RhdGljIGlubGluZSBpbnQKc29ja2FkZHJfcG9ydChjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gbnRvaHMoc2EtPmluLnNpbl9wb3J0KTsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiBudG9ocyhzYS0+aW42LnNpbjZfcG9ydCk7CiAgfQogIHJldHVybiAtMTsKfQoKc3RhdGljIGlubGluZSB2b2lkKgpzb2NrYWRkcl9hZGRyKGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiAmc2EtPmluLnNpbl9hZGRyOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuICZzYS0+aW42LnNpbjZfYWRkcjsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgc29ja2xlbl90CnNvY2thZGRyX2FkZHJsZW4oY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIHNpemVvZihzYS0+aW4uc2luX2FkZHIpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzYS0+aW42LnNpbjZfYWRkcik7CiAgfQogIHJldHVybiAwOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApzb2NrYWRkcl9zaXplKGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiBzaXplb2Yoc3RydWN0IHNvY2thZGRyX2luKTsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiBzaXplb2Yoc3RydWN0IHNvY2thZGRyX2luNik7CiAgfQogIHJldHVybiAwOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tBZGRyKgpqc19zb2NrYWRkcl9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3NvY2thZGRyX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBTb2NrQWRkcioKanNfc29ja2FkZHJfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX3NvY2thZGRyX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBTb2NrZXQKanNfc29ja2V0X2RhdGEoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgU29ja2V0IHNvY2s7CiAgc29jay5wdHIgPSBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3NvY2tldF9jbGFzc19pZCk7CiAgcmV0dXJuIHNvY2s7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja2V0CmpzX3NvY2tldF9kYXRhMihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgU29ja2V0IHNvY2s7CiAgc29jay5wdHIgPSBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX3NvY2tldF9jbGFzc19pZCk7CiAgcmV0dXJuIHNvY2s7Cn0KCiNlbmRpZiAvKiBkZWZpbmVkKFFVSUNLSlNfU09DS0VUU19IKSAgICAgICAgICovCgAAAAAAAAAAPQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAMAAAAAAABAAwAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA9CwAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSAidXRpbHMuaCIKI2luY2x1ZGUgPHN5cy9zb2NrZXQuaD4KI2luY2x1ZGUgPG5ldGluZXQvaW4uaD4KCnR5cGVkZWYgdW5pb24gewogIHVpbnQxNl90IGZhbWlseTsKICBzdHJ1Y3Qgc29ja2FkZHIgczsKICBzdHJ1Y3Qgc29ja2FkZHJfaW4gaW47CiAgc3RydWN0IHNvY2thZGRyX2luNiBpbjY7Cn0gU29ja0FkZHI7CgpfX2F0dHJpYnV0ZV9fKChwYWNrZWQpKSB1bmlvbiBzb2NrZXRfc3RhdGUgewogIHN0cnVjdCB7CiAgICB1aW50MTZfdCBmZDsKICAgIHVuc2lnbmVkIGVycm9yIDogMTI7CiAgICB1bnNpZ25lZCBzeXNjYWxsIDogNDsKICAgIGludDMyX3QgcmV0OwogIH07CiAgdWludDY0X3QgdTY0OwogIHZvaWQqIHB0cjsKfTsKCnR5cGVkZWYgdW5pb24gc29ja2V0X3N0YXRlIFNvY2tldDsKCmV4dGVybiB0aHJlYWRfbG9jYWwgVklTSUJMRSBKU0NsYXNzSUQganNfc29ja2FkZHJfY2xhc3NfaWQsIGpzX3NvY2tldF9jbGFzc19pZDsKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU1ZhbHVlIHNvY2thZGRyX3Byb3RvLCBzb2NrYWRkcl9jdG9yLCBzb2NrZXRfcHJvdG8sIHNvY2tldF9jdG9yOwoKZW51bSBTb2NrZXRDYWxscyB7CiAgU1lTQ0FMTF9TT0NLRVQgPSAxLAogIFNZU0NBTExfR0VUU09DS05BTUUsCiAgU1lTQ0FMTF9HRVRQRUVSTkFNRSwKICBTWVNDQUxMX0ZDTlRMLAogIFNZU0NBTExfQklORCwKICBTWVNDQUxMX0FDQ0VQVCwKICBTWVNDQUxMX0NPTk5FQ1QsCiAgU1lTQ0FMTF9MSVNURU4sCiAgU1lTQ0FMTF9SRUNWLAogIFNZU0NBTExfUkVDVkZST00sCiAgU1lTQ0FMTF9TRU5ELAogIFNZU0NBTExfU0VORFRPLAogIFNZU0NBTExfU0hVVERPV04sCiAgU1lTQ0FMTF9DTE9TRSwKICBTWVNDQUxMX0dFVFNPQ0tPUFQsCiAgU1lTQ0FMTF9TRVRTT0NLT1BUCn07CgojZGVmaW5lIHNvY2tldF9jbG9zZWQoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfQ0xPU0UgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9lb2Yoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfUkVDViAmJiAoc29jaykucmV0ID09IDApCiNkZWZpbmUgc29ja2V0X29wZW4oc29jaykgIXNvY2tldF9jbG9zZWQoc29jaykKI2RlZmluZSBzb2NrZXRfZXJyb3Ioc29jaykgKChzb2NrKS5yZXQgPCAwICYmIChzb2NrKS5lcnJvcikKI2RlZmluZSBzb2NrZXRfc3lzY2FsbChzb2NrKSBzb2NrZXRfc3lzY2FsbHNbKHNvY2spLnN5c2NhbGxdCgpKU1ZhbHVlIGpzX3NvY2tldF9uZXdfcHJvdG8oSlNDb250ZXh0KiwgSlNWYWx1ZSwgaW50IGZkKTsKSlNWYWx1ZSBqc19zb2NrZXRfbmV3KEpTQ29udGV4dCosIGludCk7CkpTVmFsdWUganNfc29ja2V0X2NvbnN0cnVjdG9yKEpTQ29udGV4dCosIEpTVmFsdWUsIGludCBhcmdjLCBKU1ZhbHVlIGFyZ3ZbXSk7CgpzdGF0aWMgaW5saW5lIGludApzb2NrYWRkcl9wb3J0KGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiBudG9ocyhzYS0+aW4uc2luX3BvcnQpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIG50b2hzKHNhLT5pbjYuc2luNl9wb3J0KTsKICB9CiAgcmV0dXJuIC0xOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQqCnNvY2thZGRyX2FkZHIoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuICZzYS0+aW4uc2luX2FkZHI7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gJnNhLT5pbjYuc2luNl9hZGRyOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzb2NrbGVuX3QKc29ja2FkZHJfYWRkcmxlbihjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHNhLT5pbi5zaW5fYWRkcik7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gc2l6ZW9mKHNhLT5pbjYuc2luNl9hZGRyKTsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnNvY2thZGRyX3NpemUoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIHNpemVvZihzdHJ1Y3Qgc29ja2FkZHJfaW4pOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzdHJ1Y3Qgc29ja2FkZHJfaW42KTsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja0FkZHIqCmpzX3NvY2thZGRyX2RhdGEoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfc29ja2FkZHJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tBZGRyKgpqc19zb2NrYWRkcl9kYXRhMihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfc29ja2FkZHJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tldApqc19zb2NrZXRfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBTb2NrZXQgc29jazsKICBzb2NrLnB0ciA9IEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfc29ja2V0X2NsYXNzX2lkKTsKICByZXR1cm4gc29jazsKfQoKc3RhdGljIGlubGluZSBTb2NrZXQKanNfc29ja2V0X2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBTb2NrZXQgc29jazsKICBzb2NrLnB0ciA9IEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfc29ja2V0X2NsYXNzX2lkKTsKICByZXR1cm4gc29jazsKfQoKI2VuZGlmIC8qIGRlZmluZWQoUVVJQ0tKU19TT0NLRVRTX0gpICAgICAgICAgKi8KAAAAAAAAAAA9CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQIAAAAAAAC0AwAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMYAAAAAAAAAxwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgAAAAAAAADGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"left_delete",
					null,
					"AQAAAMYAAAAAAAAAxgAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAwGhA"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "sai"
					},
					"AwAAAMYAAAAAAAAAxwAAAAAAAAAAAAAAxwAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgAAAAAAAADGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					2,
					"right_delete",
					null,
					"AgAAAMkAAAAAAAAAyQAAAAAAAAABAAAAackAAAAAAAAAyQAAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					2,
					"left_delete",
					null,
					"AgAAAOIAAAAAAAAA4gAAAAAAAAABAAAAbuEAAAAAAAAA4QAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA4wAAAAAAAADjAAAAAAAAAAAAAAAAAGtA"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "sai"
					},
					"AwAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA4gAAAAAAAADjAAAAAAAAAAAAAADjAAAAAAAAAOQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"left_delete",
					null,
					"AQAAAK4AAAAAAAAArgAAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAArwAAAAAAAACvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "sa"
					},
					"AgAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgAAAAAAAACuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABACwAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSAidXRpbHMuaCIKI2luY2x1ZGUgPHN5cy9zb2NrZXQuaD4KI2luY2x1ZGUgPG5ldGluZXQvaW4uaD4KCnR5cGVkZWYgdW5pb24gewogIHVpbnQxNl90IGZhbWlseTsKICBzdHJ1Y3Qgc29ja2FkZHIgc2E7CiAgc3RydWN0IHNvY2thZGRyX2luIHNhaTsKICBzdHJ1Y3Qgc29ja2FkZHJfaW42IHNhaTY7Cn0gU29ja0FkZHI7CgpfX2F0dHJpYnV0ZV9fKChwYWNrZWQpKSB1bmlvbiBzb2NrZXRfc3RhdGUgewogIHN0cnVjdCB7CiAgICB1aW50MTZfdCBmZDsKICAgIHVuc2lnbmVkIGVycm9yIDogMTI7CiAgICB1bnNpZ25lZCBzeXNjYWxsIDogNDsKICAgIGludDMyX3QgcmV0OwogIH07CiAgdWludDY0X3QgdTY0OwogIHZvaWQqIHB0cjsKfTsKCnR5cGVkZWYgdW5pb24gc29ja2V0X3N0YXRlIFNvY2tldDsKCmV4dGVybiB0aHJlYWRfbG9jYWwgVklTSUJMRSBKU0NsYXNzSUQganNfc29ja2FkZHJfY2xhc3NfaWQsIGpzX3NvY2tldF9jbGFzc19pZDsKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU1ZhbHVlIHNvY2thZGRyX3Byb3RvLCBzb2NrYWRkcl9jdG9yLCBzb2NrZXRfcHJvdG8sIHNvY2tldF9jdG9yOwoKZW51bSBTb2NrZXRDYWxscyB7CiAgU1lTQ0FMTF9TT0NLRVQgPSAxLAogIFNZU0NBTExfR0VUU09DS05BTUUsCiAgU1lTQ0FMTF9HRVRQRUVSTkFNRSwKICBTWVNDQUxMX0ZDTlRMLAogIFNZU0NBTExfQklORCwKICBTWVNDQUxMX0FDQ0VQVCwKICBTWVNDQUxMX0NPTk5FQ1QsCiAgU1lTQ0FMTF9MSVNURU4sCiAgU1lTQ0FMTF9SRUNWLAogIFNZU0NBTExfUkVDVkZST00sCiAgU1lTQ0FMTF9TRU5ELAogIFNZU0NBTExfU0VORFRPLAogIFNZU0NBTExfU0hVVERPV04sCiAgU1lTQ0FMTF9DTE9TRSwKICBTWVNDQUxMX0dFVFNPQ0tPUFQsCiAgU1lTQ0FMTF9TRVRTT0NLT1BUCn07CgojZGVmaW5lIHNvY2tldF9jbG9zZWQoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfQ0xPU0UgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9lb2Yoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfUkVDViAmJiAoc29jaykucmV0ID09IDApCiNkZWZpbmUgc29ja2V0X29wZW4oc29jaykgIXNvY2tldF9jbG9zZWQoc29jaykKI2RlZmluZSBzb2NrZXRfZXJyb3Ioc29jaykgKChzb2NrKS5yZXQgPCAwICYmIChzb2NrKS5lcnJvcikKI2RlZmluZSBzb2NrZXRfc3lzY2FsbChzb2NrKSBzb2NrZXRfc3lzY2FsbHNbKHNvY2spLnN5c2NhbGxdCgpKU1ZhbHVlIGpzX3NvY2tldF9uZXdfcHJvdG8oSlNDb250ZXh0KiwgSlNWYWx1ZSwgaW50IGZkKTsKSlNWYWx1ZSBqc19zb2NrZXRfbmV3KEpTQ29udGV4dCosIGludCk7CkpTVmFsdWUganNfc29ja2V0X2NvbnN0cnVjdG9yKEpTQ29udGV4dCosIEpTVmFsdWUsIGludCBhcmdjLCBKU1ZhbHVlIGFyZ3ZbXSk7CgpzdGF0aWMgaW5saW5lIGludApzb2NrYWRkcl9wb3J0KGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiBudG9ocyhzYS0+aW4uc2luX3BvcnQpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIG50b2hzKHNhLT5pbjYuc2luNl9wb3J0KTsKICB9CiAgcmV0dXJuIC0xOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQqCnNvY2thZGRyX2FkZHIoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuICZzYS0+aW4uc2luX2FkZHI7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gJnNhLT5pbjYuc2luNl9hZGRyOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzb2NrbGVuX3QKc29ja2FkZHJfYWRkcmxlbihjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHNhLT5pbi5zaW5fYWRkcik7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gc2l6ZW9mKHNhLT5pbjYuc2luNl9hZGRyKTsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnNvY2thZGRyX3NpemUoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIHNpemVvZihzdHJ1Y3Qgc29ja2FkZHJfaW4pOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzdHJ1Y3Qgc29ja2FkZHJfaW42KTsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja0FkZHIqCmpzX3NvY2thZGRyX2RhdGEoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfc29ja2FkZHJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tBZGRyKgpqc19zb2NrYWRkcl9kYXRhMihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfc29ja2FkZHJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tldApqc19zb2NrZXRfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBTb2NrZXQgc29jazsKICBzb2NrLnB0ciA9IEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfc29ja2V0X2NsYXNzX2lkKTsKICByZXR1cm4gc29jazsKfQoKc3RhdGljIGlubGluZSBTb2NrZXQKanNfc29ja2V0X2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBTb2NrZXQgc29jazsKICBzb2NrLnB0ciA9IEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfc29ja2V0X2NsYXNzX2lkKTsKICByZXR1cm4gc29jazsKfQoKI2VuZGlmIC8qIGRlZmluZWQoUVVJQ0tKU19TT0NLRVRTX0gpICAgICAgICAgKi8KAAAAAAAAAABGCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AgAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACvAAAAAAAAAAIAAABzYQ",
					"AQAAAAAAAAABAAAArgAAAAAAAACwAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "char-utils.h",
			"settings":
			{
				"buffer_size": 7580,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"paste",
					null,
					"AQAAADMaAAAAAAAAYRoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzGgAAAAAAADMaAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAAE0aAAAAAAAAThoAAAAAAAAAAAAAThoAAAAAAABOGgAAAAAAAAgAAABzdHJfZGlmZk4aAAAAAAAATxoAAAAAAAAAAAAATxoAAAAAAABQGgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNGgAAAAAAAFUaAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					3,
					"left_delete",
					null,
					"AwAAAE8aAAAAAAAATxoAAAAAAAABAAAAck4aAAAAAAAAThoAAAAAAAABAAAAdE0aAAAAAAAATRoAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQGgAAAAAAAFAaAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "strcmp"
					},
					"BgAAAE0aAAAAAAAAThoAAAAAAAAAAAAAThoAAAAAAABPGgAAAAAAAAAAAABPGgAAAAAAAFAaAAAAAAAAAAAAAFAaAAAAAAAAURoAAAAAAAAAAAAAURoAAAAAAABSGgAAAAAAAAAAAABSGgAAAAAAAFMaAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABNGgAAAAAAAE0aAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"cut",
					null,
					"AQAAADMaAAAAAAAAMxoAAAAAAAAsAAAAI2RlZmluZSBzdHJfZXF1YWwocywgdCkgKCFzdHJjbXAoKHMpLCAodCkpKQo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzGgAAAAAAAF8aAAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACQDAAAAAAAAJQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkAwAAAAAAACQDAAAAAAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAACUDAAAAAAAAUQMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlAwAAAAAAACUDAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFEDAAAAAAAAUgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRAwAAAAAAAFEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABPHgAAI2lmbmRlZiBDSEFSX1VUSUxTX0gKI2RlZmluZSBDSEFSX1VUSUxTX0gKCiNpbmNsdWRlIDxjdXRpbHMuaD4KCiNkZWZpbmUgaXNfY29udHJvbF9jaGFyKGMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiAgKChjKSA9PSAnXGEnIHx8IChjKSA9PSAnXGInIHx8IChjKSA9PSAnXHQnIHx8IChjKSA9PSAnXG4nIHx8IChjKSA9PSAnXHYnIHx8ICBcCiAgIChjKSA9PSAnXGYnIHx8IChjKSA9PSAnXHInKQojZGVmaW5lIGlzX2FscGhhbnVtZXJpY19jaGFyKGMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICgoYykgPj0gJ0EnICYmIChjKSA8PSAnWicpIHx8ICgoYykgPj0gJ2EnICYmIChjKSA8PSAneicpCiNkZWZpbmUgaXNfZGlnaXRfY2hhcihjKSAoKGMpID49ICcwJyAmJiAoYykgPD0gJzknKQojZGVmaW5lIGlzX25ld2xpbmVfY2hhcihjKSAoKGMpID09ICdcbicpCiNkZWZpbmUgaXNfaWRlbnRpZmllcl9jaGFyKGMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiAgKGlzX2FscGhhbnVtZXJpY19jaGFyKGMpIHx8IGlzX2RpZ2l0X2NoYXIoYykgfHwgKGMpID09ICckJyB8fCAoYykgPT0gJ18nKQojZGVmaW5lIGlzX3doaXRlc3BhY2VfY2hhcihjKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICgoYykgPT0gJyAnIHx8IChjKSA9PSAnXHQnIHx8IChjKSA9PSAnXHYnIHx8IChjKSA9PSAnXG4nIHx8IChjKSA9PSAnXHInKQoKCiNkZWZpbmUgc3RyX2VxdWFsKHMsIHQpICghc3RyY21wKChzKSwgKHQpKSkKCnN0YXRpYyBpbmxpbmUgaW50CmVzY2FwZV9jaGFyX3ByZWQoaW50IGMpIHsKICBzdGF0aWMgY29uc3QgdW5zaWduZWQgY2hhciB0YWJsZVsyNTZdID0gewogICAgICAneCcsICAneCcsICAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAweDYyLCAweDc0LCAweDZlLCAweDc2LCAweDY2LAogICAgICAweDcyLCAneCcsICAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICAneCcsICAneCcsICAneCcsICAneCcsCiAgICAgICd4JywgICd4JywgICd4JywgJ3gnLCAneCcsICd4JywgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDB4MjcsIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDB4NWMsIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgICd4JywgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsCiAgICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDB9OwoKICByZXR1cm4gdGFibGVbKHVuc2lnbmVkIGNoYXIpY107Cn0KCnN0YXRpYyBpbmxpbmUgaW50CnVuZXNjYXBlX2NoYXJfcHJlZChpbnQgYykgewogIHN3aXRjaChjKSB7CiAgICBjYXNlICdiJzogcmV0dXJuIDg7CiAgICBjYXNlICdmJzogcmV0dXJuIDEyOwogICAgY2FzZSAnbic6IHJldHVybiAxMDsKICAgIGNhc2UgJ3InOiByZXR1cm4gMTM7CiAgICBjYXNlICd0JzogcmV0dXJuIDk7CiAgICBjYXNlICd2JzogcmV0dXJuIDExOwogICAgY2FzZSAnXCcnOiByZXR1cm4gMzk7CiAgICBjYXNlICdcXCc6IHJldHVybiA5MjsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmlzX2VzY2FwZV9jaGFyKGludCBjKSB7CiAgcmV0dXJuIGlzX2NvbnRyb2xfY2hhcihjKSB8fCBjID09ICdcXCcgfHwgYyA9PSAnXCcnIHx8IGMgPT0gMHgxYiB8fCBjID09IDA7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmlzX2JhY2tzbGFzaF9jaGFyKGludCBjKSB7CiAgcmV0dXJuIGMgPT0gJ1xcJzsKfQoKLy8jZGVmaW5lIGlzX2RvdF9jaGFyKGMpICgoYykgPT0gJy4nKTAKLy8jZGVmaW5lIGlzX2JhY2tzbGFzaF9jaGFyKGMpICgoYykgPT0gJ1xcJykKCnN0YXRpYyBpbmxpbmUgaW50CmlzX2RvdF9jaGFyKGludCBjKSB7CiAgcmV0dXJuIGMgPT0gJy4nOwp9CgpzdGF0aWMgaW5saW5lIGludAppc19pZGVudGlmaWVyKGNvbnN0IGNoYXIqIHN0cikgewogIGlmKCEoKCpzdHIgPj0gJ0EnICYmICpzdHIgPD0gJ1onKSB8fCAoKnN0ciA+PSAnYScgJiYgKnN0ciA8PSAneicpIHx8CiAgICAgICAqc3RyID09ICckJyB8fCAqc3RyID09ICdfJykpCiAgICByZXR1cm4gMDsKICB3aGlsZSgqKytzdHIpIHsKICAgIGlmKCFpc19pZGVudGlmaWVyX2NoYXIoKnN0cikpCiAgICAgIHJldHVybiAwOwogIH0KICByZXR1cm4gMTsKfQoKc3RhdGljIGlubGluZSBpbnQKaXNfaW50ZWdlcihjb25zdCBjaGFyKiBzdHIpIHsKICBpZighKCpzdHIgPj0gJzEnICYmICpzdHIgPD0gJzknKSAmJiAhKCpzdHIgPT0gJzAnICYmIHN0clsxXSA9PSAnXDAnKSkKICAgIHJldHVybiAwOwogIHdoaWxlKCorK3N0cikgewogICAgaWYoIWlzX2RpZ2l0X2NoYXIoKnN0cikpCiAgICAgIHJldHVybiAwOwogIH0KICByZXR1cm4gMTsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKYnl0ZV9jb3VudChjb25zdCB2b2lkKiBzLCBzaXplX3QgbiwgY2hhciBjKSB7CiAgY29uc3QgdWludDhfdCogdDsKICB1aW50OF90IGNoID0gKHVpbnQ4X3QpYzsKICBzaXplX3QgY291bnQ7CiAgZm9yKHQgPSAodWludDhfdCopcywgY291bnQgPSAwOyBuOyArK3QsIC0tbikgewogICAgaWYoKnQgPT0gY2gpCiAgICAgICsrY291bnQ7CiAgfQogIHJldHVybiBjb3VudDsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKYnl0ZV9jaHIoY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuLCBjaGFyIGMpIHsKICBjb25zdCBjaGFyICpzLCAqdDsKICBmb3IocyA9IHN0ciwgdCA9IHMgKyBsZW47IHMgPCB0OyArK3MpCiAgICBpZigqcyA9PSBjKQogICAgICBicmVhazsKICByZXR1cm4gcyAtIHN0cjsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKYnl0ZV9yY2hyKGNvbnN0IHZvaWQqIHN0ciwgc2l6ZV90IGxlbiwgY2hhciBjKSB7CiAgY29uc3QgY2hhciAqcywgKnQ7CiAgZm9yKHMgPSAoY29uc3QgY2hhciopc3RyLCB0ID0gcyArIGxlbjsgLS10ID49IHM7KQogICAgaWYoKnQgPT0gYykKICAgICAgcmV0dXJuIChzaXplX3QpKHQgLSBzKTsKICByZXR1cm4gbGVuOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApieXRlX2NocnMoY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuLCBjb25zdCBjaGFyIG5lZWRsZVtdLCBzaXplX3QgbmwpIHsKICBjb25zdCBjaGFyICpzLCAqdDsKICBmb3IocyA9IHN0ciwgdCA9IHN0ciArIGxlbjsgcyAhPSB0OyBzKyspCiAgICBpZihieXRlX2NocihuZWVkbGUsIG5sLCAqcykgPCBubCkKICAgICAgYnJlYWs7CiAgcmV0dXJuIHMgLSAoY29uc3QgY2hhciopc3RyOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApieXRlX2NoYXJsZW4oY29uc3QgY2hhciogaW4sIHNpemVfdCBsZW4pIHsKICBjb25zdCB1aW50OF90ICpwb3MsICplbmQsICpuZXh0OwogIGludCBjcDsKICBwb3MgPSAoY29uc3QgdWludDhfdCopaW47CiAgZW5kID0gcG9zICsgbGVuOwogIGNwID0gdW5pY29kZV9mcm9tX3V0ZjgocG9zLCBlbmQgLSBwb3MsICZuZXh0KTsKICByZXR1cm4gbmV4dCAtIHBvczsKfQoKY2hhciogYnl0ZV9lc2NhcGUoY29uc3QgY2hhciosIHNpemVfdCBuKTsKCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnN0cl9jaHIoY29uc3QgY2hhciogaW4sIGNoYXIgbmVlZGxlKSB7CiAgY29uc3QgY2hhciogdCA9IGluOwogIGNvbnN0IGNoYXIgYyA9IG5lZWRsZTsKICBmb3IoOzspIHsKICAgIGlmKCEqdCB8fCAqdCA9PSBjKSB7CiAgICAgIGJyZWFrOwogICAgfTsKICAgICsrdDsKICB9CiAgcmV0dXJuIChzaXplX3QpKHQgLSBpbik7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnN0cl9jaHJzKGNvbnN0IGNoYXIqIGluLCBjb25zdCBjaGFyIG5lZWRsZXNbXSwgc2l6ZV90IG5uKSB7CiAgY29uc3QgY2hhciogdCA9IGluOwogIHNpemVfdCBpOwogIGZvcig7OykgewogICAgaWYoISp0KQogICAgICBicmVhazsKICAgIGZvcihpID0gMDsgaSA8IG5uOyBpKyspCiAgICAgIGlmKCp0ID09IG5lZWRsZXNbaV0pCiAgICAgICAgcmV0dXJuIChzaXplX3QpKHQgLSBpbik7CiAgICArK3Q7CiAgfQogIHJldHVybiAoc2l6ZV90KSh0IC0gaW4pOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfcmNocihjb25zdCBjaGFyKiBzLCBjaGFyIG5lZWRsZSkgewogIGNvbnN0IGNoYXIgKmluID0gcywgKmZvdW5kID0gMDsKICBmb3IoOzspIHsKICAgIGlmKCEqaW4pCiAgICAgIGJyZWFrOwogICAgaWYoKmluID09IG5lZWRsZSkKICAgICAgZm91bmQgPSBpbjsKICAgICsraW47CiAgfQogIHJldHVybiAoc2l6ZV90KSgoZm91bmQgPyBmb3VuZCA6IGluKSAtIHMpOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfcmNocnMoY29uc3QgY2hhciogaW4sIGNvbnN0IGNoYXIgbmVlZGxlc1tdLCBzaXplX3Qgbm4pIHsKICBjb25zdCBjaGFyICpzID0gaW4sICpmb3VuZCA9IDA7CiAgc2l6ZV90IGk7CiAgZm9yKDs7KSB7CiAgICBpZighKnMpCiAgICAgIGJyZWFrOwogICAgZm9yKGkgPSAwOyBpIDwgbm47ICsraSkgewogICAgICBpZigqcyA9PSBuZWVkbGVzW2ldKQogICAgICAgIGZvdW5kID0gczsKICAgIH0KICAgICsrczsKICB9CiAgcmV0dXJuIChzaXplX3QpKChmb3VuZCA/IGZvdW5kIDogcykgLSBpbik7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CnN0cl9lbmRiKGNvbnN0IGNoYXIqIGEsIGNvbnN0IGNoYXIqIHgsIHNpemVfdCBuKSB7CiAgc2l6ZV90IGFsZW4gPSBzdHJsZW4oYSk7CiAgYSArPSBhbGVuIC0gbjsKICByZXR1cm4gYWxlbiA+PSBuICYmICFtZW1jbXAoYSwgeCwgbik7Cn0KCi8qIHN0cl9lbmRzIHJldHVybnMgMSBpZiB0aGUgYiBpcyBhIHN1ZmZpeCBvZiBhLCAwIG90aGVyd2lzZSAqLwpzdGF0aWMgaW5saW5lIGludApzdHJfZW5kcyhjb25zdCBjaGFyKiBhLCBjb25zdCBjaGFyKiBiKSB7CiAgcmV0dXJuIHN0cl9lbmRiKGEsIGIsIHN0cmxlbihiKSk7Cn0KCiNkZWZpbmUgc3RyX2NvbnRhaW5zKHMsIG5lZWRsZSkgKCEhc3RyY2hyKChzKSwgKG5lZWRsZSkpKQoKY2hhciogc3RyX2VzY2FwZShjb25zdCBjaGFyKik7CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfY291bnQoY29uc3QgY2hhciogcywgY2hhciBjKSB7CiAgc2l6ZV90IGksIGNvdW50ID0gMDsKICBmb3IoaSA9IDA7IHNbaV07IGkrKykKICAgIGlmKHNbaV0gPT0gYykKICAgICAgKytjb3VudDsKICByZXR1cm4gY291bnQ7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnN0cl9jb3B5KGNoYXIqIG91dCwgY29uc3QgY2hhciogaW4pIHsKICBjaGFyKiBzOwogIGZvcihzID0gb3V0OyAoKnMgPSAqaW4pOyArK3MpICsraW47CiAgcmV0dXJuIChzaXplX3QpKHMgLSBvdXQpOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfY29weW4oY2hhciogb3V0LCBjb25zdCBjaGFyKiBpbiwgc2l6ZV90IG4pIHsKICBjaGFyKiBzOwogIGZvcihzID0gb3V0OyBuLS0gJiYgKCpzID0gKmluKTsgKytzKSArK2luOwogICpzID0gJ1wwJzsKICByZXR1cm4gKHNpemVfdCkocyAtIG91dCk7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcioKc3RyX25kdXAoY29uc3QgY2hhciogcywgc2l6ZV90IG4pIHsKICBjaGFyKiByID0gbWFsbG9jKG4gKyAxKTsKICBpZihyID09IE5VTEwpCiAgICByZXR1cm4gTlVMTDsKICBtZW1jcHkociwgcywgbik7CiAgcltuXSA9ICdcMCc7CiAgcmV0dXJuIHI7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnByZWRpY2F0ZV9maW5kKGNvbnN0IGNoYXIqIHN0ciwgc2l6ZV90IGxlbiwgaW50ICgqcHJlZCkoaW50MzJfdCkpIHsKICBzaXplX3QgcG9zOwogIGZvcihwb3MgPSAwOyBwb3MgPCBsZW47IHBvcysrKQogICAgaWYocHJlZChzdHJbcG9zXSkpCiAgICAgIGJyZWFrOwogIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90Cmxvb2t1cF9maW5kKGNvbnN0IGNoYXIqIHN0ciwgc2l6ZV90IGxlbiwgY29uc3QgY2hhciB0YWJsZVsyNTZdKSB7CiAgc2l6ZV90IHBvczsKICBmb3IocG9zID0gMDsgcG9zIDwgbGVuOyBwb3MrKykKICAgIGlmKHRhYmxlWyh1bnNpZ25lZCBjaGFyKXN0cltwb3NdXSkKICAgICAgYnJlYWs7CiAgcmV0dXJuIHBvczsKfQoKc3RhdGljIGlubGluZSBjaGFyCmVzY2FwZV9jaGFyX2xldHRlcihjaGFyIGMpIHsKICBzd2l0Y2goYykgewogICAgY2FzZSAnXDAnOiByZXR1cm4gJzAnOwogICAgY2FzZSAnXGEnOiByZXR1cm4gJ2EnOwogICAgY2FzZSAnXGInOiByZXR1cm4gJ2InOwogICAgY2FzZSAnXHQnOiByZXR1cm4gJ3QnOwogICAgY2FzZSAnXG4nOiByZXR1cm4gJ24nOwogICAgY2FzZSAnXHYnOiByZXR1cm4gJ3YnOwogICAgY2FzZSAnXGYnOiByZXR1cm4gJ2YnOwogICAgY2FzZSAnXHInOiByZXR1cm4gJ3InOwogICAgY2FzZSAnXFwnOiByZXR1cm4gJ1xcJzsKICAgIGNhc2UgJ1wnJzogcmV0dXJuICdcJyc7CiAgfQogIHJldHVybiAwOwp9CgpzaXplX3QgdG9rZW5fbGVuZ3RoKGNvbnN0IGNoYXIqLCBzaXplX3QsIGNoYXIgZGVsaW0pOwoKI2RlZmluZSBGTVRfVUxPTkcgNDAgLyogZW5vdWdoIHNwYWNlIHRvIGhvbGQgMl4xMjggLSAxIGluIGRlY2ltYWwsIHBsdXMgXDAgKi8KCnNpemVfdCBmbXRfdWxvbmcoY2hhciosIHVuc2lnbmVkIGxvbmcpOwpzaXplX3Qgc2Nhbl91c2hvcnQoY29uc3QgY2hhciosIHVuc2lnbmVkIHNob3J0Kik7CgojZW5kaWYgLyogZGVmaW5lZChDSEFSX1VUSUxTX0gpICovCgAAAAAAAAAATh4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSAwAAAAAAAFIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABSAwAAAAAAAFIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUgMAAAAAAABSAwAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACKHQAAI2lmbmRlZiBDSEFSX1VUSUxTX0gKI2RlZmluZSBDSEFSX1VUSUxTX0gKCiNpbmNsdWRlIDxjdXRpbHMuaD4KCiNkZWZpbmUgaXNfY29udHJvbF9jaGFyKGMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICgoYykgPT0gJ1xhJyB8fCAoYykgPT0gJ1xiJyB8fCAoYykgPT0gJ1x0JyB8fCAoYykgPT0gJ1xuJyB8fCAoYykgPT0gJ1x2JyB8fCAoYykgPT0gJ1xmJyB8fCAoYykgPT0gJ1xyJykKI2RlZmluZSBpc19hbHBoYW51bWVyaWNfY2hhcihjKSAoKGMpID49ICdBJyAmJiAoYykgPD0gJ1onKSB8fCAoKGMpID49ICdhJyAmJiAoYykgPD0gJ3onKQojZGVmaW5lIGlzX2RpZ2l0X2NoYXIoYykgKChjKSA+PSAnMCcgJiYgKGMpIDw9ICc5JykKI2RlZmluZSBpc19uZXdsaW5lX2NoYXIoYykgKChjKSA9PSAnXG4nKQojZGVmaW5lIGlzX2lkZW50aWZpZXJfY2hhcihjKSAoaXNfYWxwaGFudW1lcmljX2NoYXIoYykgfHwgaXNfZGlnaXRfY2hhcihjKSB8fCAoYykgPT0gJyQnIHx8IChjKSA9PSAnXycpCiNkZWZpbmUgaXNfd2hpdGVzcGFjZV9jaGFyKGMpICgoYykgPT0gJyAnIHx8IChjKSA9PSAnXHQnIHx8IChjKSA9PSAnXHYnIHx8IChjKSA9PSAnXG4nIHx8IChjKSA9PSAnXHInKQoKI2RlZmluZSBzdHJfZXF1YWwocywgdCkgKCFzdHJjbXAoKHMpLCAodCkpKQoKc3RhdGljIGlubGluZSBpbnQKZXNjYXBlX2NoYXJfcHJlZChpbnQgYykgewogIHN0YXRpYyBjb25zdCB1bnNpZ25lZCBjaGFyIHRhYmxlWzI1Nl0gPSB7CiAgICAgICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAweDYyLCAweDc0LCAweDZlLCAweDc2LCAweDY2LCAweDcyLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLAogICAgICAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAgJ3gnLCAgJ3gnLCAgJ3gnLCAgMCwgICAgMCwgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDB4MjcsCiAgICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLAogICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAgMHg1YywgMCwgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAneCcsIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLAogICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLAogICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMH07CgogIHJldHVybiB0YWJsZVsodW5zaWduZWQgY2hhciljXTsKfQoKc3RhdGljIGlubGluZSBpbnQKdW5lc2NhcGVfY2hhcl9wcmVkKGludCBjKSB7CiAgc3dpdGNoKGMpIHsKICAgIGNhc2UgJ2InOiByZXR1cm4gODsKICAgIGNhc2UgJ2YnOiByZXR1cm4gMTI7CiAgICBjYXNlICduJzogcmV0dXJuIDEwOwogICAgY2FzZSAncic6IHJldHVybiAxMzsKICAgIGNhc2UgJ3QnOiByZXR1cm4gOTsKICAgIGNhc2UgJ3YnOiByZXR1cm4gMTE7CiAgICBjYXNlICdcJyc6IHJldHVybiAzOTsKICAgIGNhc2UgJ1xcJzogcmV0dXJuIDkyOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBpbnQKaXNfZXNjYXBlX2NoYXIoaW50IGMpIHsKICByZXR1cm4gaXNfY29udHJvbF9jaGFyKGMpIHx8IGMgPT0gJ1xcJyB8fCBjID09ICdcJycgfHwgYyA9PSAweDFiIHx8IGMgPT0gMDsKfQoKc3RhdGljIGlubGluZSBpbnQKaXNfYmFja3NsYXNoX2NoYXIoaW50IGMpIHsKICByZXR1cm4gYyA9PSAnXFwnOwp9CgovLyNkZWZpbmUgaXNfZG90X2NoYXIoYykgKChjKSA9PSAnLicpMAovLyNkZWZpbmUgaXNfYmFja3NsYXNoX2NoYXIoYykgKChjKSA9PSAnXFwnKQoKc3RhdGljIGlubGluZSBpbnQKaXNfZG90X2NoYXIoaW50IGMpIHsKICByZXR1cm4gYyA9PSAnLic7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmlzX2lkZW50aWZpZXIoY29uc3QgY2hhciogc3RyKSB7CiAgaWYoISgoKnN0ciA+PSAnQScgJiYgKnN0ciA8PSAnWicpIHx8ICgqc3RyID49ICdhJyAmJiAqc3RyIDw9ICd6JykgfHwgKnN0ciA9PSAnJCcgfHwgKnN0ciA9PSAnXycpKQogICAgcmV0dXJuIDA7CiAgd2hpbGUoKisrc3RyKSB7CiAgICBpZighaXNfaWRlbnRpZmllcl9jaGFyKCpzdHIpKQogICAgICByZXR1cm4gMDsKICB9CiAgcmV0dXJuIDE7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmlzX2ludGVnZXIoY29uc3QgY2hhciogc3RyKSB7CiAgaWYoISgqc3RyID49ICcxJyAmJiAqc3RyIDw9ICc5JykgJiYgISgqc3RyID09ICcwJyAmJiBzdHJbMV0gPT0gJ1wwJykpCiAgICByZXR1cm4gMDsKICB3aGlsZSgqKytzdHIpIHsKICAgIGlmKCFpc19kaWdpdF9jaGFyKCpzdHIpKQogICAgICByZXR1cm4gMDsKICB9CiAgcmV0dXJuIDE7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmJ5dGVfY291bnQoY29uc3Qgdm9pZCogcywgc2l6ZV90IG4sIGNoYXIgYykgewogIGNvbnN0IHVpbnQ4X3QqIHQ7CiAgdWludDhfdCBjaCA9ICh1aW50OF90KWM7CiAgc2l6ZV90IGNvdW50OwogIGZvcih0ID0gKHVpbnQ4X3QqKXMsIGNvdW50ID0gMDsgbjsgKyt0LCAtLW4pIHsKICAgIGlmKCp0ID09IGNoKQogICAgICArK2NvdW50OwogIH0KICByZXR1cm4gY291bnQ7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmJ5dGVfY2hyKGNvbnN0IGNoYXIqIHN0ciwgc2l6ZV90IGxlbiwgY2hhciBjKSB7CiAgY29uc3QgY2hhciAqcywgKnQ7CiAgZm9yKHMgPSBzdHIsIHQgPSBzICsgbGVuOyBzIDwgdDsgKytzKQogICAgaWYoKnMgPT0gYykKICAgICAgYnJlYWs7CiAgcmV0dXJuIHMgLSBzdHI7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmJ5dGVfcmNocihjb25zdCB2b2lkKiBzdHIsIHNpemVfdCBsZW4sIGNoYXIgYykgewogIGNvbnN0IGNoYXIgKnMsICp0OwogIGZvcihzID0gKGNvbnN0IGNoYXIqKXN0ciwgdCA9IHMgKyBsZW47IC0tdCA+PSBzOykKICAgIGlmKCp0ID09IGMpCiAgICAgIHJldHVybiAoc2l6ZV90KSh0IC0gcyk7CiAgcmV0dXJuIGxlbjsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKYnl0ZV9jaHJzKGNvbnN0IGNoYXIqIHN0ciwgc2l6ZV90IGxlbiwgY29uc3QgY2hhciBuZWVkbGVbXSwgc2l6ZV90IG5sKSB7CiAgY29uc3QgY2hhciAqcywgKnQ7CiAgZm9yKHMgPSBzdHIsIHQgPSBzdHIgKyBsZW47IHMgIT0gdDsgcysrKQogICAgaWYoYnl0ZV9jaHIobmVlZGxlLCBubCwgKnMpIDwgbmwpCiAgICAgIGJyZWFrOwogIHJldHVybiBzIC0gKGNvbnN0IGNoYXIqKXN0cjsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKYnl0ZV9jaGFybGVuKGNvbnN0IGNoYXIqIGluLCBzaXplX3QgbGVuKSB7CiAgY29uc3QgdWludDhfdCAqcG9zLCAqZW5kLCAqbmV4dDsKICBpbnQgY3A7CiAgcG9zID0gKGNvbnN0IHVpbnQ4X3QqKWluOwogIGVuZCA9IHBvcyArIGxlbjsKICBjcCA9IHVuaWNvZGVfZnJvbV91dGY4KHBvcywgZW5kIC0gcG9zLCAmbmV4dCk7CiAgcmV0dXJuIG5leHQgLSBwb3M7Cn0KCmNoYXIqIGJ5dGVfZXNjYXBlKGNvbnN0IGNoYXIqLCBzaXplX3Qgbik7CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfY2hyKGNvbnN0IGNoYXIqIGluLCBjaGFyIG5lZWRsZSkgewogIGNvbnN0IGNoYXIqIHQgPSBpbjsKICBjb25zdCBjaGFyIGMgPSBuZWVkbGU7CiAgZm9yKDs7KSB7CiAgICBpZighKnQgfHwgKnQgPT0gYykgewogICAgICBicmVhazsKICAgIH07CiAgICArK3Q7CiAgfQogIHJldHVybiAoc2l6ZV90KSh0IC0gaW4pOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfY2hycyhjb25zdCBjaGFyKiBpbiwgY29uc3QgY2hhciBuZWVkbGVzW10sIHNpemVfdCBubikgewogIGNvbnN0IGNoYXIqIHQgPSBpbjsKICBzaXplX3QgaTsKICBmb3IoOzspIHsKICAgIGlmKCEqdCkKICAgICAgYnJlYWs7CiAgICBmb3IoaSA9IDA7IGkgPCBubjsgaSsrKQogICAgICBpZigqdCA9PSBuZWVkbGVzW2ldKQogICAgICAgIHJldHVybiAoc2l6ZV90KSh0IC0gaW4pOwogICAgKyt0OwogIH0KICByZXR1cm4gKHNpemVfdCkodCAtIGluKTsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX3JjaHIoY29uc3QgY2hhciogcywgY2hhciBuZWVkbGUpIHsKICBjb25zdCBjaGFyICppbiA9IHMsICpmb3VuZCA9IDA7CiAgZm9yKDs7KSB7CiAgICBpZighKmluKQogICAgICBicmVhazsKICAgIGlmKCppbiA9PSBuZWVkbGUpCiAgICAgIGZvdW5kID0gaW47CiAgICArK2luOwogIH0KICByZXR1cm4gKHNpemVfdCkoKGZvdW5kID8gZm91bmQgOiBpbikgLSBzKTsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX3JjaHJzKGNvbnN0IGNoYXIqIGluLCBjb25zdCBjaGFyIG5lZWRsZXNbXSwgc2l6ZV90IG5uKSB7CiAgY29uc3QgY2hhciAqcyA9IGluLCAqZm91bmQgPSAwOwogIHNpemVfdCBpOwogIGZvcig7OykgewogICAgaWYoISpzKQogICAgICBicmVhazsKICAgIGZvcihpID0gMDsgaSA8IG5uOyArK2kpIHsKICAgICAgaWYoKnMgPT0gbmVlZGxlc1tpXSkKICAgICAgICBmb3VuZCA9IHM7CiAgICB9CiAgICArK3M7CiAgfQogIHJldHVybiAoc2l6ZV90KSgoZm91bmQgPyBmb3VuZCA6IHMpIC0gaW4pOwp9CgpzdGF0aWMgaW5saW5lIGludApzdHJfZW5kYihjb25zdCBjaGFyKiBhLCBjb25zdCBjaGFyKiB4LCBzaXplX3QgbikgewogIHNpemVfdCBhbGVuID0gc3RybGVuKGEpOwogIGEgKz0gYWxlbiAtIG47CiAgcmV0dXJuIGFsZW4gPj0gbiAmJiAhbWVtY21wKGEsIHgsIG4pOwp9CgovKiBzdHJfZW5kcyByZXR1cm5zIDEgaWYgdGhlIGIgaXMgYSBzdWZmaXggb2YgYSwgMCBvdGhlcndpc2UgKi8Kc3RhdGljIGlubGluZSBpbnQKc3RyX2VuZHMoY29uc3QgY2hhciogYSwgY29uc3QgY2hhciogYikgewogIHJldHVybiBzdHJfZW5kYihhLCBiLCBzdHJsZW4oYikpOwp9CgojZGVmaW5lIHN0cl9jb250YWlucyhzLCBuZWVkbGUpICghIXN0cmNocigocyksIChuZWVkbGUpKSkKCmNoYXIqIHN0cl9lc2NhcGUoY29uc3QgY2hhciopOwoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX2NvdW50KGNvbnN0IGNoYXIqIHMsIGNoYXIgYykgewogIHNpemVfdCBpLCBjb3VudCA9IDA7CiAgZm9yKGkgPSAwOyBzW2ldOyBpKyspCiAgICBpZihzW2ldID09IGMpCiAgICAgICsrY291bnQ7CiAgcmV0dXJuIGNvdW50Owp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfY29weShjaGFyKiBvdXQsIGNvbnN0IGNoYXIqIGluKSB7CiAgY2hhciogczsKICBmb3IocyA9IG91dDsgKCpzID0gKmluKTsgKytzKSArK2luOwogIHJldHVybiAoc2l6ZV90KShzIC0gb3V0KTsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX2NvcHluKGNoYXIqIG91dCwgY29uc3QgY2hhciogaW4sIHNpemVfdCBuKSB7CiAgY2hhciogczsKICBmb3IocyA9IG91dDsgbi0tICYmICgqcyA9ICppbik7ICsrcykgKytpbjsKICAqcyA9ICdcMCc7CiAgcmV0dXJuIChzaXplX3QpKHMgLSBvdXQpOwp9CgpzdGF0aWMgaW5saW5lIGNoYXIqCnN0cl9uZHVwKGNvbnN0IGNoYXIqIHMsIHNpemVfdCBuKSB7CiAgY2hhciogciA9IG1hbGxvYyhuICsgMSk7CiAgaWYociA9PSBOVUxMKQogICAgcmV0dXJuIE5VTEw7CiAgbWVtY3B5KHIsIHMsIG4pOwogIHJbbl0gPSAnXDAnOwogIHJldHVybiByOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApwcmVkaWNhdGVfZmluZChjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4sIGludCAoKnByZWQpKGludDMyX3QpKSB7CiAgc2l6ZV90IHBvczsKICBmb3IocG9zID0gMDsgcG9zIDwgbGVuOyBwb3MrKykKICAgIGlmKHByZWQoc3RyW3Bvc10pKQogICAgICBicmVhazsKICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApsb29rdXBfZmluZChjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4sIGNvbnN0IGNoYXIgdGFibGVbMjU2XSkgewogIHNpemVfdCBwb3M7CiAgZm9yKHBvcyA9IDA7IHBvcyA8IGxlbjsgcG9zKyspCiAgICBpZih0YWJsZVsodW5zaWduZWQgY2hhcilzdHJbcG9zXV0pCiAgICAgIGJyZWFrOwogIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcgplc2NhcGVfY2hhcl9sZXR0ZXIoY2hhciBjKSB7CiAgc3dpdGNoKGMpIHsKICAgIGNhc2UgJ1wwJzogcmV0dXJuICcwJzsKICAgIGNhc2UgJ1xhJzogcmV0dXJuICdhJzsKICAgIGNhc2UgJ1xiJzogcmV0dXJuICdiJzsKICAgIGNhc2UgJ1x0JzogcmV0dXJuICd0JzsKICAgIGNhc2UgJ1xuJzogcmV0dXJuICduJzsKICAgIGNhc2UgJ1x2JzogcmV0dXJuICd2JzsKICAgIGNhc2UgJ1xmJzogcmV0dXJuICdmJzsKICAgIGNhc2UgJ1xyJzogcmV0dXJuICdyJzsKICAgIGNhc2UgJ1xcJzogcmV0dXJuICdcXCc7CiAgICBjYXNlICdcJyc6IHJldHVybiAnXCcnOwogIH0KICByZXR1cm4gMDsKfQoKc2l6ZV90IHRva2VuX2xlbmd0aChjb25zdCBjaGFyKiwgc2l6ZV90LCBjaGFyIGRlbGltKTsKCiNkZWZpbmUgRk1UX1VMT05HIDQwIC8qIGVub3VnaCBzcGFjZSB0byBob2xkIDJeMTI4IC0gMSBpbiBkZWNpbWFsLCBwbHVzIFwwICovCgpzaXplX3QgZm10X3Vsb25nKGNoYXIqLCB1bnNpZ25lZCBsb25nKTsKc2l6ZV90IHNjYW5fdXNob3J0KGNvbnN0IGNoYXIqLCB1bnNpZ25lZCBzaG9ydCopOwoKI2VuZGlmIC8qIGRlZmluZWQoQ0hBUl9VVElMU19IKSAqLwoAAAAAAAAAAJwdAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgMAAAAAAABSAwAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUgMAAAAAAABSAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "qjsm.c",
			"settings":
			{
				"buffer_size": 26903,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC1bQAAI2luY2x1ZGUgPHN0ZGxpYi5oPgojaW5jbHVkZSA8c3RkaW8uaD4KI2luY2x1ZGUgPHN0ZGFyZy5oPgojaW5jbHVkZSA8aW50dHlwZXMuaD4KI2luY2x1ZGUgPHN0cmluZy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDx1bmlzdGQuaD4KI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNsdWRlIDxmY250bC5oPgojaW5jbHVkZSA8ZGxmY24uaD4KI2luY2x1ZGUgPHRpbWUuaD4KI2luY2x1ZGUgPHNpZ25hbC5oPgojaW5jbHVkZSA8c3lzL3BvbGwuaD4KI2lmIGRlZmluZWQoX19BUFBMRV9fKQojaW5jbHVkZSA8bWFsbG9jL21hbGxvYy5oPgojZWxpZiBkZWZpbmVkKF9fbGludXhfXykKI2luY2x1ZGUgPG1hbGxvYy5oPgojZW5kaWYKCiNpZiAxIC8vIGRlZiBIQVZFX1FVSUNLSlNfQ09ORklHX0gKI2luY2x1ZGUgInF1aWNranMtY29uZmlnLmgiCiNlbmRpZgoKI2lmZGVmIFVTRV9XT1JLRVIKI2luY2x1ZGUgPHB0aHJlYWQuaD4KI2luY2x1ZGUgPHN0ZGF0b21pYy5oPgoKc3RhdGljIGludAphdG9taWNfYWRkX2ludChpbnQqIHB0ciwgaW50IHYpIHsKICByZXR1cm4gYXRvbWljX2ZldGNoX2FkZCgoX0F0b21pYyh1aW50MzJfdCkqKXB0ciwgdikgKyB2Owp9CiNlbmRpZgoKI2luY2x1ZGUgImxpc3QuaCIKI2luY2x1ZGUgImN1dGlscy5oIgojaW5jbHVkZSAidXRpbHMuaCIKI2luY2x1ZGUgInZlY3Rvci5oIgojaW5jbHVkZSAicXVpY2tqcy1saWJjLmgiCiNpbmNsdWRlICJxdWlja2pzLWludGVybmFsLmgiCiNpbmNsdWRlICJidWZmZXItdXRpbHMuaCIKCnR5cGVkZWYgc3RydWN0IHBvbGxoYW5kbGVyIHsKICBzdHJ1Y3QgcG9sbGZkIHBmOwogIHZvaWQgKCpoYW5kbGVyKSh2b2lkKiBvcGFxdWUsIHN0cnVjdCBwb2xsZmQqKTsKICB2b2lkKiBvcGFxdWU7CiAgc3RydWN0IGxpc3RfaGVhZCBsaW5rOwp9IHBvbGxoYW5kbGVyX3Q7Cgp0aHJlYWRfbG9jYWwgdWludDY0X3QganNtX3BlbmRpbmdfc2lnbmFscyA9IDA7CnN0cnVjdCBsaXN0X2hlYWQgcG9sbGhhbmRsZXJzOwoKdm9pZCBqc19zdGRfc2V0X21vZHVsZV9sb2FkZXJfZnVuYyhKU01vZHVsZUxvYWRlckZ1bmMqIGZ1bmMpOwoKI2lmZGVmIEhBVkVfTUFMTE9DX1VTQUJMRV9TSVpFCiNpZm5kZWYgSEFWRV9NQUxMT0NfVVNBQkxFX1NJWkVfREVGSU5JVElPTgpleHRlcm4gc2l6ZV90IG1hbGxvY191c2FibGVfc2l6ZSgpOwojZW5kaWYKI2VuZGlmCgojZGVmaW5lIHRyaW1fZG90c2xhc2goc3RyKSAoIXN0cm5jbXAoKHN0ciksICIuLyIsIDIpID8gKHN0cikgKyAyIDogKHN0cikpCgojZGVmaW5lIGpzbV9kZWNsYXJlX21vZHVsZShuYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIGV4dGVybiBjb25zdCB1aW50OF90IHFqc2NfIyNuYW1lW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIGV4dGVybiBjb25zdCB1aW50MzJfdCBxanNjXyMjbmFtZSMjX3NpemU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIEpTTW9kdWxlRGVmKiBqc19pbml0X21vZHVsZV8jI25hbWUoSlNDb250ZXh0KiwgY29uc3QgY2hhciopOwoKanNtX2RlY2xhcmVfbW9kdWxlKGNvbnNvbGUpOwpqc21fZGVjbGFyZV9tb2R1bGUoZXZlbnRzKTsKanNtX2RlY2xhcmVfbW9kdWxlKGZzKTsKanNtX2RlY2xhcmVfbW9kdWxlKHBlcmZfaG9va3MpOwpqc21fZGVjbGFyZV9tb2R1bGUocHJvY2Vzcyk7CmpzbV9kZWNsYXJlX21vZHVsZShyZXBsKTsKanNtX2RlY2xhcmVfbW9kdWxlKHJlcXVpcmUpOwpqc21fZGVjbGFyZV9tb2R1bGUodHR5KTsKanNtX2RlY2xhcmVfbW9kdWxlKHV0aWwpOwoKI2lmZGVmIENPTkZJR19CSUdOVU0KanNtX2RlY2xhcmVfbW9kdWxlKHFqc2NhbGMpOwpzdGF0aWMgaW50IGJpZ251bV9leHQgPSAxOwojZW5kaWYKCnZvaWQganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyhKU0NvbnRleHQqICgqZnVuYykoSlNSdW50aW1lKiBydCkpOwp2b2lkIGpzX3N0ZF9kdW1wX2Vycm9yKEpTQ29udGV4dCogY3R4KTsKCnN0YXRpYyBCT09MIGRlYnVnX21vZHVsZV9sb2FkZXIgPSBGQUxTRTsKc3RhdGljIFZlY3RvciBtb2R1bGVfZGVidWcgPSBWRUNUT1JfSU5JVCgpOwpzdGF0aWMgVmVjdG9yIG1vZHVsZV9saXN0ID0gVkVDVE9SX0lOSVQoKTsKc3RhdGljIFZlY3RvciBidWlsdGlucyA9IFZFQ1RPUl9JTklUKCk7CgpKU1ZhbHVlIHBhY2thZ2VfanNvbjsKCnN0YXRpYyBKU1ZhbHVlCmpzbV9sb2FkX3BhY2thZ2UoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGZpbGUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChwYWNrYWdlX2pzb24pKSB7CiAgICB1aW50OF90KiBidWY7CiAgICBzaXplX3QgbGVuOwogICAgaWYoZmlsZSA9PSAwKQogICAgICBmaWxlID0gInBhY2thZ2UuanNvbiI7CiAgICBpZighKGJ1ZiA9IGpzX2xvYWRfZmlsZShjdHgsICZsZW4sIGZpbGUpKSkKICAgICAgcGFja2FnZV9qc29uID0gSlNfTlVMTDsKICAgIGVsc2UKICAgICAgcGFja2FnZV9qc29uID0gSlNfUGFyc2VKU09OKGN0eCwgYnVmLCBsZW4sIGZpbGUpOwogIH0KICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBwYWNrYWdlX2pzb24pOwp9CgpKU01vZHVsZURlZioKanNtX21vZHVsZV9sb2FkZXIoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUsIHZvaWQqIG9wYXF1ZSkgewogIGNoYXIgKm1vZHVsZSwgKmZpbGUgPSAwOwogIEpTTW9kdWxlRGVmKiByZXQgPSAwOwogIG1vZHVsZSA9IGpzX3N0cmR1cChjdHgsIHRyaW1fZG90c2xhc2gobmFtZSkpOwogIGZvcig7OykgewogICAgaWYoIXN0cmNocihtb2R1bGUsICcvJykgJiYgKHJldCA9IGpzX21vZHVsZV9maW5kKGN0eCwgbW9kdWxlKSkpIHsKICAgICAgZ290byBlbmQ7CiAgICB9CiAgICBpZihkZWJ1Z19tb2R1bGVfbG9hZGVyKSB7CiAgICAgIGlmKGZpbGUpCiAgICAgICAgcHJpbnRmKCJqc21fbW9kdWxlX2xvYWRlclsleF0gXHgxYls0ODs1OzIyMG0oMilceDFiWzBtICUtMjBzICclcydcbiIsCiAgICAgICAgICAgICAgIHB0aHJlYWRfc2VsZigpLAogICAgICAgICAgICAgICB0cmltX2RvdHNsYXNoKG5hbWUpLAogICAgICAgICAgICAgICBmaWxlKTsKICAgICAgLyogIGVsc2UgIHByaW50ZigianNtX21vZHVsZV9sb2FkZXJbJXhdIFx4MWJbNDg7NTsxMjRtKDEpXHgxYlswbSAlLTIwcyAtPgogICAgICAgKiAlc1xuIiwgcHRocmVhZF9zZWxmKCksIHRyaW1fZG90c2xhc2gobmFtZSksIHRyaW1fZG90c2xhc2gobW9kdWxlKSk7Ki8KICAgIH0KICAgIGlmKCFoYXNfc3VmZml4KG5hbWUsICIuc28iKSAmJiAhZmlsZSkgewogICAgICBKU1ZhbHVlIHBhY2thZ2UgPSBqc21fbG9hZF9wYWNrYWdlKGN0eCwgMCk7CiAgICAgIGlmKCFKU19Jc051bGwocGFja2FnZSkpIHsKICAgICAgICBKU1ZhbHVlIGFsaWFzZXMgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHBhY2thZ2UsICJfbW9kdWxlQWxpYXNlcyIpOwogICAgICAgIEpTVmFsdWUgdGFyZ2V0ID0gSlNfVU5ERUZJTkVEOwogICAgICAgIGlmKCFKU19Jc1VuZGVmaW5lZChhbGlhc2VzKSkgewogICAgICAgICAgdGFyZ2V0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBhbGlhc2VzLCBtb2R1bGUpOwogICAgICAgIH0KICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBhbGlhc2VzKTsKICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBwYWNrYWdlKTsKICAgICAgICBpZighSlNfSXNVbmRlZmluZWQodGFyZ2V0KSkgewogICAgICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgdGFyZ2V0KTsKICAgICAgICAgIGlmKHN0cikgewogICAgICAgICAgICBqc19mcmVlKGN0eCwgbW9kdWxlKTsKICAgICAgICAgICAgbW9kdWxlID0ganNfc3RyZHVwKGN0eCwgc3RyKTsKICAgICAgICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmKCFmaWxlKSB7CiAgICAgIGlmKHN0cmNocigiLi8iLCBtb2R1bGVbMF0pKQogICAgICAgIGZpbGUgPSBqc19zdHJkdXAoY3R4LCBtb2R1bGUpOwogICAgICBlbHNlIGlmKCEoZmlsZSA9IGpzX21vZHVsZV9zZWFyY2goY3R4LCBtb2R1bGUpKSkKICAgICAgICBicmVhazsKICAgICAgY29udGludWU7CiAgICB9CiAgICBicmVhazsKICB9CiAgaWYoZmlsZSkgewogICAgaWYoZGVidWdfbW9kdWxlX2xvYWRlcikKICAgICAgaWYoc3RyY21wKHRyaW1fZG90c2xhc2gobmFtZSksIHRyaW1fZG90c2xhc2goZmlsZSkpKQogICAgICAgIHByaW50ZigianNtX21vZHVsZV9sb2FkZXJbJXhdIFx4MWJbNDg7NTsyOG0oMylceDFiWzBtICUtMjBzIC0+ICVzXG4iLAogICAgICAgICAgICAgICBwdGhyZWFkX3NlbGYoKSwKICAgICAgICAgICAgICAgbW9kdWxlLAogICAgICAgICAgICAgICBmaWxlKTsKICAgIHJldCA9IGhhc19zdWZmaXgoZmlsZSwgIi5zbyIpID8ganNfbW9kdWxlX2xvYWRlcl9zbyhjdHgsIGZpbGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGpzX21vZHVsZV9sb2FkZXIoY3R4LCBmaWxlLCBvcGFxdWUpOwogIH0KZW5kOgogIGlmKHZlY3Rvcl9maW5kcygmbW9kdWxlX2RlYnVnLCAiaW1wb3J0IikgIT0gLTEpIHsKICAgIGZwcmludGYoc3RkZXJyLAogICAgICAgICAgICAoIWZpbGUgfHwgc3RyY21wKG1vZHVsZSwgZmlsZSkpID8gIiEhISBJTVBPUlQgJXMgLT4gJXNcbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICIhISEgSU1QT1JUICVzXG4iLAogICAgICAgICAgICBtb2R1bGUsCiAgICAgICAgICAgIGZpbGUpOwogIH0KICBpZighcmV0KQogICAgcHJpbnRmKCJqc21fbW9kdWxlX2xvYWRlcihcIiVzXCIpID0gJXBcbiIsIG5hbWUsIHJldCk7CiAgaWYobW9kdWxlKQogICAganNfZnJlZShjdHgsIG1vZHVsZSk7CiAgaWYoZmlsZSkKICAgIGpzX2ZyZWUoY3R4LCBmaWxlKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNWYWx1ZQpqc21fZXZhbF9maWxlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBmaWxlLCBpbnQgbW9kdWxlKSB7CiAgdWludDhfdCogYnVmOwogIHNpemVfdCBsZW47CiAgaW50IGZsYWdzOwogIGlmKCEoYnVmID0ganNfbG9hZF9maWxlKGN0eCwgJmxlbiwgZmlsZSkpKSB7CiAgICBmcHJpbnRmKHN0ZGVyciwgIkZhaWxlZCBsb2FkaW5nICclcyc6ICVzXG4iLCBmaWxlLCBzdHJlcnJvcihlcnJubykpOwogICAgcmV0dXJuIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJGYWlsZWQgbG9hZGluZyAnJXMnOiAlcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVycm9yKGVycm5vKSk7CiAgfQogIGlmKG1vZHVsZSA8IDApCiAgICBtb2R1bGUgPQogICAgICAgIChoYXNfc3VmZml4KGZpbGUsICIubWpzIikgfHwgSlNfRGV0ZWN0TW9kdWxlKChjb25zdCBjaGFyKilidWYsIGxlbikpOwogIGZsYWdzID0gbW9kdWxlID8gSlNfRVZBTF9UWVBFX01PRFVMRSA6IEpTX0VWQUxfVFlQRV9HTE9CQUw7CiAgcmV0dXJuIGpzX2V2YWxfYnVmKGN0eCwgYnVmLCBsZW4sIGZpbGUsIGZsYWdzKTsKfQoKc3RhdGljIGludApqc21fbG9hZF9zY3JpcHQoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGZpbGUsIEJPT0wgbW9kdWxlKSB7CiAgSlNWYWx1ZSB2YWw7CiAgaW50MzJfdCByZXQgPSAwOwogIHZhbCA9IGpzbV9ldmFsX2ZpbGUoY3R4LCBmaWxlLCBtb2R1bGUpOwogIGlmKEpTX0lzRXhjZXB0aW9uKHZhbCkpIHsKICAgIGpzX3ZhbHVlX2Z3cml0ZShjdHgsIHZhbCwgc3RkZXJyKTsKICAgIHJldHVybiAtMTsKICB9CiAgaWYoSlNfSXNOdW1iZXIodmFsKSkKICAgIEpTX1RvSW50MzIoY3R4LCAmcmV0LCB2YWwpOwogIGlmKEpTX1ZBTFVFX0dFVF9UQUcodmFsKSAhPSBKU19UQUdfTU9EVUxFICYmCiAgICAgSlNfVkFMVUVfR0VUX1RBRyh2YWwpICE9IEpTX1RBR19FWENFUFRJT04pCiAgICBKU19GcmVlVmFsdWUoY3R4LCB2YWwpOwogIHJldHVybiByZXQ7Cn0KCi8qIGFsc28gdXNlZCB0byBpbml0aWFsaXplIHRoZSB3b3JrZXIgY29udGV4dCAqLwpzdGF0aWMgSlNDb250ZXh0Kgpqc21fY29udGV4dF9uZXcoSlNSdW50aW1lKiBydCkgewogIEpTQ29udGV4dCogY3R4OwogIGN0eCA9IEpTX05ld0NvbnRleHQocnQpOwogIGlmKCFjdHgpCiAgICByZXR1cm4gMDsKI2lmZGVmIENPTkZJR19CSUdOVU0KICBpZihiaWdudW1fZXh0KSB7CiAgICBKU19BZGRJbnRyaW5zaWNCaWdGbG9hdChjdHgpOwogICAgSlNfQWRkSW50cmluc2ljQmlnRGVjaW1hbChjdHgpOwogICAgSlNfQWRkSW50cmluc2ljT3BlcmF0b3JzKGN0eCk7CiAgICBKU19FbmFibGVCaWdudW1FeHQoY3R4LCBUUlVFKTsKICB9CiNlbmRpZgoKI2RlZmluZSBqc21fbW9kdWxlX25hdGl2ZShuYW1lKSBqc19pbml0X21vZHVsZV8jI25hbWUoY3R4LCAjbmFtZSk7CgogIGpzbV9tb2R1bGVfbmF0aXZlKHN0ZCk7CiAganNtX21vZHVsZV9uYXRpdmUob3MpOwogIGpzbV9tb2R1bGVfbmF0aXZlKGNoaWxkX3Byb2Nlc3MpOwogIGpzbV9tb2R1bGVfbmF0aXZlKGRlZXApOwogIGpzbV9tb2R1bGVfbmF0aXZlKGluc3BlY3QpOwogIGpzbV9tb2R1bGVfbmF0aXZlKGxleGVyKTsKICBqc21fbW9kdWxlX25hdGl2ZShtaXNjKTsKICBqc21fbW9kdWxlX25hdGl2ZShtbWFwKTsKICBqc21fbW9kdWxlX25hdGl2ZShwYXRoKTsKICBqc21fbW9kdWxlX25hdGl2ZShwb2ludGVyKTsKICBqc21fbW9kdWxlX25hdGl2ZShwcmVkaWNhdGUpOwogIGpzbV9tb2R1bGVfbmF0aXZlKHJlcGVhdGVyKTsKICBqc21fbW9kdWxlX25hdGl2ZSh0cmVlX3dhbGtlcik7CiAganNtX21vZHVsZV9uYXRpdmUoeG1sKTsKICByZXR1cm4gY3R4Owp9CgojaWYgZGVmaW5lZChfX0FQUExFX18pCiNkZWZpbmUgTUFMTE9DX09WRVJIRUFEIDAKI2Vsc2UKI2RlZmluZSBNQUxMT0NfT1ZFUkhFQUQgOAojZW5kaWYKCnN0cnVjdCB0cmFjZV9tYWxsb2NfZGF0YSB7CiAgdWludDhfdCogYmFzZTsKfTsKCnN0YXRpYyB2b2lkCmR1bXBfdmVjdG9yKGNvbnN0IFZlY3RvciogdmVjLCBzaXplX3Qgc3RhcnQpIHsKICBzaXplX3QgaSwgbGVuID0gdmVjdG9yX3NpemUodmVjLCBzaXplb2YoY2hhciopKTsKICBmb3IoaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHsKICAgIGNvbnN0IGNoYXIqIHN0ciA9ICooY2hhcioqKXZlY3Rvcl9hdCh2ZWMsIHNpemVvZihjaGFyKiksIGkpOwogICAgZnB1dHMoaSA+IHN0YXJ0ID8gIicsXG4gICciIDogIltcbiAgJyIsIHN0ZG91dCk7CiAgICBmcHV0cyhzdHIsIHN0ZG91dCk7CiAgICBpZihpICsgMSA9PSBsZW4pCiAgICAgIHB1dHMoIidcbl0iKTsKICB9Cn0KCnN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBsb25nCmpzbV90cmFjZV9tYWxsb2NfcHRyX29mZnNldCh1aW50OF90KiBwdHIsIHN0cnVjdCB0cmFjZV9tYWxsb2NfZGF0YSogZHApIHsKICByZXR1cm4gcHRyIC0gZHAtPmJhc2U7Cn0KCi8qIGRlZmF1bHQgbWVtb3J5IGFsbG9jYXRpb24gZnVuY3Rpb25zIHdpdGggbWVtb3J5IGxpbWl0YXRpb24gKi8Kc3RhdGljIGlubGluZSBzaXplX3QKanNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZSh2b2lkKiBwdHIpIHsKI2lmIGRlZmluZWQoX19BUFBMRV9fKQogIHJldHVybiBtYWxsb2Nfc2l6ZShwdHIpOwojZWxpZiBkZWZpbmVkKF9XSU4zMikKICByZXR1cm4gX21zaXplKHB0cik7CiNlbGlmIGRlZmluZWQoRU1TQ1JJUFRFTikgfHwgZGVmaW5lZChfX2RpZXRsaWJjX18pIHx8IGRlZmluZWQoX19NU1lTX18pIHx8ICAgICBcCiAgICBkZWZpbmVkKERPTlRfSEFWRV9NQUxMT0NfVVNBQkxFX1NJWkUpCiAgcmV0dXJuIDA7CiNlbGlmIGRlZmluZWQoX19saW51eF9fKSB8fCBkZWZpbmVkKEhBVkVfTUFMTE9DX1VTQUJMRV9TSVpFKQogIHJldHVybiBtYWxsb2NfdXNhYmxlX3NpemUocHRyKTsKI2Vsc2UKICAvKiBjaGFuZ2UgdGhpcyB0byBgcmV0dXJuIDA7YCBpZiBjb21waWxhdGlvbiBmYWlscyAqLwogIHJldHVybiBtYWxsb2NfdXNhYmxlX3NpemUocHRyKTsKI2VuZGlmCn0KCnN0YXRpYyB2b2lkCiNpZmRlZiBfV0lOMzIKICAgIC8qIG1pbmd3IHByaW50ZiBpcyB1c2VkICovCiAgICBfX2F0dHJpYnV0ZV9fKChmb3JtYXQoZ251X3ByaW50ZiwgMiwgMykpKQojZWxzZQogICAgX19hdHRyaWJ1dGVfXygoZm9ybWF0KHByaW50ZiwgMiwgMykpKQojZW5kaWYKICAgIGpzbV90cmFjZV9tYWxsb2NfcHJpbnRmKEpTTWFsbG9jU3RhdGUqIHMsIGNvbnN0IGNoYXIqIGZtdCwgLi4uKSB7CiAgdmFfbGlzdCBhcDsKICBpbnQgYzsKCiAgdmFfc3RhcnQoYXAsIGZtdCk7CiAgd2hpbGUoKGMgPSAqZm10KyspICE9ICdcMCcpIHsKICAgIGlmKGMgPT0gJyUnKSB7CiAgICAgIC8qIG9ubHkgaGFuZGxlICVwIGFuZCAlemQgKi8KICAgICAgaWYoKmZtdCA9PSAncCcpIHsKICAgICAgICB1aW50OF90KiBwdHIgPSB2YV9hcmcoYXAsIHZvaWQqKTsKICAgICAgICBpZihwdHIgPT0gMCkgewogICAgICAgICAgcHJpbnRmKCIwIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHByaW50ZigiSCUrMDZsbGQuJXpkIiwKICAgICAgICAgICAgICAgICBqc21fdHJhY2VfbWFsbG9jX3B0cl9vZmZzZXQocHRyLCBzLT5vcGFxdWUpLAogICAgICAgICAgICAgICAgIGpzbV90cmFjZV9tYWxsb2NfdXNhYmxlX3NpemUocHRyKSk7CiAgICAgICAgfQogICAgICAgIGZtdCsrOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmKGZtdFswXSA9PSAneicgJiYgZm10WzFdID09ICdkJykgewogICAgICAgIHNpemVfdCBzeiA9IHZhX2FyZyhhcCwgc2l6ZV90KTsKICAgICAgICBwcmludGYoIiV6ZCIsIHN6KTsKICAgICAgICBmbXQgKz0gMjsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogICAgcHV0YyhjLCBzdGRvdXQpOwogIH0KICB2YV9lbmQoYXApOwp9CgpzdGF0aWMgdm9pZApqc21fdHJhY2VfbWFsbG9jX2luaXQoc3RydWN0IHRyYWNlX21hbGxvY19kYXRhKiBzKSB7CiAgZnJlZShzLT5iYXNlID0gbWFsbG9jKDgpKTsKfQoKc3RhdGljIHZvaWQqCmpzbV90cmFjZV9tYWxsb2MoSlNNYWxsb2NTdGF0ZSogcywgc2l6ZV90IHNpemUpIHsKICB2b2lkKiBwdHI7CgogIC8qIERvIG5vdCBhbGxvY2F0ZSB6ZXJvIGJ5dGVzOiBiZWhhdmlvciBpcyBwbGF0Zm9ybSBkZXBlbmRlbnQgKi8KICBhc3NlcnQoc2l6ZSAhPSAwKTsKCiAgaWYodW5saWtlbHkocy0+bWFsbG9jX3NpemUgKyBzaXplID4gcy0+bWFsbG9jX2xpbWl0KSkKICAgIHJldHVybiAwOwogIHB0ciA9IG1hbGxvYyhzaXplKTsKICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiQSAlemQgLT4gJXBcbiIsIHNpemUsIHB0cik7CiAgaWYocHRyKSB7CiAgICBzLT5tYWxsb2NfY291bnQrKzsKICAgIHMtPm1hbGxvY19zaXplICs9IGpzbV90cmFjZV9tYWxsb2NfdXNhYmxlX3NpemUocHRyKSArIE1BTExPQ19PVkVSSEVBRDsKICB9CiAgcmV0dXJuIHB0cjsKfQoKc3RhdGljIHZvaWQKanNtX3RyYWNlX2ZyZWUoSlNNYWxsb2NTdGF0ZSogcywgdm9pZCogcHRyKSB7CiAgaWYoIXB0cikKICAgIHJldHVybjsKCiAganNtX3RyYWNlX21hbGxvY19wcmludGYocywgIkYgJXBcbiIsIHB0cik7CiAgcy0+bWFsbG9jX2NvdW50LS07CiAgcy0+bWFsbG9jX3NpemUgLT0ganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZShwdHIpICsgTUFMTE9DX09WRVJIRUFEOwogIGZyZWUocHRyKTsKfQoKc3RhdGljIHZvaWQqCmpzbV90cmFjZV9yZWFsbG9jKEpTTWFsbG9jU3RhdGUqIHMsIHZvaWQqIHB0ciwgc2l6ZV90IHNpemUpIHsKICBzaXplX3Qgb2xkX3NpemU7CgogIGlmKCFwdHIpIHsKICAgIGlmKHNpemUgPT0gMCkKICAgICAgcmV0dXJuIDA7CiAgICByZXR1cm4ganNtX3RyYWNlX21hbGxvYyhzLCBzaXplKTsKICB9CiAgb2xkX3NpemUgPSBqc21fdHJhY2VfbWFsbG9jX3VzYWJsZV9zaXplKHB0cik7CiAgaWYoc2l6ZSA9PSAwKSB7CiAgICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiUiAlemQgJXBcbiIsIHNpemUsIHB0cik7CiAgICBzLT5tYWxsb2NfY291bnQtLTsKICAgIHMtPm1hbGxvY19zaXplIC09IG9sZF9zaXplICsgTUFMTE9DX09WRVJIRUFEOwogICAgZnJlZShwdHIpOwogICAgcmV0dXJuIDA7CiAgfQogIGlmKHMtPm1hbGxvY19zaXplICsgc2l6ZSAtIG9sZF9zaXplID4gcy0+bWFsbG9jX2xpbWl0KQogICAgcmV0dXJuIDA7CgogIGpzbV90cmFjZV9tYWxsb2NfcHJpbnRmKHMsICJSICV6ZCAlcCIsIHNpemUsIHB0cik7CgogIHB0ciA9IHJlYWxsb2MocHRyLCBzaXplKTsKICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiIC0+ICVwXG4iLCBwdHIpOwogIGlmKHB0cikgewogICAgcy0+bWFsbG9jX3NpemUgKz0ganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZShwdHIpIC0gb2xkX3NpemU7CiAgfQogIHJldHVybiBwdHI7Cn0KCnN0YXRpYyBjb25zdCBKU01hbGxvY0Z1bmN0aW9ucyB0cmFjZV9tZiA9IHsKICAgIGpzbV90cmFjZV9tYWxsb2MsCiAgICBqc21fdHJhY2VfZnJlZSwKICAgIGpzbV90cmFjZV9yZWFsbG9jLAojaWYgZGVmaW5lZChfX0FQUExFX18pCiAgICBtYWxsb2Nfc2l6ZSwKI2VsaWYgZGVmaW5lZChfV0lOMzIpCiAgICAoc2l6ZV90KCopKGNvbnN0IHZvaWQqKSlfbXNpemUsCiNlbGlmIGRlZmluZWQoRU1TQ1JJUFRFTikgfHwgZGVmaW5lZChfX2RpZXRsaWJjX18pIHx8IGRlZmluZWQoX19NU1lTX18pIHx8ICAgICBcCiAgICBkZWZpbmVkKERPTlRfSEFWRV9NQUxMT0NfVVNBQkxFX1NJWkVfREVGSU5JVElPTikKICAgIDAsCiNlbGlmIGRlZmluZWQoX19saW51eF9fKSB8fCBkZWZpbmVkKEhBVkVfTUFMTE9DX1VTQUJMRV9TSVpFKQogICAgKHNpemVfdCgqKShjb25zdCB2b2lkKikpbWFsbG9jX3VzYWJsZV9zaXplLAojZWxzZQogICAgLyogY2hhbmdlIHRoaXMgdG8gYDAsYCBpZiBjb21waWxhdGlvbiBmYWlscyAqLwogICAgbWFsbG9jX3VzYWJsZV9zaXplLAojZW5kaWYKfTsKCiNkZWZpbmUgUFJPR19OQU1FICJxanNtIgoKdm9pZApqc21faGVscCh2b2lkKSB7CiAgcHJpbnRmKAogICAgICAiUXVpY2tKUyB2ZXJzaW9uICIgQ09ORklHX1ZFUlNJT04gIlxuIgogICAgICAidXNhZ2U6ICIgUFJPR19OQU1FICIgW29wdGlvbnNdIFtmaWxlIFthcmdzXV1cbiIKICAgICAgIi1oICAtLWhlbHAgICAgICAgICBsaXN0IG9wdGlvbnNcbiIKICAgICAgIi1lICAtLWV2YWwgRVhQUiAgICBldmFsdWF0ZSBFWFBSXG4iCiAgICAgICItaSAgLS1pbnRlcmFjdGl2ZSAgZ28gdG8gaW50ZXJhY3RpdmUgbW9kZVxuIgogICAgICAiLW0gIC0tbW9kdWxlIE5BTUUgIGxvYWQgYW4gRVM2IG1vZHVsZVxuIgogICAgICAiLUkgIC0taW5jbHVkZSBmaWxlIGluY2x1ZGUgYW4gYWRkaXRpb25hbCBmaWxlXG4iCiAgICAgICIgICAgLS1zdGQgICAgICAgICAgbWFrZSAnc3RkJyBhbmQgJ29zJyBhdmFpbGFibGUgdG8gdGhlIGxvYWRlZCBzY3JpcHRcbiIKI2lmZGVmIENPTkZJR19CSUdOVU0KICAgICAgIiAgICAtLW5vLWJpZ251bSAgICBkaXNhYmxlIHRoZSBiaWdudW0gZXh0ZW5zaW9ucyAoQmlnRmxvYXQsICIKICAgICAgIkJpZ0RlY2ltYWwpXG4iCiAgICAgICIgICAgLS1xanNjYWxjICAgICAgbG9hZCB0aGUgUUpTQ2FsYyBydW50aW1lIChkZWZhdWx0IGlmIGludm9rZWQgYXMgIgogICAgICAicWpzY2FsYylcbiIKI2VuZGlmCiAgICAgICItVCAgLS10cmFjZSAgICAgICAgdHJhY2UgbWVtb3J5IGFsbG9jYXRpb25cbiIKICAgICAgIi1kICAtLWR1bXAgICAgICAgICBkdW1wIHRoZSBtZW1vcnkgdXNhZ2Ugc3RhdHNcbiIKICAgICAgIiAgICAtLW1lbW9yeS1saW1pdCBuICAgICAgIGxpbWl0IHRoZSBtZW1vcnkgdXNhZ2UgdG8gJ24nIGJ5dGVzXG4iCiAgICAgICIgICAgLS1zdGFjay1zaXplIG4gICAgICAgICBsaW1pdCB0aGUgc3RhY2sgc2l6ZSB0byAnbicgYnl0ZXNcbiIKICAgICAgIiAgICAtLXVuaGFuZGxlZC1yZWplY3Rpb24gIGR1bXAgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uc1xuIgogICAgICAiLXEgIC0tcXVpdCAgICAgICAgIGp1c3QgaW5zdGFudGlhdGUgdGhlIGludGVycHJldGVyIGFuZCBxdWl0XG4iKTsKICBleGl0KDEpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc21fZXZhbF9zY3JpcHQoSlNDb250ZXh0KiBjdHgsCiAgICAgICAgICAgICAgICBKU1ZhbHVlQ29uc3QgdGhpc192YWwsCiAgICAgICAgICAgICAgICBpbnQgYXJnYywKICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCBhcmd2W10sCiAgICAgICAgICAgICAgICBpbnQgbWFnaWMpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgc2l6ZV90IGxlbjsKICBKU1ZhbHVlIHJldDsKICBpbnQzMl90IG1vZHVsZTsKICBzdHIgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCAmbGVuLCBhcmd2WzBdKTsKICBpZihhcmdjID4gMSkKICAgIEpTX1RvSW50MzIoY3R4LCAmbW9kdWxlLCBhcmd2WzFdKTsKICBlbHNlCiAgICBtb2R1bGUgPSBzdHJfZW5kcyhzdHIsICIubWpzIik7CiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIDA6IHsKICAgICAgcmV0ID0ganNtX2V2YWxfZmlsZShjdHgsIHN0ciwgbW9kdWxlKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIDE6IHsKICAgICAgcmV0ID0ganNfZXZhbF9idWYoY3R4LCBzdHIsIGxlbiwgIjxpbnB1dD4iLCBtb2R1bGUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgaWYoSlNfSXNFeGNlcHRpb24ocmV0KSkgewogICAgaWYoSlNfSXNOdWxsKEpTX0dldFJ1bnRpbWUoY3R4KS0+Y3VycmVudF9leGNlcHRpb24pKSB7CiAgICAgIEpTX0dldEV4Y2VwdGlvbihjdHgpOwogICAgICByZXQgPSBKU19VTkRFRklORUQ7CiAgICB9CiAgfQogIGlmKEpTX1ZBTFVFX0dFVF9UQUcocmV0KSA9PSBKU19UQUdfTU9EVUxFKSB7CiAgICBKU01vZHVsZURlZiogZGVmID0gSlNfVkFMVUVfR0VUX1BUUihyZXQpOwogICAgSlNWYWx1ZSBvYmogPSBKU19OZXdPYmplY3QoY3R4KTsKICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAibmFtZSIsIG1vZHVsZV9uYW1lKGN0eCwgZGVmKSk7CiAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgImV4cG9ydHMiLCBtb2R1bGVfZXhwb3J0cyhjdHgsIGRlZikpOwogICAgcmV0ID0gb2JqOwogIH0KICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CiAgcmV0dXJuIHJldDsKfQoKZW51bSB7CiAgRklORF9NT0RVTEUsCiAgTE9BRF9NT0RVTEUsCiAgUkVTT0xWRV9NT0RVTEUsCiAgR0VUX01PRFVMRV9OQU1FLAogIEdFVF9NT0RVTEVfT0JKRUNULAogIEdFVF9NT0RVTEVfRVhQT1JUUywKICBHRVRfTU9EVUxFX05BTUVTUEFDRSwKICBHRVRfTU9EVUxFX0ZVTkNUSU9OLAogIEdFVF9NT0RVTEVfRVhDRVBUSU9OLAogIEdFVF9NT0RVTEVfTUVUQV9PQkoKfTsKCnN0YXRpYyBKU1ZhbHVlCmpzbV9tb2R1bGVfZnVuYyhKU0NvbnRleHQqIGN0eCwKICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwKICAgICAgICAgICAgICAgIGludCBhcmdjLAogICAgICAgICAgICAgICAgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwKICAgICAgICAgICAgICAgIGludCBtYWdpYykgewogIEpTVmFsdWUgdmFsID0gSlNfRVhDRVBUSU9OOwogIEpTTW9kdWxlRGVmKiBkZWYgPSAwOwogIGNvbnN0IGNoYXIqIG5hbWUgPSAwOwoKICBpZihtYWdpYyA+PSBHRVRfTU9EVUxFX05BTUUpIHsKICAgIGlmKCEoZGVmID0ganNfbW9kdWxlX2RlZihjdHgsIGFyZ3ZbMF0pKSkKICAgICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDEgZXhwZWN0aW5nIG1vZHVsZSIpOwogIH0gZWxzZSB7CiAgICBuYW1lID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlswXSk7CiAgfQoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgRklORF9NT0RVTEU6IHsKICAgICAgZGVmID0ganNfbW9kdWxlX2ZpbmQoY3R4LCBuYW1lKTsKICAgICAgdmFsID0gSlNfRHVwVmFsdWUoY3R4LCBKU19NS1BUUihKU19UQUdfTU9EVUxFLCBkZWYpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIExPQURfTU9EVUxFOiB7CiAgICAgIEltcG9ydERpcmVjdGl2ZSBpbXA7CiAgICAgIG1lbXNldCgmaW1wLCAwLCBzaXplb2YoaW1wKSk7CiAgICAgIGludCByLCBuID0gY291bnRvZihpbXAuYXJncyk7CiAgICAgIHIgPSBqc19zdHJ2X2NvcHlzKGN0eCwgYXJnYywgYXJndiwgbiwgaW1wLmFyZ3MpOwogICAgICBwcmludGYoIkxPQURfTU9EVUxFIHI9JWkgYXJnYz0laVxuIiwgciwgYXJnYyk7CgogICAgICBKU1ZhbHVlIHZhbCA9IGpzX2ltcG9ydF9ldmFsKGN0eCwgaW1wKTsKCiAgICAgIGlmKChkZWYgPSBqc19tb2R1bGVfZmluZChjdHgsIGltcC5wYXRoKSkpCiAgICAgICAgdmFsID0gSlNfTUtQVFIoSlNfVEFHX01PRFVMRSwgZGVmKTsKCiAgICAgIGpzX3N0cnZfZnJlZV9uKGN0eCwgbiwgaW1wLmFyZ3MpOwogICAgICAvKgogICAgICBmb3IobiA9IDA7IG4gPCBjb3VudG9mKGltcC5hcmdzKTsgbisrKSB7CiAgICAgICAgaWYoaW1wLmFyZ3Nbbl0pCiAgICAgICAgICBqc19mcmVlKGN0eCwgaW1wLmFyZ3Nbbl0pOwogICAgICB9Ki8KICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFJFU09MVkVfTU9EVUxFOiB7CiAgICAgIHZhbCA9CiAgICAgICAgICBKU19OZXdJbnQzMihjdHgsIEpTX1Jlc29sdmVNb2R1bGUoY3R4LCBKU19NS1BUUihKU19UQUdfTU9EVUxFLCBkZWYpKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBHRVRfTU9EVUxFX05BTUU6IHsKICAgICAgdmFsID0gbW9kdWxlX25hbWUoY3R4LCBkZWYpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgR0VUX01PRFVMRV9PQkpFQ1Q6IHsKICAgICAgdmFsID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgdmFsLCAibmFtZSIsIG1vZHVsZV9uYW1lKGN0eCwgZGVmKSk7CiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgdmFsLCAicmVzb2x2ZWQiLCBKU19OZXdCb29sKGN0eCwgZGVmLT5yZXNvbHZlZCkpOwogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgImZ1bmNfY3JlYXRlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIEpTX05ld0Jvb2woY3R4LCBkZWYtPmZ1bmNfY3JlYXRlZCkpOwogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgImluc3RhbnRpYXRlZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIEpTX05ld0Jvb2woY3R4LCBkZWYtPmluc3RhbnRpYXRlZCkpOwogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgImV2YWx1YXRlZCIsIEpTX05ld0Jvb2woY3R4LCBkZWYtPmV2YWx1YXRlZCkpOwogICAgICBpZihkZWYtPmV2YWxfaGFzX2V4Y2VwdGlvbikKICAgICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsLAogICAgICAgICAgICAgICAgICAgICAgICAgICJleGNlcHRpb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5ldmFsX2V4Y2VwdGlvbikpOwogICAgICBpZighSlNfSXNVbmRlZmluZWQoZGVmLT5tb2R1bGVfbnMpKQogICAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIm5hbWVzcGFjZSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfRHVwVmFsdWUoY3R4LCBkZWYtPm1vZHVsZV9ucykpOwogICAgICBpZighSlNfSXNVbmRlZmluZWQoZGVmLT5mdW5jX29iaikpCiAgICAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCB2YWwsICJmdW5jIiwgSlNfRHVwVmFsdWUoY3R4LCBkZWYtPmZ1bmNfb2JqKSk7CiAgICAgIGlmKCFKU19Jc1VuZGVmaW5lZChkZWYtPm1ldGFfb2JqKSkKICAgICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgIm1ldGEiLCBKU19EdXBWYWx1ZShjdHgsIGRlZi0+bWV0YV9vYmopKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfRVhQT1JUUzogewogICAgICB2YWwgPSBtb2R1bGVfZXhwb3J0cyhjdHgsIGRlZik7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBHRVRfTU9EVUxFX05BTUVTUEFDRTogewogICAgICB2YWwgPSBKU19EdXBWYWx1ZShjdHgsIGRlZi0+bW9kdWxlX25zKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfRlVOQ1RJT046IHsKICAgICAgaWYoVFJVRSB8fCBkZWYtPmZ1bmNfY3JlYXRlZCkKICAgICAgICB2YWwgPSBKU19EdXBWYWx1ZShjdHgsIGRlZi0+ZnVuY19vYmopOwogICAgICBlbHNlCiAgICAgICAgdmFsID0gSlNfTlVMTDsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfRVhDRVBUSU9OOiB7CiAgICAgIGlmKGRlZi0+ZXZhbF9oYXNfZXhjZXB0aW9uKQogICAgICAgIHZhbCA9IEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5ldmFsX2V4Y2VwdGlvbik7CiAgICAgIGVsc2UKICAgICAgICB2YWwgPSBKU19OVUxMOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgR0VUX01PRFVMRV9NRVRBX09CSjogewogICAgICB2YWwgPSBKU19EdXBWYWx1ZShjdHgsIGRlZi0+bWV0YV9vYmopOwogICAgICBicmVhazsKICAgIH0KICB9CiAgaWYobmFtZSkKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbmFtZSk7CgogIHJldHVybiB2YWw7Cn0KCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc21fZ2xvYmFsX2Z1bmNzW10gPSB7CiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImV2YWxGaWxlIiwgMSwganNtX2V2YWxfc2NyaXB0LCAwKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZXZhbFNjcmlwdCIsIDEsIGpzbV9ldmFsX3NjcmlwdCwgMSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibW9kdWxlTGlzdCIsIGpzX21vZHVsZXNfYXJyYXksIDAsIDApLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoIm1vZHVsZU9iamVjdCIsIGpzX21vZHVsZXNfb2JqZWN0LCAwLCAwKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJtb2R1bGVNYXAiLCBqc19tb2R1bGVzX21hcCwgMCwgMCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImZpbmRNb2R1bGUiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEZJTkRfTU9EVUxFKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigibG9hZE1vZHVsZSIsIDEsIGpzbV9tb2R1bGVfZnVuYywgTE9BRF9NT0RVTEUpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJyZXNvbHZlTW9kdWxlIiwgMSwganNtX21vZHVsZV9mdW5jLCBSRVNPTFZFX01PRFVMRSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldE1vZHVsZU5hbWUiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfTkFNRSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoCiAgICAgICAgImdldE1vZHVsZU9iamVjdCIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9PQkpFQ1QpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKAogICAgICAgICJnZXRNb2R1bGVFeHBvcnRzIiwgMSwganNtX21vZHVsZV9mdW5jLCBHRVRfTU9EVUxFX0VYUE9SVFMpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKAogICAgICAgICJnZXRNb2R1bGVOYW1lc3BhY2UiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfTkFNRVNQQUNFKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigKICAgICAgICAiZ2V0TW9kdWxlRnVuY3Rpb24iLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfRlVOQ1RJT04pLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKAogICAgICAgICJnZXRNb2R1bGVFeGNlcHRpb24iLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfRVhDRVBUSU9OKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigKICAgICAgICAiZ2V0TW9kdWxlTWV0YU9iamVjdCIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9NRVRBX09CSiksCn07CgppbnQKbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpIHsKICBKU1J1bnRpbWUqIHJ0OwogIEpTQ29udGV4dCogY3R4OwogIHN0cnVjdCB0cmFjZV9tYWxsb2NfZGF0YSB0cmFjZV9kYXRhID0gezB9OwogIGludCBvcHRpbmQ7CiAgY2hhciogZXhwciA9IDA7CiAgaW50IGludGVyYWN0aXZlID0gMDsKICBpbnQgZHVtcF9tZW1vcnkgPSAwOwogIGludCB0cmFjZV9tZW1vcnkgPSAwOwogIGludCBlbXB0eV9ydW4gPSAwOwogIGludCBtb2R1bGUgPSAxOwogIGludCBsb2FkX3N0ZCA9IDE7CiAgaW50IGR1bXBfdW5oYW5kbGVkX3Byb21pc2VfcmVqZWN0aW9uID0gMDsKICBzaXplX3QgbWVtb3J5X2xpbWl0ID0gMDsKICBjaGFyKiBpbmNsdWRlX2xpc3RbMzJdOwogIGludCBpLCBpbmNsdWRlX2NvdW50ID0gMDsKI2lmZGVmIENPTkZJR19CSUdOVU0KICBpbnQgbG9hZF9qc2NhbGM7CiNlbmRpZgogIHNpemVfdCBzdGFja19zaXplID0gMDsKICBjb25zdCBjaGFyKiBleGVuYW1lOwoKICBwYWNrYWdlX2pzb24gPSBKU19VTkRFRklORUQ7CgogIGluaXRfbGlzdF9oZWFkKCZwb2xsaGFuZGxlcnMpOwoKICB7CiAgICBjb25zdCBjaGFyKiBwOwogICAgZXhlbmFtZSA9IGFyZ3ZbMF07CiAgICBwID0gc3RycmNocihleGVuYW1lLCAnLycpOwogICAgaWYocCkKICAgICAgZXhlbmFtZSA9IHAgKyAxOwogICAgLyogbG9hZCBqc2NhbGMgcnVudGltZSBpZiBpbnZva2VkIGFzICdxanNjYWxjJyAqLwogICAgbG9hZF9qc2NhbGMgPSAhc3RyY21wKGV4ZW5hbWUsICJxanNjYWxjIik7CiAgfQoKICAvKiBjYW5ub3QgdXNlIGdldG9wdCBiZWNhdXNlIHdlIHdhbnQgdG8gcGFzcyB0aGUgY29tbWFuZCBsaW5lIHRvCiAgICAgdGhlIHNjcmlwdCAqLwogIG9wdGluZCA9IDE7CiAgd2hpbGUob3B0aW5kIDwgYXJnYyAmJiAqYXJndltvcHRpbmRdID09ICctJykgewogICAgY2hhciogYXJnID0gYXJndltvcHRpbmRdICsgMTsKICAgIGNvbnN0IGNoYXIqIGxvbmdvcHQgPSAiIjsKICAgIGNvbnN0IGNoYXIqIG9wdGFyZzsKCiAgICAvKiBhIHNpbmdsZSAtIGlzIG5vdCBhbiBvcHRpb24sIGl0IGFsc28gc3RvcHMgYXJndW1lbnQgc2Nhbm5pbmcgKi8KICAgIGlmKCEqYXJnKQogICAgICBicmVhazsKCiAgICBpZihhcmdbMV0pIHsKICAgICAgb3B0YXJnID0gJmFyZ1sxXTsKICAgIH0gZWxzZSB7CiAgICAgIG9wdGFyZyA9IGFyZ3ZbKytvcHRpbmRdOwogICAgfQoKICAgIGlmKCphcmcgPT0gJy0nKSB7CiAgICAgIGxvbmdvcHQgPSBhcmcgKyAxOwogICAgICBhcmcgKz0gc3RybGVuKGFyZyk7CiAgICAgIC8qIC0tIHN0b3BzIGFyZ3VtZW50IHNjYW5uaW5nICovCiAgICAgIGlmKCEqbG9uZ29wdCkKICAgICAgICBicmVhazsKICAgIH0KICAgIGZvcig7ICphcmcgfHwgKmxvbmdvcHQ7IGxvbmdvcHQgPSAiIikgewogICAgICBjaGFyIG9wdCA9ICphcmc7CiAgICAgIGlmKG9wdCkKICAgICAgICBhcmcrKzsKICAgICAgaWYob3B0ID09ICdoJyB8fCBvcHQgPT0gJz8nIHx8ICFzdHJjbXAobG9uZ29wdCwgImhlbHAiKSkgewogICAgICAgIGpzbV9oZWxwKCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYob3B0ID09ICdlJyB8fCAhc3RyY21wKGxvbmdvcHQsICJldmFsIikpIHsKICAgICAgICBpZigqYXJnKSB7CiAgICAgICAgICBleHByID0gYXJnOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmKG9wdGluZCA8IGFyZ2MpIHsKICAgICAgICAgIGV4cHIgPSBhcmd2W29wdGluZCsrXTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIiVzOiBtaXNzaW5nIGV4cHJlc3Npb24gZm9yIC1lXG4iLCBleGVuYW1lKTsKICAgICAgICBleGl0KDIpOwogICAgICB9CiAgICAgIGlmKG9wdCA9PSAnSScgfHwgIXN0cmNtcChsb25nb3B0LCAiaW5jbHVkZSIpKSB7CiAgICAgICAgaWYob3B0aW5kID49IGFyZ2MpIHsKICAgICAgICAgIGZwcmludGYoc3RkZXJyLCAiZXhwZWN0aW5nIGZpbGVuYW1lIik7CiAgICAgICAgICBleGl0KDEpOwogICAgICAgIH0KICAgICAgICBpZihpbmNsdWRlX2NvdW50ID49IGNvdW50b2YoaW5jbHVkZV9saXN0KSkgewogICAgICAgICAgZnByaW50ZihzdGRlcnIsICJ0b28gbWFueSBpbmNsdWRlZCBmaWxlcyIpOwogICAgICAgICAgZXhpdCgxKTsKICAgICAgICB9CiAgICAgICAgaW5jbHVkZV9saXN0W2luY2x1ZGVfY291bnQrK10gPSBvcHRhcmc7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYob3B0ID09ICdpJyB8fCAhc3RyY21wKGxvbmdvcHQsICJpbnRlcmFjdGl2ZSIpKSB7CiAgICAgICAgaW50ZXJhY3RpdmUrKzsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZihvcHQgPT0gJ20nIHx8ICFzdHJjbXAobG9uZ29wdCwgIm1vZHVsZSIpKSB7CiAgICAgICAgY29uc3QgY2hhciogbW9kdWxlcyA9IGFyZ3Zbb3B0aW5kXTsKICAgICAgICBzaXplX3QgaSwgbGVuOwoKICAgICAgICBmb3IoaSA9IDA7IG1vZHVsZXNbaV07IGkgKz0gbGVuKSB7CiAgICAgICAgICBsZW4gPSBzdHJfY2hyKCZtb2R1bGVzW2ldLCAnLCcpOwogICAgICAgICAgdmVjdG9yX3B1dHB0cigmbW9kdWxlX2xpc3QsIHN0cl9uZHVwKCZtb2R1bGVzW2ldLCBsZW4pKTsKCiAgICAgICAgICBpZihtb2R1bGVzW2kgKyBsZW5dID09ICcsJykKICAgICAgICAgICAgbGVuKys7CiAgICAgICAgfQoKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZihvcHQgPT0gJ2QnIHx8ICFzdHJjbXAobG9uZ29wdCwgImR1bXAiKSkgewogICAgICAgIGR1bXBfbWVtb3J5Kys7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYob3B0ID09ICdUJyB8fCAhc3RyY21wKGxvbmdvcHQsICJ0cmFjZSIpKSB7CiAgICAgICAgdHJhY2VfbWVtb3J5Kys7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAic3RkIikpIHsKICAgICAgICBsb2FkX3N0ZCA9IDE7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAidW5oYW5kbGVkLXJlamVjdGlvbiIpKSB7CiAgICAgICAgZHVtcF91bmhhbmRsZWRfcHJvbWlzZV9yZWplY3Rpb24gPSAxOwogICAgICAgIGJyZWFrOwogICAgICB9CiNpZmRlZiBDT05GSUdfQklHTlVNCiAgICAgIGlmKCFzdHJjbXAobG9uZ29wdCwgIm5vLWJpZ251bSIpKSB7CiAgICAgICAgYmlnbnVtX2V4dCA9IDA7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAiYmlnbnVtIikpIHsKICAgICAgICBiaWdudW1fZXh0ID0gMTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZighc3RyY21wKGxvbmdvcHQsICJxanNjYWxjIikpIHsKICAgICAgICBsb2FkX2pzY2FsYyA9IDE7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KI2VuZGlmCiAgICAgIGlmKG9wdCA9PSAncScgfHwgIXN0cmNtcChsb25nb3B0LCAicXVpdCIpKSB7CiAgICAgICAgZW1wdHlfcnVuKys7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAibWVtb3J5LWxpbWl0IikpIHsKICAgICAgICBpZihvcHRpbmQgPj0gYXJnYykgewogICAgICAgICAgZnByaW50ZihzdGRlcnIsICJleHBlY3RpbmcgbWVtb3J5IGxpbWl0Iik7CiAgICAgICAgICBleGl0KDEpOwogICAgICAgIH0KICAgICAgICBtZW1vcnlfbGltaXQgPSAoc2l6ZV90KXN0cnRvZChhcmd2W29wdGluZCsrXSwgMCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAic3RhY2stc2l6ZSIpKSB7CiAgICAgICAgaWYob3B0aW5kID49IGFyZ2MpIHsKICAgICAgICAgIGZwcmludGYoc3RkZXJyLCAiZXhwZWN0aW5nIHN0YWNrIHNpemUiKTsKICAgICAgICAgIGV4aXQoMSk7CiAgICAgICAgfQogICAgICAgIHN0YWNrX3NpemUgPSAoc2l6ZV90KXN0cnRvZChhcmd2W29wdGluZCsrXSwgMCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYob3B0KSB7CiAgICAgICAgZnByaW50ZihzdGRlcnIsICIlczogdW5rbm93biBvcHRpb24gJy0lYydcbiIsIGV4ZW5hbWUsIG9wdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZnByaW50ZihzdGRlcnIsICIlczogdW5rbm93biBvcHRpb24gJy0tJXMnXG4iLCBleGVuYW1lLCBsb25nb3B0KTsKICAgICAgfQogICAgICBqc21faGVscCgpOwogICAgfQogICAgb3B0aW5kKys7CiAgfQoKICB7CiAgICBjb25zdCBjaGFyKiBtb2R1bGVzOwoKICAgIGlmKChtb2R1bGVzID0gZ2V0ZW52KCJERUJVRyIpKSkgewogICAgICBzaXplX3QgaSwgbGVuOwogICAgICBmb3IoaSA9IDA7IG1vZHVsZXNbaV07IGkgKz0gbGVuKSB7CiAgICAgICAgbGVuID0gc3RyX2NocigmbW9kdWxlc1tpXSwgJywnKTsKICAgICAgICB2ZWN0b3JfcHV0cHRyKCZtb2R1bGVfZGVidWcsIHN0cl9uZHVwKCZtb2R1bGVzW2ldLCBsZW4pKTsKCiAgICAgICAgaWYobW9kdWxlc1tpICsgbGVuXSA9PSAnLCcpCiAgICAgICAgICBsZW4rKzsKICAgICAgfQoKICAgICAgaWYodmVjdG9yX2ZpbmRzKCZtb2R1bGVfZGVidWcsICJtb2R1bGVzIikgIT0gLTEpCiAgICAgICAgZGVidWdfbW9kdWxlX2xvYWRlciA9IFRSVUU7CiAgICB9CiAgfQoKICBpZihsb2FkX2pzY2FsYykKICAgIGJpZ251bV9leHQgPSAxOwoKICBpZih0cmFjZV9tZW1vcnkpIHsKICAgIGpzbV90cmFjZV9tYWxsb2NfaW5pdCgmdHJhY2VfZGF0YSk7CiAgICBydCA9IEpTX05ld1J1bnRpbWUyKCZ0cmFjZV9tZiwgJnRyYWNlX2RhdGEpOwogIH0gZWxzZSB7CiAgICBydCA9IEpTX05ld1J1bnRpbWUoKTsKICB9CiAgaWYoIXJ0KSB7CiAgICBmcHJpbnRmKHN0ZGVyciwgIiVzOiBjYW5ub3QgYWxsb2NhdGUgSlMgcnVudGltZVxuIiwgZXhlbmFtZSk7CiAgICBleGl0KDIpOwogIH0KCiAgSlNfU2V0TW9kdWxlTG9hZGVyRnVuYyhydCwgMCwganNtX21vZHVsZV9sb2FkZXIsIDApOwoKICBpZihtZW1vcnlfbGltaXQgIT0gMCkKICAgIEpTX1NldE1lbW9yeUxpbWl0KHJ0LCBtZW1vcnlfbGltaXQpOwogIC8vIGlmIChzdGFja19zaXplICE9IDApCiAgSlNfU2V0TWF4U3RhY2tTaXplKHJ0LCBzdGFja19zaXplICE9IDAgPyBzdGFja19zaXplIDogMjU2ICogMTA0ODU3Nik7CgogIGpzX3N0ZF9zZXRfd29ya2VyX25ld19jb250ZXh0X2Z1bmMoanNtX2NvbnRleHRfbmV3KTsKCiAganNfc3RkX2luaXRfaGFuZGxlcnMocnQpOwogIGN0eCA9IGpzbV9jb250ZXh0X25ldyhydCk7CiAgaWYoIWN0eCkgewogICAgZnByaW50ZihzdGRlcnIsICIlczogY2Fubm90IGFsbG9jYXRlIEpTIGNvbnRleHRcbiIsIGV4ZW5hbWUpOwogICAgZXhpdCgyKTsKICB9CgogIC8qIGxvYWRlciBmb3IgRVM2IG1vZHVsZXMgKi8KICBKU19TZXRNb2R1bGVMb2FkZXJGdW5jKHJ0LCBqc19tb2R1bGVfbm9ybWFsaXplLCBqc21fbW9kdWxlX2xvYWRlciwgMCk7CgogIGlmKGR1bXBfdW5oYW5kbGVkX3Byb21pc2VfcmVqZWN0aW9uKSB7CiAgICBKU19TZXRIb3N0UHJvbWlzZVJlamVjdGlvblRyYWNrZXIocnQsIGpzX3N0ZF9wcm9taXNlX3JlamVjdGlvbl90cmFja2VyLCAwKTsKICB9CgogIGlmKCFlbXB0eV9ydW4pIHsKI2lmZGVmIENPTkZJR19CSUdOVU0KICAgIGlmKGxvYWRfanNjYWxjKSB7CiAgICAgIGpzX2V2YWxfYmluYXJ5KGN0eCwgcWpzY19xanNjYWxjLCBxanNjX3Fqc2NhbGNfc2l6ZSwgMCk7CiAgICB9CiNlbmRpZgogICAganNfc3RkX2FkZF9oZWxwZXJzKGN0eCwgYXJnYyAtIG9wdGluZCwgYXJndiArIG9wdGluZCk7CgogICAgaW50IG51bV9uYXRpdmUsIG51bV9jb21waWxlZDsKCiNkZWZpbmUganNtX2J1aWx0aW5fbmF0aXZlKG5hbWUpIHZlY3Rvcl9wdXRwdHIoJmJ1aWx0aW5zLCAjbmFtZSkKCiAgICBqc21fYnVpbHRpbl9uYXRpdmUoc3RkKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZShvcyk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUoY2hpbGRfcHJvY2Vzcyk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUoZGVlcCk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUoaW5zcGVjdCk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUobGV4ZXIpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKG1pc2MpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKG1tYXApOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHBhdGgpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHBvaW50ZXIpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHByZWRpY2F0ZSk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUocmVwZWF0ZXIpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHRyZWVfd2Fsa2VyKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZSh4bWwpOwogICAgbnVtX25hdGl2ZSA9IHZlY3Rvcl9zaXplKCZidWlsdGlucywgc2l6ZW9mKGNoYXIqKSk7CgogICAgLy8gcHJpbnRmKCJuYXRpdmUgYnVpbHRpbnM6ICIpOyBkdW1wX3ZlY3RvcigmYnVpbHRpbnMsIDApOwoKI2RlZmluZSBqc21fYnVpbHRpbl9jb21waWxlZChuYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICBqc19ldmFsX2JpbmFyeShjdHgsIHFqc2NfIyNuYW1lLCBxanNjXyMjbmFtZSMjX3NpemUsIDApOyAgICAgICAgICAgICAgICAgICAgIFwKICB2ZWN0b3JfcHV0cHRyKCZidWlsdGlucywgI25hbWUpCgogICAganNtX2J1aWx0aW5fY29tcGlsZWQoY29uc29sZSk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChldmVudHMpOwogICAganNtX2J1aWx0aW5fY29tcGlsZWQoZnMpOwogICAganNtX2J1aWx0aW5fY29tcGlsZWQocGVyZl9ob29rcyk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChwcm9jZXNzKTsKICAgIC8vIGpzbV9idWlsdGluX2NvbXBpbGVkKHJlcGwpOwogICAganNtX2J1aWx0aW5fY29tcGlsZWQocmVxdWlyZSk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZCh0dHkpOwogICAganNtX2J1aWx0aW5fY29tcGlsZWQodXRpbCk7CgogICAgbnVtX2NvbXBpbGVkID0gdmVjdG9yX3NpemUoJmJ1aWx0aW5zLCBzaXplb2YoY2hhciopKSAtIG51bV9uYXRpdmU7CgogICAgewogICAgICBjb25zdCBjaGFyKiBzdHIgPQogICAgICAgICAgImltcG9ydCBwcm9jZXNzIGZyb20gJ3Byb2Nlc3MnO1xuZ2xvYmFsVGhpcy5wcm9jZXNzID0gcHJvY2VzcztcbiI7CiAgICAgIGpzX2V2YWxfc3RyKGN0eCwgc3RyLCAiPGlucHV0PiIsIEpTX0VWQUxfVFlQRV9NT0RVTEUpOwogICAgfQoKICAgIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0dldEdsb2JhbE9iamVjdChjdHgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNtX2dsb2JhbF9mdW5jcywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50b2YoanNtX2dsb2JhbF9mdW5jcykpOwogICAgaWYobG9hZF9zdGQpIHsKICAgICAgY29uc3QgY2hhciogc3RyID0gImltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnO1xuaW1wb3J0ICogYXMgb3MgZnJvbSAiCiAgICAgICAgICAgICAgICAgICAgICAgICInb3MnO1xuZ2xvYmFsVGhpcy5zdGQgPSAiCiAgICAgICAgICAgICAgICAgICAgICAgICJzdGQ7XG5nbG9iYWxUaGlzLm9zICIKICAgICAgICAgICAgICAgICAgICAgICAgIj0gb3M7XG5nbG9iYWxUaGlzLnNldFRpbWVvdXQgPSAiCiAgICAgICAgICAgICAgICAgICAgICAgICJvcy5zZXRUaW1lb3V0O1xuZ2xvYmFsVGhpcy5jbGVhclRpbWVvdXQgPSAiCiAgICAgICAgICAgICAgICAgICAgICAgICJvcy5jbGVhclRpbWVvdXQ7XG4iOwogICAgICBqc19ldmFsX3N0cihjdHgsIHN0ciwgIjxpbnB1dD4iLCBKU19FVkFMX1RZUEVfTU9EVUxFKTsKICAgIH0KCiAgICAvLyBqc21fbGlzdF9tb2R1bGVzKGN0eCk7CgogICAgewogICAgICBjaGFyKiogbmFtZTsKICAgICAgSlNNb2R1bGVEZWYqIG07CiAgICAgIHZlY3Rvcl9mb3JlYWNoX3QoJm1vZHVsZV9saXN0LCBuYW1lKSB7CiAgICAgICAgaWYoIShtID0ganNfbW9kdWxlX2ltcG9ydF9uYW1lc3BhY2UoY3R4LCAqbmFtZSwgMCkpKSB7CiAgICAgICAgICBmcHJpbnRmKHN0ZGVyciwgImVycm9yIGxvYWRpbmcgbW9kdWxlICclcydcbiIsICpuYW1lKTsKICAgICAgICAgIGV4aXQoMSk7CiAgICAgICAgfQogICAgICAgIGZyZWUoKm5hbWUpOwogICAgICB9CiAgICAgIHZlY3Rvcl9mcmVlKCZtb2R1bGVfbGlzdCk7CiAgICB9CgogICAgZm9yKGkgPSAwOyBpIDwgaW5jbHVkZV9jb3VudDsgaSsrKSB7CiAgICAgIGlmKGpzbV9sb2FkX3NjcmlwdChjdHgsIGluY2x1ZGVfbGlzdFtpXSwgbW9kdWxlKSA9PSAtMSkKICAgICAgICBnb3RvIGZhaWw7CiAgICB9CgogICAgaWYoZXhwcikgewogICAgICBpZihqc19ldmFsX3N0cihjdHgsIGV4cHIsICI8Y21kbGluZT4iLCAwKSA9PSAtMSkKICAgICAgICBnb3RvIGZhaWw7CiAgICB9IGVsc2UgaWYob3B0aW5kID49IGFyZ2MpIHsKICAgICAgLyogaW50ZXJhY3RpdmUgbW9kZSAqLwogICAgICBpbnRlcmFjdGl2ZSA9IDE7CiAgICB9IGVsc2UgewogICAgICBjb25zdCBjaGFyKiBmaWxlbmFtZTsKICAgICAgZmlsZW5hbWUgPSBhcmd2W29wdGluZF07CiAgICAgIGlmKGpzbV9sb2FkX3NjcmlwdChjdHgsIGZpbGVuYW1lLCBtb2R1bGUpID09IC0xKSB7CiAgICAgICAganNfdmFsdWVfZndyaXRlKGN0eCwgSlNfR2V0RXhjZXB0aW9uKGN0eCksIHN0ZGVycik7CiAgICAgICAgZ290byBmYWlsOwogICAgICB9CiAgICB9CiAgICBpZihpbnRlcmFjdGl2ZSkgewogICAgICBjb25zdCBjaGFyKiBzdHIgPSAiaW1wb3J0IFJFUEwgZnJvbSAncmVwbCc7IGdsb2JhbFRoaXMucmVwbCA9IG5ldyAiCiAgICAgICAgICAgICAgICAgICAgICAgICJSRVBMKCdxanNtJykucnVuU3luYygpO1xuIjsKICAgICAganNfZXZhbF9iaW5hcnkoY3R4LCBxanNjX3JlcGwsIHFqc2NfcmVwbF9zaXplLCAwKTsKICAgICAganNfZXZhbF9zdHIoY3R4LCBzdHIsICI8aW5wdXQ+IiwgSlNfRVZBTF9UWVBFX01PRFVMRSk7CiAgICB9CgogICAganNfc3RkX2xvb3AoY3R4KTsKICB9CgogIHsKCiAgICBKU1ZhbHVlIGV4Y2VwdGlvbiA9IEpTX0dldEV4Y2VwdGlvbihjdHgpOwoKICAgIGlmKCFKU19Jc051bGwoZXhjZXB0aW9uKSkgewogICAgICBqc19zdGRfZHVtcF9lcnJvcihjdHgpOwogICAgfQogIH0KCiAgaWYoZHVtcF9tZW1vcnkpIHsKICAgIEpTTWVtb3J5VXNhZ2Ugc3RhdHM7CiAgICBKU19Db21wdXRlTWVtb3J5VXNhZ2UocnQsICZzdGF0cyk7CiAgICBKU19EdW1wTWVtb3J5VXNhZ2Uoc3Rkb3V0LCAmc3RhdHMsIHJ0KTsKICB9CiAganNfc3RkX2ZyZWVfaGFuZGxlcnMocnQpOwogIEpTX0ZyZWVDb250ZXh0KGN0eCk7CiAgSlNfRnJlZVJ1bnRpbWUocnQpOwoKICBpZihlbXB0eV9ydW4gJiYgZHVtcF9tZW1vcnkpIHsKICAgIGNsb2NrX3QgdFs1XTsKICAgIGRvdWJsZSBiZXN0WzVdOwogICAgaW50IGksIGo7CiAgICBmb3IoaSA9IDA7IGkgPCAxMDA7IGkrKykgewogICAgICB0WzBdID0gY2xvY2soKTsKICAgICAgcnQgPSBKU19OZXdSdW50aW1lKCk7CiAgICAgIHRbMV0gPSBjbG9jaygpOwogICAgICBjdHggPSBKU19OZXdDb250ZXh0KHJ0KTsKICAgICAgdFsyXSA9IGNsb2NrKCk7CiAgICAgIEpTX0ZyZWVDb250ZXh0KGN0eCk7CiAgICAgIHRbM10gPSBjbG9jaygpOwogICAgICBKU19GcmVlUnVudGltZShydCk7CiAgICAgIHRbNF0gPSBjbG9jaygpOwogICAgICBmb3IoaiA9IDQ7IGogPiAwOyBqLS0pIHsKICAgICAgICBkb3VibGUgbXMgPSAxMDAwLjAgKiAodFtqXSAtIHRbaiAtIDFdKSAvIENMT0NLU19QRVJfU0VDOwogICAgICAgIGlmKGkgPT0gMCB8fCBiZXN0W2pdID4gbXMpCiAgICAgICAgICBiZXN0W2pdID0gbXM7CiAgICAgIH0KICAgIH0KICAgIHByaW50ZigiXG5JbnN0YW50aWF0aW9uIHRpbWVzIChtcyk6ICUuM2YgPSAlLjNmKyUuM2YrJS4zZislLjNmXG4iLAogICAgICAgICAgIGJlc3RbMV0gKyBiZXN0WzJdICsgYmVzdFszXSArIGJlc3RbNF0sCiAgICAgICAgICAgYmVzdFsxXSwKICAgICAgICAgICBiZXN0WzJdLAogICAgICAgICAgIGJlc3RbM10sCiAgICAgICAgICAgYmVzdFs0XSk7CiAgfQogIHJldHVybiAwOwpmYWlsOgogIGpzX3N0ZF9mcmVlX2hhbmRsZXJzKHJ0KTsKICBKU19GcmVlQ29udGV4dChjdHgpOwogIEpTX0ZyZWVSdW50aW1lKHJ0KTsKICByZXR1cm4gMTsKfQoAAAAAAAAAAENrAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQDgAAAAAAABAOAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABDawAAI2luY2x1ZGUgPHN0ZGxpYi5oPgojaW5jbHVkZSA8c3RkaW8uaD4KI2luY2x1ZGUgPHN0ZGFyZy5oPgojaW5jbHVkZSA8aW50dHlwZXMuaD4KI2luY2x1ZGUgPHN0cmluZy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDx1bmlzdGQuaD4KI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNsdWRlIDxmY250bC5oPgojaW5jbHVkZSA8ZGxmY24uaD4KI2luY2x1ZGUgPHRpbWUuaD4KI2luY2x1ZGUgPHNpZ25hbC5oPgojaW5jbHVkZSA8c3lzL3BvbGwuaD4KI2lmIGRlZmluZWQoX19BUFBMRV9fKQojaW5jbHVkZSA8bWFsbG9jL21hbGxvYy5oPgojZWxpZiBkZWZpbmVkKF9fbGludXhfXykKI2luY2x1ZGUgPG1hbGxvYy5oPgojZW5kaWYKCiNpZiAxIC8vIGRlZiBIQVZFX1FVSUNLSlNfQ09ORklHX0gKI2luY2x1ZGUgInF1aWNranMtY29uZmlnLmgiCiNlbmRpZgoKI2lmZGVmIFVTRV9XT1JLRVIKI2luY2x1ZGUgPHB0aHJlYWQuaD4KI2luY2x1ZGUgPHN0ZGF0b21pYy5oPgoKc3RhdGljIGludAphdG9taWNfYWRkX2ludChpbnQqIHB0ciwgaW50IHYpIHsKICByZXR1cm4gYXRvbWljX2ZldGNoX2FkZCgoX0F0b21pYyh1aW50MzJfdCkqKXB0ciwgdikgKyB2Owp9CiNlbmRpZgoKI2luY2x1ZGUgImxpc3QuaCIKI2luY2x1ZGUgImN1dGlscy5oIgojaW5jbHVkZSAidXRpbHMuaCIKI2luY2x1ZGUgInZlY3Rvci5oIgojaW5jbHVkZSAicXVpY2tqcy1saWJjLmgiCiNpbmNsdWRlICJxdWlja2pzLWludGVybmFsLmgiCiNpbmNsdWRlICJidWZmZXItdXRpbHMuaCIKCnR5cGVkZWYgc3RydWN0IHBvbGxoYW5kbGVyIHsKICBzdHJ1Y3QgcG9sbGZkIHBmOwogIHZvaWQgKCpoYW5kbGVyKSh2b2lkKiBvcGFxdWUsIHN0cnVjdCBwb2xsZmQqKTsKICB2b2lkKiBvcGFxdWU7CiAgc3RydWN0IGxpc3RfaGVhZCBsaW5rOwp9IHBvbGxoYW5kbGVyX3Q7Cgp0aHJlYWRfbG9jYWwgdWludDY0X3QganNtX3BlbmRpbmdfc2lnbmFscyA9IDA7CnN0cnVjdCBsaXN0X2hlYWQgcG9sbGhhbmRsZXJzOwoKdm9pZCBqc19zdGRfc2V0X21vZHVsZV9sb2FkZXJfZnVuYyhKU01vZHVsZUxvYWRlckZ1bmMqIGZ1bmMpOwoKI2lmZGVmIEhBVkVfTUFMTE9DX1VTQUJMRV9TSVpFCiNpZm5kZWYgSEFWRV9NQUxMT0NfVVNBQkxFX1NJWkVfREVGSU5JVElPTgpleHRlcm4gc2l6ZV90IG1hbGxvY191c2FibGVfc2l6ZSgpOwojZW5kaWYKI2VuZGlmCgojZGVmaW5lIHRyaW1fZG90c2xhc2goc3RyKSAoIXN0cm5jbXAoKHN0ciksICIuLyIsIDIpID8gKHN0cikgKyAyIDogKHN0cikpCgojZGVmaW5lIGpzbV9kZWNsYXJlX21vZHVsZShuYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwKICBleHRlcm4gY29uc3QgdWludDhfdCBxanNjXyMjbmFtZVtdOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiAgZXh0ZXJuIGNvbnN0IHVpbnQzMl90IHFqc2NfIyNuYW1lIyNfc2l6ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIEpTTW9kdWxlRGVmKiBqc19pbml0X21vZHVsZV8jI25hbWUoSlNDb250ZXh0KiwgY29uc3QgY2hhciopOwoKanNtX2RlY2xhcmVfbW9kdWxlKGNvbnNvbGUpOwpqc21fZGVjbGFyZV9tb2R1bGUoZXZlbnRzKTsKanNtX2RlY2xhcmVfbW9kdWxlKGZzKTsKanNtX2RlY2xhcmVfbW9kdWxlKHBlcmZfaG9va3MpOwpqc21fZGVjbGFyZV9tb2R1bGUocHJvY2Vzcyk7CmpzbV9kZWNsYXJlX21vZHVsZShyZXBsKTsKanNtX2RlY2xhcmVfbW9kdWxlKHJlcXVpcmUpOwpqc21fZGVjbGFyZV9tb2R1bGUodHR5KTsKanNtX2RlY2xhcmVfbW9kdWxlKHV0aWwpOwoKI2lmZGVmIENPTkZJR19CSUdOVU0KanNtX2RlY2xhcmVfbW9kdWxlKHFqc2NhbGMpOwpzdGF0aWMgaW50IGJpZ251bV9leHQgPSAxOwojZW5kaWYKCnZvaWQganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyhKU0NvbnRleHQqICgqZnVuYykoSlNSdW50aW1lKiBydCkpOwp2b2lkIGpzX3N0ZF9kdW1wX2Vycm9yKEpTQ29udGV4dCogY3R4KTsKCnN0YXRpYyBCT09MIGRlYnVnX21vZHVsZV9sb2FkZXIgPSBGQUxTRTsKc3RhdGljIFZlY3RvciBtb2R1bGVfZGVidWcgPSBWRUNUT1JfSU5JVCgpOwpzdGF0aWMgVmVjdG9yIG1vZHVsZV9saXN0ID0gVkVDVE9SX0lOSVQoKTsKc3RhdGljIFZlY3RvciBidWlsdGlucyA9IFZFQ1RPUl9JTklUKCk7CgpKU1ZhbHVlIHBhY2thZ2VfanNvbjsKCnN0YXRpYyBKU1ZhbHVlCmpzbV9sb2FkX3BhY2thZ2UoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGZpbGUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChwYWNrYWdlX2pzb24pKSB7CiAgICB1aW50OF90KiBidWY7CiAgICBzaXplX3QgbGVuOwogICAgaWYoZmlsZSA9PSAwKQogICAgICBmaWxlID0gInBhY2thZ2UuanNvbiI7CiAgICBpZighKGJ1ZiA9IGpzX2xvYWRfZmlsZShjdHgsICZsZW4sIGZpbGUpKSkKICAgICAgcGFja2FnZV9qc29uID0gSlNfTlVMTDsKICAgIGVsc2UKICAgICAgcGFja2FnZV9qc29uID0gSlNfUGFyc2VKU09OKGN0eCwgYnVmLCBsZW4sIGZpbGUpOwogIH0KICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBwYWNrYWdlX2pzb24pOwp9CgpKU01vZHVsZURlZioKanNtX21vZHVsZV9sb2FkZXIoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUsIHZvaWQqIG9wYXF1ZSkgewogIGNoYXIgKm1vZHVsZSwgKmZpbGUgPSAwOwogIEpTTW9kdWxlRGVmKiByZXQgPSAwOwogIG1vZHVsZSA9IGpzX3N0cmR1cChjdHgsIHRyaW1fZG90c2xhc2gobmFtZSkpOwogIGZvcig7OykgewogICAgaWYoIXN0cmNocihtb2R1bGUsICcvJykgJiYgKHJldCA9IGpzX21vZHVsZV9maW5kKGN0eCwgbW9kdWxlKSkpIHsKICAgICAgZ290byBlbmQ7CiAgICB9CiAgICBpZihkZWJ1Z19tb2R1bGVfbG9hZGVyKSB7CiAgICAgIGlmKGZpbGUpCiAgICAgICAgcHJpbnRmKCJqc21fbW9kdWxlX2xvYWRlclsleF0gXHgxYls0ODs1OzIyMG0oMilceDFiWzBtICUtMjBzICclcydcbiIsCiAgICAgICAgICAgICAgIHB0aHJlYWRfc2VsZigpLAogICAgICAgICAgICAgICB0cmltX2RvdHNsYXNoKG5hbWUpLAogICAgICAgICAgICAgICBmaWxlKTsKICAgICAgLyogIGVsc2UgIHByaW50ZigianNtX21vZHVsZV9sb2FkZXJbJXhdIFx4MWJbNDg7NTsxMjRtKDEpXHgxYlswbSAlLTIwcyAtPgogICAgICAgKiAlc1xuIiwgcHRocmVhZF9zZWxmKCksIHRyaW1fZG90c2xhc2gobmFtZSksIHRyaW1fZG90c2xhc2gobW9kdWxlKSk7Ki8KICAgIH0KICAgIGlmKCFoYXNfc3VmZml4KG5hbWUsICIuc28iKSAmJiAhZmlsZSkgewogICAgICBKU1ZhbHVlIHBhY2thZ2UgPSBqc21fbG9hZF9wYWNrYWdlKGN0eCwgMCk7CiAgICAgIGlmKCFKU19Jc051bGwocGFja2FnZSkpIHsKICAgICAgICBKU1ZhbHVlIGFsaWFzZXMgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHBhY2thZ2UsICJfbW9kdWxlQWxpYXNlcyIpOwogICAgICAgIEpTVmFsdWUgdGFyZ2V0ID0gSlNfVU5ERUZJTkVEOwogICAgICAgIGlmKCFKU19Jc1VuZGVmaW5lZChhbGlhc2VzKSkgewogICAgICAgICAgdGFyZ2V0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBhbGlhc2VzLCBtb2R1bGUpOwogICAgICAgIH0KICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBhbGlhc2VzKTsKICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBwYWNrYWdlKTsKICAgICAgICBpZighSlNfSXNVbmRlZmluZWQodGFyZ2V0KSkgewogICAgICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgdGFyZ2V0KTsKICAgICAgICAgIGlmKHN0cikgewogICAgICAgICAgICBqc19mcmVlKGN0eCwgbW9kdWxlKTsKICAgICAgICAgICAgbW9kdWxlID0ganNfc3RyZHVwKGN0eCwgc3RyKTsKICAgICAgICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmKCFmaWxlKSB7CiAgICAgIGlmKHN0cmNocigiLi8iLCBtb2R1bGVbMF0pKQogICAgICAgIGZpbGUgPSBqc19zdHJkdXAoY3R4LCBtb2R1bGUpOwogICAgICBlbHNlIGlmKCEoZmlsZSA9IGpzX21vZHVsZV9zZWFyY2goY3R4LCBtb2R1bGUpKSkKICAgICAgICBicmVhazsKICAgICAgY29udGludWU7CiAgICB9CiAgICBicmVhazsKICB9CiAgaWYoZmlsZSkgewogICAgaWYoZGVidWdfbW9kdWxlX2xvYWRlcikKICAgICAgaWYoc3RyY21wKHRyaW1fZG90c2xhc2gobmFtZSksIHRyaW1fZG90c2xhc2goZmlsZSkpKQogICAgICAgIHByaW50ZigianNtX21vZHVsZV9sb2FkZXJbJXhdIFx4MWJbNDg7NTsyOG0oMylceDFiWzBtICUtMjBzIC0+ICVzXG4iLCBwdGhyZWFkX3NlbGYoKSwgbW9kdWxlLCBmaWxlKTsKICAgIHJldCA9IGhhc19zdWZmaXgoZmlsZSwgIi5zbyIpID8ganNfbW9kdWxlX2xvYWRlcl9zbyhjdHgsIGZpbGUpIDoganNfbW9kdWxlX2xvYWRlcihjdHgsIGZpbGUsIG9wYXF1ZSk7CiAgfQplbmQ6CiAgaWYodmVjdG9yX2ZpbmRzKCZtb2R1bGVfZGVidWcsICJpbXBvcnQiKSAhPSAtMSkgewogICAgZnByaW50ZihzdGRlcnIsICghZmlsZSB8fCBzdHJjbXAobW9kdWxlLCBmaWxlKSkgPyAiISEhIElNUE9SVCAlcyAtPiAlc1xuIiA6ICIhISEgSU1QT1JUICVzXG4iLCBtb2R1bGUsIGZpbGUpOwogIH0KICBpZighcmV0KQogICAgcHJpbnRmKCJqc21fbW9kdWxlX2xvYWRlcihcIiVzXCIpID0gJXBcbiIsIG5hbWUsIHJldCk7CiAgaWYobW9kdWxlKQogICAganNfZnJlZShjdHgsIG1vZHVsZSk7CiAgaWYoZmlsZSkKICAgIGpzX2ZyZWUoY3R4LCBmaWxlKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNWYWx1ZQpqc21fZXZhbF9maWxlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBmaWxlLCBpbnQgbW9kdWxlKSB7CiAgdWludDhfdCogYnVmOwogIHNpemVfdCBsZW47CiAgaW50IGZsYWdzOwogIGlmKCEoYnVmID0ganNfbG9hZF9maWxlKGN0eCwgJmxlbiwgZmlsZSkpKSB7CiAgICBmcHJpbnRmKHN0ZGVyciwgIkZhaWxlZCBsb2FkaW5nICclcyc6ICVzXG4iLCBmaWxlLCBzdHJlcnJvcihlcnJubykpOwogICAgcmV0dXJuIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJGYWlsZWQgbG9hZGluZyAnJXMnOiAlcyIsIGZpbGUsIHN0cmVycm9yKGVycm5vKSk7CiAgfQogIGlmKG1vZHVsZSA8IDApCiAgICBtb2R1bGUgPSAoaGFzX3N1ZmZpeChmaWxlLCAiLm1qcyIpIHx8IEpTX0RldGVjdE1vZHVsZSgoY29uc3QgY2hhciopYnVmLCBsZW4pKTsKICBmbGFncyA9IG1vZHVsZSA/IEpTX0VWQUxfVFlQRV9NT0RVTEUgOiBKU19FVkFMX1RZUEVfR0xPQkFMOwogIHJldHVybiBqc19ldmFsX2J1ZihjdHgsIGJ1ZiwgbGVuLCBmaWxlLCBmbGFncyk7Cn0KCnN0YXRpYyBpbnQKanNtX2xvYWRfc2NyaXB0KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBmaWxlLCBCT09MIG1vZHVsZSkgewogIEpTVmFsdWUgdmFsOwogIGludDMyX3QgcmV0ID0gMDsKICB2YWwgPSBqc21fZXZhbF9maWxlKGN0eCwgZmlsZSwgbW9kdWxlKTsKICBpZihKU19Jc0V4Y2VwdGlvbih2YWwpKSB7CiAgICBqc192YWx1ZV9md3JpdGUoY3R4LCB2YWwsIHN0ZGVycik7CiAgICByZXR1cm4gLTE7CiAgfQogIGlmKEpTX0lzTnVtYmVyKHZhbCkpCiAgICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsKTsKICBpZihKU19WQUxVRV9HRVRfVEFHKHZhbCkgIT0gSlNfVEFHX01PRFVMRSAmJiBKU19WQUxVRV9HRVRfVEFHKHZhbCkgIT0gSlNfVEFHX0VYQ0VQVElPTikKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbCk7CiAgcmV0dXJuIHJldDsKfQoKLyogYWxzbyB1c2VkIHRvIGluaXRpYWxpemUgdGhlIHdvcmtlciBjb250ZXh0ICovCnN0YXRpYyBKU0NvbnRleHQqCmpzbV9jb250ZXh0X25ldyhKU1J1bnRpbWUqIHJ0KSB7CiAgSlNDb250ZXh0KiBjdHg7CiAgY3R4ID0gSlNfTmV3Q29udGV4dChydCk7CiAgaWYoIWN0eCkKICAgIHJldHVybiAwOwojaWZkZWYgQ09ORklHX0JJR05VTQogIGlmKGJpZ251bV9leHQpIHsKICAgIEpTX0FkZEludHJpbnNpY0JpZ0Zsb2F0KGN0eCk7CiAgICBKU19BZGRJbnRyaW5zaWNCaWdEZWNpbWFsKGN0eCk7CiAgICBKU19BZGRJbnRyaW5zaWNPcGVyYXRvcnMoY3R4KTsKICAgIEpTX0VuYWJsZUJpZ251bUV4dChjdHgsIFRSVUUpOwogIH0KI2VuZGlmCgojZGVmaW5lIGpzbV9tb2R1bGVfbmF0aXZlKG5hbWUpIGpzX2luaXRfbW9kdWxlXyMjbmFtZShjdHgsICNuYW1lKTsKCiAganNtX21vZHVsZV9uYXRpdmUoc3RkKTsKICBqc21fbW9kdWxlX25hdGl2ZShvcyk7CiAganNtX21vZHVsZV9uYXRpdmUoY2hpbGRfcHJvY2Vzcyk7CiAganNtX21vZHVsZV9uYXRpdmUoZGVlcCk7CiAganNtX21vZHVsZV9uYXRpdmUoaW5zcGVjdCk7CiAganNtX21vZHVsZV9uYXRpdmUobGV4ZXIpOwogIGpzbV9tb2R1bGVfbmF0aXZlKG1pc2MpOwogIGpzbV9tb2R1bGVfbmF0aXZlKG1tYXApOwogIGpzbV9tb2R1bGVfbmF0aXZlKHBhdGgpOwogIGpzbV9tb2R1bGVfbmF0aXZlKHBvaW50ZXIpOwogIGpzbV9tb2R1bGVfbmF0aXZlKHByZWRpY2F0ZSk7CiAganNtX21vZHVsZV9uYXRpdmUocmVwZWF0ZXIpOwogIGpzbV9tb2R1bGVfbmF0aXZlKHRyZWVfd2Fsa2VyKTsKICBqc21fbW9kdWxlX25hdGl2ZSh4bWwpOwogIHJldHVybiBjdHg7Cn0KCiNpZiBkZWZpbmVkKF9fQVBQTEVfXykKI2RlZmluZSBNQUxMT0NfT1ZFUkhFQUQgMAojZWxzZQojZGVmaW5lIE1BTExPQ19PVkVSSEVBRCA4CiNlbmRpZgoKc3RydWN0IHRyYWNlX21hbGxvY19kYXRhIHsKICB1aW50OF90KiBiYXNlOwp9OwoKc3RhdGljIHZvaWQKZHVtcF92ZWN0b3IoY29uc3QgVmVjdG9yKiB2ZWMsIHNpemVfdCBzdGFydCkgewogIHNpemVfdCBpLCBsZW4gPSB2ZWN0b3Jfc2l6ZSh2ZWMsIHNpemVvZihjaGFyKikpOwogIGZvcihpID0gc3RhcnQ7IGkgPCBsZW47IGkrKykgewogICAgY29uc3QgY2hhciogc3RyID0gKihjaGFyKiopdmVjdG9yX2F0KHZlYywgc2l6ZW9mKGNoYXIqKSwgaSk7CiAgICBmcHV0cyhpID4gc3RhcnQgPyAiJyxcbiAgJyIgOiAiW1xuICAnIiwgc3Rkb3V0KTsKICAgIGZwdXRzKHN0ciwgc3Rkb3V0KTsKICAgIGlmKGkgKyAxID09IGxlbikKICAgICAgcHV0cygiJ1xuXSIpOwogIH0KfQoKc3RhdGljIGlubGluZSB1bnNpZ25lZCBsb25nIGxvbmcKanNtX3RyYWNlX21hbGxvY19wdHJfb2Zmc2V0KHVpbnQ4X3QqIHB0ciwgc3RydWN0IHRyYWNlX21hbGxvY19kYXRhKiBkcCkgewogIHJldHVybiBwdHIgLSBkcC0+YmFzZTsKfQoKLyogZGVmYXVsdCBtZW1vcnkgYWxsb2NhdGlvbiBmdW5jdGlvbnMgd2l0aCBtZW1vcnkgbGltaXRhdGlvbiAqLwpzdGF0aWMgaW5saW5lIHNpemVfdApqc21fdHJhY2VfbWFsbG9jX3VzYWJsZV9zaXplKHZvaWQqIHB0cikgewojaWYgZGVmaW5lZChfX0FQUExFX18pCiAgcmV0dXJuIG1hbGxvY19zaXplKHB0cik7CiNlbGlmIGRlZmluZWQoX1dJTjMyKQogIHJldHVybiBfbXNpemUocHRyKTsKI2VsaWYgZGVmaW5lZChFTVNDUklQVEVOKSB8fCBkZWZpbmVkKF9fZGlldGxpYmNfXykgfHwgZGVmaW5lZChfX01TWVNfXykgfHwgZGVmaW5lZChET05UX0hBVkVfTUFMTE9DX1VTQUJMRV9TSVpFKQogIHJldHVybiAwOwojZWxpZiBkZWZpbmVkKF9fbGludXhfXykgfHwgZGVmaW5lZChIQVZFX01BTExPQ19VU0FCTEVfU0laRSkKICByZXR1cm4gbWFsbG9jX3VzYWJsZV9zaXplKHB0cik7CiNlbHNlCiAgLyogY2hhbmdlIHRoaXMgdG8gYHJldHVybiAwO2AgaWYgY29tcGlsYXRpb24gZmFpbHMgKi8KICByZXR1cm4gbWFsbG9jX3VzYWJsZV9zaXplKHB0cik7CiNlbmRpZgp9CgpzdGF0aWMgdm9pZAojaWZkZWYgX1dJTjMyCiAgICAvKiBtaW5ndyBwcmludGYgaXMgdXNlZCAqLwogICAgX19hdHRyaWJ1dGVfXygoZm9ybWF0KGdudV9wcmludGYsIDIsIDMpKSkKI2Vsc2UKICAgIF9fYXR0cmlidXRlX18oKGZvcm1hdChwcmludGYsIDIsIDMpKSkKI2VuZGlmCiAgICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihKU01hbGxvY1N0YXRlKiBzLCBjb25zdCBjaGFyKiBmbXQsIC4uLikgewogIHZhX2xpc3QgYXA7CiAgaW50IGM7CgogIHZhX3N0YXJ0KGFwLCBmbXQpOwogIHdoaWxlKChjID0gKmZtdCsrKSAhPSAnXDAnKSB7CiAgICBpZihjID09ICclJykgewogICAgICAvKiBvbmx5IGhhbmRsZSAlcCBhbmQgJXpkICovCiAgICAgIGlmKCpmbXQgPT0gJ3AnKSB7CiAgICAgICAgdWludDhfdCogcHRyID0gdmFfYXJnKGFwLCB2b2lkKik7CiAgICAgICAgaWYocHRyID09IDApIHsKICAgICAgICAgIHByaW50ZigiMCIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwcmludGYoIkglKzA2bGxkLiV6ZCIsIGpzbV90cmFjZV9tYWxsb2NfcHRyX29mZnNldChwdHIsIHMtPm9wYXF1ZSksIGpzbV90cmFjZV9tYWxsb2NfdXNhYmxlX3NpemUocHRyKSk7CiAgICAgICAgfQogICAgICAgIGZtdCsrOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmKGZtdFswXSA9PSAneicgJiYgZm10WzFdID09ICdkJykgewogICAgICAgIHNpemVfdCBzeiA9IHZhX2FyZyhhcCwgc2l6ZV90KTsKICAgICAgICBwcmludGYoIiV6ZCIsIHN6KTsKICAgICAgICBmbXQgKz0gMjsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogICAgcHV0YyhjLCBzdGRvdXQpOwogIH0KICB2YV9lbmQoYXApOwp9CgpzdGF0aWMgdm9pZApqc21fdHJhY2VfbWFsbG9jX2luaXQoc3RydWN0IHRyYWNlX21hbGxvY19kYXRhKiBzKSB7CiAgZnJlZShzLT5iYXNlID0gbWFsbG9jKDgpKTsKfQoKc3RhdGljIHZvaWQqCmpzbV90cmFjZV9tYWxsb2MoSlNNYWxsb2NTdGF0ZSogcywgc2l6ZV90IHNpemUpIHsKICB2b2lkKiBwdHI7CgogIC8qIERvIG5vdCBhbGxvY2F0ZSB6ZXJvIGJ5dGVzOiBiZWhhdmlvciBpcyBwbGF0Zm9ybSBkZXBlbmRlbnQgKi8KICBhc3NlcnQoc2l6ZSAhPSAwKTsKCiAgaWYodW5saWtlbHkocy0+bWFsbG9jX3NpemUgKyBzaXplID4gcy0+bWFsbG9jX2xpbWl0KSkKICAgIHJldHVybiAwOwogIHB0ciA9IG1hbGxvYyhzaXplKTsKICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiQSAlemQgLT4gJXBcbiIsIHNpemUsIHB0cik7CiAgaWYocHRyKSB7CiAgICBzLT5tYWxsb2NfY291bnQrKzsKICAgIHMtPm1hbGxvY19zaXplICs9IGpzbV90cmFjZV9tYWxsb2NfdXNhYmxlX3NpemUocHRyKSArIE1BTExPQ19PVkVSSEVBRDsKICB9CiAgcmV0dXJuIHB0cjsKfQoKc3RhdGljIHZvaWQKanNtX3RyYWNlX2ZyZWUoSlNNYWxsb2NTdGF0ZSogcywgdm9pZCogcHRyKSB7CiAgaWYoIXB0cikKICAgIHJldHVybjsKCiAganNtX3RyYWNlX21hbGxvY19wcmludGYocywgIkYgJXBcbiIsIHB0cik7CiAgcy0+bWFsbG9jX2NvdW50LS07CiAgcy0+bWFsbG9jX3NpemUgLT0ganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZShwdHIpICsgTUFMTE9DX09WRVJIRUFEOwogIGZyZWUocHRyKTsKfQoKc3RhdGljIHZvaWQqCmpzbV90cmFjZV9yZWFsbG9jKEpTTWFsbG9jU3RhdGUqIHMsIHZvaWQqIHB0ciwgc2l6ZV90IHNpemUpIHsKICBzaXplX3Qgb2xkX3NpemU7CgogIGlmKCFwdHIpIHsKICAgIGlmKHNpemUgPT0gMCkKICAgICAgcmV0dXJuIDA7CiAgICByZXR1cm4ganNtX3RyYWNlX21hbGxvYyhzLCBzaXplKTsKICB9CiAgb2xkX3NpemUgPSBqc21fdHJhY2VfbWFsbG9jX3VzYWJsZV9zaXplKHB0cik7CiAgaWYoc2l6ZSA9PSAwKSB7CiAgICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiUiAlemQgJXBcbiIsIHNpemUsIHB0cik7CiAgICBzLT5tYWxsb2NfY291bnQtLTsKICAgIHMtPm1hbGxvY19zaXplIC09IG9sZF9zaXplICsgTUFMTE9DX09WRVJIRUFEOwogICAgZnJlZShwdHIpOwogICAgcmV0dXJuIDA7CiAgfQogIGlmKHMtPm1hbGxvY19zaXplICsgc2l6ZSAtIG9sZF9zaXplID4gcy0+bWFsbG9jX2xpbWl0KQogICAgcmV0dXJuIDA7CgogIGpzbV90cmFjZV9tYWxsb2NfcHJpbnRmKHMsICJSICV6ZCAlcCIsIHNpemUsIHB0cik7CgogIHB0ciA9IHJlYWxsb2MocHRyLCBzaXplKTsKICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiIC0+ICVwXG4iLCBwdHIpOwogIGlmKHB0cikgewogICAgcy0+bWFsbG9jX3NpemUgKz0ganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZShwdHIpIC0gb2xkX3NpemU7CiAgfQogIHJldHVybiBwdHI7Cn0KCnN0YXRpYyBjb25zdCBKU01hbGxvY0Z1bmN0aW9ucyB0cmFjZV9tZiA9IHsKICAgIGpzbV90cmFjZV9tYWxsb2MsCiAgICBqc21fdHJhY2VfZnJlZSwKICAgIGpzbV90cmFjZV9yZWFsbG9jLAojaWYgZGVmaW5lZChfX0FQUExFX18pCiAgICBtYWxsb2Nfc2l6ZSwKI2VsaWYgZGVmaW5lZChfV0lOMzIpCiAgICAoc2l6ZV90KCopKGNvbnN0IHZvaWQqKSlfbXNpemUsCiNlbGlmIGRlZmluZWQoRU1TQ1JJUFRFTikgfHwgZGVmaW5lZChfX2RpZXRsaWJjX18pIHx8IGRlZmluZWQoX19NU1lTX18pIHx8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogICAgZGVmaW5lZChET05UX0hBVkVfTUFMTE9DX1VTQUJMRV9TSVpFX0RFRklOSVRJT04pCiAgICAwLAojZWxpZiBkZWZpbmVkKF9fbGludXhfXykgfHwgZGVmaW5lZChIQVZFX01BTExPQ19VU0FCTEVfU0laRSkKICAgIChzaXplX3QoKikoY29uc3Qgdm9pZCopKW1hbGxvY191c2FibGVfc2l6ZSwKI2Vsc2UKICAgIC8qIGNoYW5nZSB0aGlzIHRvIGAwLGAgaWYgY29tcGlsYXRpb24gZmFpbHMgKi8KICAgIG1hbGxvY191c2FibGVfc2l6ZSwKI2VuZGlmCn07CgojZGVmaW5lIFBST0dfTkFNRSAicWpzbSIKCnZvaWQKanNtX2hlbHAodm9pZCkgewogIHByaW50ZigiUXVpY2tKUyB2ZXJzaW9uICIgQ09ORklHX1ZFUlNJT04gIlxuIgogICAgICAgICAidXNhZ2U6ICIgUFJPR19OQU1FICIgW29wdGlvbnNdIFtmaWxlIFthcmdzXV1cbiIKICAgICAgICAgIi1oICAtLWhlbHAgICAgICAgICBsaXN0IG9wdGlvbnNcbiIKICAgICAgICAgIi1lICAtLWV2YWwgRVhQUiAgICBldmFsdWF0ZSBFWFBSXG4iCiAgICAgICAgICItaSAgLS1pbnRlcmFjdGl2ZSAgZ28gdG8gaW50ZXJhY3RpdmUgbW9kZVxuIgogICAgICAgICAiLW0gIC0tbW9kdWxlIE5BTUUgIGxvYWQgYW4gRVM2IG1vZHVsZVxuIgogICAgICAgICAiLUkgIC0taW5jbHVkZSBmaWxlIGluY2x1ZGUgYW4gYWRkaXRpb25hbCBmaWxlXG4iCiAgICAgICAgICIgICAgLS1zdGQgICAgICAgICAgbWFrZSAnc3RkJyBhbmQgJ29zJyBhdmFpbGFibGUgdG8gdGhlIGxvYWRlZCBzY3JpcHRcbiIKI2lmZGVmIENPTkZJR19CSUdOVU0KICAgICAgICAgIiAgICAtLW5vLWJpZ251bSAgICBkaXNhYmxlIHRoZSBiaWdudW0gZXh0ZW5zaW9ucyAoQmlnRmxvYXQsICIKICAgICAgICAgIkJpZ0RlY2ltYWwpXG4iCiAgICAgICAgICIgICAgLS1xanNjYWxjICAgICAgbG9hZCB0aGUgUUpTQ2FsYyBydW50aW1lIChkZWZhdWx0IGlmIGludm9rZWQgYXMgIgogICAgICAgICAicWpzY2FsYylcbiIKI2VuZGlmCiAgICAgICAgICItVCAgLS10cmFjZSAgICAgICAgdHJhY2UgbWVtb3J5IGFsbG9jYXRpb25cbiIKICAgICAgICAgIi1kICAtLWR1bXAgICAgICAgICBkdW1wIHRoZSBtZW1vcnkgdXNhZ2Ugc3RhdHNcbiIKICAgICAgICAgIiAgICAtLW1lbW9yeS1saW1pdCBuICAgICAgIGxpbWl0IHRoZSBtZW1vcnkgdXNhZ2UgdG8gJ24nIGJ5dGVzXG4iCiAgICAgICAgICIgICAgLS1zdGFjay1zaXplIG4gICAgICAgICBsaW1pdCB0aGUgc3RhY2sgc2l6ZSB0byAnbicgYnl0ZXNcbiIKICAgICAgICAgIiAgICAtLXVuaGFuZGxlZC1yZWplY3Rpb24gIGR1bXAgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uc1xuIgogICAgICAgICAiLXEgIC0tcXVpdCAgICAgICAgIGp1c3QgaW5zdGFudGlhdGUgdGhlIGludGVycHJldGVyIGFuZCBxdWl0XG4iKTsKICBleGl0KDEpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc21fZXZhbF9zY3JpcHQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBtYWdpYykgewogIGNvbnN0IGNoYXIqIHN0cjsKICBzaXplX3QgbGVuOwogIEpTVmFsdWUgcmV0OwogIGludDMyX3QgbW9kdWxlOwogIHN0ciA9IEpTX1RvQ1N0cmluZ0xlbihjdHgsICZsZW4sIGFyZ3ZbMF0pOwogIGlmKGFyZ2MgPiAxKQogICAgSlNfVG9JbnQzMihjdHgsICZtb2R1bGUsIGFyZ3ZbMV0pOwogIGVsc2UKICAgIG1vZHVsZSA9IHN0cl9lbmRzKHN0ciwgIi5tanMiKTsKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgMDogewogICAgICByZXQgPSBqc21fZXZhbF9maWxlKGN0eCwgc3RyLCBtb2R1bGUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgMTogewogICAgICByZXQgPSBqc19ldmFsX2J1ZihjdHgsIHN0ciwgbGVuLCAiPGlucHV0PiIsIG1vZHVsZSk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICBpZihKU19Jc0V4Y2VwdGlvbihyZXQpKSB7CiAgICBpZihKU19Jc051bGwoSlNfR2V0UnVudGltZShjdHgpLT5jdXJyZW50X2V4Y2VwdGlvbikpIHsKICAgICAgSlNfR2V0RXhjZXB0aW9uKGN0eCk7CiAgICAgIHJldCA9IEpTX1VOREVGSU5FRDsKICAgIH0KICB9CiAgaWYoSlNfVkFMVUVfR0VUX1RBRyhyZXQpID09IEpTX1RBR19NT0RVTEUpIHsKICAgIEpTTW9kdWxlRGVmKiBkZWYgPSBKU19WQUxVRV9HRVRfUFRSKHJldCk7CiAgICBKU1ZhbHVlIG9iaiA9IEpTX05ld09iamVjdChjdHgpOwogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvYmosICJuYW1lIiwgbW9kdWxlX25hbWUoY3R4LCBkZWYpKTsKICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAiZXhwb3J0cyIsIG1vZHVsZV9leHBvcnRzKGN0eCwgZGVmKSk7CiAgICByZXQgPSBvYmo7CiAgfQogIEpTX0ZyZWVDU3RyaW5nKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9CgplbnVtIHsKICBGSU5EX01PRFVMRSwKICBMT0FEX01PRFVMRSwKICBSRVNPTFZFX01PRFVMRSwKICBHRVRfTU9EVUxFX05BTUUsCiAgR0VUX01PRFVMRV9PQkpFQ1QsCiAgR0VUX01PRFVMRV9FWFBPUlRTLAogIEdFVF9NT0RVTEVfTkFNRVNQQUNFLAogIEdFVF9NT0RVTEVfRlVOQ1RJT04sCiAgR0VUX01PRFVMRV9FWENFUFRJT04sCiAgR0VUX01PRFVMRV9NRVRBX09CSgp9OwoKc3RhdGljIEpTVmFsdWUKanNtX21vZHVsZV9mdW5jKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbWFnaWMpIHsKICBKU1ZhbHVlIHZhbCA9IEpTX0VYQ0VQVElPTjsKICBKU01vZHVsZURlZiogZGVmID0gMDsKICBjb25zdCBjaGFyKiBuYW1lID0gMDsKCiAgaWYobWFnaWMgPj0gR0VUX01PRFVMRV9OQU1FKSB7CiAgICBpZighKGRlZiA9IGpzX21vZHVsZV9kZWYoY3R4LCBhcmd2WzBdKSkpCiAgICAgIHJldHVybiBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJhcmd1bWVudCAxIGV4cGVjdGluZyBtb2R1bGUiKTsKICB9IGVsc2UgewogICAgbmFtZSA9IEpTX1RvQ1N0cmluZyhjdHgsIGFyZ3ZbMF0pOwogIH0KCiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIEZJTkRfTU9EVUxFOiB7CiAgICAgIGRlZiA9IGpzX21vZHVsZV9maW5kKGN0eCwgbmFtZSk7CiAgICAgIHZhbCA9IEpTX0R1cFZhbHVlKGN0eCwgSlNfTUtQVFIoSlNfVEFHX01PRFVMRSwgZGVmKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBMT0FEX01PRFVMRTogewogICAgICBJbXBvcnREaXJlY3RpdmUgaW1wOwogICAgICBtZW1zZXQoJmltcCwgMCwgc2l6ZW9mKGltcCkpOwogICAgICBpbnQgciwgbiA9IGNvdW50b2YoaW1wLmFyZ3MpOwogICAgICByID0ganNfc3Rydl9jb3B5cyhjdHgsIGFyZ2MsIGFyZ3YsIG4sIGltcC5hcmdzKTsKICAgICAgcHJpbnRmKCJMT0FEX01PRFVMRSByPSVpIGFyZ2M9JWlcbiIsIHIsIGFyZ2MpOwoKICAgICAgSlNWYWx1ZSB2YWwgPSBqc19pbXBvcnRfZXZhbChjdHgsIGltcCk7CgogICAgICBpZigoZGVmID0ganNfbW9kdWxlX2ZpbmQoY3R4LCBpbXAucGF0aCkpKQogICAgICAgIHZhbCA9IEpTX01LUFRSKEpTX1RBR19NT0RVTEUsIGRlZik7CgogICAgICBqc19zdHJ2X2ZyZWVfbihjdHgsIG4sIGltcC5hcmdzKTsKICAgICAgLyoKICAgICAgZm9yKG4gPSAwOyBuIDwgY291bnRvZihpbXAuYXJncyk7IG4rKykgewogICAgICAgIGlmKGltcC5hcmdzW25dKQogICAgICAgICAganNfZnJlZShjdHgsIGltcC5hcmdzW25dKTsKICAgICAgfSovCiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBSRVNPTFZFX01PRFVMRTogewogICAgICB2YWwgPSBKU19OZXdJbnQzMihjdHgsIEpTX1Jlc29sdmVNb2R1bGUoY3R4LCBKU19NS1BUUihKU19UQUdfTU9EVUxFLCBkZWYpKSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBHRVRfTU9EVUxFX05BTUU6IHsKICAgICAgdmFsID0gbW9kdWxlX25hbWUoY3R4LCBkZWYpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgR0VUX01PRFVMRV9PQkpFQ1Q6IHsKICAgICAgdmFsID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgdmFsLCAibmFtZSIsIG1vZHVsZV9uYW1lKGN0eCwgZGVmKSk7CiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgdmFsLCAicmVzb2x2ZWQiLCBKU19OZXdCb29sKGN0eCwgZGVmLT5yZXNvbHZlZCkpOwogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgImZ1bmNfY3JlYXRlZCIsIEpTX05ld0Jvb2woY3R4LCBkZWYtPmZ1bmNfY3JlYXRlZCkpOwogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgImluc3RhbnRpYXRlZCIsIEpTX05ld0Jvb2woY3R4LCBkZWYtPmluc3RhbnRpYXRlZCkpOwogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgImV2YWx1YXRlZCIsIEpTX05ld0Jvb2woY3R4LCBkZWYtPmV2YWx1YXRlZCkpOwogICAgICBpZihkZWYtPmV2YWxfaGFzX2V4Y2VwdGlvbikKICAgICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgImV4Y2VwdGlvbiIsIEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5ldmFsX2V4Y2VwdGlvbikpOwogICAgICBpZighSlNfSXNVbmRlZmluZWQoZGVmLT5tb2R1bGVfbnMpKQogICAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgdmFsLCAibmFtZXNwYWNlIiwgSlNfRHVwVmFsdWUoY3R4LCBkZWYtPm1vZHVsZV9ucykpOwogICAgICBpZighSlNfSXNVbmRlZmluZWQoZGVmLT5mdW5jX29iaikpCiAgICAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCB2YWwsICJmdW5jIiwgSlNfRHVwVmFsdWUoY3R4LCBkZWYtPmZ1bmNfb2JqKSk7CiAgICAgIGlmKCFKU19Jc1VuZGVmaW5lZChkZWYtPm1ldGFfb2JqKSkKICAgICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgIm1ldGEiLCBKU19EdXBWYWx1ZShjdHgsIGRlZi0+bWV0YV9vYmopKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfRVhQT1JUUzogewogICAgICB2YWwgPSBtb2R1bGVfZXhwb3J0cyhjdHgsIGRlZik7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBHRVRfTU9EVUxFX05BTUVTUEFDRTogewogICAgICB2YWwgPSBKU19EdXBWYWx1ZShjdHgsIGRlZi0+bW9kdWxlX25zKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfRlVOQ1RJT046IHsKICAgICAgaWYoVFJVRSB8fCBkZWYtPmZ1bmNfY3JlYXRlZCkKICAgICAgICB2YWwgPSBKU19EdXBWYWx1ZShjdHgsIGRlZi0+ZnVuY19vYmopOwogICAgICBlbHNlCiAgICAgICAgdmFsID0gSlNfTlVMTDsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfRVhDRVBUSU9OOiB7CiAgICAgIGlmKGRlZi0+ZXZhbF9oYXNfZXhjZXB0aW9uKQogICAgICAgIHZhbCA9IEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5ldmFsX2V4Y2VwdGlvbik7CiAgICAgIGVsc2UKICAgICAgICB2YWwgPSBKU19OVUxMOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgR0VUX01PRFVMRV9NRVRBX09CSjogewogICAgICB2YWwgPSBKU19EdXBWYWx1ZShjdHgsIGRlZi0+bWV0YV9vYmopOwogICAgICBicmVhazsKICAgIH0KICB9CiAgaWYobmFtZSkKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbmFtZSk7CgogIHJldHVybiB2YWw7Cn0KCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc21fZ2xvYmFsX2Z1bmNzW10gPSB7CiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImV2YWxGaWxlIiwgMSwganNtX2V2YWxfc2NyaXB0LCAwKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZXZhbFNjcmlwdCIsIDEsIGpzbV9ldmFsX3NjcmlwdCwgMSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibW9kdWxlTGlzdCIsIGpzX21vZHVsZXNfYXJyYXksIDAsIDApLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoIm1vZHVsZU9iamVjdCIsIGpzX21vZHVsZXNfb2JqZWN0LCAwLCAwKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJtb2R1bGVNYXAiLCBqc19tb2R1bGVzX21hcCwgMCwgMCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImZpbmRNb2R1bGUiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEZJTkRfTU9EVUxFKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigibG9hZE1vZHVsZSIsIDEsIGpzbV9tb2R1bGVfZnVuYywgTE9BRF9NT0RVTEUpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJyZXNvbHZlTW9kdWxlIiwgMSwganNtX21vZHVsZV9mdW5jLCBSRVNPTFZFX01PRFVMRSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldE1vZHVsZU5hbWUiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfTkFNRSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldE1vZHVsZU9iamVjdCIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9PQkpFQ1QpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJnZXRNb2R1bGVFeHBvcnRzIiwgMSwganNtX21vZHVsZV9mdW5jLCBHRVRfTU9EVUxFX0VYUE9SVFMpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJnZXRNb2R1bGVOYW1lc3BhY2UiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfTkFNRVNQQUNFKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0TW9kdWxlRnVuY3Rpb24iLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfRlVOQ1RJT04pLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJnZXRNb2R1bGVFeGNlcHRpb24iLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfRVhDRVBUSU9OKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0TW9kdWxlTWV0YU9iamVjdCIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9NRVRBX09CSiksCn07CgppbnQKbWFpbihpbnQgYXJnYywgY2hhcioqIGFyZ3YpIHsKICBKU1J1bnRpbWUqIHJ0OwogIEpTQ29udGV4dCogY3R4OwogIHN0cnVjdCB0cmFjZV9tYWxsb2NfZGF0YSB0cmFjZV9kYXRhID0gezB9OwogIGludCBvcHRpbmQ7CiAgY2hhciogZXhwciA9IDA7CiAgaW50IGludGVyYWN0aXZlID0gMDsKICBpbnQgZHVtcF9tZW1vcnkgPSAwOwogIGludCB0cmFjZV9tZW1vcnkgPSAwOwogIGludCBlbXB0eV9ydW4gPSAwOwogIGludCBtb2R1bGUgPSAxOwogIGludCBsb2FkX3N0ZCA9IDE7CiAgaW50IGR1bXBfdW5oYW5kbGVkX3Byb21pc2VfcmVqZWN0aW9uID0gMDsKICBzaXplX3QgbWVtb3J5X2xpbWl0ID0gMDsKICBjaGFyKiBpbmNsdWRlX2xpc3RbMzJdOwogIGludCBpLCBpbmNsdWRlX2NvdW50ID0gMDsKI2lmZGVmIENPTkZJR19CSUdOVU0KICBpbnQgbG9hZF9qc2NhbGM7CiNlbmRpZgogIHNpemVfdCBzdGFja19zaXplID0gMDsKICBjb25zdCBjaGFyKiBleGVuYW1lOwoKICBwYWNrYWdlX2pzb24gPSBKU19VTkRFRklORUQ7CgogIGluaXRfbGlzdF9oZWFkKCZwb2xsaGFuZGxlcnMpOwoKICB7CiAgICBjb25zdCBjaGFyKiBwOwogICAgZXhlbmFtZSA9IGFyZ3ZbMF07CiAgICBwID0gc3RycmNocihleGVuYW1lLCAnLycpOwogICAgaWYocCkKICAgICAgZXhlbmFtZSA9IHAgKyAxOwogICAgLyogbG9hZCBqc2NhbGMgcnVudGltZSBpZiBpbnZva2VkIGFzICdxanNjYWxjJyAqLwogICAgbG9hZF9qc2NhbGMgPSAhc3RyY21wKGV4ZW5hbWUsICJxanNjYWxjIik7CiAgfQoKICAvKiBjYW5ub3QgdXNlIGdldG9wdCBiZWNhdXNlIHdlIHdhbnQgdG8gcGFzcyB0aGUgY29tbWFuZCBsaW5lIHRvCiAgICAgdGhlIHNjcmlwdCAqLwogIG9wdGluZCA9IDE7CiAgd2hpbGUob3B0aW5kIDwgYXJnYyAmJiAqYXJndltvcHRpbmRdID09ICctJykgewogICAgY2hhciogYXJnID0gYXJndltvcHRpbmRdICsgMTsKICAgIGNvbnN0IGNoYXIqIGxvbmdvcHQgPSAiIjsKICAgIGNvbnN0IGNoYXIqIG9wdGFyZzsKCiAgICAvKiBhIHNpbmdsZSAtIGlzIG5vdCBhbiBvcHRpb24sIGl0IGFsc28gc3RvcHMgYXJndW1lbnQgc2Nhbm5pbmcgKi8KICAgIGlmKCEqYXJnKQogICAgICBicmVhazsKCiAgICBpZihhcmdbMV0pIHsKICAgICAgb3B0YXJnID0gJmFyZ1sxXTsKICAgIH0gZWxzZSB7CiAgICAgIG9wdGFyZyA9IGFyZ3ZbKytvcHRpbmRdOwogICAgfQoKICAgIGlmKCphcmcgPT0gJy0nKSB7CiAgICAgIGxvbmdvcHQgPSBhcmcgKyAxOwogICAgICBhcmcgKz0gc3RybGVuKGFyZyk7CiAgICAgIC8qIC0tIHN0b3BzIGFyZ3VtZW50IHNjYW5uaW5nICovCiAgICAgIGlmKCEqbG9uZ29wdCkKICAgICAgICBicmVhazsKICAgIH0KICAgIGZvcig7ICphcmcgfHwgKmxvbmdvcHQ7IGxvbmdvcHQgPSAiIikgewogICAgICBjaGFyIG9wdCA9ICphcmc7CiAgICAgIGlmKG9wdCkKICAgICAgICBhcmcrKzsKICAgICAgaWYob3B0ID09ICdoJyB8fCBvcHQgPT0gJz8nIHx8ICFzdHJjbXAobG9uZ29wdCwgImhlbHAiKSkgewogICAgICAgIGpzbV9oZWxwKCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYob3B0ID09ICdlJyB8fCAhc3RyY21wKGxvbmdvcHQsICJldmFsIikpIHsKICAgICAgICBpZigqYXJnKSB7CiAgICAgICAgICBleHByID0gYXJnOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGlmKG9wdGluZCA8IGFyZ2MpIHsKICAgICAgICAgIGV4cHIgPSBhcmd2W29wdGluZCsrXTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIiVzOiBtaXNzaW5nIGV4cHJlc3Npb24gZm9yIC1lXG4iLCBleGVuYW1lKTsKICAgICAgICBleGl0KDIpOwogICAgICB9CiAgICAgIGlmKG9wdCA9PSAnSScgfHwgIXN0cmNtcChsb25nb3B0LCAiaW5jbHVkZSIpKSB7CiAgICAgICAgaWYob3B0aW5kID49IGFyZ2MpIHsKICAgICAgICAgIGZwcmludGYoc3RkZXJyLCAiZXhwZWN0aW5nIGZpbGVuYW1lIik7CiAgICAgICAgICBleGl0KDEpOwogICAgICAgIH0KICAgICAgICBpZihpbmNsdWRlX2NvdW50ID49IGNvdW50b2YoaW5jbHVkZV9saXN0KSkgewogICAgICAgICAgZnByaW50ZihzdGRlcnIsICJ0b28gbWFueSBpbmNsdWRlZCBmaWxlcyIpOwogICAgICAgICAgZXhpdCgxKTsKICAgICAgICB9CiAgICAgICAgaW5jbHVkZV9saXN0W2luY2x1ZGVfY291bnQrK10gPSBvcHRhcmc7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYob3B0ID09ICdpJyB8fCAhc3RyY21wKGxvbmdvcHQsICJpbnRlcmFjdGl2ZSIpKSB7CiAgICAgICAgaW50ZXJhY3RpdmUrKzsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZihvcHQgPT0gJ20nIHx8ICFzdHJjbXAobG9uZ29wdCwgIm1vZHVsZSIpKSB7CiAgICAgICAgY29uc3QgY2hhciogbW9kdWxlcyA9IGFyZ3Zbb3B0aW5kXTsKICAgICAgICBzaXplX3QgaSwgbGVuOwoKICAgICAgICBmb3IoaSA9IDA7IG1vZHVsZXNbaV07IGkgKz0gbGVuKSB7CiAgICAgICAgICBsZW4gPSBzdHJfY2hyKCZtb2R1bGVzW2ldLCAnLCcpOwogICAgICAgICAgdmVjdG9yX3B1dHB0cigmbW9kdWxlX2xpc3QsIHN0cl9uZHVwKCZtb2R1bGVzW2ldLCBsZW4pKTsKCiAgICAgICAgICBpZihtb2R1bGVzW2kgKyBsZW5dID09ICcsJykKICAgICAgICAgICAgbGVuKys7CiAgICAgICAgfQoKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZihvcHQgPT0gJ2QnIHx8ICFzdHJjbXAobG9uZ29wdCwgImR1bXAiKSkgewogICAgICAgIGR1bXBfbWVtb3J5Kys7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYob3B0ID09ICdUJyB8fCAhc3RyY21wKGxvbmdvcHQsICJ0cmFjZSIpKSB7CiAgICAgICAgdHJhY2VfbWVtb3J5Kys7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAic3RkIikpIHsKICAgICAgICBsb2FkX3N0ZCA9IDE7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAidW5oYW5kbGVkLXJlamVjdGlvbiIpKSB7CiAgICAgICAgZHVtcF91bmhhbmRsZWRfcHJvbWlzZV9yZWplY3Rpb24gPSAxOwogICAgICAgIGJyZWFrOwogICAgICB9CiNpZmRlZiBDT05GSUdfQklHTlVNCiAgICAgIGlmKCFzdHJjbXAobG9uZ29wdCwgIm5vLWJpZ251bSIpKSB7CiAgICAgICAgYmlnbnVtX2V4dCA9IDA7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAiYmlnbnVtIikpIHsKICAgICAgICBiaWdudW1fZXh0ID0gMTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZighc3RyY21wKGxvbmdvcHQsICJxanNjYWxjIikpIHsKICAgICAgICBsb2FkX2pzY2FsYyA9IDE7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KI2VuZGlmCiAgICAgIGlmKG9wdCA9PSAncScgfHwgIXN0cmNtcChsb25nb3B0LCAicXVpdCIpKSB7CiAgICAgICAgZW1wdHlfcnVuKys7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAibWVtb3J5LWxpbWl0IikpIHsKICAgICAgICBpZihvcHRpbmQgPj0gYXJnYykgewogICAgICAgICAgZnByaW50ZihzdGRlcnIsICJleHBlY3RpbmcgbWVtb3J5IGxpbWl0Iik7CiAgICAgICAgICBleGl0KDEpOwogICAgICAgIH0KICAgICAgICBtZW1vcnlfbGltaXQgPSAoc2l6ZV90KXN0cnRvZChhcmd2W29wdGluZCsrXSwgMCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAic3RhY2stc2l6ZSIpKSB7CiAgICAgICAgaWYob3B0aW5kID49IGFyZ2MpIHsKICAgICAgICAgIGZwcmludGYoc3RkZXJyLCAiZXhwZWN0aW5nIHN0YWNrIHNpemUiKTsKICAgICAgICAgIGV4aXQoMSk7CiAgICAgICAgfQogICAgICAgIHN0YWNrX3NpemUgPSAoc2l6ZV90KXN0cnRvZChhcmd2W29wdGluZCsrXSwgMCk7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgICAgaWYob3B0KSB7CiAgICAgICAgZnByaW50ZihzdGRlcnIsICIlczogdW5rbm93biBvcHRpb24gJy0lYydcbiIsIGV4ZW5hbWUsIG9wdCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgZnByaW50ZihzdGRlcnIsICIlczogdW5rbm93biBvcHRpb24gJy0tJXMnXG4iLCBleGVuYW1lLCBsb25nb3B0KTsKICAgICAgfQogICAgICBqc21faGVscCgpOwogICAgfQogICAgb3B0aW5kKys7CiAgfQoKICB7CiAgICBjb25zdCBjaGFyKiBtb2R1bGVzOwoKICAgIGlmKChtb2R1bGVzID0gZ2V0ZW52KCJERUJVRyIpKSkgewogICAgICBzaXplX3QgaSwgbGVuOwogICAgICBmb3IoaSA9IDA7IG1vZHVsZXNbaV07IGkgKz0gbGVuKSB7CiAgICAgICAgbGVuID0gc3RyX2NocigmbW9kdWxlc1tpXSwgJywnKTsKICAgICAgICB2ZWN0b3JfcHV0cHRyKCZtb2R1bGVfZGVidWcsIHN0cl9uZHVwKCZtb2R1bGVzW2ldLCBsZW4pKTsKCiAgICAgICAgaWYobW9kdWxlc1tpICsgbGVuXSA9PSAnLCcpCiAgICAgICAgICBsZW4rKzsKICAgICAgfQoKICAgICAgaWYodmVjdG9yX2ZpbmRzKCZtb2R1bGVfZGVidWcsICJtb2R1bGVzIikgIT0gLTEpCiAgICAgICAgZGVidWdfbW9kdWxlX2xvYWRlciA9IFRSVUU7CiAgICB9CiAgfQoKICBpZihsb2FkX2pzY2FsYykKICAgIGJpZ251bV9leHQgPSAxOwoKICBpZih0cmFjZV9tZW1vcnkpIHsKICAgIGpzbV90cmFjZV9tYWxsb2NfaW5pdCgmdHJhY2VfZGF0YSk7CiAgICBydCA9IEpTX05ld1J1bnRpbWUyKCZ0cmFjZV9tZiwgJnRyYWNlX2RhdGEpOwogIH0gZWxzZSB7CiAgICBydCA9IEpTX05ld1J1bnRpbWUoKTsKICB9CiAgaWYoIXJ0KSB7CiAgICBmcHJpbnRmKHN0ZGVyciwgIiVzOiBjYW5ub3QgYWxsb2NhdGUgSlMgcnVudGltZVxuIiwgZXhlbmFtZSk7CiAgICBleGl0KDIpOwogIH0KCiAgSlNfU2V0TW9kdWxlTG9hZGVyRnVuYyhydCwgMCwganNtX21vZHVsZV9sb2FkZXIsIDApOwoKICBpZihtZW1vcnlfbGltaXQgIT0gMCkKICAgIEpTX1NldE1lbW9yeUxpbWl0KHJ0LCBtZW1vcnlfbGltaXQpOwogIC8vIGlmIChzdGFja19zaXplICE9IDApCiAgSlNfU2V0TWF4U3RhY2tTaXplKHJ0LCBzdGFja19zaXplICE9IDAgPyBzdGFja19zaXplIDogMjU2ICogMTA0ODU3Nik7CgogIGpzX3N0ZF9zZXRfd29ya2VyX25ld19jb250ZXh0X2Z1bmMoanNtX2NvbnRleHRfbmV3KTsKCiAganNfc3RkX2luaXRfaGFuZGxlcnMocnQpOwogIGN0eCA9IGpzbV9jb250ZXh0X25ldyhydCk7CiAgaWYoIWN0eCkgewogICAgZnByaW50ZihzdGRlcnIsICIlczogY2Fubm90IGFsbG9jYXRlIEpTIGNvbnRleHRcbiIsIGV4ZW5hbWUpOwogICAgZXhpdCgyKTsKICB9CgogIC8qIGxvYWRlciBmb3IgRVM2IG1vZHVsZXMgKi8KICBKU19TZXRNb2R1bGVMb2FkZXJGdW5jKHJ0LCBqc19tb2R1bGVfbm9ybWFsaXplLCBqc21fbW9kdWxlX2xvYWRlciwgMCk7CgogIGlmKGR1bXBfdW5oYW5kbGVkX3Byb21pc2VfcmVqZWN0aW9uKSB7CiAgICBKU19TZXRIb3N0UHJvbWlzZVJlamVjdGlvblRyYWNrZXIocnQsIGpzX3N0ZF9wcm9taXNlX3JlamVjdGlvbl90cmFja2VyLCAwKTsKICB9CgogIGlmKCFlbXB0eV9ydW4pIHsKI2lmZGVmIENPTkZJR19CSUdOVU0KICAgIGlmKGxvYWRfanNjYWxjKSB7CiAgICAgIGpzX2V2YWxfYmluYXJ5KGN0eCwgcWpzY19xanNjYWxjLCBxanNjX3Fqc2NhbGNfc2l6ZSwgMCk7CiAgICB9CiNlbmRpZgogICAganNfc3RkX2FkZF9oZWxwZXJzKGN0eCwgYXJnYyAtIG9wdGluZCwgYXJndiArIG9wdGluZCk7CgogICAgaW50IG51bV9uYXRpdmUsIG51bV9jb21waWxlZDsKCiNkZWZpbmUganNtX2J1aWx0aW5fbmF0aXZlKG5hbWUpIHZlY3Rvcl9wdXRwdHIoJmJ1aWx0aW5zLCAjbmFtZSkKCiAgICBqc21fYnVpbHRpbl9uYXRpdmUoc3RkKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZShvcyk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUoY2hpbGRfcHJvY2Vzcyk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUoZGVlcCk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUoaW5zcGVjdCk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUobGV4ZXIpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKG1pc2MpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKG1tYXApOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHBhdGgpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHBvaW50ZXIpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHByZWRpY2F0ZSk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUocmVwZWF0ZXIpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHRyZWVfd2Fsa2VyKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZSh4bWwpOwogICAgbnVtX25hdGl2ZSA9IHZlY3Rvcl9zaXplKCZidWlsdGlucywgc2l6ZW9mKGNoYXIqKSk7CgogICAgLy8gcHJpbnRmKCJuYXRpdmUgYnVpbHRpbnM6ICIpOyBkdW1wX3ZlY3RvcigmYnVpbHRpbnMsIDApOwoKI2RlZmluZSBqc21fYnVpbHRpbl9jb21waWxlZChuYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcCiAganNfZXZhbF9iaW5hcnkoY3R4LCBxanNjXyMjbmFtZSwgcWpzY18jI25hbWUjI19zaXplLCAwKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIHZlY3Rvcl9wdXRwdHIoJmJ1aWx0aW5zLCAjbmFtZSkKCiAgICBqc21fYnVpbHRpbl9jb21waWxlZChjb25zb2xlKTsKICAgIGpzbV9idWlsdGluX2NvbXBpbGVkKGV2ZW50cyk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChmcyk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChwZXJmX2hvb2tzKTsKICAgIGpzbV9idWlsdGluX2NvbXBpbGVkKHByb2Nlc3MpOwogICAgLy8ganNtX2J1aWx0aW5fY29tcGlsZWQocmVwbCk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChyZXF1aXJlKTsKICAgIGpzbV9idWlsdGluX2NvbXBpbGVkKHR0eSk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZCh1dGlsKTsKCiAgICBudW1fY29tcGlsZWQgPSB2ZWN0b3Jfc2l6ZSgmYnVpbHRpbnMsIHNpemVvZihjaGFyKikpIC0gbnVtX25hdGl2ZTsKCiAgICB7CiAgICAgIGNvbnN0IGNoYXIqIHN0ciA9ICJpbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcbmdsb2JhbFRoaXMucHJvY2VzcyA9IHByb2Nlc3M7XG4iOwogICAgICBqc19ldmFsX3N0cihjdHgsIHN0ciwgIjxpbnB1dD4iLCBKU19FVkFMX1RZUEVfTU9EVUxFKTsKICAgIH0KCiAgICBKU19TZXRQcm9wZXJ0eUZ1bmN0aW9uTGlzdChjdHgsIEpTX0dldEdsb2JhbE9iamVjdChjdHgpLCBqc21fZ2xvYmFsX2Z1bmNzLCBjb3VudG9mKGpzbV9nbG9iYWxfZnVuY3MpKTsKICAgIGlmKGxvYWRfc3RkKSB7CiAgICAgIGNvbnN0IGNoYXIqIHN0ciA9ICJpbXBvcnQgKiBhcyBzdGQgZnJvbSAnc3RkJztcbmltcG9ydCAqIGFzIG9zIGZyb20gIgogICAgICAgICAgICAgICAgICAgICAgICAiJ29zJztcbmdsb2JhbFRoaXMuc3RkID0gIgogICAgICAgICAgICAgICAgICAgICAgICAic3RkO1xuZ2xvYmFsVGhpcy5vcyAiCiAgICAgICAgICAgICAgICAgICAgICAgICI9IG9zO1xuZ2xvYmFsVGhpcy5zZXRUaW1lb3V0ID0gIgogICAgICAgICAgICAgICAgICAgICAgICAib3Muc2V0VGltZW91dDtcbmdsb2JhbFRoaXMuY2xlYXJUaW1lb3V0ID0gIgogICAgICAgICAgICAgICAgICAgICAgICAib3MuY2xlYXJUaW1lb3V0O1xuIjsKICAgICAganNfZXZhbF9zdHIoY3R4LCBzdHIsICI8aW5wdXQ+IiwgSlNfRVZBTF9UWVBFX01PRFVMRSk7CiAgICB9CgogICAgLy8ganNtX2xpc3RfbW9kdWxlcyhjdHgpOwoKICAgIHsKICAgICAgY2hhcioqIG5hbWU7CiAgICAgIEpTTW9kdWxlRGVmKiBtOwogICAgICB2ZWN0b3JfZm9yZWFjaF90KCZtb2R1bGVfbGlzdCwgbmFtZSkgewogICAgICAgIGlmKCEobSA9IGpzX21vZHVsZV9pbXBvcnRfbmFtZXNwYWNlKGN0eCwgKm5hbWUsIDApKSkgewogICAgICAgICAgZnByaW50ZihzdGRlcnIsICJlcnJvciBsb2FkaW5nIG1vZHVsZSAnJXMnXG4iLCAqbmFtZSk7CiAgICAgICAgICBleGl0KDEpOwogICAgICAgIH0KICAgICAgICBmcmVlKCpuYW1lKTsKICAgICAgfQogICAgICB2ZWN0b3JfZnJlZSgmbW9kdWxlX2xpc3QpOwogICAgfQoKICAgIGZvcihpID0gMDsgaSA8IGluY2x1ZGVfY291bnQ7IGkrKykgewogICAgICBpZihqc21fbG9hZF9zY3JpcHQoY3R4LCBpbmNsdWRlX2xpc3RbaV0sIG1vZHVsZSkgPT0gLTEpCiAgICAgICAgZ290byBmYWlsOwogICAgfQoKICAgIGlmKGV4cHIpIHsKICAgICAgaWYoanNfZXZhbF9zdHIoY3R4LCBleHByLCAiPGNtZGxpbmU+IiwgMCkgPT0gLTEpCiAgICAgICAgZ290byBmYWlsOwogICAgfSBlbHNlIGlmKG9wdGluZCA+PSBhcmdjKSB7CiAgICAgIC8qIGludGVyYWN0aXZlIG1vZGUgKi8KICAgICAgaW50ZXJhY3RpdmUgPSAxOwogICAgfSBlbHNlIHsKICAgICAgY29uc3QgY2hhciogZmlsZW5hbWU7CiAgICAgIGZpbGVuYW1lID0gYXJndltvcHRpbmRdOwogICAgICBpZihqc21fbG9hZF9zY3JpcHQoY3R4LCBmaWxlbmFtZSwgbW9kdWxlKSA9PSAtMSkgewogICAgICAgIGpzX3ZhbHVlX2Z3cml0ZShjdHgsIEpTX0dldEV4Y2VwdGlvbihjdHgpLCBzdGRlcnIpOwogICAgICAgIGdvdG8gZmFpbDsKICAgICAgfQogICAgfQogICAgaWYoaW50ZXJhY3RpdmUpIHsKICAgICAgY29uc3QgY2hhciogc3RyID0gImltcG9ydCBSRVBMIGZyb20gJ3JlcGwnOyBnbG9iYWxUaGlzLnJlcGwgPSBuZXcgIgogICAgICAgICAgICAgICAgICAgICAgICAiUkVQTCgncWpzbScpLnJ1blN5bmMoKTtcbiI7CiAgICAgIGpzX2V2YWxfYmluYXJ5KGN0eCwgcWpzY19yZXBsLCBxanNjX3JlcGxfc2l6ZSwgMCk7CiAgICAgIGpzX2V2YWxfc3RyKGN0eCwgc3RyLCAiPGlucHV0PiIsIEpTX0VWQUxfVFlQRV9NT0RVTEUpOwogICAgfQoKICAgIGpzX3N0ZF9sb29wKGN0eCk7CiAgfQoKICB7CgogICAgSlNWYWx1ZSBleGNlcHRpb24gPSBKU19HZXRFeGNlcHRpb24oY3R4KTsKCiAgICBpZighSlNfSXNOdWxsKGV4Y2VwdGlvbikpIHsKICAgICAganNfc3RkX2R1bXBfZXJyb3IoY3R4KTsKICAgIH0KICB9CgogIGlmKGR1bXBfbWVtb3J5KSB7CiAgICBKU01lbW9yeVVzYWdlIHN0YXRzOwogICAgSlNfQ29tcHV0ZU1lbW9yeVVzYWdlKHJ0LCAmc3RhdHMpOwogICAgSlNfRHVtcE1lbW9yeVVzYWdlKHN0ZG91dCwgJnN0YXRzLCBydCk7CiAgfQogIGpzX3N0ZF9mcmVlX2hhbmRsZXJzKHJ0KTsKICBKU19GcmVlQ29udGV4dChjdHgpOwogIEpTX0ZyZWVSdW50aW1lKHJ0KTsKCiAgaWYoZW1wdHlfcnVuICYmIGR1bXBfbWVtb3J5KSB7CiAgICBjbG9ja190IHRbNV07CiAgICBkb3VibGUgYmVzdFs1XTsKICAgIGludCBpLCBqOwogICAgZm9yKGkgPSAwOyBpIDwgMTAwOyBpKyspIHsKICAgICAgdFswXSA9IGNsb2NrKCk7CiAgICAgIHJ0ID0gSlNfTmV3UnVudGltZSgpOwogICAgICB0WzFdID0gY2xvY2soKTsKICAgICAgY3R4ID0gSlNfTmV3Q29udGV4dChydCk7CiAgICAgIHRbMl0gPSBjbG9jaygpOwogICAgICBKU19GcmVlQ29udGV4dChjdHgpOwogICAgICB0WzNdID0gY2xvY2soKTsKICAgICAgSlNfRnJlZVJ1bnRpbWUocnQpOwogICAgICB0WzRdID0gY2xvY2soKTsKICAgICAgZm9yKGogPSA0OyBqID4gMDsgai0tKSB7CiAgICAgICAgZG91YmxlIG1zID0gMTAwMC4wICogKHRbal0gLSB0W2ogLSAxXSkgLyBDTE9DS1NfUEVSX1NFQzsKICAgICAgICBpZihpID09IDAgfHwgYmVzdFtqXSA+IG1zKQogICAgICAgICAgYmVzdFtqXSA9IG1zOwogICAgICB9CiAgICB9CiAgICBwcmludGYoIlxuSW5zdGFudGlhdGlvbiB0aW1lcyAobXMpOiAlLjNmID0gJS4zZislLjNmKyUuM2YrJS4zZlxuIiwKICAgICAgICAgICBiZXN0WzFdICsgYmVzdFsyXSArIGJlc3RbM10gKyBiZXN0WzRdLAogICAgICAgICAgIGJlc3RbMV0sCiAgICAgICAgICAgYmVzdFsyXSwKICAgICAgICAgICBiZXN0WzNdLAogICAgICAgICAgIGJlc3RbNF0pOwogIH0KICByZXR1cm4gMDsKZmFpbDoKICBqc19zdGRfZnJlZV9oYW5kbGVycyhydCk7CiAgSlNfRnJlZUNvbnRleHQoY3R4KTsKICBKU19GcmVlUnVudGltZShydCk7CiAgcmV0dXJuIDE7Cn0KAAAAAAAAAADxbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQDgAAAAAAABAOAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQDgAAAAAAABAOAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "utils.h",
			"settings":
			{
				"buffer_size": 32166,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAnAAAAAAAAAHcAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAnAAAAAAAAAHcAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAaWsAAAAAAABpawAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/fd_set.js",
			"settings":
			{
				"buffer_size": 1176,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " const"
					},
					"BgAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " FD_SIZE"
					},
					"CAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAABMAAAAAAAAAEwAAAAAAAAABAAAARRIAAAAAAAAAEgAAAAAAAAABAAAAWhEAAAAAAAAAEQAAAAAAAAABAAAASQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "ETSIZE"
					},
					"BgAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " 102r4;"
					},
					"BwAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZAAAAAAAAABkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					4,
					"left_delete",
					null,
					"BAAAAB8AAAAAAAAAHwAAAAAAAAABAAAAOx4AAAAAAAAAHgAAAAAAAAABAAAANB0AAAAAAAAAHQAAAAAAAAABAAAAchwAAAAAAAAAHAAAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "24;"
					},
					"AwAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgdG9TdHJpbmcoKSB7CiAgICByZXR1cm4gYFsgJHt0aGlzLmFycmF5LmpvaW4oJywgJyl9IF1gOwogIH0KICBbU3ltYm9sLmluc3BlY3RdKCkgewogICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9TRVQoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gfD0gMSA8PCAoZmQgJiAweDcpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfQ0xSKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICY9IH4oMSA8PCAoZmQgJiAweDcpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0lTU0VUKGZkLCBzZXQpIHsKICByZXR1cm4gISEobmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmICgxIDw8IChmZCAmIDB4NykpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1pFUk8oZmQsIHNldCkgewogIGNvbnN0IGEgPSBuZXcgVWludDhBcnJheShzZXQpOwogIGNvbnN0IG4gPSBhLmxlbmd0aDsKICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSBhW2ldID0gMDsKfQoKZXhwb3J0IGRlZmF1bHQgZmRfc2V0OwoAAAAAAAAAADYEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAABwcUA"
				],
				[
					31,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA2BAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1NFVChmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSB8PSAxIDw8IChmZCAmIDB4Nyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9DTFIoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJj0gfigxIDw8IChmZCAmIDB4NykpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfSVNTRVQoZmQsIHNldCkgewogIHJldHVybiAhIShuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICYgKDEgPDwgKGZkICYgMHg3KSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfWkVSTyhmZCwgc2V0KSB7CiAgY29uc3QgYSA9IG5ldyBVaW50OEFycmF5KHNldCk7CiAgY29uc3QgbiA9IGEubGVuZ3RoOwogIGZvcihsZXQgaSA9IDA7IGkgPCBuOyBpKyspIGFbaV0gPSAwOwp9CgpleHBvcnQgZGVmYXVsdCBmZF9zZXQ7CgAAAAAAAAAAOgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6BAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQoKICBbU3ltYm9sLmluc3BlY3RdKCkgewogICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9TRVQoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gfD0gMSA8PCAoZmQgJiAweDcpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfQ0xSKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICY9IH4oMSA8PCAoZmQgJiAweDcpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0lTU0VUKGZkLCBzZXQpIHsKICByZXR1cm4gISEobmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmICgxIDw8IChmZCAmIDB4NykpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1pFUk8oZmQsIHNldCkgewogIGNvbnN0IGEgPSBuZXcgVWludDhBcnJheShzZXQpOwogIGNvbnN0IG4gPSBhLmxlbmd0aDsKICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSBhW2ldID0gMDsKfQoKZXhwb3J0IGRlZmF1bHQgZmRfc2V0OwoAAAAAAAAAAD4EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA+BAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQovKgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpOwogIH0qLwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmPSB+KDEgPDwgKGZkICYgMHg3KSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9JU1NFVChmZCwgc2V0KSB7CiAgcmV0dXJuICEhKG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJiAoMSA8PCAoZmQgJiAweDcpKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9aRVJPKGZkLCBzZXQpIHsKICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkoc2V0KTsKICBjb25zdCBuID0gYS5sZW5ndGg7CiAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgYVtpXSA9IDA7Cn0KCmV4cG9ydCBkZWZhdWx0IGZkX3NldDsKAAAAAAAAAABiBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABiBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQoKICBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdmZF9zZXQnOwovKgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpOwogIH0qLwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmPSB+KDEgPDwgKGZkICYgMHg3KSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9JU1NFVChmZCwgc2V0KSB7CiAgcmV0dXJuICEhKG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJiAoMSA8PCAoZmQgJiAweDcpKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9aRVJPKGZkLCBzZXQpIHsKICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkoc2V0KTsKICBjb25zdCBuID0gYS5sZW5ndGg7CiAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgYVtpXSA9IDA7Cn0KCmV4cG9ydCBkZWZhdWx0IGZkX3NldDsKAAAAAAAAAAAqBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgLyp0b1N0cmluZygpIHsKICAgIGlmKHRoaXMuYXJyYXkubGVuZ3RoPT0wKXJldHVybiBgW11gOwogICAgcmV0dXJuIGBbICR7dGhpcy5hcnJheS5qb2luKCcsICcpfSBdYDsKICB9Ki8KCiAgW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnZmRfc2V0JzsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1NFVChmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSB8PSAxIDw8IChmZCAmIDB4Nyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9DTFIoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJj0gfigxIDw8IChmZCAmIDB4NykpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfSVNTRVQoZmQsIHNldCkgewogIHJldHVybiAhIShuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICYgKDEgPDwgKGZkICYgMHg3KSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfWkVSTyhmZCwgc2V0KSB7CiAgY29uc3QgYSA9IG5ldyBVaW50OEFycmF5KHNldCk7CiAgY29uc3QgbiA9IGEubGVuZ3RoOwogIGZvcihsZXQgaSA9IDA7IGkgPCBuOyBpKyspIGFbaV0gPSAwOwp9CgpleHBvcnQgZGVmYXVsdCBmZF9zZXQ7CgAAAAAAAAAAhQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACFBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCi8qICB0b1N0cmluZygpIHsKICAgIGlmKHRoaXMuYXJyYXkubGVuZ3RoPT0wKXJldHVybiBgW11gOwogICAgcmV0dXJuIGBbICR7dGhpcy5hcnJheS5qb2luKCcsICcpfSBdYDsKICB9CiovCiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgeyByZXR1cm4gJ2ZkX3NldCc7IH0KCgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gaW5zcGVjdCh0aGlzLmFycmF5LCB7Y29sb3I6IHRydWV9KTsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9TRVQoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gfD0gMSA8PCAoZmQgJiAweDcpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfQ0xSKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICY9IH4oMSA8PCAoZmQgJiAweDcpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0lTU0VUKGZkLCBzZXQpIHsKICByZXR1cm4gISEobmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmICgxIDw8IChmZCAmIDB4NykpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1pFUk8oZmQsIHNldCkgewogIGNvbnN0IGEgPSBuZXcgVWludDhBcnJheShzZXQpOwogIGNvbnN0IG4gPSBhLmxlbmd0aDsKICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSBhW2ldID0gMDsKfQoKZXhwb3J0IGRlZmF1bHQgZmRfc2V0OwoAAAAAAAAAAG4EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcAAAAAAAAAFwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABuBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CgogIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHsKICAgIHJldHVybiAnZmRfc2V0JzsKICB9CgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gYFx4MWJbMTszMW1mZF9zZXRceDFiWzBtIGAgKyBpbnNwZWN0KHRoaXMuYXJyYXksIHsgY29sb3I6IHRydWUgfSk7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmPSB+KDEgPDwgKGZkICYgMHg3KSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9JU1NFVChmZCwgc2V0KSB7CiAgcmV0dXJuICEhKG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJiAoMSA8PCAoZmQgJiAweDcpKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9aRVJPKGZkLCBzZXQpIHsKICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkoc2V0KTsKICBjb25zdCBuID0gYS5sZW5ndGg7CiAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgYVtpXSA9IDA7Cn0KCmV4cG9ydCBkZWZhdWx0IHsgRkRfU0VUU0laRSwgZmRfc2V0LCBGRF9TRVQsIEZEX0NMUiwgRkRfSVNTRVQsIEZEX1pFUk8gfTsKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\nconsole.log"
					},
					"DQAAAPQCAAAAAAAA9QIAAAAAAAAAAAAA9QIAAAAAAAD3AgAAAAAAAAAAAAD3AgAAAAAAAPgCAAAAAAAAAAAAAPgCAAAAAAAA+QIAAAAAAAAAAAAA+QIAAAAAAAD6AgAAAAAAAAAAAAD6AgAAAAAAAPsCAAAAAAAAAAAAAPsCAAAAAAAA/AIAAAAAAAAAAAAA/AIAAAAAAAD9AgAAAAAAAAAAAAD9AgAAAAAAAP4CAAAAAAAAAAAAAP4CAAAAAAAA/wIAAAAAAAAAAAAA/wIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAEDAAAAAAAAAAAAAAEDAAAAAAAAAgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AIAAAAAAAD0AgAAAAAAAP///////+9/"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAIDAAAAAAAABAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgMAAAAAAAACAwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAAMDAAAAAAAABQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwMAAAAAAAADAwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "FD_CLR"
					},
					"BgAAAAQDAAAAAAAABQMAAAAAAAAAAAAABQMAAAAAAAAGAwAAAAAAAAAAAAAGAwAAAAAAAAcDAAAAAAAAAAAAAAcDAAAAAAAACAMAAAAAAAAAAAAACAMAAAAAAAAJAwAAAAAAAAAAAAAJAwAAAAAAAAoDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAMAAAAAAAAEAwAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAsDAAAAAAAADAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwMAAAAAAAALAwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAwDAAAAAAAADgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAMAAAAAAAAMAwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "fd,set"
					},
					"BgAAAA0DAAAAAAAADgMAAAAAAAAAAAAADgMAAAAAAAAPAwAAAAAAAAAAAAAPAwAAAAAAABADAAAAAAAAAAAAABADAAAAAAAAEQMAAAAAAAAAAAAAEQMAAAAAAAASAwAAAAAAAAAAAAASAwAAAAAAABMDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQMAAAAAAAANAwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACUBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CgogIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHsKICAgIHJldHVybiAnZmRfc2V0JzsKICB9CgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gYFx4MWJbMTszMW1mZF9zZXRceDFiWzBtIGAgKyBpbnNwZWN0KHRoaXMuYXJyYXksIHsgY29sb3I6IHRydWUgfSk7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7CiAgY29uc29sZS5sb2coJ0ZEX0NMUicse2ZkLHNldH0pCiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmPSB+KDEgPDwgKGZkICYgMHg3KSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9JU1NFVChmZCwgc2V0KSB7CiAgcmV0dXJuICEhKG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJiAoMSA8PCAoZmQgJiAweDcpKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9aRVJPKGZkLCBzZXQpIHsKICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkoc2V0KTsKICBjb25zdCBuID0gYS5sZW5ndGg7CiAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgYVtpXSA9IDA7Cn0KCmV4cG9ydCBkZWZhdWx0IHsgRkRfU0VUU0laRSwgZmRfc2V0LCBGRF9TRVQsIEZEX0NMUiwgRkRfSVNTRVQsIEZEX1pFUk8gfTsKICAgIAoAAAAAAAAAAJQEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAPUCAAAAAAAA9gIAAAAAAAAAAAAA9gIAAAAAAAD3AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QIAAAAAAAD1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACWBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CgogIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHsKICAgIHJldHVybiAnZmRfc2V0JzsKICB9CgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gYFx4MWJbMTszMW1mZF9zZXRceDFiWzBtIGAgKyBpbnNwZWN0KHRoaXMuYXJyYXksIHsgY29sb3I6IHRydWUgfSk7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7Ci8vICBjb25zb2xlLmxvZygnRkRfQ0xSJywgeyBmZCwgc2V0IH0pOwogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJj0gfigxIDw8IChmZCAmIDB4NykpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfSVNTRVQoZmQsIHNldCkgewogIHJldHVybiAhIShuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICYgKDEgPDwgKGZkICYgMHg3KSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfWkVSTyhmZCwgc2V0KSB7CiAgY29uc3QgYSA9IG5ldyBVaW50OEFycmF5KHNldCk7CiAgY29uc3QgbiA9IGEubGVuZ3RoOwogIGZvcihsZXQgaSA9IDA7IGkgPCBuOyBpKyspIGFbaV0gPSAwOwp9CgpleHBvcnQgZGVmYXVsdCB7IEZEX1NFVFNJWkUsIGZkX3NldCwgRkRfU0VULCBGRF9DTFIsIEZEX0lTU0VULCBGRF9aRVJPIH07CgAAAAAAAAAAmAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wIAAAAAAAD3AgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.clang-format",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fd_set.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/test-socklen_t.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-socklen_t.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.prettierrc",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-fd_set.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-fdset.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_location.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/usr/include/x86_64-linux-gnu/bits/syscall.h",
		"/usr/include/x86_64-linux-gnu/sys/syscall.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inspect.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_qjsm.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/Findpigpio.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/pigpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/README",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stringdecoder.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/pigpio/pigpiod_if2.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/pigpio/pigpio.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/test-gpio.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-predicate.c"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"SockAddr\\* a",
			"sa;",
			"sa->s[^a]",
			"sa->s",
			"socket_send",
			"SOCKET_",
			"_PROP",
			"SOCKADDR_PROP",
			"SOCKET_METHOD_RECVFROM",
			"JS_NewArrayBuffer",
			"^js_strv",
			"js_strv",
			"argv_free",
			"js_is_nullis",
			"528",
			"\"jsm*_module_lo",
			"\"js_module_lo",
			"\"js_module",
			"FD_SETSIZE",
			"struct ",
			"import_",
			"array_to",
			"LOAD_MOD",
			"path;",
			"\"js_eval",
			"import_def",
			"import",
			"imp->",
			"dbuf_",
			"putstr",
			"va_start",
			"^dbuf_",
			", Dyn",
			"LOAD_MODULE",
			"\"loadMod",
			"^js_module",
			"js_module",
			"module_import",
			"import_name",
			"LIB_MOD",
			"syscallerr",
			"syscaller",
			"syscallerr",
			"evalbin",
			"JS_CONSTANT",
			"lookupModule",
			"compile_mo",
			"JS_CGETSET_MAGIC_DEF",
			"cxt,",
			"JS_DupValue.*TAG_MODULE",
			"modules_obj",
			"js_modules_entries",
			"$",
			"\"moduleList",
			"\"module",
			"basename",
			"_const",
			"_constructor",
			"if((def = js_module_get(ctx, argv[0])))",
			"GET_MODULE_NAME",
			"namestr",
			"module_name",
			"[^a-z0-9_]module_(ns|name|func|exports)",
			"module_(ns|name|func|exports)",
			"this_val",
			"this_vakl",
			"JS_DefineProp",
			"^js_module",
			"filename",
			"JSValue\\)",
			"^static ",
			"module_loader_so",
			"JSModuleDef",
			"#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\\n*",
			"js_eval_file",
			"jsm*_eval_buf",
			"jsm_eval",
			", ",
			"[^a-z0-9_]module_[a-z]+",
			"[^a-z0-9]module_[a-z]+",
			"module_[a-z]+",
			"module_name",
			"filename",
			"module_",
			"filename",
			"module_[a-z0-9_]+",
			"module_[a-z0-9_]\\+",
			"module_[a-z0-9_]*;",
			"module_[a-z]*",
			"module_name",
			"jsm_module_loader_path",
			"jsm_normalize_module",
			"jsm_module_loader_so",
			"module_loader",
			"^js_module",
			"jsm_module_loader",
			"jsm_module_loader_path",
			"sab_",
			"JSSABHeader",
			"jsm_eval_file",
			"jsm_eval_buf",
			".jsm_[a-z0-9_]*\\(",
			".jsm_",
			" jsm_",
			"jsm_",
			"jsm*_load_file",
			"jsm_load_script",
			"load_script",
			"jsm_load_script",
			"eval_script",
			"js_eval_script",
			"jsm_eval",
			"jsm_find_module",
			"js_default_module_path",
			"extern",
			"ext",
			"extern",
			"extern ",
			"jsm_eval_file",
			"js_eval_file",
			"jsm_eval_file",
			"jsm_load_module",
			"jsm_load_script",
			"jsm_eval_str",
			"jsm_module_list",
			"default_module",
			"jsm_default_module",
			"jsm_find_module"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"imp.",
			"ctx,",
			"",
			"JSValueConst)",
			"",
			"jsm_module_loader",
			"js_module_loader_so",
			"js_eval_file",
			"js_eval_buf",
			"js_load_script",
			"jsm_eval_script",
			"js_eval_file",
			"js_load_module",
			"js_eval_str",
			"js_module_get",
			"JSValueConst)",
			"js_module_search",
			"jsm_module_find",
			"js_module_find",
			"js_load_",
			"js_load_module",
			"js_eval_buf",
			"js_load_script",
			"js_std_dump_error",
			"js_module_exports",
			"fdset",
			" ",
			"js_input_buffer",
			"\\1(\\2, sock",
			"\\1(",
			"",
			"JS_CGETSET_MAGIC_DEF",
			"off.",
			"} else if(",
			"port",
			".buf",
			"'",
			"",
			"socket_send",
			"0x00",
			" 0x00,",
			"0x78,",
			"0x78",
			" 0x00,",
			"0x78",
			"JS_CGETSET_MAGIC_DEF",
			"socket_syscalls_size",
			"js_syscallerror_get, js_syscallerror_set,",
			"js_socket_get, js_socket_set, ",
			"e",
			"js_syscallerror_proto_funcs",
			"s.fd",
			"js_socket_proto_funcs",
			"\"",
			"SYSCALLERROR_VALUEOF",
			"s, ",
			"JS_SOCKETCALL",
			"JS_SOCKETCALL_RETURN",
			"js_socket_data2(ctx",
			"sa->family",
			"QUICKJS_SYSCALLERROR_H",
			"data2",
			"js_syscallerror_data2",
			"QUICKJS_MISC_H",
			"js_sockets_defines",
			"js_sockaddr_data2",
			"js_sockaddr_data",
			"SockAddr",
			"struct sockaddr*",
			"sockets_init",
			"argv[i]",
			"pigpio",
			"CHAR_UTILS",
			"${util_SOURCES}",
			"ol.",
			"range_from",
			".range.length",
			".range.offset",
			"input_buffer_length(in)",
			"input_buffer_data(in)",
			"blob",
			"location->vec",
			"location",
			"Location",
			"r->data\\1",
			" this.fs.",
			"stringdecoder",
			"js_stringdecoder_set",
			"js_stringdecoder_get",
			"stringdecoder",
			"\\1if(gpio->debug) fprintf",
			"struct gpio",
			"struct GPIO",
			"struct GPIO*",
			"ctx->rt",
			"",
			": ",
			"\"",
			"ret = \\1;",
			"->errnum",
			"(",
			"error",
			"JS_NewInt32",
			"",
			",",
			"left, right",
			"predicate_nextarg(ctx, &args)",
			"predicate_nextarg(ctx, &args),predicate_nextarg(ctx, &args))",
			"predicate_argument_shift(ctx, &args)",
			"js_arguments_shift(&args)",
			"",
			"ret = PRECEDENCE_",
			"args",
			"",
			"dbuf",
			": left",
			"pred",
			"args->",
			"r",
			"predicate_value",
			"",
			"'x'",
			"0",
			"\\1this.last_cmd",
			"\\1this.cmd",
			"level",
			"cmd",
			"  "
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"current_file": null,
							"outline_rename_mode": false,
							"symkeys":
							[
							],
							"symlist":
							[
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 3,
							"tabs_extra_last_activated": 1631935971.44,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 52189,
						"regions":
						{
						},
						"selection":
						[
							[
								39852,
								39852
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631933400.49,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26639.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tests/test_lexer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7221,
						"regions":
						{
						},
						"selection":
						[
							[
								7218,
								7218
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631933976.83,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3672.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs-sockets.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44427,
						"regions":
						{
						},
						"selection":
						[
							[
								6286,
								6297
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631937229.27,
							"tabs_extra_last_activated_sheet_index": 2,
							"tabs_extra_moving":
							[
								7,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2771.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/roman/Projects/plot-cv/quickjs/quickjs.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42478,
						"regions":
						{
						},
						"selection":
						[
							[
								30335,
								30335
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 4,
							"tabs_extra_last_activated": 1631935522.02,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13481.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs-archive.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38520,
						"regions":
						{
						},
						"selection":
						[
							[
								1521,
								1705
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631935522.86,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 646.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs-sockets.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2885,
						"regions":
						{
						},
						"selection":
						[
							[
								175,
								175
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631937229.62,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "char-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7580,
						"regions":
						{
						},
						"selection":
						[
							[
								850,
								850
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631933402.33,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26903,
						"regions":
						{
						},
						"selection":
						[
							[
								14400,
								14400
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631933400.94,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9214.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "utils.h",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32166,
						"regions":
						{
						},
						"selection":
						[
							[
								27497,
								27497
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631937230.94,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15096.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/fd_set.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1176,
						"regions":
						{
						},
						"selection":
						[
							[
								759,
								759
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631935524.09,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"ockets.",
				"quickjs-sockets.h"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"test_loca",
				"tests/test_location.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				".clang-fo",
				".clang-format"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"buff",
				"buffer-utils.c"
			],
			[
				"buffer-util",
				"buffer-utils.c"
			],
			[
				"buffer-utils.c",
				"buffer-utils.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-so",
				"quickjs-sockets.c"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"quickjs-insp",
				"quickjs-inspect.c"
			],
			[
				"test_soc",
				"tests/test_sockets.js"
			],
			[
				"",
				"CMakeLists.txt"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"test_qjsm",
				"tests/test_qjsm.js"
			],
			[
				"buffer-tu",
				"buffer-utils.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"repl.",
				"lib/repl.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"quickjs-blo",
				"quickjs-blob.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"test_mis",
				"tests/test_misc.js"
			],
			[
				"test_blob",
				"tests/test_blob.js"
			],
			[
				"test_string",
				"tests/test_stringdecoder.js"
			],
			[
				"test_str",
				"tests/test_stringdecoder.js"
			],
			[
				"quickjs-blb",
				"quickjs-blob.h"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"ringbuffer.h",
				"ringbuffer.h"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjsmo",
				"cmake/QuickJSModule.cmake"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			],
			[
				"builtin_dum",
				"src/builtin/builtin_dump.c"
			],
			[
				"h_main",
				"src/sh/sh_main.c"
			],
			[
				"parse_cha",
				"src/parse/parse_chartable.c"
			],
			[
				"debug.h",
				"src/debug.h"
			],
			[
				"exec_c",
				"src/exec/exec_command.c"
			],
			[
				"eval.h",
				"src/eval.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
