{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"JS_PROP",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyFunctionList"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  slice = (x, s, e) =>\n  stringify = v =>\n  formatNumber = n =>\n  isNative = fn =>\n  util()\nAsyncFunction = function x()\nGeneratorFunction = function*()\nAsyncGeneratorFunction = function*()\n  isAnyArrayBuffer(v)\n  isArrayBuffer(v)\n  isBigInt64Array(v)\n  isBigUint64Array(v)\n  isDate(v)\n  isFloat32Array(v)\n  isFloat64Array(v)\n  isInt8Array(v)\n  isInt16Array(v)\n  isInt32Array(v)\n  isMap(v)\n  isPromise(v)\n  isProxy(v)\n  isRegExp(v)\n  isSet(v)\n  isSharedArrayBuffer(v)\n  isUint8Array(v)\n  isUint8ClampedArray(v)\n  isUint16Array(v)\n  isUint32Array(v)\n  isWeakMap(v)\n  isWeakSet(v)\n  isDataView(v)\n  isBooleanObject(v)\n  isAsyncFunction(v)\n  isGeneratorFunction(v)\n  isAsyncGeneratorFunction(v)\n  isNumberObject(v)\n  isBigIntObject(v)\n  isSymbolObject(v)\n  isNativeError(v)\n  isMapIterator(v)\n  isSetIterator(v)\n  isStringObject(v)\n  isArrayBufferView(v)\n  isArgumentsObject(v)\n  isBoxedPrimitive(v)\n  ctor =>\n  isGeneratorObject(v)\n  isTypedArray(v)\n  isModuleNamespaceObject(v)\n  isConstructor(v)\n  isIterable(v)\n  isAsyncIterable(v)\n  isIterator(v)\n  isArrayLike(v)\n  hasBuiltIn(o, m)\n  format(...args)\n  formatWithOptions(opts, ...args)\n  formatWithOptionsInternal(o, v)\n  assert(actual, expected, message)\n  setInterval(callback, ms)\n  start()\n() =>\n  clearInterval(id)\n  inherits(ctor, superCtor)\n  ctor\n  ctor\n  superCtor\n  memoize(fn, cache = {})\nMemoize(n, ...rest)\n  getset(target)\nGetSet = (...args) =>\n  key =>\n  (key, value) =>\n  key =>\n  (key, value) =>\n  gettersetter(target)\n  gettersetter = (...args) =>\n  gettersetter = (...args) =>\n  gettersetter = (...args) =>\n  hasGetSet(obj)\n  m =>\n  mapObject(target)\n  set: (key, value) =>\n  get: key =>\n  once(fn, thisArg, memoFn)\n  function(...args)\n  waitFor(ms)\n  resolve =>\n  define(obj, ...args)\n  weakAssign(obj, ...args)\n  getConstructorChain(obj)\n  hasPrototype(obj, proto)\n  filter(seq, pred, thisArg)\n  pred = (el, i) =>\n  (f, arr = [], length = f.length) =>\n  (...args) =>\n  a =>\n  split(buf, ...points)\n  splitAt = (b, pos, len) =>\n  unique = (arr, cmp) =>\n  (el, i, arr) =>\n  item =>\n  (el, i, arr) =>\n  getFunctionArguments = fn =>\n  (offset = 0) =>\n  code =>\n  (offset = 0) =>\n  code =>\n  (offset = 0) =>\n  (red, green, blue) =>\n  getAnsiStyles()\n  value: (red, green, blue) =>\n  c =>\n  value: hex =>\n  character =>\n  value: hex =>\n  value: code =>\n  value: (red, green, blue) =>\n  value: hex =>\n  randInt(...args)\n  randFloat(min, max, rng = Math.random)\n  randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)\n  toBigInt(arg)\n  lazyProperty(obj, name, getter, opts = {})\n  function()\n  function()\n  v =>\n  replaceProperty(value)\n  lazyProperties(obj, gettersObj, opts = {})\n  getOpt(options = {}, args)\n  findOpt = arg =>\n([optname, option]) =>\n  opt =>\n  toUnixTime(dateObj, utc = false)\n  unixTime(utc = false)\n  fromUnixTime(epoch, utc = false)\n  range(...args)\n  (v, k) =>\n  n =>\n  repeater(n, what)\n()\n()\n  repeat(n, what)\n  chunkArray(arr, size)\n  fn = (a, v, i) =>\n  camelize(str, delim = '')\n  (match, p1, p2, offset) =>\n  decamelize(str, delim = '-')\n  shorten(str, max = 40, suffix = '...')\n  arraysInCommon(a)\n(itm, indx) =>\n  arr =>\n  mod(a, b)\n  b : n =>",
			"settings":
			{
				"buffer_size": 3189,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					68,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/DAAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQpBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24geCgpCkdlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCiAgaXNBbnlBcnJheUJ1ZmZlcih2KQogIGlzQXJyYXlCdWZmZXIodikKICBpc0JpZ0ludDY0QXJyYXkodikKICBpc0JpZ1VpbnQ2NEFycmF5KHYpCiAgaXNEYXRlKHYpCiAgaXNGbG9hdDMyQXJyYXkodikKICBpc0Zsb2F0NjRBcnJheSh2KQogIGlzSW50OEFycmF5KHYpCiAgaXNJbnQxNkFycmF5KHYpCiAgaXNJbnQzMkFycmF5KHYpCiAgaXNNYXAodikKICBpc1Byb21pc2UodikKICBpc1Byb3h5KHYpCiAgaXNSZWdFeHAodikKICBpc1NldCh2KQogIGlzU2hhcmVkQXJyYXlCdWZmZXIodikKICBpc1VpbnQ4QXJyYXkodikKICBpc1VpbnQ4Q2xhbXBlZEFycmF5KHYpCiAgaXNVaW50MTZBcnJheSh2KQogIGlzVWludDMyQXJyYXkodikKICBpc1dlYWtNYXAodikKICBpc1dlYWtTZXQodikKICBpc0RhdGFWaWV3KHYpCiAgaXNCb29sZWFuT2JqZWN0KHYpCiAgaXNBc3luY0Z1bmN0aW9uKHYpCiAgaXNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzTnVtYmVyT2JqZWN0KHYpCiAgaXNCaWdJbnRPYmplY3QodikKICBpc1N5bWJvbE9iamVjdCh2KQogIGlzTmF0aXZlRXJyb3IodikKICBpc01hcEl0ZXJhdG9yKHYpCiAgaXNTZXRJdGVyYXRvcih2KQogIGlzU3RyaW5nT2JqZWN0KHYpCiAgaXNBcnJheUJ1ZmZlclZpZXcodikKICBpc0FyZ3VtZW50c09iamVjdCh2KQogIGlzQm94ZWRQcmltaXRpdmUodikKICBjdG9yID0+CiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzQ29uc3RydWN0b3IodikKICBpc0l0ZXJhdG9yKHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCigpID0+CiAgY2xlYXJJbnRlcnZhbChpZCkKICBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpCiAgY3RvcgogIGN0b3IKICBzdXBlckN0b3IKICBtZW1vaXplKGZuLCBjYWNoZSA9IHt9KQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgZ2V0c2V0KHRhcmdldCkKR2V0U2V0ID0gKC4uLmFyZ3MpID0+CiAga2V5ID0+CiAgKGtleSwgdmFsdWUpID0+CiAga2V5ID0+CiAgKGtleSwgdmFsdWUpID0+CiAgZ2V0dGVyc2V0dGVyKHRhcmdldCkKICBnZXR0ZXJzZXR0ZXIgPSAoLi4uYXJncykgPT4KICBnZXR0ZXJzZXR0ZXIgPSAoLi4uYXJncykgPT4KICBnZXR0ZXJzZXR0ZXIgPSAoLi4uYXJncykgPT4KICBoYXNHZXRTZXQob2JqKQogIG0gPT4KICBtYXBPYmplY3QodGFyZ2V0KQogIHNldDogKGtleSwgdmFsdWUpID0+CiAgZ2V0OiBrZXkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICB3YWl0Rm9yKG1zKQogIHJlc29sdmUgPT4KICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIHdlYWtBc3NpZ24ob2JqLCAuLi5hcmdzKQogIGdldENvbnN0cnVjdG9yQ2hhaW4ob2JqKQogIGhhc1Byb3RvdHlwZShvYmosIHByb3RvKQogIGZpbHRlcihzZXEsIHByZWQsIHRoaXNBcmcpCiAgcHJlZCA9IChlbCwgaSkgPT4KICAoZiwgYXJyID0gW10sIGxlbmd0aCA9IGYubGVuZ3RoKSA9PgogICguLi5hcmdzKSA9PgogIGEgPT4KICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9IChhcnIsIGNtcCkgPT4KICAoZWwsIGksIGFycikgPT4KICBpdGVtID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIGdldE9wdChvcHRpb25zID0ge30sIGFyZ3MpCiAgZmluZE9wdCA9IGFyZyA9PgooW29wdG5hbWUsIG9wdGlvbl0pID0+CiAgb3B0ID0+CiAgdG9Vbml4VGltZShkYXRlT2JqLCB1dGMgPSBmYWxzZSkKICB1bml4VGltZSh1dGMgPSBmYWxzZSkKICBmcm9tVW5peFRpbWUoZXBvY2gsIHV0YyA9IGZhbHNlKQogIHJhbmdlKC4uLmFyZ3MpCiAgKHYsIGspID0+CiAgbiA9PgogIHJlcGVhdGVyKG4sIHdoYXQpCigpCigpCiAgcmVwZWF0KG4sIHdoYXQpCiAgY2h1bmtBcnJheShhcnIsIHNpemUpCiAgZm4gPSAoYSwgdiwgaSkgPT4KICBjYW1lbGl6ZShzdHIsIGRlbGltID0gJycpCiAgKG1hdGNoLCBwMSwgcDIsIG9mZnNldCkgPT4KICBkZWNhbWVsaXplKHN0ciwgZGVsaW0gPSAnLScpCiAgc2hvcnRlbihzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykKICBhcnJheXNJbkNvbW1vbihhKQooaXRtLCBpbmR4KSA9PgogIGFyciA9PgogIG1vZChhLCBiKQogIGIgOiBuID0+AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					69,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					70,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					71,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6691,
								6717
							],
							[
								6763,
								6788
							],
							[
								6873,
								6915
							],
							[
								7049,
								7089
							],
							[
								10018,
								10061
							],
							[
								10442,
								10477
							],
							[
								10633,
								10651
							],
							[
								10681,
								10686
							],
							[
								10776,
								10803
							],
							[
								10922,
								10957
							],
							[
								11018,
								11022
							],
							[
								11038,
								11042
							],
							[
								11069,
								11078
							],
							[
								11241,
								11274
							],
							[
								11328,
								11360
							],
							[
								11524,
								11548
							],
							[
								11704,
								11725
							],
							[
								11795,
								11801
							],
							[
								11818,
								11834
							],
							[
								11897,
								11903
							],
							[
								11916,
								11932
							],
							[
								11980,
								12010
							],
							[
								12242,
								12269
							],
							[
								12300,
								12327
							],
							[
								12426,
								12453
							],
							[
								12677,
								12701
							],
							[
								12751,
								12755
							],
							[
								12795,
								12822
							],
							[
								13052,
								13072
							],
							[
								13102,
								13113
							],
							[
								13212,
								13247
							],
							[
								13287,
								13305
							],
							[
								13492,
								13513
							],
							[
								13537,
								13547
							],
							[
								13586,
								13616
							],
							[
								14164,
								14198
							],
							[
								14499,
								14533
							],
							[
								14753,
								14787
							],
							[
								14853,
								14889
							],
							[
								14964,
								14981
							],
							[
								15140,
								15177
							],
							[
								15178,
								15192
							],
							[
								15198,
								15202
							],
							[
								15277,
								15309
							],
							[
								15337,
								15363
							],
							[
								15688,
								15710
							],
							[
								15748,
								15764
							],
							[
								15779,
								15786
							],
							[
								15808,
								15824
							],
							[
								15862,
								15890
							],
							[
								16109,
								16126
							],
							[
								16127,
								16136
							],
							[
								16188,
								16205
							],
							[
								16206,
								16215
							],
							[
								16275,
								16292
							],
							[
								16293,
								16316
							],
							[
								16372,
								16396
							],
							[
								19023,
								19051
							],
							[
								19482,
								19486
							],
							[
								19614,
								19627
							],
							[
								19943,
								19955
							],
							[
								20218,
								20231
							],
							[
								20336,
								20350
							],
							[
								21243,
								21271
							],
							[
								21387,
								21400
							],
							[
								21512,
								21538
							],
							[
								21733,
								21781
							],
							[
								21829,
								21941
							],
							[
								22046,
								22069
							],
							[
								22213,
								22265
							],
							[
								22359,
								22375
							],
							[
								22459,
								22470
							],
							[
								22583,
								22587
							],
							[
								22866,
								22899
							],
							[
								23013,
								23065
							],
							[
								23239,
								23275
							],
							[
								23432,
								23448
							],
							[
								23462,
								23484
							],
							[
								23597,
								23603
							],
							[
								24965,
								25007
							],
							[
								25202,
								25233
							],
							[
								25283,
								25325
							],
							[
								25445,
								25469
							],
							[
								25689,
								25699
							],
							[
								25752,
								25756
							],
							[
								25795,
								25822
							],
							[
								25869,
								25881
							],
							[
								25951,
								25963
							],
							[
								26026,
								26051
							],
							[
								26096,
								26127
							],
							[
								26138,
								26155
							],
							[
								26296,
								26331
							],
							[
								26379,
								26406
							],
							[
								26497,
								26535
							],
							[
								26744,
								26792
							],
							[
								27380,
								27407
							],
							[
								27610,
								27624
							],
							[
								27673,
								27679
							],
							[
								27720,
								27739
							],
							[
								27790,
								27798
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterator(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"AQAAAAAAAAAAAAAAPwwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					72,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6684,
								6698
							],
							[
								6770,
								6796
							],
							[
								6842,
								6867
							],
							[
								6952,
								6994
							],
							[
								7128,
								7168
							],
							[
								10097,
								10140
							],
							[
								10521,
								10556
							],
							[
								10712,
								10730
							],
							[
								10760,
								10765
							],
							[
								10855,
								10882
							],
							[
								11001,
								11036
							],
							[
								11097,
								11101
							],
							[
								11117,
								11121
							],
							[
								11148,
								11157
							],
							[
								11320,
								11353
							],
							[
								11407,
								11439
							],
							[
								11603,
								11627
							],
							[
								11783,
								11804
							],
							[
								11874,
								11880
							],
							[
								11897,
								11913
							],
							[
								11976,
								11982
							],
							[
								11995,
								12011
							],
							[
								12059,
								12089
							],
							[
								12321,
								12348
							],
							[
								12379,
								12406
							],
							[
								12505,
								12532
							],
							[
								12756,
								12780
							],
							[
								12830,
								12834
							],
							[
								12874,
								12901
							],
							[
								13131,
								13151
							],
							[
								13181,
								13192
							],
							[
								13291,
								13326
							],
							[
								13366,
								13384
							],
							[
								13571,
								13592
							],
							[
								13616,
								13626
							],
							[
								13665,
								13695
							],
							[
								14243,
								14277
							],
							[
								14578,
								14612
							],
							[
								14832,
								14866
							],
							[
								14932,
								14968
							],
							[
								15043,
								15060
							],
							[
								15219,
								15256
							],
							[
								15257,
								15271
							],
							[
								15277,
								15281
							],
							[
								15356,
								15388
							],
							[
								15416,
								15442
							],
							[
								15767,
								15789
							],
							[
								15827,
								15843
							],
							[
								15858,
								15865
							],
							[
								15887,
								15903
							],
							[
								15941,
								15969
							],
							[
								16188,
								16205
							],
							[
								16206,
								16215
							],
							[
								16267,
								16284
							],
							[
								16285,
								16294
							],
							[
								16354,
								16371
							],
							[
								16372,
								16395
							],
							[
								16451,
								16475
							],
							[
								19102,
								19130
							],
							[
								19561,
								19565
							],
							[
								19693,
								19706
							],
							[
								20022,
								20034
							],
							[
								20297,
								20310
							],
							[
								20415,
								20429
							],
							[
								21322,
								21350
							],
							[
								21466,
								21479
							],
							[
								21591,
								21617
							],
							[
								21812,
								21860
							],
							[
								21908,
								22020
							],
							[
								22125,
								22148
							],
							[
								22292,
								22344
							],
							[
								22438,
								22454
							],
							[
								22538,
								22549
							],
							[
								22662,
								22666
							],
							[
								22945,
								22978
							],
							[
								23092,
								23144
							],
							[
								23318,
								23354
							],
							[
								23511,
								23527
							],
							[
								23541,
								23563
							],
							[
								23676,
								23682
							],
							[
								25044,
								25086
							],
							[
								25281,
								25312
							],
							[
								25362,
								25404
							],
							[
								25524,
								25548
							],
							[
								25768,
								25778
							],
							[
								25831,
								25835
							],
							[
								25874,
								25901
							],
							[
								25948,
								25960
							],
							[
								26030,
								26042
							],
							[
								26105,
								26130
							],
							[
								26175,
								26206
							],
							[
								26217,
								26234
							],
							[
								26375,
								26410
							],
							[
								26458,
								26485
							],
							[
								26576,
								26614
							],
							[
								26823,
								26871
							],
							[
								27459,
								27486
							],
							[
								27689,
								27703
							],
							[
								27752,
								27758
							],
							[
								27799,
								27818
							],
							[
								27869,
								27877
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					73,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6684,
								6698
							],
							[
								6800,
								6826
							],
							[
								6872,
								6897
							],
							[
								6982,
								7024
							],
							[
								7158,
								7198
							],
							[
								10127,
								10170
							],
							[
								10551,
								10586
							],
							[
								10742,
								10760
							],
							[
								10790,
								10795
							],
							[
								10885,
								10912
							],
							[
								11031,
								11066
							],
							[
								11127,
								11131
							],
							[
								11147,
								11151
							],
							[
								11178,
								11187
							],
							[
								11350,
								11383
							],
							[
								11437,
								11469
							],
							[
								11633,
								11657
							],
							[
								11813,
								11834
							],
							[
								11904,
								11910
							],
							[
								11927,
								11943
							],
							[
								12006,
								12012
							],
							[
								12025,
								12041
							],
							[
								12089,
								12119
							],
							[
								12351,
								12378
							],
							[
								12409,
								12436
							],
							[
								12535,
								12562
							],
							[
								12786,
								12810
							],
							[
								12860,
								12864
							],
							[
								12904,
								12931
							],
							[
								13161,
								13181
							],
							[
								13211,
								13222
							],
							[
								13321,
								13356
							],
							[
								13396,
								13414
							],
							[
								13601,
								13622
							],
							[
								13646,
								13656
							],
							[
								13695,
								13725
							],
							[
								14273,
								14307
							],
							[
								14608,
								14642
							],
							[
								14862,
								14896
							],
							[
								14962,
								14998
							],
							[
								15073,
								15090
							],
							[
								15249,
								15286
							],
							[
								15287,
								15301
							],
							[
								15307,
								15311
							],
							[
								15386,
								15418
							],
							[
								15446,
								15472
							],
							[
								15797,
								15819
							],
							[
								15857,
								15873
							],
							[
								15888,
								15895
							],
							[
								15917,
								15933
							],
							[
								15971,
								15999
							],
							[
								16218,
								16235
							],
							[
								16236,
								16245
							],
							[
								16297,
								16314
							],
							[
								16315,
								16324
							],
							[
								16384,
								16401
							],
							[
								16402,
								16425
							],
							[
								16481,
								16505
							],
							[
								19132,
								19160
							],
							[
								19591,
								19595
							],
							[
								19723,
								19736
							],
							[
								20052,
								20064
							],
							[
								20327,
								20340
							],
							[
								20445,
								20459
							],
							[
								21352,
								21380
							],
							[
								21496,
								21509
							],
							[
								21621,
								21647
							],
							[
								21842,
								21890
							],
							[
								21938,
								22050
							],
							[
								22155,
								22178
							],
							[
								22322,
								22374
							],
							[
								22468,
								22484
							],
							[
								22568,
								22579
							],
							[
								22692,
								22696
							],
							[
								22975,
								23008
							],
							[
								23122,
								23174
							],
							[
								23348,
								23384
							],
							[
								23541,
								23557
							],
							[
								23571,
								23593
							],
							[
								23706,
								23712
							],
							[
								25074,
								25116
							],
							[
								25311,
								25342
							],
							[
								25392,
								25434
							],
							[
								25554,
								25578
							],
							[
								25798,
								25808
							],
							[
								25861,
								25865
							],
							[
								25904,
								25931
							],
							[
								25978,
								25990
							],
							[
								26060,
								26072
							],
							[
								26135,
								26160
							],
							[
								26205,
								26236
							],
							[
								26247,
								26264
							],
							[
								26405,
								26440
							],
							[
								26488,
								26515
							],
							[
								26606,
								26644
							],
							[
								26853,
								26901
							],
							[
								27489,
								27516
							],
							[
								27719,
								27733
							],
							[
								27782,
								27788
							],
							[
								27829,
								27848
							],
							[
								27899,
								27907
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					74,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6684,
								6698
							],
							[
								6800,
								6826
							],
							[
								6872,
								6897
							],
							[
								6982,
								7024
							],
							[
								7158,
								7198
							],
							[
								10127,
								10170
							],
							[
								10551,
								10586
							],
							[
								10742,
								10760
							],
							[
								10790,
								10795
							],
							[
								10885,
								10912
							],
							[
								11031,
								11066
							],
							[
								11127,
								11131
							],
							[
								11147,
								11151
							],
							[
								11178,
								11187
							],
							[
								11350,
								11383
							],
							[
								11437,
								11469
							],
							[
								11633,
								11657
							],
							[
								11813,
								11834
							],
							[
								11904,
								11910
							],
							[
								11927,
								11943
							],
							[
								12006,
								12012
							],
							[
								12025,
								12041
							],
							[
								12089,
								12119
							],
							[
								12351,
								12378
							],
							[
								12409,
								12436
							],
							[
								12535,
								12562
							],
							[
								12786,
								12810
							],
							[
								12860,
								12864
							],
							[
								12904,
								12931
							],
							[
								13161,
								13181
							],
							[
								13211,
								13222
							],
							[
								13321,
								13356
							],
							[
								13396,
								13414
							],
							[
								13601,
								13622
							],
							[
								13646,
								13656
							],
							[
								13695,
								13725
							],
							[
								14273,
								14307
							],
							[
								14608,
								14642
							],
							[
								14862,
								14896
							],
							[
								14962,
								14998
							],
							[
								15073,
								15090
							],
							[
								15249,
								15286
							],
							[
								15287,
								15301
							],
							[
								15307,
								15311
							],
							[
								15386,
								15418
							],
							[
								15446,
								15472
							],
							[
								15797,
								15819
							],
							[
								15857,
								15873
							],
							[
								15888,
								15895
							],
							[
								15917,
								15933
							],
							[
								15971,
								15999
							],
							[
								16218,
								16235
							],
							[
								16236,
								16245
							],
							[
								16297,
								16314
							],
							[
								16315,
								16324
							],
							[
								16384,
								16401
							],
							[
								16402,
								16425
							],
							[
								16481,
								16505
							],
							[
								19132,
								19160
							],
							[
								19591,
								19595
							],
							[
								19723,
								19736
							],
							[
								20052,
								20064
							],
							[
								20327,
								20340
							],
							[
								20445,
								20459
							],
							[
								21352,
								21380
							],
							[
								21496,
								21509
							],
							[
								21621,
								21647
							],
							[
								21842,
								21890
							],
							[
								21938,
								22050
							],
							[
								22155,
								22178
							],
							[
								22322,
								22374
							],
							[
								22468,
								22484
							],
							[
								22568,
								22579
							],
							[
								22692,
								22696
							],
							[
								22975,
								23008
							],
							[
								23122,
								23174
							],
							[
								23348,
								23384
							],
							[
								23541,
								23557
							],
							[
								23571,
								23593
							],
							[
								23706,
								23712
							],
							[
								25074,
								25116
							],
							[
								25311,
								25342
							],
							[
								25392,
								25434
							],
							[
								25554,
								25578
							],
							[
								25798,
								25808
							],
							[
								25861,
								25865
							],
							[
								25904,
								25931
							],
							[
								25978,
								25990
							],
							[
								26060,
								26072
							],
							[
								26135,
								26160
							],
							[
								26205,
								26236
							],
							[
								26247,
								26264
							],
							[
								26405,
								26440
							],
							[
								26488,
								26515
							],
							[
								26606,
								26644
							],
							[
								26853,
								26901
							],
							[
								27489,
								27516
							],
							[
								27719,
								27733
							],
							[
								27782,
								27788
							],
							[
								27829,
								27848
							],
							[
								27899,
								27907
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					75,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6684,
								6698
							],
							[
								6800,
								6826
							],
							[
								6872,
								6897
							],
							[
								6982,
								7024
							],
							[
								7158,
								7198
							],
							[
								10127,
								10170
							],
							[
								10551,
								10586
							],
							[
								10742,
								10760
							],
							[
								10790,
								10795
							],
							[
								10885,
								10912
							],
							[
								11031,
								11066
							],
							[
								11127,
								11131
							],
							[
								11147,
								11151
							],
							[
								11178,
								11187
							],
							[
								11350,
								11383
							],
							[
								11437,
								11469
							],
							[
								11633,
								11657
							],
							[
								11813,
								11834
							],
							[
								11904,
								11910
							],
							[
								11927,
								11943
							],
							[
								12006,
								12012
							],
							[
								12025,
								12041
							],
							[
								12089,
								12119
							],
							[
								12351,
								12378
							],
							[
								12409,
								12436
							],
							[
								12535,
								12562
							],
							[
								12786,
								12810
							],
							[
								12860,
								12864
							],
							[
								12904,
								12931
							],
							[
								13161,
								13181
							],
							[
								13211,
								13222
							],
							[
								13321,
								13356
							],
							[
								13396,
								13414
							],
							[
								13601,
								13622
							],
							[
								13646,
								13656
							],
							[
								13695,
								13725
							],
							[
								14273,
								14307
							],
							[
								14608,
								14642
							],
							[
								14862,
								14896
							],
							[
								14962,
								14998
							],
							[
								15073,
								15090
							],
							[
								15249,
								15286
							],
							[
								15287,
								15301
							],
							[
								15307,
								15311
							],
							[
								15386,
								15418
							],
							[
								15446,
								15472
							],
							[
								15797,
								15819
							],
							[
								15857,
								15873
							],
							[
								15888,
								15895
							],
							[
								15917,
								15933
							],
							[
								15971,
								15999
							],
							[
								16218,
								16235
							],
							[
								16236,
								16245
							],
							[
								16297,
								16314
							],
							[
								16315,
								16324
							],
							[
								16384,
								16401
							],
							[
								16402,
								16425
							],
							[
								16481,
								16505
							],
							[
								19132,
								19160
							],
							[
								19591,
								19595
							],
							[
								19723,
								19736
							],
							[
								20052,
								20064
							],
							[
								20327,
								20340
							],
							[
								20445,
								20459
							],
							[
								21352,
								21380
							],
							[
								21496,
								21509
							],
							[
								21621,
								21647
							],
							[
								21842,
								21890
							],
							[
								21938,
								22050
							],
							[
								22155,
								22178
							],
							[
								22322,
								22374
							],
							[
								22468,
								22484
							],
							[
								22568,
								22579
							],
							[
								22692,
								22696
							],
							[
								22975,
								23008
							],
							[
								23122,
								23174
							],
							[
								23348,
								23384
							],
							[
								23541,
								23557
							],
							[
								23571,
								23593
							],
							[
								23706,
								23712
							],
							[
								25074,
								25116
							],
							[
								25311,
								25342
							],
							[
								25392,
								25434
							],
							[
								25554,
								25578
							],
							[
								25798,
								25808
							],
							[
								25861,
								25865
							],
							[
								25904,
								25931
							],
							[
								25978,
								25990
							],
							[
								26060,
								26072
							],
							[
								26135,
								26160
							],
							[
								26205,
								26236
							],
							[
								26247,
								26264
							],
							[
								26405,
								26440
							],
							[
								26488,
								26515
							],
							[
								26606,
								26644
							],
							[
								26853,
								26901
							],
							[
								27489,
								27516
							],
							[
								27719,
								27733
							],
							[
								27782,
								27788
							],
							[
								27829,
								27848
							],
							[
								27899,
								27907
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABQDAAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQpBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24geCgpCkdlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCiAgaXNBbnlBcnJheUJ1ZmZlcih2KQogIGlzQXJyYXlCdWZmZXIodikKICBpc0JpZ0ludDY0QXJyYXkodikKICBpc0JpZ1VpbnQ2NEFycmF5KHYpCiAgaXNEYXRlKHYpCiAgaXNGbG9hdDMyQXJyYXkodikKICBpc0Zsb2F0NjRBcnJheSh2KQogIGlzSW50OEFycmF5KHYpCiAgaXNJbnQxNkFycmF5KHYpCiAgaXNJbnQzMkFycmF5KHYpCiAgaXNNYXAodikKICBpc1Byb21pc2UodikKICBpc1Byb3h5KHYpCiAgaXNSZWdFeHAodikKICBpc1NldCh2KQogIGlzU2hhcmVkQXJyYXlCdWZmZXIodikKICBpc1VpbnQ4QXJyYXkodikKICBpc1VpbnQ4Q2xhbXBlZEFycmF5KHYpCiAgaXNVaW50MTZBcnJheSh2KQogIGlzVWludDMyQXJyYXkodikKICBpc1dlYWtNYXAodikKICBpc1dlYWtTZXQodikKICBpc0RhdGFWaWV3KHYpCiAgaXNCb29sZWFuT2JqZWN0KHYpCiAgaXNBc3luY0Z1bmN0aW9uKHYpCiAgaXNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzTnVtYmVyT2JqZWN0KHYpCiAgaXNCaWdJbnRPYmplY3QodikKICBpc1N5bWJvbE9iamVjdCh2KQogIGlzTmF0aXZlRXJyb3IodikKICBpc01hcEl0ZXJhdG9yKHYpCiAgaXNTZXRJdGVyYXRvcih2KQogIGlzU3RyaW5nT2JqZWN0KHYpCiAgaXNBcnJheUJ1ZmZlclZpZXcodikKICBpc0FyZ3VtZW50c09iamVjdCh2KQogIGlzQm94ZWRQcmltaXRpdmUodikKICBjdG9yID0+CiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzQ29uc3RydWN0b3IodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikKICBjdG9yCiAgY3RvcgogIHN1cGVyQ3RvcgogIG1lbW9pemUoZm4sIGNhY2hlID0ge30pCk1lbW9pemUobiwgLi4ucmVzdCkKICBnZXRzZXQodGFyZ2V0KQpHZXRTZXQgPSAoLi4uYXJncykgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBnZXR0ZXJzZXR0ZXIodGFyZ2V0KQogIGdldHRlcnNldHRlciA9ICguLi5hcmdzKSA9PgogIGdldHRlcnNldHRlciA9ICguLi5hcmdzKSA9PgogIGdldHRlcnNldHRlciA9ICguLi5hcmdzKSA9PgogIGhhc0dldFNldChvYmopCiAgbSA9PgogIG1hcE9iamVjdCh0YXJnZXQpCiAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4KICBnZXQ6IGtleSA9PgogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQogIHdhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgd2Vha0Fzc2lnbihvYmosIC4uLmFyZ3MpCiAgZ2V0Q29uc3RydWN0b3JDaGFpbihvYmopCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBwcmVkID0gKGVsLCBpKSA9PgogIChmLCBhcnIgPSBbXSwgbGVuZ3RoID0gZi5sZW5ndGgpID0+CiAgKC4uLmFyZ3MpID0+CiAgYSA9PgogIHNwbGl0KGJ1ZiwgLi4ucG9pbnRzKQogIHNwbGl0QXQgPSAoYiwgcG9zLCBsZW4pID0+CiAgdW5pcXVlID0gKGFyciwgY21wKSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGl0ZW0gPT4KICAoZWwsIGksIGFycikgPT4KICBnZXRGdW5jdGlvbkFyZ3VtZW50cyA9IGZuID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBnZXRBbnNpU3R5bGVzKCkKICB2YWx1ZTogKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgYyA9PgogIHZhbHVlOiBoZXggPT4KICBjaGFyYWN0ZXIgPT4KICB2YWx1ZTogaGV4ID0+CiAgdmFsdWU6IGNvZGUgPT4KICB2YWx1ZTogKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgdmFsdWU6IGhleCA9PgogIHJhbmRJbnQoLi4uYXJncykKICByYW5kRmxvYXQobWluLCBtYXgsIHJuZyA9IE1hdGgucmFuZG9tKQogIHJhbmRTdHIobiwgc2V0ID0gJ18wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsIHJuZyA9IE1hdGgucmFuZG9tKQogIHRvQmlnSW50KGFyZykKICBsYXp5UHJvcGVydHkob2JqLCBuYW1lLCBnZXR0ZXIsIG9wdHMgPSB7fSkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oKQogIHYgPT4KICByZXBsYWNlUHJvcGVydHkodmFsdWUpCiAgbGF6eVByb3BlcnRpZXMob2JqLCBnZXR0ZXJzT2JqLCBvcHRzID0ge30pCiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYXJnID0+Cihbb3B0bmFtZSwgb3B0aW9uXSkgPT4KICBvcHQgPT4KICB0b1VuaXhUaW1lKGRhdGVPYmosIHV0YyA9IGZhbHNlKQogIHVuaXhUaW1lKHV0YyA9IGZhbHNlKQogIGZyb21Vbml4VGltZShlcG9jaCwgdXRjID0gZmFsc2UpCiAgcmFuZ2UoLi4uYXJncykKICAodiwgaykgPT4KICBuID0+CiAgcmVwZWF0ZXIobiwgd2hhdCkKKCkKKCkKICByZXBlYXQobiwgd2hhdCkKICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4AAAAAAAAAAFAMAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					76,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABQDAAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQpBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24geCgpCkdlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCiAgaXNBbnlBcnJheUJ1ZmZlcih2KQogIGlzQXJyYXlCdWZmZXIodikKICBpc0JpZ0ludDY0QXJyYXkodikKICBpc0JpZ1VpbnQ2NEFycmF5KHYpCiAgaXNEYXRlKHYpCiAgaXNGbG9hdDMyQXJyYXkodikKICBpc0Zsb2F0NjRBcnJheSh2KQogIGlzSW50OEFycmF5KHYpCiAgaXNJbnQxNkFycmF5KHYpCiAgaXNJbnQzMkFycmF5KHYpCiAgaXNNYXAodikKICBpc1Byb21pc2UodikKICBpc1Byb3h5KHYpCiAgaXNSZWdFeHAodikKICBpc1NldCh2KQogIGlzU2hhcmVkQXJyYXlCdWZmZXIodikKICBpc1VpbnQ4QXJyYXkodikKICBpc1VpbnQ4Q2xhbXBlZEFycmF5KHYpCiAgaXNVaW50MTZBcnJheSh2KQogIGlzVWludDMyQXJyYXkodikKICBpc1dlYWtNYXAodikKICBpc1dlYWtTZXQodikKICBpc0RhdGFWaWV3KHYpCiAgaXNCb29sZWFuT2JqZWN0KHYpCiAgaXNBc3luY0Z1bmN0aW9uKHYpCiAgaXNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzTnVtYmVyT2JqZWN0KHYpCiAgaXNCaWdJbnRPYmplY3QodikKICBpc1N5bWJvbE9iamVjdCh2KQogIGlzTmF0aXZlRXJyb3IodikKICBpc01hcEl0ZXJhdG9yKHYpCiAgaXNTZXRJdGVyYXRvcih2KQogIGlzU3RyaW5nT2JqZWN0KHYpCiAgaXNBcnJheUJ1ZmZlclZpZXcodikKICBpc0FyZ3VtZW50c09iamVjdCh2KQogIGlzQm94ZWRQcmltaXRpdmUodikKICBjdG9yID0+CiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzQ29uc3RydWN0b3IodikKICBpc0l0ZXJhdG9yKHYpCiAgaXNBcnJheUxpa2UodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKKCkgPT4KICBjbGVhckludGVydmFsKGlkKQogIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3RvcikKICBjdG9yCiAgY3RvcgogIHN1cGVyQ3RvcgogIG1lbW9pemUoZm4sIGNhY2hlID0ge30pCk1lbW9pemUobiwgLi4ucmVzdCkKICBnZXRzZXQodGFyZ2V0KQpHZXRTZXQgPSAoLi4uYXJncykgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBrZXkgPT4KICAoa2V5LCB2YWx1ZSkgPT4KICBnZXR0ZXJzZXR0ZXIodGFyZ2V0KQogIGdldHRlcnNldHRlciA9ICguLi5hcmdzKSA9PgogIGdldHRlcnNldHRlciA9ICguLi5hcmdzKSA9PgogIGdldHRlcnNldHRlciA9ICguLi5hcmdzKSA9PgogIGhhc0dldFNldChvYmopCiAgbSA9PgogIG1hcE9iamVjdCh0YXJnZXQpCiAgc2V0OiAoa2V5LCB2YWx1ZSkgPT4KICBnZXQ6IGtleSA9PgogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQogIHdhaXRGb3IobXMpCiAgcmVzb2x2ZSA9PgogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgd2Vha0Fzc2lnbihvYmosIC4uLmFyZ3MpCiAgZ2V0Q29uc3RydWN0b3JDaGFpbihvYmopCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBwcmVkID0gKGVsLCBpKSA9PgogIChmLCBhcnIgPSBbXSwgbGVuZ3RoID0gZi5sZW5ndGgpID0+CiAgKC4uLmFyZ3MpID0+CiAgYSA9PgogIHNwbGl0KGJ1ZiwgLi4ucG9pbnRzKQogIHNwbGl0QXQgPSAoYiwgcG9zLCBsZW4pID0+CiAgdW5pcXVlID0gKGFyciwgY21wKSA9PgogIChlbCwgaSwgYXJyKSA9PgogIGl0ZW0gPT4KICAoZWwsIGksIGFycikgPT4KICBnZXRGdW5jdGlvbkFyZ3VtZW50cyA9IGZuID0+CiAgKG9mZnNldCA9IDApID0+CiAgY29kZSA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICAocmVkLCBncmVlbiwgYmx1ZSkgPT4KICBnZXRBbnNpU3R5bGVzKCkKICB2YWx1ZTogKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgYyA9PgogIHZhbHVlOiBoZXggPT4KICBjaGFyYWN0ZXIgPT4KICB2YWx1ZTogaGV4ID0+CiAgdmFsdWU6IGNvZGUgPT4KICB2YWx1ZTogKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgdmFsdWU6IGhleCA9PgogIHJhbmRJbnQoLi4uYXJncykKICByYW5kRmxvYXQobWluLCBtYXgsIHJuZyA9IE1hdGgucmFuZG9tKQogIHJhbmRTdHIobiwgc2V0ID0gJ18wMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5eicsIHJuZyA9IE1hdGgucmFuZG9tKQogIHRvQmlnSW50KGFyZykKICBsYXp5UHJvcGVydHkob2JqLCBuYW1lLCBnZXR0ZXIsIG9wdHMgPSB7fSkKICBmdW5jdGlvbigpCiAgZnVuY3Rpb24oKQogIHYgPT4KICByZXBsYWNlUHJvcGVydHkodmFsdWUpCiAgbGF6eVByb3BlcnRpZXMob2JqLCBnZXR0ZXJzT2JqLCBvcHRzID0ge30pCiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICBmaW5kT3B0ID0gYXJnID0+Cihbb3B0bmFtZSwgb3B0aW9uXSkgPT4KICBvcHQgPT4KICB0b1VuaXhUaW1lKGRhdGVPYmosIHV0YyA9IGZhbHNlKQogIHVuaXhUaW1lKHV0YyA9IGZhbHNlKQogIGZyb21Vbml4VGltZShlcG9jaCwgdXRjID0gZmFsc2UpCiAgcmFuZ2UoLi4uYXJncykKICAodiwgaykgPT4KICBuID0+CiAgcmVwZWF0ZXIobiwgd2hhdCkKKCkKKCkKICByZXBlYXQobiwgd2hhdCkKICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBmbiA9IChhLCB2LCBpKSA9PgogIGNhbWVsaXplKHN0ciwgZGVsaW0gPSAnJykKICAobWF0Y2gsIHAxLCBwMiwgb2Zmc2V0KSA9PgogIGRlY2FtZWxpemUoc3RyLCBkZWxpbSA9ICctJykKICBzaG9ydGVuKHN0ciwgbWF4ID0gNDAsIHN1ZmZpeCA9ICcuLi4nKQogIGFycmF5c0luQ29tbW9uKGEpCihpdG0sIGluZHgpID0+CiAgYXJyID0+CiAgbW9kKGEsIGIpCiAgYiA6IG4gPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					77,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					78,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6684,
								6698
							],
							[
								6800,
								6826
							],
							[
								6872,
								6897
							],
							[
								6982,
								7024
							],
							[
								7158,
								7198
							],
							[
								10127,
								10170
							],
							[
								10551,
								10586
							],
							[
								10742,
								10760
							],
							[
								10790,
								10795
							],
							[
								10885,
								10912
							],
							[
								11031,
								11066
							],
							[
								11127,
								11131
							],
							[
								11147,
								11151
							],
							[
								11178,
								11187
							],
							[
								11350,
								11383
							],
							[
								11437,
								11469
							],
							[
								11633,
								11657
							],
							[
								11813,
								11834
							],
							[
								11904,
								11910
							],
							[
								11927,
								11943
							],
							[
								12006,
								12012
							],
							[
								12025,
								12041
							],
							[
								12089,
								12119
							],
							[
								12351,
								12378
							],
							[
								12409,
								12436
							],
							[
								12535,
								12562
							],
							[
								12786,
								12810
							],
							[
								12860,
								12864
							],
							[
								12904,
								12931
							],
							[
								13161,
								13181
							],
							[
								13211,
								13222
							],
							[
								13321,
								13356
							],
							[
								13396,
								13414
							],
							[
								13601,
								13622
							],
							[
								13646,
								13656
							],
							[
								13695,
								13725
							],
							[
								14273,
								14307
							],
							[
								14608,
								14642
							],
							[
								14862,
								14896
							],
							[
								14962,
								14998
							],
							[
								15073,
								15090
							],
							[
								15249,
								15286
							],
							[
								15287,
								15301
							],
							[
								15307,
								15311
							],
							[
								15386,
								15418
							],
							[
								15446,
								15472
							],
							[
								15797,
								15819
							],
							[
								15857,
								15873
							],
							[
								15888,
								15895
							],
							[
								15917,
								15933
							],
							[
								15971,
								15999
							],
							[
								16218,
								16235
							],
							[
								16236,
								16245
							],
							[
								16297,
								16314
							],
							[
								16315,
								16324
							],
							[
								16384,
								16401
							],
							[
								16402,
								16425
							],
							[
								16481,
								16505
							],
							[
								19132,
								19160
							],
							[
								19591,
								19595
							],
							[
								19723,
								19736
							],
							[
								20052,
								20064
							],
							[
								20327,
								20340
							],
							[
								20445,
								20459
							],
							[
								21352,
								21380
							],
							[
								21496,
								21509
							],
							[
								21621,
								21647
							],
							[
								21842,
								21890
							],
							[
								21938,
								22050
							],
							[
								22155,
								22178
							],
							[
								22322,
								22374
							],
							[
								22468,
								22484
							],
							[
								22568,
								22579
							],
							[
								22692,
								22696
							],
							[
								22975,
								23008
							],
							[
								23122,
								23174
							],
							[
								23348,
								23384
							],
							[
								23541,
								23557
							],
							[
								23571,
								23593
							],
							[
								23706,
								23712
							],
							[
								25074,
								25116
							],
							[
								25311,
								25342
							],
							[
								25392,
								25434
							],
							[
								25554,
								25578
							],
							[
								25798,
								25808
							],
							[
								25861,
								25865
							],
							[
								25904,
								25931
							],
							[
								25978,
								25990
							],
							[
								26060,
								26072
							],
							[
								26135,
								26160
							],
							[
								26205,
								26236
							],
							[
								26247,
								26264
							],
							[
								26405,
								26440
							],
							[
								26488,
								26515
							],
							[
								26606,
								26644
							],
							[
								26853,
								26901
							],
							[
								27489,
								27516
							],
							[
								27719,
								27733
							],
							[
								27782,
								27788
							],
							[
								27829,
								27848
							],
							[
								27899,
								27907
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"AQAAAAAAAAAAAAAAUAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					79,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6696,
								6714
							],
							[
								6796,
								6809
							],
							[
								6874,
								6888
							],
							[
								6990,
								7016
							],
							[
								7062,
								7087
							],
							[
								7172,
								7214
							],
							[
								7348,
								7388
							],
							[
								10317,
								10360
							],
							[
								10741,
								10776
							],
							[
								10932,
								10950
							],
							[
								10980,
								10985
							],
							[
								11075,
								11102
							],
							[
								11221,
								11256
							],
							[
								11317,
								11321
							],
							[
								11337,
								11341
							],
							[
								11368,
								11377
							],
							[
								11540,
								11573
							],
							[
								11627,
								11659
							],
							[
								11823,
								11847
							],
							[
								12003,
								12024
							],
							[
								12094,
								12100
							],
							[
								12117,
								12133
							],
							[
								12196,
								12202
							],
							[
								12215,
								12231
							],
							[
								12279,
								12309
							],
							[
								12541,
								12568
							],
							[
								12599,
								12626
							],
							[
								12725,
								12752
							],
							[
								12976,
								13000
							],
							[
								13050,
								13054
							],
							[
								13094,
								13121
							],
							[
								13351,
								13371
							],
							[
								13401,
								13412
							],
							[
								13511,
								13546
							],
							[
								13586,
								13604
							],
							[
								13791,
								13812
							],
							[
								13836,
								13846
							],
							[
								13885,
								13915
							],
							[
								14463,
								14497
							],
							[
								14798,
								14832
							],
							[
								15052,
								15086
							],
							[
								15152,
								15188
							],
							[
								15263,
								15280
							],
							[
								15439,
								15476
							],
							[
								15477,
								15491
							],
							[
								15497,
								15501
							],
							[
								15576,
								15608
							],
							[
								15636,
								15662
							],
							[
								15987,
								16009
							],
							[
								16047,
								16063
							],
							[
								16078,
								16085
							],
							[
								16107,
								16123
							],
							[
								16161,
								16189
							],
							[
								16408,
								16425
							],
							[
								16426,
								16435
							],
							[
								16487,
								16504
							],
							[
								16505,
								16514
							],
							[
								16574,
								16591
							],
							[
								16592,
								16615
							],
							[
								16671,
								16695
							],
							[
								19322,
								19350
							],
							[
								19781,
								19785
							],
							[
								19913,
								19926
							],
							[
								20242,
								20254
							],
							[
								20517,
								20530
							],
							[
								20635,
								20649
							],
							[
								21542,
								21570
							],
							[
								21686,
								21699
							],
							[
								21811,
								21837
							],
							[
								22032,
								22080
							],
							[
								22128,
								22240
							],
							[
								22345,
								22368
							],
							[
								22512,
								22564
							],
							[
								22658,
								22674
							],
							[
								22758,
								22769
							],
							[
								22882,
								22886
							],
							[
								23165,
								23198
							],
							[
								23312,
								23364
							],
							[
								23538,
								23574
							],
							[
								23731,
								23747
							],
							[
								23761,
								23783
							],
							[
								23896,
								23902
							],
							[
								25264,
								25306
							],
							[
								25501,
								25532
							],
							[
								25582,
								25624
							],
							[
								25744,
								25768
							],
							[
								25988,
								25998
							],
							[
								26051,
								26055
							],
							[
								26094,
								26121
							],
							[
								26168,
								26180
							],
							[
								26250,
								26262
							],
							[
								26325,
								26350
							],
							[
								26395,
								26426
							],
							[
								26437,
								26454
							],
							[
								26595,
								26630
							],
							[
								26678,
								26705
							],
							[
								26796,
								26834
							],
							[
								27043,
								27091
							],
							[
								27679,
								27706
							],
							[
								27909,
								27923
							],
							[
								27972,
								27978
							],
							[
								28019,
								28038
							],
							[
								28089,
								28097
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					80,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6696,
								6714
							],
							[
								6796,
								6809
							],
							[
								6874,
								6888
							],
							[
								6990,
								7016
							],
							[
								7062,
								7087
							],
							[
								7172,
								7214
							],
							[
								7348,
								7388
							],
							[
								10317,
								10360
							],
							[
								10741,
								10776
							],
							[
								10932,
								10950
							],
							[
								10980,
								10985
							],
							[
								11075,
								11102
							],
							[
								11221,
								11256
							],
							[
								11317,
								11321
							],
							[
								11337,
								11341
							],
							[
								11368,
								11377
							],
							[
								11540,
								11573
							],
							[
								11627,
								11659
							],
							[
								11823,
								11847
							],
							[
								12003,
								12024
							],
							[
								12094,
								12100
							],
							[
								12117,
								12133
							],
							[
								12196,
								12202
							],
							[
								12215,
								12231
							],
							[
								12279,
								12309
							],
							[
								12541,
								12568
							],
							[
								12599,
								12626
							],
							[
								12725,
								12752
							],
							[
								12976,
								13000
							],
							[
								13050,
								13054
							],
							[
								13094,
								13121
							],
							[
								13351,
								13371
							],
							[
								13401,
								13412
							],
							[
								13511,
								13546
							],
							[
								13586,
								13604
							],
							[
								13791,
								13812
							],
							[
								13836,
								13846
							],
							[
								13885,
								13915
							],
							[
								14463,
								14497
							],
							[
								14798,
								14832
							],
							[
								15052,
								15086
							],
							[
								15152,
								15188
							],
							[
								15263,
								15280
							],
							[
								15439,
								15476
							],
							[
								15477,
								15491
							],
							[
								15497,
								15501
							],
							[
								15576,
								15608
							],
							[
								15636,
								15662
							],
							[
								15987,
								16009
							],
							[
								16047,
								16063
							],
							[
								16078,
								16085
							],
							[
								16107,
								16123
							],
							[
								16161,
								16189
							],
							[
								16408,
								16425
							],
							[
								16426,
								16435
							],
							[
								16487,
								16504
							],
							[
								16505,
								16514
							],
							[
								16574,
								16591
							],
							[
								16592,
								16615
							],
							[
								16671,
								16695
							],
							[
								19322,
								19350
							],
							[
								19781,
								19785
							],
							[
								19913,
								19926
							],
							[
								20242,
								20254
							],
							[
								20517,
								20530
							],
							[
								20635,
								20649
							],
							[
								21542,
								21570
							],
							[
								21686,
								21699
							],
							[
								21811,
								21837
							],
							[
								22032,
								22080
							],
							[
								22128,
								22240
							],
							[
								22345,
								22368
							],
							[
								22512,
								22564
							],
							[
								22658,
								22674
							],
							[
								22758,
								22769
							],
							[
								22882,
								22886
							],
							[
								23165,
								23198
							],
							[
								23312,
								23364
							],
							[
								23538,
								23574
							],
							[
								23731,
								23747
							],
							[
								23761,
								23783
							],
							[
								23896,
								23902
							],
							[
								25264,
								25306
							],
							[
								25501,
								25532
							],
							[
								25582,
								25624
							],
							[
								25744,
								25768
							],
							[
								25988,
								25998
							],
							[
								26051,
								26055
							],
							[
								26094,
								26121
							],
							[
								26168,
								26180
							],
							[
								26250,
								26262
							],
							[
								26325,
								26350
							],
							[
								26395,
								26426
							],
							[
								26437,
								26454
							],
							[
								26595,
								26630
							],
							[
								26678,
								26705
							],
							[
								26796,
								26834
							],
							[
								27043,
								27091
							],
							[
								27679,
								27706
							],
							[
								27909,
								27923
							],
							[
								27972,
								27978
							],
							[
								28019,
								28038
							],
							[
								28089,
								28097
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					81,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
						"symkeys":
						[
							[
								560,
								574
							],
							[
								1187,
								1216
							],
							[
								1385,
								1403
							],
							[
								1437,
								1450
							],
							[
								1511,
								1528
							],
							[
								1718,
								1744
							],
							[
								1846,
								1870
							],
							[
								1953,
								1979
							],
							[
								2075,
								2099
							],
							[
								3213,
								3247
							],
							[
								3297,
								3311
							],
							[
								4118,
								4130
							],
							[
								4798,
								4814
							],
							[
								4876,
								4894
							],
							[
								5458,
								5478
							],
							[
								5849,
								5865
							],
							[
								6216,
								6237
							],
							[
								6905,
								6922
							],
							[
								7332,
								7347
							],
							[
								7538,
								7553
							],
							[
								8202,
								8217
							],
							[
								8718,
								8735
							],
							[
								11104,
								11124
							],
							[
								12142,
								12155
							],
							[
								12702,
								12717
							],
							[
								12886,
								12900
							],
							[
								13697,
								13712
							],
							[
								13817,
								13831
							],
							[
								13994,
								14009
							],
							[
								14753,
								14768
							],
							[
								15056,
								15073
							],
							[
								15818,
								15835
							],
							[
								15871,
								15882
							],
							[
								16225,
								16252
							],
							[
								16413,
								16441
							],
							[
								17819,
								17840
							],
							[
								17917,
								17933
							],
							[
								18363,
								18377
							],
							[
								18601,
								18618
							],
							[
								19943,
								19951
							],
							[
								21076,
								21091
							],
							[
								22280,
								22295
							],
							[
								26407,
								26423
							],
							[
								27078,
								27082
							]
						],
						"symlist":
						[
							"atomic_add_int",
							"js_std_set_module_loader_func",
							"malloc_usable_size",
							"trim_dotslash",
							"jsm_module_record",
							"jsm_module_extern_compiled",
							"jsm_module_extern_native",
							"jsm_module_record_compiled",
							"jsm_module_record_native",
							"js_std_set_worker_new_context_func",
							"jsm_dump_error",
							"jsm_eval_buf",
							"jsm_init_modules",
							"jsm_builtin_native",
							"jsm_builtin_compiled",
							"jsm_load_package",
							"jsm_module_search_ext",
							"jsm_module_search",
							"jsm_module_find",
							"jsm_module_init",
							"jsm_module_load",
							"jsm_module_loader",
							"jsm_module_normalize",
							"jsm_eval_file",
							"jsm_script_file",
							"jsm_script_get",
							"jsm_script_push",
							"jsm_script_pop",
							"jsm_script_load",
							"jsm_context_new",
							"jsm_module_native",
							"trace_malloc_data",
							"dump_vector",
							"jsm_trace_malloc_ptr_offset",
							"jsm_trace_malloc_usable_size",
							"jsm_trace_malloc_init",
							"jsm_trace_malloc",
							"jsm_trace_free",
							"jsm_trace_realloc",
							"jsm_help",
							"jsm_eval_script",
							"jsm_module_func",
							"jsm_import_parse",
							"main"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB1DAAAICBzbGljZSA9ICh4LCBzLCBlKSA9PgogIHN0cmluZ2lmeSA9IHYgPT4KICBmb3JtYXROdW1iZXIgPSBuID0+CiAgaXNOYXRpdmUgPSBmbiA9PgogIHV0aWwoKQpBc3luY0Z1bmN0aW9uID0gZnVuY3Rpb24geCgpCkdlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24qKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCiAgaXNBbnlBcnJheUJ1ZmZlcih2KQogIGlzQXJyYXlCdWZmZXIodikKICBpc0JpZ0ludDY0QXJyYXkodikKICBpc0JpZ1VpbnQ2NEFycmF5KHYpCiAgaXNEYXRlKHYpCiAgaXNGbG9hdDMyQXJyYXkodikKICBpc0Zsb2F0NjRBcnJheSh2KQogIGlzSW50OEFycmF5KHYpCiAgaXNJbnQxNkFycmF5KHYpCiAgaXNJbnQzMkFycmF5KHYpCiAgaXNNYXAodikKICBpc1Byb21pc2UodikKICBpc1Byb3h5KHYpCiAgaXNSZWdFeHAodikKICBpc1NldCh2KQogIGlzU2hhcmVkQXJyYXlCdWZmZXIodikKICBpc1VpbnQ4QXJyYXkodikKICBpc1VpbnQ4Q2xhbXBlZEFycmF5KHYpCiAgaXNVaW50MTZBcnJheSh2KQogIGlzVWludDMyQXJyYXkodikKICBpc1dlYWtNYXAodikKICBpc1dlYWtTZXQodikKICBpc0RhdGFWaWV3KHYpCiAgaXNCb29sZWFuT2JqZWN0KHYpCiAgaXNBc3luY0Z1bmN0aW9uKHYpCiAgaXNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzTnVtYmVyT2JqZWN0KHYpCiAgaXNCaWdJbnRPYmplY3QodikKICBpc1N5bWJvbE9iamVjdCh2KQogIGlzTmF0aXZlRXJyb3IodikKICBpc01hcEl0ZXJhdG9yKHYpCiAgaXNTZXRJdGVyYXRvcih2KQogIGlzU3RyaW5nT2JqZWN0KHYpCiAgaXNBcnJheUJ1ZmZlclZpZXcodikKICBpc0FyZ3VtZW50c09iamVjdCh2KQogIGlzQm94ZWRQcmltaXRpdmUodikKICBjdG9yID0+CiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzQ29uc3RydWN0b3IodikKICBpc0l0ZXJhYmxlKHYpCiAgaXNBc3luY0l0ZXJhYmxlKHYpCiAgaXNJdGVyYXRvcih2KQogIGlzQXJyYXlMaWtlKHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCigpID0+CiAgY2xlYXJJbnRlcnZhbChpZCkKICBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpCiAgY3RvcgogIGN0b3IKICBzdXBlckN0b3IKICBtZW1vaXplKGZuLCBjYWNoZSA9IHt9KQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgZ2V0c2V0KHRhcmdldCkKR2V0U2V0ID0gKC4uLmFyZ3MpID0+CiAga2V5ID0+CiAgKGtleSwgdmFsdWUpID0+CiAga2V5ID0+CiAgKGtleSwgdmFsdWUpID0+CiAgZ2V0dGVyc2V0dGVyKHRhcmdldCkKICBnZXR0ZXJzZXR0ZXIgPSAoLi4uYXJncykgPT4KICBnZXR0ZXJzZXR0ZXIgPSAoLi4uYXJncykgPT4KICBnZXR0ZXJzZXR0ZXIgPSAoLi4uYXJncykgPT4KICBoYXNHZXRTZXQob2JqKQogIG0gPT4KICBtYXBPYmplY3QodGFyZ2V0KQogIHNldDogKGtleSwgdmFsdWUpID0+CiAgZ2V0OiBrZXkgPT4KICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICB3YWl0Rm9yKG1zKQogIHJlc29sdmUgPT4KICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIHdlYWtBc3NpZ24ob2JqLCAuLi5hcmdzKQogIGdldENvbnN0cnVjdG9yQ2hhaW4ob2JqKQogIGhhc1Byb3RvdHlwZShvYmosIHByb3RvKQogIGZpbHRlcihzZXEsIHByZWQsIHRoaXNBcmcpCiAgcHJlZCA9IChlbCwgaSkgPT4KICAoZiwgYXJyID0gW10sIGxlbmd0aCA9IGYubGVuZ3RoKSA9PgogICguLi5hcmdzKSA9PgogIGEgPT4KICBzcGxpdChidWYsIC4uLnBvaW50cykKICBzcGxpdEF0ID0gKGIsIHBvcywgbGVuKSA9PgogIHVuaXF1ZSA9IChhcnIsIGNtcCkgPT4KICAoZWwsIGksIGFycikgPT4KICBpdGVtID0+CiAgKGVsLCBpLCBhcnIpID0+CiAgZ2V0RnVuY3Rpb25Bcmd1bWVudHMgPSBmbiA9PgogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAob2Zmc2V0ID0gMCkgPT4KICBjb2RlID0+CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgZ2V0QW5zaVN0eWxlcygpCiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIGMgPT4KICB2YWx1ZTogaGV4ID0+CiAgY2hhcmFjdGVyID0+CiAgdmFsdWU6IGhleCA9PgogIHZhbHVlOiBjb2RlID0+CiAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PgogIHZhbHVlOiBoZXggPT4KICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICB2ID0+CiAgcmVwbGFjZVByb3BlcnR5KHZhbHVlKQogIGxhenlQcm9wZXJ0aWVzKG9iaiwgZ2V0dGVyc09iaiwgb3B0cyA9IHt9KQogIGdldE9wdChvcHRpb25zID0ge30sIGFyZ3MpCiAgZmluZE9wdCA9IGFyZyA9PgooW29wdG5hbWUsIG9wdGlvbl0pID0+CiAgb3B0ID0+CiAgdG9Vbml4VGltZShkYXRlT2JqLCB1dGMgPSBmYWxzZSkKICB1bml4VGltZSh1dGMgPSBmYWxzZSkKICBmcm9tVW5peFRpbWUoZXBvY2gsIHV0YyA9IGZhbHNlKQogIHJhbmdlKC4uLmFyZ3MpCiAgKHYsIGspID0+CiAgbiA9PgogIHJlcGVhdGVyKG4sIHdoYXQpCigpCigpCiAgcmVwZWF0KG4sIHdoYXQpCiAgY2h1bmtBcnJheShhcnIsIHNpemUpCiAgZm4gPSAoYSwgdiwgaSkgPT4KICBjYW1lbGl6ZShzdHIsIGRlbGltID0gJycpCiAgKG1hdGNoLCBwMSwgcDIsIG9mZnNldCkgPT4KICBkZWNhbWVsaXplKHN0ciwgZGVsaW0gPSAnLScpCiAgc2hvcnRlbihzdHIsIG1heCA9IDQwLCBzdWZmaXggPSAnLi4uJykKICBhcnJheXNJbkNvbW1vbihhKQooaXRtLCBpbmR4KSA9PgogIGFyciA9PgogIG1vZChhLCBiKQogIGIgOiBuID0+AAAAAAAAAACDAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					82,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
						"symkeys":
						[
							[
								177,
								190
							],
							[
								576,
								592
							],
							[
								1182,
								1193
							],
							[
								1455,
								1469
							],
							[
								1620,
								1638
							],
							[
								1766,
								1779
							],
							[
								3348,
								3366
							],
							[
								3965,
								3980
							],
							[
								4270,
								4281
							],
							[
								4730,
								4741
							],
							[
								4838,
								4850
							],
							[
								5000,
								5009
							],
							[
								5420,
								5432
							],
							[
								7873,
								7884
							],
							[
								8083,
								8095
							],
							[
								8942,
								8958
							],
							[
								9115,
								9132
							],
							[
								9276,
								9288
							],
							[
								9432,
								9447
							],
							[
								9591,
								9607
							],
							[
								9751,
								9763
							],
							[
								9908,
								9922
							],
							[
								10067,
								10082
							],
							[
								10278,
								10292
							],
							[
								11991,
								12004
							],
							[
								12155,
								12170
							],
							[
								12717,
								12726
							],
							[
								12904,
								12923
							],
							[
								13121,
								13140
							],
							[
								13336,
								13350
							],
							[
								13683,
								13695
							],
							[
								13837,
								13850
							]
						],
						"symlist":
						[
							"path_absolute",
							"path_absolute_db",
							"path_append",
							"path_canonical",
							"path_canonical_buf",
							"path_collapse",
							"path_common_prefix",
							"path_components",
							"path_concat",
							"path_exists",
							"path_extname",
							"path_find",
							"path_fnmatch",
							"path_getcwd",
							"path_gethome",
							"path_is_absolute",
							"path_is_directory",
							"path_is_file",
							"path_is_chardev",
							"path_is_blockdev",
							"path_is_fifo",
							"path_is_socket",
							"path_is_symlink",
							"path_normalize",
							"path_relative",
							"path_relative_b",
							"path_root",
							"path_skip_component",
							"path_skip_separator",
							"__path_dirname",
							"path_dirname",
							"path_readlink"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACDAwAAICBhdG9taWNfYWRkX2ludAogIGpzX3N0ZF9zZXRfbW9kdWxlX2xvYWRlcl9mdW5jCiAgbWFsbG9jX3VzYWJsZV9zaXplCiAgdHJpbV9kb3RzbGFzaAogIGpzbV9tb2R1bGVfcmVjb3JkCiAganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQKICBqc21fbW9kdWxlX2V4dGVybl9uYXRpdmUKICBqc21fbW9kdWxlX3JlY29yZF9jb21waWxlZAogIGpzbV9tb2R1bGVfcmVjb3JkX25hdGl2ZQogIGpzX3N0ZF9zZXRfd29ya2VyX25ld19jb250ZXh0X2Z1bmMKICBqc21fZHVtcF9lcnJvcgogIGpzbV9ldmFsX2J1ZgogIGpzbV9pbml0X21vZHVsZXMKICBqc21fYnVpbHRpbl9uYXRpdmUKICBqc21fYnVpbHRpbl9jb21waWxlZAogIGpzbV9sb2FkX3BhY2thZ2UKICBqc21fbW9kdWxlX3NlYXJjaF9leHQKICBqc21fbW9kdWxlX3NlYXJjaAogIGpzbV9tb2R1bGVfZmluZAogIGpzbV9tb2R1bGVfaW5pdAogIGpzbV9tb2R1bGVfbG9hZAogIGpzbV9tb2R1bGVfbG9hZGVyCiAganNtX21vZHVsZV9ub3JtYWxpemUKICBqc21fZXZhbF9maWxlCiAganNtX3NjcmlwdF9maWxlCiAganNtX3NjcmlwdF9nZXQKICBqc21fc2NyaXB0X3B1c2gKICBqc21fc2NyaXB0X3BvcAogIGpzbV9zY3JpcHRfbG9hZAogIGpzbV9jb250ZXh0X25ldwogIGpzbV9tb2R1bGVfbmF0aXZlCiAgdHJhY2VfbWFsbG9jX2RhdGEKICBkdW1wX3ZlY3RvcgogIGpzbV90cmFjZV9tYWxsb2NfcHRyX29mZnNldAogIGpzbV90cmFjZV9tYWxsb2NfdXNhYmxlX3NpemUKICBqc21fdHJhY2VfbWFsbG9jX2luaXQKICBqc21fdHJhY2VfbWFsbG9jCiAganNtX3RyYWNlX2ZyZWUKICBqc21fdHJhY2VfcmVhbGxvYwogIGpzbV9oZWxwCiAganNtX2V2YWxfc2NyaXB0CiAganNtX21vZHVsZV9mdW5jCiAganNtX2ltcG9ydF9wYXJzZQogIG1haW4AAAAAAAAAABgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					83,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								756,
								776
							],
							[
								966,
								982
							],
							[
								1036,
								1055
							],
							[
								1090,
								1106
							],
							[
								1148,
								1163
							],
							[
								1226,
								1260
							],
							[
								1283,
								1315
							],
							[
								1338,
								1381
							],
							[
								3210,
								3229
							],
							[
								3327,
								3343
							],
							[
								3405,
								3423
							],
							[
								3487,
								3506
							],
							[
								3571,
								3580
							],
							[
								3635,
								3652
							],
							[
								3715,
								3732
							],
							[
								3795,
								3809
							],
							[
								3869,
								3884
							],
							[
								3945,
								3960
							],
							[
								4021,
								4029
							],
							[
								4083,
								4095
							],
							[
								4153,
								4163
							],
							[
								4219,
								4230
							],
							[
								4287,
								4295
							],
							[
								4349,
								4371
							],
							[
								4439,
								4454
							],
							[
								4515,
								4537
							],
							[
								4605,
								4621
							],
							[
								4683,
								4699
							],
							[
								4761,
								4773
							],
							[
								4831,
								4843
							],
							[
								4901,
								4914
							],
							[
								4973,
								4991
							],
							[
								5049,
								5067
							],
							[
								5131,
								5153
							],
							[
								5221,
								5248
							],
							[
								5321,
								5338
							],
							[
								5395,
								5412
							],
							[
								5469,
								5486
							],
							[
								5533,
								5549
							],
							[
								5632,
								5648
							],
							[
								5720,
								5736
							],
							[
								5808,
								5825
							],
							[
								5882,
								5902
							],
							[
								5961,
								5981
							],
							[
								6140,
								6159
							],
							[
								6235,
								6242
							],
							[
								6271,
								6291
							],
							[
								6361,
								6376
							],
							[
								6437,
								6463
							],
							[
								6534,
								6550
							],
							[
								6606,
								6619
							],
							[
								6696,
								6714
							],
							[
								6796,
								6809
							],
							[
								6874,
								6888
							],
							[
								6990,
								7016
							],
							[
								7062,
								7087
							],
							[
								7172,
								7214
							],
							[
								7348,
								7388
							],
							[
								10317,
								10360
							],
							[
								10741,
								10776
							],
							[
								10932,
								10950
							],
							[
								10980,
								10985
							],
							[
								11075,
								11102
							],
							[
								11221,
								11256
							],
							[
								11317,
								11321
							],
							[
								11337,
								11341
							],
							[
								11368,
								11377
							],
							[
								11540,
								11573
							],
							[
								11627,
								11659
							],
							[
								11823,
								11847
							],
							[
								12003,
								12024
							],
							[
								12094,
								12100
							],
							[
								12117,
								12133
							],
							[
								12196,
								12202
							],
							[
								12215,
								12231
							],
							[
								12279,
								12309
							],
							[
								12541,
								12568
							],
							[
								12599,
								12626
							],
							[
								12725,
								12752
							],
							[
								12976,
								13000
							],
							[
								13050,
								13054
							],
							[
								13094,
								13121
							],
							[
								13351,
								13371
							],
							[
								13401,
								13412
							],
							[
								13511,
								13546
							],
							[
								13586,
								13604
							],
							[
								13791,
								13812
							],
							[
								13836,
								13846
							],
							[
								13885,
								13915
							],
							[
								14463,
								14497
							],
							[
								14798,
								14832
							],
							[
								15052,
								15086
							],
							[
								15152,
								15188
							],
							[
								15263,
								15280
							],
							[
								15439,
								15476
							],
							[
								15477,
								15491
							],
							[
								15497,
								15501
							],
							[
								15576,
								15608
							],
							[
								15636,
								15662
							],
							[
								15987,
								16009
							],
							[
								16047,
								16063
							],
							[
								16078,
								16085
							],
							[
								16107,
								16123
							],
							[
								16161,
								16189
							],
							[
								16408,
								16425
							],
							[
								16426,
								16435
							],
							[
								16487,
								16504
							],
							[
								16505,
								16514
							],
							[
								16574,
								16591
							],
							[
								16592,
								16615
							],
							[
								16671,
								16695
							],
							[
								19322,
								19350
							],
							[
								19781,
								19785
							],
							[
								19913,
								19926
							],
							[
								20242,
								20254
							],
							[
								20517,
								20530
							],
							[
								20635,
								20649
							],
							[
								21542,
								21570
							],
							[
								21686,
								21699
							],
							[
								21811,
								21837
							],
							[
								22032,
								22080
							],
							[
								22128,
								22240
							],
							[
								22345,
								22368
							],
							[
								22512,
								22564
							],
							[
								22658,
								22674
							],
							[
								22758,
								22769
							],
							[
								22882,
								22886
							],
							[
								23165,
								23198
							],
							[
								23312,
								23364
							],
							[
								23538,
								23574
							],
							[
								23731,
								23747
							],
							[
								23761,
								23783
							],
							[
								23896,
								23902
							],
							[
								25264,
								25306
							],
							[
								25501,
								25532
							],
							[
								25582,
								25624
							],
							[
								25744,
								25768
							],
							[
								25988,
								25998
							],
							[
								26051,
								26055
							],
							[
								26094,
								26121
							],
							[
								26168,
								26180
							],
							[
								26250,
								26262
							],
							[
								26325,
								26350
							],
							[
								26395,
								26426
							],
							[
								26437,
								26454
							],
							[
								26595,
								26630
							],
							[
								26678,
								26705
							],
							[
								26796,
								26834
							],
							[
								27043,
								27091
							],
							[
								27679,
								27706
							],
							[
								27909,
								27923
							],
							[
								27972,
								27978
							],
							[
								28019,
								28038
							],
							[
								28089,
								28097
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							" function gettersetter(target)",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							"gettersetter = (...args) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAYAgAAICBwYXRoX2Fic29sdXRlCiAgcGF0aF9hYnNvbHV0ZV9kYgogIHBhdGhfYXBwZW5kCiAgcGF0aF9jYW5vbmljYWwKICBwYXRoX2Nhbm9uaWNhbF9idWYKICBwYXRoX2NvbGxhcHNlCiAgcGF0aF9jb21tb25fcHJlZml4CiAgcGF0aF9jb21wb25lbnRzCiAgcGF0aF9jb25jYXQKICBwYXRoX2V4aXN0cwogIHBhdGhfZXh0bmFtZQogIHBhdGhfZmluZAogIHBhdGhfZm5tYXRjaAogIHBhdGhfZ2V0Y3dkCiAgcGF0aF9nZXRob21lCiAgcGF0aF9pc19hYnNvbHV0ZQogIHBhdGhfaXNfZGlyZWN0b3J5CiAgcGF0aF9pc19maWxlCiAgcGF0aF9pc19jaGFyZGV2CiAgcGF0aF9pc19ibG9ja2RldgogIHBhdGhfaXNfZmlmbwogIHBhdGhfaXNfc29ja2V0CiAgcGF0aF9pc19zeW1saW5rCiAgcGF0aF9ub3JtYWxpemUKICBwYXRoX3JlbGF0aXZlCiAgcGF0aF9yZWxhdGl2ZV9iCiAgcGF0aF9yb290CiAgcGF0aF9za2lwX2NvbXBvbmVudAogIHBhdGhfc2tpcF9zZXBhcmF0b3IKICBfX3BhdGhfZGlybmFtZQogIHBhdGhfZGlybmFtZQogIHBhdGhfcmVhZGxpbmsAAAAAAAAAAHUMAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "resolve-imports.js",
			"settings":
			{
				"buffer_size": 31422,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8402,
					1,
					"left_delete",
					null,
					"AQAAAHxYAAAAAAAAfFgAAAAAAAABAAAAMQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9WAAAAAAAAH1YAAAAAAAAAAAAAAAA8L8"
				],
				[
					8403,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAHxYAAAAAAAAfVgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB8WAAAAAAAAHxYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8416,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAMdYAAAAAAAAyVgAAAAAAAAAAAAArVgAAAAAAACvWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtWAAAAAAAAMdYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8428,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKtYAAAAAAAArFgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrWAAAAAAAAKtYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8429,
					1,
					"insert",
					{
						"characters": " foile"
					},
					"BgAAAKxYAAAAAAAArVgAAAAAAAAAAAAArVgAAAAAAACuWAAAAAAAAAAAAACuWAAAAAAAAK9YAAAAAAAAAAAAAK9YAAAAAAAAsFgAAAAAAAAAAAAAsFgAAAAAAACxWAAAAAAAAAAAAACxWAAAAAAAALJYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsWAAAAAAAAKxYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8430,
					4,
					"left_delete",
					null,
					"BAAAALFYAAAAAAAAsVgAAAAAAAABAAAAZbBYAAAAAAAAsFgAAAAAAAABAAAAbK9YAAAAAAAAr1gAAAAAAAABAAAAaa5YAAAAAAAArlgAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyWAAAAAAAALJYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8431,
					1,
					"insert",
					{
						"characters": "ile"
					},
					"AwAAAK5YAAAAAAAAr1gAAAAAAAAAAAAAr1gAAAAAAACwWAAAAAAAAAAAAACwWAAAAAAAALFYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuWAAAAAAAAK5YAAAAAAAAAAAAAAAA8L8"
				],
				[
					8436,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxWAAAAAAAALFYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8476,
					1,
					"insert",
					{
						"characters": "length:"
					},
					"BwAAAKFYAAAAAAAAolgAAAAAAAAAAAAAolgAAAAAAACjWAAAAAAAAAAAAACjWAAAAAAAAKRYAAAAAAAAAAAAAKRYAAAAAAAApVgAAAAAAAAAAAAApVgAAAAAAACmWAAAAAAAAAAAAACmWAAAAAAAAKdYAAAAAAAAAAAAAKdYAAAAAAAAqFgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChWAAAAAAAAKFYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8477,
					1,
					"insert",
					{
						"characters": " this,.l"
					},
					"CAAAAKhYAAAAAAAAqVgAAAAAAAAAAAAAqVgAAAAAAACqWAAAAAAAAAAAAACqWAAAAAAAAKtYAAAAAAAAAAAAAKtYAAAAAAAArFgAAAAAAAAAAAAArFgAAAAAAACtWAAAAAAAAAAAAACtWAAAAAAAAK5YAAAAAAAAAAAAAK5YAAAAAAAAr1gAAAAAAAAAAAAAr1gAAAAAAACwWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoWAAAAAAAAKhYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8478,
					3,
					"left_delete",
					null,
					"AwAAAK9YAAAAAAAAr1gAAAAAAAABAAAAbK5YAAAAAAAArlgAAAAAAAABAAAALq1YAAAAAAAArVgAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwWAAAAAAAALBYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8479,
					1,
					"insert",
					{
						"characters": ".length,"
					},
					"CAAAAK1YAAAAAAAArlgAAAAAAAAAAAAArlgAAAAAAACvWAAAAAAAAAAAAACvWAAAAAAAALBYAAAAAAAAAAAAALBYAAAAAAAAsVgAAAAAAAAAAAAAsVgAAAAAAACyWAAAAAAAAAAAAACyWAAAAAAAALNYAAAAAAAAAAAAALNYAAAAAAAAtFgAAAAAAAAAAAAAtFgAAAAAAAC1WAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtWAAAAAAAAK1YAAAAAAAAAAAAAAAA8L8"
				],
				[
					8480,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALVYAAAAAAAAtlgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1WAAAAAAAALVYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8511,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAABVXAAAAAAAAFlcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAVVwAAAAAAABVXAAAAAAAAAAAAAAAA8L8"
				],
				[
					8512,
					1,
					"insert",
					{
						"characters": " &/&^"
					},
					"BQAAABZXAAAAAAAAF1cAAAAAAAAAAAAAF1cAAAAAAAAYVwAAAAAAAAAAAAAYVwAAAAAAABlXAAAAAAAAAAAAABlXAAAAAAAAGlcAAAAAAAAAAAAAGlcAAAAAAAAbVwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAWVwAAAAAAABZXAAAAAAAAAAAAAAAA8L8"
				],
				[
					8513,
					4,
					"left_delete",
					null,
					"BAAAABpXAAAAAAAAGlcAAAAAAAABAAAAXhlXAAAAAAAAGVcAAAAAAAABAAAAJhhXAAAAAAAAGFcAAAAAAAABAAAALxdXAAAAAAAAF1cAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbVwAAAAAAABtXAAAAAAAAAAAAAAAA8L8"
				],
				[
					8514,
					1,
					"insert",
					{
						"characters": "/&/"
					},
					"AwAAABdXAAAAAAAAGFcAAAAAAAAAAAAAGFcAAAAAAAAZVwAAAAAAAAAAAAAZVwAAAAAAABpXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAXVwAAAAAAABdXAAAAAAAAAAAAAAAA8L8"
				],
				[
					8515,
					2,
					"left_delete",
					null,
					"AgAAABlXAAAAAAAAGVcAAAAAAAABAAAALxhXAAAAAAAAGFcAAAAAAAABAAAAJg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaVwAAAAAAABpXAAAAAAAAAAAAAAAA8L8"
				],
				[
					8516,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAABhXAAAAAAAAGVcAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAYVwAAAAAAABhXAAAAAAAAAAAAAAAA8L8"
				],
				[
					8518,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAMBXAAAAAAAAwVcAAAAAAAAAAAAAwVcAAAAAAADJVwAAAAAAAAAAAADJVwAAAAAAAMpXAAAAAAAAAAAAAMFXAAAAAAAAwVcAAAAAAAAIAAAAICAgICAgICDBVwAAAAAAAMdXAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADAVwAAAAAAAMBXAAAAAAAAAAAAAABgd0A"
				],
				[
					8523,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACcegAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgeyBMZXhlciwgVG9rZW4gfSBmcm9tICdsZXhlcic7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IEpTTGV4ZXIgZnJvbSAnanNsZXhlci5qcyc7CmltcG9ydCB7IHJhbmRJbnQsIGdldFR5cGVOYW1lLCBnZXRUeXBlU3RyLCBpc09iamVjdCwgc2hvcnRlbiwgdG9TdHJpbmcsIHRvQXJyYXlCdWZmZXIsIGRlZmluZSwgY3VycnksIHVuaXF1ZSwgc3BsaXQsIGV4dGVuZEFycmF5LCBjYW1lbGl6ZSwgdHlwZXMsIGdldE9wdCwgcXVvdGUsIGVzY2FwZSB9IGZyb20gJ3V0aWwnOwoKKCd1c2Ugc3RyaWN0Jyk7CigndXNlIG1hdGgnKTsKCmxldCBidWZmZXJzID0ge30sCiAgbW9kdWxlcyA9IHt9LAogIHJlbW92ZUV4cG9ydHMgPSBmYWxzZSwKICByZW1vdmVJbXBvcnRzID0gZmFsc2UsCiAgcmVtb3ZlQ29tbWVudHMgPSBmYWxzZSwKICByZWxhdGl2ZVRvLAogIG91dHB1dEZpbGUsCiAgcmVjdXJzaXZlID0gdHJ1ZSwKICBkZWJ1ZyA9IDAsCiAgaGVhZGVyID0gW10sCiAgcHJvY2Vzc2VkID0gbmV3IFNldCgpLAogIGJ1ZmZlclJlZiA9IG5ldyBXZWFrTWFwKCksCiAgZmlsZUJ1ZmZlcnMgPSBuZXcgTWFwKCksCiAgZmlsZU1hcHMgPSBuZXcgTWFwKCk7Cgpjb25zdCBGaWxlQmFubmVyQ29tbWVudCA9IChmaWxlbmFtZSwgaSkgPT4gewogIGxldCBzID0gJyc7CiAgcyArPSBgICR7aSA/ICdlbmQnIDogJ3N0YXJ0J30gb2YgJyR7cGF0aC5iYXNlbmFtZShmaWxlbmFtZSl9JyBgOwogIGxldCBuID0gTWF0aC5mbG9vcigoODAgLSA2IC0gcy5sZW5ndGgpIC8gMik7CiAgcyA9ICcvKiAnICsgJy0nLnJlcGVhdChuKSArIHM7CiAgcyArPSAnLScucmVwZWF0KDgwIC0gMyAtIHMubGVuZ3RoKSArICcgKi8nOwogIGlmKGkgPT0gMCkgcyA9ICdcbicgKyBzICsgJ1xuJzsKICBlbHNlIHMgPSBzICsgJ1xuJzsKICByZXR1cm4gczsKfTsKCmV4dGVuZEFycmF5KEFycmF5LnByb3RvdHlwZSk7CmNvbnN0IElzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4gL15bXlwvLl0rJC8udGVzdChtb2R1bGVOYW1lKTsKY29uc3QgY29tcGFjdCA9IChuLCBtb3JlID0ge30pID0+IGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogbiwgbWF4QXJyYXlMZW5ndGg6IDEwMCwgLi4ubW9yZSB9KTsKY29uc3QgQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4gKGFyci5pbmRleE9mKGl0ZW0pID09IC0xID8gYXJyLnB1c2goaXRlbSkgOiBudWxsKTsKY29uc3QgSW50VG9EV29yZCA9IGl2YWwgPT4gKGlzTmFOKGl2YWwpID09PSBmYWxzZSAmJiBpdmFsIDwgMCA/IGl2YWwgKyA0Mjk0OTY3Mjk2IDogaXZhbCk7CmNvbnN0IEludFRvQmluYXJ5ID0gaSA9PiAoaSA9PSAtMSB8fCB0eXBlb2YgaSAhPSAnbnVtYmVyJyA/IGkgOiAnMGInICsgSW50VG9EV29yZChpKS50b1N0cmluZygyKSk7Cgpjb25zdCBXaGF0ID0geyBJTVBPUlQ6IFN5bWJvbC5mb3IoJ2ltcG9ydCcpLCBFWFBPUlQ6IFN5bWJvbC5mb3IoJ2V4cG9ydCcpIH07CmNvbnN0IEltcG9ydFR5cGVzID0geyBJTVBPUlQ6IDAsIElNUE9SVF9ERUZBVUxUOiAxLCBJTVBPUlRfTkFNRVNQQUNFOiAyIH07CmNvbnN0IElzT25lT2YgPSBjdXJyeSgobiwgdmFsdWUpID0+IChBcnJheS5pc0FycmF5KG4pID8gbi5zb21lKG51bSA9PiBudW0gPT09IHZhbHVlKSA6IG4gPT09IHZhbHVlKSk7CmNvbnN0IFRva0lzID0gY3VycnkoKHR5cGUsIGxleGVtZSwgdG9rKSA9PiB7CiAgaWYodG9rICE9IHVuZGVmaW5lZCkgewogICAgaWYobGV4ZW1lICE9IHVuZGVmaW5lZCkgaWYgKHR5cGVvZiBsZXhlbWUgPT0gJ3N0cmluZycgJiYgIUlzT25lT2YobGV4ZW1lLCB0b2subGV4ZW1lKSkgcmV0dXJuIGZhbHNlOwogICAgaWYodHlwZSAhPSB1bmRlZmluZWQpIHsKICAgICAgaWYodHlwZW9mIHR5cGUgPT0gJ3N0cmluZycgJiYgIUlzT25lT2YodHlwZSwgdG9rLnR5cGUpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmKHR5cGVvZiB0eXBlID09ICdudW1iZXInICYmICFJc09uZU9mKHR5cGUsIHRvay5pZCkpIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0KfSk7CmNvbnN0IENvbXBhcmVSYW5nZSA9IChhLCBiKSA9PiAoYSA9PT0gbnVsbCB8fCBiID09PSBudWxsID8gMCA6IHR5cGVvZiBhWzBdID09ICdudW1iZXInICYmIHR5cGVvZiBiWzBdID09ICdudW1iZXInICYmIGFbMF0gIT0gYlswXSA/IGFbMF0gLSBiWzBdIDogYVsxXSAtIGJbMV0pOwoKY29uc3QgSXNLZXl3b3JkID0gVG9rSXMoJ2tleXdvcmQnKTsKY29uc3QgSXNQdW5jdHVhdG9yID0gVG9rSXMoJ3B1bmN0dWF0b3InKTsKY29uc3QgSXNJZGVudGlmaWVyID0gVG9rSXMoJ2lkZW50aWZpZXInKTsKY29uc3QgSXNTdHJpbmdMaXRlcmFsID0gVG9rSXMoJ3N0cmluZ0xpdGVyYWwnKTsKY29uc3QgUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+IHsKICBsZXQgYiA9IHRvQXJyYXlCdWZmZXIoc3RyKTsKICByZXR1cm4gb3V0Rm4oYiwgYi5ieXRlTGVuZ3RoKTsKfTsKCmNvbnN0IGRlYnVnTG9nID0gKHN0ciwgLi4uYXJncykgPT4gewogIGNvbnN0IHByZWQgPSBhcmcgPT4gaXNPYmplY3QoYXJnKSAmJiAnY29tcGFjdCcgaW4gYXJnOwogIGxldCBvcHRzID0gYXJncy5maWx0ZXIocHJlZCk7CgogIG9wdHMgPSBvcHRzLnJlZHVjZSgoYWNjLCBvcHQpID0+IGRlZmluZShhY2MsIG9wdCksIG9wdHMuc2hpZnQoKSA/PyB7fSk7CgogIGlmKG9wdHMuY29tcGFjdCA9PT0gdW5kZWZpbmVkKSBkZWZpbmUob3B0cywgY29tcGFjdCgxKSk7CiAgaWYob3B0cy5tYXhBcnJheUxlbmd0aCA9PT0gdW5kZWZpbmVkKSBkZWZpbmUob3B0cywgeyBtYXhBcnJheUxlbmd0aDogMTAgfSk7CiAgaWYob3B0cy5kZXB0aCA9PT0gdW5kZWZpbmVkKSBkZWZpbmUob3B0cywgeyBkZXB0aDogSW5maW5pdHkgfSk7CgogIGFyZ3MgPSBhcmdzLmZpbHRlcihhcmcgPT4gIXByZWQoYXJnKSk7CgogIGNvbnNvbGUubG9nKHN0ciwgb3B0cywgLi4uYXJncyk7Cn07Cgpjb25zdCBGaWxlV3JpdGVyID0gZmlsZSA9PiB7CiAgbGV0IGZkID0gb3Mub3BlbihmaWxlLCBvcy5PX1dST05MWSB8IG9zLk9fQ1JFQVQgfCBvcy5PX1RSVU5DLCAwbzY0NCk7CiAgcmV0dXJuIGRlZmluZShGZFdyaXRlcihmZCwgZmlsZSksIHsKICAgIGNsb3NlOiAoKSA9PiBvcy5jbG9zZShmZCkKICB9KTsKfTsKCmZ1bmN0aW9uIEZkV3JpdGVyKGZkLCBuYW1lKSB7CiAgLy9kZWJ1Z0xvZygnRmRXcml0ZXInLCB7IGZkLCBuYW1lIH0pOwogIGxldCBmbjsKICBmbiA9IChidWYsIGxlbikgPT4gewogICAgLy8gaWYoIWJ1ZiB8fCAhbGVuKSBpZiAodHlwZW9mIGZuLmNsb3NlID09ICdmdW5jdGlvbicpIHJldHVybiBmbi5jbG9zZSgpOwogICAgbGVuID8/PSBidWYuYnl0ZUxlbmd0aDsKICAgIGxldCByZXN1bHQgPSBvcy53cml0ZShmZCwgYnVmLCAwLCBsZW4pOwogICAgLy9kZWJ1Z0xvZygnRmRXcml0ZXIud3JpdGUnLCB7IGZkLCBidWY6IHNob3J0ZW4odG9TdHJpbmcoYnVmKSwgODApLCBsZW4sIHJlc3VsdCB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgZGVmaW5lKGZuLCB7CiAgICBmZCwKICAgIG5hbWUsCiAgICBmaWxlOiBuYW1lID8/IGZkLAogICAgcHV0czogUHV0c0Z1bmN0aW9uKGZuKSwKICAgIHdyaXRlOiBmbiwKICAgIGNsb3NlOiAoKSA9PiB7fSwKICAgIHNlZWs6ICh3aGVuY2UsIG9mZnNldCkgPT4gb3Muc2VlayhmZCwgd2hlbmNlLCBvZmZzZXQpLAoKICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiBgRmlsZVdyaXRlcjwgJHtmZH0gPmAsCiAgICBpbnNwZWN0KCkgewogICAgICByZXR1cm4gaW5zcGVjdCh7IGZkIH0pID8/IHRoaXNbU3ltYm9sLnRvU3RyaW5nVGFnXTsKICAgIH0KICB9KTsKICByZXR1cm4gZm47Cn0KCmZ1bmN0aW9uIEltcG9ydElkcyhzZXEpIHsKICByZXR1cm4gc2VxLmZpbHRlcih0b2sgPT4gSXNJZGVudGlmaWVyKG51bGwsIHRvaykpOwp9CgpmdW5jdGlvbiBJbXBFeHBUeXBlKHNlcSkgewogIGlmKHNlcS5zb21lKHRvayA9PiBJc0tleXdvcmQoJ2ltcG9ydCcsIHRvaykpKSByZXR1cm4gV2hhdC5JTVBPUlQ7CiAgaWYoc2VxLnNvbWUodG9rID0+IElzS2V5d29yZCgnZXhwb3J0JywgdG9rKSkpIHJldHVybiBXaGF0LkVYUE9SVDsKfQpmdW5jdGlvbiBJbXBvcnRUeXBlKHNlcSkgewogIGlmKElzS2V5d29yZChbJ2ltcG9ydCcsICdleHBvcnQnXSwgc2VxWzBdKSkgc2VxLnNoaWZ0KCk7CiAgaWYoSXNQdW5jdHVhdG9yKCcqJywgc2VxWzBdKSkgewogICAgaWYoSXNLZXl3b3JkKCdhcycsIHNlcVsxXSkpIHJldHVybiBJbXBvcnRUeXBlcy5JTVBPUlRfTkFNRVNQQUNFOwogIH0gZWxzZSBpZihJc0lkZW50aWZpZXIodW5kZWZpbmVkLCBzZXFbMF0pKSB7CiAgICBpZihJc0tleXdvcmQoJ2Zyb20nLCBzZXFbMV0pKSByZXR1cm4gSW1wb3J0VHlwZXMuSU1QT1JUX0RFRkFVTFQ7CiAgfQogIHJldHVybiBJbXBvcnRUeXBlcy5JTVBPUlQ7Cn0KCmZ1bmN0aW9uIEltcG9ydEZpbGUoc2VxKSB7CiAgc2VxID0gTm9uV1Moc2VxKTsKICAvL2NvbnNvbGUubG9nKCdJbXBvcnRGaWxlJywgeyBzZXEgfSk7CiAgbGV0IGlkeCA9IHNlcS5maW5kSW5kZXgodG9rID0+IElzS2V5d29yZCgnZnJvbScsIHRvaykpOwogIHdoaWxlKHNlcVtpZHhdICYmIHNlcVtpZHhdLnR5cGUgIT0gJ3N0cmluZ0xpdGVyYWwnKSArK2lkeDsKCiAgLy8gIGlmKHNlcVtpZHgtMV0ubGV4ZW1lID09ICdmcm9tJykKICBpZihzZXFbaWR4XSkgaWYgKHNlcVtpZHhdLnR5cGUgPT0gJ3N0cmluZ0xpdGVyYWwnKSByZXR1cm4gc2VxW2lkeF0ubGV4ZW1lLnJlcGxhY2UoL15bXCdcIlxgXSguKilbXCdcIlxgXSQvZywgJyQxJyk7Cn0KCmZ1bmN0aW9uIEV4cG9ydE5hbWUoc2VxKSB7CiAgbGV0IGlkeCA9IHNlcS5maW5kSW5kZXgodG9rID0+IElzSWRlbnRpZmllcih1bmRlZmluZWQsIHRvaykgfHwgSXNLZXl3b3JkKCdkZWZhdWx0JywgdG9rKSk7CiAgcmV0dXJuIHNlcVtpZHhdPy5sZXhlbWU7Cn0KCmZ1bmN0aW9uIEJ5dGVTZXF1ZW5jZSh0b2tlbnMpIHsKICBpZih0b2tlbnMubGVuZ3RoKSB7CiAgICBsZXQgeyBsb2MgfSA9IHRva2Vuc1swXTsKICAgIGxldCBzdGFydCA9IGxvYy5ieXRlT2Zmc2V0OwogICAgbGV0IHRvdGFsID0gdG9rZW5zLnJlZHVjZSgobiwgdCkgPT4gbiArIHQuYnl0ZUxlbmd0aCwgMCk7CiAgICBsZXQgZW5kID0gc3RhcnQgKyB0b3RhbDsKICAgIC8vbGV0IGxpbmUgPSB0b1N0cmluZyhCdWZmZXJGaWxlKGxvYy5maWxlKS5zbGljZShzdGFydCwgZW5kKSk7CiAgICByZXR1cm4gW3N0YXJ0LCBlbmRdOwogIH0KfQoKZnVuY3Rpb24gQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKSB7CiAgaWYodG9rZW5zWzBdLnNlcSA9PSB0b2tlbnNbMV0uc2VxKSB0b2tlbnMuc2hpZnQoKTsKCiAgY29uc3QgeyBsb2MsIHNlcSB9ID0gdG9rZW5zWzBdOwoKICBpZighL14oaW18ZXgpcG9ydCQvaS50ZXN0KHRva2Vuc1swXS5sZXhlbWUpKSB0aHJvdyBuZXcgRXJyb3IoYEFkZEV4cG9ydCB0b2tlbnM6IGAgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgbGV0IGRlZiA9IHRva2Vucy5zb21lKHRvayA9PiBJc0tleXdvcmQoJ2RlZmF1bHQnLCB0b2spKTsKICBsZXQgZmlsZSA9IEltcG9ydEZpbGUodG9rZW5zKTsgLy8gZnJvbUluZGV4ICE9IC0xID8gVW5xdW90ZSh0b2tlbnNbZnJvbUluZGV4ICsgMV0ubGV4ZW1lKSA6IG51bGw7CiAgaWYoZmlsZSA9PSAnICcpIHRocm93IG5ldyBFcnJvcignWFhYICcgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgY29uc3QgaWR4ID0gZGVmIHx8IGZpbGUgPyB0b2tlbnMuZmluZEluZGV4KHRvayA9PiB0b2subGV4ZW1lID09ICc7JykgOiB0b2tlbnMuc2xpY2UoMSkuZmluZEluZGV4KHRvayA9PiB0b2sudHlwZSAhPSAnd2hpdGVzcGFjZScpOwogIGNvbnN0IHJlbW92ZSA9IHRva2Vucy5zbGljZSgwLCBpZHggKyAxKTsgLy9pZHggKyAxKTsKICBpZihyZW1vdmVbMF0pIGlmIChyZW1vdmVbMF0ubGV4ZW1lICE9ICdleHBvcnQnKSB0aHJvdyBuZXcgRXJyb3IoYEFkZEV4cG9ydCB0b2tlbnM6IGAgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgY29uc3QgcmFuZ2UgPSBCeXRlU2VxdWVuY2UocmVtb3ZlKSA/PyBCeXRlU2VxdWVuY2UodG9rZW5zKTsKICBsZXQgc291cmNlID0gbG9jLmZpbGU7CiAgbGV0IHR5cGUgPSBJbXBFeHBUeXBlKHRva2Vucyk7CiAgbGV0IGNvZGUgPSB0b1N0cmluZyhCdWZmZXJGaWxlKHNvdXJjZSkuc2xpY2UoLi4ucmFuZ2UpKTsKICAvL2NvbnNvbGUubG9nKCdBZGRFeHBvcnQnLCB7cmVtb3ZlLHJhbmdlLGNvZGV9KTsKICBsZXQgbGVuID0gdG9rZW5zLmxlbmd0aDsKICAvLyAgY29uc29sZS5sb2coJ0FkZEV4cG9ydCcsIHsgcmFuZ2UsIGNvZGUgfSk7CiAgaWYodG9rZW5zWzFdLmxleGVtZSAhPSAneycpIGxlbiA9IHRva2Vucy5maW5kSW5kZXgodG9rID0+IElzSWRlbnRpZmllcih1bmRlZmluZWQsIHRvaykgfHwgSXNLZXl3b3JkKCdkZWZhdWx0JywgdG9rKSkgKyAxOwogIHRva2VucyA9IHRva2Vucy5zbGljZSgwLCBsZW4pOwogIGxldCBleHAgPSBkZWZpbmUoCiAgICB7CiAgICAgIHR5cGU6IFdoYXQuRVhQT1JULAogICAgICBmaWxlOiBmaWxlICYmIC9cLi8udGVzdChmaWxlKSA/IHJlbGF0aXZlUGF0aChmaWxlKSA6IGZpbGUsCiAgICAgIHRva2VucywKICAgICAgZXhwb3J0ZWQ6IEV4cG9ydE5hbWUodG9rZW5zKSwKICAgICAgcmFuZ2UKICAgIH0sCiAgICB7CiAgICAgIGNvZGUsCiAgICAgIGxvYywKICAgICAgaWRzKCkgewogICAgICAgIHJldHVybiBJbXBvcnRJZHModGhpcy50b2tlbnMpOwogICAgICB9CiAgICB9CiAgKTsKICByZXR1cm4gZXhwOwp9CgpmdW5jdGlvbiBBZGRJbXBvcnQodG9rZW5zLCByZWxhdGl2ZVBhdGggPSBzID0+IHMpIHsKICBpZighL14oaW18ZXgpcG9ydCQvaS50ZXN0KHRva2Vuc1swXS5sZXhlbWUpKSB0aHJvdyBuZXcgRXJyb3IoYEFkZEltcG9ydCB0b2tlbnM6IGAgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgY29uc3QgdG9rID0gdG9rZW5zWzBdOwogIGNvbnN0IHsgbG9jLCBzZXEgfSA9IHRvazsKICBsZXQgc291cmNlID0gbG9jLmZpbGU7CiAgbGV0IHR5cGUgPSBJbXBFeHBUeXBlKHRva2Vucy5zbGljZSgpKSwKICAgIGZpbGUgPSBJbXBvcnRGaWxlKHRva2Vucy5zbGljZSgpKTsKICBjb25zdCByYW5nZSA9IEJ5dGVTZXF1ZW5jZSh0b2tlbnMuc2xpY2UoKSk7CiAgcmFuZ2VbMF0gPSBsb2MuYnl0ZU9mZnNldDsKICBsZXQgY29kZSA9IHRvU3RyaW5nKEJ1ZmZlckZpbGUoc291cmNlKS5zbGljZSguLi5yYW5nZSkpOwoKICAvL2RlYnVnTG9nKCdBZGRJbXBvcnQnLCB7IHR5cGUsIGZpbGUsY29kZSxyYW5nZSB9KTsKCiAgLy9pZighL1wuLy50ZXN0KGZpbGUpKSByZXR1cm4gbnVsbDsKICBsZXQgaW1wID0gZGVmaW5lKAogICAgeyB0eXBlLCBmaWxlOiBmaWxlICYmIC9cLi8udGVzdChmaWxlKSA/IHJlbGF0aXZlUGF0aChmaWxlKSA6IGZpbGUsIHJhbmdlIH0sCiAgICB7CiAgICAgIHRva2VuczogdG9rZW5zLnNsaWNlKCksCiAgICAgIGNvZGUsCiAgICAgIGxvYywKICAgICAgaWRzKCkgewogICAgICAgIHJldHVybiBJbXBvcnRJZHModG9rZW5zLnNsaWNlKCkpOwogICAgICB9CiAgICB9CiAgKTsKICBsZXQgZm4gPSB7CiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX05BTUVTUEFDRV0oKSB7CiAgICAgIGNvbnN0IHsgdG9rZW5zIH0gPSB0aGlzOwogICAgICBsZXQgaWR4ID0gdG9rZW5zLmZpbmRJbmRleCh0b2sgPT4gSXNLZXl3b3JkKCdhcycsIHRvaykpOwogICAgICByZXR1cm4gdG9rZW5zW2lkeCArIDFdLmxleGVtZTsKICAgIH0sCiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX0RFRkFVTFRdKCkgewogICAgICBjb25zdCB7IHRva2VucyB9ID0gdGhpczsKICAgICAgbGV0IGlkeCA9IHRva2Vucy5maW5kSW5kZXgodG9rID0+IElzS2V5d29yZCgnaW1wb3J0JywgdG9rKSk7CiAgICAgIHJldHVybiB0b2tlbnNbaWR4ICsgMV0ubGV4ZW1lOwogICAgfSwKICAgIFtJbXBvcnRUeXBlcy5JTVBPUlRdKCkgewogICAgICBjb25zdCB7IHRva2VucyB9ID0gdGhpczsKICAgICAgbGV0IGlkeCA9IDAsCiAgICAgICAgc3BlY2lmaWVyID0gW10sCiAgICAgICAgc3BlY2lmaWVycyA9IFtdOwogICAgICBpZihJc0tleXdvcmQoWydpbXBvcnQnLCAnZXhwb3J0J10sIHRva2Vuc1tpZHhdKSkgKytpZHg7CiAgICAgIGlmKElzUHVuY3R1YXRvcigneycsIHRva2Vuc1tpZHhdKSkgKytpZHg7CiAgICAgIGZvcig7IHRva2Vuc1tpZHhdICYmICFJc0tleXdvcmQoJ2Zyb20nLCB0b2tlbnNbaWR4XSk7ICsraWR4KSB7CiAgICAgICAgaWYoSXNQdW5jdHVhdG9yKFsnLCcsICd9J10sIHRva2Vuc1tpZHhdKSkgewogICAgICAgICAgaWYoc3BlY2lmaWVyLmxlbmd0aCkgc3BlY2lmaWVycy5wdXNoKHNwZWNpZmllcik7CiAgICAgICAgICBzcGVjaWZpZXIgPSBbXTsKICAgICAgICB9IGVsc2UgaWYoSXNJZGVudGlmaWVyKHRva2Vuc1tpZHhdKSkgewogICAgICAgICAgc3BlY2lmaWVyLnB1c2godG9rZW5zW2lkeF0pOwogICAgICAgIH0KICAgICAgfQogICAgICBzcGVjaWZpZXJzID0gc3BlY2lmaWVycy5mbGF0KCkuZmlsdGVyKHRvayA9PiB0b2sudHlwZSA9PSAnaWRlbnRpZmllcicpOwogICAgICByZXR1cm4gc3BlY2lmaWVycy5tYXAodG9rID0+IHRvay5sZXhlbWUpOwogICAgfQogIH1bdHlwZV07CgogIGlmKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nKSB7CiAgICBsZXQgbG9jYWwgPSBmbi5jYWxsKGltcCk7CgogICAgLy8gY29uc29sZS5sb2coJ0FkZEltcG9ydCcsIHsgbG9jYWwgfSk7CiAgICBkZWZpbmUoaW1wLCB7IGxvY2FsIH0pOwogIH0KCiAgcmV0dXJuIGltcDsKfQoKZnVuY3Rpb24gUHJvY2Vzc0ZpbGUoc291cmNlLCBsb2cgPSAoKSA9PiB7fSwgcmVjdXJzaXZlKSB7CiAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTsKICBjb25zdCBkaXIgPSBwYXRoLmRpcm5hbWUoc291cmNlKTsKICAvL2NvbnNvbGUubG9nKCdQcm9jZXNzRmlsZScsIHtzb3VyY2UsZGlyfSk7CgogIGxldCBieXRlYnVmID0gc291cmNlID8gQnVmZmVyRmlsZShzb3VyY2UpIDogY29kZVsxXTsKCiAgbGV0IGxlbiA9IGJ5dGVidWYuYnl0ZUxlbmd0aCwKICAgIHR5cGUgPSBwYXRoLmV4dG5hbWUoc291cmNlKS5zdWJzdHJpbmcoMSksCiAgICBiYXNlID0gY2FtZWxpemUocGF0aC5iYXNlbmFtZShzb3VyY2UsICcuJyArIHR5cGUpLnJlcGxhY2UoL1teMC05QS1aYS16X10vZywgJ18nKSk7CgogIGxldCBsZXggPSB7CiAgICBqczogbmV3IEpTTGV4ZXIoYnl0ZWJ1Ziwgc291cmNlKQogIH07CiAgbGV4Lm1qcyA9IGxleC5qczsKICBsZXguY2pzID0gbGV4LmpzOwoKICBjb25zdCBsZXhlciA9IGxleFt0eXBlXTsKCiAgLy8gVCA9IGxleGVyLnRva2Vucy5yZWR1Y2UoKGFjYywgbmFtZSwgaWQpID0+ICh7IC4uLmFjYywgW25hbWVdOiBpZCB9KSwge30pOwoKICBsZXQgZSA9IG5ldyBTeW50YXhFcnJvcigpOwoKICBpZighbGV4ZXIpIHRocm93IG5ldyBFcnJvcihgRXJyb3IgbGV4aW5nOiAke3NvdXJjZX1gKTsKCiAgbGV4ZXIuaGFuZGxlciA9IGxleCA9PiB7CiAgICBjb25zdCB7IGxvYywgbW9kZSwgcG9zLCBzdGFydCwgYnl0ZUxlbmd0aCwgc3RhdGUgfSA9IGxleDsKICAgIGxvZygnICcucmVwZWF0KGxvYy5jb2x1bW4gLSAxKSArICdeJyk7CiAgfTsKICBsZXQgdG9rZW5MaXN0ID0gW10sCiAgICBkZWNsYXJhdGlvbnMgPSBbXTsKICBjb25zdCBjb2xTaXplcyA9IFsxMiwgOCwgNCwgMjAsIDMyLCAxMCwgMF07CgogIGxldCB0b2ssCiAgICBpID0gMCwKICAgIG1hc2sgPSBJbnRUb0JpbmFyeShsZXhlci5tYXNrKSwKICAgIHN0YXRlID0gbGV4ZXIudG9wU3RhdGUoKTsKICBsZXhlci5iZWdpbkNvZGUgPSAoKSA9PiAoY29kZSA9PSAnanMnID8gMGIxMDAwIDogMGIwMTAwKTsKICBjb25zdCBiYWxhbmNlciA9ICgpID0+IHsKICAgIGxldCBzZWxmOwogICAgbGV0IHN0YWNrID0gW107CiAgICBjb25zdCB0YWJsZSA9IHsgJ30nOiAneycsICddJzogJ1snLCAnKSc6ICcoJyB9OwogICAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spIHsKICAgICAgc3dpdGNoICh0b2s/LmxleGVtZSkgewogICAgICAgIGNhc2UgJ3snOgogICAgICAgIGNhc2UgJ1snOgogICAgICAgIGNhc2UgJygnOiB7CiAgICAgICAgICBzdGFjay5wdXNoKHRvay5sZXhlbWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNhc2UgJ30nOgogICAgICAgIGNhc2UgJ10nOgogICAgICAgIGNhc2UgJyknOiB7CiAgICAgICAgICBpZihzdGFjay5sYXN0ICE9IHRhYmxlW3Rvay5sZXhlbWVdKSB0aHJvdyBuZXcgRXJyb3IoYHRvcCAnJHtzdGFjay5sYXN0fScgIT0gJyR7dG9rLmxleGVtZX0nIFsgJHtzdGFjay5tYXAocyA9PiBgJyR7c30nYCkuam9pbignLCAnKX0gXWApOwoKICAgICAgICAgIHN0YWNrLnBvcCgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogICAgT2JqZWN0LmFzc2lnbihzZWxmLCB7CiAgICAgIHN0YWNrLAogICAgICByZXNldCgpIHsKICAgICAgICBzdGFjay5jbGVhcigpOwogICAgICB9LAogICAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGRlcHRoKCkgewogICAgICAgIHJldHVybiBzdGFjay5sZW5ndGg7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBzZWxmOwogIH07CiAgbGV0IGJhbGFuY2VycyA9IFtiYWxhbmNlcigpXSwKICAgIGltcG9ydHMgPSBbXSwKICAgIGV4cG9ydHMgPSBbXSwKICAgIGNvbW1lbnRzID0gW10sCiAgICBpbXBleHAsCiAgICBjb25kLAogICAgaW1wID0gW10sCiAgICBzaG93VG9rZW4gPSB0b2sgPT4gewogICAgICBpZigobGV4ZXIuY29uc3RydWN0b3IgIT0gSlNMZXhlciAmJiB0b2sudHlwZSAhPSAnd2hpdGVzcGFjZScpIHx8IC9eKChpbXxleClwb3J0fGZyb218YXMpJC8udGVzdCh0b2subGV4ZW1lKSkgewogICAgICAgIGxldCBhID0gWy8qKGZpbGUgKyAnOicgKyB0b2subG9jKS5wYWRFbmQoZmlsZS5sZW5ndGgrMTApLCovIHRvay50eXBlLnBhZEVuZCgyMCwgJyAnKSwgZXNjYXBlKHRvay5sZXhlbWUpXTsKICAgICAgICBzdGQucHV0cyhhLmpvaW4oJycpICsgJ1xuJyk7CiAgICAgIH0KICAgIH07CgogIGNvbnN0IFBhdGhBZGp1c3QgPSBzID0+IHsKICAgIGxldCBqID0gcGF0aC5qb2luKGRpciwgcyk7CiAgICBqID0gcGF0aC5jb2xsYXBzZShqKTsKICAgIGlmKHBhdGguaXNSZWxhdGl2ZShqKSkgaiA9ICcuLycgKyBqOwogICAgcmV0dXJuIGo7CiAgfTsKICBsZXQgcHJldlRva2VuOwogIGZvcig7OykgewogICAgbGV0IHsgc3RhdGVEZXB0aCB9ID0gbGV4ZXI7CiAgICBsZXQgdmFsdWUgPSBsZXhlci5uZXh0KCk7CiAgICBsZXQgZG9uZSA9IHZhbHVlID09PSB1bmRlZmluZWQ7CiAgICBpZihkb25lKSBicmVhazsKICAgIGxldCBuZXdTdGF0ZSA9IGxleGVyLnRvcFN0YXRlKCk7CiAgICBpZihuZXdTdGF0ZSAhPSBzdGF0ZSkgewogICAgICBpZihzdGF0ZSA9PSAnVEVNUExBVEUnICYmIGxleGVyLnN0YXRlRGVwdGggPiBzdGF0ZURlcHRoKSBiYWxhbmNlcnMucHVzaChiYWxhbmNlcigpKTsKICAgICAgaWYobmV3U3RhdGUgPT0gJ1RFTVBMQVRFJyAmJiBsZXhlci5zdGF0ZURlcHRoIDwgc3RhdGVEZXB0aCkgYmFsYW5jZXJzLnBvcCgpOwogICAgfQogICAgbGV0IG4gPSBiYWxhbmNlcnMubGFzdC5kZXB0aDsKICAgIGNvbnN0IHsgdG9rZW4gfSA9IGxleGVyOwogICAgY29uc3QgeyBsb2MsIGxlbmd0aCwgc2VxIH0gPSB0b2tlbjsKICAgIGNvbnN0IHsgcG9zIH0gPSBsb2M7CiAgICAvLyAgbGV0IHMgPSB0b1N0cmluZyhieXRlYnVmKS5zbGljZShwb3MsIHBvcyArIGxlbmd0aCk7CiAgICAvLyAgY29uc29sZS5sb2coJycsdG9rZW4ubGV4ZW1lLCB7cG9zLCBzLCBsZW5ndGh9KQoKICAgIGlmKG4gPT0gMCAmJiB0b2tlbi5sZXhlbWUgPT0gJ30nICYmIGxleGVyLnN0YXRlRGVwdGggPiAwKSB7CiAgICAgIGxleGVyLnBvcFN0YXRlKCk7CiAgICB9IGVsc2UgewogICAgICBiYWxhbmNlcih0b2tlbik7CiAgICAgIGlmKG4gPiAwICYmIGJhbGFuY2Vycy5sYXN0LmRlcHRoID09IDApIGxvZygnYmFsYW5jZXInKTsKICAgICAgaWYoL2NvbW1lbnQvaS50ZXN0KHRva2VuLnR5cGUpKSB7CiAgICAgICAgY29tbWVudHMucHVzaCh0b2tlbik7CiAgICAgIH0KICAgICAgaWYoWydpbXBvcnQnLCAnZXhwb3J0J10uaW5kZXhPZih0b2tlbi5sZXhlbWUpID49IDApIHsKICAgICAgICBpbXBleHAgPSBXaGF0W3Rva2VuLmxleGVtZS50b1VwcGVyQ2FzZSgpXTsKICAgICAgICBjb25kID0gdHJ1ZTsKICAgICAgICBpbXAgPSB0b2tlbi5sZXhlbWUgPT0gJ2V4cG9ydCcgPyBbdG9rZW5dIDogW107CiAgICAgIH0KICAgICAgaWYoY29uZCA9PSB0cnVlKSB7CiAgICAgICAgaW1wLnB1c2godG9rZW4pOwogICAgICAgIGlmKFsnOyddLmluZGV4T2YodG9rZW4ubGV4ZW1lKSAhPSAtMSkgewogICAgICAgICAgY29uZCA9IGZhbHNlOwogICAgICAgICAgaWYoaW1wZXhwID09IFdoYXQuSU1QT1JUIHx8IGltcC5zb21lKGkgPT4gaS5sZXhlbWUgPT0gJ2Zyb20nKSkgewogICAgICAgICAgICBsZXQgb2JqID0gQWRkSW1wb3J0KGltcCwgUGF0aEFkanVzdCk7CiAgICAgICAgICAgIGlmKG9iaikgaW1wb3J0cy5wdXNoKG9iaik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBleHBvcnRzLnB1c2goQWRkRXhwb3J0KGltcCwgUGF0aEFkanVzdCkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBwcmV2VG9rZW4gPSB0b2tlbjsKICAgIH0KICAgIHN0YXRlID0gbmV3U3RhdGU7CiAgfQogIGxldCBlbmQgPSBEYXRlLm5vdygpOwoKICBjb25zb2xlLmxvZyhgTGV4aW5nICcke3NvdXJjZS5yZXBsYWNlKC9eXC5cLy8sICcnKX0nIHRvb2sgJHtlbmQgLSBzdGFydH1tc2ApOwogIHN0YXJ0ID0gRGF0ZS5ub3coKTsKCiAgbGV0IGV4cG9ydHNGcm9tID0gZXhwb3J0cy5maWx0ZXIoZXhwID0+IGV4cC50b2tlbnMpLmZpbHRlcihleHAgPT4gZXhwLnRva2Vucy5zb21lKHRvayA9PiB0b2subGV4ZW1lID09ICdmcm9tJykpOwoKICBpZihwYXRoLmlzUmVsYXRpdmUoc291cmNlKSAmJiAhL14oXC58XC5cLilcLy8udGVzdChzb3VyY2UpKSBzb3VyY2UgPSAnLi8nICsgc291cmNlOwoKICAvLyBjb25zb2xlLmxvZygnZXhwb3J0c0Zyb20nLCBleHBvcnRzKTsKCiAgbW9kdWxlc1tzb3VyY2VdID0geyBpbXBvcnRzLCBleHBvcnRzIH07CgogIGxldCBhbGxFeHBvcnRzSW1wb3J0cyA9IGV4cG9ydHMuY29uY2F0KGltcG9ydHMpLnNvcnQoKGEsIGIpID0+IGEucmFuZ2VbMF0gLSBiLnJhbmdlWzBdKTsKICBsZXQgZmlsZUltcG9ydHMgPSBhbGxFeHBvcnRzSW1wb3J0cy5maWx0ZXIoaW1wID0+IHR5cGVvZiBpbXAuZmlsZSA9PSAnc3RyaW5nJyk7IC8vL1wuanMkL2kudGVzdChpbXAuZmlsZSkpOwogIGxldCBzcGxpdFBvaW50cyA9IHVuaXF1ZShmaWxlSW1wb3J0cy5yZWR1Y2UoKGFjYywgaW1wKSA9PiBbLi4uYWNjLCAuLi5pbXAucmFuZ2VdLCBbXSkpOwogIGJ1ZmZlcnNbc291cmNlXSA9IFsuLi5zcGxpdChCdWZmZXJGaWxlKHNvdXJjZSksIC4uLnNwbGl0UG9pbnRzKV0ubWFwKGIgPT4gYiA/PyB0b1N0cmluZyhiLCAwLCBiLmJ5dGVMZW5ndGgpKTsKCiAgLypjb25zb2xlLmxvZygnZmlsZUltcG9ydHMnLCBmaWxlSW1wb3J0cyk7Ki8KCiAgbGV0IG1hcCA9IEZpbGVNYXAuZm9yKHNvdXJjZSk7CgogIGZvcihsZXQgaW1wZXhwIG9mIGFsbEV4cG9ydHNJbXBvcnRzKSB7CiAgICBjb25zdCB7IHR5cGUsIGZpbGUsIHJhbmdlLCBjb2RlLCBsb2MgfSA9IGltcGV4cDsKICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHJhbmdlOwogICAgLy8gbGV0IGJ5dGVidWYgPSBCdWZmZXJGaWxlKHNvdXJjZSk7CiAgICBsZXQgYnVmc3RyID0gdG9TdHJpbmcoYnl0ZWJ1Zi5zbGljZSguLi5yYW5nZSkpOwogICAgbGV0IGFycmJ1ZiA9IHRvQXJyYXlCdWZmZXIoYnVmc3RyKTsKCiAgICAvLyBjb25zb2xlLmxvZygnaW1wZXhwJywgeyB0eXBlLGZpbGUgfSk7CiAgICBsZXQgcmVwbGFjZW1lbnQgPSB0eXBlID09IFdoYXQuRVhQT1JUID8gbnVsbCA6IC8qRmlsZU1hcC5mb3IqLyBmaWxlOwogICAgbGV0IHsgYnl0ZU9mZnNldCB9ID0gbG9jOwoKICAgIGlmKGJ1ZnN0ciA9PSAnICcpIHRocm93IG5ldyBFcnJvcihgYnVmc3RyID0gJyAnIGxvYzogJHtsb2N9ICR7bG9jLmJ5dGVPZmZzZXR9IHJhbmdlOiAke3JhbmdlfSBjb2RlOiBgICsgdG9TdHJpbmcoYnl0ZWJ1Zi5zbGljZShsb2MuYnl0ZU9mZnNldCwgcmFuZ2VbMV0gKyAxMCkpKTsKCiAgICAvL2lmKHJlcGxhY2VtZW50ID09IG51bGwpIGRlYnVnTG9nKCdyZXBsYWNlUmFuZ2UnLCBpbnNwZWN0KHsgZmlsZTogbWFwLmZpbGUsIGJ1ZnN0ciwgcmFuZ2UsIHJlcGxhY2VtZW50LCBsb2M6IGxvYyArICcnIH0sIHsgY29tcGFjdDogMywgZGVwdGg6IDMgfSkgKTsKICAgIC8vZGVidWdMb2coJ2ltcGV4cCcsIGNvbXBhY3QoMiksIHsgZmlsZSwgY29kZSwgbG9jOiBsb2MgKyAnJywgcmFuZ2U6IG5ldyBOdW1lcmljUmFuZ2UoLi4ucmFuZ2UpLCByZW1vdmVFeHBvcnRzLCB0eXBlIH0pOwoKICAgIGlmKGZpbGUgJiYgLyovW1wuXC9dLy50ZXN0KGZpbGUpICYmKi8gcGF0aC5leGlzdHMoZmlsZSkpIHsKICAgICAgcmVwbGFjZW1lbnQgPSBmaWxlOwogICAgICAvLyAgaGVhZGVyLnB1c2goaW1wZXhwKTsKICAgIH0gZWxzZSBpZigodHlwZW9mIHJlcGxhY2VtZW50ID09ICdzdHJpbmcnICYmICFwYXRoLmV4aXN0cyhyZXBsYWNlbWVudCkpIHx8IHR5cGUgPT0gV2hhdC5JTVBPUlQgfHwgdHlwZW9mIGZpbGUgPT0gJ3N0cmluZycpIHsKICAgICAgcmVwbGFjZW1lbnQgPSBudWxsOwogICAgICBoZWFkZXIucHVzaChpbXBleHApOwogICAgfSBlbHNlIGlmKCFmaWxlICYmIGNvZGUuc3RhcnRzV2l0aCgnZXhwb3J0JykpIHsKICAgICAgaWYoIXJlbW92ZUV4cG9ydHMpIGNvbnRpbnVlOwogICAgICByZXBsYWNlbWVudCA9IG51bGw7CiAgICB9CgogICAgLy9kZWJ1Z0xvZygnaW1wZXhwJywgY29tcGFjdCgyKSwgeyBjb2RlLCByYW5nZTogbmV3IE51bWVyaWNSYW5nZSguLi5yYW5nZSksIHJlcGxhY2VtZW50LCBsb2M6IGxvYyArICcnIH0pOwoKICAgIG1hcC5yZXBsYWNlUmFuZ2UocmFuZ2UsIHJlcGxhY2VtZW50KTsKICB9CgogIC8vICBkZWJ1Z0xvZygnY29tbWVudHMnLCBjb21tZW50cy5tYXAoKHtieXRlUmFuZ2UsIGxleGVtZX0pPT5bYnl0ZVJhbmdlLGxleGVtZSx0b1N0cmluZyhieXRlYnVmLnNsaWNlKC4uLmJ5dGVSYW5nZSkpXSkpOwogIC8vCiAgaWYocmVtb3ZlQ29tbWVudHMpIHsKICAgIGkgPSAtMTsKICAgIGRlYnVnTG9nKGBSZW1vdmluZyAke2NvbW1lbnRzLmxlbmd0aH0gY29tbWVudHMgZnJvbSAnJHtzb3VyY2V9J2ApOwogICAgZm9yKGxldCB7IGJ5dGVSYW5nZSwgbGV4ZW1lIH0gb2YgY29tbWVudHMpIHsKICAgICAgbGV0IHNsID0gYnl0ZWJ1Zi5zbGljZSguLi5ieXRlUmFuZ2UpOwogICAgICBkZWJ1Z0xvZyhgY29tbWVudFskeysraX1dYCwgY29tcGFjdCgyKSwgeyBieXRlUmFuZ2UsIHN0cjogdG9TdHJpbmcoc2wpIH0pOwoKICAgICAgbWFwLnJlcGxhY2VSYW5nZShieXRlUmFuZ2UsIG51bGwpOwogICAgfQogIH0KCiAgZGVidWdMb2coJ21hcCcsIG1hcC5kdW1wKCkpOwoKICAvL2lmKGRlYnVnPiAxKSBjb25zb2xlLmxvZygnZHVtcCBtYXAnLCBtYXAuZHVtcCgpKTsKCiAgZW5kID0gRGF0ZS5ub3coKTsKCiAgLy8gY29uc29sZS5sb2coYFN1YnN0aXR1dGluZyAnJHtzb3VyY2UucmVwbGFjZSgvXlwuXC8vLCAnJyl9JyB0b29rICR7ZW5kIC0gc3RhcnR9bXNgKTsKICBwcm9jZXNzZWQuYWRkKHNvdXJjZSk7CgogIGlmKHJlY3Vyc2l2ZSA+IDApIHsKICAgIGZvcihsZXQgaW1wIG9mIGZpbGVJbXBvcnRzKSB7CiAgICAgIGNvbnN0IHsgZmlsZSwgcmFuZ2UsIHRva2VucyB9ID0gaW1wOwogICAgICBpZighL1wuLy50ZXN0KGZpbGUpKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coYEJ1aWx0aW4gbW9kdWxlICcke2ZpbGV9J2ApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmKCFwYXRoLmV4aXN0cyhmaWxlKSkgewogICAgICAgIGNvbnNvbGUubG9nKGBQYXRoIG11c3QgZXhpc3QgJyR7ZmlsZX0nYCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYocHJvY2Vzc2VkLmhhcyhmaWxlKSB8fCBmaWxlID09IHNvdXJjZSkgewogICAgICAgIC8vY29uc29sZS5sb2coYEFscmVhZHkgcHJvY2Vzc2VkICcke2ZpbGV9J2ApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIC8vICBjb25zb2xlLmxvZyhgUHJvY2Vzc0ZpbGUucmVjdXJzaXZlYCwgeyBmaWxlIH0pOwogICAgICBsZXQgYXJncyA9IFtmaWxlLCBsb2csIHR5cGVvZiByZWN1cnNpdmUgPT0gJ251bWJlcicgPyByZWN1cnNpdmUgLSAxIDogcmVjdXJzaXZlXTsKICAgICAgLy8gICAgY29uc29sZS5sb2coYFByb2Nlc3NGaWxlKCR7YXJncy5qb2luKCcsICcpfSlgKTsKICAgICAgcHJvY2Vzc2VkLmFkZChmaWxlKTsKCiAgICAgIFByb2Nlc3NGaWxlKC4uLmFyZ3MpOwogICAgfQogIH0KICAvKgogIGxldCBlbmQgPSBEYXRlLm5vdygpOwogIGNvbnNvbGUubG9nKGAnJHtzb3VyY2UucmVwbGFjZSgvXlwuXC8vLCAnJyl9JyB0b29rICR7ZW5kIC0gc3RhcnR9bXNgKTsKKi8KCiAgc3RkLmdjKCk7CgogIHJldHVybiBtYXA7Cn0KCmZ1bmN0aW9uIE5vbldTKHRva2VucykgewogIHJldHVybiB0b2tlbnMuZmlsdGVyKHRvayA9PiB0b2sudHlwZSAhPSAnd2hpdGVzcGFjZScpOwp9CgpmdW5jdGlvbiBUb2tlblNlcXVlbmNlKHRva2VucykgewogIHJldHVybiBkZWZpbmUoCiAgICB0b2tlbnMubWFwKHRvayA9PiB0b2subGV4ZW1lKSwKICAgIHsKICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuam9pbignJyk7CiAgICAgIH0KICAgIH0KICApOwp9CgpmdW5jdGlvbiBVbnF1b3RlKGxleGVtZSkgewogIHJldHVybiBsZXhlbWUucmVwbGFjZSgvKF5bXCdcIlxgXXxbXCdcIlxgXSQpL2csICcnKTsKfQoKZnVuY3Rpb24gTGl0ZXJhbFNlcXVlbmNlKHRva2VucykgewogIHJldHVybiB0b2tlbnMucmVkdWNlKChhY2MsIHRvaykgPT4gYWNjICsgdG9rLmxleGVtZSwgJycpOwp9CgpmdW5jdGlvbiBVbnRpbEVPTChpZHgsIHRva2VucykgewogIHJldHVybiBVbnRpbChpZHgsIHRva2VucywgVG9rSXMobnVsbCwgJzsnKSk7Cn0KCmZ1bmN0aW9uIFVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gVG9rSXMobnVsbCwgWyc7JywgJ1xuJ10pKSB7CiAgbGV0IGk7CiAgZm9yKGkgPSBpZHg7IHRva2Vuc1tpXTsgaSsrKSB7CiAgICBpZihwcmVkKHRva2Vuc1tpXSkpIGJyZWFrOwogIH0KICByZXR1cm4gdG9rZW5zLnNsaWNlKGlkeCwgaSk7Cn0KCmZ1bmN0aW9uIFdob2xlTGluZShpZHgsIHRva2VucykgewogIGxldCBpLCBqOwogIGZvcihpID0gaWR4OyB0b2tlbnNbaV07IGkrKykgewogICAgaWYoWyc7JywgJ1xuJ10uaW5kZXhPZih0b2tlbnNbaV0ubGV4ZW1lKSAhPSAtMSkgYnJlYWs7CiAgfQogIGZvcihqID0gaWR4OyBqID4gMDsgai0tKSB7CiAgICBjb25zdCB0b2sgPSB0b2tlbnNbaiAtIDFdOwogICAgaWYoIXRvayB8fCBbJzsnLCAnXG4nXS5pbmRleE9mKHRva2Vuc1tqIC0gMV0ubGV4ZW1lKSAhPSAtMSkgYnJlYWs7CiAgfQogIHJldHVybiB0b2tlbnMuc2xpY2UoaiwgaSk7Cn0KCmZ1bmN0aW9uIFJhbmdlKGZpbGUsIHN0YXJ0LCBlbmQpIHsKICBsZXQgYnVmOwogIGlmKChidWYgPSBCdWZmZXJGaWxlKGZpbGUpKSkgewogICAgdGhpcy5maWxlID0gZmlsZTsKICAgIHRoaXMuc3RhcnQgPSBzdGFydCA/PyAwOwogICAgdGhpcy5lbmQgPSBlbmQgPz8gYnVmLmJ5dGVMZW5ndGg7CiAgICByZXR1cm4gdGhpczsKICB9CiAgcmV0dXJuIG51bGw7Cn0KClJhbmdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogIGxldCBidWYgPSBCdWZmZXJGaWxlKHRoaXMuZmlsZSk7CiAgcmV0dXJuIGJ1Zi5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZCk7Cn07CgpmdW5jdGlvbiBJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkgewogIGlmKGkgPj0gc3RhcnQgJiYgaSA8IGVuZCkgcmV0dXJuIHRydWU7CiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBJc1JhbmdlKG9iaikgewogIHJldHVybiBpc09iamVjdChvYmopICYmICgnbGVuZ3RoJyBpbiBvYmogfHwgJ3N0YXJ0JyBpbiBvYmogfHwgb2JqIGluc3RhbmNlb2YgTnVtZXJpY1JhbmdlKTsKfQoKY2xhc3MgTnVtZXJpY1JhbmdlIGV4dGVuZHMgQXJyYXkgewogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpIHsKICAgIHN1cGVyKDIpOwogICAgaWYoaXNOYU4oK3N0YXJ0KSkgc3RhcnQgPSAwOwogICAgdGhpc1swXSA9ICtzdGFydDsKICAgIGlmKGlzTmFOKCtlbmQpKSBlbmQgPSB0aGlzWzBdOwogICAgdGhpc1sxXSA9IGVuZDsKICB9CgogIGdldCBzdGFydCgpIHsKICAgIHJldHVybiB0aGlzWzBdOwogIH0KICBzZXQgc3RhcnQodmFsdWUpIHsKICAgIHRoaXNbMF0gPSArdmFsdWU7CiAgfQoKICBnZXQgZW5kKCkgewogICAgcmV0dXJuIHRoaXNbMV07CiAgfQogIHNldCBlbmQodmFsdWUpIHsKICAgIHRoaXNbMV0gPSArdmFsdWU7CiAgfQoKICBzdGF0aWMgZnJvbShyYW5nZSkgewogICAgaWYoaXNPYmplY3QocmFuZ2UpICYmIHJhbmdlIGluc3RhbmNlb2YgTnVtZXJpY1JhbmdlKSByZXR1cm4gcmFuZ2U7CgogICAgdHJ5IHsKICAgICAgbGV0IHIgPSBuZXcgTnVtZXJpY1JhbmdlKC4uLnJhbmdlKTsKICAgICAgcmFuZ2UgPSByOwogICAgfSBjYXRjaChlKSB7fQogICAgY29uc29sZS5sb2coJ051bWVyaWNSYW5nZS5mcm9tJywgcmFuZ2UpOwogICAgcmV0dXJuIHJhbmdlOwogIH0KCiAgc3RhdGljICpob2xlcyhyYW5nZXMsIG9ubHkgPSBmYWxzZSkgewogICAgbGV0IHByZXYgPSBbMCwgMF07CiAgICAvL2NvbnNvbGUubG9nKCdyYW5nZXMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IDEgfSksIHJhbmdlcyk7CiAgICBsZXQgaSA9IC0xOwogICAgZm9yKGxldCByYW5nZSBvZiByYW5nZXMpIHsKICAgICAgaWYoSXNSYW5nZShyYW5nZSkpIHsKICAgICAgICByYW5nZSA9IFsuLi5yYW5nZV07CiAgICAgICAgY29uc29sZS5sb2coJ3JhbmdlIycgKyArK2ksIGluc3BlY3QocmFuZ2UpKTsKCiAgICAgICAgaWYoSXNSYW5nZShwcmV2KSAmJiBJc1JhbmdlKHJhbmdlKSkgewogICAgICAgICAgLy8gICAgIGlmKHJhbmdlWzBdIDwgcHJldlsxXSkgcmFuZ2VbMF0gPSBwcmV2WzFdOwogICAgICAgICAgbGV0IFtzdGFydCwgZW5kXSA9IHJhbmdlOwoKICAgICAgICAgIGlmKHN0YXJ0ID49IHByZXZbMV0pIHlpZWxkIG5ldyBOdW1lcmljUmFuZ2UocHJldlsxXSwgc3RhcnQpOwogICAgICAgICAgLy8gIGVsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJhbmdlIGAgKyBpbnNwZWN0KFtzdGFydCwgZW5kXSkgKyAnICcgKyBpbnNwZWN0KHsgcHJldjogWy4uLnByZXZdIH0pKTsKICAgICAgICB9CgogICAgICAgIGlmKCFvbmx5KSB7CiAgICAgICAgICBpZighKGlzT2JlY3QocmFuZ2UpICYmIHJhbmdlIGluc3RhbmNlb2YgTnVtZXJpY1JhbmdlKSkgcmFuZ2UgPSBuZXcgTnVtZXJpY1JhbmdlKC4uLnJhbmdlKTsKICAgICAgICAgIHlpZWxkIHJhbmdlOwogICAgICAgIH0KICAgICAgfQogICAgICBwcmV2ID0gcmFuZ2U7CiAgICB9CiAgfQoKICBzdGF0aWMgYmV0d2VlbihbczEsIGUxXSwgW3MyLCBlMl0pIHsKICAgIGlmKHMyID4gZTEpIHJldHVybiBbZTEsIHMyXTsKCiAgICBpZihzMSA+IGUyKSByZXR1cm4gW2UyLCBzMV07CiAgfQp9CgpkZWZpbmUoTnVtZXJpY1JhbmdlLnByb3RvdHlwZSwgewogIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnTnVtZXJpY1JhbmdlJywKICBbU3ltYm9sLmluc3BlY3RdKGRlcHRoLCBvcHRzKSB7CiAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSB0aGlzOwogICAgbGV0IHMgPSAnJzsKICAgIC8vcyArPSBgXHgxYlsxOzMxbU51bWVyaWNSYW5nZVx4MWJbMG0oYDsKICAgIGNvbnN0IHBhZCA9IHMgPT4gKHMgKyAnJykucGFkRW5kKDUpOwoKICAgIHMgKz0gYFx4MWJbMTszNm0ke3BhZChzdGFydCl9XHgxYlswbWA7CiAgICBzICs9IGAgLSBgOwogICAgLy8gIHMgKz0gYFx4MWJbMTszNm0ke3BhZChlbmQpfVx4MWJbMG1gOwogICAgcyArPSBgXHgxYlsxOzM2bSR7cGFkKCcrJyArIChlbmQgLSBzdGFydCkpfVx4MWJbMG1gOwogICAgLy9zKz1gKWA7CiAgICBzID0gYFsgJHtzfSBdYDsKICAgIHJldHVybiBzOwogIH0KfSk7CgpjbGFzcyBGaWxlTWFwIGV4dGVuZHMgQXJyYXkgewogIGNvbnN0cnVjdG9yKGZpbGUsIGJ1ZikgewogICAgc3VwZXIoKTsKCiAgICBpZih0eXBlb2YgZmlsZSAhPSAnbnVtYmVyJykgewogICAgICAvL2NvbnNvbGUubG9nKCdGaWxlTWFwLmNvbnN0cnVjdG9yJyx7ZmlsZSxidWZ9KTsKICAgICAgdGhpcy5maWxlID0gZmlsZTsKICAgICAgYnVmID8/PSBCdWZmZXJGaWxlKGZpbGUpOwogICAgICBpZighYnVmKSB0aHJvdyBuZXcgRXJyb3IoYEZpbGVNYXAgYnVmID09ICR7YnVmfWApOwogICAgICB0aGlzLnB1c2goW25ldyBOdW1lcmljUmFuZ2UoMCwgYnVmLmJ5dGVMZW5ndGgpLCBidWZdKTsKICAgICAgZmlsZU1hcHMuc2V0KGZpbGUsIHRoaXMpOwogICAgfQogIH0KCiAgc3RhdGljIGVtcHR5KGZpbGUpIHsKICAgIGlmKHR5cGVvZiBmaWxlID09ICdzdHJpbmcnKSBmaWxlID0gRmlsZU1hcC5mb3IoZmlsZSk7CgogICAgaWYoaXNPYmplY3QoZmlsZSkgJiYgZmlsZSBpbnN0YW5jZW9mIEZpbGVNYXApIHJldHVybiBmaWxlLmlzRW1wdHkoKTsKICB9CgogIGlzRW1wdHkoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBzdGF0aWMgZm9yKGZpbGUsIGJ1ZikgewogICAgLy8gY29uc29sZS5sb2coJ0ZpbGVNYXAuZm9yJywgeyBmaWxlLCBidWYgfSk7CiAgICBsZXQgbTsKICAgIGlmKGZpbGUgJiYgKG0gPSBmaWxlTWFwcy5nZXQoZmlsZSkpKSByZXR1cm4gbTsKCiAgICBpZihpc09iamVjdChmaWxlKSAmJiBmaWxlIGluc3RhbmNlb2YgRmlsZU1hcCkgcmV0dXJuIGZpbGU7CiAgICBlbHNlIGlmKGZpbGUgPT09IG51bGwgJiYgIWJ1ZikgewogICAgICBsZXQgb2JqID0gewogICAgICAgIGlzRW1wdHkoKSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAogICAgICAgIHRvU3RyaW5nKCkgewogICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0sCiAgICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdGaWxlTWFwKGVtcHR5KScKICAgICAgfTsKICAgICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmosIEZpbGVNYXAucHJvdG90eXBlKTsKICAgIH0KICAgIGlmKGZpbGVNYXBzLmhhcyhmaWxlKSkgcmV0dXJuIGZpbGVNYXBzLmdldChmaWxlKTsKICAgIHJldHVybiBuZXcgRmlsZU1hcChmaWxlLCBidWYpOwogIH0KCiAgc3BsaXRBdChwb3MpIHsKICAgIGxldCBpID0gdGhpcy5maW5kSW5kZXgoKFtyYW5nZSwgYnVmXSkgPT4gcmFuZ2UgJiYgSW5SYW5nZShyYW5nZSwgcG9zKSk7CgogICAgaWYoaSAhPSAtMSkgewogICAgICBsZXQgW3JhbmdlLCBidWZdID0gdGhpc1tpXTsKICAgICAgbGV0IFtzdGFydCwgZW5kXSA9IHJhbmdlOwogICAgICB0aGlzLnNwbGljZShpICsgMSwgMCwgW1socmFuZ2VbMV0gPSBwb3MpLCBlbmRdLCBidWZdKTsKICAgICAgcmV0dXJuIGkgKyAxOwogICAgfQogIH0KCiAgc2xpY2VBdChuKSB7CiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleC5jYWxsKHRoaXMsIChbcmFuZ2UsIGJ1Zl0pID0+IChyYW5nZSA/IEluUmFuZ2UocmFuZ2UsIG4pIDogZmFsc2UpKTsKICB9CgogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkgewogICAgaWYoQXJyYXkuaXNBcnJheShyYW5nZSkgJiYgIShyYW5nZSBpbnN0YW5jZW9mIE51bWVyaWNSYW5nZSkpIHJhbmdlID0gbmV3IE51bWVyaWNSYW5nZSguLi5yYW5nZSk7CiAgICBjb25zdCBzbGljZUluZGV4ID0gbiA9PiB7CiAgICAgIGxldCByOwogICAgICBpZih0aGlzWzBdKSB7CiAgICAgICAgY29uc3QgcmFuZ2UgPSBuZXcgTnVtZXJpY1JhbmdlKC4uLnRoaXNbMF1bMF0pOwogICAgICAgIGlmKG4gPCByYW5nZS5zdGFydCkgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgciA9IHRoaXMucmVkdWNlKChhY2MsIGl0ZW0sIGkpID0+IHsKICAgICAgICBpZihhY2MgPT09IHVuZGVmaW5lZCkgeyAvL3JldHVybiBbaSwgaXRlbVswXVswXV07CiAgICAgICAgaWYoaXRlbVswXSkgewogICAgICAgICAgaWYobiA+PSBpdGVtWzBdWzFdKSByZXR1cm4gW2kgKyAxLCBpdGVtWzBdWzFdXTsKICAgICAgICAgIGlmKG4gPT4gaXRlbVswXVswXSkgcmV0dXJuIFtpLCBpdGVtWzBdWzBdXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgICByZXR1cm4gYWNjOwogICAgICB9LCB1bmRlZmluZWQpOwogICAgICByZXR1cm4gclswXTsKICAgIH07CiAgICBsZXQgc3RhcnQgPSBzbGljZUluZGV4KHJhbmdlLnN0YXJ0KTsKICAgIGxldCBlbmQgPSBzbGljZUluZGV4KHJhbmdlLmVuZCk7CgogICAgZGVidWdMb2coYEZpbGVNYXAucmVwbGFjZVJhbmdlYCwgY29tcGFjdCgyLCB7IG1heEFycmF5TGVuZ3RoOiAxMCB9KSwgeyByYW5nZSwgbGVuZ3RoOiB0aGlzLmxlbmd0aCwgc3RhcnQsIGVuZCwgZmlsZSB9IC8qLCAndGhpc1tlbmRdID0nLCB0aGlzW2VuZF0qLyk7CgogICAgaWYocmFuZ2Uuc3RhcnQgPiB0aGlzW3N0YXJ0XVswXS5zdGFydCkgewogICAgICBpZihzdGFydCA9PSBlbmQpIHsKICAgICAgICBsZXQgW3JhbmdlLCBidWZdID0gdGhpc1tzdGFydF07CiAgICAgICAgbGV0IGluc2VydCA9IFtuZXcgTnVtZXJpY1JhbmdlKC4uLnJhbmdlKSwgYnVmXTsKICAgICAgICB0aGlzLnNwbGljZSgrK2VuZCwgMCwgaW5zZXJ0KTsKICAgICAgfQogICAgICB0aGlzW3N0YXJ0XVswXS5lbmQgPSByYW5nZS5zdGFydDsKICAgICAgaWYodGhpc1tlbmRdICYmIHRoaXNbZW5kXVswXSkgdGhpc1tlbmRdWzBdLnN0YXJ0ID0gcmFuZ2UuZW5kOwogICAgfSBlbHNlIHsKICAgICAgdGhpc1tzdGFydF1bMF0uc3RhcnQgPSByYW5nZS5lbmQ7CiAgICB9CgogICAgaWYoZmlsZSAhPSBudWxsKSB0aGlzLnNwbGljZShzdGFydCArIDEsIDAsIFtudWxsLCBmaWxlXSk7CiAgfQoKICBkdW1wKCkgewogICAgY29uc3Qgc291cmNlID0gdGhpcy5maWxlOwogICAgcmV0dXJuICgKICAgICAgYEZpbGVNYXAge1xuXHRmaWxlOiBceDFiWzM4OzU7MjE1bSR7c291cmNlfSxcblx0XHgxYlswbVsgYCArCiAgICAgIFsuLi50aGlzXQogICAgICAgIC5tYXAoKGl0ZW0sIGkpID0+IGl0ZW0uY29uY2F0KFt0aGlzLmF0KGkpXSkpCiAgICAgICAgLnJlZHVjZSgoYWNjLCBbcmFuZ2UsIGJ1Ziwgc3RyXSwgaSkgPT4gewogICAgICAgICAgbGV0IHMgPSBhY2MgKyBgXG5cdFx0WyBgOwogICAgICAgICAgcyArPSAoJycgKyAocmFuZ2UgPyAnWycgKyBOdW1lcmljUmFuZ2UuZnJvbShyYW5nZSkgKyAnXScgOiByYW5nZSkpLnBhZEVuZCgxMCk7CgogICAgICAgICAgcyArPSAnLCAnOwogICAgICAgICAgLyppZighaXNPYmplY3Qoc3RyKSkgcyArPSBxdW90ZShzaG9ydGVuKHN0ciksICInIik7CiAgICAgICAgICBlbHNlKi8KICAgICAgICAgIGlmKGlzT2JqZWN0KGJ1ZikgJiYgJ2J5dGVMZW5ndGgnIGluIGJ1ZikgewogICAgICAgICAgICBsZXQgZmlsZW5hbWUgPSBidWZmZXJSZWYuZ2V0KGJ1Zik7CiAgICAgICAgICAgIGJ1ZiA9IGZpbGVuYW1lID8/IGA8dGhpcz5gOwogICAgICAgICAgfQogICAgICAgICAgaWYodHlwZW9mIGJ1ZiA9PSAnc3RyaW5nJykgYnVmID0gcGF0aC5ub3JtYWxpemUoYnVmKTsKCiAgICAgICAgICBzICs9IGluc3BlY3QoYnVmLCB7IG1heEFycmF5TGVuZ3RoOiAzMCB9KTsKICAgICAgICAgIHMgKz0gYCBdLGA7CiAgICAgICAgICByZXR1cm4gczsKICAgICAgICB9LCAnJykgKwogICAgICBgXG5cdF1cbn1gCiAgICApOwogIH0KCiAgYXQoaSkgewogICAgY29uc3QgW3JhbmdlLCBidWZdID0gdGhpc1tpXTsKICAgIGlmKHJhbmdlICYmIGJ1ZikgewogICAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSByYW5nZTsKICAgICAgcmV0dXJuIGJ1Zi5zbGljZShzdGFydCwgZW5kKTsKICAgIH0KICAgIGlmKHJhbmdlID09IG51bGwpIHsKICAgICAgbGV0IGZpbGUgPSBidWY7CiAgICAgIGxldCBzdHIgPSBidWY7CiAgICAgIGlmKHR5cGVvZiBzdHIgPT0gJ3N0cmluZycpIHsKICAgICAgICBpZighcGF0aC5leGlzdHMoc3RyKSkgdGhyb3cgRXJyb3IoYEluZXhpc3RlbnQgZmlsZSAnJHtzdHJ9J2ApOwogICAgICAgIHN0ciA9IEZpbGVNYXAuZm9yKHN0cik7CiAgICAgIH0KICAgICAgcmV0dXJuIHN0cjsKICAgIH0KICAgIHRocm93IG5ldyBFcnJvcihgYXQoJHtpfSkgYCArIGluc3BlY3QoeyByYW5nZSwgYnVmIH0pKTsKICB9CgogIHRvQXJyYXkoKSB7CiAgICByZXR1cm4gdGhpcy5tYXAoKHMsIGkpID0+IHRoaXMuYXQoaSkpOwogIH0KCiAgaG9sZXMoKSB7CiAgICBsZXQgcmFuZ2VzID0gWy4uLnRoaXMubWFwKChbcmFuZ2VdKSA9PiByYW5nZSldLnNvcnQoQ29tcGFyZVJhbmdlKTsKCiAgICBjb25zb2xlLmxvZygncmFuZ2VzJywgY29uc29sZS5jb25maWcoeyBkZXB0aDogSW5maW5pdHkgfSksIHJhbmdlcyk7CgogICAgbGV0IGl0ZXIgPSBOdW1lcmljUmFuZ2UuaG9sZXMocmFuZ2VzLCB0cnVlKTsKICAgIGNvbnNvbGUubG9nKCdpdGVyJywgaXRlcik7CiAgICBsZXQgaG9sZXMgPSBbLi4uaXRlcl07CiAgICBsZXQgbGVuID0gaG9sZXMubGVuZ3RoOwogICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIGNvbnN0IGhvbGUgPSBob2xlc1tpXTsKICAgICAgY29uc3QgW3JhbmdlXSA9IHRoaXNbaV07CgogICAgICBjb25zb2xlLmxvZygnIycgKyAoaSArIDEpLCBjb21wYWN0KDIpLCBpbnNwZWN0KHsgaG9sZSwgcmFuZ2UgfSwgeyBjb21wYWN0OiAyLCBkZXB0aDogNCB9KSk7CiAgICB9CiAgICAvL2NvbnNvbGUubG9nKCdob2xlcycsIGhvbGVzKTsKCiAgICByZXR1cm4gaG9sZXM7CiAgfQoKICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKSB7CiAgICBpZihkZWJ1ZykgZGVidWdMb2coYEZpbGVNYXBceDFiWzE7MzVtPCR7dGhpcy5maWxlfT5ceDFiWzBtLndyaXRlYCwgY29tcGFjdCgxKSwgeyBvdXQsIGRlcHRoLCBzZXJpYWwgfSk7CiAgICBsZXQgciwKICAgICAgd3JpdHRlbiA9IDA7CiAgICBsZXQgeyBsZW5ndGggfSA9IHRoaXM7CiAgICBzZXJpYWwgPz89IHJhbmRJbnQoMCwgMTAwMCk7CiAgICBpZih0aGlzLnNlcmlhbCA9PT0gc2VyaWFsKSByZXR1cm4gMDsKICAgIHRoaXMuc2VyaWFsID0gc2VyaWFsOwogICAgaWYodHlwZW9mIG91dCA9PSAnc3RyaW5nJykgb3V0ID0gRmlsZVdyaXRlcihvdXQpOwogICAgZm9yKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAgICAgIGxldCBzdHIgPSB0aGlzLmF0KGkpOwogICAgICBsZXQgbGVuID0gc3RyLmJ5dGVMZW5ndGggPz8gc3RyLmxlbmd0aDsKICAgICAgaWYoaXNPYmplY3Qoc3RyKSkgewogICAgICAgIGlmKHN0ciBpbnN0YW5jZW9mIEZpbGVNYXApIHsKICAgICAgICAgIGlmKHN0ci5zZXJpYWwgPT09IHNlcmlhbCkgewogICAgICAgICAgICByID0gMDsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBvdXQucHV0cyhGaWxlQmFubmVyQ29tbWVudChzdHIuZmlsZSwgMCkpOwogICAgICAgICAgciA9IHN0ci53cml0ZShvdXQsIGRlcHRoICsgMSwgc2VyaWFsKTsKICAgICAgICAgIG91dC5wdXRzKEZpbGVCYW5uZXJDb21tZW50KHN0ci5maWxlLCAxKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdvdXQnLCBvdXQpOwogICAgICAgICAgciA9IG91dChzdHIsIGxlbik7CiAgICAgICAgICBpZihyICE9IGxlbikgciA9IC0xOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZ2V0VHlwZU5hbWUoc3RyKSk7CiAgICAgIH0KICAgICAgLy9kZWJ1Z0xvZyhgRmlsZU1hcFx4MWJbMTszNW08JHt0aGlzLmZpbGV9Plx4MWJbMG0ud3JpdGVgLCBgWyR7aSArIDF9LyR7bGVuZ3RofV1gLCBgcmVzdWx0PSR7cn1gLCBjb21wYWN0KDEsIHsgY3VzdG9tSW5zcGVjdDogdHJ1ZSB9KSwgeyBkZXB0aCB9LCBvdXQuaW5zcGVjdCgpKTsKICAgICAgaWYociA8IDApIGJyZWFrOwogICAgICB3cml0dGVuICs9IHI7CiAgICB9CiAgICByZXR1cm4gd3JpdHRlbjsKICB9CgogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpIHsKICAgIGNvbnN0IG4gPSB0aGlzLmxlbmd0aDsKICAgIGxldCBzID0gJycsCiAgICAgIGk7CiAgICBmb3IoaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgbGV0IHN0cjsKICAgICAgY29uc3QgW3JhbmdlLCBidWZdID0gdGhpc1tpXTsKICAgICAgaWYocmFuZ2UgPT09IG51bGwgJiYgYnVmID09PSBudWxsKSBjb250aW51ZTsKICAgICAgaWYoKHN0ciA9IHRoaXMuYXQoaSkpID09PSBudWxsKSBjb250aW51ZTsKICAgICAgaWYocmFuZ2UgPT09IG51bGwpIGlmICh0eXBlb2YgYnVmID09ICdzdHJpbmcnKSAvKmlmKHR5cGVvZiBzdHIgPT0gJ3N0cmluZycpKi8gc3RyID0gZm4oYnVmLCAwKSArIHN0ciArIGZuKGJ1ZiwgMSk7CiAgICAgIHMgKz0gc3RyOwogICAgfQogICAgcmV0dXJuIHM7CiAgfQp9CgpGaWxlTWFwLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWddID0gJ0ZpbGVNYXAnOwpGaWxlTWFwLnByb3RvdHlwZVtTeW1ib2wuaW5zcGVjdF0gPSBmdW5jdGlvbihkZXB0aCwgb3B0cykgewogIGxldCBhcnIgPSBbLi4udGhpc10ubWFwKChbcmFuZ2UsIGJ1Zl0sIGkpID0+IHsKICAgIGlmKHJhbmdlKSB7CiAgICAgIGJ1ZiA9IGJ1Zi5zbGljZSguLi5yYW5nZSk7CiAgICB9CiAgICAvLyBjb25zb2xlLmxvZyhgaT0ke2l9YCwgeyByYW5nZSwgYnVmIH0pOwogICAgcmV0dXJuIFtyYW5nZSwgYnVmLmNvbnN0cnVjdG9yLm5hbWVdOwogIH0pOwogIHJldHVybiAoCiAgICBgRmlsZU1hcFx4MWJbMTszNW08JHt0aGlzLmZpbGV9Plx4MWJbMG0gYCArCiAgICBpbnNwZWN0KGFyciwgewogICAgICAuLi5vcHRzLAogICAgICBjb21wYWN0OiAxLAogICAgICBicmVha0xlbmd0aDogSW5maW5pdHksCiAgICAgIG1heEFycmF5TGVuZ3RoOiAxMCwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiAxMCwKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSwKICAgICAgZGVwdGg6IGRlcHRoICsgMgogICAgfSkKICApOwp9OwoKZnVuY3Rpb24gQnVmZmVyRmlsZShmaWxlLCBidWYpIHsKICBmaWxlID0gcGF0aC5ub3JtYWxpemUoZmlsZSk7CiAgYnVmID8/PSBidWZmZXJzW2ZpbGVdID8/PSBmcy5yZWFkRmlsZVN5bmMoZmlsZSwgeyBmbGFnOiAncicgfSk7CiAgaWYodHlwZW9mIGJ1ZiA9PSAnb2JqZWN0JyAmJiBidWYgIT09IG51bGwpIGJ1ZmZlclJlZi5zZXQoYnVmLCBmaWxlKTsKICBpZih0eXBlb2YgYnVmID09ICdvYmplY3QnICYmIGJ1ZiAhPT0gbnVsbCkgZmlsZUJ1ZmZlcnMuc2V0KGZpbGUsIGJ1Zik7CiAgcmV0dXJuIGJ1ZjsKfQoKZnVuY3Rpb24gQnVmZmVyTGVuZ3RocyhmaWxlKSB7CiAgcmV0dXJuIGJ1ZmZlcnNbZmlsZV0ubWFwKGIgPT4gYi5ieXRlTGVuZ3RoKTsKfQoKZnVuY3Rpb24gQnVmZmVyT2Zmc2V0cyhmaWxlKSB7CiAgcmV0dXJuIGJ1ZmZlcnNbZmlsZV0ucmVkdWNlKChbcG9zLCBsaXN0XSwgYikgPT4gW3BvcyArIGIuYnl0ZUxlbmd0aCwgbGlzdC5jb25jYXQoW3Bvc10pXSwgWzAsIFtdXSlbMV07Cn0KCmZ1bmN0aW9uIEJ1ZmZlclJhbmdlcyhmaWxlKSB7CiAgcmV0dXJuIGJ1ZmZlcnNbZmlsZV0ucmVkdWNlKChbcG9zLCBsaXN0XSwgYikgPT4gW3BvcyArIGIuYnl0ZUxlbmd0aCwgbGlzdC5jb25jYXQoW1twb3MsIGIuYnl0ZUxlbmd0aF1dKV0sIFswLCBbXV0pWzFdOwp9CgpmdW5jdGlvbiBXcml0ZUZpbGUoZmlsZSwgdG9rKSB7CiAgbGV0IGYgPSBzdGQub3BlbihmaWxlLCAndysnKTsKICBmLnB1dHModG9rKTsKICBjb25zb2xlLmxvZygnV3JvdGUgIicgKyBmaWxlICsgJyI6ICcgKyB0b2subGVuZ3RoICsgJyBieXRlcycpOwp9CgpmdW5jdGlvbiBEdW1wTGV4ZXIobGV4KSB7CiAgY29uc3QgeyBzaXplLCBwb3MsIHN0YXJ0LCBsaW5lLCBjb2x1bW4sIGxpbmVTdGFydCwgbGluZUVuZCwgY29sdW1uSW5kZXggfSA9IGxleDsKICByZXR1cm4gJ0xleGVyICcgKyBpbnNwZWN0KHsgc3RhcnQsIHBvcywgc2l6ZSB9KTsKfQoKZnVuY3Rpb24gRHVtcFRva2VuKHRvaykgewogIGNvbnN0IHsgbGVuZ3RoLCBvZmZzZXQsIGNoYXJzLCBsb2MgfSA9IHRvazsKICByZXR1cm4gYOKYhSBUb2tlbiAke2luc3BlY3QoeyBjaGFycywgb2Zmc2V0LCBsZW5ndGgsIGxvYyB9LCB7IGRlcHRoOiAxIH0pfWA7Cn0KCmZ1bmN0aW9uIFByaW50RVM2SW1wb3J0KGltcCkgewogIHJldHVybiB7CiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX05BTUVTUEFDRV06ICh7IGxvY2FsLCBmaWxlIH0pID0+IGBpbXBvcnQgKiBhcyAke2xvY2FsfSBmcm9tICcke2ZpbGV9JztgLAogICAgW0ltcG9ydFR5cGVzLklNUE9SVF9ERUZBVUxUXTogKHsgbG9jYWwsIGZpbGUgfSkgPT4gYGltcG9ydCAke2xvY2FsfSBmcm9tICcke2ZpbGV9JztgLAogICAgW0ltcG9ydFR5cGVzLklNUE9SVF06ICh7IGxvY2FsLCBmaWxlIH0pID0+IGBpbXBvcnQgeyAke2xvY2FsLmpvaW4oJywgJyl9IH0gZnJvbSAnJHtmaWxlfSc7YAogIH1baW1wLnR5cGVdKGltcCk7Cn0KCmZ1bmN0aW9uIFByaW50Q0pTSW1wb3J0KHsgdHlwZSwgbG9jYWwsIGZpbGUgfSkgewogIHJldHVybiB7CiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX05BTUVTUEFDRV06ICgpID0+IGBjb25zdCAke2xvY2FsfSA9IHJlcXVpcmUoJyR7ZmlsZX0nKTtgLAogICAgW0ltcG9ydFR5cGVzLklNUE9SVF9ERUZBVUxUXTogKCkgPT4gYGNvbnN0ICR7bG9jYWx9ID0gcmVxdWlyZSgnJHtmaWxlfScpO2AsCiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUXTogKCkgPT4gYGNvbnN0IHsgJHtsb2NhbC5qb2luKCcsICcpfSB9ID0gcmVxdWlyZSgnJHtmaWxlfScpO2AKICB9W3R5cGVdKCk7Cn0KCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3RkZXJyLCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIGRlcHRoOiA4LAogICAgICBzdHJpbmdCcmVha05ld2xpbmU6IHRydWUsCiAgICAgIG1heFN0cmluZ0xlbmd0aDogMTAwMCwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZSwKICAgICAgLy9yZXBhcnNlYWJsZTogdHJ1ZSwKICAgICAgaGlkZUtleXM6IFtTeW1ib2wudG9TdHJpbmdUYWcgLyosICdjb2RlJyovXQogICAgfQogIH0pOwoKICBsZXQgb3B0aW5kID0gMCwKICAgIGNvZGUgPSAnYycsCiAgICBleHAgPSB0cnVlOwoKICBsZXQgb3V0ID0gRmRXcml0ZXIoMSwgJ3N0ZG91dCcpOwoKICBsZXQgcGFyYW1zID0gZ2V0T3B0KAogICAgewogICAgICBkZWJ1ZzogW2ZhbHNlLCAoKSA9PiArK2RlYnVnLCAneCddLAogICAgICBzb3J0OiBbZmFsc2UsIG51bGwsICdzJ10sCiAgICAgICdjYXNlLXNlbnNpdGl2ZSc6IFtmYWxzZSwgbnVsbCwgJ2MnXSwKICAgICAgcXVpZXQ6IFtmYWxzZSwgbnVsbCwgJ3EnXSwKICAgICAgZXhwb3J0OiBbZmFsc2UsICgpID0+IChleHAgPSB0cnVlKSwgJ2UnXSwKICAgICAgJ3JlbGF0aXZlLXRvJzogW3RydWUsIGFyZyA9PiAocmVsYXRpdmVUbyA9IHBhdGguYWJzb2x1dGUoYXJnKSksICdyJ10sCiAgICAgIG91dHB1dDogW3RydWUsIGZpbGUgPT4gKG91dHB1dEZpbGUgPSBmaWxlKSwgJ28nXSwKICAgICAgJ25vLXJlY3Vyc2l2ZSc6IFtmYWxzZSwgKCkgPT4gKHJlY3Vyc2l2ZSA9IGZhbHNlKSwgJ1InXSwKICAgICAgJ3JlbW92ZS1leHBvcnRzJzogW2ZhbHNlLCAoKSA9PiAocmVtb3ZlRXhwb3J0cyA9IHRydWUpLCAnRSddLAogICAgICAncmVtb3ZlLWltcG9ydHMnOiBbZmFsc2UsICgpID0+IChyZW1vdmVJbXBvcnRzID0gdHJ1ZSksICdJJ10sCiAgICAgICdyZW1vdmUtY29tbWVudHMnOiBbZmFsc2UsICgpID0+IChyZW1vdmVDb21tZW50cyA9IHRydWUpLCAnQyddLAogICAgICAnQCc6ICdmaWxlcycKICAgIH0sCiAgICBhcmdzCiAgKTsKICBsZXQgZmlsZXMgPSBwYXJhbXNbJ0AnXTsKICBjb25zdCB7IHNvcnQsICdjYXNlLXNlbnNpdGl2ZSc6IGNhc2VTZW5zaXRpdmUsIHF1aWV0IH0gPSBwYXJhbXM7CgogIGlmKG91dHB1dEZpbGUpIG91dCA9IEZpbGVXcml0ZXIob3V0cHV0RmlsZSk7CgogIGlmKGRlYnVnID4gMSkgZGVidWdMb2coJ21haW4nLCB7IG91dHB1dEZpbGUsIG91dCB9KTsKCiAgY29uc3QgUmVsYXRpdmVQYXRoID0gZmlsZSA9PiBwYXRoLmpvaW4ocGF0aC5kaXJuYW1lKHByb2Nlc3MuYXJndlsxXSksICcuLicsIGZpbGUpOwoKICBpZighZmlsZXMubGVuZ3RoKSBmaWxlcy5wdXNoKFJlbGF0aXZlUGF0aCgnbGliL3V0aWwuanMnKSk7CgogIGxldCBsb2cgPSBxdWlldCA/ICgpID0+IHt9IDogKC4uLmFyZ3MpID0+IGNvbnNvbGUubG9nKGAke2ZpbGV9OmAsIC4uLmFyZ3MpOwogIGxldCByZXN1bHRzID0gW107CiAgZm9yKGxldCBmaWxlIG9mIGZpbGVzKSB7CiAgICByZXN1bHRzLnB1c2goUHJvY2Vzc0ZpbGUoZmlsZSwgbG9nLCByZWN1cnNpdmUpKTsKICB9CiAgbGV0IFtyZXN1bHRdID0gcmVzdWx0czsKCiAgaWYoIXJlbW92ZUltcG9ydHMpIHsKICAgIGxldCBsaW5lcyA9IGhlYWRlcgogICAgICAuZmlsdGVyKGltcGV4cCA9PiAhSXNCdWlsdGluKGltcGV4cC5maWxlKSkKICAgICAgLm1hcChoZHIgPT4gaGRyLmNvZGUpCiAgICAgIC5maWx0ZXIobGluZSA9PiAhbGluZS5zdGFydHNXaXRoKCdleHBvcnQnKSk7CiAgICBpZihsaW5lcy5sZW5ndGgpIGxpbmVzID0gW0ZpbGVCYW5uZXJDb21tZW50KCdoZWFkZXInLCAwKSwgLi4ubGluZXMsIEZpbGVCYW5uZXJDb21tZW50KCdoZWFkZXInLCAxKV07CgogICAgb3V0LnB1dHMobGluZXMucmVkdWNlKChhY2MsIGxpbmUpID0+IGFjYyArIGxpbmUgKyAnXG4nLCAnJykpOwogIH0KICAvLyAgY29uc29sZS5sb2coJ2hvbGVzJywgY29tcGFjdCgxKSwgcmVzdWx0LmhvbGVzKCkpOwoKICBjb25zb2xlLmxvZyhgJHtyZXN1bHQud3JpdGUob3V0KX0gYnl0ZXMgd3JpdHRlbiB0byAnJHtvdXQuZmlsZX0nYCk7CgogIG91dC5jbG9zZSgpOwp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKICBzdGQuZXhpdCgxKTsKfQoAAAAAAAAAAK56AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADIVwAAAAAAAMhXAAAAAAAAAAAAAAAA8L8"
				],
				[
					8533,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHFYAAAAAAAAclgAAAAAAAAAAAAAclgAAAAAAABzWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxWAAAAAAAAHFYAAAAAAAAAAAAAAAA8L8"
				],
				[
					8536,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABzWAAAAAAAAHNYAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "qjsm.c",
			"settings":
			{
				"buffer_size": 37159,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					76,
					1,
					"paste",
					null,
					"AQAAAOYZAAAAAAAA8hkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5hkAAAAAAADmGQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAAPIZAAAAAAAA8hkAAAAAAAAFAAAAIXN0YXQ",
					"AQAAAAAAAAABAAAA8hkAAAAAAAD3GQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"left_delete",
					null,
					"AQAAAPcZAAAAAAAA9xkAAAAAAAAFAAAALCAmc3Q",
					"AQAAAAAAAAABAAAA9xkAAAAAAAD8GQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"paste",
					null,
					"AgAAAHgaAAAAAAAAkxoAAAAAAAAAAAAAkxoAAAAAAACTGgAAAAAAABkAAAAgICAgaWYoIXN0YXQoZmlsZSwgJnN0KSkK",
					"AQAAAAAAAAABAAAAeBoAAAAAAACRGgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "path.c",
			"settings":
			{
				"buffer_size": 14337,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 30597,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZJQAAAAAAAFslAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"cut",
					null,
					"AQAAAMoZAAAAAAAAyhkAAAAAAABOAAAALAogIGlzSXRlcmF0b3IodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHR5cGVvZiB2Lm5leHQgPT0gJ2Z1bmN0aW9uJzsKICB9",
					"AQAAAAAAAAABAAAAyhkAAAAAAAAYGgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					2,
					"paste",
					null,
					"AgAAAMoZAAAAAAAAGBoAAAAAAAAAAAAAGBoAAAAAAABmGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyhkAAAAAAADKGQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "ArrayLike"
					},
					"CgAAAB4aAAAAAAAAHxoAAAAAAAAAAAAAHxoAAAAAAAAfGgAAAAAAAAgAAABJdGVyYXRvch8aAAAAAAAAIBoAAAAAAAAAAAAAIBoAAAAAAAAhGgAAAAAAAAAAAAAhGgAAAAAAACIaAAAAAAAAAAAAACIaAAAAAAAAIxoAAAAAAAAAAAAAIxoAAAAAAAAkGgAAAAAAAAAAAAAkGgAAAAAAACUaAAAAAAAAAAAAACUaAAAAAAAAJhoAAAAAAAAAAAAAJhoAAAAAAAAnGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhoAAAAAAAAmGgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "length"
					},
					"BwAAAFAaAAAAAAAAURoAAAAAAAAAAAAAURoAAAAAAABRGgAAAAAAAAQAAABuZXh0URoAAAAAAABSGgAAAAAAAAAAAABSGgAAAAAAAFMaAAAAAAAAAAAAAFMaAAAAAAAAVBoAAAAAAAAAAAAAVBoAAAAAAABVGgAAAAAAAAAAAABVGgAAAAAAAFYaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUBoAAAAAAABUGgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "number"
					},
					"BwAAAFsaAAAAAAAAXBoAAAAAAAAAAAAAXBoAAAAAAABcGgAAAAAAAAgAAABmdW5jdGlvblwaAAAAAAAAXRoAAAAAAAAAAAAAXRoAAAAAAABeGgAAAAAAAAAAAABeGgAAAAAAAF8aAAAAAAAAAAAAAF8aAAAAAAAAYBoAAAAAAAAAAAAAYBoAAAAAAABhGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWxoAAAAAAABjGgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"paste",
					null,
					"AQAAAEcaAAAAAAAAWRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARxoAAAAAAABHGgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"left_delete",
					null,
					"AQAAAFgaAAAAAAAAWBoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAWRoAAAAAAABZGgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"cut",
					null,
					"AQAAAEcaAAAAAAAARxoAAAAAAAARAAAATnVtYmVyLmlzSW50ZWdlcig",
					"AQAAAAAAAAABAAAAWBoAAAAAAABHGgAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAGIaAAAAAAAAYxoAAAAAAAAAAAAAYxoAAAAAAABkGgAAAAAAAAAAAABkGgAAAAAAAGUaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhoAAAAAAABiGgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					2,
					"left_delete",
					null,
					"AgAAAGQaAAAAAAAAZBoAAAAAAAABAAAAL2MaAAAAAAAAYxoAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAZRoAAAAAAABlGgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": "&&"
					},
					"AgAAAGMaAAAAAAAAZBoAAAAAAAAAAAAAZBoAAAAAAABlGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxoAAAAAAABjGgAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUaAAAAAAAAZhoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRoAAAAAAABlGgAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"paste",
					null,
					"AQAAAGYaAAAAAAAAdxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhoAAAAAAABmGgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "v.length)"
					},
					"CQAAAHcaAAAAAAAAeBoAAAAAAAAAAAAAeBoAAAAAAAB5GgAAAAAAAAAAAAB5GgAAAAAAAHoaAAAAAAAAAAAAAHoaAAAAAAAAexoAAAAAAAAAAAAAexoAAAAAAAB8GgAAAAAAAAAAAAB8GgAAAAAAAH0aAAAAAAAAAAAAAH0aAAAAAAAAfhoAAAAAAAAAAAAAfhoAAAAAAAB/GgAAAAAAAAAAAAB/GgAAAAAAAIAaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxoAAAAAAAB3GgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIAaAAAAAAAAgRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgBoAAAAAAACAGgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAIAaAAAAAAAAgBoAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAgRoAAAAAAACBGgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"cut",
					null,
					"AQAAAMoZAAAAAAAAyhkAAAAAAABOAAAALAogIGlzSXRlcmF0b3IodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHR5cGVvZiB2Lm5leHQgPT0gJ2Z1bmN0aW9uJzsKICB9",
					"AQAAAAAAAAABAAAAyhkAAAAAAAAYGgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					2,
					"paste",
					null,
					"AgAAAMoZAAAAAAAAGBoAAAAAAAAAAAAAGBoAAAAAAABmGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyhkAAAAAAADKGQAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "rable"
					},
					"BgAAANMZAAAAAAAA1BkAAAAAAAAAAAAA1BkAAAAAAADUGQAAAAAAAAUAAAByYXRvctQZAAAAAAAA1RkAAAAAAAAAAAAA1RkAAAAAAADWGQAAAAAAAAAAAADWGQAAAAAAANcZAAAAAAAAAAAAANcZAAAAAAAA2BkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0xkAAAAAAADYGQAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					2,
					"left_delete",
					null,
					"AgAAAAEaAAAAAAAAARoAAAAAAAAEAAAAbmV4dAAaAAAAAAAAABoAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAARoAAAAAAAAFGgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAAaAAAAAAAAAhoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAABoAAAAAAAAAGgAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "Symbol.iterator"
					},
					"DwAAAAEaAAAAAAAAAhoAAAAAAAAAAAAAAhoAAAAAAAADGgAAAAAAAAAAAAADGgAAAAAAAAQaAAAAAAAAAAAAAAQaAAAAAAAABRoAAAAAAAAAAAAABRoAAAAAAAAGGgAAAAAAAAAAAAAGGgAAAAAAAAcaAAAAAAAAAAAAAAcaAAAAAAAACBoAAAAAAAAAAAAACBoAAAAAAAAJGgAAAAAAAAAAAAAJGgAAAAAAAAoaAAAAAAAAAAAAAAoaAAAAAAAACxoAAAAAAAAAAAAACxoAAAAAAAAMGgAAAAAAAAAAAAAMGgAAAAAAAA0aAAAAAAAAAAAAAA0aAAAAAAAADhoAAAAAAAAAAAAADhoAAAAAAAAPGgAAAAAAAAAAAAAPGgAAAAAAABAaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAARoAAAAAAAABGgAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"cut",
					null,
					"AQAAAMwZAAAAAAAAzBkAAAAAAABaAAAAICBpc0l0ZXJhYmxlKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB0eXBlb2YgdltTeW1ib2wuaXRlcmF0b3JdID09ICdmdW5jdGlvbic7CiAgfSwK",
					"AQAAAAAAAAABAAAAzBkAAAAAAAAmGgAAAAAAAAAAAAAAAAAA"
				],
				[
					183,
					2,
					"paste",
					null,
					"AgAAAMwZAAAAAAAAJhoAAAAAAAAAAAAAJhoAAAAAAACAGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzBkAAAAAAADMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "Async"
					},
					"BQAAACoaAAAAAAAAKxoAAAAAAAAAAAAAKxoAAAAAAAAsGgAAAAAAAAAAAAAsGgAAAAAAAC0aAAAAAAAAAAAAAC0aAAAAAAAALhoAAAAAAAAAAAAALhoAAAAAAAAvGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKhoAAAAAAAAqGgAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "asyncIteratgo"
					},
					"DgAAAGcaAAAAAAAAaBoAAAAAAAAAAAAAaBoAAAAAAABoGgAAAAAAAAgAAABpdGVyYXRvcmgaAAAAAAAAaRoAAAAAAAAAAAAAaRoAAAAAAABqGgAAAAAAAAAAAABqGgAAAAAAAGsaAAAAAAAAAAAAAGsaAAAAAAAAbBoAAAAAAAAAAAAAbBoAAAAAAABtGgAAAAAAAAAAAABtGgAAAAAAAG4aAAAAAAAAAAAAAG4aAAAAAAAAbxoAAAAAAAAAAAAAbxoAAAAAAABwGgAAAAAAAAAAAABwGgAAAAAAAHEaAAAAAAAAAAAAAHEaAAAAAAAAchoAAAAAAAAAAAAAchoAAAAAAABzGgAAAAAAAAAAAABzGgAAAAAAAHQaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZxoAAAAAAABvGgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					2,
					"left_delete",
					null,
					"AgAAAHMaAAAAAAAAcxoAAAAAAAABAAAAb3IaAAAAAAAAchoAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAdBoAAAAAAAB0GgAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "or"
					},
					"AgAAAHIaAAAAAAAAcxoAAAAAAAAAAAAAcxoAAAAAAAB0GgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAchoAAAAAAAByGgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/Makefile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/readlink.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/perf_hooks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/bnflexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stack.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/usr/include/zlib.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Niji.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/wasmedge-quickjs/example_js/es6_module_demo/c.",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/test-repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c.structs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/blah.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/iteration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_watch.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Aurora.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeCache.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qsort_r.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"isIter",
			"Symbol.iterator",
			"isArray",
			"module_loader",
			"<file>",
			"bufferRef",
			"<this",
			"'map'",
			"removeComments",
			"'header'",
			"== What.IMPO",
			"Log.*write",
			"log.*write",
			"== What...PORT",
			"ImportType\\(",
			"ImportType\n",
			"ImportType",
			"ImportType\\(",
			"ImportType",
			"ImportType\\(",
			"ImportType",
			"type = ",
			"removeExports",
			"removeEx",
			"removeExports",
			"removeExportds",
			"'E'",
			"isObject",
			"isObjet",
			"holes'",
			"Invalid",
			"ranges'",
			"'ranges'",
			"sort",
			"\\.sort",
			"'ranges'",
			"ranges'",
			"NumericRange.holes",
			"hole, range",
			"'holes'",
			"holes",
			"holes\\()",
			"'holes",
			"hpöes",
			"\\.write",
			"dump",
			"comments",
			"comments ",
			"comments =",
			"removeComments",
			"depth:",
			"'comments'",
			"CloseFunction",
			"PutsFunction",
			"inspect_print",
			"token_class_id",
			"class_id",
			"charRange",
			"comments'",
			"js_inspect_custom_call",
			"INSPECT_LEVEL",
			"offset_toarray",
			"range_",
			"token_inspect",
			"tok->loc",
			"CHARRANGE:",
			"'FdWriter",
			"write",
			"written",
			"written =",
			"FileWriter",
			"outg =",
			"PutsFu",
			"out =",
			"prev\\[1\\]",
			"prev\\[0\\]",
			"prev",
			"must exi",
			"collapse",
			"Already proc",
			" toString",
			"toString",
			"log.*replaceRange",
			"headerIds",
			"maxArrayLength: ",
			"AddImport",
			"maxArray",
			"'AddImport",
			"written:",
			" T ",
			"T ",
			"T",
			"IsPunctuator",
			"replaceRange",
			"util",
			"misc",
			"tokens",
			"AddImport",
			"out.puts",
			"IsBuiltin",
			"Builtin",
			"header.pus",
			"header\\.",
			"ProcessFile",
			"randInt",
			"\\.write\\(",
			"out",
			" of ",
			"start of",
			"`FileMap.for",
			"FileMap.for",
			"\n    ",
			"PathAdjust",
			"AddImport",
			"`FileMap",
			"arr:",
			"NumericRange.from",
			"'files'",
			"out\\.",
			"'impexp'",
			"FileBannerComment",
			"FileWriter",
			"out,",
			"compact",
			"console.config",
			"console.config\\({ compact: ([0-9]*) *}\\)",
			"console.config",
			"console.config\\({ compact: ([0-9]*) }\\)"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"loc",
			"prevLength",
			"prevOffset",
			"compact(\\1)",
			"js_location_create",
			"lexer_token(",
			"token_lex(",
			"LOCATION_PROP_CHAROFFSET",
			"loc->",
			"\\1_release",
			"token",
			"ALLOC_PTR",
			"ALLOC_BLOCK(p)",
			"ALLOC_BLOCK_SIZE",
			"",
			"const char* str\\1",
			"void* p,",
			"size_t size)",
			"JSRuntime* rt,",
			"JSContext\\* ctx,",
			";",
			" &(((struct alloc_block*)p)[-1]);",
			"add_to_list",
			"",
			"DEFINES_H",
			"int",
			"log",
			"out",
			"array_",
			"[%p]",
			"pthread_self()",
			"js_token_data2(ctx,",
			"js_lexer_data2(ctx,",
			"\\1//console",
			"inspectSymbol",
			"parent",
			"gettersetter",
			"ELEMENT_NODE",
			"parent",
			"attributes",
			"Node.prototype.",
			"\\1static \\2 = \\3;",
			"const raw = Node.raw(this);",
			"\\1.set\\(\\2\\)",
			"\\1.get\\(this\\)",
			"ownerElement.get\\(this\\)",
			"rawNode.get\\(this\\)",
			"inspectSymbol",
			"CSV",
			"\\1//",
			"args->c",
			"args->",
			"\\1//\\2",
			"METHOD_VALUES",
			"pr->",
			"property",
			"size[0]",
			"s->",
			"(sock)->",
			", s,",
			"(sock).",
			", *s,",
			"s->",
			"obj",
			"js_socket_data(",
			"obj",
			"loc",
			"YIELD_",
			"if",
			"\\1//\\2",
			"",
			"\\1//\\2",
			"js_pointer_free_func",
			"BITFIELD_SET",
			"fd",
			"misc.IN_",
			"fd",
			"wd",
			"JSValueConst\\1",
			"s",
			"queue_alloc(",
			"queue_alloc",
			"rpt",
			"js_return_",
			"tmp",
			"repeater_execute",
			"queue_item",
			"linked_item",
			"queue_",
			"rpt",
			"Repeater",
			"resolvable_item",
			"resolvable_",
			"js_resolvable_",
			"repeater_push",
			"COLOR_NONE",
			"COLOR_CYAN",
			"COLOR_RED",
			"COLOR_LIGHTRED",
			"\" BACKGROUND_RED \"",
			"BACKGROUND_BLUE \"",
			"BACKGROUND_GREEN \"",
			"BACKGROUND_YELLOW \"",
			"\" COLOR_NONE \"",
			"js_inspect_print_map",
			"js_inspect_print_set",
			"js_inspect_print_arraybuffer",
			"js_inspect_print_regexp",
			"js_inspect_print_number",
			"js_inspect_print_string",
			"js_inspect_print_atom",
			"js_inspect_print_module",
			"js_inspect_print_value",
			"imp",
			"INC",
			"format",
			"\\1//\\2",
			"ctx",
			"sel",
			"console.log",
			"cmd",
			"js_socket_async_wait",
			"utils_SOURCES",
			"${util_SOURCES}",
			"${vector_SOURCES}",
			"socketpair",
			"",
			"#"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3189,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
							"function_name_status_row": 17,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									756,
									776
								],
								[
									966,
									982
								],
								[
									1036,
									1055
								],
								[
									1090,
									1106
								],
								[
									1148,
									1163
								],
								[
									1226,
									1260
								],
								[
									1283,
									1315
								],
								[
									1338,
									1381
								],
								[
									3210,
									3229
								],
								[
									3327,
									3343
								],
								[
									3405,
									3423
								],
								[
									3487,
									3506
								],
								[
									3571,
									3580
								],
								[
									3635,
									3652
								],
								[
									3715,
									3732
								],
								[
									3795,
									3809
								],
								[
									3869,
									3884
								],
								[
									3945,
									3960
								],
								[
									4021,
									4029
								],
								[
									4083,
									4095
								],
								[
									4153,
									4163
								],
								[
									4219,
									4230
								],
								[
									4287,
									4295
								],
								[
									4349,
									4371
								],
								[
									4439,
									4454
								],
								[
									4515,
									4537
								],
								[
									4605,
									4621
								],
								[
									4683,
									4699
								],
								[
									4761,
									4773
								],
								[
									4831,
									4843
								],
								[
									4901,
									4914
								],
								[
									4973,
									4991
								],
								[
									5049,
									5067
								],
								[
									5131,
									5153
								],
								[
									5221,
									5248
								],
								[
									5321,
									5338
								],
								[
									5395,
									5412
								],
								[
									5469,
									5486
								],
								[
									5533,
									5549
								],
								[
									5632,
									5648
								],
								[
									5720,
									5736
								],
								[
									5808,
									5825
								],
								[
									5882,
									5902
								],
								[
									5961,
									5981
								],
								[
									6140,
									6159
								],
								[
									6235,
									6242
								],
								[
									6271,
									6291
								],
								[
									6361,
									6376
								],
								[
									6437,
									6463
								],
								[
									6534,
									6550
								],
								[
									6606,
									6619
								],
								[
									6696,
									6714
								],
								[
									6796,
									6809
								],
								[
									6874,
									6888
								],
								[
									6990,
									7016
								],
								[
									7062,
									7087
								],
								[
									7172,
									7214
								],
								[
									7348,
									7388
								],
								[
									10317,
									10360
								],
								[
									10741,
									10776
								],
								[
									10932,
									10950
								],
								[
									10980,
									10985
								],
								[
									11075,
									11102
								],
								[
									11221,
									11256
								],
								[
									11317,
									11321
								],
								[
									11337,
									11341
								],
								[
									11368,
									11377
								],
								[
									11540,
									11573
								],
								[
									11627,
									11659
								],
								[
									11823,
									11847
								],
								[
									12003,
									12024
								],
								[
									12094,
									12100
								],
								[
									12117,
									12133
								],
								[
									12196,
									12202
								],
								[
									12215,
									12231
								],
								[
									12279,
									12309
								],
								[
									12541,
									12568
								],
								[
									12599,
									12626
								],
								[
									12725,
									12752
								],
								[
									12976,
									13000
								],
								[
									13050,
									13054
								],
								[
									13094,
									13121
								],
								[
									13351,
									13371
								],
								[
									13401,
									13412
								],
								[
									13511,
									13546
								],
								[
									13586,
									13604
								],
								[
									13791,
									13812
								],
								[
									13836,
									13846
								],
								[
									13885,
									13915
								],
								[
									14463,
									14497
								],
								[
									14798,
									14832
								],
								[
									15052,
									15086
								],
								[
									15152,
									15188
								],
								[
									15263,
									15280
								],
								[
									15439,
									15476
								],
								[
									15477,
									15491
								],
								[
									15497,
									15501
								],
								[
									15576,
									15608
								],
								[
									15636,
									15662
								],
								[
									15987,
									16009
								],
								[
									16047,
									16063
								],
								[
									16078,
									16085
								],
								[
									16107,
									16123
								],
								[
									16161,
									16189
								],
								[
									16408,
									16425
								],
								[
									16426,
									16435
								],
								[
									16487,
									16504
								],
								[
									16505,
									16514
								],
								[
									16574,
									16591
								],
								[
									16592,
									16615
								],
								[
									16671,
									16695
								],
								[
									19322,
									19350
								],
								[
									19781,
									19785
								],
								[
									19913,
									19926
								],
								[
									20242,
									20254
								],
								[
									20517,
									20530
								],
								[
									20635,
									20649
								],
								[
									21542,
									21570
								],
								[
									21686,
									21699
								],
								[
									21811,
									21837
								],
								[
									22032,
									22080
								],
								[
									22128,
									22240
								],
								[
									22345,
									22368
								],
								[
									22512,
									22564
								],
								[
									22658,
									22674
								],
								[
									22758,
									22769
								],
								[
									22882,
									22886
								],
								[
									23165,
									23198
								],
								[
									23312,
									23364
								],
								[
									23538,
									23574
								],
								[
									23731,
									23747
								],
								[
									23761,
									23783
								],
								[
									23896,
									23902
								],
								[
									25264,
									25306
								],
								[
									25501,
									25532
								],
								[
									25582,
									25624
								],
								[
									25744,
									25768
								],
								[
									25988,
									25998
								],
								[
									26051,
									26055
								],
								[
									26094,
									26121
								],
								[
									26168,
									26180
								],
								[
									26250,
									26262
								],
								[
									26325,
									26350
								],
								[
									26395,
									26426
								],
								[
									26437,
									26454
								],
								[
									26595,
									26630
								],
								[
									26678,
									26705
								],
								[
									26796,
									26834
								],
								[
									27043,
									27091
								],
								[
									27679,
									27706
								],
								[
									27909,
									27923
								],
								[
									27972,
									27978
								],
								[
									28019,
									28038
								],
								[
									28089,
									28097
								]
							],
							"symlist":
							[
								"  slice = (x, s, e) =>",
								"  stringify = v =>",
								"  formatNumber = n =>",
								"  isNative = fn =>",
								"  util()",
								"AsyncFunction = function x()",
								"GeneratorFunction = function*()",
								"AsyncGeneratorFunction = function*()",
								"  isAnyArrayBuffer(v)",
								"  isArrayBuffer(v)",
								"  isBigInt64Array(v)",
								"  isBigUint64Array(v)",
								"  isDate(v)",
								"  isFloat32Array(v)",
								"  isFloat64Array(v)",
								"  isInt8Array(v)",
								"  isInt16Array(v)",
								"  isInt32Array(v)",
								"  isMap(v)",
								"  isPromise(v)",
								"  isProxy(v)",
								"  isRegExp(v)",
								"  isSet(v)",
								"  isSharedArrayBuffer(v)",
								"  isUint8Array(v)",
								"  isUint8ClampedArray(v)",
								"  isUint16Array(v)",
								"  isUint32Array(v)",
								"  isWeakMap(v)",
								"  isWeakSet(v)",
								"  isDataView(v)",
								"  isBooleanObject(v)",
								"  isAsyncFunction(v)",
								"  isGeneratorFunction(v)",
								"  isAsyncGeneratorFunction(v)",
								"  isNumberObject(v)",
								"  isBigIntObject(v)",
								"  isSymbolObject(v)",
								"  isNativeError(v)",
								"  isMapIterator(v)",
								"  isSetIterator(v)",
								"  isStringObject(v)",
								"  isArrayBufferView(v)",
								"  isArgumentsObject(v)",
								"  isBoxedPrimitive(v)",
								"  ctor =>",
								"  isGeneratorObject(v)",
								"  isTypedArray(v)",
								"  isModuleNamespaceObject(v)",
								"  isConstructor(v)",
								"  isIterable(v)",
								"  isAsyncIterable(v)",
								"  isIterator(v)",
								"  isArrayLike(v)",
								"  hasBuiltIn(o, m)",
								"  format(...args)",
								"  formatWithOptions(opts, ...args)",
								"  formatWithOptionsInternal(o, v)",
								"  assert(actual, expected, message)",
								"  setInterval(callback, ms)",
								"  start()",
								"() =>",
								"  clearInterval(id)",
								"  inherits(ctor, superCtor)",
								"  ctor",
								"  ctor",
								"  superCtor",
								"  memoize(fn, cache = {})",
								"Memoize(n, ...rest)",
								"  getset(target)",
								"GetSet = (...args) =>",
								"  key =>",
								"\t(key, value) =>",
								"  key =>",
								"\t(key, value) =>",
								"  gettersetter(target)",
								"  gettersetter = (...args) =>",
								"  gettersetter = (...args) =>",
								"  gettersetter = (...args) =>",
								"  hasGetSet(obj)",
								"  m =>",
								"  mapObject(target)",
								"  set: (key, value) =>",
								"  get: key =>",
								"  once(fn, thisArg, memoFn)",
								"\tfunction(...args)",
								"  waitFor(ms)",
								"  resolve =>",
								"  define(obj, ...args)",
								"  weakAssign(obj, ...args)",
								"  getConstructorChain(obj)",
								"  hasPrototype(obj, proto)",
								"  filter(seq, pred, thisArg)",
								"  pred = (el, i) =>",
								"\t(f, arr = [], length = f.length) =>",
								"\t(...args) =>",
								"  a =>",
								"  split(buf, ...points)",
								"  splitAt = (b, pos, len) =>",
								"  unique = (arr, cmp) =>",
								"\t(el, i, arr) =>",
								"  item =>",
								"\t(el, i, arr) =>",
								"  getFunctionArguments = fn =>",
								"\t(offset = 0) =>",
								"\tcode =>",
								"\t(offset = 0) =>",
								"\tcode =>",
								"\t(offset = 0) =>",
								"\t(red, green, blue) =>",
								"  getAnsiStyles()",
								"  value: (red, green, blue) =>",
								"  c =>",
								"  value: hex =>",
								"  character =>",
								"  value: hex =>",
								"  value: code =>",
								"  value: (red, green, blue) =>",
								"  value: hex =>",
								"  randInt(...args)",
								"  randFloat(min, max, rng = Math.random)",
								"  randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
								"  toBigInt(arg)",
								"  lazyProperty(obj, name, getter, opts = {})",
								"  function()",
								"\tfunction()",
								"  v =>",
								"  replaceProperty(value)",
								"  lazyProperties(obj, gettersObj, opts = {})",
								"  getOpt(options = {}, args)",
								"  findOpt = arg =>",
								"([optname, option]) =>",
								"  opt =>",
								"  toUnixTime(dateObj, utc = false)",
								"  unixTime(utc = false)",
								"  fromUnixTime(epoch, utc = false)",
								"  range(...args)",
								"\t(v, k) =>",
								"  n =>",
								"  repeater(n, what)",
								"()",
								"()",
								"  repeat(n, what)",
								"  chunkArray(arr, size)",
								"  fn = (a, v, i) =>",
								"  camelize(str, delim = '')",
								"\t(match, p1, p2, offset) =>",
								"  decamelize(str, delim = '-')",
								"  shorten(str, max = 40, suffix = '...')",
								"  arraysInCommon(a)",
								"(itm, indx) =>",
								"  arr =>",
								"  mod(a, b)",
								"  b : n =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643906067.12,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "resolve-imports.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31422,
						"regions":
						{
						},
						"selection":
						[
							[
								21924,
								21924
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 735,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643905985.73,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17575.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37159,
						"regions":
						{
						},
						"selection":
						[
							[
								6803,
								6803
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 244,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643909818.79,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4164.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "path.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14337,
						"regions":
						{
						},
						"selection":
						[
							[
								9272,
								9272
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 449,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643929689.12,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8135.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/util.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30597,
						"regions":
						{
						},
						"selection":
						[
							[
								6606,
								6616
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 161,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643999226.11,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2644.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(140502873537696)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"path.c",
				"path.c"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"lexer",
				"lexer.c"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"buffer",
				"buffer-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"xpath.j",
				"lib/xpath.js"
			],
			[
				"predicate.h",
				"predicate.h"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"list.h",
				"~/Projects/plot-cv/quickjs/list.h"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"queue",
				"queue.c"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"test_wa",
				"tests/test_watch.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"tree-wa",
				"quickjs-tree-walker.c"
			],
			[
				"quick",
				"quickjs-xml.c"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"",
				"tests/test_xml.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"doxy",
				"Doxyfile"
			],
			[
				"Doxyfile",
				"Doxyfile"
			],
			[
				"interna",
				"quickjs-internal.h"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"child",
				"child-process.c"
			],
			[
				"qsort_r",
				"qsort_r.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"quicksj-misc",
				"quickjs-misc.c"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-mm",
				"quickjs-mmap.c"
			],
			[
				"quickjs-m",
				"quickjs-misc.c"
			],
			[
				"redicate.c",
				"predicate.c"
			],
			[
				"sockets.h",
				"quickjs-sockets.h"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"parser.js",
				"lib/parser.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"conso",
				"lib/console.js"
			],
			[
				"clang-f",
				".clang-format"
			],
			[
				"test_mi",
				"tests/test_misc.js"
			],
			[
				"ockets.",
				"quickjs-sockets.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"test_loca",
				"tests/test_location.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
