{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"JS_Get",
				"JS_GetArrayBuffer"
			],
			[
				"JS_",
				"JS_ThrowTypeError"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Throw",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_Set",
				"JS_SetPropertyStr"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"js_sys",
				"js_syscallerror_get"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_",
				"js_sockaddr_class_id"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"JS_New",
				"JS_NewStringLen"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"get",
				"getOwnPropertyNames"
			],
			[
				"JS_Thr",
				"JS_ThrowInternalError"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  ‚í°  inet_pton ( ) ; ‚Äî function declaration\n  ‚í°  inet_ntop ( ) ; ‚Äî function declaration\n  ‚í°  socketpair ( ) ; ‚Äî function declaration\n  ‚í°  js_sockets_init ( ) ; ‚Äî function declaration\n  ‚í°  js_socket_async_wait ( ) ; ‚Äî function declaration\n‚Äî‚ìÇ‚Äì JS_SOCKETCALL ( ) ‚Ä¶ ‚Äî macro function\n‚Äî‚ìÇ‚Äì JS_SOCKETCALL_FAIL ( ) ‚Ä¶ ‚Äî macro function\n‚Äî‚ìÇ‚Äì JS_SOCKETCALL_RETURN ( ) ‚Ä¶ ‚Äî macro function\n‚Äî‚íª‚Äì syscall_return ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì sockaddr_new ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_free_buffer ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_wrap ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_new ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_init ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_constructor ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_method ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_get ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_set ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_inspect ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockaddr_finalizer ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì timeval_read ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì timeval_write ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì fdset_read ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì fdset_write ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì fdset_toarray ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì pollfd_read ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì pollfd_write ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì optval_buf ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socketpair ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_select ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_poll ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_new_proto ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_new ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚í∏‚Äì SocketProperties { ‚Ä¶ } ; ‚Äî type\n‚Äî‚íª‚Äì js_socket_get ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_set ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚í∏‚Äì SocketMethods { ‚Ä¶ } ; ‚Äî type\n‚Äî‚íª‚Äì js_socket_method ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_constructor ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_inspect ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_valueof ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_async_resolve ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_async_wait ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_adopt ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_socket_finalizer ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockopt ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_sockets_init ( ) { ‚Ä¶ } ‚Äî function\n  ‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object\n  ‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object",
			"settings":
			{
				"buffer_size": 2071,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					37,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								7040,
								7065
							],
							[
								8631,
								8645
							],
							[
								9753,
								9769
							],
							[
								10839,
								10868
							],
							[
								11107,
								11123
							],
							[
								12004,
								12020
							],
							[
								13123,
								13148
							],
							[
								13592,
								13606
							],
							[
								14740,
								14755
							],
							[
								15241,
								15254
							],
							[
								15855,
								15867
							],
							[
								16273,
								16285
							],
							[
								16700,
								16715
							],
							[
								17796,
								17816
							],
							[
								18155,
								18174
							],
							[
								18393,
								18405
							],
							[
								20531,
								20548
							],
							[
								21146,
								21164
							],
							[
								22376,
								22396
							],
							[
								22857,
								22878
							],
							[
								23352,
								23367
							],
							[
								23860,
								23880
							],
							[
								24339,
								24351
							],
							[
								25070,
								25085
							],
							[
								26584,
								26609
							],
							[
								27148,
								27173
							],
							[
								28425,
								28439
							],
							[
								29352,
								29366
							],
							[
								29725,
								29738
							],
							[
								32117,
								32130
							],
							[
								33037,
								33047
							],
							[
								41617,
								41629
							],
							[
								42159,
								42173
							],
							[
								42203,
								42217
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAABkCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					38,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								7061,
								7086
							],
							[
								8652,
								8666
							],
							[
								9774,
								9790
							],
							[
								10860,
								10889
							],
							[
								11128,
								11144
							],
							[
								12025,
								12041
							],
							[
								13144,
								13169
							],
							[
								13613,
								13627
							],
							[
								14761,
								14776
							],
							[
								15262,
								15275
							],
							[
								15876,
								15888
							],
							[
								16294,
								16306
							],
							[
								16721,
								16736
							],
							[
								17817,
								17837
							],
							[
								18176,
								18195
							],
							[
								18414,
								18426
							],
							[
								20552,
								20569
							],
							[
								21167,
								21185
							],
							[
								22397,
								22417
							],
							[
								22878,
								22899
							],
							[
								23373,
								23388
							],
							[
								23881,
								23901
							],
							[
								24360,
								24372
							],
							[
								25091,
								25106
							],
							[
								26605,
								26630
							],
							[
								27169,
								27194
							],
							[
								28446,
								28460
							],
							[
								29373,
								29387
							],
							[
								29746,
								29759
							],
							[
								32138,
								32151
							],
							[
								33058,
								33068
							],
							[
								41638,
								41650
							],
							[
								42180,
								42194
							],
							[
								42224,
								42238
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					40,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					41,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								7061,
								7086
							],
							[
								8652,
								8666
							],
							[
								9774,
								9790
							],
							[
								10860,
								10889
							],
							[
								11128,
								11144
							],
							[
								12025,
								12041
							],
							[
								13144,
								13169
							],
							[
								13613,
								13627
							],
							[
								14761,
								14776
							],
							[
								15262,
								15275
							],
							[
								15876,
								15888
							],
							[
								16294,
								16306
							],
							[
								16721,
								16736
							],
							[
								17817,
								17837
							],
							[
								18176,
								18195
							],
							[
								18414,
								18426
							],
							[
								20552,
								20569
							],
							[
								21167,
								21185
							],
							[
								22397,
								22417
							],
							[
								22878,
								22899
							],
							[
								23373,
								23388
							],
							[
								23881,
								23901
							],
							[
								24360,
								24372
							],
							[
								25091,
								25106
							],
							[
								26605,
								26630
							],
							[
								27169,
								27194
							],
							[
								28446,
								28460
							],
							[
								29373,
								29387
							],
							[
								29746,
								29759
							],
							[
								32138,
								32151
							],
							[
								33058,
								33068
							],
							[
								41638,
								41650
							],
							[
								42180,
								42194
							],
							[
								42224,
								42238
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					42,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					43,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								7061,
								7086
							],
							[
								8652,
								8666
							],
							[
								9774,
								9790
							],
							[
								10860,
								10889
							],
							[
								11128,
								11144
							],
							[
								12025,
								12041
							],
							[
								13144,
								13169
							],
							[
								13613,
								13627
							],
							[
								14761,
								14776
							],
							[
								15262,
								15275
							],
							[
								15876,
								15888
							],
							[
								16294,
								16306
							],
							[
								16721,
								16736
							],
							[
								17817,
								17837
							],
							[
								18176,
								18195
							],
							[
								18414,
								18426
							],
							[
								20552,
								20569
							],
							[
								21167,
								21185
							],
							[
								22397,
								22417
							],
							[
								22878,
								22899
							],
							[
								23373,
								23388
							],
							[
								23881,
								23901
							],
							[
								24360,
								24372
							],
							[
								25091,
								25106
							],
							[
								26605,
								26630
							],
							[
								27169,
								27194
							],
							[
								28446,
								28460
							],
							[
								29373,
								29387
							],
							[
								29746,
								29759
							],
							[
								32138,
								32151
							],
							[
								33058,
								33068
							],
							[
								41638,
								41650
							],
							[
								42180,
								42194
							],
							[
								42224,
								42238
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AwAAAAAAAAAAAAAAZAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQKAAAgIOKSoSAgbWVtbWVtICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrjigJMgcGNnX3N0YXRlX3NldHNlcV82NCB7IOKApiB9IDsg4oCUIHR5cGUKICDik4kgIHBjZzMyX3JhbmRvbV90IDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHBjZzMyX3JhbmRvbV9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGNnMzJfaW5pdF9zdGF0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbV9ib3VuZGVkX2RpdmlzaW9ubGVzcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3N0cmluZ19mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcnJheWJ1ZmZlcl9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3BvaW50ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3RvYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3NsaWNlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yZXNpemVhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY29uY2F0YXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3NlYXJjaGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19tZW1jcHkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZtZW1vcGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRwZXJmb3JtYW5jZWNvdW50ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cHJvdG90eXBlY2hhaW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZm5tYXRjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdW5hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2F0b2IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbXBpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3dyaXRlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3ZhbHVldHlwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRfYnl0ZWNvZGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2F0b20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2JpdGZpZWxkX3RvX2FycmF5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hcnJheV90b19iaXRmaWVsZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3F1b3RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19lcnJvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAGQIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
						"symkeys":
						[
							[
								77,
								88
							],
							[
								313,
								322
							],
							[
								629,
								642
							],
							[
								928,
								940
							],
							[
								1170,
								1180
							],
							[
								1333,
								1344
							],
							[
								1500,
								1510
							],
							[
								1814,
								1824
							],
							[
								1947,
								1957
							],
							[
								2040,
								2049
							],
							[
								2354,
								2368
							],
							[
								2573,
								2585
							],
							[
								2737,
								2754
							],
							[
								2949,
								2970
							],
							[
								3592,
								3614
							],
							[
								4255,
								4278
							],
							[
								4679,
								4695
							],
							[
								6230,
								6244
							],
							[
								6436,
								6454
							],
							[
								6696,
								6710
							],
							[
								7043,
								7058
							],
							[
								7276,
								7294
							],
							[
								7461,
								7470
							],
							[
								7824,
								7839
							],
							[
								9110,
								9124
							],
							[
								9560,
								9578
							],
							[
								9656,
								9674
							],
							[
								9860,
								9877
							],
							[
								10049,
								10066
							],
							[
								10277,
								10294
							],
							[
								10420,
								10436
							],
							[
								10621,
								10645
							],
							[
								10865,
								10884
							],
							[
								11039,
								11055
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉansi_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉansi_skip‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉansi_truncate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarray_search‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉstr_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉbyte_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉbyte_findb‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉbyte_finds‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉbyte_equal‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_at_n‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_last_line‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_prepend‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_put_colorstr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_put_escaped_pred‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_put_escaped_table‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_put_unescaped_pred‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_put_escaped‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_put_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_reserve_start‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_token_pop‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_token_push‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_tostring_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_load‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_input_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_input_chars‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_valid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_clone‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_peek‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_currentline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_column‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_offset_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAABwBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					45,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								7061,
								7086
							],
							[
								8652,
								8666
							],
							[
								9774,
								9790
							],
							[
								10860,
								10889
							],
							[
								11128,
								11144
							],
							[
								12025,
								12041
							],
							[
								13144,
								13169
							],
							[
								13613,
								13627
							],
							[
								14761,
								14776
							],
							[
								15262,
								15275
							],
							[
								15876,
								15888
							],
							[
								16294,
								16306
							],
							[
								16721,
								16736
							],
							[
								17817,
								17837
							],
							[
								18176,
								18195
							],
							[
								18414,
								18426
							],
							[
								20552,
								20569
							],
							[
								21167,
								21185
							],
							[
								22397,
								22417
							],
							[
								22878,
								22899
							],
							[
								23373,
								23388
							],
							[
								23881,
								23901
							],
							[
								24360,
								24372
							],
							[
								25091,
								25106
							],
							[
								26605,
								26630
							],
							[
								27169,
								27194
							],
							[
								28446,
								28460
							],
							[
								29373,
								29387
							],
							[
								29746,
								29759
							],
							[
								32138,
								32151
							],
							[
								33058,
								33068
							],
							[
								41638,
								41650
							],
							[
								42180,
								42194
							],
							[
								42224,
								42238
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADEBgAA4oCU4pK74oCTIGFuc2lfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYW5zaV9za2lwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYW5zaV90cnVuY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGFycmF5X3NlYXJjaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHN0cl9lc2NhcGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBieXRlX2VzY2FwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGJ5dGVfZmluZGIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBieXRlX2ZpbmRzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYnl0ZV9lcXVhbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGRidWZfYXRfbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGRidWZfbGFzdF9saW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZGJ1Zl9wcmVwZW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZGJ1Zl9wdXRfY29sb3JzdHIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX3B1dF9lc2NhcGVkX3ByZWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX3B1dF9lc2NhcGVkX3RhYmxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZGJ1Zl9wdXRfdW5lc2NhcGVkX3ByZWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX3B1dF9lc2NhcGVkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgZGJ1Zl9wdXRfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX3Jlc2VydmVfc3RhcnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX3Rva2VuX3BvcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGRidWZfdG9rZW5fcHVzaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGRidWZfdG9zdHJpbmdfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGRidWZfbG9hZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lucHV0X2J1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2lucHV0X2NoYXJzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5wdXRfYnVmZmVyX3ZhbGlkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5wdXRfYnVmZmVyX2Nsb25lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5wdXRfYnVmZmVyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnB1dF9idWZmZXJfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9wZWVrICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5wdXRfYnVmZmVyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9jdXJyZW50bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9jb2x1bW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vZmZzZXRfbGVuZ3RoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAAZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					46,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								7060,
								7085
							],
							[
								8651,
								8665
							],
							[
								9773,
								9789
							],
							[
								10859,
								10888
							],
							[
								11127,
								11143
							],
							[
								12024,
								12040
							],
							[
								13143,
								13168
							],
							[
								13612,
								13626
							],
							[
								14760,
								14775
							],
							[
								15261,
								15274
							],
							[
								15875,
								15887
							],
							[
								16293,
								16305
							],
							[
								16720,
								16735
							],
							[
								17816,
								17836
							],
							[
								18175,
								18194
							],
							[
								18413,
								18425
							],
							[
								20551,
								20568
							],
							[
								21166,
								21184
							],
							[
								22396,
								22416
							],
							[
								22877,
								22898
							],
							[
								23372,
								23387
							],
							[
								23880,
								23900
							],
							[
								24359,
								24371
							],
							[
								25090,
								25105
							],
							[
								26604,
								26629
							],
							[
								27168,
								27193
							],
							[
								28445,
								28459
							],
							[
								29372,
								29386
							],
							[
								29745,
								29758
							],
							[
								32137,
								32150
							],
							[
								33057,
								33067
							],
							[
								41637,
								41649
							],
							[
								42179,
								42193
							],
							[
								42223,
								42237
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAABkCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					47,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								7053,
								7078
							],
							[
								8644,
								8658
							],
							[
								9766,
								9782
							],
							[
								10852,
								10881
							],
							[
								11120,
								11136
							],
							[
								12017,
								12033
							],
							[
								13136,
								13161
							],
							[
								13605,
								13619
							],
							[
								14753,
								14768
							],
							[
								15254,
								15267
							],
							[
								15868,
								15880
							],
							[
								16286,
								16298
							],
							[
								16713,
								16728
							],
							[
								17809,
								17829
							],
							[
								18168,
								18187
							],
							[
								18406,
								18418
							],
							[
								20544,
								20561
							],
							[
								21159,
								21177
							],
							[
								22389,
								22409
							],
							[
								22870,
								22891
							],
							[
								23365,
								23380
							],
							[
								23873,
								23893
							],
							[
								24352,
								24364
							],
							[
								25083,
								25098
							],
							[
								26597,
								26622
							],
							[
								27161,
								27186
							],
							[
								28438,
								28452
							],
							[
								29365,
								29379
							],
							[
								29738,
								29751
							],
							[
								32130,
								32143
							],
							[
								33050,
								33060
							],
							[
								41630,
								41642
							],
							[
								42172,
								42186
							],
							[
								42216,
								42230
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAABkCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAoAACAg4pKhICBtZW1tZW0gKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9pbml0X3N0YXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnl0ZWNvZGVfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3RyaW5nX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3RvcG9pbnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfc2xpY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Jlc2l6ZWFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfc2VhcmNoYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX21lbWNweSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZm1lbW9wZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY2xpbmsgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Byb2NyZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaHJ0aW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbm1hdGNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYnRvYSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvYiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yZWFkX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0eCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ldmFsYmluYXJ5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVfYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldF9ieXRlY29kZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY2xhc3NpZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYml0ZmllbGRfdG9fYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yYW5kb20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2VzY2FwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcXVvdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					48,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6156
							],
							[
								6997,
								7022
							],
							[
								8588,
								8602
							],
							[
								9710,
								9726
							],
							[
								10796,
								10825
							],
							[
								11064,
								11080
							],
							[
								11961,
								11977
							],
							[
								13080,
								13105
							],
							[
								13549,
								13563
							],
							[
								14697,
								14712
							],
							[
								15198,
								15211
							],
							[
								15812,
								15824
							],
							[
								16230,
								16242
							],
							[
								16657,
								16672
							],
							[
								17753,
								17773
							],
							[
								18112,
								18131
							],
							[
								18350,
								18362
							],
							[
								20488,
								20505
							],
							[
								21103,
								21121
							],
							[
								22333,
								22353
							],
							[
								22814,
								22835
							],
							[
								23309,
								23324
							],
							[
								23817,
								23837
							],
							[
								24296,
								24308
							],
							[
								25027,
								25042
							],
							[
								26541,
								26566
							],
							[
								27105,
								27130
							],
							[
								28382,
								28396
							],
							[
								29309,
								29323
							],
							[
								29682,
								29695
							],
							[
								32074,
								32087
							],
							[
								32994,
								33004
							],
							[
								41574,
								41586
							],
							[
								42116,
								42130
							],
							[
								42160,
								42174
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concatarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAABkCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARAoAACAg4pKhICBtZW1tZW0gKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9pbml0X3N0YXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYnl0ZWNvZGVfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfc3RyaW5nX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3RvcG9pbnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfc2xpY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Jlc2l6ZWFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfc2VhcmNoYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX21lbWNweSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZm1lbW9wZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY2xpbmsgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Byb2NyZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaHJ0aW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbm1hdGNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYnRvYSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvYiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yZWFkX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0eCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ldmFsYmluYXJ5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVfYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldF9ieXRlY29kZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY2xhc3NpZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYml0ZmllbGRfdG9fYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yYW5kb20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2VzY2FwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcXVvdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					49,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABECgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zZWFyY2hhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfbWVtY3B5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbWVtb3BlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0cGVyZm9ybWFuY2Vjb3VudGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19wcm9jbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHByb3RvdHlwZWNoYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ocnRpbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3VuYW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19idG9hICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jb21waWxlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY193cml0ZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JlYWRfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY192YWx1ZXR5cGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2V2YWxiaW5hcnkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfb3Bjb2RlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19jbGFzc2lkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXJyYXlfdG9fYml0ZmllbGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXNjYXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19xdW90ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZXJyb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2lzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					50,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6145
							],
							[
								6987,
								7012
							],
							[
								8578,
								8592
							],
							[
								9700,
								9716
							],
							[
								10786,
								10815
							],
							[
								11054,
								11070
							],
							[
								11951,
								11967
							],
							[
								13070,
								13095
							],
							[
								13539,
								13553
							],
							[
								14687,
								14702
							],
							[
								15188,
								15201
							],
							[
								15802,
								15814
							],
							[
								16220,
								16232
							],
							[
								16647,
								16662
							],
							[
								17743,
								17763
							],
							[
								18102,
								18121
							],
							[
								18340,
								18352
							],
							[
								20478,
								20495
							],
							[
								21093,
								21111
							],
							[
								22323,
								22343
							],
							[
								22804,
								22825
							],
							[
								23299,
								23314
							],
							[
								23807,
								23827
							],
							[
								24286,
								24298
							],
							[
								25017,
								25032
							],
							[
								26531,
								26556
							],
							[
								27095,
								27120
							],
							[
								28372,
								28386
							],
							[
								29299,
								29313
							],
							[
								29672,
								29685
							],
							[
								32064,
								32077
							],
							[
								32984,
								32994
							],
							[
								41553,
								41565
							],
							[
								42095,
								42109
							],
							[
								42139,
								42153
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concat‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAWQgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					51,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
						"symkeys":
						[
							[
								31,
								45
							],
							[
								158,
								165
							],
							[
								227,
								234
							],
							[
								281,
								293
							],
							[
								349,
								363
							],
							[
								441,
								452
							],
							[
								482,
								491
							],
							[
								521,
								534
							],
							[
								579,
								591
							],
							[
								641,
								651
							],
							[
								672,
								683
							],
							[
								713,
								723
							],
							[
								784,
								794
							],
							[
								842,
								852
							],
							[
								900,
								909
							],
							[
								967,
								981
							],
							[
								1005,
								1017
							],
							[
								1061,
								1078
							],
							[
								1142,
								1163
							],
							[
								1222,
								1244
							],
							[
								1308,
								1331
							],
							[
								1390,
								1406
							],
							[
								1447,
								1461
							],
							[
								1503,
								1521
							],
							[
								1547,
								1561
							],
							[
								1585,
								1600
							],
							[
								1656,
								1674
							],
							[
								1705,
								1714
							],
							[
								1757,
								1766
							],
							[
								1960,
								1971
							],
							[
								2043,
								2053
							],
							[
								2142,
								2148
							],
							[
								2222,
								2231
							],
							[
								2294,
								2309
							],
							[
								2484,
								2497
							],
							[
								2829,
								2841
							],
							[
								2850,
								2863
							],
							[
								2872,
								2885
							],
							[
								2903,
								2915
							],
							[
								2952,
								2963
							],
							[
								2985,
								2995
							],
							[
								3070,
								3080
							],
							[
								3143,
								3155
							],
							[
								3216,
								3233
							],
							[
								3380,
								3393
							],
							[
								3422,
								3434
							],
							[
								3456,
								3466
							],
							[
								3544,
								3554
							],
							[
								3654,
								3667
							],
							[
								3698,
								3710
							],
							[
								3732,
								3743
							],
							[
								3830,
								3847
							],
							[
								3953,
								3964
							],
							[
								4065,
								4076
							],
							[
								4188,
								4200
							],
							[
								4346,
								4358
							],
							[
								4509,
								4521
							],
							[
								4867,
								4880
							],
							[
								5095,
								5106
							],
							[
								5314,
								5325
							],
							[
								5456,
								5467
							],
							[
								5489,
								5514
							],
							[
								5687,
								5702
							],
							[
								5752,
								5766
							],
							[
								5816,
								5834
							],
							[
								5880,
								5898
							],
							[
								5928,
								5945
							],
							[
								5987,
								6004
							],
							[
								6063,
								6080
							],
							[
								6168,
								6187
							],
							[
								6288,
								6306
							],
							[
								6427,
								6446
							],
							[
								6649,
								6665
							],
							[
								6713,
								6730
							],
							[
								6775,
								6799
							],
							[
								6835,
								6854
							],
							[
								6895,
								6913
							],
							[
								7209,
								7226
							],
							[
								7361,
								7379
							],
							[
								7462,
								7478
							],
							[
								7583,
								7599
							],
							[
								7693,
								7712
							],
							[
								7789,
								7805
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBUFFER_UTILS_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉMAX_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉMIN_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉarray_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚ìÇ‚Äì‚ÄÉarray_contains‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉansi_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉansi_skip‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉansi_truncate‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉarray_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉstr_escape‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉbyte_escape‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉbyte_findb‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉbyte_finds‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉbyte_equal‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_at_n‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_last_line‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_prepend‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_put_colorstr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_put_escaped_pred‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_put_escaped_table‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_put_unescaped_pred‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_put_escaped‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_put_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_reserve_start‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_token_pop‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_token_push‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_tostring_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉdbuf_load‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_putm‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉdbuf_append‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_count‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_0‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_zero‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_get_column‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉdbuf_bitflags‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉmemory_block‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉpointer_range‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉoffset_length‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉmemory_block‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉMemoryBlock‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉblock_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉblock_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉblock_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉblock_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉpointer_range‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉPointerRange‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉrange_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉrange_from‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉoffset_length‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOffsetLength‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉoffset_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoffset_is_default‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoffset_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoffset_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoffset_block‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoffset_range‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoffset_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoffset_offset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉblock_range‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉInputBuffer‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉInputBuffer‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_free_default‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_input_buffer‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_input_chars‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_clone‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_valid‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_block‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_offset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_peek‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_currentline‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinput_buffer_column‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_peekc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_getc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_begin‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_end‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_eof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinput_buffer_remain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_offset_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5CgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfc2VhcmNoYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX21lbWNweSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZm1lbW9wZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY2xpbmsgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Byb2NyZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaHJ0aW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbm1hdGNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYnRvYSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvYiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yZWFkX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0eCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ldmFsYmluYXJ5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVfYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldF9ieXRlY29kZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY2xhc3NpZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYml0ZmllbGRfdG9fYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yYW5kb20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2VzY2FwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcXVvdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA9g0AAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					52,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
						"symkeys":
						[
							[
								341,
								347
							],
							[
								750,
								769
							],
							[
								797,
								811
							],
							[
								923,
								937
							],
							[
								1246,
								1258
							],
							[
								1322,
								1338
							],
							[
								1435,
								1468
							],
							[
								1947,
								1968
							],
							[
								2049,
								2068
							],
							[
								2200,
								2224
							],
							[
								2366,
								2382
							],
							[
								3142,
								3159
							],
							[
								3691,
								3712
							],
							[
								4569,
								4582
							],
							[
								5345,
								5370
							],
							[
								6131,
								6145
							],
							[
								6987,
								7012
							],
							[
								8578,
								8592
							],
							[
								9700,
								9716
							],
							[
								10786,
								10815
							],
							[
								11054,
								11070
							],
							[
								11951,
								11967
							],
							[
								13070,
								13095
							],
							[
								13539,
								13553
							],
							[
								14687,
								14702
							],
							[
								15188,
								15201
							],
							[
								15802,
								15814
							],
							[
								16220,
								16232
							],
							[
								16647,
								16662
							],
							[
								17743,
								17763
							],
							[
								18102,
								18121
							],
							[
								18340,
								18352
							],
							[
								20478,
								20495
							],
							[
								21093,
								21111
							],
							[
								22323,
								22343
							],
							[
								22804,
								22825
							],
							[
								23299,
								23314
							],
							[
								23807,
								23827
							],
							[
								24286,
								24298
							],
							[
								25017,
								25032
							],
							[
								26531,
								26556
							],
							[
								27095,
								27120
							],
							[
								28372,
								28386
							],
							[
								29299,
								29313
							],
							[
								29672,
								29685
							],
							[
								32064,
								32077
							],
							[
								32984,
								32994
							],
							[
								41542,
								41554
							],
							[
								42084,
								42098
							],
							[
								42128,
								42142
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmemmem‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉpcg_state_setseq_64‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉpcg32_random_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_r‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_init_state‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpcg32_random_bounded_divisionless‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bytecode_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_string_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_free_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_topointer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_toarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_slice‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_resizearraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_concat‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_searcharraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_memcpy‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fmemopen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getperformancecounter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_proclink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_procread‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getprototypechain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_hrtime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_uname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_btoa‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atob‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_write_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_read_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_getx‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_valuetype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_evalbinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcode_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_opcodes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_get_bytecode‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_bitfield_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_array_to_bitfield‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_random‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_escape‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_quote‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_misc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA0EAAAICDik4IgIEJVRkZFUl9VVElMU19IIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBNQVhfTlVNICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBNSU5fTlVNICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCiAg4pKhICBhcnJheV9zZWFyY2ggKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKTguKAkyBhcnJheV9jb250YWlucyAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogIOKSoSAgYW5zaV9sZW5ndGggKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBhbnNpX3NraXAgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBhbnNpX3RydW5jYXRlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgYXJyYXlfc2VhcmNoICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgc3RyX2VzY2FwZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGJ5dGVfZXNjYXBlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgYnl0ZV9maW5kYiAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGJ5dGVfZmluZHMgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBieXRlX2VxdWFsICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgZGJ1Zl9hdF9uICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgZGJ1Zl9sYXN0X2xpbmUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBkYnVmX3ByZXBlbmQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBkYnVmX3B1dF9jb2xvcnN0ciAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGRidWZfcHV0X2VzY2FwZWRfcHJlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGRidWZfcHV0X2VzY2FwZWRfdGFibGUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBkYnVmX3B1dF91bmVzY2FwZWRfcHJlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGRidWZfcHV0X2VzY2FwZWQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBkYnVmX3B1dF92YWx1ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGRidWZfcmVzZXJ2ZV9zdGFydCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGRidWZfdG9rZW5fcG9wICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgZGJ1Zl90b2tlbl9wdXNoICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgZGJ1Zl90b3N0cmluZ19mcmVlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgZGJ1Zl9sb2FkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgZGJ1Zl9wdXRtICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgZGJ1Zl9hcHBlbmQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIGRidWZfY291bnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmXzAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX3plcm8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX2dldF9jb2x1bW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBkYnVmX2JpdGZsYWdzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKSniAgbWVtb3J5X2Jsb2NrIDsg4oCUIHR5cGUgZGVjbGFyYXRpb24KICDikp4gIHBvaW50ZXJfcmFuZ2UgOyDigJQgdHlwZSBkZWNsYXJhdGlvbgogIOKSniAgb2Zmc2V0X2xlbmd0aCA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBtZW1vcnlfYmxvY2sgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBNZW1vcnlCbG9jayA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBibG9ja19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYmxvY2tfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGJsb2NrX2xlbmd0aCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGJsb2NrX2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrjigJMgcG9pbnRlcl9yYW5nZSB7IOKApiB9IDsg4oCUIHR5cGUKICDik4kgIFBvaW50ZXJSYW5nZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyByYW5nZV9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcmFuZ2VfZnJvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK44oCTIG9mZnNldF9sZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgb2Zmc2V0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvZmZzZXRfaXNfZGVmYXVsdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG9mZnNldF9kYXRhICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgb2Zmc2V0X3NpemUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvZmZzZXRfYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvZmZzZXRfcmFuZ2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvZmZzZXRfc2xpY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBvZmZzZXRfb2Zmc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYmxvY2tfcmFuZ2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSuOKAkyBJbnB1dEJ1ZmZlciB7IOKApiB9IDsg4oCUIHR5cGUKICDik4kgIElucHV0QnVmZmVyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9mcmVlX2RlZmF1bHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pKhICBqc19pbnB1dF9idWZmZXIgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBqc19pbnB1dF9jaGFycyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGlucHV0X2J1ZmZlcl9jbG9uZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGlucHV0X2J1ZmZlcl92YWxpZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGlucHV0X2J1ZmZlcl9kdW1wICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgaW5wdXRfYnVmZmVyX2ZyZWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBpbnB1dF9idWZmZXJfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9sZW5ndGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnB1dF9idWZmZXJfYmxvY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnB1dF9idWZmZXJfb2Zmc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKSoSAgaW5wdXRfYnVmZmVyX2dldCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGlucHV0X2J1ZmZlcl9wZWVrICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgaW5wdXRfYnVmZmVyX2N1cnJlbnRsaW5lICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAgaW5wdXRfYnVmZmVyX2NvbHVtbiAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9wZWVrYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9nZXRjICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5wdXRfYnVmZmVyX2JlZ2luICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5wdXRfYnVmZmVyX2VuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGlucHV0X2J1ZmZlcl9lb2YgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnB1dF9idWZmZXJfcmVtYWluICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKSoSAganNfb2Zmc2V0X2xlbmd0aCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24AAAAAAAAAAFkIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					53,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								1046,
								1066
							],
							[
								1211,
								1227
							],
							[
								1281,
								1300
							],
							[
								1335,
								1351
							],
							[
								1407,
								1423
							],
							[
								1486,
								1520
							],
							[
								1543,
								1575
							],
							[
								1598,
								1641
							],
							[
								1882,
								1894
							],
							[
								3717,
								3736
							],
							[
								3834,
								3850
							],
							[
								3912,
								3930
							],
							[
								3994,
								4013
							],
							[
								4078,
								4087
							],
							[
								4142,
								4159
							],
							[
								4222,
								4239
							],
							[
								4302,
								4316
							],
							[
								4376,
								4391
							],
							[
								4452,
								4467
							],
							[
								4528,
								4536
							],
							[
								4590,
								4602
							],
							[
								4660,
								4670
							],
							[
								4726,
								4737
							],
							[
								4794,
								4802
							],
							[
								4856,
								4878
							],
							[
								4946,
								4961
							],
							[
								5022,
								5044
							],
							[
								5112,
								5128
							],
							[
								5190,
								5206
							],
							[
								5268,
								5280
							],
							[
								5338,
								5350
							],
							[
								5408,
								5421
							],
							[
								5480,
								5498
							],
							[
								5556,
								5574
							],
							[
								5638,
								5660
							],
							[
								5728,
								5755
							],
							[
								5828,
								5845
							],
							[
								5902,
								5919
							],
							[
								5976,
								5993
							],
							[
								6040,
								6056
							],
							[
								6139,
								6155
							],
							[
								6227,
								6243
							],
							[
								6315,
								6332
							],
							[
								6389,
								6409
							],
							[
								6468,
								6488
							],
							[
								6647,
								6666
							],
							[
								6742,
								6749
							],
							[
								6778,
								6798
							],
							[
								6868,
								6883
							],
							[
								6944,
								6970
							],
							[
								7048,
								7069
							],
							[
								7147,
								7173
							],
							[
								7219,
								7244
							],
							[
								7329,
								7371
							],
							[
								7505,
								7545
							],
							[
								10689,
								10732
							],
							[
								11113,
								11148
							],
							[
								11304,
								11322
							],
							[
								11352,
								11357
							],
							[
								11447,
								11474
							],
							[
								11593,
								11614
							],
							[
								11643,
								11659
							],
							[
								11752,
								11787
							],
							[
								11827,
								11845
							],
							[
								12032,
								12053
							],
							[
								12077,
								12087
							],
							[
								12126,
								12156
							],
							[
								12482,
								12516
							],
							[
								12817,
								12851
							],
							[
								13071,
								13105
							],
							[
								13171,
								13207
							],
							[
								13282,
								13299
							],
							[
								13458,
								13495
							],
							[
								13496,
								13510
							],
							[
								13516,
								13520
							],
							[
								13595,
								13627
							],
							[
								13655,
								13681
							],
							[
								14006,
								14028
							],
							[
								14066,
								14082
							],
							[
								14097,
								14104
							],
							[
								14126,
								14142
							],
							[
								14222,
								14239
							],
							[
								14240,
								14249
							],
							[
								14301,
								14318
							],
							[
								14319,
								14328
							],
							[
								14388,
								14405
							],
							[
								14406,
								14429
							],
							[
								14485,
								14509
							],
							[
								17136,
								17164
							],
							[
								17595,
								17599
							],
							[
								17727,
								17740
							],
							[
								18056,
								18068
							],
							[
								18331,
								18344
							],
							[
								18449,
								18463
							],
							[
								19356,
								19384
							],
							[
								19500,
								19513
							],
							[
								19625,
								19651
							],
							[
								20364,
								20426
							],
							[
								20460,
								20529
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>",
							".extendGenerator = (proto = GeneratorPrototype, def = util.define) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA5CgAAICDikqEgIG1lbW1lbSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK44oCTIHBjZ19zdGF0ZV9zZXRzZXFfNjQgeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBwY2czMl9yYW5kb21fdCA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX3JhbmRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwY2czMl9yYW5kb21fYm91bmRlZF9kaXZpc2lvbmxlc3MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ieXRlY29kZV9mcmVlX2Z1bmMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJyYXlidWZmZXJfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY190b2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19zbGljZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2NvbmNhdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfc2VhcmNoYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX21lbWNweSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZm1lbW9wZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcHJvY2xpbmsgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX3Byb2NyZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaHJ0aW1lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19mbm1hdGNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYnRvYSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvYiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yZWFkX29iamVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfZ2V0eCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19ldmFsYmluYXJ5ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19vcGNvZGVfYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX29wY29kZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2dldF9ieXRlY29kZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfY2xhc3NpZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfYml0ZmllbGRfdG9fYXJyYXkgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19yYW5kb20gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2VzY2FwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfcXVvdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19taXNjX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfbWlzY19pcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAbgUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					54,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
						"symkeys":
						[
							[
								148,
								157
							],
							[
								196,
								205
							],
							[
								247,
								257
							],
							[
								647,
								662
							],
							[
								705,
								725
							],
							[
								788,
								801
							],
							[
								934,
								952
							],
							[
								1073,
								1093
							],
							[
								1965,
								1979
							],
							[
								2233,
								2245
							],
							[
								2367,
								2390
							],
							[
								2521,
								2537
							],
							[
								2778,
								2793
							],
							[
								2967,
								2983
							],
							[
								4117,
								4140
							],
							[
								4950,
								4968
							],
							[
								6021,
								6036
							],
							[
								6992,
								7007
							],
							[
								7867,
								7886
							],
							[
								8599,
								8620
							],
							[
								9910,
								9922
							],
							[
								10869,
								10882
							],
							[
								11506,
								11516
							],
							[
								12119,
								12130
							],
							[
								12666,
								12679
							],
							[
								12958,
								12969
							],
							[
								13831,
								13843
							],
							[
								14781,
								14791
							],
							[
								15413,
								15422
							],
							[
								15844,
								15857
							],
							[
								16455,
								16464
							],
							[
								17451,
								17458
							],
							[
								19712,
								19731
							],
							[
								20172,
								20185
							],
							[
								20337,
								20353
							],
							[
								20539,
								20552
							],
							[
								22809,
								22822
							],
							[
								23411,
								23424
							],
							[
								23749,
								23765
							],
							[
								29500,
								29521
							],
							[
								30186,
								30203
							],
							[
								31108,
								31125
							],
							[
								31561,
								31584
							],
							[
								32072,
								32092
							],
							[
								33699,
								33714
							],
							[
								33909,
								33928
							],
							[
								34223,
								34233
							],
							[
								49510,
								49525
							],
							[
								52065,
								52079
							],
							[
								52109,
								52123
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinet_pton‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉinet_ntop‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉsocketpair‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_socket_async_wait‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_FAIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_SOCKETCALL_RETURN‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉsyscall_return‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockaddr_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtimeval_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉfdset_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpollfd_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉoptval_buf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socketpair‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_poll‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉSocketProperties‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉSocketMethods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_valueof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_async_resolve‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_async_wait‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_adopt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_socket_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockopt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sockets_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBQAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGZ1bmN0aW9uKigpCiAgaXNBbnlBcnJheUJ1ZmZlcih2KQogIGlzQXJyYXlCdWZmZXIodikKICBpc0JpZ0ludDY0QXJyYXkodikKICBpc0JpZ1VpbnQ2NEFycmF5KHYpCiAgaXNEYXRlKHYpCiAgaXNGbG9hdDMyQXJyYXkodikKICBpc0Zsb2F0NjRBcnJheSh2KQogIGlzSW50OEFycmF5KHYpCiAgaXNJbnQxNkFycmF5KHYpCiAgaXNJbnQzMkFycmF5KHYpCiAgaXNNYXAodikKICBpc1Byb21pc2UodikKICBpc1Byb3h5KHYpCiAgaXNSZWdFeHAodikKICBpc1NldCh2KQogIGlzU2hhcmVkQXJyYXlCdWZmZXIodikKICBpc1VpbnQ4QXJyYXkodikKICBpc1VpbnQ4Q2xhbXBlZEFycmF5KHYpCiAgaXNVaW50MTZBcnJheSh2KQogIGlzVWludDMyQXJyYXkodikKICBpc1dlYWtNYXAodikKICBpc1dlYWtTZXQodikKICBpc0RhdGFWaWV3KHYpCiAgaXNCb29sZWFuT2JqZWN0KHYpCiAgaXNBc3luY0Z1bmN0aW9uKHYpCiAgaXNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzQXN5bmNHZW5lcmF0b3JGdW5jdGlvbih2KQogIGlzTnVtYmVyT2JqZWN0KHYpCiAgaXNCaWdJbnRPYmplY3QodikKICBpc1N5bWJvbE9iamVjdCh2KQogIGlzTmF0aXZlRXJyb3IodikKICBpc01hcEl0ZXJhdG9yKHYpCiAgaXNTZXRJdGVyYXRvcih2KQogIGlzU3RyaW5nT2JqZWN0KHYpCiAgaXNBcnJheUJ1ZmZlclZpZXcodikKICBpc0FyZ3VtZW50c09iamVjdCh2KQogIGlzQm94ZWRQcmltaXRpdmUodikKICBpc0dlbmVyYXRvck9iamVjdCh2KQogIGlzVHlwZWRBcnJheSh2KQogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpCiAgaXNPYmplY3QodikKICBoYXNCdWlsdEluKG8sIG0pCiAgZm9ybWF0KC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnMob3B0cywgLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpCiAgYXNzZXJ0KGFjdHVhbCwgZXhwZWN0ZWQsIG1lc3NhZ2UpCiAgc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKQogIHN0YXJ0KCkKICBjbGVhckludGVydmFsKGlkKQogIG1lbW9pemUoZm4pCiAgb25jZShmbiwgdGhpc0FyZywgbWVtb0ZuKQogIGZ1bmN0aW9uKC4uLmFyZ3MpCiAgd2FpdEZvcihtcykKICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIHdlYWtBc3NpZ24ob2JqLCAuLi5hcmdzKQogIGdldENvbnN0cnVjdG9yQ2hhaW4ob2JqKQogIGhhc1Byb3RvdHlwZShvYmosIHByb3RvKQogIGZpbHRlcihzZXEsIHByZWQsIHRoaXNBcmcpCiAgZnVuY3Rpb24qc3BsaXQoYnVmLCAuLi5wb2ludHMpCiAgZ2V0QW5zaVN0eWxlcygpCiAgcmFuZEludCguLi5hcmdzKQAAAAAAAAAAFwgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "quickjs-sockets.c",
			"settings":
			{
				"buffer_size": 52950,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOH0AAAAAAAAtgAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "utils.c",
			"settings":
			{
				"buffer_size": 58492,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB85AAAI3VuZGVmIF9JU09DOTlfU09VUkNFCiNkZWZpbmUgX0lTT0M5OV9TT1VSQ0UgMQoKI2luY2x1ZGUgInV0aWxzLmgiCiNpbmNsdWRlIDxsaXN0Lmg+CiNpbmNsdWRlIDxjdXRpbHMuaD4KI2luY2x1ZGUgInZlY3Rvci5oIgojaW5jbHVkZSA8bGlicmVnZXhwLmg+CiNpbmNsdWRlICJxdWlja2pzLWludGVybmFsLmgiCiNpbmNsdWRlICJidWZmZXItdXRpbHMuaCIKI2luY2x1ZGUgPHRpbWUuaD4KI2luY2x1ZGUgPG1hdGguaD4KI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNsdWRlIDxzaWduYWwuaD4KI2luY2x1ZGUgPHN5cy9zdGF0Lmg+CiNpbmNsdWRlIDxzeXMvdGltZS5oPgojaW5jbHVkZSA8cXVpY2tqcy1saWJjLmg+Cgp2b2lkIHF1aWNrc29ydF9yKHZvaWQqLCBzaXplX3QsIHNpemVfdCwgaW50ICgqKShjb25zdCB2b2lkKiwgY29uc3Qgdm9pZCosIHZvaWQqKSwgdm9pZCopOwppbnQgc3RydmVyc2NtcChjb25zdCBjaGFyKiwgY29uc3QgY2hhciopOwoKI2lmbmRlZiBJTkZJTklUWQojZGVmaW5lIElORklOSVRZIF9fYnVpbHRpbl9pbmYoKQojZW5kaWYKCiNpZmRlZiBVU0VfV09SS0VSCiNpbmNsdWRlIDxwdGhyZWFkLmg+CiNpbmNsdWRlIDxzdGRhdG9taWMuaD4KCnN0YXRpYyBpbnQKYXRvbWljX2FkZF9pbnQoaW50KiBwdHIsIGludCB2KSB7CiAgcmV0dXJuIGF0b21pY19mZXRjaF9hZGQoKF9BdG9taWModWludDMyX3QpKilwdHIsIHYpICsgdjsKfQojZW5kaWYKCiNpZiBkZWZpbmVkKF9fbGludXhfXykgfHwgZGVmaW5lZChfX0FQUExFX18pCnVpbnQ2NF90CnRpbWVfdXModm9pZCkgewogIHN0cnVjdCB0aW1lc3BlYyB0czsKICBjbG9ja19nZXR0aW1lKENMT0NLX01PTk9UT05JQywgJnRzKTsKICByZXR1cm4gKHVpbnQ2NF90KXRzLnR2X3NlYyAqIDEwMDAwMDAgKyAodHMudHZfbnNlYyAvIDEwMDApOwp9CiNlbHNlCi8qIG1vcmUgcG9ydGFibGUsIGJ1dCBkb2VzIG5vdCB3b3JrIGlmIHRoZSBkYXRlIGlzIHVwZGF0ZWQgKi8KdWludDY0X3QKdGltZV91cyh2b2lkKSB7CiAgc3RydWN0IHRpbWV2YWwgdHY7CiAgZ2V0dGltZW9mZGF5KCZ0diwgMCk7CiAgcmV0dXJuIChpbnQ2NF90KXR2LnR2X3NlYyAqIDEwMDAwMDAgKyB0di50dl91c2VjOwp9CiNlbmRpZgoKaW50CnJlZ2V4cF9mbGFnc19mcm9tc3RyaW5nKGNvbnN0IGNoYXIqIHMpIHsKICBpbnQgZmxhZ3MgPSAwOwoKICBpZihzdHJfY29udGFpbnMocywgJ2cnKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX0dMT0JBTDsKICBpZihzdHJfY29udGFpbnMocywgJ2knKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX0lHTk9SRUNBU0U7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICdtJykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19NVUxUSUxJTkU7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICdzJykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19ET1RBTEw7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICd1JykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19VVEYxNjsKICBpZihzdHJfY29udGFpbnMocywgJ3knKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX1NUSUNLWTsKCiAgcmV0dXJuIGZsYWdzOwp9CgppbnQKcmVnZXhwX2ZsYWdzX3Rvc3RyaW5nKGludCBmbGFncywgY2hhciogYnVmKSB7CiAgY2hhciogb3V0ID0gYnVmOwoKICBpZihmbGFncyAmIExSRV9GTEFHX0dMT0JBTCkKICAgICpvdXQrKyA9ICdnJzsKICBpZihmbGFncyAmIExSRV9GTEFHX0lHTk9SRUNBU0UpCiAgICAqb3V0KysgPSAnaSc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19NVUxUSUxJTkUpCiAgICAqb3V0KysgPSAnbSc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19ET1RBTEwpCiAgICAqb3V0KysgPSAncyc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19VVEYxNikKICAgICpvdXQrKyA9ICd1JzsKICBpZihmbGFncyAmIExSRV9GTEFHX1NUSUNLWSkKICAgICpvdXQrKyA9ICd5JzsKCiAgKm91dCA9ICdcMCc7CiAgcmV0dXJuIG91dCAtIGJ1ZjsKfQoKUmVnRXhwCnJlZ2V4cF9mcm9tX2FyZ3YoaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIEpTQ29udGV4dCogY3R4KSB7CiAgUmVnRXhwIHJlID0gezAsIDAsIDB9OwogIGNvbnN0IGNoYXIqIGZsYWdzdHI7CiAgYXNzZXJ0KGFyZ2MgPiAwKTsKICBpZihqc19pc19yZWdleHAoY3R4LCBhcmd2WzBdKSkgewogICAgcmUuc291cmNlID0ganNfZ2V0X3Byb3BlcnR5c3RyX3N0cmluZ2xlbihjdHgsIGFyZ3ZbMF0sICJzb3VyY2UiLCAmcmUubGVuKTsKICAgIHJlLmZsYWdzID0gcmVnZXhwX2ZsYWdzX2Zyb21zdHJpbmcoKGZsYWdzdHIgPSBqc19nZXRfcHJvcGVydHlzdHJfY3N0cmluZyhjdHgsIGFyZ3ZbMF0sICJmbGFncyIpKSk7CiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBmbGFnc3RyKTsKICB9IGVsc2UgewogICAgcmUuc291cmNlID0ganNfdG9zdHJpbmdsZW4oY3R4LCAmcmUubGVuLCBhcmd2WzBdKTsKICAgIGlmKGFyZ2MgPiAxICYmIEpTX0lzU3RyaW5nKGFyZ3ZbMV0pKSB7CiAgICAgIHJlLmZsYWdzID0gcmVnZXhwX2ZsYWdzX2Zyb21zdHJpbmcoKGZsYWdzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCBhcmd2WzFdKSkpOwogICAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBmbGFnc3RyKTsKICAgIH0KICB9CiAgcmV0dXJuIHJlOwp9CgpSZWdFeHAKcmVnZXhwX2Zyb21fZGJ1ZihEeW5CdWYqIGRidWYsIGludCBmbGFncykgewogIFJlZ0V4cCByZSA9IHsoY2hhciopZGJ1Zi0+YnVmLCBkYnVmLT5zaXplLCBmbGFnc307CiAgZGJ1Zi0+YnVmID0gMDsKICBkYnVmLT5hbGxvY2F0ZWRfc2l6ZSA9IDA7CiAgZGJ1Zi0+c2l6ZSA9IDA7CiAgcmV0dXJuIHJlOwp9Cgp1aW50OF90KgpyZWdleHBfY29tcGlsZShSZWdFeHAgcmUsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciBlcnJvcl9tc2dbNjRdOwogIGludCBsZW4gPSAwOwogIHVpbnQ4X3QqIGJ5dGVjb2RlOwogIGlmKCEoYnl0ZWNvZGUgPSBscmVfY29tcGlsZSgmbGVuLCBlcnJvcl9tc2csIHNpemVvZihlcnJvcl9tc2cpLCByZS5zb3VyY2UsIHJlLmxlbiwgcmUuZmxhZ3MsIGN0eCkpKQogICAgSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIkVycm9yIGNvbXBpbGluZyByZWdleCAvJS4qcy86ICVzIiwgKGludClyZS5sZW4sIHJlLnNvdXJjZSwgZXJyb3JfbXNnKTsKCiAgcmV0dXJuIGJ5dGVjb2RlOwp9CgpKU1ZhbHVlCnJlZ2V4cF90b192YWx1ZShSZWdFeHAgcmUsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciBmbGFnc3RyWzMyXSA9IHswfTsKICBzaXplX3QgZmxhZ2xlbiA9IHJlZ2V4cF9mbGFnc190b3N0cmluZyhyZS5mbGFncywgZmxhZ3N0cik7CiAgSlNWYWx1ZUNvbnN0IGFyZ3NbMl0gPSB7SlNfTmV3U3RyaW5nTGVuKGN0eCwgcmUuc291cmNlLCByZS5sZW4pLCBKU19OZXdTdHJpbmdMZW4oY3R4LCBmbGFnc3RyLCBmbGFnbGVuKX07CiAgSlNWYWx1ZSByZWdleCwgY3RvciA9IGpzX2dsb2JhbF9nZXRfc3RyKGN0eCwgIlJlZ0V4cCIpOwogIHJlZ2V4ID0gSlNfQ2FsbENvbnN0cnVjdG9yKGN0eCwgY3RvciwgMiwgYXJncyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CiAgcmV0dXJuIHJlZ2V4Owp9CgppbnQ2NF90CmpzX2FycmF5X2xlbmd0aChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGFycmF5KSB7CiAgaW50NjRfdCBsZW4gPSAtMTsKICBpZihKU19Jc0FycmF5KGN0eCwgYXJyYXkpIHx8IGpzX2lzX3R5cGVkYXJyYXkoYXJyYXkpKSB7CiAgICBKU1ZhbHVlIGxlbmd0aCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgYXJyYXksICJsZW5ndGgiKTsKICAgIEpTX1RvSW50NjQoY3R4LCAmbGVuLCBsZW5ndGgpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgbGVuZ3RoKTsKICB9CiAgcmV0dXJuIGxlbjsKfQoKdm9pZApqc19hcnJheV9jbGVhcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGFycmF5KSB7CiAgaW50NjRfdCBsZW4gPSBqc19hcnJheV9sZW5ndGgoY3R4LCBhcnJheSk7CiAgSlNWYWx1ZSByZXQ7CiAgSlNBdG9tIHNwbGljZSA9IEpTX05ld0F0b20oY3R4LCAic3BsaWNlIik7CiAgSlNWYWx1ZUNvbnN0IGFyZ3NbMl0gPSB7SlNfTmV3SW50NjQoY3R4LCAwKSwgSlNfTmV3SW50NjQoY3R4LCBsZW4pfTsKCiAgcmV0ID0gSlNfSW52b2tlKGN0eCwgYXJyYXksIHNwbGljZSwgMiwgYXJncyk7CiAgSlNfRnJlZUF0b20oY3R4LCBzcGxpY2UpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHJldCk7CgogIGFzc2VydChqc19hcnJheV9sZW5ndGgoY3R4LCBhcnJheSkgPT0gMCk7Cn0KCmNoYXIqKgpqc19hcnJheV90b19hcmd2KEpTQ29udGV4dCogY3R4LCBpbnQqIGFyZ2NwLCBKU1ZhbHVlQ29uc3QgYXJyYXkpIHsKICBpbnQgaSwgbGVuID0ganNfYXJyYXlfbGVuZ3RoKGN0eCwgYXJyYXkpOwogIGNoYXIqKiByZXQgPSBqc19tYWxsb2N6KGN0eCwgc2l6ZW9mKGNoYXIqKSAqIChsZW4gKyAxKSk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIEpTVmFsdWUgaXRlbSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgYXJyYXksIGkpOwogICAgcmV0W2ldID0ganNfdG9zdHJpbmcoY3R4LCBpdGVtKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGl0ZW0pOwogIH0KICBpZihhcmdjcCkKICAgICphcmdjcCA9IGxlbjsKICByZXR1cm4gcmV0Owp9CgppbnQKanNfYXJyYXlfY29weXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhcnJheSwgaW50IG4sIGNoYXIqKiBzdHJhKSB7CiAgaW50IGksIGxlbiA9IE1JTl9OVU0obiwganNfYXJyYXlfbGVuZ3RoKGN0eCwgYXJyYXkpKTsKICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgSlNWYWx1ZSBpdGVtID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBhcnJheSwgaSk7CiAgICBpZihzdHJhW2ldKQogICAgICBqc19mcmVlKGN0eCwgc3RyYVtpXSk7CiAgICBzdHJhW2ldID0ganNfdG9zdHJpbmcoY3R4LCBpdGVtKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGl0ZW0pOwogIH0KICByZXR1cm4gaTsKfQoKaW50CmpzX3N0cnZfY29weXMoSlNDb250ZXh0KiBjdHgsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbiwgY2hhcioqIHN0cmEpIHsKICBpbnQgaSwgbGVuID0gTUlOX05VTShuLCBhcmdjKTsKICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgaWYoIUpTX0lzTnVsbChhcmd2W2ldKSAmJiAhSlNfSXNVbmRlZmluZWQoYXJndltpXSkpCiAgICAgIHN0cmFbaV0gPSBqc190b3N0cmluZyhjdHgsIGFyZ3ZbaV0pOwogICAgZWxzZQogICAgICBzdHJhW2ldID0gMDsKICB9CiAgZm9yKDsgaSA8IG47IGkrKykgc3RyYVtpXSA9IDA7CgogIHJldHVybiBpOwp9CgpKU0F0b20KanNfYXRvbV9mcm9tKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBzdHIpIHsKICBpZihzdHJbMF0gPT0gJ1snKSB7CiAgICBKU1ZhbHVlIG9iaiwgdmFsID0gSlNfVU5ERUZJTkVEOwogICAgSlNBdG9tIHByb3AsIHJldDsKICAgIHNpemVfdCBvYmpsZW4sIHByb3BsZW47CiAgICBvYmpsZW4gPSBzdHJfY2hyKCZzdHJbMV0sICcuJyk7CiAgICBvYmogPSBqc19nbG9iYWxfZ2V0X3N0cl9uKGN0eCwgJnN0clsxXSwgb2JqbGVuKTsKICAgIHByb3BsZW4gPSBzdHJfY2hyKCZzdHJbMSArIG9iamxlbiArIDFdLCAnXScpOwogICAgcHJvcCA9IEpTX05ld0F0b21MZW4oY3R4LCAmc3RyWzEgKyBvYmpsZW4gKyAxXSwgcHJvcGxlbik7CiAgICB2YWwgPSBKU19HZXRQcm9wZXJ0eShjdHgsIG9iaiwgcHJvcCk7CiAgICBKU19GcmVlQXRvbShjdHgsIHByb3ApOwogICAgcmV0ID0gSlNfVmFsdWVUb0F0b20oY3R4LCB2YWwpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsKTsKICAgIHJldHVybiByZXQ7CiAgfQoKICByZXR1cm4gSlNfTmV3QXRvbShjdHgsIHN0cik7Cn0KCnZvaWQKanNfYXRvbV9kdW1wKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSwgRHluQnVmKiBkYiwgQk9PTCBjb2xvcikgewogIGNvbnN0IGNoYXIqIHN0cjsKICBCT09MIGlzX2ludDsKICBzdHIgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgYXRvbSk7CiAgaXNfaW50ID0ganNfYXRvbV9pc2ludChhdG9tKSB8fCBpc19pbnRlZ2VyKHN0cik7CiAgaWYoY29sb3IpCiAgICBkYnVmX3B1dHN0cihkYiwgaXNfaW50ID8gIlx4MWJbMzNtIiA6ICJceDFiWzE7MzBtIik7CgogIGRidWZfcHV0c3RyKGRiLCBzdHIpOwogIGlmKGNvbG9yKQogICAgZGJ1Zl9wdXRzdHIoZGIsICJceDFiWzE7MzZtIik7CgogIGlmKCFpc19pbnQpCiAgICBkYnVmX3ByaW50ZihkYiwgIigweCV4KSIsIGpzX2F0b21fdG9iaW5hcnkoYXRvbSkpOwoKICBpZihjb2xvcikKICAgIGRidWZfcHV0c3RyKGRiLCAiXHgxYlttIik7Cn0KCnVuc2lnbmVkIGludApqc19hdG9tX3RvYmluYXJ5KEpTQXRvbSBhdG9tKSB7CiAgc3NpemVfdCByZXQ7CiAgaWYoanNfYXRvbV9pc2ludChhdG9tKSkgewogICAgcmV0ID0ganNfYXRvbV90b2ludChhdG9tKTsKICAgIHJldCA9IC1yZXQ7CiAgfSBlbHNlIHsKICAgIHJldCA9IGF0b207CiAgfQogIHJldHVybiByZXQ7Cn0KCmNvbnN0IGNoYXIqCmpzX2F0b21fdG9fY3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgc2l6ZV90KiBsZW4sIEpTQXRvbSBhdG9tKSB7CiAgSlNWYWx1ZSB2OwogIGNvbnN0IGNoYXIqIHM7CiAgdiA9IEpTX0F0b21Ub1ZhbHVlKGN0eCwgYXRvbSk7CiAgcyA9IEpTX1RvQ1N0cmluZ0xlbihjdHgsIGxlbiwgdik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdik7CiAgcmV0dXJuIHM7Cn0KCmludDMyX3QKanNfYXRvbV90b2ludDMyKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSkgewogIGlmKCFqc19hdG9tX2lzaW50KGF0b20pKSB7CiAgICBpbnQ2NF90IGkgPSBJTlQ2NF9NSU47CiAgICBqc19hdG9tX3RvaW50NjQoY3R4LCAmaSwgYXRvbSk7CiAgICByZXR1cm4gaTsKICB9CiAgcmV0dXJuIC1hdG9tOwp9CgppbnQKanNfYXRvbV90b2ludDY0KEpTQ29udGV4dCogY3R4LCBpbnQ2NF90KiBpLCBKU0F0b20gYXRvbSkgewogIGludCByZXQ7CiAgSlNWYWx1ZSB2YWx1ZTsKICAqaSA9IElOVDY0X01BWDsKICB2YWx1ZSA9IEpTX0F0b21Ub1ZhbHVlKGN0eCwgYXRvbSk7CiAgcmV0ID0gIUpTX1RvSW50NjQoY3R4LCBpLCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCkJPT0wKanNfYXRvbV9pc19pbmRleChKU0NvbnRleHQqIGN0eCwgaW50NjRfdCogcHZhbCwgSlNBdG9tIGF0b20pIHsKICBKU1ZhbHVlIHZhbHVlOwogIEJPT0wgcmV0ID0gRkFMU0U7CiAgaW50NjRfdCBpbmRleDsKCiAgaWYoYXRvbSAmICgxVSA8PCAzMSkpIHsKICAgICpwdmFsID0gYXRvbSAmICh+KDFVIDw8IDMxKSk7CiAgICByZXR1cm4gVFJVRTsKICB9CgogIHZhbHVlID0gSlNfQXRvbVRvVmFsdWUoY3R4LCBhdG9tKTsKCiAgaWYoSlNfSXNOdW1iZXIodmFsdWUpKSB7CiAgICBKU19Ub0ludDY0KGN0eCwgJmluZGV4LCB2YWx1ZSk7CiAgICByZXQgPSBUUlVFOwogIH0gZWxzZSBpZihKU19Jc1N0cmluZyh2YWx1ZSkpIHsKICAgIGNvbnN0IGNoYXIqIHMgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSk7CiAgICBpZihzWzBdID09ICctJyAmJiBpc19kaWdpdF9jaGFyKHNbc1swXSA9PSAnLSddKSkgewogICAgICBpbmRleCA9IGF0b2kocyk7CiAgICAgIHJldCA9IFRSVUU7CiAgICB9CiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHMpOwogIH0KCiAgaWYocmV0ID09IFRSVUUpCiAgICAqcHZhbCA9IGluZGV4OwoKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2F0b21faXNfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSkgewogIGNvbnN0IGNoYXIqIHN0ciA9IEpTX0F0b21Ub0NTdHJpbmcoY3R4LCBhdG9tKTsKICBCT09MIHJldCA9ICFzdHJjbXAoc3RyLCAibGVuZ3RoIik7CiAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogIHJldHVybiByZXQ7Cn0KCmNvbnN0IGNoYXIqCmpzX2Z1bmN0aW9uX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTQXRvbSBhdG9tOwogIEpTVmFsdWUgc3RyLCBuYW1lLCBhcmdzWzJdLCBpZHg7CiAgY29uc3QgY2hhciogcyA9IDA7CiAgaW50MzJfdCBpID0gLTE7CiAgc3RyID0ganNfdmFsdWVfdG9zdHJpbmcoY3R4LCAiRnVuY3Rpb24iLCB2YWx1ZSk7CiAgYXRvbSA9IEpTX05ld0F0b20oY3R4LCAiaW5kZXhPZiIpOwogIGFyZ3NbMF0gPSBKU19OZXdTdHJpbmcoY3R4LCAiZnVuY3Rpb24gIik7CiAgaWR4ID0gSlNfSW52b2tlKGN0eCwgc3RyLCBhdG9tLCAxLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICBKU19Ub0ludDMyKGN0eCwgJmksIGlkeCk7CiAgaWYoaSAhPSAwKSB7CiAgICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgc3RyKTsKICAgIHJldHVybiAwOwogIH0KICBhcmdzWzBdID0gSlNfTmV3U3RyaW5nKGN0eCwgIigiKTsKICBpZHggPSBKU19JbnZva2UoY3R4LCBzdHIsIGF0b20sIDEsIGFyZ3MpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgYXRvbSA9IEpTX05ld0F0b20oY3R4LCAic3Vic3RyaW5nIik7CiAgYXJnc1swXSA9IEpTX05ld1VpbnQzMihjdHgsIDkpOwogIGFyZ3NbMV0gPSBpZHg7CiAgbmFtZSA9IEpTX0ludm9rZShjdHgsIHN0ciwgYXRvbSwgMiwgYXJncyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3RyKTsKICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIHMgPSBKU19Ub0NTdHJpbmcoY3R4LCBuYW1lKTsKICBKU19GcmVlVmFsdWUoY3R4LCBuYW1lKTsKICByZXR1cm4gczsKfQoKaW50CmpzX2Z1bmN0aW9uX2FyZ2MoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoY3R4LCB2YWx1ZSwgImxlbmd0aCIpOwp9CgpKU0NGdW5jdGlvbioKanNfZnVuY3Rpb25fY2Z1bmMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGlmKGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfQ19GVU5DVElPTikpIHsKICAgIEpTT2JqZWN0KiBvYmogPSBKU19WQUxVRV9HRVRfT0JKKHZhbHVlKTsKICAgIHJldHVybiBvYmotPnUuY2Z1bmMuY19mdW5jdGlvbi5nZW5lcmljOwogIH0KICByZXR1cm4gMDsKfQoKSlNWYWx1ZQpqc19nbG9iYWxfZ2V0X3N0cihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcHJvcCkgewogIEpTVmFsdWUgZ2xvYmFsX29iaiwgcmV0OwogIGdsb2JhbF9vYmogPSBKU19HZXRHbG9iYWxPYmplY3QoY3R4KTsKICByZXQgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGdsb2JhbF9vYmosIHByb3ApOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGdsb2JhbF9vYmopOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfZ2xvYmFsX2dldF9zdHJfbihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcHJvcCwgc2l6ZV90IGxlbikgewogIEpTVmFsdWUgcmV0OwogIEpTQXRvbSBhdG9tID0gSlNfTmV3QXRvbUxlbihjdHgsIHByb3AsIGxlbik7CiAgcmV0ID0ganNfZ2xvYmFsX2dldF9hdG9tKGN0eCwgYXRvbSk7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2dsb2JhbF9nZXRfYXRvbShKU0NvbnRleHQqIGN0eCwgSlNBdG9tIHByb3ApIHsKICBKU1ZhbHVlIGdsb2JhbF9vYmosIHJldDsKICBnbG9iYWxfb2JqID0gSlNfR2V0R2xvYmFsT2JqZWN0KGN0eCk7CiAgcmV0ID0gSlNfR2V0UHJvcGVydHkoY3R4LCBnbG9iYWxfb2JqLCBwcm9wKTsKICBKU19GcmVlVmFsdWUoY3R4LCBnbG9iYWxfb2JqKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2dsb2JhbF9wcm90b3R5cGUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGNsYXNzX25hbWUpIHsKICBKU1ZhbHVlIGN0b3IsIHJldDsKICBjdG9yID0ganNfZ2xvYmFsX2dldF9zdHIoY3R4LCBjbGFzc19uYW1lKTsKICByZXQgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGN0b3IsICJwcm90b3R5cGUiKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2l0ZXJhdG9yX21ldGhvZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaikgewogIEpTQXRvbSBhdG9tOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIGF0b20gPSBqc19zeW1ib2xfc3RhdGljX2F0b20oY3R4LCAiaXRlcmF0b3IiKTsKICBpZihKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSkpCiAgICByZXQgPSBKU19HZXRQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSk7CgogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgaWYoIUpTX0lzRnVuY3Rpb24oY3R4LCByZXQpKSB7CiAgICBhdG9tID0ganNfc3ltYm9sX3N0YXRpY19hdG9tKGN0eCwgImFzeW5jSXRlcmF0b3IiKTsKICAgIGlmKEpTX0hhc1Byb3BlcnR5KGN0eCwgb2JqLCBhdG9tKSkKICAgICAgcmV0ID0gSlNfR2V0UHJvcGVydHkoY3R4LCBvYmosIGF0b20pOwoKICAgIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfaXRlcmF0b3JfbmV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKSB7CiAgSlNWYWx1ZSBmbiwgcmV0OwogIGZuID0ganNfaXRlcmF0b3JfbWV0aG9kKGN0eCwgb2JqKTsKICByZXQgPSBKU19DYWxsKGN0eCwgZm4sIG9iaiwgMCwgMCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZm4pOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfaXRlcmF0b3JfbmV4dChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgQk9PTCogZG9uZV9wKSB7CiAgSlNWYWx1ZSBmbiwgcmVzdWx0LCBkb25lLCB2YWx1ZTsKICBmbiA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAibmV4dCIpOwogIHJlc3VsdCA9IEpTX0NhbGwoY3R4LCBmbiwgb2JqLCAwLCAwKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmbik7CiAgZG9uZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgcmVzdWx0LCAiZG9uZSIpOwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCByZXN1bHQsICJ2YWx1ZSIpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHJlc3VsdCk7CiAgKmRvbmVfcCA9IEpTX1RvQm9vbChjdHgsIGRvbmUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGRvbmUpOwogIHJldHVybiB2YWx1ZTsKfQoKSlNWYWx1ZQpqc19vYmplY3RfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTVmFsdWUgY3RvciA9IEpTX1VOREVGSU5FRDsKICBpZihKU19Jc09iamVjdCh2YWx1ZSkpCiAgICBjdG9yID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB2YWx1ZSwgImNvbnN0cnVjdG9yIik7CiAgcmV0dXJuIGN0b3I7Cn0KCmNoYXIqCmpzX29iamVjdF9jbGFzc25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTVmFsdWUgcHJvdG8sIGN0b3I7CiAgY29uc3QgY2hhciogc3RyOwogIGNoYXIqIG5hbWUgPSAwOwogIGludCBuYW1lbGVuOwogIGN0b3IgPSBqc19vYmplY3RfY29uc3RydWN0b3IoY3R4LCB2YWx1ZSk7CiAgaWYoIUpTX0lzRnVuY3Rpb24oY3R4LCBjdG9yKSkgewogICAgcHJvdG8gPSBKU19HZXRQcm90b3R5cGUoY3R4LCB2YWx1ZSk7CiAgICBjdG9yID0ganNfb2JqZWN0X2NvbnN0cnVjdG9yKGN0eCwgcHJvdG8pOwogIH0KICBpZigoc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgY3RvcikpKSB7CiAgICBpZighc3RybmNtcChzdHIsICJmdW5jdGlvbiAiLCA5KSkgewogICAgICBuYW1lbGVuID0gYnl0ZV9jaHIoc3RyICsgOSwgc3RybGVuKHN0cikgLSA5LCAnKCcpOwogICAgICBuYW1lID0ganNfc3RybmR1cChjdHgsIHN0ciArIDksIG5hbWVsZW4pOwogICAgfQogIH0KICBpZighbmFtZSkgewogICAgaWYoc3RyKQogICAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwogICAgaWYoKHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIEpTX0dldFByb3BlcnR5U3RyKGN0eCwgY3RvciwgIm5hbWUiKSkpKQogICAgICBuYW1lID0ganNfc3RyZHVwKGN0eCwgc3RyKTsKICB9CiAgaWYoc3RyKQogICAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyKTsKICByZXR1cm4gbmFtZTsKfQoKQk9PTApqc19vYmplY3RfZXF1YWxzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYSwgSlNWYWx1ZUNvbnN0IGIpIHsKICBKU1Byb3BlcnR5RW51bSAqYXRvbXNfYSwgKmF0b21zX2I7CiAgdWludDMyX3QgaSwgbmF0b21zX2EsIG5hdG9tc19iOwogIGludDMyX3QgdGEsIHRiOwogIHRhID0ganNfdmFsdWVfdHlwZShjdHgsIGEpOwogIHRiID0ganNfdmFsdWVfdHlwZShjdHgsIGIpOwogIGFzc2VydCh0YSA9PSBUWVBFX09CSkVDVCk7CiAgYXNzZXJ0KHRiID09IFRZUEVfT0JKRUNUKTsKICBpZihKU19HZXRPd25Qcm9wZXJ0eU5hbWVzKGN0eCwgJmF0b21zX2EsICZuYXRvbXNfYSwgYSwgSlNfR1BOX1NUUklOR19NQVNLIHwgSlNfR1BOX1NZTUJPTF9NQVNLIHwgSlNfR1BOX0VOVU1fT05MWSkpCiAgICByZXR1cm4gRkFMU0U7CgogIGlmKEpTX0dldE93blByb3BlcnR5TmFtZXMoY3R4LCAmYXRvbXNfYiwgJm5hdG9tc19iLCBiLCBKU19HUE5fU1RSSU5HX01BU0sgfCBKU19HUE5fU1lNQk9MX01BU0sgfCBKU19HUE5fRU5VTV9PTkxZKSkKICAgIHJldHVybiBGQUxTRTsKCiAgaWYobmF0b21zX2EgIT0gbmF0b21zX2IpCiAgICByZXR1cm4gRkFMU0U7CgogIHF1aWNrc29ydF9yKCZhdG9tc19hLCBuYXRvbXNfYSwgc2l6ZW9mKEpTUHJvcGVydHlFbnVtKSwgJmpzX3Byb3BlbnVtX2NtcCwgY3R4KTsKICBxdWlja3NvcnRfcigmYXRvbXNfYiwgbmF0b21zX2IsIHNpemVvZihKU1Byb3BlcnR5RW51bSksICZqc19wcm9wZW51bV9jbXAsIGN0eCk7CiAgZm9yKGkgPSAwOyBpIDwgbmF0b21zX2E7IGkrKykKICAgIGlmKGF0b21zX2FbaV0uYXRvbSAhPSBhdG9tc19iW2ldLmF0b20pCiAgICAgIHJldHVybiBGQUxTRTsKICByZXR1cm4gVFJVRTsKfQoKaW50CmpzX29iamVjdF9pcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlLCBjb25zdCBjaGFyKiBjbXApIHsKICBpbnQgcmV0OwogIGNvbnN0IGNoYXIqIHN0cjsKICBzdHIgPSBqc19vYmplY3RfdG9zdHJpbmcoY3R4LCB2YWx1ZSk7CiAgcmV0ID0gc3RyY21wKHN0ciwgY21wKSA9PSAwOwogIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cik7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19vYmplY3RfY29uc3RydWN0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgY3RvcikgewogIEpTVmFsdWVDb25zdCBhcmdzW10gPSB7SlNfVU5ERUZJTkVEfTsKICByZXR1cm4gSlNfQ2FsbENvbnN0cnVjdG9yKGN0eCwgY3RvciwgMCwgYXJncyk7Cn0KCkpTVmFsdWUKanNfb2JqZWN0X2Vycm9yKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtZXNzYWdlKSB7CiAgSlNWYWx1ZUNvbnN0IGFyZ3NbXSA9IHtKU19OZXdTdHJpbmcoY3R4LCBtZXNzYWdlKX07CiAgSlNWYWx1ZSByZXQgPSBqc19vYmplY3RfbmV3KGN0eCwgIkVycm9yIiwgMSwgYXJncyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19vYmplY3Rfc3RhY2soSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIGVycm9yID0ganNfb2JqZWN0X2Vycm9yKGN0eCwgIiIpOwogIEpTVmFsdWUgc3RhY2sgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGVycm9yLCAic3RhY2siKTsKICBKU19GcmVlVmFsdWUoY3R4LCBlcnJvcik7CiAgcmV0dXJuIHN0YWNrOwp9CgpKU1ZhbHVlCmpzX29iamVjdF9uZXcoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGNsYXNzX25hbWUsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgSlNWYWx1ZSBjdG9yID0ganNfZ2xvYmFsX2dldF9zdHIoY3R4LCBjbGFzc19uYW1lKTsKICBKU1ZhbHVlIG9iaiA9IEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIGFyZ2MsIGFyZ3YpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGN0b3IpOwogIHJldHVybiBvYmo7Cn0KCkJPT0wKanNfaGFzX3Byb3BlcnR5c3RyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpIHsKICBKU0F0b20gYXRvbTsKICBCT09MIHJldCA9IEZBTFNFOwogIGF0b20gPSBKU19OZXdBdG9tKGN0eCwgc3RyKTsKICByZXQgPSBKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSk7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2dldF9wcm9wZXJ0eXN0cl9ib29sKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpIHsKICBCT09MIHJldCA9IEZBTFNFOwogIEpTVmFsdWUgdmFsdWU7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgc3RyKTsKICBpZighSlNfSXNFeGNlcHRpb24odmFsdWUpKQogICAgcmV0ID0gSlNfVG9Cb29sKGN0eCwgdmFsdWUpOwoKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKY29uc3QgY2hhcioKanNfZ2V0X3Byb3BlcnR5c3RyX2NzdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApIHsKICBKU1ZhbHVlIHZhbHVlOwogIGNvbnN0IGNoYXIqIHJldDsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBwcm9wKTsKICBpZihKU19Jc1VuZGVmaW5lZCh2YWx1ZSkgfHwgSlNfSXNFeGNlcHRpb24odmFsdWUpKQogICAgcmV0dXJuIDA7CgogIHJldCA9IEpTX1RvQ1N0cmluZyhjdHgsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKY29uc3QgY2hhcioKanNfZ2V0X3Byb3BlcnR5c3RyX2NzdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3AsIHNpemVfdCogbGVucCkgewogIEpTVmFsdWUgdmFsdWU7CiAgY29uc3QgY2hhciogcmV0OwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvYmosIHByb3ApOwogIGlmKEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICByZXR1cm4gMDsKCiAgcmV0ID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgbGVucCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9Cgpjb25zdCBjaGFyKgpqc19nZXRfcHJvcGVydHlpbnRfY3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgdWludDMyX3QgcHJvcCkgewogIEpTVmFsdWUgdmFsdWU7CiAgY2hhciogcmV0OwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIHByb3ApOwogIC8qIGlmKEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICAgcmV0dXJuIDA7Ki8KCiAgcmV0ID0ganNfdG9zdHJpbmcoY3R4LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCmludDMyX3QKanNfZ2V0X3Byb3BlcnR5aW50X2ludDMyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCB1aW50MzJfdCBwcm9wKSB7CiAgaW50MzJfdCByZXQ7CiAgSlNWYWx1ZSB2YWx1ZSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgb2JqLCBwcm9wKTsKICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgpjaGFyKgpqc19nZXRfcHJvcGVydHlzdHJfc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBjaGFyKiByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwoKICByZXQgPSBqc190b3N0cmluZyhjdHgsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKY2hhcioKanNfZ2V0X3Byb3BlcnR5c3RyX3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCwgc2l6ZV90KiBsZW5wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBjaGFyKiByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwoKICByZXQgPSBqc190b3N0cmluZ2xlbihjdHgsIGxlbnAsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKaW50MzJfdApqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApIHsKICBKU1ZhbHVlIHZhbHVlOwogIGludDMyX3QgcmV0OwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvYmosIHByb3ApOwogIGlmKEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICByZXR1cm4gMDsKICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9Cgp1aW50NjRfdApqc19nZXRfcHJvcGVydHlzdHJfdWludDY0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICB1aW50NjRfdCByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwogIEpTX1RvSW5kZXgoY3R4LCAmcmV0LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCnZvaWQKanNfc2V0X3Byb3BlcnR5aW50X3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgdWludDMyX3QgaSwgY29uc3QgY2hhciogc3RyKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX05ld1N0cmluZyhjdHgsIHN0cik7CiAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIGksIHZhbHVlKTsKfQoKdm9pZApqc19zZXRfcHJvcGVydHlpbnRfaW50KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCB1aW50MzJfdCBpLCBpbnQzMl90IHZhbHVlKSB7CiAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIGksIEpTX05ld0ludDMyKGN0eCwgdmFsdWUpKTsKfQoKdm9pZApqc19zZXRfcHJvcGVydHlzdHJfc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wLCBjb25zdCBjaGFyKiBzdHIpIHsKICBKU1ZhbHVlIHZhbHVlOwogIHZhbHVlID0gSlNfTmV3U3RyaW5nKGN0eCwgc3RyKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCwgdmFsdWUpOwp9Cgp2b2lkCmpzX3NldF9wcm9wZXJ0eXN0cl9zdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3AsIGNvbnN0IGNoYXIqIHN0ciwgc2l6ZV90IGxlbikgewogIEpTVmFsdWUgdmFsdWU7CiAgdmFsdWUgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCBzdHIsIGxlbik7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvYmosIHByb3AsIHZhbHVlKTsKfQoKaW50CmpzX2dldF9wcm9wZXJ0eWRlc2NyaXB0b3IoSlNDb250ZXh0KiBjdHgsIEpTUHJvcGVydHlEZXNjcmlwdG9yKiBkZXNjLCBKU1ZhbHVlQ29uc3QgdmFsdWUsIEpTQXRvbSBwcm9wKSB7CiAgSlNWYWx1ZSBvYmosIHByb3RvOwogIG9iaiA9IEpTX0R1cFZhbHVlKGN0eCwgdmFsdWUpOwogIGRvIHsKICAgIGlmKEpTX0dldE93blByb3BlcnR5KGN0eCwgZGVzYywgb2JqLCBwcm9wKSA9PSBUUlVFKQogICAgICByZXR1cm4gVFJVRTsKICAgIHByb3RvID0gSlNfR2V0UHJvdG90eXBlKGN0eCwgb2JqKTsKICAgIGlmKEpTX1ZBTFVFX0dFVF9PQkoocHJvdG8pID09IEpTX1ZBTFVFX0dFVF9PQkoob2JqKSkKICAgICAgYnJlYWs7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBvYmopOwogICAgb2JqID0gcHJvdG87CiAgfSB3aGlsZShKU19Jc09iamVjdChvYmopKTsKICByZXR1cm4gRkFMU0U7Cn0KCkpTQ2xhc3NJRApqc19jbGFzc19pZChKU0NvbnRleHQqIGN0eCwgaW50IGlkKSB7CiAgcmV0dXJuIGN0eC0+cnQtPmNsYXNzX2FycmF5W2lkXS5jbGFzc19pZDsKfQoKSlNDbGFzc0lECmpzX2NsYXNzX25ld2lkKHZvaWQpIHsKICBKU0NsYXNzSUQgaWQ7CiAgSlNfTmV3Q2xhc3NJRCgmaWQpOwogIHJldHVybiBpZDsKfQoKSlNDbGFzcyoKanNfY2xhc3NfZ2V0KEpTQ29udGV4dCogY3R4LCBKU0NsYXNzSUQgaWQpIHsKICBKU0NsYXNzKiByZXQgPSAmY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdOwogIHJldHVybiByZXQtPmNsYXNzX2lkID09IGlkID8gcmV0IDogMDsKfQoKSlNDbGFzc0lECmpzX2NsYXNzX2ZpbmQoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBKU0F0b20gYXRvbSA9IEpTX05ld0F0b20oY3R4LCBuYW1lKTsKICBKU1J1bnRpbWUqIHJ0ID0gY3R4LT5ydDsKICBpbnQgaSwgbiA9IHJ0LT5jbGFzc19jb3VudDsKICBmb3IoaSA9IDA7IGkgPCBuOyBpKyspCiAgICBpZihydC0+Y2xhc3NfYXJyYXlbaV0uY2xhc3NfbmFtZSA9PSBhdG9tKQogICAgICByZXR1cm4gaTsKCiAgcmV0dXJuIC0xOwp9CgpKU0F0b20KanNfY2xhc3NfYXRvbShKU0NvbnRleHQqIGN0eCwgSlNDbGFzc0lEIGlkKSB7CiAgSlNBdG9tIGF0b20gPSAwOwogIGlmKGlkID4gMCAmJiBpZCA8IChKU0NsYXNzSUQpY3R4LT5ydC0+Y2xhc3NfY291bnQpCiAgICBhdG9tID0gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX25hbWU7CiAgcmV0dXJuIGF0b207Cn0KCmNvbnN0IGNoYXIqCmpzX2NsYXNzX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTQ2xhc3NJRCBpZCkgewogIEpTQXRvbSBhdG9tID0gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX25hbWU7CiAgcmV0dXJuIEpTX0F0b21Ub0NTdHJpbmcoY3R4LCBhdG9tKTsKfQoKY29uc3QgY2hhcioKanNfb2JqZWN0X3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU1ZhbHVlIHN0ciA9IGpzX3ZhbHVlX3Rvc3RyaW5nKGN0eCwgIk9iamVjdCIsIHZhbHVlKTsKICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgc3RyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogIHJldHVybiBzOwp9Cgpjb25zdCBjaGFyKgpqc19mdW5jdGlvbl90b3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNWYWx1ZSBzdHIgPSBqc192YWx1ZV90b3N0cmluZyhjdHgsICJGdW5jdGlvbiIsIHZhbHVlKTsKICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgc3RyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogIHJldHVybiBzOwp9CgpCT09MCmpzX2Z1bmN0aW9uX2lzbmF0aXZlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBjb25zdCBjaGFyKiBmbiA9IGpzX2Z1bmN0aW9uX3Rvc3RyaW5nKGN0eCwgdmFsdWUpOwogIEJPT0wgcmV0ID0gISFzdHJzdHIoZm4sICJcbiAgICBbbmF0aXZlIGNvZGVdXG4iKTsKICBKU19GcmVlQ1N0cmluZyhjdHgsIGZuKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2lzX2lucHV0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNTdHJpbmcodmFsdWUpIHx8IGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfQVJSQVlfQlVGRkVSKTsKfQoKaW50CmpzX3Byb3BlbnVtX2NtcChjb25zdCB2b2lkKiBhLCBjb25zdCB2b2lkKiBiLCB2b2lkKiBwdHIpIHsKICBKU0NvbnRleHQqIGN0eCA9IHB0cjsKICBjb25zdCBjaGFyICpzdHJhLCAqc3RyYjsKICBpbnQgcmV0OwogIHN0cmEgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgKChjb25zdCBKU1Byb3BlcnR5RW51bSopYSktPmF0b20pOwogIHN0cmIgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgKChjb25zdCBKU1Byb3BlcnR5RW51bSopYiktPmF0b20pOwogIHJldCA9IHN0cnZlcnNjbXAoc3RyYSwgc3RyYik7CiAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYSk7CiAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYik7CiAgcmV0dXJuIHJldDsKfQoKdm9pZApqc19wcm9wZXJ0eWVudW1zX2ZyZWUoSlNDb250ZXh0KiBjdHgsIEpTUHJvcGVydHlFbnVtKiBwcm9wcywgc2l6ZV90IGxlbikgewogIHVpbnQzMl90IGk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIEpTX0ZyZWVBdG9tKGN0eCwgcHJvcHNbaV0uYXRvbSk7CiAgLy8ganNfZnJlZShjdHgsIHByb3BzKTsKfQoKdm9pZApqc19zdHJ2X2ZyZWVfbihKU0NvbnRleHQqIGN0eCwgaW50IG4sIGNoYXIqIGFyZ3ZbXSkgewogIGludCBpOwogIGZvcihpID0gMDsgaSA8IG47IGkrKykgewogICAgaWYoYXJndltpXSkgewogICAgICBqc19mcmVlKGN0eCwgYXJndltpXSk7CiAgICAgIGFyZ3ZbaV0gPSAwOwogICAgfQogIH0KfQoKdm9pZApqc19zdHJ2X2ZyZWUoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgc2l6ZV90IGk7CiAgaWYoc3RydiA9PSAwKQogICAgcmV0dXJuOwoKICBmb3IoaSA9IDA7IHN0cnZbaV07IGkrKykgeyBqc19mcmVlKGN0eCwgc3RydltpXSk7IH0KICBqc19mcmVlKGN0eCwgc3Rydik7Cn0KCnZvaWQKanNfc3Rydl9mcmVlX3J0KEpTUnVudGltZSogcnQsIGNoYXIqKiBzdHJ2KSB7CiAgc2l6ZV90IGk7CiAgaWYoc3RydiA9PSAwKQogICAgcmV0dXJuOwoKICBmb3IoaSA9IDA7IHN0cnZbaV07IGkrKykgeyBqc19mcmVlX3J0KHJ0LCBzdHJ2W2ldKTsgfQogIGpzX2ZyZWVfcnQocnQsIHN0cnYpOwp9CgpKU1ZhbHVlCmpzX3N0cnZfdG9fYXJyYXkoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIGlmKHN0cnYpIHsKICAgIHNpemVfdCBpOwogICAgZm9yKGkgPSAwOyBzdHJ2W2ldOyBpKyspIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdTdHJpbmcoY3R4LCBzdHJ2W2ldKSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCnNpemVfdApqc19zdHJ2X2xlbmd0aChjaGFyKiogc3RydikgewogIHNpemVfdCBpOwogIGZvcihpID0gMDsgc3RydltpXTsgaSsrKSB7fQogIHJldHVybiBpOwp9CgpjaGFyKioKanNfc3Rydl9kdXAoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgY2hhcioqIHJldDsKICBzaXplX3QgaSwgbGVuID0ganNfc3Rydl9sZW5ndGgoc3Rydik7CiAgcmV0ID0ganNfbWFsbG9jKGN0eCwgKGxlbiArIDEpICogc2l6ZW9mKGNoYXIqKSk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsgcmV0W2ldID0ganNfc3RyZHVwKGN0eCwgc3RydltpXSk7IH0KICByZXRbaV0gPSAwOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfaW50dl90b19hcnJheShKU0NvbnRleHQqIGN0eCwgaW50KiBpbnR2KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIGlmKGludHYpIHsKICAgIHNpemVfdCBpOwogICAgZm9yKGkgPSAwOyBpbnR2W2ldOyBpKyspIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdJbnQzMihjdHgsIGludHZbaV0pKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNBdG9tCmpzX3N5bWJvbF9zdGF0aWNfYXRvbShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSkgewogIEpTVmFsdWUgc3ltID0ganNfc3ltYm9sX3N0YXRpY192YWx1ZShjdHgsIG5hbWUpOwogIEpTQXRvbSByZXQgPSBKU19WYWx1ZVRvQXRvbShjdHgsIHN5bSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3ltKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9zdGF0aWNfdmFsdWUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBKU1ZhbHVlIHN5bWJvbF9jdG9yLCByZXQ7CiAgc3ltYm9sX2N0b3IgPSBqc19zeW1ib2xfY3RvcihjdHgpOwogIHJldCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgc3ltYm9sX2N0b3IsIG5hbWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHN5bWJvbF9jdG9yKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9jdG9yKEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIGpzX2dsb2JhbF9nZXRfc3RyKGN0eCwgIlN5bWJvbCIpOwp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9pbnZva2Vfc3RhdGljKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lLCBKU1ZhbHVlQ29uc3QgYXJnKSB7CiAgSlNWYWx1ZSByZXQ7CiAgSlNBdG9tIG1ldGhvZF9uYW1lID0gSlNfTmV3QXRvbShjdHgsIG5hbWUpOwogIHJldCA9IEpTX0ludm9rZShjdHgsIGpzX3N5bWJvbF9jdG9yKGN0eCksIG1ldGhvZF9uYW1lLCAxLCAmYXJnKTsKICBKU19GcmVlQXRvbShjdHgsIG1ldGhvZF9uYW1lKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9mb3IoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN5bV9mb3IpIHsKICBKU1ZhbHVlIGtleSwgc3ltOwogIEpTQXRvbSBhdG9tOwogIGtleSA9IEpTX05ld1N0cmluZyhjdHgsIHN5bV9mb3IpOwogIHN5bSA9IGpzX3N5bWJvbF9pbnZva2Vfc3RhdGljKGN0eCwgImZvciIsIGtleSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwga2V5KTsKICByZXR1cm4gc3ltOwp9CgpKU0F0b20KanNfc3ltYm9sX2Zvcl9hdG9tKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBzeW1fZm9yKSB7CiAgSlNWYWx1ZSBzeW0gPSBqc19zeW1ib2xfZm9yKGN0eCwgc3ltX2Zvcik7CiAgSlNBdG9tIGF0b20gPSBKU19WYWx1ZVRvQXRvbShjdHgsIHN5bSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3ltKTsKICByZXR1cm4gYXRvbTsKfQoKSlNWYWx1ZQpqc19zeW1ib2xfdG9fc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgc3ltKSB7CiAgSlNWYWx1ZSB2YWx1ZSwgc3RyOwogIEpTQXRvbSBhdG9tOwogIHZhbHVlID0ganNfc3ltYm9sX2ludm9rZV9zdGF0aWMoY3R4LCAia2V5Rm9yIiwgc3ltKTsKICBpZighSlNfSXNVbmRlZmluZWQodmFsdWUpKQogICAgcmV0dXJuIHZhbHVlOwoKICBhdG9tID0gSlNfVmFsdWVUb0F0b20oY3R4LCBzeW0pOwogIHN0ciA9IEpTX0F0b21Ub1N0cmluZyhjdHgsIGF0b20pOwogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgcmV0dXJuIHN0cjsKfQoKY29uc3QgY2hhcioKanNfc3ltYm9sX3RvX2NzdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBzeW0pIHsKICBKU1ZhbHVlIHZhbHVlID0ganNfc3ltYm9sX3RvX3N0cmluZyhjdHgsIHN5bSk7CiAgY29uc3QgY2hhciogc3RyOwogIHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHN0cjsKfQoKSlNWYWx1ZSoKanNfdmFsdWVzX2R1cChKU0NvbnRleHQqIGN0eCwgaW50IG52YWx1ZXMsIEpTVmFsdWVDb25zdCogdmFsdWVzKSB7CiAgSlNWYWx1ZSogcmV0ID0ganNfbWFsbG9jel9ydChjdHgtPnJ0LCBzaXplb2YoSlNWYWx1ZSkgKiBudmFsdWVzKTsKICBpbnQgaTsKICBmb3IoaSA9IDA7IGkgPCBudmFsdWVzOyBpKyspIHJldFtpXSA9IEpTX0R1cFZhbHVlUlQoY3R4LT5ydCwgdmFsdWVzW2ldKTsKICByZXR1cm4gcmV0Owp9Ci8qCnZvaWQKanNfdmFsdWVzX2ZyZWUoSlNDb250ZXh0KiBjdHgsIGludCBudmFsdWVzLCBKU1ZhbHVlQ29uc3QqIHZhbHVlcykgewogIGludCBpOwogIGZvcihpID0gMDsgaSA8IG52YWx1ZXM7IGkrKykgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWVzW2ldKTsKICBqc19mcmVlKGN0eCwgdmFsdWVzKTsKfQoqLwp2b2lkCmpzX3ZhbHVlc19mcmVlKEpTUnVudGltZSogcnQsIGludCBudmFsdWVzLCBKU1ZhbHVlQ29uc3QqIHZhbHVlcykgewogIGludCBpOwogIGZvcihpID0gMDsgaSA8IG52YWx1ZXM7IGkrKykgSlNfRnJlZVZhbHVlUlQocnQsIHZhbHVlc1tpXSk7CiAganNfZnJlZV9ydChydCwgdmFsdWVzKTsKfQoKSlNWYWx1ZQpqc192YWx1ZXNfdG9hcnJheShKU0NvbnRleHQqIGN0eCwgaW50IG52YWx1ZXMsIEpTVmFsdWVDb25zdCogdmFsdWVzKSB7CiAgaW50IGk7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIGZvcihpID0gMDsgaSA8IG52YWx1ZXM7IGkrKykgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGksIEpTX0R1cFZhbHVlKGN0eCwgdmFsdWVzW2ldKSk7CiAgcmV0dXJuIHJldDsKfQoKY29uc3QgY2hhcioKanNfdmFsdWVfdHlwZV9uYW1lKGludDMyX3QgdHlwZSkgewogIGludDMyX3QgZmxhZyA9IGpzX3ZhbHVlX3R5cGUyZmxhZyh0eXBlKTsKICBjb25zdCBjaGFyKiBjb25zdCB0eXBlc1tdID0gewogICAgICAiVU5ERUZJTkVEIiwgICAgICIwIiwKICAgICAgIkJPT0wiLCAgICAgICAgICAiSU5UIiwKICAgICAgIk9CSkVDVCIsICAgICAgICAiU1RSSU5HIiwKICAgICAgIlNZTUJPTCIsICAgICAgICAiQklHX0ZMT0FUIiwKICAgICAgIkJJR19JTlQiLCAgICAgICAiQklHX0RFQ0lNQUwiLAogICAgICAiRkxPQVQ2NCIsICAgICAgICJOQU4iLAogICAgICAiRlVOQ1RJT04iLCAgICAgICJBUlJBWSIsCiAgICAgICJNT0RVTEUiLCAgICAgICAgIkZVTkNUSU9OX0JZVEVDT0RFIiwKICAgICAgIlVOSU5JVElBTElaRUQiLCAiQ0FUQ0hfT0ZGU0VUIiwKICAgICAgIkVYQ0VQVElPTiIsCiAgfTsKICBpZihmbGFnID49IDAgJiYgZmxhZyA8IGNvdW50b2YodHlwZXMpKQogICAgcmV0dXJuIHR5cGVzW2ZsYWddOwogIHJldHVybiAwOwp9Cgpjb25zdCBjaGFyKgpqc192YWx1ZV90eXBlc3RyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpbnQzMl90IHR5cGUgPSBqc192YWx1ZV90eXBlKGN0eCwgdmFsdWUpOwogIHJldHVybiBqc192YWx1ZV90eXBlX25hbWUodHlwZSk7Cn0KCkJPT0wKanNfdmFsdWVfaGFzX3JlZl9jb3VudChKU1ZhbHVlIHYpIHsKICByZXR1cm4gKCh1bnNpZ25lZClqc192YWx1ZV90YWcodikgPj0gKHVuc2lnbmVkKUpTX1RBR19GSVJTVCk7Cn0KCmVudW0gdmFsdWVfbWFzawpqc192YWx1ZV90eXBlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpbnQzMl90IGZsYWc7CiAgdWludDMyX3QgdHlwZSA9IDA7CiAgaWYoKGZsYWcgPSBqc192YWx1ZV90eXBlX2dldChjdHgsIHZhbHVlKSkgPT0gLTEpCiAgICByZXR1cm4gMDsKCiAgaWYoZmxhZyA9PSBGTEFHX0FSUkFZIC8qfHwgZmxhZyA9PSBGTEFHX0ZVTkNUSU9OKi8pCiAgICB0eXBlIHw9IFRZUEVfT0JKRUNUOwoKICB0eXBlIHw9IDEgPDwgZmxhZzsKCiAgcmV0dXJuIHR5cGU7Cn0KCmludDMyX3QKanNfdmFsdWVfdHlwZV9nZXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGlmKEpTX0lzQXJyYXkoY3R4LCB2YWx1ZSkpCiAgICByZXR1cm4gRkxBR19BUlJBWTsKCiAgaWYoSlNfSXNGdW5jdGlvbihjdHgsIHZhbHVlKSkKICAgIHJldHVybiBGTEFHX0ZVTkNUSU9OOwoKICBpZihKU19WQUxVRV9JU19OQU4odmFsdWUpKQogICAgcmV0dXJuIEZMQUdfTkFOOwoKICByZXR1cm4ganNfdmFsdWVfdHlwZV9mbGFnKHZhbHVlKTsKfQoKaW50MzJfdApqc192YWx1ZV90eXBlX2ZsYWcoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgc3dpdGNoKEpTX1ZBTFVFX0dFVF9UQUcodmFsdWUpKSB7CiAgICBjYXNlIEpTX1RBR19CSUdfREVDSU1BTDogcmV0dXJuIEZMQUdfQklHX0RFQ0lNQUw7CiAgICBjYXNlIEpTX1RBR19CSUdfSU5UOiByZXR1cm4gRkxBR19CSUdfSU5UOwogICAgY2FzZSBKU19UQUdfQklHX0ZMT0FUOiByZXR1cm4gRkxBR19CSUdfRkxPQVQ7CiAgICBjYXNlIEpTX1RBR19TWU1CT0w6IHJldHVybiBGTEFHX1NZTUJPTDsKICAgIGNhc2UgSlNfVEFHX1NUUklORzogcmV0dXJuIEZMQUdfU1RSSU5HOwogICAgY2FzZSBKU19UQUdfTU9EVUxFOiByZXR1cm4gRkxBR19NT0RVTEU7CiAgICBjYXNlIEpTX1RBR19GVU5DVElPTl9CWVRFQ09ERTogcmV0dXJuIEZMQUdfRlVOQ1RJT05fQllURUNPREU7CiAgICBjYXNlIEpTX1RBR19PQkpFQ1Q6IHJldHVybiBGTEFHX09CSkVDVDsKICAgIGNhc2UgSlNfVEFHX0lOVDogcmV0dXJuIEZMQUdfSU5UOwogICAgY2FzZSBKU19UQUdfQk9PTDogcmV0dXJuIEZMQUdfQk9PTDsKICAgIGNhc2UgSlNfVEFHX05VTEw6IHJldHVybiBGTEFHX05VTEw7CiAgICBjYXNlIEpTX1RBR19VTkRFRklORUQ6IHJldHVybiBGTEFHX1VOREVGSU5FRDsKICAgIGNhc2UgSlNfVEFHX1VOSU5JVElBTElaRUQ6IHJldHVybiBGTEFHX1VOSU5JVElBTElaRUQ7CiAgICBjYXNlIEpTX1RBR19DQVRDSF9PRkZTRVQ6IHJldHVybiBGTEFHX0NBVENIX09GRlNFVDsKICAgIGNhc2UgSlNfVEFHX0VYQ0VQVElPTjogcmV0dXJuIEZMQUdfRVhDRVBUSU9OOwogICAgY2FzZSBKU19UQUdfRkxPQVQ2NDogcmV0dXJuIEZMQUdfRkxPQVQ2NDsKICB9CiAgcmV0dXJuIC0xOwp9Cgp2b2lkCmpzX3ZhbHVlX2ZyZWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgdikgewogIGlmKGpzX3ZhbHVlX2hhc19yZWZfY291bnQodikpIHsKICAgIEpTUmVmQ291bnRIZWFkZXIqIHAgPSAoSlNSZWZDb3VudEhlYWRlciopanNfdmFsdWVfcHRyKHYpOwogICAgaWYocC0+cmVmX2NvdW50ID4gMCkgewogICAgICAtLXAtPnJlZl9jb3VudDsKICAgICAgaWYocC0+cmVmX2NvdW50ID09IDApCiAgICAgICAgX19KU19GcmVlVmFsdWUoY3R4LCB2KTsKICAgIH0KICB9Cn0KCkpTVmFsdWUKanNfdmFsdWVfY2xvbmUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGVudW0gdmFsdWVfbWFzayB0eXBlID0gMSA8PCBqc192YWx1ZV90eXBlX2dldChjdHgsIHZhbHVlKTsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKICBzd2l0Y2godHlwZSkgewogICAgLypjYXNlIFRZUEVfU1RSSU5HOiB7CiAgICAgc2l6ZV90IGxlbjsKICAgICBjb25zdCBjaGFyKiBzdHI7CiAgICAgc3RyID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgJmxlbiwgdmFsdWUpOwogICAgIHJldCA9IEpTX05ld1N0cmluZ0xlbihjdHgsIHN0ciwgbGVuKTsKICAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwogICAgIGJyZWFrOwogICAgIH0qLwogICAgY2FzZSBUWVBFX0lOVDogewogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIEpTX1ZBTFVFX0dFVF9JTlQodmFsdWUpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFRZUEVfRkxPQVQ2NDogewogICAgICByZXQgPSBKU19OZXdGbG9hdDY0KGN0eCwgSlNfVkFMVUVfR0VUX0ZMT0FUNjQodmFsdWUpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFRZUEVfQk9PTDogewogICAgICByZXQgPSBKU19OZXdCb29sKGN0eCwgSlNfVkFMVUVfR0VUX0JPT0wodmFsdWUpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFRZUEVfRlVOQ1RJT046CiAgICBjYXNlIFRZUEVfQVJSQVk6CiAgICBjYXNlIFRZUEVfT0JKRUNUOiB7CiAgICAgIEpTUHJvcGVydHlFbnVtKiB0YWJfYXRvbTsKICAgICAgdWludDMyX3QgdGFiX2F0b21fbGVuOwogICAgICByZXQgPSBKU19Jc0FycmF5KGN0eCwgdmFsdWUpID8gSlNfTmV3QXJyYXkoY3R4KSA6IEpTX05ld09iamVjdChjdHgpOwogICAgICBpZighSlNfR2V0T3duUHJvcGVydHlOYW1lcyhjdHgsICZ0YWJfYXRvbSwgJnRhYl9hdG9tX2xlbiwgdmFsdWUsIEpTX0dQTl9TVFJJTkdfTUFTSyB8IEpTX0dQTl9TWU1CT0xfTUFTSyB8IEpTX0dQTl9FTlVNX09OTFkpKSB7CiAgICAgICAgdWludDMyX3QgaTsKICAgICAgICBmb3IoaSA9IDA7IGkgPCB0YWJfYXRvbV9sZW47IGkrKykgewogICAgICAgICAgSlNWYWx1ZSBwcm9wOwogICAgICAgICAgcHJvcCA9IEpTX0dldFByb3BlcnR5KGN0eCwgdmFsdWUsIHRhYl9hdG9tW2ldLmF0b20pOwogICAgICAgICAgSlNfU2V0UHJvcGVydHkoY3R4LCByZXQsIHRhYl9hdG9tW2ldLmF0b20sIGpzX3ZhbHVlX2Nsb25lKGN0eCwgcHJvcCkpOwogICAgICAgIH0KICAgICAgfQogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVFlQRV9VTkRFRklORUQ6CiAgICBjYXNlIFRZUEVfTlVMTDoKICAgIGNhc2UgVFlQRV9TVFJJTkc6CiAgICBjYXNlIFRZUEVfU1lNQk9MOgogICAgY2FzZSBUWVBFX0JJR19ERUNJTUFMOgogICAgY2FzZSBUWVBFX0JJR19JTlQ6CiAgICBjYXNlIFRZUEVfQklHX0ZMT0FUOiB7CiAgICAgIHJldCA9IEpTX0R1cFZhbHVlKGN0eCwgdmFsdWUpOwogICAgICBicmVhazsKICAgIH0KICAgIGRlZmF1bHQ6IHsKICAgICAgcmV0ID0gSlNfVGhyb3dUeXBlRXJyb3IoY3R4LCAiTm8gc3VjaCB0eXBlOiAlcyAoMHglMDh4KVxuIiwganNfdmFsdWVfdHlwZV9uYW1lKHR5cGUpLCB0eXBlKTsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIHJldHVybiByZXQ7Cn0KCnZvaWQKanNfdmFsdWVfZndyaXRlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsLCBGSUxFKiBmKSB7CiAgRHluQnVmIGRidWYgPSB7MH07CiAgc2l6ZV90IG47CiAganNfZGJ1Zl9pbml0KGN0eCwgJmRidWYpOwogIGpzX3ZhbHVlX2R1bXAoY3R4LCB2YWwsICZkYnVmKTsKICBkYnVmX3B1dGMoJmRidWYsICdcbicpOwogIG4gPSBkYnVmLnNpemU7CiAgZGJ1Zl8wKCZkYnVmKTsKICBmd3JpdGUoZGJ1Zi5idWYsIDEsIG4sIGYpOwogIGZmbHVzaChmKTsKICBkYnVmX2ZyZWUoJmRidWYpOwp9Cgp2b2lkCmpzX3ZhbHVlX2R1bXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgRHluQnVmKiBkYikgewogIGNvbnN0IGNoYXIqIHN0cjsKICBzaXplX3QgbGVuOwogIGlmKEpTX0lzT2JqZWN0KHZhbHVlKSkgewogICAgY29uc3QgY2hhciogc3RyID0ganNfb2JqZWN0X3Rvc3RyaW5nKGN0eCwgdmFsdWUpOwogICAgZGJ1Zl9wdXRzdHIoZGIsIHN0cik7CiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwogICAgaWYoZGItPnNpemUgJiYgZGItPmJ1ZltkYi0+c2l6ZSAtIDFdID09ICdcbicpCiAgICAgIGRiLT5zaXplLS07CiAgfSBlbHNlIHsKICAgIGludCBpc19zdHJpbmcgPSBKU19Jc1N0cmluZyh2YWx1ZSk7CgogICAgaWYoaXNfc3RyaW5nKQogICAgICBkYnVmX3B1dGMoZGIsICciJyk7CgogICAgc3RyID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgJmxlbiwgdmFsdWUpOwogICAgZGJ1Zl9hcHBlbmQoZGIsIChjb25zdCB1aW50OF90KilzdHIsIGxlbik7CgogICAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyKTsKCiAgICBpZihpc19zdHJpbmcpCiAgICAgIGRidWZfcHV0YyhkYiwgJyInKTsKICAgIGVsc2UgaWYoSlNfSXNCaWdGbG9hdCh2YWx1ZSkpCiAgICAgIGRidWZfcHV0YyhkYiwgJ2wnKTsKICAgIGVsc2UgaWYoSlNfSXNCaWdEZWNpbWFsKHZhbHVlKSkKICAgICAgZGJ1Zl9wdXRjKGRiLCAnbScpOwogICAgZWxzZSBpZihKU19Jc0JpZ0ludChjdHgsIHZhbHVlKSkKICAgICAgZGJ1Zl9wdXRjKGRiLCAnbicpOwogIH0KfQoKQk9PTApqc192YWx1ZV9lcXVhbHMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhLCBKU1ZhbHVlQ29uc3QgYikgewogIGludDMyX3QgdGEsIHRiOwogIEJPT0wgcmV0ID0gRkFMU0U7CiAgdGEgPSBqc192YWx1ZV90eXBlKGN0eCwgYSk7CiAgdGIgPSBqc192YWx1ZV90eXBlKGN0eCwgYik7CgogIGlmKHRhICE9IHRiKSB7CiAgICByZXQgPSBGQUxTRTsKICB9IGVsc2UgaWYodGEgJiB0YiAmIChUWVBFX05VTEwgfCBUWVBFX1VOREVGSU5FRCB8IFRZUEVfTkFOKSkgewogICAgcmV0ID0gVFJVRTsKICB9IGVsc2UgaWYodGEgJiB0YiAmIChUWVBFX0JJR19JTlQgfCBUWVBFX0JJR19GTE9BVCB8IFRZUEVfQklHX0RFQ0lNQUwpKSB7CiAgICBjb25zdCBjaGFyICphc3RyLCAqYnN0cjsKCiAgICBhc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYSk7CiAgICBic3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYik7CgogICAgcmV0ID0gIXN0cmNtcChhc3RyLCBic3RyKTsKCiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIGFzdHIpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBic3RyKTsKCiAgfSBlbHNlIGlmKHRhICYgVFlQRV9JTlQpIHsKICAgIGludDMyX3QgaW50YSwgaW50YjsKCiAgICBpbnRhID0gSlNfVkFMVUVfR0VUX0lOVChhKTsKICAgIGludGIgPSBKU19WQUxVRV9HRVRfSU5UKGIpOwogICAgcmV0ID0gaW50YSA9PSBpbnRiOwogIH0gZWxzZSBpZih0YSAmIFRZUEVfQk9PTCkgewogICAgQk9PTCBib29sYSwgYm9vbGI7CgogICAgYm9vbGEgPSAhIUpTX1ZBTFVFX0dFVF9CT09MKGEpOwogICAgYm9vbGIgPSAhIUpTX1ZBTFVFX0dFVF9CT09MKGIpOwogICAgcmV0ID0gYm9vbGEgPT0gYm9vbGI7CgogIH0gZWxzZSBpZih0YSAmIFRZUEVfRkxPQVQ2NCkgewogICAgZG91YmxlIGZsdGEsIGZsdGI7CgogICAgZmx0YSA9IEpTX1ZBTFVFX0dFVF9GTE9BVDY0KGEpOwogICAgZmx0YiA9IEpTX1ZBTFVFX0dFVF9GTE9BVDY0KGIpOwogICAgcmV0ID0gZmx0YSA9PSBmbHRiOwoKICB9IGVsc2UgaWYodGEgJiBUWVBFX09CSkVDVCkgewogICAgcmV0ID0ganNfb2JqZWN0X2VxdWFscyhjdHgsIGEsIGIpOwogICAgLyp2b2lkICpvYmphLCAqb2JqYjsKCiAgICBvYmphID0gSlNfVkFMVUVfR0VUX09CSihhKTsKICAgIG9iamIgPSBKU19WQUxVRV9HRVRfT0JKKGIpOwoKICAgIHJldCA9IG9iamEgPT0gb2JqYjsqLwogIH0gZWxzZSBpZih0YSAmIFRZUEVfU1RSSU5HKSB7CiAgICBjb25zdCBjaGFyICpzdHJhLCAqc3RyYjsKCiAgICBzdHJhID0gSlNfVG9DU3RyaW5nKGN0eCwgYSk7CiAgICBzdHJiID0gSlNfVG9DU3RyaW5nKGN0eCwgYik7CgogICAgcmV0ID0gIXN0cmNtcChzdHJhLCBzdHJiKTsKCiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHJhKTsKICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cmIpOwogIH0KCiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc192YWx1ZV9mcm9tX2NoYXIoSlNDb250ZXh0KiBjdHgsIGludCBjKSB7CiAgdWludDhfdCBidWZbMTZdOwogIHNpemVfdCBsZW4gPSB1bmljb2RlX3RvX3V0ZjgoYnVmLCBjKTsKICByZXR1cm4gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKWJ1ZiwgbGVuKTsKfQoKdm9pZApqc192YWx1ZV9wcmludChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgRHluQnVmIGRidWY7CiAganNfZGJ1Zl9pbml0KGN0eCwgJmRidWYpOwogIGpzX3ZhbHVlX2R1bXAoY3R4LCB2YWx1ZSwgJmRidWYpOwogIGRidWZfMCgmZGJ1Zik7CiAgZnB1dHMoKGNvbnN0IGNoYXIqKWRidWYuYnVmLCBzdGRvdXQpOwogIGRidWZfZnJlZSgmZGJ1Zik7Cn0KCmludApqc192YWx1ZV90b3NpemUoSlNDb250ZXh0KiBjdHgsIHNpemVfdCogc3osIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHVpbnQ2NF90IHU2NCA9IDA7CiAgaW50IHI7CiAgciA9IEpTX1RvSW5kZXgoY3R4LCAmdTY0LCB2YWx1ZSk7CiAgKnN6ID0gdTY0OwogIHJldHVybiByOwp9Cgp2b2lkCmpzX3ZhbHVlX2ZyZWVfcnQoSlNSdW50aW1lKiBydCwgSlNWYWx1ZSB2KSB7CiAgaWYoanNfdmFsdWVfaGFzX3JlZl9jb3VudCh2KSkgewogICAgSlNSZWZDb3VudEhlYWRlciogcCA9IChKU1JlZkNvdW50SGVhZGVyKilqc192YWx1ZV9wdHIodik7CiAgICAtLXAtPnJlZl9jb3VudDsKICAgIGlmKHAtPnJlZl9jb3VudCA9PSAwKQogICAgICBfX0pTX0ZyZWVWYWx1ZVJUKHJ0LCB2KTsKICB9Cn0KCmNoYXIqCmpzX2NzdHJpbmdfcHRyKEpTVmFsdWVDb25zdCB2KSB7CiAgSlNTdHJpbmcqIHA7CgogIGlmKEpTX0lzU3RyaW5nKHYpKSB7CiAgICBwID0gSlNfVkFMVUVfR0VUX1BUUih2KTsKICAgIHJldHVybiAoY2hhciopcC0+dS5zdHI4OwogIH0KICByZXR1cm4gMDsKfQoKY2hhcioKanNfY3N0cmluZ19kdXAoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN0cikgewogIEpTU3RyaW5nKiBwOwogIGlmKCFzdHIpCiAgICByZXR1cm4gMDsKICAvKiBwdXJwb3NlbHkgcmVtb3ZpbmcgY29uc3RuZXNzICovCiAgcCA9IChKU1N0cmluZyopKHZvaWQqKShzdHIgLSBvZmZzZXRvZihKU1N0cmluZywgdSkpOwogIEpTX0R1cFZhbHVlKGN0eCwgSlNfTUtQVFIoSlNfVEFHX1NUUklORywgcCkpOwogIHJldHVybiAoY2hhciopc3RyOwp9CgpKU1ZhbHVlQ29uc3QKanNfY3N0cmluZ192YWx1ZShjb25zdCBjaGFyKiBwdHIpIHsKICBKU1N0cmluZyogcDsKICBpZighcHRyKQogICAgcmV0dXJuIEpTX1VOREVGSU5FRDsKCiAgcCA9IChKU1N0cmluZyopKHZvaWQqKShwdHIgLSBvZmZzZXRvZihKU1N0cmluZywgdSkpOwogIHJldHVybiBKU19NS1BUUihKU19UQUdfU1RSSU5HLCBwKTsKfQoKdm9pZApqc19jc3RyaW5nX2R1bXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgRHluQnVmKiBkYikgewogIGNvbnN0IGNoYXIqIHN0cjsKICBzaXplX3QgbGVuOwoKICBzdHIgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCAmbGVuLCB2YWx1ZSk7CiAgZGJ1Zl9hcHBlbmQoZGIsIChjb25zdCB1aW50OF90KilzdHIsIGxlbik7CgogIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cik7Cn0KCkpTVmFsdWUKanNfbWFwX25ldyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGVudHJpZXMpIHsKICBKU1ZhbHVlIG1hcCwgY3RvciA9IGpzX2dsb2JhbF9nZXRfc3RyKGN0eCwgIk1hcCIpOwogIG1hcCA9IEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIDEsICZlbnRyaWVzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gbWFwOwp9CgpKU1ZhbHVlCm1vZHVsZV9uYW1lKEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewogIGlmKG0tPm1vZHVsZV9uYW1lIDwgY3R4LT5ydC0+YXRvbV9jb3VudCkKICAgIHJldHVybiBKU19BdG9tVG9WYWx1ZShjdHgsIG0tPm1vZHVsZV9uYW1lKTsKCiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKY2hhcioKbW9kdWxlX25hbWVzdHIoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAgY29uc3QgY2hhciogbmFtZSA9IEpTX0F0b21Ub0NTdHJpbmcoY3R4LCBtLT5tb2R1bGVfbmFtZSk7CiAgY2hhciogc3RyID0ganNfc3RyZHVwKGN0eCwgbmFtZSk7CiAgSlNfRnJlZUNTdHJpbmcoY3R4LCBuYW1lKTsKICByZXR1cm4gc3RyOwp9CgpzdGF0aWMgSlNWYWx1ZQpjYWxsX21vZHVsZV9mdW5jKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QqIGFyZ3YsIGludCBtYWdpYywgSlNWYWx1ZSogZGF0YSkgewogIHVuaW9uIHsKICAgIEpTTW9kdWxlSW5pdEZ1bmMqIGluaXRfZnVuYzsKICAgIGludDMyX3QgaVsyXTsKICB9IHU7CgogIHUuaVswXSA9IEpTX1ZBTFVFX0dFVF9JTlQoZGF0YVswXSk7CiAgdS5pWzFdID0gSlNfVkFMVUVfR0VUX0lOVChkYXRhWzFdKTsKCiAgaWYoYXJnYyA+PSAxICYmIEpTX0lzTW9kdWxlKGFyZ3ZbMF0pKQogICAgcmV0dXJuIEpTX05ld0ludDMyKGN0eCwgdS5pbml0X2Z1bmMoY3R4LCBKU19WQUxVRV9HRVRfUFRSKGFyZ3ZbMF0pKSk7CgogIHJldHVybiBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJhcmd1bWVudCAxIG1vZHVsZSBleHBlY3RlZCIpOwp9CgpKU1ZhbHVlCm1vZHVsZV9mdW5jKEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewogIEpTVmFsdWUgZnVuYyA9IEpTX1VOREVGSU5FRDsKICBpZihKU19Jc0Z1bmN0aW9uKGN0eCwgbS0+ZnVuY19vYmopKSB7CiAgICBmdW5jID0gSlNfRHVwVmFsdWUoY3R4LCBtLT5mdW5jX29iaik7CiAgfSBlbHNlIGlmKG0tPmluaXRfZnVuYykgewogICAgdW5pb24gewogICAgICBKU01vZHVsZUluaXRGdW5jKiBpbml0X2Z1bmM7CiAgICAgIGludDMyX3QgaVsyXTsKICAgIH0gdSA9IHttLT5pbml0X2Z1bmN9OwogICAgSlNWYWx1ZUNvbnN0IGRhdGFbMl0gPSB7CiAgICAgICAgSlNfTUtWQUwoSlNfVEFHX0lOVCwgdS5pWzBdKSwKICAgICAgICBKU19NS1ZBTChKU19UQUdfSU5ULCB1LmlbMV0pLAogICAgfTsKICAgIGZ1bmMgPSBKU19OZXdDRnVuY3Rpb25EYXRhKGN0eCwgY2FsbF9tb2R1bGVfZnVuYywgMSwgMCwgMiwgZGF0YSk7CiAgfQogIHJldHVybiBmdW5jOwp9CgpKU1ZhbHVlCm1vZHVsZV9ucyhKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBtLT5tb2R1bGVfbnMpOwp9CgpKU1ZhbHVlCm1vZHVsZV9leHBvcnRzX2ZpbmQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtLCBKU0F0b20gYXRvbSkgewogIHNpemVfdCBpOwogIGZvcihpID0gMDsgaSA8IG0tPmV4cG9ydF9lbnRyaWVzX2NvdW50OyBpKyspIHsKICAgIEpTRXhwb3J0RW50cnkqIGVudHJ5ID0gJm0tPmV4cG9ydF9lbnRyaWVzW2ldOwoKICAgIGlmKGVudHJ5LT5leHBvcnRfbmFtZSA9PSBhdG9tKSB7CiAgICAgIEpTVmFyUmVmKiByZWYgPSBlbnRyeS0+dS5sb2NhbC52YXJfcmVmOwogICAgICBKU1ZhbHVlIGV4cG9ydCA9IHJlZiA/IEpTX0R1cFZhbHVlKGN0eCwgcmVmLT5wdmFsdWUgPyAqcmVmLT5wdmFsdWUgOiByZWYtPnZhbHVlKSA6IEpTX1VOREVGSU5FRDsKICAgICAgcmV0dXJuIGV4cG9ydDsKICAgIH0KICB9CiAgcmV0dXJuIEpTX1VOREVGSU5FRDsKfQoKdm9pZAptb2R1bGVfZXhwb3J0c19nZXQoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtLCBCT09MIHJlbmFtZV9kZWZhdWx0LCBKU1ZhbHVlQ29uc3QgZXhwb3J0cykgewogIEpTQXRvbSBkZWYgPSBKU19OZXdBdG9tKGN0eCwgImRlZmF1bHQiKTsKCiAgc2l6ZV90IGk7CiAgZm9yKGkgPSAwOyBpIDwgbS0+ZXhwb3J0X2VudHJpZXNfY291bnQ7IGkrKykgewogICAgSlNFeHBvcnRFbnRyeSogZW50cnkgPSAmbS0+ZXhwb3J0X2VudHJpZXNbaV07CiAgICBKU1ZhclJlZiogcmVmID0gZW50cnktPnUubG9jYWwudmFyX3JlZjsKICAgIGlmKHJlZikgewogICAgICBKU1ZhbHVlIGV4cG9ydCA9IEpTX0R1cFZhbHVlKGN0eCwgcmVmLT5wdmFsdWUgPyAqcmVmLT5wdmFsdWUgOiByZWYtPnZhbHVlKTsKICAgICAgSlNBdG9tIG5hbWUgPSBlbnRyeS0+ZXhwb3J0X25hbWU7CiAgICAgIGlmKHJlbmFtZV9kZWZhdWx0ICYmIG5hbWUgPT0gZGVmKQogICAgICAgIG5hbWUgPSBtLT5tb2R1bGVfbmFtZTsKICAgICAgSlNfU2V0UHJvcGVydHkoY3R4LCBleHBvcnRzLCBuYW1lLCBleHBvcnQpOwogICAgfQogIH0KICBKU19GcmVlQXRvbShjdHgsIGRlZik7Cn0KCkpTVmFsdWUKbW9kdWxlX2V4cG9ydHMoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtKSB7CiAgSlNWYWx1ZSBleHBvcnRzOwogIGV4cG9ydHMgPSBKU19OZXdPYmplY3RQcm90byhjdHgsIEpTX05VTEwpOwogIG1vZHVsZV9leHBvcnRzX2dldChjdHgsIG0sIEZBTFNFLCBleHBvcnRzKTsKICByZXR1cm4gZXhwb3J0czsKfQoKc3RydWN0IGxpc3RfaGVhZCoKanNfbW9kdWxlc19saXN0KEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuICZjdHgtPmxvYWRlZF9tb2R1bGVzOwp9CgpKU1ZhbHVlCmpzX21vZHVsZXNfYXJyYXkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgc3RydWN0IGxpc3RfaGVhZCogZWw7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIHVpbnQzMl90IGkgPSAwOwogIGxpc3RfZm9yX2VhY2goZWwsICZjdHgtPmxvYWRlZF9tb2R1bGVzKSB7CiAgICBKU01vZHVsZURlZiogbSA9IGxpc3RfZW50cnkoZWwsIEpTTW9kdWxlRGVmLCBsaW5rKTsKICAgIGNoYXIqIHN0ciA9IG1vZHVsZV9uYW1lc3RyKGN0eCwgbSk7CiAgICBKU1ZhbHVlIGVudHJ5ID0gbWFnaWMgPyBtb2R1bGVfZW50cnkoY3R4LCBtKSA6IG1vZHVsZV92YWx1ZShjdHgsIG0pOwogICAgaWYoc3RyWzBdICE9ICc8JykKICAgICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGkrKywgZW50cnkpOwogICAgZWxzZQogICAgICBKU19GcmVlVmFsdWUoY3R4LCBlbnRyeSk7CiAgICBqc19mcmVlKGN0eCwgc3RyKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19tb2R1bGVzX2VudHJpZXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgc3RydWN0IGxpc3RfaGVhZCogZWw7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIHVpbnQzMl90IGkgPSAwOwogIGxpc3RfZm9yX2VhY2goZWwsICZjdHgtPmxvYWRlZF9tb2R1bGVzKSB7CiAgICBKU01vZHVsZURlZiogbSA9IGxpc3RfZW50cnkoZWwsIEpTTW9kdWxlRGVmLCBsaW5rKTsKICAgIGNoYXIqIG5hbWUgPSBtb2R1bGVfbmFtZXN0cihjdHgsIG0pOwogICAgSlNWYWx1ZSBlbnRyeSA9IEpTX05ld0FycmF5KGN0eCk7CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAwLCBKU19OZXdTdHJpbmcoY3R4LCAvKmJhc2VuYW1lKi8gKG5hbWUpKSk7CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAxLCBtYWdpYyA/IG1vZHVsZV9lbnRyeShjdHgsIG0pIDogbW9kdWxlX3ZhbHVlKGN0eCwgbSkpOwogICAgaWYobmFtZVswXSAhPSAnPCcpCiAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpKyssIGVudHJ5KTsKICAgIGVsc2UKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgZW50cnkpOwogICAganNfZnJlZShjdHgsIG5hbWUpOwogIH0KICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX21vZHVsZXNfbWFwKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykgewogIEpTVmFsdWUgbWFwLCBlbnRyaWVzID0ganNfbW9kdWxlc19lbnRyaWVzKGN0eCwgdGhpc192YWwsIG1hZ2ljKTsKICBtYXAgPSBqc19tYXBfbmV3KGN0eCwgZW50cmllcyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZW50cmllcyk7CiAgcmV0dXJuIG1hcDsKfQoKSlNWYWx1ZQpqc19tb2R1bGVzX29iamVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBzdHJ1Y3QgbGlzdF9oZWFkKiBpdDsKICBKU1ZhbHVlIG9iaiA9IEpTX05ld09iamVjdChjdHgpOwogIGxpc3RfZm9yX2VhY2goaXQsICZjdHgtPmxvYWRlZF9tb2R1bGVzKSB7CiAgICBKU01vZHVsZURlZiogbSA9IGxpc3RfZW50cnkoaXQsIEpTTW9kdWxlRGVmLCBsaW5rKTsKICAgIGNoYXIqIG5hbWUgPSBtb2R1bGVfbmFtZXN0cihjdHgsIG0pOwogICAgSlNWYWx1ZSBlbnRyeSA9IG1hZ2ljID8gbW9kdWxlX2VudHJ5KGN0eCwgbSkgOiBtb2R1bGVfdmFsdWUoY3R4LCBtKTsKICAgIGlmKG5hbWVbMF0gIT0gJzwnKQogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgYmFzZW5hbWUobmFtZSksIGVudHJ5KTsKICAgIGVsc2UKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgZW50cnkpOwogICAganNfZnJlZShjdHgsIG5hbWUpOwogIH0KICByZXR1cm4gb2JqOwp9CgpKU1ZhbHVlCm1vZHVsZV92YWx1ZShKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBKU19NS1BUUihKU19UQUdfTU9EVUxFLCBtKSk7Cn0KCkpTVmFsdWUKbW9kdWxlX2VudHJ5KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewogIEpTVmFsdWUgZW50cnkgPSBKU19OZXdBcnJheShjdHgpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgZW50cnksIDAsIG1vZHVsZV9ucyhjdHgsIG0pKTsKICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAxLCBtb2R1bGVfZXhwb3J0cyhjdHgsIG0pKTsKICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAyLCBtb2R1bGVfZnVuYyhjdHgsIG0pKTsKICByZXR1cm4gZW50cnk7Cn0KCkpTVmFsdWUKbW9kdWxlX29iamVjdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG0pIHsKICBKU1ZhbHVlIG5zLCBleHBvcnRzLCBmdW5jLCBvYmogPSBKU19OZXdPYmplY3QoY3R4KTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgIm5hbWUiLCBtb2R1bGVfbmFtZShjdHgsIG0pKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgInJlc29sdmVkIiwgSlNfTmV3Qm9vbChjdHgsIG0tPnJlc29sdmVkKSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvYmosICJmdW5jX2NyZWF0ZWQiLCBKU19OZXdCb29sKGN0eCwgbS0+ZnVuY19jcmVhdGVkKSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvYmosICJpbnN0YW50aWF0ZWQiLCBKU19OZXdCb29sKGN0eCwgbS0+aW5zdGFudGlhdGVkKSk7CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvYmosICJldmFsdWF0ZWQiLCBKU19OZXdCb29sKGN0eCwgbS0+ZXZhbHVhdGVkKSk7CgogIG5zID0gbW9kdWxlX25zKGN0eCwgbSk7CiAgaWYoIUpTX0lzVW5kZWZpbmVkKG5zKSkKICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAibnMiLCBucyk7CiAgZXhwb3J0cyA9IG1vZHVsZV9leHBvcnRzKGN0eCwgbSk7CiAgaWYoIUpTX0lzVW5kZWZpbmVkKGV4cG9ydHMpKQogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvYmosICJleHBvcnRzIiwgbW9kdWxlX2V4cG9ydHMoY3R4LCBtKSk7CiAgZnVuYyA9IG1vZHVsZV9mdW5jKGN0eCwgbSk7CiAgaWYoIUpTX0lzVW5kZWZpbmVkKGZ1bmMpKQogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCBvYmosICJmdW5jIiwgZnVuYyk7CiAgcmV0dXJuIG9iajsKfQoKY2hhcioKanNfbW9kdWxlX3NlYXJjaChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogc2VhcmNoX3BhdGgsIGNvbnN0IGNoYXIqIG1vZHVsZSkgewogIHNpemVfdCBsZW47CiAgY2hhciogcGF0aCA9IDA7CgogIHdoaWxlKCFzdHJuY21wKG1vZHVsZSwgIi4vIiwgMikpIG1vZHVsZSA9IHRyaW1fZG90c2xhc2gobW9kdWxlKTsKICBsZW4gPSBzdHJsZW4obW9kdWxlKTsKCiAgaWYoIXN0cl9jb250YWlucyhtb2R1bGUsICcvJykgfHwgc3RyX2VuZHMobW9kdWxlLCAiLnNvIikpCiAgICBwYXRoID0ganNfbW9kdWxlX3NlYXJjaF9leHQoY3R4LCBzZWFyY2hfcGF0aCwgbW9kdWxlLCAiLnNvIik7CgogIGlmKCFwYXRoKQogICAgcGF0aCA9IGpzX21vZHVsZV9zZWFyY2hfZXh0KGN0eCwgc2VhcmNoX3BhdGgsIG1vZHVsZSwgIi5qcyIpOwoKICByZXR1cm4gcGF0aDsKfQoKY2hhcioKanNfbW9kdWxlX3NlYXJjaF9leHQoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHBhdGgsIGNvbnN0IGNoYXIqIG5hbWUsIGNvbnN0IGNoYXIqIGV4dCkgewogIGNvbnN0IGNoYXIgKnAsICpxOwogIGNoYXIqIGZpbGUgPSAwOwogIHNpemVfdCBpLCBqOwogIHN0cnVjdCBzdGF0IHN0OwoKICBmb3IocCA9IHBhdGg7ICpwOyBwID0gcSkgewogICAgaWYoKHEgPSBzdHJjaHIocCwgJzonKSkgPT0gMCkKICAgICAgcSA9IHAgKyBzdHJsZW4ocCk7CiAgICBpID0gcSAtIHA7CiAgICBmaWxlID0ganNfbWFsbG9jKGN0eCwgaSArIDEgKyBzdHJsZW4obmFtZSkgKyAzICsgMSk7CiAgICBzdHJuY3B5KGZpbGUsIHAsIGkpOwogICAgZmlsZVtpXSA9ICcvJzsKICAgIHN0cmNweSgmZmlsZVtpICsgMV0sIG5hbWUpOwogICAgaiA9IHN0cmxlbihuYW1lKTsKICAgIGlmKCEoaiA+PSAzICYmICFzdHJjbXAoJm5hbWVbaiAtIDNdLCBleHQpKSkKICAgICAgc3RyY3B5KCZmaWxlW2kgKyAxICsgal0sIGV4dCk7CiAgICBpZighc3RhdChmaWxlLCAmc3QpKQogICAgICByZXR1cm4gZmlsZTsKICAgIGpzX2ZyZWUoY3R4LCBmaWxlKTsKICAgIGlmKCpxID09ICc6JykKICAgICAgKytxOwogIH0KICByZXR1cm4gMDsKfQoKY2hhcioKanNfbW9kdWxlX25vcm1hbGl6ZShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcGF0aCwgY29uc3QgY2hhciogbmFtZSwgdm9pZCogb3BhcXVlKSB7CiAgc2l6ZV90IHA7CiAgY29uc3QgY2hhciogcjsKICBEeW5CdWYgZmlsZSA9IHswLCAwLCAwfTsKICBzaXplX3QgbjsKICBpZihuYW1lWzBdICE9ICcuJykKICAgIHJldHVybiBqc19zdHJkdXAoY3R4LCBuYW1lKTsKICBqc19kYnVmX2luaXQoY3R4LCAmZmlsZSk7CiAgbiA9IHBhdGhbKHAgPSBzdHJfcmNocihwYXRoLCAnLycpKV0gPyBwIDogMDsKICBkYnVmX3B1dCgmZmlsZSwgKGNvbnN0IHVpbnQ4X3QqKXBhdGgsIG4pOwogIGRidWZfMCgmZmlsZSk7CiAgZm9yKHIgPSBuYW1lOzspIHsKICAgIGlmKHJbMF0gPT0gJy4nICYmIHJbMV0gPT0gJy8nKSB7CiAgICAgIHIgKz0gMjsKICAgIH0gZWxzZSBpZihyWzBdID09ICcuJyAmJiByWzFdID09ICcuJyAmJiByWzJdID09ICcvJykgewogICAgICBpZihmaWxlLnNpemUgPT0gMCkKICAgICAgICBicmVhazsKICAgICAgaWYoKHAgPSBieXRlX3JjaHIoZmlsZS5idWYsIGZpbGUuc2l6ZSwgJy8nKSkgPCBmaWxlLnNpemUpCiAgICAgICAgcCsrOwogICAgICBlbHNlCiAgICAgICAgcCA9IDA7CiAgICAgIGlmKCFzdHJjbXAoKGNvbnN0IGNoYXIqKSZmaWxlLmJ1ZltwXSwgIi4iKSB8fCAhc3RyY21wKChjb25zdCBjaGFyKikmZmlsZS5idWZbcF0sICIuLiIpKQogICAgICAgIGJyZWFrOwogICAgICBpZihwID4gMCkKICAgICAgICBwLS07CiAgICAgIGZpbGUuc2l6ZSA9IHA7CiAgICAgIHIgKz0gMzsKICAgIH0gZWxzZSB7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICBpZihmaWxlLnNpemUgPT0gMCkKICAgIGRidWZfcHV0YygmZmlsZSwgJy4nKTsKICBkYnVmX3B1dGMoJmZpbGUsICcvJyk7CiAgZGJ1Zl9wdXRzdHIoJmZpbGUsIHIpOwogIGRidWZfMCgmZmlsZSk7CiAgcmV0dXJuIChjaGFyKilmaWxlLmJ1ZjsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9kZWYoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTTW9kdWxlRGVmKiBtID0gMDsKICBpZihKU19Jc1N0cmluZyh2YWx1ZSkpIHsKICAgIGNvbnN0IGNoYXIqIG5hbWUgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSk7CiAgICBtID0ganNfbW9kdWxlX2ZpbmQoY3R4LCBuYW1lKTsKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbmFtZSk7CiAgfSBlbHNlIGlmKEpTX1ZBTFVFX0dFVF9UQUcodmFsdWUpID09IEpTX1RBR19NT0RVTEUpIHsKICAgIG0gPSBKU19WQUxVRV9HRVRfUFRSKHZhbHVlKTsKICB9CiAgcmV0dXJuIG07Cn0KCkpTTW9kdWxlRGVmKgpqc19tb2R1bGVfZmluZChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSkgewogIHN0cnVjdCBsaXN0X2hlYWQqIGVsOwogIHNpemVfdCBuYW1lbGVuID0gc3RybGVuKG5hbWUpOwogIGxpc3RfZm9yX2VhY2goZWwsICZjdHgtPmxvYWRlZF9tb2R1bGVzKSB7CiAgICBKU01vZHVsZURlZiogbSA9IGxpc3RfZW50cnkoZWwsIEpTTW9kdWxlRGVmLCBsaW5rKTsKICAgIGNoYXIgKm4sICpzdHIgPSBtb2R1bGVfbmFtZXN0cihjdHgsIG0pOwogICAgc2l6ZV90IGxlbjsKICAgIG4gPSBiYXNlbmFtZShzdHIpOwogICAgbGVuID0gc3RyX3JjaHIobiwgJy4nKTsKICAgIGlmKCFzdHJjbXAoc3RyLCBuYW1lKSB8fCAhc3RyY21wKG4sIG5hbWUpIHx8IChsZW4gPT0gbmFtZWxlbiAmJiAhc3RybmNtcChuLCBuYW1lLCBsZW4pKSkKICAgICAgcmV0dXJuIG07CiAgICBqc19mcmVlKGN0eCwgc3RyKTsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyB2b2lkCmpzX2ltcG9ydF9kaXJlY3RpdmUoSlNDb250ZXh0KiBjdHgsIEltcG9ydERpcmVjdGl2ZSBpbXAsIER5bkJ1ZiogZGIpIHsKICBCT09MIGhhc19wcm9wID0gaW1wLnByb3AgJiYgaW1wLnByb3BbMF07CiAgQk9PTCBpc19ucyA9IGltcC5zcGVjICYmIGltcC5zcGVjWzBdID09ICcqJzsKICBjb25zdCBjaGFyICp2YXIsICpiYXNlID0gYmFzZW5hbWUoaW1wLnBhdGgpOwogIHNpemVfdCBibGVuID0gc3RyX2NocihiYXNlLCAnLicpOwogIGRidWZfcHV0c3RyKGRiLCAiaW1wb3J0ICIpOwogIGlmKGltcC5zcGVjKSB7CiAgICBkYnVmX3B1dHN0cihkYiwgaW1wLnNwZWMpOwogICAgaWYoaXNfbnMpIHsKICAgICAgaWYoIWltcC5ucykgewogICAgICAgIGNoYXIqIHg7CiAgICAgICAgaW1wLm5zID0ganNfc3RybmR1cChjdHgsIGJhc2UsIGJsZW4pOwogICAgICAgIGZvcih4ID0gKGNoYXIqKWltcC5uczsgKng7IHgrKykKICAgICAgICAgIGlmKCFpc19pZGVudGlmaWVyX2NoYXIoKngpKQogICAgICAgICAgICAqeCA9ICdfJzsKICAgICAgfQogICAgICBkYnVmX3B1dHN0cihkYiwgIiBhcyAiKTsKICAgIH0KICB9CiAgaWYoaW1wLnNwZWMgPT0gMCB8fCBzdHJfZXF1YWwoaW1wLnNwZWMsICJkZWZhdWx0IikpIHsKICAgIGlmKCFpbXAubnMpCiAgICAgIGltcC5ucyA9IGpzX3N0cm5kdXAoY3R4LCBiYXNlLCBibGVuKTsKICB9CiAgaWYoaW1wLm5zKQogICAgZGJ1Zl9wdXRtKGRiLCBpbXAubnMsIDApOwogIGlmKGltcC5wYXRoKQogICAgZGJ1Zl9wdXRtKGRiLCAiIGZyb20gJyIsIGltcC5wYXRoLCAiJyIsIDApOwogIGlmKCEodmFyID0gaW1wLnZhcikpCiAgICBpZighKHZhciA9IGltcC5ucykpCiAgICAgIHZhciA9IGltcC5zcGVjOwogIGRidWZfcHV0c3RyKGRiLCAiO1xuIik7CgogIGlmKChoYXNfcHJvcCB8fCBpc19ucykgJiYgdmFyWzBdICE9ICcqJykgewogICAgZGJ1Zl9wdXRtKGRiLCAiZ2xvYmFsVGhpcy4iLCB2YXIsICIgPSAiLCBpbXAubnMgPyBpbXAubnMgOiBpbXAuc3BlYywgaW1wLnByb3AgJiYgKmltcC5wcm9wID8gIi4iIDogMCwgaW1wLnByb3AsIDApOwogIH0gZWxzZSB7CiAgICBkYnVmX3B1dG0oZGIsICJPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsICIsIGltcC5ucyA/IGltcC5ucyA6IGltcC5zcGVjLCAwKTsKICAgIGRidWZfcHV0YyhkYiwgJyknKTsKICB9CiAgZGJ1Zl9wdXRtKGRiLCAiOyIsIDApOwogIGRidWZfMChkYik7Cn0KCkpTVmFsdWUKanNfaW1wb3J0X2xvYWQoSlNDb250ZXh0KiBjdHgsIEltcG9ydERpcmVjdGl2ZSBpbXApIHsKICBEeW5CdWYgYnVmOwogIGNoYXIqIGNvZGU7CiAganNfZGJ1Zl9pbml0KGN0eCwgJmJ1Zik7CiAganNfaW1wb3J0X2RpcmVjdGl2ZShjdHgsIGltcCwgJmJ1Zik7CiAgY29kZSA9IHN0cl9lc2NhcGUoKGNvbnN0IGNoYXIqKWJ1Zi5idWYpOwogIHByaW50ZigianNfaW1wb3J0X2V2YWw6ICclcydcbiIsIGNvZGUpOwogIGZyZWUoY29kZSk7CiAgcmV0dXJuIEpTX0V2YWwoY3R4LCBidWYuYnVmLCBidWYuc2l6ZSwgaW1wLmFyZ3NbMF0sIEpTX0VWQUxfVFlQRV9NT0RVTEUgfCBKU19FVkFMX0ZMQUdfQ09NUElMRV9PTkxZKTsKfQoKSlNWYWx1ZQpqc19pbXBvcnRfZXZhbChKU0NvbnRleHQqIGN0eCwgSW1wb3J0RGlyZWN0aXZlIGltcCkgewogIER5bkJ1ZiBidWY7CiAgY2hhciogY29kZTsKICBqc19kYnVmX2luaXQoY3R4LCAmYnVmKTsKICBqc19pbXBvcnRfZGlyZWN0aXZlKGN0eCwgaW1wLCAmYnVmKTsKICBjb2RlID0gc3RyX2VzY2FwZSgoY29uc3QgY2hhciopYnVmLmJ1Zik7CiAgcHJpbnRmKCJqc19pbXBvcnRfZXZhbDogJyVzJ1xuIiwgY29kZSk7CiAgZnJlZShjb2RlKTsKICByZXR1cm4ganNfZXZhbF9idWYoY3R4LCBidWYuYnVmLCBidWYuc2l6ZSwgaW1wLmFyZ3NbMF0sIEpTX0VWQUxfVFlQRV9NT0RVTEUpOwp9CgpKU01vZHVsZURlZioKanNfbW9kdWxlX2ltcG9ydF9kZWZhdWx0KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBwYXRoLCBjb25zdCBjaGFyKiB2YXIpIHsKICBqc19pbXBvcnRfZXZhbChjdHgsCiAgICAgICAgICAgICAgICAgKEltcG9ydERpcmVjdGl2ZSl7CiAgICAgICAgICAgICAgICAgICAgIC5wYXRoID0gcGF0aCwKICAgICAgICAgICAgICAgICAgICAgLnNwZWMgPSAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAgICAgIC5ucyA9IDAsCiAgICAgICAgICAgICAgICAgICAgIC5wcm9wID0gImRlZmF1bHQiLAogICAgICAgICAgICAgICAgICAgICAudmFyID0gMCwKICAgICAgICAgICAgICAgICB9KTsKICByZXR1cm4ganNfbW9kdWxlX2ZpbmQoY3R4LCBwYXRoKTsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9pbXBvcnRfbmFtZXNwYWNlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBwYXRoLCBjb25zdCBjaGFyKiBucykgewogIGpzX2ltcG9ydF9ldmFsKGN0eCwKICAgICAgICAgICAgICAgICAoSW1wb3J0RGlyZWN0aXZlKXsKICAgICAgICAgICAgICAgICAgICAgLnBhdGggPSBwYXRoLAogICAgICAgICAgICAgICAgICAgICAuc3BlYyA9ICIqIiwKICAgICAgICAgICAgICAgICAgICAgLm5zID0gbnMsCiAgICAgICAgICAgICAgICAgICAgIC5wcm9wID0gMCwKICAgICAgICAgICAgICAgICAgICAgLnZhciA9IDAsCiAgICAgICAgICAgICAgICAgfSk7CiAgcmV0dXJuIGpzX21vZHVsZV9maW5kKGN0eCwgcGF0aCk7Cn0KCkpTVmFsdWUKanNfbW9kdWxlX2ltcG9ydChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcGF0aCwgY29uc3QgY2hhciogbnMsIGNvbnN0IGNoYXIqIHZhciwgY29uc3QgY2hhciogcHJvcCkgewogIER5bkJ1ZiBidWY7CiAgY29uc3QgY2hhciogbmFtZTsKICBzaXplX3QgbGVuLCBuc2xlbjsKICBuYW1lID0gYmFzZW5hbWUocGF0aCk7CiAgbGVuID0gMDsKICB3aGlsZShuYW1lW2xlbl0gJiYgaXNfaWRlbnRpZmllcl9jaGFyKG5hbWVbbGVuXSkpICsrbGVuOwogIG5zbGVuID0gbnMgPyBzdHJsZW4obnMpIDogbGVuOwogIG5zID0gbnMgPyBqc19zdHJkdXAoY3R4LCBucykgOiBqc19zdHJuZHVwKGN0eCwgbmFtZSwgbGVuKTsKICBqc19kYnVmX2luaXQoY3R4LCAmYnVmKTsKICBkYnVmX3ByaW50ZigmYnVmLCAiaW1wb3J0ICVzJXMgZnJvbSAnJXMnOyBnbG9iYWxUaGlzLiVzID0gJXMiLCBucyA/ICIqIGFzICIgOiAiIiwgbnMsIHBhdGgsIHZhciA/IHZhciA6IG5zLCBucyk7CgogIGlmKHByb3AgJiYgKnByb3ApIHsKICAgIGRidWZfcHV0YygmYnVmLCAnLicpOwogICAgZGJ1Zl9wdXRzdHIoJmJ1ZiwgcHJvcCk7CiAgfQogIGRidWZfcHV0YygmYnVmLCAnOycpOwogIGRidWZfMCgmYnVmKTsKICBwcmludGYoImpzX21vZHVsZV9pbXBvcnQ6ICclcydcbiIsIGJ1Zi5idWYpOwogIHJldHVybiBqc19ldmFsX2J1ZihjdHgsIGJ1Zi5idWYsIGJ1Zi5zaXplLCAwLCBKU19FVkFMX1RZUEVfTU9EVUxFKTsKfQoKLypKU01vZHVsZURlZioKanNfbW9kdWxlX2xvYWRlcl9zbyhKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlKSB7CiAgSlNNb2R1bGVEZWYqIG07CiAgSlNNb2R1bGVMb2FkZXJGdW5jKiBpbml0OwogIHZvaWQqIGhkOwogIGNoYXIqIGZpbGU7CiAgc3RhdGljIGNvbnN0IGNoYXIqIGVycm9yc1szXSA9IHsiZGxvcGVuKCkgZmFpbGVkIiwgImpzX2luaXRfbW9kdWxlIG5vdCBmb3VuZCIsICJpbml0aWFsaXphdGlvbiBlcnJvciJ9OwogIGlmKCFzdHJjaHIobW9kdWxlLCAnLycpKSB7CiAgICBpZighKGZpbGUgPSBqc19tYWxsb2MoY3R4LCBzdHJsZW4obW9kdWxlKSArIDIgKyAxKSkpCiAgICAgIHJldHVybiAwOwogICAgc3RyY3B5KGZpbGUsICIuLyIpOwogICAgc3RyY3B5KGZpbGUgKyAyLCBtb2R1bGUpOwogIH0gZWxzZSB7CiAgICBmaWxlID0gKGNoYXIqKW1vZHVsZTsKICB9CiAgaGQgPSBkbG9wZW4oZmlsZSwgUlRMRF9OT1cgfCBSVExEX0xPQ0FMKTsKICBpZihmaWxlICE9IG1vZHVsZSkKICAgIGpzX2ZyZWUoY3R4LCBmaWxlKTsKICBpZihoZCkgewogICAgaWYoKGluaXQgPSBkbHN5bShoZCwgImpzX2luaXRfbW9kdWxlIikpKSB7CiAgICAgIGlmKCEobSA9IGluaXQoY3R4LCBtb2R1bGUsIDApKSkgewogICAgICAgIEpTX1Rocm93UmVmZXJlbmNlRXJyb3IoY3R4LCAiY291bGQgbm90IGxvYWQgbW9kdWxlIGZpbGUgJyVzJzogJXMiLCBlcnJvcnNbMl0pOwogICAgICAgIGdvdG8gZmFpbDsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgSlNfVGhyb3dSZWZlcmVuY2VFcnJvcihjdHgsICJjb3VsZCBub3QgbG9hZCBtb2R1bGUgZmlsZSAnJXMnOiAlcyIsIGVycm9yc1sxXSk7CiAgICAgIGdvdG8gZmFpbDsKICAgIH0KICB9IGVsc2UgewogICAgSlNfVGhyb3dSZWZlcmVuY2VFcnJvcihjdHgsICJjb3VsZCBub3QgbG9hZCBtb2R1bGUgZmlsZSAnJXMnOiAlczogJXMiLCBtb2R1bGUsIGVycm9yc1swXSwgZGxlcnJvcigpKTsKICAgIGdvdG8gZmFpbDsKICB9CiAgcmV0dXJuIG07CmZhaWw6CiAgaWYoaGQpCiAgICBkbGNsb3NlKGhkKTsKICByZXR1cm4gMDsKfSovCgpCT09MCmpzX2lzX2FycmF5YnVmZmVyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBCT09MIHJldCA9IEZBTFNFOwogIGlmKCFKU19Jc09iamVjdCh2YWx1ZSkpCiAgICByZXR1cm4gcmV0OwogIGlmKCFyZXQpCiAgICByZXQgfD0ganNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19BUlJBWV9CVUZGRVIpOwogIGlmKCFyZXQpCiAgICByZXQgfD0ganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IEFycmF5QnVmZmVyXSIpOwogIC8qICBpZighcmV0KSB7CiAgICAgIEpTT2JqZWN0KiBvYmo7CiAgICAgIGlmKChvYmogPSBqc192YWx1ZV9vYmoodmFsdWUpKSAmJiBvYmotPmNsYXNzX2lkKSB7CiAgICAgICAgSlNWYWx1ZSBjdG9yID0ganNfZ2xvYmFsX2dldF9zdHIoY3R4LCAiQXJyYXlCdWZmZXIiKTsKICAgICAgICByZXQgPSBKU19Jc0luc3RhbmNlT2YoY3R4LCB2YWx1ZSwgY3Rvcik7CiAgICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgY3Rvcik7CiAgICAgIH0KICAgIH0qLwogIHJldHVybiByZXQ7Cn0KCkJPT0wKanNfaXNfc2hhcmVkYXJyYXlidWZmZXIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19Jc09iamVjdCh2YWx1ZSkgJiYgKGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfU0hBUkVEX0FSUkFZX0JVRkZFUikvKiB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBTaGFyZWRBcnJheUJ1ZmZlcl0iKSovKTsKfQoKQk9PTApqc19pc19tYXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19Jc09iamVjdCh2YWx1ZSkgJiYgKGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfTUFQKSAvKnx8IGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBNYXBdIikqLyk7Cn0KCkJPT0wKanNfaXNfc2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX1NFVCkgLyogfHwganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IFNldF0iKSovKTsKfQoKQk9PTApqc19pc19nZW5lcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19Jc09iamVjdCh2YWx1ZSkgJiYgKGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfR0VORVJBVE9SKSAvKnx8IGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBHZW5lcmF0b3JdIikqLyk7Cn0KCkJPT0wKanNfaXNfcmVnZXhwKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX1JFR0VYUCkgLyp8fCBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgUmVnRXhwXSIpKi8pOwp9CgpCT09MCmpzX2lzX3Byb21pc2UoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19Jc09iamVjdCh2YWx1ZSkgJiYgKGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfUFJPTUlTRSkgfHwganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IFByb21pc2VdIikpOwp9CgpCT09MCmpzX2lzX2RhdGF2aWV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX0RBVEFWSUVXKSAvKnx8IGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBEYXRhVmlld10iKSovKTsKfQoKQk9PTApqc19pc19pdGVyYWJsZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaikgewogIEpTQXRvbSBhdG9tOwogIEJPT0wgcmV0ID0gRkFMU0U7CiAgYXRvbSA9IGpzX3N5bWJvbF9zdGF0aWNfYXRvbShjdHgsICJpdGVyYXRvciIpOwogIGlmKEpTX0hhc1Byb3BlcnR5KGN0eCwgb2JqLCBhdG9tKSkKICAgIHJldCA9IFRSVUU7CgogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgaWYoIXJldCkgewogICAgYXRvbSA9IGpzX3N5bWJvbF9zdGF0aWNfYXRvbShjdHgsICJhc3luY0l0ZXJhdG9yIik7CiAgICBpZihKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSkpCiAgICAgIHJldCA9IFRSVUU7CgogICAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKQk9PTApqc19pc19pdGVyYXRvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaikgewogIGlmKEpTX0lzT2JqZWN0KG9iaikpIHsKICAgIEpTVmFsdWUgbmV4dCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAibmV4dCIpOwoKICAgIGlmKEpTX0lzRnVuY3Rpb24oY3R4LCBuZXh0KSkKICAgICAgcmV0dXJuIFRSVUU7CiAgfQogIHJldHVybiBGQUxTRTsKfQoKSlNWYWx1ZQpqc190eXBlZGFycmF5X3Byb3RvdHlwZShKU0NvbnRleHQqIGN0eCkgewogIEpTVmFsdWUgdThhcnJfcHJvdG8gPSBqc19nbG9iYWxfcHJvdG90eXBlKGN0eCwgIlVpbnQ4QXJyYXkiKTsKICBKU1ZhbHVlIHR5cGVkYXJyX3Byb3RvID0gSlNfR2V0UHJvdG90eXBlKGN0eCwgdThhcnJfcHJvdG8pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHU4YXJyX3Byb3RvKTsKICByZXR1cm4gdHlwZWRhcnJfcHJvdG87Cn0KCkpTVmFsdWUKanNfdHlwZWRhcnJheV9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCkgewogIEpTVmFsdWUgdHlwZWRhcnJfcHJvdG8gPSBqc190eXBlZGFycmF5X3Byb3RvdHlwZShjdHgpOwogIEpTVmFsdWUgdHlwZWRhcnJfY3RvciA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgdHlwZWRhcnJfcHJvdG8sICJjb25zdHJ1Y3RvciIpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHR5cGVkYXJyX3Byb3RvKTsKICByZXR1cm4gdHlwZWRhcnJfY3RvcjsKfQoKSlNWYWx1ZQpqc19pbnZva2UoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX29iaiwgY29uc3QgY2hhciogbWV0aG9kLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIEpTQXRvbSBhdG9tOwogIEpTVmFsdWUgcmV0OwogIGF0b20gPSBKU19OZXdBdG9tKGN0eCwgbWV0aG9kKTsKICByZXQgPSBKU19JbnZva2UoY3R4LCB0aGlzX29iaiwgYXRvbSwgYXJnYywgYXJndik7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9vcGVyYXRvcnNldF92YWx1ZShKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBqc19zeW1ib2xfc3RhdGljX3ZhbHVlKGN0eCwgIm9wZXJhdG9yU2V0Iik7Cn0KCkpTQXRvbQpqc19zeW1ib2xfb3BlcmF0b3JzZXRfYXRvbShKU0NvbnRleHQqIGN0eCkgewogIEpTVmFsdWUgb3BlcmF0b3Jfc2V0ID0ganNfc3ltYm9sX29wZXJhdG9yc2V0X3ZhbHVlKGN0eCk7CiAgSlNBdG9tIGF0b20gPSBKU19WYWx1ZVRvQXRvbShjdHgsIG9wZXJhdG9yX3NldCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb3BlcmF0b3Jfc2V0KTsKICByZXR1cm4gYXRvbTsKfQoKSlNWYWx1ZQpqc19vcGVyYXRvcnNfY3JlYXRlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlKiB0aGlzX29iaikgewogIEpTVmFsdWUgb3BlcmF0b3JzID0ganNfZ2xvYmFsX2dldF9zdHIoY3R4LCAiT3BlcmF0b3JzIik7CiAgSlNWYWx1ZSBjcmVhdGVfZnVuID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvcGVyYXRvcnMsICJjcmVhdGUiKTsKICBpZih0aGlzX29iaikKICAgICp0aGlzX29iaiA9IG9wZXJhdG9yczsKICBlbHNlCiAgICBKU19GcmVlVmFsdWUoY3R4LCBvcGVyYXRvcnMpOwogIHJldHVybiBjcmVhdGVfZnVuOwp9CgpKU1ZhbHVlCmpzX251bWJlcl9uZXcoSlNDb250ZXh0KiBjdHgsIGludDMyX3QgbikgewogIGlmKG4gPT0gSU5UMzJfTUFYKQogICAgcmV0dXJuIEpTX05ld0Zsb2F0NjQoY3R4LCBJTkZJTklUWSk7CgogIHJldHVybiBKU19OZXdJbnQzMihjdHgsIG4pOwp9CgpKU1ZhbHVlCmpzX2RhdGVfbmV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYXJnKSB7CiAgSlNWYWx1ZSBjdG9yID0ganNfZ2xvYmFsX2dldF9zdHIoY3R4LCAiRGF0ZSIpOwogIEpTVmFsdWUgcmV0ID0gSlNfQ2FsbENvbnN0cnVjdG9yKGN0eCwgY3RvciwgMSwgJmFyZyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY3Rvcik7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19kYXRlX2Zyb21fbXMoSlNDb250ZXh0KiBjdHgsIGludDY0X3QgbXMpIHsKICBKU1ZhbHVlIGFyZyA9IEpTX05ld0ludDY0KGN0eCwgbXMpOwogIEpTVmFsdWUgcmV0ID0ganNfZGF0ZV9uZXcoY3R4LCBhcmcpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZyk7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19kYXRlX2Zyb21fdGltZV9ucyhKU0NvbnRleHQqIGN0eCwgdGltZV90IHQsIGxvbmcgbnMpIHsKICByZXR1cm4ganNfZGF0ZV9mcm9tX21zKGN0eCwgdCAqIDEwMDB1bGwgKyBucyAvIDEwMDAwMDB1bGwpOwp9CgpKU1ZhbHVlCmpzX2RhdGVfZnJvbV90aW1lc3BlYyhKU0NvbnRleHQqIGN0eCwgY29uc3Qgc3RydWN0IHRpbWVzcGVjIHRzKSB7CiAgcmV0dXJuIGpzX2RhdGVfZnJvbV90aW1lX25zKGN0eCwgdHMudHZfc2VjLCB0cy50dl9uc2VjKTsKfQoKaW50NjRfdApqc19kYXRlX2dldHRpbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhcmcpIHsKICBpbnQ2NF90IHIgPSAtMTsKICBKU0F0b20gbWV0aG9kID0gSlNfTmV3QXRvbShjdHgsICJnZXRUaW1lIik7CiAgSlNWYWx1ZSB2YWx1ZSA9IEpTX0ludm9rZShjdHgsIGFyZywgbWV0aG9kLCAwLCAwKTsKICBKU19GcmVlQXRvbShjdHgsIG1ldGhvZCk7CiAgaWYoSlNfSXNOdW1iZXIodmFsdWUpKQogICAgSlNfVG9JbnQ2NChjdHgsICZyLCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByOwp9CgppbnQ2NF90CmpzX2RhdGVfdGltZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBhcmcpIHsKICBpbnQ2NF90IHIgPSAtMTsKICBpZihKU19Jc09iamVjdChhcmcpKQogICAgciA9IGpzX2RhdGVfZ2V0dGltZShjdHgsIGFyZyk7CiAgZWxzZSBpZighanNfaXNfbnVsbGlzaChjdHgsIGFyZykpCiAgICBKU19Ub0ludDY0KGN0eCwgJnIsIGFyZyk7CiAgcmV0dXJuIHI7Cn0KCnN0cnVjdCB0aW1lc3BlYwpqc19kYXRlX3RpbWVzcGVjKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIGFyZykgewogIHN0cnVjdCB0aW1lc3BlYyB0czsKICBpbnQ2NF90IHIgPSBqc19kYXRlX3RpbWUoY3R4LCBhcmcpOwogIHRzLnR2X3NlYyA9IHIgLyAxMDAwdWxsOwogIHRzLnR2X25zZWMgPSAociAtIHRzLnR2X3NlYykgKiAxMDAwMDAwdWxsOwogIHJldHVybiB0czsKfQoKdm9pZApqc19hcnJheWJ1ZmZlcl9mcmVldmFsdWUoSlNSdW50aW1lKiBydCwgdm9pZCogb3BhcXVlLCB2b2lkKiBwdHIpIHsKICBKU1ZhbHVlKiB2YWxwdHIgPSBvcGFxdWU7CiAgSlNfRnJlZVZhbHVlUlQocnQsICp2YWxwdHIpOwogIGpzX2ZyZWVfcnQocnQsIG9wYXF1ZSk7Cn0KCkpTVmFsdWUKanNfYXJyYXlidWZmZXJfZnJvbXZhbHVlKEpTQ29udGV4dCogY3R4LCB2b2lkKiB4LCBzaXplX3QgbiwgSlNWYWx1ZUNvbnN0IHZhbCkgewogIEpTVmFsdWUqIHZhbHB0cjsKICBpZighKHZhbHB0ciA9IGpzX21hbGxvYyhjdHgsIHNpemVvZihKU1ZhbHVlKSkpKQogICAgcmV0dXJuIEpTX1Rocm93T3V0T2ZNZW1vcnkoY3R4KTsKICAqdmFscHRyID0gSlNfRHVwVmFsdWUoY3R4LCB2YWwpOwogIHJldHVybiBKU19OZXdBcnJheUJ1ZmZlcihjdHgsIHgsIG4sIGpzX2FycmF5YnVmZmVyX2ZyZWV2YWx1ZSwgdmFscHRyLCBGQUxTRSk7Cn0KCmludDY0X3QKanNfYXJyYXlidWZmZXJfYnl0ZWxlbmd0aChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgaW50NjRfdCBsZW4gPSAtMTsKICBpZihqc19pc19hcnJheWJ1ZmZlcihjdHgsIHZhbHVlKSkgewogICAgSlNWYWx1ZSBsZW5ndGggPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHZhbHVlLCAiYnl0ZUxlbmd0aCIpOwogICAgSlNfVG9JbnQ2NChjdHgsICZsZW4sIGxlbmd0aCk7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBsZW5ndGgpOwogIH0KICByZXR1cm4gbGVuOwp9CgpKU1ZhbHVlCmpzX2V2YWxfbW9kdWxlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBCT09MIGxvYWRfb25seSkgewogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIGludCB0YWcgPSBKU19WQUxVRV9HRVRfVEFHKG9iaik7CiAgaWYodGFnID09IEpTX1RBR19NT0RVTEUpIHsKICAgIGlmKCFsb2FkX29ubHkgJiYgSlNfUmVzb2x2ZU1vZHVsZShjdHgsIG9iaikgPCAwKSB7CiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIG9iaik7CiAgICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiRmFpbGVkIHJlc29sdmluZyBtb2R1bGUiKTsKICAgIH0KICAgIGpzX21vZHVsZV9zZXRfaW1wb3J0X21ldGEoY3R4LCBvYmosIEZBTFNFLCAhbG9hZF9vbmx5KTsKICAgIHJldHVybiBsb2FkX29ubHkgPyBKU19EdXBWYWx1ZShjdHgsIG9iaikgOiBKU19FdmFsRnVuY3Rpb24oY3R4LCBvYmopOwogIH0KICByZXR1cm4gSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgImludmFsaWQgdGFnICVpIiwgdGFnKTsKfQoKSlNWYWx1ZQpqc19ldmFsX2JpbmFyeShKU0NvbnRleHQqIGN0eCwgY29uc3QgdWludDhfdCogYnVmLCBzaXplX3QgYnVmX2xlbiwgQk9PTCBsb2FkX29ubHkpIHsKICBKU1ZhbHVlIG9iaiA9IEpTX1JlYWRPYmplY3QoY3R4LCBidWYsIGJ1Zl9sZW4sIEpTX1JFQURfT0JKX0JZVEVDT0RFKTsKICBpZihKU19Jc0V4Y2VwdGlvbihvYmopKQogICAgcmV0dXJuIG9iajsKICAvLyBwcmludGYoImpzX2V2YWxfYmluYXJ5IG9iaj0lc1xuIiwganNfdmFsdWVfdHlwZXN0cihjdHgsIG9iaikpOwogIGlmKCFsb2FkX29ubHkpIHsKICAgIEpTVmFsdWUgdG1wID0ganNfZXZhbF9tb2R1bGUoY3R4LCBvYmosIGxvYWRfb25seSk7CiAgICBpbnQgdGFnID0gSlNfVkFMVUVfR0VUX1RBRyh0bXApOwogICAgLy8gcHJpbnRmKCJqc19ldmFsX2JpbmFyeSB0bXA9JXNcbiIsIGpzX3ZhbHVlX3R5cGVzdHIoY3R4LCB0bXApKTsKICAgIGlmKCFKU19Jc0V4Y2VwdGlvbih0bXApICYmICFKU19Jc1VuZGVmaW5lZCh0bXApKQogICAgICBpZih0YWcgPj0gSlNfVEFHX0ZJUlNUICYmIHRhZyA8PSBKU19UQUdfRkxPQVQ2NCkKICAgICAgICByZXR1cm4gdG1wOwogIH0KICByZXR1cm4gb2JqOwp9CgpKU1ZhbHVlCmpzX2V2YWxfYnVmKEpTQ29udGV4dCogY3R4LCBjb25zdCB2b2lkKiBidWYsIGludCBidWZfbGVuLCBjb25zdCBjaGFyKiBmaWxlbmFtZSwgaW50IGV2YWxfZmxhZ3MpIHsKICBKU1ZhbHVlIHZhbDsKCiAgaWYoKGV2YWxfZmxhZ3MgJiBKU19FVkFMX1RZUEVfTUFTSykgPT0gSlNfRVZBTF9UWVBFX01PRFVMRSkgewogICAgLyogZm9yIHRoZSBtb2R1bGVzLCB3ZSBjb21waWxlIHRoZW4gcnVuIHRvIGJlIGFibGUgdG8gc2V0IGltcG9ydC5tZXRhICovCiAgICB2YWwgPSBKU19FdmFsKGN0eCwgYnVmLCBidWZfbGVuLCBmaWxlbmFtZSA/IGZpbGVuYW1lIDogIjxpbnB1dD4iLCBldmFsX2ZsYWdzIHwgSlNfRVZBTF9GTEFHX0NPTVBJTEVfT05MWSk7CiAgICBpZighSlNfSXNFeGNlcHRpb24odmFsKSkgewogICAgICBqc19tb2R1bGVfc2V0X2ltcG9ydF9tZXRhKGN0eCwgdmFsLCAhIWZpbGVuYW1lLCBUUlVFKTsKICAgICAgLyp2YWwgPSAqLyBKU19FdmFsRnVuY3Rpb24oY3R4LCB2YWwpOwogICAgfQogIH0gZWxzZSB7CiAgICB2YWwgPSBKU19FdmFsKGN0eCwgYnVmLCBidWZfbGVuLCBmaWxlbmFtZSwgZXZhbF9mbGFncyk7CiAgfQogIGlmKEpTX0lzRXhjZXB0aW9uKHZhbCkpCiAgICBqc19lcnJvcl9wcmludChjdHgsIEpTX0dldEV4Y2VwdGlvbihjdHgpKTsKICByZXR1cm4gdmFsOwp9CgppbnQKanNfZXZhbF9zdHIoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN0ciwgY29uc3QgY2hhciogZmlsZSwgaW50IGZsYWdzKSB7CiAgSlNWYWx1ZSB2YWwgPSBqc19ldmFsX2J1ZihjdHgsIHN0ciwgc3RybGVuKHN0ciksIGZpbGUsIGZsYWdzKTsKICBpbnQzMl90IHJldCA9IC0xOwogIGlmKEpTX0lzTnVtYmVyKHZhbCkpCiAgICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsKTsKICByZXR1cm4gcmV0Owp9Cgp0aHJlYWRfbG9jYWwgdWludDY0X3QganNfcGVuZGluZ19zaWduYWxzID0gMDsKCmludDY0X3QKanNfdGltZV9tcyh2b2lkKSB7CiAgc3RydWN0IHRpbWVzcGVjIHRzOwogIGNsb2NrX2dldHRpbWUoQ0xPQ0tfTU9OT1RPTklDLCAmdHMpOwogIHJldHVybiAodWludDY0X3QpdHMudHZfc2VjICogMTAwMCArICh0cy50dl9uc2VjIC8gMTAwMDAwMCk7Cn0KCmludApqc19pbnRlcnJ1cHRfaGFuZGxlcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUpIHsKICByZXR1cm4gKGpzX3BlbmRpbmdfc2lnbmFscyA+PiBTSUdJTlQpICYgMTsKfQoKdm9pZApqc190aW1lcl91bmxpbmsoSlNSdW50aW1lKiBydCwgSlNPU1RpbWVyKiB0aCkgewogIGlmKHRoLT5saW5rLnByZXYpIHsKICAgIGxpc3RfZGVsKCZ0aC0+bGluayk7CiAgICB0aC0+bGluay5wcmV2ID0gdGgtPmxpbmsubmV4dCA9IDA7CiAgfQp9Cgp2b2lkCmpzX3RpbWVyX2ZyZWUoSlNSdW50aW1lKiBydCwgSlNPU1RpbWVyKiB0aCkgewogIEpTX0ZyZWVWYWx1ZVJUKHJ0LCB0aC0+ZnVuYyk7CiAganNfZnJlZV9ydChydCwgdGgpOwp9Cgp2b2lkCmpzX2NhbGxfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZ1bmMpIHsKICBKU1ZhbHVlIHJldCwgZnVuYzE7CiAgZnVuYzEgPSBKU19EdXBWYWx1ZShjdHgsIGZ1bmMpOwogIHJldCA9IEpTX0NhbGwoY3R4LCBmdW5jMSwgSlNfVU5ERUZJTkVELCAwLCAwKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmdW5jMSk7CiAgaWYoSlNfSXNFeGNlcHRpb24ocmV0KSkKICAgIGpzX3N0ZF9kdW1wX2Vycm9yKGN0eCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcmV0KTsKfQp2b2lkKgpqc19zYWJfYWxsb2Modm9pZCogb3BhcXVlLCBzaXplX3Qgc2l6ZSkgewogIEpTU0FCSGVhZGVyKiBzYWI7CiAgc2FiID0gbWFsbG9jKHNpemVvZihKU1NBQkhlYWRlcikgKyBzaXplKTsKICBpZighc2FiKQogICAgcmV0dXJuIDA7CiAgc2FiLT5yZWZfY291bnQgPSAxOwogIHJldHVybiBzYWItPmJ1ZjsKfQp2b2lkCmpzX3NhYl9mcmVlKHZvaWQqIG9wYXF1ZSwgdm9pZCogcHRyKSB7CiAgSlNTQUJIZWFkZXIqIHNhYjsKICBpbnQgcmVmX2NvdW50OwogIHNhYiA9IChKU1NBQkhlYWRlciopKCh1aW50OF90KilwdHIgLSBzaXplb2YoSlNTQUJIZWFkZXIpKTsKICByZWZfY291bnQgPSBhdG9taWNfYWRkX2ludCgmc2FiLT5yZWZfY291bnQsIC0xKTsKICBhc3NlcnQocmVmX2NvdW50ID49IDApOwogIGlmKHJlZl9jb3VudCA9PSAwKSB7CiAgICBmcmVlKHNhYik7CiAgfQp9Cgp2b2lkCmpzX3NhYl9kdXAodm9pZCogb3BhcXVlLCB2b2lkKiBwdHIpIHsKICBKU1NBQkhlYWRlciogc2FiOwogIHNhYiA9IChKU1NBQkhlYWRlciopKCh1aW50OF90KilwdHIgLSBzaXplb2YoSlNTQUJIZWFkZXIpKTsKICBhdG9taWNfYWRkX2ludCgmc2FiLT5yZWZfY291bnQsIDEpOwp9Cgp2b2lkCmpzX2Vycm9yX2R1bXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBlcnJvciwgRHluQnVmKiBkYikgewogIGNvbnN0IGNoYXIgKnN0ciwgKnN0YWNrID0gMDsKICBpZihKU19Jc09iamVjdChlcnJvcikpIHsKICAgIEpTVmFsdWUgc3QgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGVycm9yLCAic3RhY2siKTsKICAgIGlmKCFKU19Jc1VuZGVmaW5lZChzdCkpCiAgICAgIHN0YWNrID0gSlNfVG9DU3RyaW5nKGN0eCwgc3QpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgc3QpOwogIH0KICBpZigoc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgZXJyb3IpKSkgewogICAgY29uc3QgY2hhciogdHlwZSA9IEpTX0lzT2JqZWN0KGVycm9yKSA/IGpzX29iamVjdF9jbGFzc25hbWUoY3R4LCBlcnJvcikgOiBqc192YWx1ZV90eXBlc3RyKGN0eCwgZXJyb3IpOwoKICAgIGlmKCFzdHJfc3RhcnQoc3RyLCB0eXBlKSkgewogICAgICBkYnVmX3B1dHN0cihkYiwgdHlwZSk7CiAgICAgIGRidWZfcHV0c3RyKGRiLCAiOiAiKTsKICAgIH0KICAgIGRidWZfcHV0c3RyKGRiLCBzdHIpOwogICAgZGJ1Zl9wdXRjKGRiLCAnXG4nKTsKICAgIGlmKHN0YWNrKSB7CiAgICAgIGRidWZfcHV0c3RyKGRiLCAiU1RBQ0tcbiIpOwogICAgICBkYnVmX3B1dHN0cihkYiwgc3RhY2spOwogICAgICBkYnVmX3B1dGMoZGIsICdcbicpOwogICAgfQogICAgZGJ1Zl8wKGRiKTsKICB9CiAgaWYoc3RhY2spCiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0YWNrKTsKICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7Cn0KCmNoYXIqCmpzX2Vycm9yX3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZXJyb3IpIHsKICBEeW5CdWYgZGI7CiAganNfZGJ1Zl9pbml0KGN0eCwgJmRiKTsKICBqc19lcnJvcl9kdW1wKGN0eCwgZXJyb3IsICZkYik7CiAgcmV0dXJuIChjaGFyKilkYi5idWY7Cn0KCnZvaWQKanNfZXJyb3JfcHJpbnQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBlcnJvcikgewogIGNvbnN0IGNoYXIgKnN0ciwgKnN0YWNrID0gMDsKCiAgaWYoSlNfSXNPYmplY3QoZXJyb3IpKSB7CiAgICBKU1ZhbHVlIHN0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBlcnJvciwgInN0YWNrIik7CgogICAgaWYoIUpTX0lzVW5kZWZpbmVkKHN0KSkKICAgICAgc3RhY2sgPSBKU19Ub0NTdHJpbmcoY3R4LCBzdCk7CgogICAgSlNfRnJlZVZhbHVlKGN0eCwgc3QpOwogIH0KCiAgaWYoKHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIGVycm9yKSkpIHsKICAgIGNvbnN0IGNoYXIqIHR5cGUgPSBKU19Jc09iamVjdChlcnJvcikgPyBqc19vYmplY3RfY2xhc3NuYW1lKGN0eCwgZXJyb3IpIDoganNfdmFsdWVfdHlwZXN0cihjdHgsIGVycm9yKTsKICAgIGNvbnN0IGNoYXIqIGV4Y2VwdGlvbiA9IHN0cjsKICAgIHNpemVfdCB0eXBlbGVuID0gc3RybGVuKHR5cGUpOwoKICAgIGlmKCFzdHJuY21wKGV4Y2VwdGlvbiwgdHlwZSwgdHlwZWxlbikgJiYgZXhjZXB0aW9uW3R5cGVsZW5dID09ICc6JykgewogICAgICBleGNlcHRpb24gKz0gdHlwZWxlbiArIDI7CiAgICB9CiAgICBwcmludGYoIiVzOiAlc1xuIiwgdHlwZSwgZXhjZXB0aW9uKTsKICAgIGlmKHN0YWNrKQogICAgICBwcmludGYoIlNUQUNLPVxuJXNcbiIsIHN0YWNrKTsKICAgIGZmbHVzaChzdGRvdXQpOwogIH0KICBpZihzdGFjaykKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgc3RhY2spOwogIEpTX0ZyZWVDU3RyaW5nKGN0eCwgc3RyKTsKfQoKSlNWYWx1ZQpqc19pb19yZWFkaGFuZGxlcl9mbihKU0NvbnRleHQqIGN0eCwgQk9PTCB3cml0ZSkgewogIEpTTW9kdWxlRGVmKiBvczsKICBjb25zdCBjaGFyKiBoYW5kbGVyc1syXSA9IHsic2V0UmVhZEhhbmRsZXIiLCAic2V0V3JpdGVIYW5kbGVyIn07CiAgSlNBdG9tIGZ1bmNfbmFtZTsKICBKU1ZhbHVlIHNldF9oYW5kbGVyOwoKICBpZighKG9zID0ganNfbW9kdWxlX2ZpbmQoY3R4LCAib3MiKSkpCiAgICByZXR1cm4gSlNfVGhyb3dSZWZlcmVuY2VFcnJvcihjdHgsICInb3MnIG1vZHVsZSByZXF1aXJlZCIpOwoKICBmdW5jX25hbWUgPSBKU19OZXdBdG9tKGN0eCwgaGFuZGxlcnNbd3JpdGVdKTsKICBzZXRfaGFuZGxlciA9IG1vZHVsZV9leHBvcnRzX2ZpbmQoY3R4LCBvcywgZnVuY19uYW1lKTsKICBKU19GcmVlQXRvbShjdHgsIGZ1bmNfbmFtZSk7CgogIGlmKCFKU19Jc0Z1bmN0aW9uKGN0eCwgc2V0X2hhbmRsZXIpKSB7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBzZXRfaGFuZGxlcik7CiAgICByZXR1cm4gSlNfVGhyb3dSZWZlcmVuY2VFcnJvcihjdHgsICJubyBvcy4lcyBmdW5jdGlvbiIsIGhhbmRsZXJzW3dyaXRlXSk7CiAgfQoKICByZXR1cm4gc2V0X2hhbmRsZXI7Cn0KCnN0YXRpYyB0aHJlYWRfbG9jYWwgSlNDRnVuY3Rpb24qIHJlYWRoYW5kbGVyX2NmdW5jOwoKSlNDRnVuY3Rpb24qCmpzX2lvX3JlYWRoYW5kbGVyX2NmdW5jKEpTQ29udGV4dCogY3R4LCBCT09MIHdyaXRlKSB7CiAgaWYoIXJlYWRoYW5kbGVyX2NmdW5jKSB7CiAgICBKU1ZhbHVlIHNldF9oYW5kbGVyOwogICAgSlNPYmplY3QqIG9iajsKICAgIHNldF9oYW5kbGVyID0ganNfaW9fcmVhZGhhbmRsZXJfZm4oY3R4LCB3cml0ZSk7CiAgICBpZihKU19Jc0V4Y2VwdGlvbihzZXRfaGFuZGxlcikpCiAgICAgIHJldHVybiAwOwogICAgcmVhZGhhbmRsZXJfY2Z1bmMgPSBqc19mdW5jdGlvbl9jZnVuYyhjdHgsIHNldF9oYW5kbGVyKTsKICB9CiAgcmV0dXJuIHJlYWRoYW5kbGVyX2NmdW5jOwp9CgAAAAAAAAAAfOQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfOQAAAAAAAB85AAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 21895,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAABFMAAAAAAAAVUwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAABFMAAAAAAAAVUwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-misc.c",
			"settings":
			{
				"buffer_size": 42575,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					375,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAgooAAAAAAACTigAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAgooAAAAAAACTigAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "buffer-utils.h",
			"settings":
			{
				"buffer_size": 7924,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwIAAAAAAABbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwIAAAAAAABbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwIAAAAAAABbAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-lexer.c",
			"settings":
			{
				"buffer_size": 44664,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAU1cAAAAAAABhVwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAU1cAAAAAAABhVwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "buffer-utils.c",
			"settings":
			{
				"buffer_size": 11684,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					20,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQScAAAAAAABBJwAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQScAAAAAAABBJwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQScAAAAAAABBJwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-internal.h",
			"settings":
			{
				"buffer_size": 37634,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA91YAAAAAAAABVwAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA91YAAAAAAAABVwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "utils.h",
			"settings":
			{
				"buffer_size": 28737,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAikUAAAAAAACbRQAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAikUAAAAAAACbRQAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAikUAAAAAAACbRQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "",
			"file": "/home/roman/.config/sublime-text/Packages/User/ExtendedSwitcher.sublime-settings",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 0,
				"line_ending": "Unix",
				"unsaved": true
			}
		},
		{
			"file": "quickjs-syscallerror.c",
			"settings":
			{
				"buffer_size": 16552,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"cut",
					null,
					"AQAAALAvAAAAAAAAsC8AAAAAAAA+AAAAICAgIEpTX1BST1BfSU5UMzJfREVGKCJFTk9UUkVDT1ZFUkFCTEUiLCBFTk9UUkVDT1ZFUkFCTEUsIDApLAo",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAvAAAAAAAA7i8AAAAAAAAAAAAAAADwvw"
				],
				[
					25,
					2,
					"paste",
					null,
					"AgAAALAvAAAAAAAA7i8AAAAAAAAAAAAA7i8AAAAAAAAsMAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALAvAAAAAAAAsC8AAAAAAAAAAAAAAADwvw"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "EWOUD"
					},
					"BgAAAAUwAAAAAAAABjAAAAAAAAAAAAAABjAAAAAAAAAGMAAAAAAAAA8AAABFTk9UUkVDT1ZFUkFCTEUGMAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAJMAAAAAAAAAAAAAAJMAAAAAAAAAowAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAUwAAAAAAAAFDAAAAAAAAAAAAAAAADwvw"
				],
				[
					30,
					1,
					"left_delete",
					null,
					"AQAAAAkwAAAAAAAACTAAAAAAAAABAAAARA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAowAAAAAAAACjAAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "LDBLOCK"
					},
					"BwAAAAkwAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAALMAAAAAAAAAAAAAALMAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADTAAAAAAAAAAAAAADTAAAAAAAAAOMAAAAAAAAAAAAAAOMAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAEDAAAAAAAAAAAAAA",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"paste",
					null,
					"AgAAABMwAAAAAAAAHjAAAAAAAAAAAAAAHjAAAAAAAAAeMAAAAAAAAA8AAABFTk9UUkVDT1ZFUkFCTEU",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABMwAAAAAAAAIjAAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"revert",
					null,
					"",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMwAAAAAAAA2iIAAAAAAAAAAAAAAADwvw"
				],
				[
					45,
					1,
					"revert",
					null,
					"",
					"CQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACMwAAAAAAAA2iIAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAIzAAAAAAAADaIgAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAIzAAAAAAAADaIgAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAIzAAAAAAAADaIgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/libarchive",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests"
	],
	"file_history":
	[
		"/home/roman/.config/sublime-text/Packages/ExtendedSwitcher/ExtendedSwitcher.sublime-settings",
		"/home/roman/Projects/plot-cv/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/.config/sublime-text/Packages/User/LiveReload.sublime-settings",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/socketpair_win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/.config/sublime-text/Packages/LiveReload/LiveReload.sublime-settings",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qsort_r.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.h",
		"/home/roman/Projects/coreutils/gnulib/lib/execute.c",
		"/home/roman/Projects/coreutils/gnulib/lib/windows-spawn.h",
		"/home/roman/Projects/coreutils/gnulib/lib/spawn-pipe.c",
		"/tmp/spawn/pcs_exec.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/modules.project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/tmp/spawn/process.2.c",
		"/tmp/spawn/process.c",
		"/tmp/spawn/systemimpl.1.c",
		"/tmp/spawn/systemimpl.c",
		"/tmp/spawnvpe/fgvsys_d.c",
		"/tmp/spawnvpe/posixmodule.1.c",
		"/tmp/spawnvpe/posixmodule.c",
		"/tmp/spawnvpe/process.c",
		"/tmp/spawnvpe/redirect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/util.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/.config/sublime-text/Packages/Search in Project/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/.config/sublime-text/Packages/Outline/outline-Dark.hidden-tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/fs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/test-repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-socklen_t.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fd_set.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/timeval.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.clang-format",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeCache.txt",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"js_misc_concat",
			"js_input_buffer",
			"concat",
			"js_function",
			"JSCFunctionType",
			"JS_CLASS_C_FUNCTION",
			"JS_CLASS_C_FUNCTION_DATA",
			"struct JSObject",
			"JSVarRef",
			"data:",
			"Location",
			"\\.tokens",
			"topState",
			"popState",
			"\"state",
			"\\.state",
			"outputFunction",
			"logFunction",
			"output",
			"outputFunction",
			"output =",
			"lexer.tokens",
			"JSLexer",
			"new Lexer",
			"js_sockets_init",
			"NewCFunctionData",
			"js_socket_async_wait",
			"js_socket_async_read",
			"module_exports",
			"SOCKETS_ERRNO:",
			"SOCKETS_ERRNO",
			"JSExportEntry",
			"JSModuleDef",
			"^JSModuleDef",
			"wait",
			"CHILD_PROCESS_EXITED",
			"EAGAIN",
			"\"EAGAIN\"",
			"encoding",
			"ArrayBufferToString",
			"encoding",
			"class_id",
			"js_is_location",
			"array_contains",
			"array_sea",
			"QJSM_EXTRA",
			"location_SOURCES",
			"QJSM_EXTRA_SOURCES",
			"qjsm ",
			"\\(qjsm",
			"qjsm",
			"vector_SOURCES",
			"char_utils_SOURCES",
			"util_SOURCES",
			"utils.c utils.h",
			"utils\\.c",
			"set.lexer",
			"vector.c vector.h",
			"vector_",
			"vector",
			"stringde",
			"flags",
			"socketpair_win32",
			"socketpair",
			" qsort_r\\.c",
			" qsort_r.c",
			"qsort",
			"quicksort",
			"status",
			"PROCESS_STATUS_ERROR",
			"child.process",
			"child_process",
			"TERMIOS",
			"prepare_spawn",
			"_WIN32",
			"dup2",
			"spawnvp",
			"child_p",
			"prot",
			"PROT_READ",
			"HAVE_MMAP",
			"gpio",
			"HAVE_MMAP",
			"^",
			"mmap",
			"realpath",
			"getuid",
			"#endif\n#ifndef __wasi__\n",
			"FUNC_GETUID",
			"\"getuid",
			"fmemopen",
			"HAVE_STRVERSCMP",
			"utils.c",
			"qsort",
			"check_func",
			"qsort",
			"QUICKJS_LIBRARY[^_]",
			"QUICKJS_LIBRARY",
			"WIN32",
			"QUICKJS_LIBRARY_DIR",
			"target_link",
			"add_library",
			"add_lib",
			"QUICKJS_LIBRARY",
			"SOCKETS_NDELAY,",
			"_MODE:",
			"SOCKET_ERROR",
			"SOCKET_SYSCALL",
			"SOCKET_",
			"alloca",
			"check_func",
			"lstat",
			"misc_uname",
			"utsname",
			"SIGTERM",
			"readSync",
			"stdout",
			"jsm_load_package",
			"jsm_module_load",
			"jsm_init_modules",
			"jsm_modules",
			"SOCKET_ERROR",
			"js_sockets_init",
			"vector_forea",
			"js_sockets_funcs",
			"exports",
			"valueOf",
			"\"valueOf"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"js_socket_async_wait",
			"utils_SOURCES",
			"${util_SOURCES}",
			"${vector_SOURCES}",
			"socketpair",
			"",
			"#",
			"",
			"HAVE_MEMMEM",
			"log",
			"class_key",
			"}\\n\\nsize_t",
			"# ",
			"#",
			"HAVE_REALPATH",
			"",
			"HAVE_TERMIOS_H",
			"HAVE_MMAP",
			"HAVE_SYS_MMAN_H",
			"HAVE_SYS_WAIT_H",
			"length",
			"loc->",
			"ret->",
			"arg",
			" ",
			"",
			"\"\\\\t",
			"\"\\t",
			"imp.",
			"ctx,",
			"",
			"JSValueConst)",
			"",
			"jsm_module_loader",
			"js_module_loader_so",
			"js_eval_file",
			"js_eval_buf",
			"js_load_script",
			"jsm_eval_script",
			"js_eval_file",
			"js_load_module",
			"js_eval_str",
			"js_module_get",
			"JSValueConst)",
			"js_module_search",
			"jsm_module_find",
			"js_module_find",
			"js_load_",
			"js_load_module",
			"js_eval_buf",
			"js_load_script",
			"js_std_dump_error",
			"js_module_exports",
			"fdset",
			" ",
			"js_input_buffer",
			"\\1(\\2, sock",
			"\\1(",
			"",
			"JS_CGETSET_MAGIC_DEF",
			"off.",
			"} else if(",
			"port",
			".buf",
			"'",
			"",
			"socket_send",
			"0x00",
			" 0x00,",
			"0x78,",
			"0x78",
			" 0x00,",
			"0x78",
			"JS_CGETSET_MAGIC_DEF",
			"socket_syscalls_size",
			"js_syscallerror_get, js_syscallerror_set,",
			"js_socket_get, js_socket_set, ",
			"e",
			"js_syscallerror_proto_funcs",
			"s.fd",
			"js_socket_proto_funcs",
			"\"",
			"SYSCALLERROR_VALUEOF",
			"s, ",
			"JS_SOCKETCALL",
			"JS_SOCKETCALL_RETURN",
			"js_socket_data2(ctx",
			"sa->family",
			"QUICKJS_SYSCALLERROR_H",
			"data2",
			"js_syscallerror_data2",
			"QUICKJS_MISC_H",
			"js_sockets_defines",
			"js_sockaddr_data2",
			"js_sockaddr_data",
			"SockAddr",
			"struct sockaddr*",
			"sockets_init",
			"argv[i]",
			"pigpio",
			"CHAR_UTILS",
			"${util_SOURCES}",
			"ol.",
			"range_from",
			".range.length",
			".range.offset",
			"input_buffer_length(in)",
			"input_buffer_data(in)",
			"blob",
			"location->vec",
			"location",
			"Location",
			"r->data\\1",
			" this.fs.",
			"stringdecoder",
			"js_stringdecoder_set",
			"js_stringdecoder_get",
			"stringdecoder",
			"\\1if(gpio->debug) fprintf",
			"struct gpio",
			"struct GPIO",
			"struct GPIO*",
			"ctx->rt",
			"",
			": ",
			"\"",
			"ret = \\1;",
			"->errnum"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2071,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
							"function_name_status_row": 34,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									148,
									157
								],
								[
									196,
									205
								],
								[
									247,
									257
								],
								[
									647,
									662
								],
								[
									705,
									725
								],
								[
									788,
									801
								],
								[
									934,
									952
								],
								[
									1073,
									1093
								],
								[
									1965,
									1979
								],
								[
									2233,
									2245
								],
								[
									2367,
									2390
								],
								[
									2521,
									2537
								],
								[
									2778,
									2793
								],
								[
									2967,
									2983
								],
								[
									4117,
									4140
								],
								[
									4950,
									4968
								],
								[
									6021,
									6036
								],
								[
									6992,
									7007
								],
								[
									7867,
									7886
								],
								[
									8599,
									8620
								],
								[
									9910,
									9922
								],
								[
									10869,
									10882
								],
								[
									11506,
									11516
								],
								[
									12119,
									12130
								],
								[
									12666,
									12679
								],
								[
									12958,
									12969
								],
								[
									13831,
									13843
								],
								[
									14781,
									14791
								],
								[
									15413,
									15422
								],
								[
									15844,
									15857
								],
								[
									16455,
									16464
								],
								[
									17451,
									17458
								],
								[
									19712,
									19731
								],
								[
									20172,
									20185
								],
								[
									20337,
									20353
								],
								[
									20539,
									20552
								],
								[
									22809,
									22822
								],
								[
									23411,
									23424
								],
								[
									23749,
									23765
								],
								[
									29500,
									29521
								],
								[
									30186,
									30203
								],
								[
									31108,
									31125
								],
								[
									31561,
									31584
								],
								[
									32072,
									32092
								],
								[
									33699,
									33714
								],
								[
									33909,
									33928
								],
								[
									34223,
									34233
								],
								[
									49510,
									49525
								],
								[
									52065,
									52079
								],
								[
									52109,
									52123
								]
							],
							"symlist":
							[
								"\t‚í°  inet_pton ( ) ; ‚Äî function declaration",
								"\t‚í°  inet_ntop ( ) ; ‚Äî function declaration",
								"\t‚í°  socketpair ( ) ; ‚Äî function declaration",
								"\t‚í°  js_sockets_init ( ) ; ‚Äî function declaration",
								"\t‚í°  js_socket_async_wait ( ) ; ‚Äî function declaration",
								"‚Äî‚ìÇ‚Äì JS_SOCKETCALL ( ) ‚Ä¶ ‚Äî macro function",
								"‚Äî‚ìÇ‚Äì JS_SOCKETCALL_FAIL ( ) ‚Ä¶ ‚Äî macro function",
								"‚Äî‚ìÇ‚Äì JS_SOCKETCALL_RETURN ( ) ‚Ä¶ ‚Äî macro function",
								"‚Äî‚íª‚Äì syscall_return ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì sockaddr_new ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_free_buffer ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_wrap ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_new ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_init ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_constructor ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_method ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_get ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_set ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_inspect ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockaddr_finalizer ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì timeval_read ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì timeval_write ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì fdset_read ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì fdset_write ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì fdset_toarray ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì pollfd_read ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì pollfd_write ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì optval_buf ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socketpair ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_select ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_poll ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_new_proto ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_new ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚í∏‚Äì SocketProperties { ‚Ä¶ } ; ‚Äî type",
								"‚Äî‚íª‚Äì js_socket_get ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_set ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚í∏‚Äì SocketMethods { ‚Ä¶ } ; ‚Äî type",
								"‚Äî‚íª‚Äì js_socket_method ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_constructor ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_inspect ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_valueof ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_async_resolve ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_async_wait ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_adopt ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_socket_finalizer ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockopt ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_sockets_init ( ) { ‚Ä¶ } ‚Äî function",
								"\t‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object",
								"\t‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633746602.44,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "quickjs-sockets.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 52950,
						"regions":
						{
						},
						"selection":
						[
							[
								31542,
								31542
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1110,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633755681.44,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 16770.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 58492,
						"regions":
						{
						},
						"selection":
						[
							[
								58492,
								58492
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 2266,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633746685.6,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 33249.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 21895,
						"regions":
						{
						},
						"selection":
						[
							[
								20456,
								20563
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 796,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633747140.23,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11940.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "quickjs-misc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42575,
						"regions":
						{
						},
						"selection":
						[
							[
								35505,
								35522
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1266,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633747139.8,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 18796.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "buffer-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7924,
						"regions":
						{
						},
						"selection":
						[
							[
								603,
								603
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 22,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633747139.05,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs-lexer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44664,
						"regions":
						{
						},
						"selection":
						[
							[
								22355,
								22369
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 825,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633746602.45,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12121.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "buffer-utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11684,
						"regions":
						{
						},
						"selection":
						[
							[
								10049,
								10049
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 410,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633746926.89,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5941.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs-internal.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37634,
						"regions":
						{
						},
						"selection":
						[
							[
								22263,
								22273
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 608,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633739789.4,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8904.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28737,
						"regions":
						{
						},
						"selection":
						[
							[
								17802,
								17819
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 644,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633740713.88,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9249.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/roman/.config/sublime-text/Packages/User/ExtendedSwitcher.sublime-settings",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 0,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JSON/JSON.sublime-syntax",
							"tabs_extra_last_activated": 1633496614.03,
							"tabs_extra_last_activated_sheet_index": 22
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "quickjs-syscallerror.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16552,
						"regions":
						{
						},
						"selection":
						[
							[
								12323,
								8922
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 318,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1633411808.74,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3936.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"child",
				"child-process.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"qsort_r",
				"qsort_r.c"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"quick",
				"quickjs-path.c"
			],
			[
				"path.c",
				"path.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"quicksj-misc",
				"quickjs-misc.c"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-mm",
				"quickjs-mmap.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"quickjs-m",
				"quickjs-misc.c"
			],
			[
				"redicate.c",
				"predicate.c"
			],
			[
				"sockets.h",
				"quickjs-sockets.h"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"",
				"quickjs-inspect.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"parser.js",
				"lib/parser.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"conso",
				"lib/console.js"
			],
			[
				"clang-f",
				".clang-format"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"test_mi",
				"tests/test_misc.js"
			],
			[
				"ockets.",
				"quickjs-sockets.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"test_loca",
				"tests/test_location.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				".clang-fo",
				".clang-format"
			],
			[
				"buff",
				"buffer-utils.c"
			],
			[
				"buffer-util",
				"buffer-utils.c"
			],
			[
				"buffer-utils.c",
				"buffer-utils.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-so",
				"quickjs-sockets.c"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"quickjs-insp",
				"quickjs-inspect.c"
			],
			[
				"test_soc",
				"tests/test_sockets.js"
			],
			[
				"test_qjsm",
				"tests/test_qjsm.js"
			],
			[
				"buffer-tu",
				"buffer-utils.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"repl.",
				"lib/repl.js"
			],
			[
				"quickjs-blo",
				"quickjs-blob.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"test_mis",
				"tests/test_misc.js"
			],
			[
				"test_blob",
				"tests/test_blob.js"
			],
			[
				"test_string",
				"tests/test_stringdecoder.js"
			],
			[
				"test_str",
				"tests/test_stringdecoder.js"
			],
			[
				"quickjs-blb",
				"quickjs-blob.h"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"ringbuffer.h",
				"ringbuffer.h"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjsmo",
				"cmake/QuickJSModule.cmake"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"scan.",
				"lib/scan.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 236.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
