{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"JS_PROP",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyFunctionList"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "FileBannerComment = (filename, i) =>\nIsBuiltin = moduleName =>\n  compact = (n, more = {}) =>\nAddUnique = (arr, item) =>\nIntToDWord = ival =>\nIntToBinary = i =>\n(n, value) =>\n  num =>\n(type, lexeme, tok) =>\nCompareRange = (a, b) =>\nPutsFunction = outFn => str =>\n  debugLog = (str, ...args) =>\n  pred = arg =>\n(acc, opt) =>\n  arg =>\nFileWriter = file =>\n  close: () =>\nFdWriter(fd, name)\n  fn = (buf, len) =>\n  close: () =>\n  seek: (whence, offset) =>\n  inspect()\nImportIds(seq)\n  tok =>\nImpExpType(seq)\n  tok =>\n  tok =>\nImportType(seq)\nImportFile(seq)\n  tok =>\nExportName(seq)\n  tok =>\nByteSequence(tokens)\n(n, t) =>\nAddExport(tokens, relativePath = s => s)\n  tok =>\n  tok =>\n  tok =>\n  tok =>\n  ids()\nAddImport(tokens, relativePath = s => s)\n  ids()\n  tok =>\n  tok =>\n  tok =>\n  tok =>\nProcessFile(source, log = () => {}, recursive)\n  .handler = lex =>\n  .beginCode = () =>\n  balancer = () =>\n  self = function ParentheseBalancer(tok)\n  s =>\n  reset()\n  get depth()\n  showToken = tok =>\nPathAdjust = s =>\n  i =>\n  exp =>\n  exp =>\n  tok =>\n(a, b) =>\n  imp =>\n(acc, imp) =>\n  b =>\nNonWS(tokens)\n  tok =>\nTokenSequence(tokens)\n  tok =>\n  toString()\nUnquote(lexeme)\nLiteralSequence(tokens)\n(acc, tok) =>\nUntilEOL(idx, tokens)\nUntil(idx, tokens, pred = \n(null, [';', '\\n']))\nWholeLine(idx, tokens)\nRange(file, start, end)\nRange.prototype.toString = function()\nInRange([start, end], i)\nIsRange(obj)\nNumericRange\n  constructor(start, end)\n  get start()\n  set start(value)\n  get end()\n  set end(value)\n  static from(range)\n  static *holes(ranges, only = false)\n  static between([s1, e1], [s2, e2])\nNumericRange\n  pad = s =>\nFileMap\n  constructor(file, buf)\n  static empty(file)\n  isEmpty()\n  static for(file, buf)\n  isEmpty()\n  toString()\nFileMap\n  splitAt(pos)\n([range, buf]) =>\n  sliceAt(n)\n  ([range, buf]) =>\n  replaceRange(range, file)\n  sliceIndex = n =>\n(acc, item, i) =>\n  n =>\n  dump()\n(item, i) =>\n(acc, [range, buf, str], i) =>\n  at(i)\n  toArray()\n(s, i) =>\n  holes()\n([range]) =>\n  write(out, depth = 0, serial)\n  toString(fn = FileBannerComment)\nFileMap\nFileMap\n  function(depth, opts)\n([range, buf], i) =>\nBufferFile(file, buf)\nBufferLengths(file)\n  b =>\nBufferOffsets(file)\n([pos, list], b) =>\nBufferRanges(file)\n([pos, list], b) =>\nWriteFile(file, tok)\nDumpLexer(lex)\nDumpToken(tok)\nPrintES6Import(imp)\n  ({ local, file }) =>\n  ({ local, file }) =>\n  ({ local, file }) =>\nPrintCJSImport({ type, local, file })\n  () =>\n  () =>\n  () =>\n  main(...args)\n  () =>\n  () =>\n  arg =>\n  file =>\n  () =>\n  () =>\n  () =>\n  () =>\nRelativePath = file =>\n  () =>\n  (...args) =>\n  impexp =>\n  hdr =>\n  line =>\n(acc, line) =>",
			"settings":
			{
				"buffer_size": 2618,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					6741,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23176,
								23182
							],
							[
								23324,
								23336
							],
							[
								23380,
								23410
							],
							[
								24007,
								24012
							],
							[
								24452,
								24461
							],
							[
								24484,
								24493
							],
							[
								24514,
								24521
							],
							[
								24554,
								24566
							],
							[
								25065,
								25094
							],
							[
								26270,
								26302
							],
							[
								26700,
								26707
							],
							[
								26751,
								26758
							],
							[
								26786,
								26808
							],
							[
								26837,
								26857
							],
							[
								27268,
								27298
							],
							[
								27559,
								27587
							],
							[
								27617,
								27621
							],
							[
								27640,
								27668
							],
							[
								27701,
								27720
							],
							[
								27779,
								27806
							],
							[
								27839,
								27858
							],
							[
								27933,
								27962
							],
							[
								28080,
								28103
							],
							[
								28243,
								28266
							],
							[
								28395,
								28423
							],
							[
								28472,
								28493
							],
							[
								28567,
								28588
							],
							[
								28649,
								28670
							],
							[
								28743,
								28789
							],
							[
								28838,
								28844
							],
							[
								28918,
								28924
							],
							[
								28990,
								28996
							],
							[
								29067,
								29089
							],
							[
								29544,
								29550
							],
							[
								29696,
								29702
							],
							[
								29750,
								29757
							],
							[
								29819,
								29827
							],
							[
								29884,
								29890
							],
							[
								29949,
								29955
							],
							[
								30017,
								30023
							],
							[
								30086,
								30092
							],
							[
								30371,
								30393
							],
							[
								30530,
								30536
							],
							[
								30541,
								30554
							],
							[
								30780,
								30789
							],
							[
								30826,
								30832
							],
							[
								30857,
								30864
							],
							[
								31026,
								31040
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6742,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23176,
								23182
							],
							[
								23324,
								23336
							],
							[
								23380,
								23410
							],
							[
								24007,
								24012
							],
							[
								24452,
								24461
							],
							[
								24484,
								24493
							],
							[
								24514,
								24521
							],
							[
								24554,
								24566
							],
							[
								25065,
								25094
							],
							[
								26270,
								26302
							],
							[
								26700,
								26707
							],
							[
								26751,
								26758
							],
							[
								26786,
								26808
							],
							[
								26837,
								26857
							],
							[
								27268,
								27298
							],
							[
								27559,
								27587
							],
							[
								27617,
								27621
							],
							[
								27640,
								27668
							],
							[
								27701,
								27720
							],
							[
								27779,
								27806
							],
							[
								27839,
								27858
							],
							[
								27933,
								27962
							],
							[
								28080,
								28103
							],
							[
								28243,
								28266
							],
							[
								28395,
								28423
							],
							[
								28472,
								28493
							],
							[
								28567,
								28588
							],
							[
								28649,
								28670
							],
							[
								28743,
								28789
							],
							[
								28838,
								28844
							],
							[
								28918,
								28924
							],
							[
								28990,
								28996
							],
							[
								29067,
								29089
							],
							[
								29544,
								29550
							],
							[
								29696,
								29702
							],
							[
								29750,
								29757
							],
							[
								29819,
								29827
							],
							[
								29884,
								29890
							],
							[
								29949,
								29955
							],
							[
								30017,
								30023
							],
							[
								30086,
								30092
							],
							[
								30371,
								30393
							],
							[
								30530,
								30536
							],
							[
								30541,
								30554
							],
							[
								30780,
								30789
							],
							[
								30826,
								30832
							],
							[
								30857,
								30864
							],
							[
								31026,
								31040
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6749,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23175,
								23181
							],
							[
								23323,
								23335
							],
							[
								23379,
								23409
							],
							[
								24006,
								24011
							],
							[
								24451,
								24460
							],
							[
								24483,
								24492
							],
							[
								24513,
								24520
							],
							[
								24553,
								24565
							],
							[
								25064,
								25093
							],
							[
								26269,
								26301
							],
							[
								26699,
								26706
							],
							[
								26750,
								26757
							],
							[
								26785,
								26807
							],
							[
								26836,
								26856
							],
							[
								27267,
								27297
							],
							[
								27558,
								27586
							],
							[
								27616,
								27620
							],
							[
								27639,
								27667
							],
							[
								27700,
								27719
							],
							[
								27778,
								27805
							],
							[
								27838,
								27857
							],
							[
								27932,
								27961
							],
							[
								28079,
								28102
							],
							[
								28242,
								28265
							],
							[
								28394,
								28422
							],
							[
								28471,
								28492
							],
							[
								28566,
								28587
							],
							[
								28648,
								28669
							],
							[
								28742,
								28788
							],
							[
								28837,
								28843
							],
							[
								28917,
								28923
							],
							[
								28989,
								28995
							],
							[
								29066,
								29088
							],
							[
								29543,
								29549
							],
							[
								29695,
								29701
							],
							[
								29749,
								29756
							],
							[
								29818,
								29826
							],
							[
								29883,
								29889
							],
							[
								29948,
								29954
							],
							[
								30016,
								30022
							],
							[
								30085,
								30091
							],
							[
								30370,
								30392
							],
							[
								30529,
								30535
							],
							[
								30540,
								30553
							],
							[
								30779,
								30788
							],
							[
								30825,
								30831
							],
							[
								30856,
								30863
							],
							[
								31025,
								31039
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwcAAAAAAAAbBwAAAAAAAAAAAAAAAPC/"
				],
				[
					6750,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23182,
								23188
							],
							[
								23330,
								23342
							],
							[
								23386,
								23416
							],
							[
								24013,
								24018
							],
							[
								24458,
								24467
							],
							[
								24490,
								24499
							],
							[
								24520,
								24527
							],
							[
								24560,
								24572
							],
							[
								25071,
								25100
							],
							[
								26276,
								26308
							],
							[
								26706,
								26713
							],
							[
								26757,
								26764
							],
							[
								26792,
								26814
							],
							[
								26843,
								26863
							],
							[
								27274,
								27304
							],
							[
								27565,
								27593
							],
							[
								27623,
								27627
							],
							[
								27646,
								27674
							],
							[
								27707,
								27726
							],
							[
								27785,
								27812
							],
							[
								27845,
								27864
							],
							[
								27939,
								27968
							],
							[
								28086,
								28109
							],
							[
								28249,
								28272
							],
							[
								28401,
								28429
							],
							[
								28478,
								28499
							],
							[
								28573,
								28594
							],
							[
								28655,
								28676
							],
							[
								28749,
								28795
							],
							[
								28844,
								28850
							],
							[
								28924,
								28930
							],
							[
								28996,
								29002
							],
							[
								29073,
								29095
							],
							[
								29550,
								29556
							],
							[
								29702,
								29708
							],
							[
								29756,
								29763
							],
							[
								29825,
								29833
							],
							[
								29890,
								29896
							],
							[
								29955,
								29961
							],
							[
								30023,
								30029
							],
							[
								30092,
								30098
							],
							[
								30377,
								30399
							],
							[
								30536,
								30542
							],
							[
								30547,
								30560
							],
							[
								30786,
								30795
							],
							[
								30832,
								30838
							],
							[
								30863,
								30870
							],
							[
								31032,
								31046
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6751,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23182,
								23188
							],
							[
								23330,
								23342
							],
							[
								23386,
								23416
							],
							[
								24013,
								24018
							],
							[
								24458,
								24467
							],
							[
								24490,
								24499
							],
							[
								24520,
								24527
							],
							[
								24560,
								24572
							],
							[
								25071,
								25100
							],
							[
								26276,
								26308
							],
							[
								26706,
								26713
							],
							[
								26757,
								26764
							],
							[
								26792,
								26814
							],
							[
								26843,
								26863
							],
							[
								27274,
								27304
							],
							[
								27565,
								27593
							],
							[
								27623,
								27627
							],
							[
								27646,
								27674
							],
							[
								27707,
								27726
							],
							[
								27785,
								27812
							],
							[
								27845,
								27864
							],
							[
								27939,
								27968
							],
							[
								28086,
								28109
							],
							[
								28249,
								28272
							],
							[
								28401,
								28429
							],
							[
								28478,
								28499
							],
							[
								28573,
								28594
							],
							[
								28655,
								28676
							],
							[
								28749,
								28795
							],
							[
								28844,
								28850
							],
							[
								28924,
								28930
							],
							[
								28996,
								29002
							],
							[
								29073,
								29095
							],
							[
								29550,
								29556
							],
							[
								29702,
								29708
							],
							[
								29756,
								29763
							],
							[
								29825,
								29833
							],
							[
								29890,
								29896
							],
							[
								29955,
								29961
							],
							[
								30023,
								30029
							],
							[
								30092,
								30098
							],
							[
								30377,
								30399
							],
							[
								30536,
								30542
							],
							[
								30547,
								30560
							],
							[
								30786,
								30795
							],
							[
								30832,
								30838
							],
							[
								30863,
								30870
							],
							[
								31032,
								31046
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6752,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23181,
								23187
							],
							[
								23329,
								23341
							],
							[
								23385,
								23415
							],
							[
								24004,
								24009
							],
							[
								24449,
								24458
							],
							[
								24481,
								24490
							],
							[
								24511,
								24518
							],
							[
								24551,
								24563
							],
							[
								25062,
								25091
							],
							[
								26267,
								26299
							],
							[
								26697,
								26704
							],
							[
								26748,
								26755
							],
							[
								26783,
								26805
							],
							[
								26834,
								26854
							],
							[
								27265,
								27295
							],
							[
								27556,
								27584
							],
							[
								27614,
								27618
							],
							[
								27637,
								27665
							],
							[
								27698,
								27717
							],
							[
								27776,
								27803
							],
							[
								27836,
								27855
							],
							[
								27930,
								27959
							],
							[
								28077,
								28100
							],
							[
								28240,
								28263
							],
							[
								28392,
								28420
							],
							[
								28469,
								28490
							],
							[
								28564,
								28585
							],
							[
								28646,
								28667
							],
							[
								28740,
								28786
							],
							[
								28835,
								28841
							],
							[
								28915,
								28921
							],
							[
								28987,
								28993
							],
							[
								29064,
								29086
							],
							[
								29541,
								29547
							],
							[
								29693,
								29699
							],
							[
								29747,
								29754
							],
							[
								29816,
								29824
							],
							[
								29881,
								29887
							],
							[
								29946,
								29952
							],
							[
								30014,
								30020
							],
							[
								30083,
								30089
							],
							[
								30368,
								30390
							],
							[
								30527,
								30533
							],
							[
								30538,
								30551
							],
							[
								30777,
								30786
							],
							[
								30823,
								30829
							],
							[
								30854,
								30861
							],
							[
								31023,
								31037
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6753,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23185,
								23191
							],
							[
								23333,
								23345
							],
							[
								23389,
								23419
							],
							[
								24008,
								24013
							],
							[
								24453,
								24462
							],
							[
								24485,
								24494
							],
							[
								24515,
								24522
							],
							[
								24555,
								24567
							],
							[
								25066,
								25095
							],
							[
								26271,
								26303
							],
							[
								26701,
								26708
							],
							[
								26752,
								26759
							],
							[
								26787,
								26809
							],
							[
								26838,
								26858
							],
							[
								27269,
								27299
							],
							[
								27560,
								27588
							],
							[
								27618,
								27622
							],
							[
								27641,
								27669
							],
							[
								27702,
								27721
							],
							[
								27780,
								27807
							],
							[
								27840,
								27859
							],
							[
								27934,
								27963
							],
							[
								28081,
								28104
							],
							[
								28244,
								28267
							],
							[
								28396,
								28424
							],
							[
								28473,
								28494
							],
							[
								28568,
								28589
							],
							[
								28650,
								28671
							],
							[
								28744,
								28790
							],
							[
								28839,
								28845
							],
							[
								28919,
								28925
							],
							[
								28991,
								28997
							],
							[
								29068,
								29090
							],
							[
								29545,
								29551
							],
							[
								29697,
								29703
							],
							[
								29751,
								29758
							],
							[
								29820,
								29828
							],
							[
								29885,
								29891
							],
							[
								29950,
								29956
							],
							[
								30018,
								30024
							],
							[
								30087,
								30093
							],
							[
								30372,
								30394
							],
							[
								30531,
								30537
							],
							[
								30542,
								30555
							],
							[
								30781,
								30790
							],
							[
								30827,
								30833
							],
							[
								30858,
								30865
							],
							[
								31027,
								31041
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6754,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23191,
								23197
							],
							[
								23339,
								23351
							],
							[
								23395,
								23425
							],
							[
								24014,
								24019
							],
							[
								24459,
								24468
							],
							[
								24491,
								24500
							],
							[
								24521,
								24528
							],
							[
								24561,
								24573
							],
							[
								25072,
								25101
							],
							[
								26277,
								26309
							],
							[
								26707,
								26714
							],
							[
								26758,
								26765
							],
							[
								26793,
								26815
							],
							[
								26844,
								26864
							],
							[
								27275,
								27305
							],
							[
								27566,
								27594
							],
							[
								27624,
								27628
							],
							[
								27647,
								27675
							],
							[
								27708,
								27727
							],
							[
								27786,
								27813
							],
							[
								27846,
								27865
							],
							[
								27940,
								27969
							],
							[
								28087,
								28110
							],
							[
								28250,
								28273
							],
							[
								28402,
								28430
							],
							[
								28479,
								28500
							],
							[
								28574,
								28595
							],
							[
								28656,
								28677
							],
							[
								28750,
								28796
							],
							[
								28845,
								28851
							],
							[
								28925,
								28931
							],
							[
								28997,
								29003
							],
							[
								29074,
								29096
							],
							[
								29551,
								29557
							],
							[
								29703,
								29709
							],
							[
								29757,
								29764
							],
							[
								29826,
								29834
							],
							[
								29891,
								29897
							],
							[
								29956,
								29962
							],
							[
								30024,
								30030
							],
							[
								30093,
								30099
							],
							[
								30378,
								30400
							],
							[
								30537,
								30543
							],
							[
								30548,
								30561
							],
							[
								30787,
								30796
							],
							[
								30833,
								30839
							],
							[
								30864,
								30871
							],
							[
								31033,
								31047
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6755,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22410,
								22414
							],
							[
								23213,
								23219
							],
							[
								23361,
								23373
							],
							[
								23417,
								23447
							],
							[
								24036,
								24041
							],
							[
								24481,
								24490
							],
							[
								24513,
								24522
							],
							[
								24543,
								24550
							],
							[
								24583,
								24595
							],
							[
								25094,
								25123
							],
							[
								26299,
								26331
							],
							[
								26729,
								26736
							],
							[
								26780,
								26787
							],
							[
								26815,
								26837
							],
							[
								26866,
								26886
							],
							[
								27297,
								27327
							],
							[
								27588,
								27616
							],
							[
								27646,
								27650
							],
							[
								27669,
								27697
							],
							[
								27730,
								27749
							],
							[
								27808,
								27835
							],
							[
								27868,
								27887
							],
							[
								27962,
								27991
							],
							[
								28109,
								28132
							],
							[
								28272,
								28295
							],
							[
								28424,
								28452
							],
							[
								28501,
								28522
							],
							[
								28596,
								28617
							],
							[
								28678,
								28699
							],
							[
								28772,
								28818
							],
							[
								28867,
								28873
							],
							[
								28947,
								28953
							],
							[
								29019,
								29025
							],
							[
								29096,
								29118
							],
							[
								29573,
								29579
							],
							[
								29725,
								29731
							],
							[
								29779,
								29786
							],
							[
								29848,
								29856
							],
							[
								29913,
								29919
							],
							[
								29978,
								29984
							],
							[
								30046,
								30052
							],
							[
								30115,
								30121
							],
							[
								30400,
								30422
							],
							[
								30559,
								30565
							],
							[
								30570,
								30583
							],
							[
								30809,
								30818
							],
							[
								30855,
								30861
							],
							[
								30886,
								30893
							],
							[
								31055,
								31069
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6756,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22414,
								22418
							],
							[
								23225,
								23231
							],
							[
								23373,
								23385
							],
							[
								23429,
								23459
							],
							[
								24048,
								24053
							],
							[
								24493,
								24502
							],
							[
								24525,
								24534
							],
							[
								24555,
								24562
							],
							[
								24595,
								24607
							],
							[
								25106,
								25135
							],
							[
								26311,
								26343
							],
							[
								26741,
								26748
							],
							[
								26792,
								26799
							],
							[
								26827,
								26849
							],
							[
								26878,
								26898
							],
							[
								27309,
								27339
							],
							[
								27600,
								27628
							],
							[
								27658,
								27662
							],
							[
								27681,
								27709
							],
							[
								27742,
								27761
							],
							[
								27820,
								27847
							],
							[
								27880,
								27899
							],
							[
								27974,
								28003
							],
							[
								28121,
								28144
							],
							[
								28284,
								28307
							],
							[
								28436,
								28464
							],
							[
								28513,
								28534
							],
							[
								28608,
								28629
							],
							[
								28690,
								28711
							],
							[
								28784,
								28830
							],
							[
								28879,
								28885
							],
							[
								28959,
								28965
							],
							[
								29031,
								29037
							],
							[
								29108,
								29130
							],
							[
								29585,
								29591
							],
							[
								29737,
								29743
							],
							[
								29791,
								29798
							],
							[
								29860,
								29868
							],
							[
								29925,
								29931
							],
							[
								29990,
								29996
							],
							[
								30058,
								30064
							],
							[
								30127,
								30133
							],
							[
								30412,
								30434
							],
							[
								30571,
								30577
							],
							[
								30582,
								30595
							],
							[
								30821,
								30830
							],
							[
								30867,
								30873
							],
							[
								30898,
								30905
							],
							[
								31067,
								31081
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6757,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22430,
								22434
							],
							[
								23245,
								23251
							],
							[
								23393,
								23405
							],
							[
								23449,
								23479
							],
							[
								24068,
								24073
							],
							[
								24513,
								24522
							],
							[
								24545,
								24554
							],
							[
								24575,
								24582
							],
							[
								24615,
								24627
							],
							[
								25126,
								25155
							],
							[
								26331,
								26363
							],
							[
								26761,
								26768
							],
							[
								26812,
								26819
							],
							[
								26847,
								26869
							],
							[
								26898,
								26918
							],
							[
								27329,
								27359
							],
							[
								27620,
								27648
							],
							[
								27678,
								27682
							],
							[
								27701,
								27729
							],
							[
								27762,
								27781
							],
							[
								27840,
								27867
							],
							[
								27900,
								27919
							],
							[
								27994,
								28023
							],
							[
								28141,
								28164
							],
							[
								28304,
								28327
							],
							[
								28456,
								28484
							],
							[
								28533,
								28554
							],
							[
								28628,
								28649
							],
							[
								28710,
								28731
							],
							[
								28804,
								28850
							],
							[
								28899,
								28905
							],
							[
								28979,
								28985
							],
							[
								29051,
								29057
							],
							[
								29128,
								29150
							],
							[
								29605,
								29611
							],
							[
								29757,
								29763
							],
							[
								29811,
								29818
							],
							[
								29880,
								29888
							],
							[
								29945,
								29951
							],
							[
								30010,
								30016
							],
							[
								30078,
								30084
							],
							[
								30147,
								30153
							],
							[
								30432,
								30454
							],
							[
								30591,
								30597
							],
							[
								30602,
								30615
							],
							[
								30841,
								30850
							],
							[
								30887,
								30893
							],
							[
								30918,
								30925
							],
							[
								31087,
								31101
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					6758,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								782,
								818
							],
							[
								1135,
								1160
							],
							[
								1197,
								1224
							],
							[
								1293,
								1319
							],
							[
								1377,
								1397
							],
							[
								1468,
								1486
							],
							[
								1736,
								1749
							],
							[
								1777,
								1783
							],
							[
								1836,
								1858
							],
							[
								2206,
								2230
							],
							[
								2535,
								2565
							],
							[
								2641,
								2669
							],
							[
								2680,
								2693
							],
							[
								2783,
								2796
							],
							[
								3062,
								3068
							],
							[
								3128,
								3148
							],
							[
								3265,
								3277
							],
							[
								3301,
								3328
							],
							[
								3383,
								3401
							],
							[
								3769,
								3781
							],
							[
								3790,
								3815
							],
							[
								3899,
								3908
							],
							[
								3997,
								4020
							],
							[
								4043,
								4049
							],
							[
								4079,
								4103
							],
							[
								4120,
								4126
							],
							[
								4188,
								4194
							],
							[
								4244,
								4268
							],
							[
								4585,
								4609
							],
							[
								4698,
								4704
							],
							[
								4951,
								4975
							],
							[
								5004,
								5010
							],
							[
								5101,
								5130
							],
							[
								5246,
								5255
							],
							[
								5406,
								5455
							],
							[
								5695,
								5701
							],
							[
								5956,
								5962
							],
							[
								6010,
								6016
							],
							[
								6585,
								6591
							],
							[
								6909,
								6914
							],
							[
								6992,
								7041
							],
							[
								7719,
								7724
							],
							[
								7904,
								7910
							],
							[
								8079,
								8085
							],
							[
								8749,
								8755
							],
							[
								8811,
								8817
							],
							[
								9006,
								9061
							],
							[
								9695,
								9712
							],
							[
								10012,
								10030
							],
							[
								10073,
								10089
							],
							[
								10182,
								10221
							],
							[
								10542,
								10546
							],
							[
								10685,
								10692
							],
							[
								10755,
								10766
							],
							[
								10964,
								10982
							],
							[
								11278,
								11295
							],
							[
								12679,
								12683
							],
							[
								13119,
								13125
							],
							[
								13145,
								13151
							],
							[
								13168,
								13174
							],
							[
								13428,
								13437
							],
							[
								13509,
								13515
							],
							[
								13620,
								13633
							],
							[
								13735,
								13739
							],
							[
								16831,
								16853
							],
							[
								16879,
								16885
							],
							[
								16916,
								16946
							],
							[
								16981,
								16987
							],
							[
								17013,
								17023
							],
							[
								17078,
								17102
							],
							[
								17163,
								17195
							],
							[
								17221,
								17234
							],
							[
								17261,
								17291
							],
							[
								17344,
								17379
							],
							[
								17384,
								17404
							],
							[
								17518,
								17549
							],
							[
								17827,
								17859
							],
							[
								18034,
								18071
							],
							[
								18155,
								18188
							],
							[
								18251,
								18272
							],
							[
								18378,
								18390
							],
							[
								18409,
								18432
							],
							[
								18565,
								18576
							],
							[
								18605,
								18621
							],
							[
								18653,
								18662
							],
							[
								18691,
								18705
							],
							[
								18737,
								18755
							],
							[
								18987,
								19022
							],
							[
								19808,
								19842
							],
							[
								19926,
								19938
							],
							[
								20128,
								20138
							],
							[
								20384,
								20391
							],
							[
								20410,
								20432
							],
							[
								20757,
								20775
							],
							[
								20917,
								20926
							],
							[
								20954,
								20975
							],
							[
								21217,
								21226
							],
							[
								21271,
								21281
							],
							[
								21412,
								21419
							],
							[
								21534,
								21546
							],
							[
								21576,
								21593
							],
							[
								21804,
								21814
							],
							[
								21864,
								21882
							],
							[
								21928,
								21953
							],
							[
								22067,
								22084
							],
							[
								22243,
								22260
							],
							[
								22430,
								22434
							],
							[
								23247,
								23253
							],
							[
								23395,
								23407
							],
							[
								23451,
								23481
							],
							[
								24070,
								24075
							],
							[
								24515,
								24524
							],
							[
								24547,
								24556
							],
							[
								24577,
								24584
							],
							[
								24617,
								24629
							],
							[
								25128,
								25157
							],
							[
								26333,
								26365
							],
							[
								26763,
								26770
							],
							[
								26814,
								26821
							],
							[
								26849,
								26871
							],
							[
								26900,
								26920
							],
							[
								27331,
								27361
							],
							[
								27622,
								27650
							],
							[
								27680,
								27684
							],
							[
								27703,
								27731
							],
							[
								27764,
								27783
							],
							[
								27842,
								27869
							],
							[
								27902,
								27921
							],
							[
								27996,
								28025
							],
							[
								28143,
								28166
							],
							[
								28306,
								28329
							],
							[
								28458,
								28486
							],
							[
								28535,
								28556
							],
							[
								28630,
								28651
							],
							[
								28712,
								28733
							],
							[
								28806,
								28852
							],
							[
								28901,
								28907
							],
							[
								28981,
								28987
							],
							[
								29053,
								29059
							],
							[
								29130,
								29152
							],
							[
								29607,
								29613
							],
							[
								29759,
								29765
							],
							[
								29813,
								29820
							],
							[
								29882,
								29890
							],
							[
								29947,
								29953
							],
							[
								30012,
								30018
							],
							[
								30080,
								30086
							],
							[
								30149,
								30155
							],
							[
								30434,
								30456
							],
							[
								30593,
								30599
							],
							[
								30604,
								30617
							],
							[
								30843,
								30852
							],
							[
								30889,
								30895
							],
							[
								30920,
								30927
							],
							[
								31089,
								31103
							]
						],
						"symlist":
						[
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function AddExport(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"ids()",
							"function AddImport(tokens, relativePath = s => s)",
							"ids()",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"function ProcessFile(source, log = () => {}, recursive)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"(acc, item, i) =>",
							"n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							" () =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"impexp =>",
							"hdr =>",
							"line =>",
							"(acc, line) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6CgAARmlsZUJhbm5lckNvbW1lbnQgPSAoZmlsZW5hbWUsIGkpID0+CklzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4KICBjb21wYWN0ID0gKG4sIG1vcmUgPSB7fSkgPT4KQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4KSW50VG9EV29yZCA9IGl2YWwgPT4KSW50VG9CaW5hcnkgPSBpID0+CihuLCB2YWx1ZSkgPT4KICBudW0gPT4KKHR5cGUsIGxleGVtZSwgdG9rKSA9PgpDb21wYXJlUmFuZ2UgPSAoYSwgYikgPT4KUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+CiAgZGVidWdMb2cgPSAoc3RyLCAuLi5hcmdzKSA9PgogIHByZWQgPSBhcmcgPT4KKGFjYywgb3B0KSA9PgogIGFyZyA9PgpGaWxlV3JpdGVyID0gZmlsZSA9PgogIGNsb3NlOiAoKSA9PgpGZFdyaXRlcihmZCwgbmFtZSkKICBmbiA9IChidWYsIGxlbikgPT4KICBjbG9zZTogKCkgPT4KICBzZWVrOiAod2hlbmNlLCBvZmZzZXQpID0+CiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCiAgdG9rID0+CkltcEV4cFR5cGUoc2VxKQogIHRvayA9PgogIHRvayA9PgpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCiAgdG9rID0+CkV4cG9ydE5hbWUoc2VxKQogIHRvayA9PgpCeXRlU2VxdWVuY2UodG9rZW5zKQoobiwgdCkgPT4KQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIGlkcygpCkFkZEltcG9ydCh0b2tlbnMsIHJlbGF0aXZlUGF0aCA9IHMgPT4gcykKICBpZHMoKQogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgogIHRvayA9PgpQcm9jZXNzRmlsZShzb3VyY2UsIGxvZyA9ICgpID0+IHt9LCByZWN1cnNpdmUpCiAgLmhhbmRsZXIgPSBsZXggPT4KICAuYmVnaW5Db2RlID0gKCkgPT4KICBiYWxhbmNlciA9ICgpID0+CiAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spCiAgcyA9PgogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQogIHNob3dUb2tlbiA9IHRvayA9PgpQYXRoQWRqdXN0ID0gcyA9PgogIGkgPT4KICBleHAgPT4KICBleHAgPT4KICB0b2sgPT4KKGEsIGIpID0+CiAgaW1wID0+CihhY2MsIGltcCkgPT4KICBiID0+Ck5vbldTKHRva2VucykKICB0b2sgPT4KVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9rID0+CiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKKGFjYywgdG9rKSA9PgpVbnRpbEVPTChpZHgsIHRva2VucykKVW50aWwoaWR4LCB0b2tlbnMsIHByZWQgPSAKKG51bGwsIFsnOycsICdcbiddKSkKV2hvbGVMaW5lKGlkeCwgdG9rZW5zKQpSYW5nZShmaWxlLCBzdGFydCwgZW5kKQpSYW5nZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpCkluUmFuZ2UoW3N0YXJ0LCBlbmRdLCBpKQpJc1JhbmdlKG9iaikKTnVtZXJpY1JhbmdlCiAgY29uc3RydWN0b3Ioc3RhcnQsIGVuZCkKICBnZXQgc3RhcnQoKQogIHNldCBzdGFydCh2YWx1ZSkKICBnZXQgZW5kKCkKICBzZXQgZW5kKHZhbHVlKQogIHN0YXRpYyBmcm9tKHJhbmdlKQogIHN0YXRpYyAqaG9sZXMocmFuZ2VzLCBvbmx5ID0gZmFsc2UpCiAgc3RhdGljIGJldHdlZW4oW3MxLCBlMV0sIFtzMiwgZTJdKQpOdW1lcmljUmFuZ2UKICBwYWQgPSBzID0+CkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCihbcmFuZ2UsIGJ1Zl0pID0+CiAgc2xpY2VBdChuKQogIChbcmFuZ2UsIGJ1Zl0pID0+CiAgcmVwbGFjZVJhbmdlKHJhbmdlLCBmaWxlKQogIHNsaWNlSW5kZXggPSBuID0+CihhY2MsIGl0ZW0sIGkpID0+CiAgbiA9PgogIGR1bXAoKQooaXRlbSwgaSkgPT4KKGFjYywgW3JhbmdlLCBidWYsIHN0cl0sIGkpID0+CiAgYXQoaSkKICB0b0FycmF5KCkKKHMsIGkpID0+CiAgaG9sZXMoKQooW3JhbmdlXSkgPT4KICB3cml0ZShvdXQsIGRlcHRoID0gMCwgc2VyaWFsKQogIHRvU3RyaW5nKGZuID0gRmlsZUJhbm5lckNvbW1lbnQpCkZpbGVNYXAKRmlsZU1hcAogIGZ1bmN0aW9uKGRlcHRoLCBvcHRzKQooW3JhbmdlLCBidWZdLCBpKSA9PgpCdWZmZXJGaWxlKGZpbGUsIGJ1ZikKQnVmZmVyTGVuZ3RocyhmaWxlKQogIGIgPT4KQnVmZmVyT2Zmc2V0cyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CkJ1ZmZlclJhbmdlcyhmaWxlKQooW3BvcywgbGlzdF0sIGIpID0+CldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spClByaW50RVM2SW1wb3J0KGltcCkKICAoeyBsb2NhbCwgZmlsZSB9KSA9PgogICh7IGxvY2FsLCBmaWxlIH0pID0+CiAgKHsgbG9jYWwsIGZpbGUgfSkgPT4KUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogICgpID0+CiAgKCkgPT4KICAoKSA9PgogIG1haW4oLi4uYXJncykKICAoKSA9PgogICgpID0+CiAgYXJnID0+CiAgZmlsZSA9PgogICgpID0+CiAgKCkgPT4KICAoKSA9PgogICgpID0+ClJlbGF0aXZlUGF0aCA9IGZpbGUgPT4KICAoKSA9PgogICguLi5hcmdzKSA9PgogIGltcGV4cCA9PgogIGhkciA9PgogIGxpbmUgPT4KKGFjYywgbGluZSkgPT4AAAAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "resolve-imports.js",
			"settings":
			{
				"buffer_size": 31422,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8402,
					1,
					"left_delete",
					null,
					"AQAAAHxYAAAAAAAAfFgAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAfVgAAAAAAAB9WAAAAAAAAAAAAAAAAPC/"
				],
				[
					8403,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAHxYAAAAAAAAfVgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfFgAAAAAAAB8WAAAAAAAAAAAAAAAAPC/"
				],
				[
					8416,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAMdYAAAAAAAAyVgAAAAAAAAAAAAArVgAAAAAAACvWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArVgAAAAAAADHWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8428,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAKtYAAAAAAAArFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAq1gAAAAAAACrWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8429,
					1,
					"insert",
					{
						"characters": " foile"
					},
					"BgAAAKxYAAAAAAAArVgAAAAAAAAAAAAArVgAAAAAAACuWAAAAAAAAAAAAACuWAAAAAAAAK9YAAAAAAAAAAAAAK9YAAAAAAAAsFgAAAAAAAAAAAAAsFgAAAAAAACxWAAAAAAAAAAAAACxWAAAAAAAALJYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArFgAAAAAAACsWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8430,
					4,
					"left_delete",
					null,
					"BAAAALFYAAAAAAAAsVgAAAAAAAABAAAAZbBYAAAAAAAAsFgAAAAAAAABAAAAbK9YAAAAAAAAr1gAAAAAAAABAAAAaa5YAAAAAAAArlgAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAslgAAAAAAACyWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8431,
					1,
					"insert",
					{
						"characters": "ile"
					},
					"AwAAAK5YAAAAAAAAr1gAAAAAAAAAAAAAr1gAAAAAAACwWAAAAAAAAAAAAACwWAAAAAAAALFYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArlgAAAAAAACuWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8436,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB6egAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgeyBMZXhlciwgVG9rZW4gfSBmcm9tICdsZXhlcic7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IEpTTGV4ZXIgZnJvbSAnanNsZXhlci5qcyc7CmltcG9ydCB7IHJhbmRJbnQsIGdldFR5cGVOYW1lLCBnZXRUeXBlU3RyLCBpc09iamVjdCwgc2hvcnRlbiwgdG9TdHJpbmcsIHRvQXJyYXlCdWZmZXIsIGRlZmluZSwgY3VycnksIHVuaXF1ZSwgc3BsaXQsIGV4dGVuZEFycmF5LCBjYW1lbGl6ZSwgdHlwZXMsIGdldE9wdCwgcXVvdGUsIGVzY2FwZSB9IGZyb20gJ3V0aWwnOwoKKCd1c2Ugc3RyaWN0Jyk7CigndXNlIG1hdGgnKTsKCmxldCBidWZmZXJzID0ge30sCiAgbW9kdWxlcyA9IHt9LAogIHJlbW92ZUV4cG9ydHMgPSBmYWxzZSwKICByZW1vdmVJbXBvcnRzID0gZmFsc2UsCiAgcmVtb3ZlQ29tbWVudHMgPSBmYWxzZSwKICByZWxhdGl2ZVRvLAogIG91dHB1dEZpbGUsCiAgcmVjdXJzaXZlID0gdHJ1ZSwKICBkZWJ1ZyA9IDAsCiAgaGVhZGVyID0gW10sCiAgcHJvY2Vzc2VkID0gbmV3IFNldCgpLAogIGJ1ZmZlclJlZiA9IG5ldyBXZWFrTWFwKCksCiAgZmlsZUJ1ZmZlcnMgPSBuZXcgTWFwKCksCiAgZmlsZU1hcHMgPSBuZXcgTWFwKCk7Cgpjb25zdCBGaWxlQmFubmVyQ29tbWVudCA9IChmaWxlbmFtZSwgaSkgPT4gewogIGxldCBzID0gJyc7CiAgcyArPSBgICR7aSA/ICdlbmQnIDogJ3N0YXJ0J30gb2YgJyR7cGF0aC5iYXNlbmFtZShmaWxlbmFtZSl9JyBgOwogIGxldCBuID0gTWF0aC5mbG9vcigoODAgLSA2IC0gcy5sZW5ndGgpIC8gMik7CiAgcyA9ICcvKiAnICsgJy0nLnJlcGVhdChuKSArIHM7CiAgcyArPSAnLScucmVwZWF0KDgwIC0gMyAtIHMubGVuZ3RoKSArICcgKi8nOwogIGlmKGkgPT0gMCkgcyA9ICdcbicgKyBzICsgJ1xuJzsKICBlbHNlIHMgPSBzICsgJ1xuJzsKICByZXR1cm4gczsKfTsKCmV4dGVuZEFycmF5KEFycmF5LnByb3RvdHlwZSk7CmNvbnN0IElzQnVpbHRpbiA9IG1vZHVsZU5hbWUgPT4gL15bXlwvLl0rJC8udGVzdChtb2R1bGVOYW1lKTsKY29uc3QgY29tcGFjdCA9IChuLCBtb3JlID0ge30pID0+IGNvbnNvbGUuY29uZmlnKHsgY29tcGFjdDogbiwgbWF4QXJyYXlMZW5ndGg6IDEwMCwgLi4ubW9yZSB9KTsKY29uc3QgQWRkVW5pcXVlID0gKGFyciwgaXRlbSkgPT4gKGFyci5pbmRleE9mKGl0ZW0pID09IC0xID8gYXJyLnB1c2goaXRlbSkgOiBudWxsKTsKY29uc3QgSW50VG9EV29yZCA9IGl2YWwgPT4gKGlzTmFOKGl2YWwpID09PSBmYWxzZSAmJiBpdmFsIDwgMCA/IGl2YWwgKyA0Mjk0OTY3Mjk2IDogaXZhbCk7CmNvbnN0IEludFRvQmluYXJ5ID0gaSA9PiAoaSA9PSAtMSB8fCB0eXBlb2YgaSAhPSAnbnVtYmVyJyA/IGkgOiAnMGInICsgSW50VG9EV29yZChpKS50b1N0cmluZygyKSk7Cgpjb25zdCBXaGF0ID0geyBJTVBPUlQ6IFN5bWJvbC5mb3IoJ2ltcG9ydCcpLCBFWFBPUlQ6IFN5bWJvbC5mb3IoJ2V4cG9ydCcpIH07CmNvbnN0IEltcG9ydFR5cGVzID0geyBJTVBPUlQ6IDAsIElNUE9SVF9ERUZBVUxUOiAxLCBJTVBPUlRfTkFNRVNQQUNFOiAyIH07CmNvbnN0IElzT25lT2YgPSBjdXJyeSgobiwgdmFsdWUpID0+IChBcnJheS5pc0FycmF5KG4pID8gbi5zb21lKG51bSA9PiBudW0gPT09IHZhbHVlKSA6IG4gPT09IHZhbHVlKSk7CmNvbnN0IFRva0lzID0gY3VycnkoKHR5cGUsIGxleGVtZSwgdG9rKSA9PiB7CiAgaWYodG9rICE9IHVuZGVmaW5lZCkgewogICAgaWYobGV4ZW1lICE9IHVuZGVmaW5lZCkgaWYgKHR5cGVvZiBsZXhlbWUgPT0gJ3N0cmluZycgJiYgIUlzT25lT2YobGV4ZW1lLCB0b2subGV4ZW1lKSkgcmV0dXJuIGZhbHNlOwogICAgaWYodHlwZSAhPSB1bmRlZmluZWQpIHsKICAgICAgaWYodHlwZW9mIHR5cGUgPT0gJ3N0cmluZycgJiYgIUlzT25lT2YodHlwZSwgdG9rLnR5cGUpKSByZXR1cm4gZmFsc2U7CiAgICAgIGlmKHR5cGVvZiB0eXBlID09ICdudW1iZXInICYmICFJc09uZU9mKHR5cGUsIHRvay5pZCkpIHJldHVybiBmYWxzZTsKICAgIH0KICAgIHJldHVybiB0cnVlOwogIH0KfSk7CmNvbnN0IENvbXBhcmVSYW5nZSA9IChhLCBiKSA9PiAoYSA9PT0gbnVsbCB8fCBiID09PSBudWxsID8gMCA6IHR5cGVvZiBhWzBdID09ICdudW1iZXInICYmIHR5cGVvZiBiWzBdID09ICdudW1iZXInICYmIGFbMF0gIT0gYlswXSA/IGFbMF0gLSBiWzBdIDogYVsxXSAtIGJbMV0pOwoKY29uc3QgSXNLZXl3b3JkID0gVG9rSXMoJ2tleXdvcmQnKTsKY29uc3QgSXNQdW5jdHVhdG9yID0gVG9rSXMoJ3B1bmN0dWF0b3InKTsKY29uc3QgSXNJZGVudGlmaWVyID0gVG9rSXMoJ2lkZW50aWZpZXInKTsKY29uc3QgSXNTdHJpbmdMaXRlcmFsID0gVG9rSXMoJ3N0cmluZ0xpdGVyYWwnKTsKY29uc3QgUHV0c0Z1bmN0aW9uID0gb3V0Rm4gPT4gc3RyID0+IHsKICBsZXQgYiA9IHRvQXJyYXlCdWZmZXIoc3RyKTsKICByZXR1cm4gb3V0Rm4oYiwgYi5ieXRlTGVuZ3RoKTsKfTsKCmNvbnN0IGRlYnVnTG9nID0gKHN0ciwgLi4uYXJncykgPT4gewogIGNvbnN0IHByZWQgPSBhcmcgPT4gaXNPYmplY3QoYXJnKSAmJiAnY29tcGFjdCcgaW4gYXJnOwogIGxldCBvcHRzID0gYXJncy5maWx0ZXIocHJlZCk7CgogIG9wdHMgPSBvcHRzLnJlZHVjZSgoYWNjLCBvcHQpID0+IGRlZmluZShhY2MsIG9wdCksIG9wdHMuc2hpZnQoKSA/PyB7fSk7CgogIGlmKG9wdHMuY29tcGFjdCA9PT0gdW5kZWZpbmVkKSBkZWZpbmUob3B0cywgY29tcGFjdCgxKSk7CiAgaWYob3B0cy5tYXhBcnJheUxlbmd0aCA9PT0gdW5kZWZpbmVkKSBkZWZpbmUob3B0cywgeyBtYXhBcnJheUxlbmd0aDogMTAgfSk7CiAgaWYob3B0cy5kZXB0aCA9PT0gdW5kZWZpbmVkKSBkZWZpbmUob3B0cywgeyBkZXB0aDogSW5maW5pdHkgfSk7CgogIGFyZ3MgPSBhcmdzLmZpbHRlcihhcmcgPT4gIXByZWQoYXJnKSk7CgogIGNvbnNvbGUubG9nKHN0ciwgb3B0cywgLi4uYXJncyk7Cn07Cgpjb25zdCBGaWxlV3JpdGVyID0gZmlsZSA9PiB7CiAgbGV0IGZkID0gb3Mub3BlbihmaWxlLCBvcy5PX1dST05MWSB8IG9zLk9fQ1JFQVQgfCBvcy5PX1RSVU5DLCAwbzY0NCk7CiAgcmV0dXJuIGRlZmluZShGZFdyaXRlcihmZCwgZmlsZSksIHsKICAgIGNsb3NlOiAoKSA9PiBvcy5jbG9zZShmZCkKICB9KTsKfTsKCmZ1bmN0aW9uIEZkV3JpdGVyKGZkLCBuYW1lKSB7CiAgLy9kZWJ1Z0xvZygnRmRXcml0ZXInLCB7IGZkLCBuYW1lIH0pOwogIGxldCBmbjsKICBmbiA9IChidWYsIGxlbikgPT4gewogICAgLy8gaWYoIWJ1ZiB8fCAhbGVuKSBpZiAodHlwZW9mIGZuLmNsb3NlID09ICdmdW5jdGlvbicpIHJldHVybiBmbi5jbG9zZSgpOwogICAgbGVuID8/PSBidWYuYnl0ZUxlbmd0aDsKICAgIGxldCByZXN1bHQgPSBvcy53cml0ZShmZCwgYnVmLCAwLCBsZW4pOwogICAgLy9kZWJ1Z0xvZygnRmRXcml0ZXIud3JpdGUnLCB7IGZkLCBidWY6IHNob3J0ZW4odG9TdHJpbmcoYnVmKSwgODApLCBsZW4sIHJlc3VsdCB9KTsKICAgIHJldHVybiByZXN1bHQ7CiAgfTsKCiAgZGVmaW5lKGZuLCB7CiAgICBmZCwKICAgIG5hbWUsCiAgICBmaWxlOiBuYW1lID8/IGZkLAogICAgcHV0czogUHV0c0Z1bmN0aW9uKGZuKSwKICAgIHdyaXRlOiBmbiwKICAgIGNsb3NlOiAoKSA9PiB7fSwKICAgIHNlZWs6ICh3aGVuY2UsIG9mZnNldCkgPT4gb3Muc2VlayhmZCwgd2hlbmNlLCBvZmZzZXQpLAoKICAgIFtTeW1ib2wudG9TdHJpbmdUYWddOiBgRmlsZVdyaXRlcjwgJHtmZH0gPmAsCiAgICBpbnNwZWN0KCkgewogICAgICByZXR1cm4gaW5zcGVjdCh7IGZkIH0pID8/IHRoaXNbU3ltYm9sLnRvU3RyaW5nVGFnXTsKICAgIH0KICB9KTsKICByZXR1cm4gZm47Cn0KCmZ1bmN0aW9uIEltcG9ydElkcyhzZXEpIHsKICByZXR1cm4gc2VxLmZpbHRlcih0b2sgPT4gSXNJZGVudGlmaWVyKG51bGwsIHRvaykpOwp9CgpmdW5jdGlvbiBJbXBFeHBUeXBlKHNlcSkgewogIGlmKHNlcS5zb21lKHRvayA9PiBJc0tleXdvcmQoJ2ltcG9ydCcsIHRvaykpKSByZXR1cm4gV2hhdC5JTVBPUlQ7CiAgaWYoc2VxLnNvbWUodG9rID0+IElzS2V5d29yZCgnZXhwb3J0JywgdG9rKSkpIHJldHVybiBXaGF0LkVYUE9SVDsKfQpmdW5jdGlvbiBJbXBvcnRUeXBlKHNlcSkgewogIGlmKElzS2V5d29yZChbJ2ltcG9ydCcsICdleHBvcnQnXSwgc2VxWzBdKSkgc2VxLnNoaWZ0KCk7CiAgaWYoSXNQdW5jdHVhdG9yKCcqJywgc2VxWzBdKSkgewogICAgaWYoSXNLZXl3b3JkKCdhcycsIHNlcVsxXSkpIHJldHVybiBJbXBvcnRUeXBlcy5JTVBPUlRfTkFNRVNQQUNFOwogIH0gZWxzZSBpZihJc0lkZW50aWZpZXIodW5kZWZpbmVkLCBzZXFbMF0pKSB7CiAgICBpZihJc0tleXdvcmQoJ2Zyb20nLCBzZXFbMV0pKSByZXR1cm4gSW1wb3J0VHlwZXMuSU1QT1JUX0RFRkFVTFQ7CiAgfQogIHJldHVybiBJbXBvcnRUeXBlcy5JTVBPUlQ7Cn0KCmZ1bmN0aW9uIEltcG9ydEZpbGUoc2VxKSB7CiAgc2VxID0gTm9uV1Moc2VxKTsKICAvL2NvbnNvbGUubG9nKCdJbXBvcnRGaWxlJywgeyBzZXEgfSk7CiAgbGV0IGlkeCA9IHNlcS5maW5kSW5kZXgodG9rID0+IElzS2V5d29yZCgnZnJvbScsIHRvaykpOwogIHdoaWxlKHNlcVtpZHhdICYmIHNlcVtpZHhdLnR5cGUgIT0gJ3N0cmluZ0xpdGVyYWwnKSArK2lkeDsKCiAgLy8gIGlmKHNlcVtpZHgtMV0ubGV4ZW1lID09ICdmcm9tJykKICBpZihzZXFbaWR4XSkgaWYgKHNlcVtpZHhdLnR5cGUgPT0gJ3N0cmluZ0xpdGVyYWwnKSByZXR1cm4gc2VxW2lkeF0ubGV4ZW1lLnJlcGxhY2UoL15bXCdcIlxgXSguKilbXCdcIlxgXSQvZywgJyQxJyk7Cn0KCmZ1bmN0aW9uIEV4cG9ydE5hbWUoc2VxKSB7CiAgbGV0IGlkeCA9IHNlcS5maW5kSW5kZXgodG9rID0+IElzSWRlbnRpZmllcih1bmRlZmluZWQsIHRvaykgfHwgSXNLZXl3b3JkKCdkZWZhdWx0JywgdG9rKSk7CiAgcmV0dXJuIHNlcVtpZHhdPy5sZXhlbWU7Cn0KCmZ1bmN0aW9uIEJ5dGVTZXF1ZW5jZSh0b2tlbnMpIHsKICBpZih0b2tlbnMubGVuZ3RoKSB7CiAgICBsZXQgeyBsb2MgfSA9IHRva2Vuc1swXTsKICAgIGxldCBzdGFydCA9IGxvYy5ieXRlT2Zmc2V0OwogICAgbGV0IHRvdGFsID0gdG9rZW5zLnJlZHVjZSgobiwgdCkgPT4gbiArIHQuYnl0ZUxlbmd0aCwgMCk7CiAgICBsZXQgZW5kID0gc3RhcnQgKyB0b3RhbDsKICAgIC8vbGV0IGxpbmUgPSB0b1N0cmluZyhCdWZmZXJGaWxlKGxvYy5maWxlKS5zbGljZShzdGFydCwgZW5kKSk7CiAgICByZXR1cm4gW3N0YXJ0LCBlbmRdOwogIH0KfQoKZnVuY3Rpb24gQWRkRXhwb3J0KHRva2VucywgcmVsYXRpdmVQYXRoID0gcyA9PiBzKSB7CiAgaWYodG9rZW5zWzBdLnNlcSA9PSB0b2tlbnNbMV0uc2VxKSB0b2tlbnMuc2hpZnQoKTsKCiAgY29uc3QgeyBsb2MsIHNlcSB9ID0gdG9rZW5zWzBdOwoKICBpZighL14oaW18ZXgpcG9ydCQvaS50ZXN0KHRva2Vuc1swXS5sZXhlbWUpKSB0aHJvdyBuZXcgRXJyb3IoYEFkZEV4cG9ydCB0b2tlbnM6IGAgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgbGV0IGRlZiA9IHRva2Vucy5zb21lKHRvayA9PiBJc0tleXdvcmQoJ2RlZmF1bHQnLCB0b2spKTsKICBsZXQgZmlsZSA9IEltcG9ydEZpbGUodG9rZW5zKTsgLy8gZnJvbUluZGV4ICE9IC0xID8gVW5xdW90ZSh0b2tlbnNbZnJvbUluZGV4ICsgMV0ubGV4ZW1lKSA6IG51bGw7CiAgaWYoZmlsZSA9PSAnICcpIHRocm93IG5ldyBFcnJvcignWFhYICcgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgY29uc3QgaWR4ID0gZGVmIHx8IGZpbGUgPyB0b2tlbnMuZmluZEluZGV4KHRvayA9PiB0b2subGV4ZW1lID09ICc7JykgOiB0b2tlbnMuc2xpY2UoMSkuZmluZEluZGV4KHRvayA9PiB0b2sudHlwZSAhPSAnd2hpdGVzcGFjZScpOwogIGNvbnN0IHJlbW92ZSA9IHRva2Vucy5zbGljZSgwLCBpZHggKyAxKTsgLy9pZHggKyAxKTsKICBpZihyZW1vdmVbMF0pIGlmIChyZW1vdmVbMF0ubGV4ZW1lICE9ICdleHBvcnQnKSB0aHJvdyBuZXcgRXJyb3IoYEFkZEV4cG9ydCB0b2tlbnM6IGAgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgY29uc3QgcmFuZ2UgPSBCeXRlU2VxdWVuY2UocmVtb3ZlKSA/PyBCeXRlU2VxdWVuY2UodG9rZW5zKTsKICBsZXQgc291cmNlID0gbG9jLmZpbGU7CiAgbGV0IHR5cGUgPSBJbXBFeHBUeXBlKHRva2Vucyk7CiAgbGV0IGNvZGUgPSB0b1N0cmluZyhCdWZmZXJGaWxlKHNvdXJjZSkuc2xpY2UoLi4ucmFuZ2UpKTsKICAvL2NvbnNvbGUubG9nKCdBZGRFeHBvcnQnLCB7cmVtb3ZlLHJhbmdlLGNvZGV9KTsKICBsZXQgbGVuID0gdG9rZW5zLmxlbmd0aDsKICAvLyAgY29uc29sZS5sb2coJ0FkZEV4cG9ydCcsIHsgcmFuZ2UsIGNvZGUgfSk7CiAgaWYodG9rZW5zWzFdLmxleGVtZSAhPSAneycpIGxlbiA9IHRva2Vucy5maW5kSW5kZXgodG9rID0+IElzSWRlbnRpZmllcih1bmRlZmluZWQsIHRvaykgfHwgSXNLZXl3b3JkKCdkZWZhdWx0JywgdG9rKSkgKyAxOwogIHRva2VucyA9IHRva2Vucy5zbGljZSgwLCBsZW4pOwogIGxldCBleHAgPSBkZWZpbmUoCiAgICB7CiAgICAgIHR5cGU6IFdoYXQuRVhQT1JULAogICAgICBmaWxlOiBmaWxlICYmIC9cLi8udGVzdChmaWxlKSA/IHJlbGF0aXZlUGF0aChmaWxlKSA6IGZpbGUsCiAgICAgIHRva2VucywKICAgICAgZXhwb3J0ZWQ6IEV4cG9ydE5hbWUodG9rZW5zKSwKICAgICAgcmFuZ2UKICAgIH0sCiAgICB7CiAgICAgIGNvZGUsCiAgICAgIGxvYywKICAgICAgaWRzKCkgewogICAgICAgIHJldHVybiBJbXBvcnRJZHModGhpcy50b2tlbnMpOwogICAgICB9CiAgICB9CiAgKTsKICByZXR1cm4gZXhwOwp9CgpmdW5jdGlvbiBBZGRJbXBvcnQodG9rZW5zLCByZWxhdGl2ZVBhdGggPSBzID0+IHMpIHsKICBpZighL14oaW18ZXgpcG9ydCQvaS50ZXN0KHRva2Vuc1swXS5sZXhlbWUpKSB0aHJvdyBuZXcgRXJyb3IoYEFkZEltcG9ydCB0b2tlbnM6IGAgKyBpbnNwZWN0KHRva2VucywgeyBjb21wYWN0OiBmYWxzZSB9KSk7CiAgY29uc3QgdG9rID0gdG9rZW5zWzBdOwogIGNvbnN0IHsgbG9jLCBzZXEgfSA9IHRvazsKICBsZXQgc291cmNlID0gbG9jLmZpbGU7CiAgbGV0IHR5cGUgPSBJbXBFeHBUeXBlKHRva2Vucy5zbGljZSgpKSwKICAgIGZpbGUgPSBJbXBvcnRGaWxlKHRva2Vucy5zbGljZSgpKTsKICBjb25zdCByYW5nZSA9IEJ5dGVTZXF1ZW5jZSh0b2tlbnMuc2xpY2UoKSk7CiAgcmFuZ2VbMF0gPSBsb2MuYnl0ZU9mZnNldDsKICBsZXQgY29kZSA9IHRvU3RyaW5nKEJ1ZmZlckZpbGUoc291cmNlKS5zbGljZSguLi5yYW5nZSkpOwoKICAvL2RlYnVnTG9nKCdBZGRJbXBvcnQnLCB7IHR5cGUsIGZpbGUsY29kZSxyYW5nZSB9KTsKCiAgLy9pZighL1wuLy50ZXN0KGZpbGUpKSByZXR1cm4gbnVsbDsKICBsZXQgaW1wID0gZGVmaW5lKAogICAgeyB0eXBlLCBmaWxlOiBmaWxlICYmIC9cLi8udGVzdChmaWxlKSA/IHJlbGF0aXZlUGF0aChmaWxlKSA6IGZpbGUsIHJhbmdlIH0sCiAgICB7CiAgICAgIHRva2VuczogdG9rZW5zLnNsaWNlKCksCiAgICAgIGNvZGUsCiAgICAgIGxvYywKICAgICAgaWRzKCkgewogICAgICAgIHJldHVybiBJbXBvcnRJZHModG9rZW5zLnNsaWNlKCkpOwogICAgICB9CiAgICB9CiAgKTsKICBsZXQgZm4gPSB7CiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX05BTUVTUEFDRV0oKSB7CiAgICAgIGNvbnN0IHsgdG9rZW5zIH0gPSB0aGlzOwogICAgICBsZXQgaWR4ID0gdG9rZW5zLmZpbmRJbmRleCh0b2sgPT4gSXNLZXl3b3JkKCdhcycsIHRvaykpOwogICAgICByZXR1cm4gdG9rZW5zW2lkeCArIDFdLmxleGVtZTsKICAgIH0sCiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX0RFRkFVTFRdKCkgewogICAgICBjb25zdCB7IHRva2VucyB9ID0gdGhpczsKICAgICAgbGV0IGlkeCA9IHRva2Vucy5maW5kSW5kZXgodG9rID0+IElzS2V5d29yZCgnaW1wb3J0JywgdG9rKSk7CiAgICAgIHJldHVybiB0b2tlbnNbaWR4ICsgMV0ubGV4ZW1lOwogICAgfSwKICAgIFtJbXBvcnRUeXBlcy5JTVBPUlRdKCkgewogICAgICBjb25zdCB7IHRva2VucyB9ID0gdGhpczsKICAgICAgbGV0IGlkeCA9IDAsCiAgICAgICAgc3BlY2lmaWVyID0gW10sCiAgICAgICAgc3BlY2lmaWVycyA9IFtdOwogICAgICBpZihJc0tleXdvcmQoWydpbXBvcnQnLCAnZXhwb3J0J10sIHRva2Vuc1tpZHhdKSkgKytpZHg7CiAgICAgIGlmKElzUHVuY3R1YXRvcigneycsIHRva2Vuc1tpZHhdKSkgKytpZHg7CiAgICAgIGZvcig7IHRva2Vuc1tpZHhdICYmICFJc0tleXdvcmQoJ2Zyb20nLCB0b2tlbnNbaWR4XSk7ICsraWR4KSB7CiAgICAgICAgaWYoSXNQdW5jdHVhdG9yKFsnLCcsICd9J10sIHRva2Vuc1tpZHhdKSkgewogICAgICAgICAgaWYoc3BlY2lmaWVyLmxlbmd0aCkgc3BlY2lmaWVycy5wdXNoKHNwZWNpZmllcik7CiAgICAgICAgICBzcGVjaWZpZXIgPSBbXTsKICAgICAgICB9IGVsc2UgaWYoSXNJZGVudGlmaWVyKHRva2Vuc1tpZHhdKSkgewogICAgICAgICAgc3BlY2lmaWVyLnB1c2godG9rZW5zW2lkeF0pOwogICAgICAgIH0KICAgICAgfQogICAgICBzcGVjaWZpZXJzID0gc3BlY2lmaWVycy5mbGF0KCkuZmlsdGVyKHRvayA9PiB0b2sudHlwZSA9PSAnaWRlbnRpZmllcicpOwogICAgICByZXR1cm4gc3BlY2lmaWVycy5tYXAodG9rID0+IHRvay5sZXhlbWUpOwogICAgfQogIH1bdHlwZV07CgogIGlmKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nKSB7CiAgICBsZXQgbG9jYWwgPSBmbi5jYWxsKGltcCk7CgogICAgLy8gY29uc29sZS5sb2coJ0FkZEltcG9ydCcsIHsgbG9jYWwgfSk7CiAgICBkZWZpbmUoaW1wLCB7IGxvY2FsIH0pOwogIH0KCiAgcmV0dXJuIGltcDsKfQoKZnVuY3Rpb24gUHJvY2Vzc0ZpbGUoc291cmNlLCBsb2cgPSAoKSA9PiB7fSwgcmVjdXJzaXZlKSB7CiAgbGV0IHN0YXJ0ID0gRGF0ZS5ub3coKTsKICBjb25zdCBkaXIgPSBwYXRoLmRpcm5hbWUoc291cmNlKTsKICAvL2NvbnNvbGUubG9nKCdQcm9jZXNzRmlsZScsIHtzb3VyY2UsZGlyfSk7CgogIGxldCBieXRlYnVmID0gc291cmNlID8gQnVmZmVyRmlsZShzb3VyY2UpIDogY29kZVsxXTsKCiAgbGV0IGxlbiA9IGJ5dGVidWYuYnl0ZUxlbmd0aCwKICAgIHR5cGUgPSBwYXRoLmV4dG5hbWUoc291cmNlKS5zdWJzdHJpbmcoMSksCiAgICBiYXNlID0gY2FtZWxpemUocGF0aC5iYXNlbmFtZShzb3VyY2UsICcuJyArIHR5cGUpLnJlcGxhY2UoL1teMC05QS1aYS16X10vZywgJ18nKSk7CgogIGxldCBsZXggPSB7CiAgICBqczogbmV3IEpTTGV4ZXIoYnl0ZWJ1Ziwgc291cmNlKQogIH07CiAgbGV4Lm1qcyA9IGxleC5qczsKICBsZXguY2pzID0gbGV4LmpzOwoKICBjb25zdCBsZXhlciA9IGxleFt0eXBlXTsKCiAgLy8gVCA9IGxleGVyLnRva2Vucy5yZWR1Y2UoKGFjYywgbmFtZSwgaWQpID0+ICh7IC4uLmFjYywgW25hbWVdOiBpZCB9KSwge30pOwoKICBsZXQgZSA9IG5ldyBTeW50YXhFcnJvcigpOwoKICBpZighbGV4ZXIpIHRocm93IG5ldyBFcnJvcihgRXJyb3IgbGV4aW5nOiAke3NvdXJjZX1gKTsKCiAgbGV4ZXIuaGFuZGxlciA9IGxleCA9PiB7CiAgICBjb25zdCB7IGxvYywgbW9kZSwgcG9zLCBzdGFydCwgYnl0ZUxlbmd0aCwgc3RhdGUgfSA9IGxleDsKICAgIGxvZygnICcucmVwZWF0KGxvYy5jb2x1bW4gLSAxKSArICdeJyk7CiAgfTsKICBsZXQgdG9rZW5MaXN0ID0gW10sCiAgICBkZWNsYXJhdGlvbnMgPSBbXTsKICBjb25zdCBjb2xTaXplcyA9IFsxMiwgOCwgNCwgMjAsIDMyLCAxMCwgMF07CgogIGxldCB0b2ssCiAgICBpID0gMCwKICAgIG1hc2sgPSBJbnRUb0JpbmFyeShsZXhlci5tYXNrKSwKICAgIHN0YXRlID0gbGV4ZXIudG9wU3RhdGUoKTsKICBsZXhlci5iZWdpbkNvZGUgPSAoKSA9PiAoY29kZSA9PSAnanMnID8gMGIxMDAwIDogMGIwMTAwKTsKICBjb25zdCBiYWxhbmNlciA9ICgpID0+IHsKICAgIGxldCBzZWxmOwogICAgbGV0IHN0YWNrID0gW107CiAgICBjb25zdCB0YWJsZSA9IHsgJ30nOiAneycsICddJzogJ1snLCAnKSc6ICcoJyB9OwogICAgc2VsZiA9IGZ1bmN0aW9uIFBhcmVudGhlc2VCYWxhbmNlcih0b2spIHsKICAgICAgc3dpdGNoICh0b2s/LmxleGVtZSkgewogICAgICAgIGNhc2UgJ3snOgogICAgICAgIGNhc2UgJ1snOgogICAgICAgIGNhc2UgJygnOiB7CiAgICAgICAgICBzdGFjay5wdXNoKHRvay5sZXhlbWUpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGNhc2UgJ30nOgogICAgICAgIGNhc2UgJ10nOgogICAgICAgIGNhc2UgJyknOiB7CiAgICAgICAgICBpZihzdGFjay5sYXN0ICE9IHRhYmxlW3Rvay5sZXhlbWVdKSB0aHJvdyBuZXcgRXJyb3IoYHRvcCAnJHtzdGFjay5sYXN0fScgIT0gJyR7dG9rLmxleGVtZX0nIFsgJHtzdGFjay5tYXAocyA9PiBgJyR7c30nYCkuam9pbignLCAnKX0gXWApOwoKICAgICAgICAgIHN0YWNrLnBvcCgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9OwogICAgT2JqZWN0LmFzc2lnbihzZWxmLCB7CiAgICAgIHN0YWNrLAogICAgICByZXNldCgpIHsKICAgICAgICBzdGFjay5jbGVhcigpOwogICAgICB9LAogICAgICAvKiBwcmV0dGllci1pZ25vcmUgKi8gZ2V0IGRlcHRoKCkgewogICAgICAgIHJldHVybiBzdGFjay5sZW5ndGg7CiAgICAgIH0KICAgIH0pOwoKICAgIHJldHVybiBzZWxmOwogIH07CiAgbGV0IGJhbGFuY2VycyA9IFtiYWxhbmNlcigpXSwKICAgIGltcG9ydHMgPSBbXSwKICAgIGV4cG9ydHMgPSBbXSwKICAgIGNvbW1lbnRzID0gW10sCiAgICBpbXBleHAsCiAgICBjb25kLAogICAgaW1wID0gW10sCiAgICBzaG93VG9rZW4gPSB0b2sgPT4gewogICAgICBpZigobGV4ZXIuY29uc3RydWN0b3IgIT0gSlNMZXhlciAmJiB0b2sudHlwZSAhPSAnd2hpdGVzcGFjZScpIHx8IC9eKChpbXxleClwb3J0fGZyb218YXMpJC8udGVzdCh0b2subGV4ZW1lKSkgewogICAgICAgIGxldCBhID0gWy8qKGZpbGUgKyAnOicgKyB0b2subG9jKS5wYWRFbmQoZmlsZS5sZW5ndGgrMTApLCovIHRvay50eXBlLnBhZEVuZCgyMCwgJyAnKSwgZXNjYXBlKHRvay5sZXhlbWUpXTsKICAgICAgICBzdGQucHV0cyhhLmpvaW4oJycpICsgJ1xuJyk7CiAgICAgIH0KICAgIH07CgogIGNvbnN0IFBhdGhBZGp1c3QgPSBzID0+IHsKICAgIGxldCBqID0gcGF0aC5qb2luKGRpciwgcyk7CiAgICBqID0gcGF0aC5jb2xsYXBzZShqKTsKICAgIGlmKHBhdGguaXNSZWxhdGl2ZShqKSkgaiA9ICcuLycgKyBqOwogICAgcmV0dXJuIGo7CiAgfTsKICBsZXQgcHJldlRva2VuOwogIGZvcig7OykgewogICAgbGV0IHsgc3RhdGVEZXB0aCB9ID0gbGV4ZXI7CiAgICBsZXQgdmFsdWUgPSBsZXhlci5uZXh0KCk7CiAgICBsZXQgZG9uZSA9IHZhbHVlID09PSB1bmRlZmluZWQ7CiAgICBpZihkb25lKSBicmVhazsKICAgIGxldCBuZXdTdGF0ZSA9IGxleGVyLnRvcFN0YXRlKCk7CiAgICBpZihuZXdTdGF0ZSAhPSBzdGF0ZSkgewogICAgICBpZihzdGF0ZSA9PSAnVEVNUExBVEUnICYmIGxleGVyLnN0YXRlRGVwdGggPiBzdGF0ZURlcHRoKSBiYWxhbmNlcnMucHVzaChiYWxhbmNlcigpKTsKICAgICAgaWYobmV3U3RhdGUgPT0gJ1RFTVBMQVRFJyAmJiBsZXhlci5zdGF0ZURlcHRoIDwgc3RhdGVEZXB0aCkgYmFsYW5jZXJzLnBvcCgpOwogICAgfQogICAgbGV0IG4gPSBiYWxhbmNlcnMubGFzdC5kZXB0aDsKICAgIGNvbnN0IHsgdG9rZW4gfSA9IGxleGVyOwogICAgY29uc3QgeyBsb2MsIGxlbmd0aCwgc2VxIH0gPSB0b2tlbjsKICAgIGNvbnN0IHsgcG9zIH0gPSBsb2M7CiAgICAvLyAgbGV0IHMgPSB0b1N0cmluZyhieXRlYnVmKS5zbGljZShwb3MsIHBvcyArIGxlbmd0aCk7CiAgICAvLyAgY29uc29sZS5sb2coJycsdG9rZW4ubGV4ZW1lLCB7cG9zLCBzLCBsZW5ndGh9KQoKICAgIGlmKG4gPT0gMCAmJiB0b2tlbi5sZXhlbWUgPT0gJ30nICYmIGxleGVyLnN0YXRlRGVwdGggPiAwKSB7CiAgICAgIGxleGVyLnBvcFN0YXRlKCk7CiAgICB9IGVsc2UgewogICAgICBiYWxhbmNlcih0b2tlbik7CiAgICAgIGlmKG4gPiAwICYmIGJhbGFuY2Vycy5sYXN0LmRlcHRoID09IDApIGxvZygnYmFsYW5jZXInKTsKICAgICAgaWYoL2NvbW1lbnQvaS50ZXN0KHRva2VuLnR5cGUpKSB7CiAgICAgICAgY29tbWVudHMucHVzaCh0b2tlbik7CiAgICAgIH0KICAgICAgaWYoWydpbXBvcnQnLCAnZXhwb3J0J10uaW5kZXhPZih0b2tlbi5sZXhlbWUpID49IDApIHsKICAgICAgICBpbXBleHAgPSBXaGF0W3Rva2VuLmxleGVtZS50b1VwcGVyQ2FzZSgpXTsKICAgICAgICBjb25kID0gdHJ1ZTsKICAgICAgICBpbXAgPSB0b2tlbi5sZXhlbWUgPT0gJ2V4cG9ydCcgPyBbdG9rZW5dIDogW107CiAgICAgIH0KICAgICAgaWYoY29uZCA9PSB0cnVlKSB7CiAgICAgICAgaW1wLnB1c2godG9rZW4pOwogICAgICAgIGlmKFsnOyddLmluZGV4T2YodG9rZW4ubGV4ZW1lKSAhPSAtMSkgewogICAgICAgICAgY29uZCA9IGZhbHNlOwogICAgICAgICAgaWYoaW1wZXhwID09IFdoYXQuSU1QT1JUIHx8IGltcC5zb21lKGkgPT4gaS5sZXhlbWUgPT0gJ2Zyb20nKSkgewogICAgICAgICAgICBsZXQgb2JqID0gQWRkSW1wb3J0KGltcCwgUGF0aEFkanVzdCk7CiAgICAgICAgICAgIGlmKG9iaikgaW1wb3J0cy5wdXNoKG9iaik7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBleHBvcnRzLnB1c2goQWRkRXhwb3J0KGltcCwgUGF0aEFkanVzdCkpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBwcmV2VG9rZW4gPSB0b2tlbjsKICAgIH0KICAgIHN0YXRlID0gbmV3U3RhdGU7CiAgfQogIGxldCBlbmQgPSBEYXRlLm5vdygpOwoKICBjb25zb2xlLmxvZyhgTGV4aW5nICcke3NvdXJjZS5yZXBsYWNlKC9eXC5cLy8sICcnKX0nIHRvb2sgJHtlbmQgLSBzdGFydH1tc2ApOwogIHN0YXJ0ID0gRGF0ZS5ub3coKTsKCiAgbGV0IGV4cG9ydHNGcm9tID0gZXhwb3J0cy5maWx0ZXIoZXhwID0+IGV4cC50b2tlbnMpLmZpbHRlcihleHAgPT4gZXhwLnRva2Vucy5zb21lKHRvayA9PiB0b2subGV4ZW1lID09ICdmcm9tJykpOwoKICBpZihwYXRoLmlzUmVsYXRpdmUoc291cmNlKSAmJiAhL14oXC58XC5cLilcLy8udGVzdChzb3VyY2UpKSBzb3VyY2UgPSAnLi8nICsgc291cmNlOwoKICAvLyBjb25zb2xlLmxvZygnZXhwb3J0c0Zyb20nLCBleHBvcnRzKTsKCiAgbW9kdWxlc1tzb3VyY2VdID0geyBpbXBvcnRzLCBleHBvcnRzIH07CgogIGxldCBhbGxFeHBvcnRzSW1wb3J0cyA9IGV4cG9ydHMuY29uY2F0KGltcG9ydHMpLnNvcnQoKGEsIGIpID0+IGEucmFuZ2VbMF0gLSBiLnJhbmdlWzBdKTsKICBsZXQgZmlsZUltcG9ydHMgPSBhbGxFeHBvcnRzSW1wb3J0cy5maWx0ZXIoaW1wID0+IHR5cGVvZiBpbXAuZmlsZSA9PSAnc3RyaW5nJyk7IC8vL1wuanMkL2kudGVzdChpbXAuZmlsZSkpOwogIGxldCBzcGxpdFBvaW50cyA9IHVuaXF1ZShmaWxlSW1wb3J0cy5yZWR1Y2UoKGFjYywgaW1wKSA9PiBbLi4uYWNjLCAuLi5pbXAucmFuZ2VdLCBbXSkpOwogIGJ1ZmZlcnNbc291cmNlXSA9IFsuLi5zcGxpdChCdWZmZXJGaWxlKHNvdXJjZSksIC4uLnNwbGl0UG9pbnRzKV0ubWFwKGIgPT4gYiA/PyB0b1N0cmluZyhiLCAwLCBiLmJ5dGVMZW5ndGgpKTsKCiAgLypjb25zb2xlLmxvZygnZmlsZUltcG9ydHMnLCBmaWxlSW1wb3J0cyk7Ki8KCiAgbGV0IG1hcCA9IEZpbGVNYXAuZm9yKHNvdXJjZSk7CgogIGZvcihsZXQgaW1wZXhwIG9mIGFsbEV4cG9ydHNJbXBvcnRzKSB7CiAgICBjb25zdCB7IHR5cGUsIGZpbGUsIHJhbmdlLCBjb2RlLCBsb2MgfSA9IGltcGV4cDsKICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHJhbmdlOwogICAgLy8gbGV0IGJ5dGVidWYgPSBCdWZmZXJGaWxlKHNvdXJjZSk7CiAgICBsZXQgYnVmc3RyID0gdG9TdHJpbmcoYnl0ZWJ1Zi5zbGljZSguLi5yYW5nZSkpOwogICAgbGV0IGFycmJ1ZiA9IHRvQXJyYXlCdWZmZXIoYnVmc3RyKTsKCiAgICAvLyBjb25zb2xlLmxvZygnaW1wZXhwJywgeyB0eXBlLGZpbGUgfSk7CiAgICBsZXQgcmVwbGFjZW1lbnQgPSB0eXBlID09IFdoYXQuRVhQT1JUID8gbnVsbCA6IC8qRmlsZU1hcC5mb3IqLyBmaWxlOwogICAgbGV0IHsgYnl0ZU9mZnNldCB9ID0gbG9jOwoKICAgIGlmKGJ1ZnN0ciA9PSAnICcpIHRocm93IG5ldyBFcnJvcihgYnVmc3RyID0gJyAnIGxvYzogJHtsb2N9ICR7bG9jLmJ5dGVPZmZzZXR9IHJhbmdlOiAke3JhbmdlfSBjb2RlOiBgICsgdG9TdHJpbmcoYnl0ZWJ1Zi5zbGljZShsb2MuYnl0ZU9mZnNldCwgcmFuZ2VbMV0gKyAxMCkpKTsKCiAgICAvL2lmKHJlcGxhY2VtZW50ID09IG51bGwpIGRlYnVnTG9nKCdyZXBsYWNlUmFuZ2UnLCBpbnNwZWN0KHsgZmlsZTogbWFwLmZpbGUsIGJ1ZnN0ciwgcmFuZ2UsIHJlcGxhY2VtZW50LCBsb2M6IGxvYyArICcnIH0sIHsgY29tcGFjdDogMywgZGVwdGg6IDMgfSkgKTsKICAgIC8vZGVidWdMb2coJ2ltcGV4cCcsIGNvbXBhY3QoMiksIHsgZmlsZSwgY29kZSwgbG9jOiBsb2MgKyAnJywgcmFuZ2U6IG5ldyBOdW1lcmljUmFuZ2UoLi4ucmFuZ2UpLCByZW1vdmVFeHBvcnRzLCB0eXBlIH0pOwoKICAgIGlmKGZpbGUgJiYgLyovW1wuXC9dLy50ZXN0KGZpbGUpICYmKi8gcGF0aC5leGlzdHMoZmlsZSkpIHsKICAgICAgcmVwbGFjZW1lbnQgPSBmaWxlOwogICAgICAvLyAgaGVhZGVyLnB1c2goaW1wZXhwKTsKICAgIH0gZWxzZSBpZigodHlwZW9mIHJlcGxhY2VtZW50ID09ICdzdHJpbmcnICYmICFwYXRoLmV4aXN0cyhyZXBsYWNlbWVudCkpIHx8IHR5cGUgPT0gV2hhdC5JTVBPUlQgfHwgdHlwZW9mIGZpbGUgPT0gJ3N0cmluZycpIHsKICAgICAgcmVwbGFjZW1lbnQgPSBudWxsOwogICAgICBoZWFkZXIucHVzaChpbXBleHApOwogICAgfSBlbHNlIGlmKCFmaWxlICYmIGNvZGUuc3RhcnRzV2l0aCgnZXhwb3J0JykpIHsKICAgICAgaWYoIXJlbW92ZUV4cG9ydHMpIGNvbnRpbnVlOwogICAgICByZXBsYWNlbWVudCA9IG51bGw7CiAgICB9CgogICAgLy9kZWJ1Z0xvZygnaW1wZXhwJywgY29tcGFjdCgyKSwgeyBjb2RlLCByYW5nZTogbmV3IE51bWVyaWNSYW5nZSguLi5yYW5nZSksIHJlcGxhY2VtZW50LCBsb2M6IGxvYyArICcnIH0pOwoKICAgIG1hcC5yZXBsYWNlUmFuZ2UocmFuZ2UsIHJlcGxhY2VtZW50KTsKICB9CgogIC8vICBkZWJ1Z0xvZygnY29tbWVudHMnLCBjb21tZW50cy5tYXAoKHtieXRlUmFuZ2UsIGxleGVtZX0pPT5bYnl0ZVJhbmdlLGxleGVtZSx0b1N0cmluZyhieXRlYnVmLnNsaWNlKC4uLmJ5dGVSYW5nZSkpXSkpOwogIC8vCiAgaWYocmVtb3ZlQ29tbWVudHMpIHsKICAgIGkgPSAtMTsKICAgIGRlYnVnTG9nKGBSZW1vdmluZyAke2NvbW1lbnRzLmxlbmd0aH0gY29tbWVudHMgZnJvbSAnJHtzb3VyY2V9J2ApOwogICAgZm9yKGxldCB7IGJ5dGVSYW5nZSwgbGV4ZW1lIH0gb2YgY29tbWVudHMpIHsKICAgICAgbGV0IHNsID0gYnl0ZWJ1Zi5zbGljZSguLi5ieXRlUmFuZ2UpOwogICAgICBkZWJ1Z0xvZyhgY29tbWVudFskeysraX1dYCwgY29tcGFjdCgyKSwgeyBieXRlUmFuZ2UsIHN0cjogdG9TdHJpbmcoc2wpIH0pOwoKICAgICAgbWFwLnJlcGxhY2VSYW5nZShieXRlUmFuZ2UsIG51bGwpOwogICAgfQogIH0KCiAgZGVidWdMb2coJ21hcCcsIG1hcC5kdW1wKCkpOwoKICAvL2lmKGRlYnVnPiAxKSBjb25zb2xlLmxvZygnZHVtcCBtYXAnLCBtYXAuZHVtcCgpKTsKCiAgZW5kID0gRGF0ZS5ub3coKTsKCiAgLy8gY29uc29sZS5sb2coYFN1YnN0aXR1dGluZyAnJHtzb3VyY2UucmVwbGFjZSgvXlwuXC8vLCAnJyl9JyB0b29rICR7ZW5kIC0gc3RhcnR9bXNgKTsKICBwcm9jZXNzZWQuYWRkKHNvdXJjZSk7CgogIGlmKHJlY3Vyc2l2ZSA+IDApIHsKICAgIGZvcihsZXQgaW1wIG9mIGZpbGVJbXBvcnRzKSB7CiAgICAgIGNvbnN0IHsgZmlsZSwgcmFuZ2UsIHRva2VucyB9ID0gaW1wOwogICAgICBpZighL1wuLy50ZXN0KGZpbGUpKSB7CiAgICAgICAgLy8gY29uc29sZS5sb2coYEJ1aWx0aW4gbW9kdWxlICcke2ZpbGV9J2ApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmKCFwYXRoLmV4aXN0cyhmaWxlKSkgewogICAgICAgIGNvbnNvbGUubG9nKGBQYXRoIG11c3QgZXhpc3QgJyR7ZmlsZX0nYCk7CiAgICAgICAgY29udGludWU7CiAgICAgIH0KICAgICAgaWYocHJvY2Vzc2VkLmhhcyhmaWxlKSB8fCBmaWxlID09IHNvdXJjZSkgewogICAgICAgIC8vY29uc29sZS5sb2coYEFscmVhZHkgcHJvY2Vzc2VkICcke2ZpbGV9J2ApOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIC8vICBjb25zb2xlLmxvZyhgUHJvY2Vzc0ZpbGUucmVjdXJzaXZlYCwgeyBmaWxlIH0pOwogICAgICBsZXQgYXJncyA9IFtmaWxlLCBsb2csIHR5cGVvZiByZWN1cnNpdmUgPT0gJ251bWJlcicgPyByZWN1cnNpdmUgLSAxIDogcmVjdXJzaXZlXTsKICAgICAgLy8gICAgY29uc29sZS5sb2coYFByb2Nlc3NGaWxlKCR7YXJncy5qb2luKCcsICcpfSlgKTsKICAgICAgcHJvY2Vzc2VkLmFkZChmaWxlKTsKCiAgICAgIFByb2Nlc3NGaWxlKC4uLmFyZ3MpOwogICAgfQogIH0KICAvKgogIGxldCBlbmQgPSBEYXRlLm5vdygpOwogIGNvbnNvbGUubG9nKGAnJHtzb3VyY2UucmVwbGFjZSgvXlwuXC8vLCAnJyl9JyB0b29rICR7ZW5kIC0gc3RhcnR9bXNgKTsKKi8KCiAgc3RkLmdjKCk7CgogIHJldHVybiBtYXA7Cn0KCmZ1bmN0aW9uIE5vbldTKHRva2VucykgewogIHJldHVybiB0b2tlbnMuZmlsdGVyKHRvayA9PiB0b2sudHlwZSAhPSAnd2hpdGVzcGFjZScpOwp9CgpmdW5jdGlvbiBUb2tlblNlcXVlbmNlKHRva2VucykgewogIHJldHVybiBkZWZpbmUoCiAgICB0b2tlbnMubWFwKHRvayA9PiB0b2subGV4ZW1lKSwKICAgIHsKICAgICAgdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuam9pbignJyk7CiAgICAgIH0KICAgIH0KICApOwp9CgpmdW5jdGlvbiBVbnF1b3RlKGxleGVtZSkgewogIHJldHVybiBsZXhlbWUucmVwbGFjZSgvKF5bXCdcIlxgXXxbXCdcIlxgXSQpL2csICcnKTsKfQoKZnVuY3Rpb24gTGl0ZXJhbFNlcXVlbmNlKHRva2VucykgewogIHJldHVybiB0b2tlbnMucmVkdWNlKChhY2MsIHRvaykgPT4gYWNjICsgdG9rLmxleGVtZSwgJycpOwp9CgpmdW5jdGlvbiBVbnRpbEVPTChpZHgsIHRva2VucykgewogIHJldHVybiBVbnRpbChpZHgsIHRva2VucywgVG9rSXMobnVsbCwgJzsnKSk7Cn0KCmZ1bmN0aW9uIFVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gVG9rSXMobnVsbCwgWyc7JywgJ1xuJ10pKSB7CiAgbGV0IGk7CiAgZm9yKGkgPSBpZHg7IHRva2Vuc1tpXTsgaSsrKSB7CiAgICBpZihwcmVkKHRva2Vuc1tpXSkpIGJyZWFrOwogIH0KICByZXR1cm4gdG9rZW5zLnNsaWNlKGlkeCwgaSk7Cn0KCmZ1bmN0aW9uIFdob2xlTGluZShpZHgsIHRva2VucykgewogIGxldCBpLCBqOwogIGZvcihpID0gaWR4OyB0b2tlbnNbaV07IGkrKykgewogICAgaWYoWyc7JywgJ1xuJ10uaW5kZXhPZih0b2tlbnNbaV0ubGV4ZW1lKSAhPSAtMSkgYnJlYWs7CiAgfQogIGZvcihqID0gaWR4OyBqID4gMDsgai0tKSB7CiAgICBjb25zdCB0b2sgPSB0b2tlbnNbaiAtIDFdOwogICAgaWYoIXRvayB8fCBbJzsnLCAnXG4nXS5pbmRleE9mKHRva2Vuc1tqIC0gMV0ubGV4ZW1lKSAhPSAtMSkgYnJlYWs7CiAgfQogIHJldHVybiB0b2tlbnMuc2xpY2UoaiwgaSk7Cn0KCmZ1bmN0aW9uIFJhbmdlKGZpbGUsIHN0YXJ0LCBlbmQpIHsKICBsZXQgYnVmOwogIGlmKChidWYgPSBCdWZmZXJGaWxlKGZpbGUpKSkgewogICAgdGhpcy5maWxlID0gZmlsZTsKICAgIHRoaXMuc3RhcnQgPSBzdGFydCA/PyAwOwogICAgdGhpcy5lbmQgPSBlbmQgPz8gYnVmLmJ5dGVMZW5ndGg7CiAgICByZXR1cm4gdGhpczsKICB9CiAgcmV0dXJuIG51bGw7Cn0KClJhbmdlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkgewogIGxldCBidWYgPSBCdWZmZXJGaWxlKHRoaXMuZmlsZSk7CiAgcmV0dXJuIGJ1Zi5zbGljZSh0aGlzLnN0YXJ0LCB0aGlzLmVuZCk7Cn07CgpmdW5jdGlvbiBJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkgewogIGlmKGkgPj0gc3RhcnQgJiYgaSA8IGVuZCkgcmV0dXJuIHRydWU7CiAgcmV0dXJuIGZhbHNlOwp9CgpmdW5jdGlvbiBJc1JhbmdlKG9iaikgewogIHJldHVybiBpc09iamVjdChvYmopICYmICgnbGVuZ3RoJyBpbiBvYmogfHwgJ3N0YXJ0JyBpbiBvYmogfHwgb2JqIGluc3RhbmNlb2YgTnVtZXJpY1JhbmdlKTsKfQoKY2xhc3MgTnVtZXJpY1JhbmdlIGV4dGVuZHMgQXJyYXkgewogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpIHsKICAgIHN1cGVyKDIpOwogICAgaWYoaXNOYU4oK3N0YXJ0KSkgc3RhcnQgPSAwOwogICAgdGhpc1swXSA9ICtzdGFydDsKICAgIGlmKGlzTmFOKCtlbmQpKSBlbmQgPSB0aGlzWzBdOwogICAgdGhpc1sxXSA9IGVuZDsKICB9CgogIGdldCBzdGFydCgpIHsKICAgIHJldHVybiB0aGlzWzBdOwogIH0KICBzZXQgc3RhcnQodmFsdWUpIHsKICAgIHRoaXNbMF0gPSArdmFsdWU7CiAgfQoKICBnZXQgZW5kKCkgewogICAgcmV0dXJuIHRoaXNbMV07CiAgfQogIHNldCBlbmQodmFsdWUpIHsKICAgIHRoaXNbMV0gPSArdmFsdWU7CiAgfQoKICBzdGF0aWMgZnJvbShyYW5nZSkgewogICAgaWYoaXNPYmplY3QocmFuZ2UpICYmIHJhbmdlIGluc3RhbmNlb2YgTnVtZXJpY1JhbmdlKSByZXR1cm4gcmFuZ2U7CgogICAgdHJ5IHsKICAgICAgbGV0IHIgPSBuZXcgTnVtZXJpY1JhbmdlKC4uLnJhbmdlKTsKICAgICAgcmFuZ2UgPSByOwogICAgfSBjYXRjaChlKSB7fQogICAgY29uc29sZS5sb2coJ051bWVyaWNSYW5nZS5mcm9tJywgcmFuZ2UpOwogICAgcmV0dXJuIHJhbmdlOwogIH0KCiAgc3RhdGljICpob2xlcyhyYW5nZXMsIG9ubHkgPSBmYWxzZSkgewogICAgbGV0IHByZXYgPSBbMCwgMF07CiAgICAvL2NvbnNvbGUubG9nKCdyYW5nZXMnLCBjb25zb2xlLmNvbmZpZyh7IGNvbXBhY3Q6IDEgfSksIHJhbmdlcyk7CiAgICBsZXQgaSA9IC0xOwogICAgZm9yKGxldCByYW5nZSBvZiByYW5nZXMpIHsKICAgICAgaWYoSXNSYW5nZShyYW5nZSkpIHsKICAgICAgICByYW5nZSA9IFsuLi5yYW5nZV07CiAgICAgICAgY29uc29sZS5sb2coJ3JhbmdlIycgKyArK2ksIGluc3BlY3QocmFuZ2UpKTsKCiAgICAgICAgaWYoSXNSYW5nZShwcmV2KSAmJiBJc1JhbmdlKHJhbmdlKSkgewogICAgICAgICAgLy8gICAgIGlmKHJhbmdlWzBdIDwgcHJldlsxXSkgcmFuZ2VbMF0gPSBwcmV2WzFdOwogICAgICAgICAgbGV0IFtzdGFydCwgZW5kXSA9IHJhbmdlOwoKICAgICAgICAgIGlmKHN0YXJ0ID49IHByZXZbMV0pIHlpZWxkIG5ldyBOdW1lcmljUmFuZ2UocHJldlsxXSwgc3RhcnQpOwogICAgICAgICAgLy8gIGVsc2UgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHJhbmdlIGAgKyBpbnNwZWN0KFtzdGFydCwgZW5kXSkgKyAnICcgKyBpbnNwZWN0KHsgcHJldjogWy4uLnByZXZdIH0pKTsKICAgICAgICB9CgogICAgICAgIGlmKCFvbmx5KSB7CiAgICAgICAgICBpZighKGlzT2JlY3QocmFuZ2UpICYmIHJhbmdlIGluc3RhbmNlb2YgTnVtZXJpY1JhbmdlKSkgcmFuZ2UgPSBuZXcgTnVtZXJpY1JhbmdlKC4uLnJhbmdlKTsKICAgICAgICAgIHlpZWxkIHJhbmdlOwogICAgICAgIH0KICAgICAgfQogICAgICBwcmV2ID0gcmFuZ2U7CiAgICB9CiAgfQoKICBzdGF0aWMgYmV0d2VlbihbczEsIGUxXSwgW3MyLCBlMl0pIHsKICAgIGlmKHMyID4gZTEpIHJldHVybiBbZTEsIHMyXTsKCiAgICBpZihzMSA+IGUyKSByZXR1cm4gW2UyLCBzMV07CiAgfQp9CgpkZWZpbmUoTnVtZXJpY1JhbmdlLnByb3RvdHlwZSwgewogIFtTeW1ib2wudG9TdHJpbmdUYWddOiAnTnVtZXJpY1JhbmdlJywKICBbU3ltYm9sLmluc3BlY3RdKGRlcHRoLCBvcHRzKSB7CiAgICBjb25zdCBbc3RhcnQsIGVuZF0gPSB0aGlzOwogICAgbGV0IHMgPSAnJzsKICAgIC8vcyArPSBgXHgxYlsxOzMxbU51bWVyaWNSYW5nZVx4MWJbMG0oYDsKICAgIGNvbnN0IHBhZCA9IHMgPT4gKHMgKyAnJykucGFkRW5kKDUpOwoKICAgIHMgKz0gYFx4MWJbMTszNm0ke3BhZChzdGFydCl9XHgxYlswbWA7CiAgICBzICs9IGAgLSBgOwogICAgLy8gIHMgKz0gYFx4MWJbMTszNm0ke3BhZChlbmQpfVx4MWJbMG1gOwogICAgcyArPSBgXHgxYlsxOzM2bSR7cGFkKCcrJyArIChlbmQgLSBzdGFydCkpfVx4MWJbMG1gOwogICAgLy9zKz1gKWA7CiAgICBzID0gYFsgJHtzfSBdYDsKICAgIHJldHVybiBzOwogIH0KfSk7CgpjbGFzcyBGaWxlTWFwIGV4dGVuZHMgQXJyYXkgewogIGNvbnN0cnVjdG9yKGZpbGUsIGJ1ZikgewogICAgc3VwZXIoKTsKCiAgICBpZih0eXBlb2YgZmlsZSAhPSAnbnVtYmVyJykgewogICAgICAvL2NvbnNvbGUubG9nKCdGaWxlTWFwLmNvbnN0cnVjdG9yJyx7ZmlsZSxidWZ9KTsKICAgICAgdGhpcy5maWxlID0gZmlsZTsKICAgICAgYnVmID8/PSBCdWZmZXJGaWxlKGZpbGUpOwogICAgICBpZighYnVmKSB0aHJvdyBuZXcgRXJyb3IoYEZpbGVNYXAgYnVmID09ICR7YnVmfWApOwogICAgICB0aGlzLnB1c2goW25ldyBOdW1lcmljUmFuZ2UoMCwgYnVmLmJ5dGVMZW5ndGgpLCBidWZdKTsKICAgICAgZmlsZU1hcHMuc2V0KGZpbGUsIHRoaXMpOwogICAgfQogIH0KCiAgc3RhdGljIGVtcHR5KGZpbGUpIHsKICAgIGlmKHR5cGVvZiBmaWxlID09ICdzdHJpbmcnKSBmaWxlID0gRmlsZU1hcC5mb3IoZmlsZSk7CgogICAgaWYoaXNPYmplY3QoZmlsZSkgJiYgZmlsZSBpbnN0YW5jZW9mIEZpbGVNYXApIHJldHVybiBmaWxlLmlzRW1wdHkoKTsKICB9CgogIGlzRW1wdHkoKSB7CiAgICByZXR1cm4gZmFsc2U7CiAgfQoKICBzdGF0aWMgZm9yKGZpbGUsIGJ1ZikgewogICAgLy8gY29uc29sZS5sb2coJ0ZpbGVNYXAuZm9yJywgeyBmaWxlLCBidWYgfSk7CiAgICBsZXQgbTsKICAgIGlmKGZpbGUgJiYgKG0gPSBmaWxlTWFwcy5nZXQoZmlsZSkpKSByZXR1cm4gbTsKCiAgICBpZihpc09iamVjdChmaWxlKSAmJiBmaWxlIGluc3RhbmNlb2YgRmlsZU1hcCkgcmV0dXJuIGZpbGU7CiAgICBlbHNlIGlmKGZpbGUgPT09IG51bGwgJiYgIWJ1ZikgewogICAgICBsZXQgb2JqID0gewogICAgICAgIGlzRW1wdHkoKSB7CiAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICB9LAogICAgICAgIHRvU3RyaW5nKCkgewogICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0sCiAgICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdGaWxlTWFwKGVtcHR5KScKICAgICAgfTsKICAgICAgcmV0dXJuIE9iamVjdC5zZXRQcm90b3R5cGVPZihvYmosIEZpbGVNYXAucHJvdG90eXBlKTsKICAgIH0KICAgIGlmKGZpbGVNYXBzLmhhcyhmaWxlKSkgcmV0dXJuIGZpbGVNYXBzLmdldChmaWxlKTsKICAgIHJldHVybiBuZXcgRmlsZU1hcChmaWxlLCBidWYpOwogIH0KCiAgc3BsaXRBdChwb3MpIHsKICAgIGxldCBpID0gdGhpcy5maW5kSW5kZXgoKFtyYW5nZSwgYnVmXSkgPT4gcmFuZ2UgJiYgSW5SYW5nZShyYW5nZSwgcG9zKSk7CgogICAgaWYoaSAhPSAtMSkgewogICAgICBsZXQgW3JhbmdlLCBidWZdID0gdGhpc1tpXTsKICAgICAgbGV0IFtzdGFydCwgZW5kXSA9IHJhbmdlOwogICAgICB0aGlzLnNwbGljZShpICsgMSwgMCwgW1socmFuZ2VbMV0gPSBwb3MpLCBlbmRdLCBidWZdKTsKICAgICAgcmV0dXJuIGkgKyAxOwogICAgfQogIH0KCiAgc2xpY2VBdChuKSB7CiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleC5jYWxsKHRoaXMsIChbcmFuZ2UsIGJ1Zl0pID0+IChyYW5nZSA/IEluUmFuZ2UocmFuZ2UsIG4pIDogZmFsc2UpKTsKICB9CgogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkgewogICAgaWYoQXJyYXkuaXNBcnJheShyYW5nZSkgJiYgIShyYW5nZSBpbnN0YW5jZW9mIE51bWVyaWNSYW5nZSkpIHJhbmdlID0gbmV3IE51bWVyaWNSYW5nZSguLi5yYW5nZSk7CiAgICBjb25zdCBzbGljZUluZGV4ID0gbiA9PiB7CiAgICAgIGxldCByOwogICAgICBpZih0aGlzWzBdKSB7CiAgICAgICAgY29uc3QgcmFuZ2UgPSBuZXcgTnVtZXJpY1JhbmdlKC4uLnRoaXNbMF1bMF0pOwogICAgICAgIGlmKG4gPCByYW5nZS5zdGFydCkgcmV0dXJuIDA7CiAgICAgIH0KICAgICAgciA9IHRoaXMucmVkdWNlKChhY2MsIGl0ZW0sIGkpID0+IHsKICAgICAgICBpZihhY2MgPT09IHVuZGVmaW5lZCkgcmV0dXJuIFtpLCBpdGVtWzBdWzBdXTsKICAgICAgICBpZihpdGVtWzBdKSB7CiAgICAgICAgICBpZihuID49IGl0ZW1bMF1bMV0pIHJldHVybiBbaSArIDEsIGl0ZW1bMF1bMV1dOwogICAgICAgICAgaWYobiA9PiBpdGVtWzBdWzBdKSByZXR1cm4gW2ksIGl0ZW1bMF1bMF1dOwogICAgICAgIH0KICAgICAgICByZXR1cm4gYWNjOwogICAgICB9LCB1bmRlZmluZWQpOwogICAgICByZXR1cm4gclswXTsKICAgIH07CiAgICBsZXQgc3RhcnQgPSBzbGljZUluZGV4KHJhbmdlLnN0YXJ0KTsKICAgIGxldCBlbmQgPSBzbGljZUluZGV4KHJhbmdlLmVuZCk7CgogICAgZGVidWdMb2coYEZpbGVNYXAucmVwbGFjZVJhbmdlYCwgY29tcGFjdCgyLCB7IG1heEFycmF5TGVuZ3RoOiAxMCB9KSwgeyByYW5nZSwgc3RhcnQsIGVuZCwgZmlsZSB9LyosICd0aGlzW2VuZF0gPScsIHRoaXNbZW5kXSovKTsKCiAgICBpZihyYW5nZS5zdGFydCA+IHRoaXNbc3RhcnRdWzBdLnN0YXJ0KSB7CiAgICAgIGlmKHN0YXJ0ID09IGVuZCkgewogICAgICAgIGxldCBbcmFuZ2UsIGJ1Zl0gPSB0aGlzW3N0YXJ0XTsKICAgICAgICBsZXQgaW5zZXJ0ID0gW25ldyBOdW1lcmljUmFuZ2UoLi4ucmFuZ2UpLCBidWZdOwogICAgICAgIHRoaXMuc3BsaWNlKCsrZW5kLCAwLCBpbnNlcnQpOwogICAgICB9CiAgICAgIHRoaXNbc3RhcnRdWzBdLmVuZCA9IHJhbmdlLnN0YXJ0OwogICAgICBpZih0aGlzW2VuZF0gJiYgdGhpc1tlbmRdWzBdKSB0aGlzW2VuZF1bMF0uc3RhcnQgPSByYW5nZS5lbmQ7CiAgICB9IGVsc2UgewogICAgICB0aGlzW3N0YXJ0XVswXS5zdGFydCA9IHJhbmdlLmVuZDsKICAgIH0KCiAgICBpZihmaWxlICE9IG51bGwpIHRoaXMuc3BsaWNlKHN0YXJ0ICsgMSwgMCwgW251bGwsIGZpbGVdKTsKICB9CgogIGR1bXAoKSB7CiAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmZpbGU7CiAgICByZXR1cm4gKAogICAgICBgRmlsZU1hcCB7XG5cdGZpbGU6IFx4MWJbMzg7NTsyMTVtJHtzb3VyY2V9LFxuXHRceDFiWzBtWyBgICsKICAgICAgWy4uLnRoaXNdCiAgICAgICAgLm1hcCgoaXRlbSwgaSkgPT4gaXRlbS5jb25jYXQoW3RoaXMuYXQoaSldKSkKICAgICAgICAucmVkdWNlKChhY2MsIFtyYW5nZSwgYnVmLCBzdHJdLCBpKSA9PiB7CiAgICAgICAgICBsZXQgcyA9IGFjYyArIGBcblx0XHRbIGA7CiAgICAgICAgICBzICs9ICgnJyArIChyYW5nZSA/ICdbJyArIE51bWVyaWNSYW5nZS5mcm9tKHJhbmdlKSArICddJyA6IHJhbmdlKSkucGFkRW5kKDEwKTsKCiAgICAgICAgICBzICs9ICcsICc7CiAgICAgICAgICAvKmlmKCFpc09iamVjdChzdHIpKSBzICs9IHF1b3RlKHNob3J0ZW4oc3RyKSwgIiciKTsKICAgICAgICAgIGVsc2UqLwogICAgICAgICAgaWYoaXNPYmplY3QoYnVmKSAmJiAnYnl0ZUxlbmd0aCcgaW4gYnVmKSB7CiAgICAgICAgICAgIGxldCBmaWxlbmFtZSA9IGJ1ZmZlclJlZi5nZXQoYnVmKTsKICAgICAgICAgICAgYnVmID0gZmlsZW5hbWUgPz8gYDx0aGlzPmA7CiAgICAgICAgICB9CiAgICAgICAgICBpZih0eXBlb2YgYnVmID09ICdzdHJpbmcnKSBidWYgPSBwYXRoLm5vcm1hbGl6ZShidWYpOwoKICAgICAgICAgIHMgKz0gaW5zcGVjdChidWYsIHsgbWF4QXJyYXlMZW5ndGg6IDMwIH0pOwogICAgICAgICAgcyArPSBgIF0sYDsKICAgICAgICAgIHJldHVybiBzOwogICAgICAgIH0sICcnKSArCiAgICAgIGBcblx0XVxufWAKICAgICk7CiAgfQoKICBhdChpKSB7CiAgICBjb25zdCBbcmFuZ2UsIGJ1Zl0gPSB0aGlzW2ldOwogICAgaWYocmFuZ2UgJiYgYnVmKSB7CiAgICAgIGNvbnN0IFtzdGFydCwgZW5kXSA9IHJhbmdlOwogICAgICByZXR1cm4gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpOwogICAgfQogICAgaWYocmFuZ2UgPT0gbnVsbCkgewogICAgICBsZXQgZmlsZSA9IGJ1ZjsKICAgICAgbGV0IHN0ciA9IGJ1ZjsKICAgICAgaWYodHlwZW9mIHN0ciA9PSAnc3RyaW5nJykgewogICAgICAgIGlmKCFwYXRoLmV4aXN0cyhzdHIpKSB0aHJvdyBFcnJvcihgSW5leGlzdGVudCBmaWxlICcke3N0cn0nYCk7CiAgICAgICAgc3RyID0gRmlsZU1hcC5mb3Ioc3RyKTsKICAgICAgfQogICAgICByZXR1cm4gc3RyOwogICAgfQogICAgdGhyb3cgbmV3IEVycm9yKGBhdCgke2l9KSBgICsgaW5zcGVjdCh7IHJhbmdlLCBidWYgfSkpOwogIH0KCiAgdG9BcnJheSgpIHsKICAgIHJldHVybiB0aGlzLm1hcCgocywgaSkgPT4gdGhpcy5hdChpKSk7CiAgfQoKICBob2xlcygpIHsKICAgIGxldCByYW5nZXMgPSBbLi4udGhpcy5tYXAoKFtyYW5nZV0pID0+IHJhbmdlKV0uc29ydChDb21wYXJlUmFuZ2UpOwoKICAgIGNvbnNvbGUubG9nKCdyYW5nZXMnLCBjb25zb2xlLmNvbmZpZyh7IGRlcHRoOiBJbmZpbml0eSB9KSwgcmFuZ2VzKTsKCiAgICBsZXQgaXRlciA9IE51bWVyaWNSYW5nZS5ob2xlcyhyYW5nZXMsIHRydWUpOwogICAgY29uc29sZS5sb2coJ2l0ZXInLCBpdGVyKTsKICAgIGxldCBob2xlcyA9IFsuLi5pdGVyXTsKICAgIGxldCBsZW4gPSBob2xlcy5sZW5ndGg7CiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgICAgY29uc3QgaG9sZSA9IGhvbGVzW2ldOwogICAgICBjb25zdCBbcmFuZ2VdID0gdGhpc1tpXTsKCiAgICAgIGNvbnNvbGUubG9nKCcjJyArIChpICsgMSksIGNvbXBhY3QoMiksIGluc3BlY3QoeyBob2xlLCByYW5nZSB9LCB7IGNvbXBhY3Q6IDIsIGRlcHRoOiA0IH0pKTsKICAgIH0KICAgIC8vY29uc29sZS5sb2coJ2hvbGVzJywgaG9sZXMpOwoKICAgIHJldHVybiBob2xlczsKICB9CgogIHdyaXRlKG91dCwgZGVwdGggPSAwLCBzZXJpYWwpIHsKICAgIGlmKGRlYnVnKSBkZWJ1Z0xvZyhgRmlsZU1hcFx4MWJbMTszNW08JHt0aGlzLmZpbGV9Plx4MWJbMG0ud3JpdGVgLCBjb21wYWN0KDEpLCB7IG91dCwgZGVwdGgsIHNlcmlhbCB9KTsKICAgIGxldCByLAogICAgICB3cml0dGVuID0gMDsKICAgIGxldCB7IGxlbmd0aCB9ID0gdGhpczsKICAgIHNlcmlhbCA/Pz0gcmFuZEludCgwLCAxMDAwKTsKICAgIGlmKHRoaXMuc2VyaWFsID09PSBzZXJpYWwpIHJldHVybiAwOwogICAgdGhpcy5zZXJpYWwgPSBzZXJpYWw7CiAgICBpZih0eXBlb2Ygb3V0ID09ICdzdHJpbmcnKSBvdXQgPSBGaWxlV3JpdGVyKG91dCk7CiAgICBmb3IobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKICAgICAgbGV0IHN0ciA9IHRoaXMuYXQoaSk7CiAgICAgIGxldCBsZW4gPSBzdHIuYnl0ZUxlbmd0aCA/PyBzdHIubGVuZ3RoOwogICAgICBpZihpc09iamVjdChzdHIpKSB7CiAgICAgICAgaWYoc3RyIGluc3RhbmNlb2YgRmlsZU1hcCkgewogICAgICAgICAgaWYoc3RyLnNlcmlhbCA9PT0gc2VyaWFsKSB7CiAgICAgICAgICAgIHIgPSAwOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIG91dC5wdXRzKEZpbGVCYW5uZXJDb21tZW50KHN0ci5maWxlLCAwKSk7CiAgICAgICAgICByID0gc3RyLndyaXRlKG91dCwgZGVwdGggKyAxLCBzZXJpYWwpOwogICAgICAgICAgb3V0LnB1dHMoRmlsZUJhbm5lckNvbW1lbnQoc3RyLmZpbGUsIDEpKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgLy8gY29uc29sZS5sb2coJ291dCcsIG91dCk7CiAgICAgICAgICByID0gb3V0KHN0ciwgbGVuKTsKICAgICAgICAgIGlmKHIgIT0gbGVuKSByID0gLTE7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRocm93IG5ldyBFcnJvcihnZXRUeXBlTmFtZShzdHIpKTsKICAgICAgfQogICAgICAvL2RlYnVnTG9nKGBGaWxlTWFwXHgxYlsxOzM1bTwke3RoaXMuZmlsZX0+XHgxYlswbS53cml0ZWAsIGBbJHtpICsgMX0vJHtsZW5ndGh9XWAsIGByZXN1bHQ9JHtyfWAsIGNvbXBhY3QoMSwgeyBjdXN0b21JbnNwZWN0OiB0cnVlIH0pLCB7IGRlcHRoIH0sIG91dC5pbnNwZWN0KCkpOwogICAgICBpZihyIDwgMCkgYnJlYWs7CiAgICAgIHdyaXR0ZW4gKz0gcjsKICAgIH0KICAgIHJldHVybiB3cml0dGVuOwogIH0KCiAgdG9TdHJpbmcoZm4gPSBGaWxlQmFubmVyQ29tbWVudCkgewogICAgY29uc3QgbiA9IHRoaXMubGVuZ3RoOwogICAgbGV0IHMgPSAnJywKICAgICAgaTsKICAgIGZvcihpID0gMDsgaSA8IG47IGkrKykgewogICAgICBsZXQgc3RyOwogICAgICBjb25zdCBbcmFuZ2UsIGJ1Zl0gPSB0aGlzW2ldOwogICAgICBpZihyYW5nZSA9PT0gbnVsbCAmJiBidWYgPT09IG51bGwpIGNvbnRpbnVlOwogICAgICBpZigoc3RyID0gdGhpcy5hdChpKSkgPT09IG51bGwpIGNvbnRpbnVlOwogICAgICBpZihyYW5nZSA9PT0gbnVsbCkgaWYgKHR5cGVvZiBidWYgPT0gJ3N0cmluZycpIC8qaWYodHlwZW9mIHN0ciA9PSAnc3RyaW5nJykqLyBzdHIgPSBmbihidWYsIDApICsgc3RyICsgZm4oYnVmLCAxKTsKICAgICAgcyArPSBzdHI7CiAgICB9CiAgICByZXR1cm4gczsKICB9Cn0KCkZpbGVNYXAucHJvdG90eXBlW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnRmlsZU1hcCc7CkZpbGVNYXAucHJvdG90eXBlW1N5bWJvbC5pbnNwZWN0XSA9IGZ1bmN0aW9uKGRlcHRoLCBvcHRzKSB7CiAgbGV0IGFyciA9IFsuLi50aGlzXS5tYXAoKFtyYW5nZSwgYnVmXSwgaSkgPT4gewogICAgaWYocmFuZ2UpIHsKICAgICAgYnVmID0gYnVmLnNsaWNlKC4uLnJhbmdlKTsKICAgIH0KICAgIC8vIGNvbnNvbGUubG9nKGBpPSR7aX1gLCB7IHJhbmdlLCBidWYgfSk7CiAgICByZXR1cm4gW3JhbmdlLCBidWYuY29uc3RydWN0b3IubmFtZV07CiAgfSk7CiAgcmV0dXJuICgKICAgIGBGaWxlTWFwXHgxYlsxOzM1bTwke3RoaXMuZmlsZX0+XHgxYlswbSBgICsKICAgIGluc3BlY3QoYXJyLCB7CiAgICAgIC4uLm9wdHMsCiAgICAgIGNvbXBhY3Q6IDEsCiAgICAgIGJyZWFrTGVuZ3RoOiBJbmZpbml0eSwKICAgICAgbWF4QXJyYXlMZW5ndGg6IDEwLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IDEwLAogICAgICBjdXN0b21JbnNwZWN0OiB0cnVlLAogICAgICBkZXB0aDogZGVwdGggKyAyCiAgICB9KQogICk7Cn07CgpmdW5jdGlvbiBCdWZmZXJGaWxlKGZpbGUsIGJ1ZikgewogIGZpbGUgPSBwYXRoLm5vcm1hbGl6ZShmaWxlKTsKICBidWYgPz89IGJ1ZmZlcnNbZmlsZV0gPz89IGZzLnJlYWRGaWxlU3luYyhmaWxlLCB7IGZsYWc6ICdyJyB9KTsKICBpZih0eXBlb2YgYnVmID09ICdvYmplY3QnICYmIGJ1ZiAhPT0gbnVsbCkgYnVmZmVyUmVmLnNldChidWYsIGZpbGUpOwogIGlmKHR5cGVvZiBidWYgPT0gJ29iamVjdCcgJiYgYnVmICE9PSBudWxsKSBmaWxlQnVmZmVycy5zZXQoZmlsZSwgYnVmKTsKICByZXR1cm4gYnVmOwp9CgpmdW5jdGlvbiBCdWZmZXJMZW5ndGhzKGZpbGUpIHsKICByZXR1cm4gYnVmZmVyc1tmaWxlXS5tYXAoYiA9PiBiLmJ5dGVMZW5ndGgpOwp9CgpmdW5jdGlvbiBCdWZmZXJPZmZzZXRzKGZpbGUpIHsKICByZXR1cm4gYnVmZmVyc1tmaWxlXS5yZWR1Y2UoKFtwb3MsIGxpc3RdLCBiKSA9PiBbcG9zICsgYi5ieXRlTGVuZ3RoLCBsaXN0LmNvbmNhdChbcG9zXSldLCBbMCwgW11dKVsxXTsKfQoKZnVuY3Rpb24gQnVmZmVyUmFuZ2VzKGZpbGUpIHsKICByZXR1cm4gYnVmZmVyc1tmaWxlXS5yZWR1Y2UoKFtwb3MsIGxpc3RdLCBiKSA9PiBbcG9zICsgYi5ieXRlTGVuZ3RoLCBsaXN0LmNvbmNhdChbW3BvcywgYi5ieXRlTGVuZ3RoXV0pXSwgWzAsIFtdXSlbMV07Cn0KCmZ1bmN0aW9uIFdyaXRlRmlsZShmaWxlLCB0b2spIHsKICBsZXQgZiA9IHN0ZC5vcGVuKGZpbGUsICd3KycpOwogIGYucHV0cyh0b2spOwogIGNvbnNvbGUubG9nKCdXcm90ZSAiJyArIGZpbGUgKyAnIjogJyArIHRvay5sZW5ndGggKyAnIGJ5dGVzJyk7Cn0KCmZ1bmN0aW9uIER1bXBMZXhlcihsZXgpIHsKICBjb25zdCB7IHNpemUsIHBvcywgc3RhcnQsIGxpbmUsIGNvbHVtbiwgbGluZVN0YXJ0LCBsaW5lRW5kLCBjb2x1bW5JbmRleCB9ID0gbGV4OwogIHJldHVybiAnTGV4ZXIgJyArIGluc3BlY3QoeyBzdGFydCwgcG9zLCBzaXplIH0pOwp9CgpmdW5jdGlvbiBEdW1wVG9rZW4odG9rKSB7CiAgY29uc3QgeyBsZW5ndGgsIG9mZnNldCwgY2hhcnMsIGxvYyB9ID0gdG9rOwogIHJldHVybiBg4piFIFRva2VuICR7aW5zcGVjdCh7IGNoYXJzLCBvZmZzZXQsIGxlbmd0aCwgbG9jIH0sIHsgZGVwdGg6IDEgfSl9YDsKfQoKZnVuY3Rpb24gUHJpbnRFUzZJbXBvcnQoaW1wKSB7CiAgcmV0dXJuIHsKICAgIFtJbXBvcnRUeXBlcy5JTVBPUlRfTkFNRVNQQUNFXTogKHsgbG9jYWwsIGZpbGUgfSkgPT4gYGltcG9ydCAqIGFzICR7bG9jYWx9IGZyb20gJyR7ZmlsZX0nO2AsCiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX0RFRkFVTFRdOiAoeyBsb2NhbCwgZmlsZSB9KSA9PiBgaW1wb3J0ICR7bG9jYWx9IGZyb20gJyR7ZmlsZX0nO2AsCiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUXTogKHsgbG9jYWwsIGZpbGUgfSkgPT4gYGltcG9ydCB7ICR7bG9jYWwuam9pbignLCAnKX0gfSBmcm9tICcke2ZpbGV9JztgCiAgfVtpbXAudHlwZV0oaW1wKTsKfQoKZnVuY3Rpb24gUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KSB7CiAgcmV0dXJuIHsKICAgIFtJbXBvcnRUeXBlcy5JTVBPUlRfTkFNRVNQQUNFXTogKCkgPT4gYGNvbnN0ICR7bG9jYWx9ID0gcmVxdWlyZSgnJHtmaWxlfScpO2AsCiAgICBbSW1wb3J0VHlwZXMuSU1QT1JUX0RFRkFVTFRdOiAoKSA9PiBgY29uc3QgJHtsb2NhbH0gPSByZXF1aXJlKCcke2ZpbGV9Jyk7YCwKICAgIFtJbXBvcnRUeXBlcy5JTVBPUlRdOiAoKSA9PiBgY29uc3QgeyAke2xvY2FsLmpvaW4oJywgJyl9IH0gPSByZXF1aXJlKCcke2ZpbGV9Jyk7YAogIH1bdHlwZV0oKTsKfQoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUocHJvY2Vzcy5zdGRlcnIsIHsKICAgIGluc3BlY3RPcHRpb25zOiB7CiAgICAgIGNvbG9yczogdHJ1ZSwKICAgICAgZGVwdGg6IDgsCiAgICAgIHN0cmluZ0JyZWFrTmV3bGluZTogdHJ1ZSwKICAgICAgbWF4U3RyaW5nTGVuZ3RoOiAxMDAwLAogICAgICBtYXhBcnJheUxlbmd0aDogSW5maW5pdHksCiAgICAgIGNvbXBhY3Q6IGZhbHNlLAogICAgICAvL3JlcGFyc2VhYmxlOiB0cnVlLAogICAgICBoaWRlS2V5czogW1N5bWJvbC50b1N0cmluZ1RhZyAvKiwgJ2NvZGUnKi9dCiAgICB9CiAgfSk7CgogIGxldCBvcHRpbmQgPSAwLAogICAgY29kZSA9ICdjJywKICAgIGV4cCA9IHRydWU7CgogIGxldCBvdXQgPSBGZFdyaXRlcigxLCAnc3Rkb3V0Jyk7CgogIGxldCBwYXJhbXMgPSBnZXRPcHQoCiAgICB7CiAgICAgIGRlYnVnOiBbZmFsc2UsICgpID0+ICsrZGVidWcsICd4J10sCiAgICAgIHNvcnQ6IFtmYWxzZSwgbnVsbCwgJ3MnXSwKICAgICAgJ2Nhc2Utc2Vuc2l0aXZlJzogW2ZhbHNlLCBudWxsLCAnYyddLAogICAgICBxdWlldDogW2ZhbHNlLCBudWxsLCAncSddLAogICAgICBleHBvcnQ6IFtmYWxzZSwgKCkgPT4gKGV4cCA9IHRydWUpLCAnZSddLAogICAgICAncmVsYXRpdmUtdG8nOiBbdHJ1ZSwgYXJnID0+IChyZWxhdGl2ZVRvID0gcGF0aC5hYnNvbHV0ZShhcmcpKSwgJ3InXSwKICAgICAgb3V0cHV0OiBbdHJ1ZSwgZmlsZSA9PiAob3V0cHV0RmlsZSA9IGZpbGUpLCAnbyddLAogICAgICAnbm8tcmVjdXJzaXZlJzogW2ZhbHNlLCAoKSA9PiAocmVjdXJzaXZlID0gZmFsc2UpLCAnUiddLAogICAgICAncmVtb3ZlLWV4cG9ydHMnOiBbZmFsc2UsICgpID0+IChyZW1vdmVFeHBvcnRzID0gdHJ1ZSksICdFJ10sCiAgICAgICdyZW1vdmUtaW1wb3J0cyc6IFtmYWxzZSwgKCkgPT4gKHJlbW92ZUltcG9ydHMgPSB0cnVlKSwgJ0knXSwKICAgICAgJ3JlbW92ZS1jb21tZW50cyc6IFtmYWxzZSwgKCkgPT4gKHJlbW92ZUNvbW1lbnRzID0gdHJ1ZSksICdDJ10sCiAgICAgICdAJzogJ2ZpbGVzJwogICAgfSwKICAgIGFyZ3MKICApOwogIGxldCBmaWxlcyA9IHBhcmFtc1snQCddOwogIGNvbnN0IHsgc29ydCwgJ2Nhc2Utc2Vuc2l0aXZlJzogY2FzZVNlbnNpdGl2ZSwgcXVpZXQgfSA9IHBhcmFtczsKCiAgaWYob3V0cHV0RmlsZSkgb3V0ID0gRmlsZVdyaXRlcihvdXRwdXRGaWxlKTsKCiAgaWYoZGVidWcgPiAxKSBkZWJ1Z0xvZygnbWFpbicsIHsgb3V0cHV0RmlsZSwgb3V0IH0pOwoKICBjb25zdCBSZWxhdGl2ZVBhdGggPSBmaWxlID0+IHBhdGguam9pbihwYXRoLmRpcm5hbWUocHJvY2Vzcy5hcmd2WzFdKSwgJy4uJywgZmlsZSk7CgogIGlmKCFmaWxlcy5sZW5ndGgpIGZpbGVzLnB1c2goUmVsYXRpdmVQYXRoKCdsaWIvdXRpbC5qcycpKTsKCiAgbGV0IGxvZyA9IHF1aWV0ID8gKCkgPT4ge30gOiAoLi4uYXJncykgPT4gY29uc29sZS5sb2coYCR7ZmlsZX06YCwgLi4uYXJncyk7CiAgbGV0IHJlc3VsdHMgPSBbXTsKICBmb3IobGV0IGZpbGUgb2YgZmlsZXMpIHsKICAgIHJlc3VsdHMucHVzaChQcm9jZXNzRmlsZShmaWxlLCBsb2csIHJlY3Vyc2l2ZSkpOwogIH0KICBsZXQgW3Jlc3VsdF0gPSByZXN1bHRzOwoKICBpZighcmVtb3ZlSW1wb3J0cykgewogICAgbGV0IGxpbmVzID0gaGVhZGVyCiAgICAgIC5maWx0ZXIoaW1wZXhwID0+ICFJc0J1aWx0aW4oaW1wZXhwLmZpbGUpKQogICAgICAubWFwKGhkciA9PiBoZHIuY29kZSkKICAgICAgLmZpbHRlcihsaW5lID0+ICFsaW5lLnN0YXJ0c1dpdGgoJ2V4cG9ydCcpKTsKICAgIGlmKGxpbmVzLmxlbmd0aCkgbGluZXMgPSBbRmlsZUJhbm5lckNvbW1lbnQoJ2hlYWRlcicsIDApLCAuLi5saW5lcywgRmlsZUJhbm5lckNvbW1lbnQoJ2hlYWRlcicsIDEpXTsKCiAgICBvdXQucHV0cyhsaW5lcy5yZWR1Y2UoKGFjYywgbGluZSkgPT4gYWNjICsgbGluZSArICdcbicsICcnKSk7CiAgfQogIC8vICBjb25zb2xlLmxvZygnaG9sZXMnLCBjb21wYWN0KDEpLCByZXN1bHQuaG9sZXMoKSk7CgogIGNvbnNvbGUubG9nKGAke3Jlc3VsdC53cml0ZShvdXQpfSBieXRlcyB3cml0dGVuIHRvICcke291dC5maWxlfSdgKTsKCiAgb3V0LmNsb3NlKCk7Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgAAAAAAAAAAeXoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsVgAAAAAAACxWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8476,
					1,
					"insert",
					{
						"characters": "length:"
					},
					"BwAAAKFYAAAAAAAAolgAAAAAAAAAAAAAolgAAAAAAACjWAAAAAAAAAAAAACjWAAAAAAAAKRYAAAAAAAAAAAAAKRYAAAAAAAApVgAAAAAAAAAAAAApVgAAAAAAACmWAAAAAAAAAAAAACmWAAAAAAAAKdYAAAAAAAAAAAAAKdYAAAAAAAAqFgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoVgAAAAAAAChWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8477,
					1,
					"insert",
					{
						"characters": " this,.l"
					},
					"CAAAAKhYAAAAAAAAqVgAAAAAAAAAAAAAqVgAAAAAAACqWAAAAAAAAAAAAACqWAAAAAAAAKtYAAAAAAAAAAAAAKtYAAAAAAAArFgAAAAAAAAAAAAArFgAAAAAAACtWAAAAAAAAAAAAACtWAAAAAAAAK5YAAAAAAAAAAAAAK5YAAAAAAAAr1gAAAAAAAAAAAAAr1gAAAAAAACwWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqFgAAAAAAACoWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8478,
					3,
					"left_delete",
					null,
					"AwAAAK9YAAAAAAAAr1gAAAAAAAABAAAAbK5YAAAAAAAArlgAAAAAAAABAAAALq1YAAAAAAAArVgAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAsFgAAAAAAACwWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8479,
					1,
					"insert",
					{
						"characters": ".length,"
					},
					"CAAAAK1YAAAAAAAArlgAAAAAAAAAAAAArlgAAAAAAACvWAAAAAAAAAAAAACvWAAAAAAAALBYAAAAAAAAAAAAALBYAAAAAAAAsVgAAAAAAAAAAAAAsVgAAAAAAACyWAAAAAAAAAAAAACyWAAAAAAAALNYAAAAAAAAAAAAALNYAAAAAAAAtFgAAAAAAAAAAAAAtFgAAAAAAAC1WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArVgAAAAAAACtWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8480,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALVYAAAAAAAAtlgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtVgAAAAAAAC1WAAAAAAAAAAAAAAAAPC/"
				],
				[
					8511,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAABVXAAAAAAAAFlcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFVcAAAAAAAAVVwAAAAAAAAAAAAAAAPC/"
				],
				[
					8512,
					1,
					"insert",
					{
						"characters": " &/&^"
					},
					"BQAAABZXAAAAAAAAF1cAAAAAAAAAAAAAF1cAAAAAAAAYVwAAAAAAAAAAAAAYVwAAAAAAABlXAAAAAAAAAAAAABlXAAAAAAAAGlcAAAAAAAAAAAAAGlcAAAAAAAAbVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFlcAAAAAAAAWVwAAAAAAAAAAAAAAAPC/"
				],
				[
					8513,
					4,
					"left_delete",
					null,
					"BAAAABpXAAAAAAAAGlcAAAAAAAABAAAAXhlXAAAAAAAAGVcAAAAAAAABAAAAJhhXAAAAAAAAGFcAAAAAAAABAAAALxdXAAAAAAAAF1cAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAG1cAAAAAAAAbVwAAAAAAAAAAAAAAAPC/"
				],
				[
					8514,
					1,
					"insert",
					{
						"characters": "/&/"
					},
					"AwAAABdXAAAAAAAAGFcAAAAAAAAAAAAAGFcAAAAAAAAZVwAAAAAAAAAAAAAZVwAAAAAAABpXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAF1cAAAAAAAAXVwAAAAAAAAAAAAAAAPC/"
				],
				[
					8515,
					2,
					"left_delete",
					null,
					"AgAAABlXAAAAAAAAGVcAAAAAAAABAAAALxhXAAAAAAAAGFcAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAGlcAAAAAAAAaVwAAAAAAAAAAAAAAAPC/"
				],
				[
					8516,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAABhXAAAAAAAAGVcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGFcAAAAAAAAYVwAAAAAAAAAAAAAAAPC/"
				],
				[
					8518,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAMBXAAAAAAAAwVcAAAAAAAAAAAAAwVcAAAAAAADJVwAAAAAAAAAAAADJVwAAAAAAAMpXAAAAAAAAAAAAAMFXAAAAAAAAwVcAAAAAAAAIAAAAICAgICAgICDBVwAAAAAAAMdXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwFcAAAAAAADAVwAAAAAAAAAAAAAAYHdA"
				],
				[
					8523,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyFcAAAAAAADIVwAAAAAAAAAAAAAAAPC/"
				],
				[
					8533,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAHFYAAAAAAAAclgAAAAAAAAAAAAAclgAAAAAAABzWAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcVgAAAAAAABxWAAAAAAAAAAAAAAAAPC/"
				],
				[
					8536,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAc1gAAAAAAABzWAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 30298,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWSUAAAAAAABbJQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/Makefile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/readlink.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/perf_hooks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/bnflexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stack.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/usr/include/zlib.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Niji.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/wasmedge-quickjs/example_js/es6_module_demo/c.",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/test-repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c.structs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/blah.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/iteration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_watch.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_childprocess.js",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Aurora.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeCache.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qsort_r.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/inet_ntop.c"
	],
	"find":
	{
		"height": 45.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"<file>",
			"bufferRef",
			"<this",
			"'map'",
			"removeComments",
			"'header'",
			"== What.IMPO",
			"Log.*write",
			"log.*write",
			"== What...PORT",
			"ImportType\\(",
			"ImportType\n",
			"ImportType",
			"ImportType\\(",
			"ImportType",
			"ImportType\\(",
			"ImportType",
			"type = ",
			"removeExports",
			"removeEx",
			"removeExports",
			"removeExportds",
			"'E'",
			"isObject",
			"isObjet",
			"holes'",
			"Invalid",
			"ranges'",
			"'ranges'",
			"sort",
			"\\.sort",
			"'ranges'",
			"ranges'",
			"NumericRange.holes",
			"hole, range",
			"'holes'",
			"holes",
			"holes\\()",
			"'holes",
			"hpöes",
			"\\.write",
			"dump",
			"comments",
			"comments ",
			"comments =",
			"removeComments",
			"depth:",
			"'comments'",
			"CloseFunction",
			"PutsFunction",
			"inspect_print",
			"token_class_id",
			"class_id",
			"charRange",
			"comments'",
			"js_inspect_custom_call",
			"INSPECT_LEVEL",
			"offset_toarray",
			"range_",
			"token_inspect",
			"tok->loc",
			"CHARRANGE:",
			"'FdWriter",
			"write",
			"written",
			"written =",
			"FileWriter",
			"outg =",
			"PutsFu",
			"out =",
			"prev\\[1\\]",
			"prev\\[0\\]",
			"prev",
			"must exi",
			"collapse",
			"Already proc",
			" toString",
			"toString",
			"log.*replaceRange",
			"headerIds",
			"maxArrayLength: ",
			"AddImport",
			"maxArray",
			"'AddImport",
			"written:",
			" T ",
			"T ",
			"T",
			"IsPunctuator",
			"replaceRange",
			"util",
			"misc",
			"tokens",
			"AddImport",
			"out.puts",
			"IsBuiltin",
			"Builtin",
			"header.pus",
			"header\\.",
			"ProcessFile",
			"randInt",
			"\\.write\\(",
			"out",
			" of ",
			"start of",
			"`FileMap.for",
			"FileMap.for",
			"\n    ",
			"PathAdjust",
			"AddImport",
			"`FileMap",
			"arr:",
			"NumericRange.from",
			"'files'",
			"out\\.",
			"'impexp'",
			"FileBannerComment",
			"FileWriter",
			"out,",
			"compact",
			"console.config",
			"console.config\\({ compact: ([0-9]*) *}\\)",
			"console.config",
			"console.config\\({ compact: ([0-9]*) }\\)",
			"console.config",
			"FileWriter",
			"toArray",
			"getType"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"loc",
			"prevLength",
			"prevOffset",
			"compact(\\1)",
			"js_location_create",
			"lexer_token(",
			"token_lex(",
			"LOCATION_PROP_CHAROFFSET",
			"loc->",
			"\\1_release",
			"token",
			"ALLOC_PTR",
			"ALLOC_BLOCK(p)",
			"ALLOC_BLOCK_SIZE",
			"",
			"const char* str\\1",
			"void* p,",
			"size_t size)",
			"JSRuntime* rt,",
			"JSContext\\* ctx,",
			";",
			" &(((struct alloc_block*)p)[-1]);",
			"add_to_list",
			"",
			"DEFINES_H",
			"int",
			"log",
			"out",
			"array_",
			"[%p]",
			"pthread_self()",
			"js_token_data2(ctx,",
			"js_lexer_data2(ctx,",
			"\\1//console",
			"inspectSymbol",
			"parent",
			"gettersetter",
			"ELEMENT_NODE",
			"parent",
			"attributes",
			"Node.prototype.",
			"\\1static \\2 = \\3;",
			"const raw = Node.raw(this);",
			"\\1.set\\(\\2\\)",
			"\\1.get\\(this\\)",
			"ownerElement.get\\(this\\)",
			"rawNode.get\\(this\\)",
			"inspectSymbol",
			"CSV",
			"\\1//",
			"args->c",
			"args->",
			"\\1//\\2",
			"METHOD_VALUES",
			"pr->",
			"property",
			"size[0]",
			"s->",
			"(sock)->",
			", s,",
			"(sock).",
			", *s,",
			"s->",
			"obj",
			"js_socket_data(",
			"obj",
			"loc",
			"YIELD_",
			"if",
			"\\1//\\2",
			"",
			"\\1//\\2",
			"js_pointer_free_func",
			"BITFIELD_SET",
			"fd",
			"misc.IN_",
			"fd",
			"wd",
			"JSValueConst\\1",
			"s",
			"queue_alloc(",
			"queue_alloc",
			"rpt",
			"js_return_",
			"tmp",
			"repeater_execute",
			"queue_item",
			"linked_item",
			"queue_",
			"rpt",
			"Repeater",
			"resolvable_item",
			"resolvable_",
			"js_resolvable_",
			"repeater_push",
			"COLOR_NONE",
			"COLOR_CYAN",
			"COLOR_RED",
			"COLOR_LIGHTRED",
			"\" BACKGROUND_RED \"",
			"BACKGROUND_BLUE \"",
			"BACKGROUND_GREEN \"",
			"BACKGROUND_YELLOW \"",
			"\" COLOR_NONE \"",
			"js_inspect_print_map",
			"js_inspect_print_set",
			"js_inspect_print_arraybuffer",
			"js_inspect_print_regexp",
			"js_inspect_print_number",
			"js_inspect_print_string",
			"js_inspect_print_atom",
			"js_inspect_print_module",
			"js_inspect_print_value",
			"imp",
			"INC",
			"format",
			"\\1//\\2",
			"ctx",
			"sel",
			"console.log",
			"cmd",
			"js_socket_async_wait",
			"utils_SOURCES",
			"${util_SOURCES}",
			"${vector_SOURCES}",
			"socketpair",
			"",
			"#"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2618,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
							"function_name_status_row": 103,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									782,
									818
								],
								[
									1135,
									1160
								],
								[
									1197,
									1224
								],
								[
									1293,
									1319
								],
								[
									1377,
									1397
								],
								[
									1468,
									1486
								],
								[
									1736,
									1749
								],
								[
									1777,
									1783
								],
								[
									1836,
									1858
								],
								[
									2206,
									2230
								],
								[
									2535,
									2565
								],
								[
									2641,
									2669
								],
								[
									2680,
									2693
								],
								[
									2783,
									2796
								],
								[
									3062,
									3068
								],
								[
									3128,
									3148
								],
								[
									3265,
									3277
								],
								[
									3301,
									3328
								],
								[
									3383,
									3401
								],
								[
									3769,
									3781
								],
								[
									3790,
									3815
								],
								[
									3899,
									3908
								],
								[
									3997,
									4020
								],
								[
									4043,
									4049
								],
								[
									4079,
									4103
								],
								[
									4120,
									4126
								],
								[
									4188,
									4194
								],
								[
									4244,
									4268
								],
								[
									4585,
									4609
								],
								[
									4698,
									4704
								],
								[
									4951,
									4975
								],
								[
									5004,
									5010
								],
								[
									5101,
									5130
								],
								[
									5246,
									5255
								],
								[
									5406,
									5455
								],
								[
									5695,
									5701
								],
								[
									5956,
									5962
								],
								[
									6010,
									6016
								],
								[
									6585,
									6591
								],
								[
									6909,
									6914
								],
								[
									6992,
									7041
								],
								[
									7719,
									7724
								],
								[
									7904,
									7910
								],
								[
									8079,
									8085
								],
								[
									8749,
									8755
								],
								[
									8811,
									8817
								],
								[
									9006,
									9061
								],
								[
									9695,
									9712
								],
								[
									10012,
									10030
								],
								[
									10073,
									10089
								],
								[
									10182,
									10221
								],
								[
									10542,
									10546
								],
								[
									10685,
									10692
								],
								[
									10755,
									10766
								],
								[
									10964,
									10982
								],
								[
									11278,
									11295
								],
								[
									12679,
									12683
								],
								[
									13119,
									13125
								],
								[
									13145,
									13151
								],
								[
									13168,
									13174
								],
								[
									13428,
									13437
								],
								[
									13509,
									13515
								],
								[
									13620,
									13633
								],
								[
									13735,
									13739
								],
								[
									16831,
									16853
								],
								[
									16879,
									16885
								],
								[
									16916,
									16946
								],
								[
									16981,
									16987
								],
								[
									17013,
									17023
								],
								[
									17078,
									17102
								],
								[
									17163,
									17195
								],
								[
									17221,
									17234
								],
								[
									17261,
									17291
								],
								[
									17344,
									17379
								],
								[
									17384,
									17404
								],
								[
									17518,
									17549
								],
								[
									17827,
									17859
								],
								[
									18034,
									18071
								],
								[
									18155,
									18188
								],
								[
									18251,
									18272
								],
								[
									18378,
									18390
								],
								[
									18409,
									18432
								],
								[
									18565,
									18576
								],
								[
									18605,
									18621
								],
								[
									18653,
									18662
								],
								[
									18691,
									18705
								],
								[
									18737,
									18755
								],
								[
									18987,
									19022
								],
								[
									19808,
									19842
								],
								[
									19926,
									19938
								],
								[
									20128,
									20138
								],
								[
									20384,
									20391
								],
								[
									20410,
									20432
								],
								[
									20757,
									20775
								],
								[
									20917,
									20926
								],
								[
									20954,
									20975
								],
								[
									21217,
									21226
								],
								[
									21271,
									21281
								],
								[
									21412,
									21419
								],
								[
									21534,
									21546
								],
								[
									21576,
									21593
								],
								[
									21804,
									21814
								],
								[
									21864,
									21882
								],
								[
									21928,
									21953
								],
								[
									22067,
									22084
								],
								[
									22243,
									22260
								],
								[
									22430,
									22434
								],
								[
									23247,
									23253
								],
								[
									23395,
									23407
								],
								[
									23451,
									23481
								],
								[
									24070,
									24075
								],
								[
									24515,
									24524
								],
								[
									24547,
									24556
								],
								[
									24577,
									24584
								],
								[
									24617,
									24629
								],
								[
									25128,
									25157
								],
								[
									26333,
									26365
								],
								[
									26763,
									26770
								],
								[
									26814,
									26821
								],
								[
									26849,
									26871
								],
								[
									26900,
									26920
								],
								[
									27331,
									27361
								],
								[
									27622,
									27650
								],
								[
									27680,
									27684
								],
								[
									27703,
									27731
								],
								[
									27764,
									27783
								],
								[
									27842,
									27869
								],
								[
									27902,
									27921
								],
								[
									27996,
									28025
								],
								[
									28143,
									28166
								],
								[
									28306,
									28329
								],
								[
									28458,
									28486
								],
								[
									28535,
									28556
								],
								[
									28630,
									28651
								],
								[
									28712,
									28733
								],
								[
									28806,
									28852
								],
								[
									28901,
									28907
								],
								[
									28981,
									28987
								],
								[
									29053,
									29059
								],
								[
									29130,
									29152
								],
								[
									29607,
									29613
								],
								[
									29759,
									29765
								],
								[
									29813,
									29820
								],
								[
									29882,
									29890
								],
								[
									29947,
									29953
								],
								[
									30012,
									30018
								],
								[
									30080,
									30086
								],
								[
									30149,
									30155
								],
								[
									30434,
									30456
								],
								[
									30593,
									30599
								],
								[
									30604,
									30617
								],
								[
									30843,
									30852
								],
								[
									30889,
									30895
								],
								[
									30920,
									30927
								],
								[
									31089,
									31103
								]
							],
							"symlist":
							[
								"FileBannerComment = (filename, i) =>",
								"IsBuiltin = moduleName =>",
								"  compact = (n, more = {}) =>",
								"AddUnique = (arr, item) =>",
								"IntToDWord = ival =>",
								"IntToBinary = i =>",
								"(n, value) =>",
								"  num =>",
								"(type, lexeme, tok) =>",
								"CompareRange = (a, b) =>",
								"PutsFunction = outFn => str =>",
								"  debugLog = (str, ...args) =>",
								"  pred = arg =>",
								"(acc, opt) =>",
								"  arg =>",
								"FileWriter = file =>",
								"  close: () =>",
								"FdWriter(fd, name)",
								"  fn = (buf, len) =>",
								"  close: () =>",
								"  seek: (whence, offset) =>",
								"  inspect()",
								"ImportIds(seq)",
								"  tok =>",
								"ImpExpType(seq)",
								"  tok =>",
								"  tok =>",
								"ImportType(seq)",
								"ImportFile(seq)",
								"  tok =>",
								"ExportName(seq)",
								"  tok =>",
								"ByteSequence(tokens)",
								"(n, t) =>",
								"AddExport(tokens, relativePath = s => s)",
								"  tok =>",
								"  tok =>",
								"  tok =>",
								"  tok =>",
								"  ids()",
								"AddImport(tokens, relativePath = s => s)",
								"  ids()",
								"  tok =>",
								"  tok =>",
								"  tok =>",
								"  tok =>",
								"ProcessFile(source, log = () => {}, recursive)",
								"  .handler = lex =>",
								"  .beginCode = () =>",
								"  balancer = () =>",
								"  self = function ParentheseBalancer(tok)",
								"  s =>",
								"  reset()",
								"  get depth()",
								"  showToken = tok =>",
								"PathAdjust = s =>",
								"  i =>",
								"  exp =>",
								"  exp =>",
								"  tok =>",
								"(a, b) =>",
								"  imp =>",
								"(acc, imp) =>",
								"  b =>",
								"NonWS(tokens)",
								"  tok =>",
								"TokenSequence(tokens)",
								"  tok =>",
								"  toString()",
								"Unquote(lexeme)",
								"LiteralSequence(tokens)",
								"(acc, tok) =>",
								"UntilEOL(idx, tokens)",
								"Until(idx, tokens, pred = ",
								"(null, [';', '\\n']))",
								"WholeLine(idx, tokens)",
								"Range(file, start, end)",
								"Range.prototype.toString = function()",
								"InRange([start, end], i)",
								"IsRange(obj)",
								"NumericRange",
								"  constructor(start, end)",
								"  get start()",
								"  set start(value)",
								"  get end()",
								"  set end(value)",
								"  static from(range)",
								"  static *holes(ranges, only = false)",
								"  static between([s1, e1], [s2, e2])",
								"NumericRange",
								"  pad = s =>",
								"FileMap",
								"  constructor(file, buf)",
								"  static empty(file)",
								"  isEmpty()",
								"  static for(file, buf)",
								"  isEmpty()",
								"  toString()",
								"FileMap",
								"  splitAt(pos)",
								"([range, buf]) =>",
								"  sliceAt(n)",
								"\t([range, buf]) =>",
								"  replaceRange(range, file)",
								"  sliceIndex = n =>",
								"(acc, item, i) =>",
								"  n =>",
								"  dump()",
								"(item, i) =>",
								"(acc, [range, buf, str], i) =>",
								"  at(i)",
								"  toArray()",
								"(s, i) =>",
								"  holes()",
								"([range]) =>",
								"  write(out, depth = 0, serial)",
								"  toString(fn = FileBannerComment)",
								"FileMap",
								"FileMap",
								"\tfunction(depth, opts)",
								"([range, buf], i) =>",
								"BufferFile(file, buf)",
								"BufferLengths(file)",
								"  b =>",
								"BufferOffsets(file)",
								"([pos, list], b) =>",
								"BufferRanges(file)",
								"([pos, list], b) =>",
								"WriteFile(file, tok)",
								"DumpLexer(lex)",
								"DumpToken(tok)",
								"PrintES6Import(imp)",
								"\t({ local, file }) =>",
								"\t({ local, file }) =>",
								"\t({ local, file }) =>",
								"PrintCJSImport({ type, local, file })",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"  main(...args)",
								"\t() =>",
								"\t() =>",
								"\targ =>",
								"\tfile =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"\t() =>",
								"RelativePath = file =>",
								"\t() =>",
								"\t(...args) =>",
								"  impexp =>",
								"  hdr =>",
								"  line =>",
								"(acc, line) =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643824576.42,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 747.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "resolve-imports.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31422,
						"regions":
						{
						},
						"selection":
						[
							[
								21924,
								21924
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 735,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643899187.38,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 17575.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 30298,
						"regions":
						{
						},
						"selection":
						[
							[
								9561,
								9563
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 254,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1643821561.93,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4921.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(140502873537696)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 82.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"path.c",
				"path.c"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"lexer",
				"lexer.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"buffer",
				"buffer-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"xpath.j",
				"lib/xpath.js"
			],
			[
				"predicate.h",
				"predicate.h"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"list.h",
				"~/Projects/plot-cv/quickjs/list.h"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"queue",
				"queue.c"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"test_wa",
				"tests/test_watch.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"tree-wa",
				"quickjs-tree-walker.c"
			],
			[
				"quick",
				"quickjs-xml.c"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"",
				"tests/test_xml.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"doxy",
				"Doxyfile"
			],
			[
				"Doxyfile",
				"Doxyfile"
			],
			[
				"interna",
				"quickjs-internal.h"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"child",
				"child-process.c"
			],
			[
				"qsort_r",
				"qsort_r.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"quicksj-misc",
				"quickjs-misc.c"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-mm",
				"quickjs-mmap.c"
			],
			[
				"quickjs-m",
				"quickjs-misc.c"
			],
			[
				"redicate.c",
				"predicate.c"
			],
			[
				"sockets.h",
				"quickjs-sockets.h"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"parser.js",
				"lib/parser.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"conso",
				"lib/console.js"
			],
			[
				"clang-f",
				".clang-format"
			],
			[
				"test_mi",
				"tests/test_misc.js"
			],
			[
				"ockets.",
				"quickjs-sockets.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"test_loca",
				"tests/test_location.js"
			],
			[
				".clang-fo",
				".clang-format"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
