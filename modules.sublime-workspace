{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyFunctionList"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  keyOf = (obj, value) =>\n  checkNode(node)\nParser\n  parseFromString(str, file, ...rest)\nGetNode(obj, owner)\nNode\n  constructor(obj, parent, proto = Node.prototype)\n  get path()\n  get parentNode()\n  get parentElement()\n  get ownerDocument()\n  get childNodes()\n  get firstChild()\n  get lastChild()\n  get nextSibling()\n  get previousSibling()\n  appendChild(node)\n  () =>\n  value =>\n  insertBefore(node, refNode)\n  removeChild(node)\n  replaceChild(newChild, oldChild)\nNode\n  raw(node)\n  children(node)\n  owner(node)\n  parent(node)\n  hier(node, pred = node => true)\n({ nodeType }) =>\nNode\nMakeCache(ctor, store = \n())\n  (k, ...args) =>\nMakeCache2(ctor, store = \n())\n  key =>\n  (id, owner) =>\nNodeList\n  constructor(obj, owner)\n  isElement = prop =>\n  isList = prop =>\n  wrapElement = (value, prop) =>\n  get: (target, prop, receiver) =>\n  getOwnPropertyDescriptor: (target, prop) =>\n  ownKeys: target =>\n  prop =>\nNodeList\n  get path()\nNamedNodeMap(obj, owner)\n  isAttr = prop =>\n  wrapAttr = (value, prop) =>\n  get: (target, prop, receiver) =>\n  ownKeys: target =>\nNamedNodeMap\nNamedNodeMap\n  get path()\n  item(key)\n  setNamedItem(attr)\n  removeNamedItem(name)\n  getNamedItem(name)\n(acc, prop) =>\nElement\n  constructor(obj, parent)\n  get parentElement()\n  get attributes()\n  set tagName(v)\n  get tagName()\n  set nodeName(v)\n  get nodeName()\n  get children()\n  get childElementCount()\n  get firstElementChild()\n  n =>\n  get lastElementChild()\n  get id()\n  getAttribute(name)\n  attributes =>\n  getAttributeNames()\n  attributes =>\n  hasAttribute(name)\n  attributes =>\n  hasAttributes()\n  removeAttribute(name)\n  attributes =>\n  getAttributeNode(name)\n  setAttribute(name, value)\n  attributes =>\n(obj, owner) =>\n  attributes(elem)\nElement\nDocument\n  constructor(obj)\nDocument\n  createAttribute(name, value)\n  createElement(tagName)\n  createTextNode(text)\n  pred = (n, k) =>\n  (n, k) =>\n  (n, p) =>\n  get body()\nDocument\nAttr\n  constructor(raw, owner)\n  get path()\n  get ownerElement()\n  get ownerDocument()\n  get name()\n  set name(v)\n  get value()\n  set value(v)\nAttr\nText\n  constructor(key, owner)\n  get = () =>\n  set = value =>\n  get = () =>\n  set = value =>\n  get data()\n  value =>\n  get nodeValue()\n  value =>\n  toString()\n(key, owner) =>\nText\nNode\nText\nComment\n  constructor(raw, owner)\n  get = () =>\n  set = value =>\n  () =>\n  value =>\n  get data()\n  value =>\n  get nodeValue()\n  value =>\n(node, owner) =>\nComment\nNode\nComment\nTokenList\n  constructor(owner, key = 'class')\n  get = () =>\n  set = value =>\n  () =>\n  value =>\n  get length()\n  value =>\n  get value()\n  value =>\n  item(index)\n  value =>\n  contains(token)\n  value =>\n  add(...tokens)\n(arr, set) =>\n  remove(...tokens)\n(arr, set) =>\n  toggle(token, force)\n(arr, set) =>\n  supports(token)\n  replace(oldToken, newToken)\n(arr, set) =>\nTokenList\nTokenList\n  (container, i) =>\nMembrane(instance, obj, proto, wrapProp, wrapElement)\n  get: (target, prop, receiver) =>\n  has: (target, prop) =>\n  getOwnPropertyDescriptor: (target, prop) =>\n  getPrototypeOf: target =>\n  setPrototypeOf: (target, p) =>\n  ownKeys: target =>\nFactory(raw, owner, ctor)\n  isArray = arg =>\n  isAttributes = arg =>",
			"settings":
			{
				"buffer_size": 3140,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					2283,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2965,
								2981
							],
							[
								3099,
								3118
							],
							[
								3213,
								3232
							],
							[
								3354,
								3370
							],
							[
								3471,
								3487
							],
							[
								3636,
								3651
							],
							[
								3817,
								3834
							],
							[
								4113,
								4134
							],
							[
								4310,
								4327
							],
							[
								4497,
								4502
							],
							[
								4523,
								4532
							],
							[
								4690,
								4717
							],
							[
								5071,
								5088
							],
							[
								5376,
								5408
							],
							[
								6189,
								6193
							],
							[
								6261,
								6270
							],
							[
								6332,
								6346
							],
							[
								6394,
								6405
							],
							[
								6774,
								6786
							],
							[
								6870,
								6901
							],
							[
								7331,
								7348
							],
							[
								7910,
								7914
							],
							[
								7956,
								7989
							],
							[
								8000,
								8003
							],
							[
								8048,
								8064
							],
							[
								8208,
								8242
							],
							[
								8253,
								8256
							],
							[
								8280,
								8286
							],
							[
								8308,
								8323
							],
							[
								8557,
								8565
							],
							[
								8570,
								8593
							],
							[
								8624,
								8643
							],
							[
								8696,
								8712
							],
							[
								8760,
								8790
							],
							[
								9023,
								9055
							],
							[
								9294,
								9337
							],
							[
								9601,
								9619
							],
							[
								9668,
								9675
							],
							[
								10160,
								10168
							],
							[
								10220,
								10230
							],
							[
								10685,
								10719
							],
							[
								10795,
								10811
							],
							[
								10860,
								10887
							],
							[
								11046,
								11078
							],
							[
								11560,
								11578
							],
							[
								11712,
								11724
							],
							[
								11762,
								11774
							],
							[
								11790,
								11800
							],
							[
								11897,
								11906
							],
							[
								11938,
								11956
							],
							[
								12055,
								12076
							],
							[
								12140,
								12158
							],
							[
								12632,
								12646
							],
							[
								12708,
								12715
							],
							[
								12733,
								12757
							],
							[
								12930,
								12949
							],
							[
								13074,
								13090
							],
							[
								13171,
								13185
							],
							[
								13226,
								13239
							],
							[
								13283,
								13298
							],
							[
								13329,
								13343
							],
							[
								13909,
								13923
							],
							[
								14076,
								14099
							],
							[
								14158,
								14181
							],
							[
								14257,
								14261
							],
							[
								14354,
								14376
							],
							[
								14607,
								14615
							],
							[
								14661,
								14679
							],
							[
								14718,
								14731
							],
							[
								14758,
								14777
							],
							[
								14816,
								14829
							],
							[
								14863,
								14881
							],
							[
								14920,
								14933
							],
							[
								14962,
								14977
							],
							[
								15035,
								15056
							],
							[
								15088,
								15101
							],
							[
								15135,
								15157
							],
							[
								15201,
								15226
							],
							[
								15258,
								15271
							],
							[
								15333,
								15348
							],
							[
								15398,
								15414
							],
							[
								15534,
								15541
							],
							[
								17826,
								17834
							],
							[
								17855,
								17871
							],
							[
								17895,
								17903
							],
							[
								17923,
								17951
							],
							[
								18002,
								18024
							],
							[
								18109,
								18129
							],
							[
								18189,
								18205
							],
							[
								18302,
								18317
							],
							[
								18354,
								18369
							],
							[
								18445,
								18455
							],
							[
								18903,
								18911
							],
							[
								19001,
								19005
							],
							[
								19023,
								19046
							],
							[
								19210,
								19220
							],
							[
								19408,
								19426
							],
							[
								19476,
								19495
							],
							[
								19537,
								19547
							],
							[
								19610,
								19621
							],
							[
								19658,
								19669
							],
							[
								19740,
								19752
							],
							[
								19994,
								19998
							],
							[
								20090,
								20094
							],
							[
								20153,
								20176
							],
							[
								20433,
								20444
							],
							[
								20467,
								20481
							],
							[
								20550,
								20561
							],
							[
								20586,
								20600
							],
							[
								20715,
								20725
							],
							[
								20756,
								20764
							],
							[
								20780,
								20795
							],
							[
								20826,
								20834
							],
							[
								20850,
								20860
							],
							[
								21088,
								21103
							],
							[
								21130,
								21134
							],
							[
								21157,
								21161
							],
							[
								21180,
								21184
							],
							[
								21333,
								21340
							],
							[
								21358,
								21381
							],
							[
								21504,
								21515
							],
							[
								21548,
								21562
							],
							[
								21624,
								21637
							],
							[
								21675,
								21691
							],
							[
								21735,
								21745
							],
							[
								21769,
								21777
							],
							[
								21810,
								21825
							],
							[
								21849,
								21857
							],
							[
								22021,
								22037
							],
							[
								22068,
								22075
							],
							[
								22098,
								22102
							],
							[
								22121,
								22128
							],
							[
								22289,
								22298
							],
							[
								22303,
								22336
							],
							[
								22426,
								22437
							],
							[
								22469,
								22483
							],
							[
								22552,
								22565
							],
							[
								22594,
								22610
							],
							[
								22654,
								22666
							],
							[
								22693,
								22701
							],
							[
								22724,
								22735
							],
							[
								22762,
								22770
							],
							[
								22796,
								22807
							],
							[
								22834,
								22842
							],
							[
								22865,
								22880
							],
							[
								22907,
								22915
							],
							[
								22952,
								22966
							],
							[
								22986,
								22999
							],
							[
								23147,
								23164
							],
							[
								23184,
								23197
							],
							[
								23349,
								23369
							],
							[
								23389,
								23402
							],
							[
								23536,
								23551
							],
							[
								23578,
								23605
							],
							[
								23625,
								23638
							],
							[
								23861,
								23870
							],
							[
								23936,
								23945
							],
							[
								23956,
								23974
							],
							[
								23996,
								24058
							],
							[
								24127,
								24159
							],
							[
								24255,
								24277
							],
							[
								24335,
								24378
							],
							[
								24566,
								24591
							],
							[
								24638,
								24668
							],
							[
								24686,
								24704
							],
							[
								25793,
								25828
							],
							[
								25951,
								25967
							],
							[
								25996,
								26017
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							"() =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AQAAAAAAAAAAAAAAQgwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2284,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2965,
								2981
							],
							[
								3099,
								3118
							],
							[
								3213,
								3232
							],
							[
								3354,
								3370
							],
							[
								3471,
								3487
							],
							[
								3636,
								3651
							],
							[
								3817,
								3834
							],
							[
								4113,
								4134
							],
							[
								4310,
								4327
							],
							[
								4497,
								4502
							],
							[
								4523,
								4532
							],
							[
								4690,
								4717
							],
							[
								5071,
								5088
							],
							[
								5376,
								5408
							],
							[
								6189,
								6193
							],
							[
								6261,
								6270
							],
							[
								6332,
								6346
							],
							[
								6394,
								6405
							],
							[
								6774,
								6786
							],
							[
								6870,
								6901
							],
							[
								7331,
								7348
							],
							[
								7910,
								7914
							],
							[
								7956,
								7989
							],
							[
								8000,
								8003
							],
							[
								8048,
								8064
							],
							[
								8208,
								8242
							],
							[
								8253,
								8256
							],
							[
								8280,
								8286
							],
							[
								8308,
								8323
							],
							[
								8557,
								8565
							],
							[
								8570,
								8593
							],
							[
								8624,
								8643
							],
							[
								8696,
								8712
							],
							[
								8760,
								8790
							],
							[
								9023,
								9055
							],
							[
								9294,
								9337
							],
							[
								9601,
								9619
							],
							[
								9668,
								9675
							],
							[
								10160,
								10168
							],
							[
								10220,
								10230
							],
							[
								10685,
								10719
							],
							[
								10795,
								10811
							],
							[
								10860,
								10887
							],
							[
								11046,
								11078
							],
							[
								11560,
								11578
							],
							[
								11712,
								11724
							],
							[
								11762,
								11774
							],
							[
								11790,
								11800
							],
							[
								11897,
								11906
							],
							[
								11938,
								11956
							],
							[
								12055,
								12076
							],
							[
								12140,
								12158
							],
							[
								12632,
								12646
							],
							[
								12708,
								12715
							],
							[
								12733,
								12757
							],
							[
								12930,
								12949
							],
							[
								13074,
								13090
							],
							[
								13171,
								13185
							],
							[
								13226,
								13239
							],
							[
								13283,
								13298
							],
							[
								13329,
								13343
							],
							[
								13909,
								13923
							],
							[
								14076,
								14099
							],
							[
								14158,
								14181
							],
							[
								14257,
								14261
							],
							[
								14354,
								14376
							],
							[
								14616,
								14624
							],
							[
								14670,
								14688
							],
							[
								14727,
								14740
							],
							[
								14767,
								14786
							],
							[
								14825,
								14838
							],
							[
								14872,
								14890
							],
							[
								14929,
								14942
							],
							[
								14971,
								14986
							],
							[
								15044,
								15065
							],
							[
								15097,
								15110
							],
							[
								15144,
								15166
							],
							[
								15210,
								15235
							],
							[
								15267,
								15280
							],
							[
								15342,
								15357
							],
							[
								15407,
								15423
							],
							[
								15543,
								15550
							],
							[
								17835,
								17843
							],
							[
								17864,
								17880
							],
							[
								17904,
								17912
							],
							[
								17932,
								17960
							],
							[
								18011,
								18033
							],
							[
								18118,
								18138
							],
							[
								18198,
								18214
							],
							[
								18311,
								18326
							],
							[
								18363,
								18378
							],
							[
								18454,
								18464
							],
							[
								18912,
								18920
							],
							[
								19010,
								19014
							],
							[
								19032,
								19055
							],
							[
								19219,
								19229
							],
							[
								19417,
								19435
							],
							[
								19485,
								19504
							],
							[
								19546,
								19556
							],
							[
								19619,
								19630
							],
							[
								19667,
								19678
							],
							[
								19749,
								19761
							],
							[
								20003,
								20007
							],
							[
								20099,
								20103
							],
							[
								20162,
								20185
							],
							[
								20442,
								20453
							],
							[
								20476,
								20490
							],
							[
								20559,
								20570
							],
							[
								20595,
								20609
							],
							[
								20724,
								20734
							],
							[
								20765,
								20773
							],
							[
								20789,
								20804
							],
							[
								20835,
								20843
							],
							[
								20859,
								20869
							],
							[
								21097,
								21112
							],
							[
								21139,
								21143
							],
							[
								21166,
								21170
							],
							[
								21189,
								21193
							],
							[
								21342,
								21349
							],
							[
								21367,
								21390
							],
							[
								21513,
								21524
							],
							[
								21557,
								21571
							],
							[
								21633,
								21646
							],
							[
								21684,
								21700
							],
							[
								21744,
								21754
							],
							[
								21778,
								21786
							],
							[
								21819,
								21834
							],
							[
								21858,
								21866
							],
							[
								22030,
								22046
							],
							[
								22077,
								22084
							],
							[
								22107,
								22111
							],
							[
								22130,
								22137
							],
							[
								22298,
								22307
							],
							[
								22312,
								22345
							],
							[
								22435,
								22446
							],
							[
								22478,
								22492
							],
							[
								22561,
								22574
							],
							[
								22603,
								22619
							],
							[
								22663,
								22675
							],
							[
								22702,
								22710
							],
							[
								22733,
								22744
							],
							[
								22771,
								22779
							],
							[
								22805,
								22816
							],
							[
								22843,
								22851
							],
							[
								22874,
								22889
							],
							[
								22916,
								22924
							],
							[
								22961,
								22975
							],
							[
								22995,
								23008
							],
							[
								23156,
								23173
							],
							[
								23193,
								23206
							],
							[
								23358,
								23378
							],
							[
								23398,
								23411
							],
							[
								23545,
								23560
							],
							[
								23587,
								23614
							],
							[
								23634,
								23647
							],
							[
								23870,
								23879
							],
							[
								23945,
								23954
							],
							[
								23965,
								23983
							],
							[
								24005,
								24067
							],
							[
								24136,
								24168
							],
							[
								24264,
								24286
							],
							[
								24344,
								24387
							],
							[
								24575,
								24600
							],
							[
								24647,
								24677
							],
							[
								24695,
								24713
							],
							[
								25802,
								25837
							],
							[
								25960,
								25976
							],
							[
								26005,
								26026
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							"() =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCigpID0+CiAgdmFsdWUgPT4KICBpbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSkKICByZW1vdmVDaGlsZChub2RlKQogIHJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpCk5vZGUKICByYXcobm9kZSkKICBjaGlsZHJlbihub2RlKQogIG93bmVyKG5vZGUpCiAgcGFyZW50KG5vZGUpCiAgaGllcihub2RlLCBwcmVkID0gbm9kZSA9PiB0cnVlKQooeyBub2RlVHlwZSB9KSA9PgpOb2RlCk1ha2VDYWNoZShjdG9yLCBzdG9yZSA9IAooKSkKICAoaywgLi4uYXJncykgPT4KTWFrZUNhY2hlMihjdG9yLCBzdG9yZSA9IAooKSkKICBrZXkgPT4KICAoaWQsIG93bmVyKSA9PgpOb2RlTGlzdAogIGNvbnN0cnVjdG9yKG9iaiwgb3duZXIpCiAgaXNFbGVtZW50ID0gcHJvcCA9PgogIGlzTGlzdCA9IHByb3AgPT4KICB3cmFwRWxlbWVudCA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKHRhcmdldCwgcHJvcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KICBwcm9wID0+Ck5vZGVMaXN0CiAgZ2V0IHBhdGgoKQpOYW1lZE5vZGVNYXAob2JqLCBvd25lcikKICBpc0F0dHIgPSBwcm9wID0+CiAgd3JhcEF0dHIgPSAodmFsdWUsIHByb3ApID0+CiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KTmFtZWROb2RlTWFwCk5hbWVkTm9kZU1hcAogIGdldCBwYXRoKCkKICBpdGVtKGtleSkKICBzZXROYW1lZEl0ZW0oYXR0cikKICByZW1vdmVOYW1lZEl0ZW0obmFtZSkKICBnZXROYW1lZEl0ZW0obmFtZSkKKGFjYywgcHJvcCkgPT4KRWxlbWVudAogIGNvbnN0cnVjdG9yKG9iaiwgcGFyZW50KQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgYXR0cmlidXRlcygpCiAgc2V0IHRhZ05hbWUodikKICBnZXQgdGFnTmFtZSgpCiAgc2V0IG5vZGVOYW1lKHYpCiAgZ2V0IG5vZGVOYW1lKCkKICBnZXQgY2hpbGRyZW4oKQogIGdldCBjaGlsZEVsZW1lbnRDb3VudCgpCiAgZ2V0IGZpcnN0RWxlbWVudENoaWxkKCkKICBuID0+CiAgZ2V0IGxhc3RFbGVtZW50Q2hpbGQoKQogIGdldCBpZCgpCiAgZ2V0QXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5hbWVzKCkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGhhc0F0dHJpYnV0ZXMoKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGF0dHJpYnV0ZXMgPT4KICBnZXRBdHRyaWJ1dGVOb2RlKG5hbWUpCiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGF0dHJpYnV0ZXMgPT4KKG9iaiwgb3duZXIpID0+CiAgYXR0cmlidXRlcyhlbGVtKQpFbGVtZW50CkRvY3VtZW50CiAgY29uc3RydWN0b3Iob2JqKQpEb2N1bWVudAogIGNyZWF0ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkKICBjcmVhdGVFbGVtZW50KHRhZ05hbWUpCiAgY3JlYXRlVGV4dE5vZGUodGV4dCkKICBwcmVkID0gKG4sIGspID0+CiAgKG4sIGspID0+CiAgKG4sIHApID0+CiAgZ2V0IGJvZHkoKQpEb2N1bWVudApBdHRyCiAgY29uc3RydWN0b3IocmF3LCBvd25lcikKICBnZXQgcGF0aCgpCiAgZ2V0IG93bmVyRWxlbWVudCgpCiAgZ2V0IG93bmVyRG9jdW1lbnQoKQogIGdldCBuYW1lKCkKICBzZXQgbmFtZSh2KQogIGdldCB2YWx1ZSgpCiAgc2V0IHZhbHVlKHYpCkF0dHIKVGV4dAogIGNvbnN0cnVjdG9yKGtleSwgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9PgogIHRvU3RyaW5nKCkKKGtleSwgb3duZXIpID0+ClRleHQKTm9kZQpUZXh0CkNvbW1lbnQKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGRhdGEoKQogIHZhbHVlID0+CiAgZ2V0IG5vZGVWYWx1ZSgpCiAgdmFsdWUgPT4KKG5vZGUsIG93bmVyKSA9PgpDb21tZW50Ck5vZGUKQ29tbWVudApUb2tlbkxpc3QKICBjb25zdHJ1Y3Rvcihvd25lciwga2V5ID0gJ2NsYXNzJykKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgKCkgPT4KICB2YWx1ZSA9PgogIGdldCBsZW5ndGgoKQogIHZhbHVlID0+CiAgZ2V0IHZhbHVlKCkKICB2YWx1ZSA9PgogIGl0ZW0oaW5kZXgpCiAgdmFsdWUgPT4KICBjb250YWlucyh0b2tlbikKICB2YWx1ZSA9PgogIGFkZCguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICByZW1vdmUoLi4udG9rZW5zKQooYXJyLCBzZXQpID0+CiAgdG9nZ2xlKHRva2VuLCBmb3JjZSkKKGFyciwgc2V0KSA9PgogIHN1cHBvcnRzKHRva2VuKQogIHJlcGxhY2Uob2xkVG9rZW4sIG5ld1Rva2VuKQooYXJyLCBzZXQpID0+ClRva2VuTGlzdApUb2tlbkxpc3QKICAoY29udGFpbmVyLCBpKSA9PgpNZW1icmFuZShpbnN0YW5jZSwgb2JqLCBwcm90bywgd3JhcFByb3AsIHdyYXBFbGVtZW50KQogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKHRhcmdldCwgcHJvcCkgPT4KICBnZXRQcm90b3R5cGVPZjogdGFyZ2V0ID0+CiAgc2V0UHJvdG90eXBlT2Y6ICh0YXJnZXQsIHApID0+CiAgb3duS2V5czogdGFyZ2V0ID0+CkZhY3RvcnkocmF3LCBvd25lciwgY3RvcikKICBpc0FycmF5ID0gYXJnID0+CiAgaXNBdHRyaWJ1dGVzID0gYXJnID0+AAAAAAAAAABCDAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2285,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2965,
								2981
							],
							[
								3099,
								3118
							],
							[
								3213,
								3232
							],
							[
								3354,
								3370
							],
							[
								3471,
								3487
							],
							[
								3636,
								3651
							],
							[
								3817,
								3834
							],
							[
								4113,
								4134
							],
							[
								4310,
								4327
							],
							[
								4497,
								4502
							],
							[
								4523,
								4532
							],
							[
								4690,
								4717
							],
							[
								5071,
								5088
							],
							[
								5376,
								5408
							],
							[
								6189,
								6193
							],
							[
								6261,
								6270
							],
							[
								6332,
								6346
							],
							[
								6394,
								6405
							],
							[
								6774,
								6786
							],
							[
								6870,
								6901
							],
							[
								7331,
								7348
							],
							[
								7910,
								7914
							],
							[
								7956,
								7989
							],
							[
								8000,
								8003
							],
							[
								8048,
								8064
							],
							[
								8208,
								8242
							],
							[
								8253,
								8256
							],
							[
								8280,
								8286
							],
							[
								8308,
								8323
							],
							[
								8557,
								8565
							],
							[
								8570,
								8593
							],
							[
								8624,
								8643
							],
							[
								8696,
								8712
							],
							[
								8760,
								8790
							],
							[
								9023,
								9055
							],
							[
								9294,
								9337
							],
							[
								9601,
								9619
							],
							[
								9668,
								9675
							],
							[
								10160,
								10168
							],
							[
								10220,
								10230
							],
							[
								10685,
								10719
							],
							[
								10795,
								10811
							],
							[
								10860,
								10887
							],
							[
								11046,
								11078
							],
							[
								11560,
								11578
							],
							[
								11712,
								11724
							],
							[
								11762,
								11774
							],
							[
								11790,
								11800
							],
							[
								11897,
								11906
							],
							[
								11938,
								11956
							],
							[
								12055,
								12076
							],
							[
								12140,
								12158
							],
							[
								12632,
								12646
							],
							[
								12708,
								12715
							],
							[
								12733,
								12757
							],
							[
								12930,
								12949
							],
							[
								13074,
								13090
							],
							[
								13171,
								13185
							],
							[
								13226,
								13239
							],
							[
								13283,
								13298
							],
							[
								13329,
								13343
							],
							[
								13909,
								13923
							],
							[
								14076,
								14099
							],
							[
								14158,
								14181
							],
							[
								14257,
								14261
							],
							[
								14354,
								14376
							],
							[
								14616,
								14624
							],
							[
								14670,
								14688
							],
							[
								14727,
								14740
							],
							[
								14767,
								14786
							],
							[
								14825,
								14838
							],
							[
								14872,
								14890
							],
							[
								14929,
								14942
							],
							[
								14971,
								14986
							],
							[
								15044,
								15065
							],
							[
								15097,
								15110
							],
							[
								15144,
								15166
							],
							[
								15210,
								15235
							],
							[
								15267,
								15280
							],
							[
								15342,
								15357
							],
							[
								15407,
								15423
							],
							[
								15543,
								15550
							],
							[
								17835,
								17843
							],
							[
								17864,
								17880
							],
							[
								17904,
								17912
							],
							[
								17932,
								17960
							],
							[
								18011,
								18033
							],
							[
								18118,
								18138
							],
							[
								18198,
								18214
							],
							[
								18311,
								18326
							],
							[
								18363,
								18378
							],
							[
								18454,
								18464
							],
							[
								18912,
								18920
							],
							[
								19010,
								19014
							],
							[
								19032,
								19055
							],
							[
								19219,
								19229
							],
							[
								19417,
								19435
							],
							[
								19485,
								19504
							],
							[
								19546,
								19556
							],
							[
								19619,
								19630
							],
							[
								19667,
								19678
							],
							[
								19749,
								19761
							],
							[
								20003,
								20007
							],
							[
								20099,
								20103
							],
							[
								20162,
								20185
							],
							[
								20442,
								20453
							],
							[
								20476,
								20490
							],
							[
								20559,
								20570
							],
							[
								20595,
								20609
							],
							[
								20724,
								20734
							],
							[
								20765,
								20773
							],
							[
								20789,
								20804
							],
							[
								20835,
								20843
							],
							[
								20859,
								20869
							],
							[
								21097,
								21112
							],
							[
								21139,
								21143
							],
							[
								21166,
								21170
							],
							[
								21189,
								21193
							],
							[
								21342,
								21349
							],
							[
								21367,
								21390
							],
							[
								21513,
								21524
							],
							[
								21557,
								21571
							],
							[
								21633,
								21646
							],
							[
								21684,
								21700
							],
							[
								21744,
								21754
							],
							[
								21778,
								21786
							],
							[
								21819,
								21834
							],
							[
								21858,
								21866
							],
							[
								22030,
								22046
							],
							[
								22077,
								22084
							],
							[
								22107,
								22111
							],
							[
								22130,
								22137
							],
							[
								22298,
								22307
							],
							[
								22312,
								22345
							],
							[
								22435,
								22446
							],
							[
								22478,
								22492
							],
							[
								22561,
								22574
							],
							[
								22603,
								22619
							],
							[
								22663,
								22675
							],
							[
								22702,
								22710
							],
							[
								22733,
								22744
							],
							[
								22771,
								22779
							],
							[
								22805,
								22816
							],
							[
								22843,
								22851
							],
							[
								22874,
								22889
							],
							[
								22916,
								22924
							],
							[
								22961,
								22975
							],
							[
								22995,
								23008
							],
							[
								23156,
								23173
							],
							[
								23193,
								23206
							],
							[
								23358,
								23378
							],
							[
								23398,
								23411
							],
							[
								23545,
								23560
							],
							[
								23587,
								23614
							],
							[
								23634,
								23647
							],
							[
								23870,
								23879
							],
							[
								23945,
								23954
							],
							[
								23965,
								23983
							],
							[
								24005,
								24067
							],
							[
								24136,
								24168
							],
							[
								24264,
								24286
							],
							[
								24344,
								24387
							],
							[
								24575,
								24600
							],
							[
								24647,
								24677
							],
							[
								24695,
								24713
							],
							[
								25802,
								25837
							],
							[
								25960,
								25976
							],
							[
								26005,
								26026
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							"() =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCigpID0+CiAgdmFsdWUgPT4KICBpbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSkKICByZW1vdmVDaGlsZChub2RlKQogIHJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpCk5vZGUKICByYXcobm9kZSkKICBjaGlsZHJlbihub2RlKQogIG93bmVyKG5vZGUpCiAgcGFyZW50KG5vZGUpCiAgaGllcihub2RlLCBwcmVkID0gbm9kZSA9PiB0cnVlKQooeyBub2RlVHlwZSB9KSA9PgpOb2RlCk1ha2VDYWNoZShjdG9yLCBzdG9yZSA9IAooKSkKICAoaywgLi4uYXJncykgPT4KTWFrZUNhY2hlMihjdG9yLCBzdG9yZSA9IAooKSkKICBrZXkgPT4KICAoaWQsIG93bmVyKSA9PgpOb2RlTGlzdAogIGNvbnN0cnVjdG9yKG9iaiwgb3duZXIpCiAgaXNFbGVtZW50ID0gcHJvcCA9PgogIGlzTGlzdCA9IHByb3AgPT4KICB3cmFwRWxlbWVudCA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKHRhcmdldCwgcHJvcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KICBwcm9wID0+Ck5vZGVMaXN0CiAgZ2V0IHBhdGgoKQpOYW1lZE5vZGVNYXAob2JqLCBvd25lcikKICBpc0F0dHIgPSBwcm9wID0+CiAgd3JhcEF0dHIgPSAodmFsdWUsIHByb3ApID0+CiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KTmFtZWROb2RlTWFwCk5hbWVkTm9kZU1hcAogIGdldCBwYXRoKCkKICBpdGVtKGtleSkKICBzZXROYW1lZEl0ZW0oYXR0cikKICByZW1vdmVOYW1lZEl0ZW0obmFtZSkKICBnZXROYW1lZEl0ZW0obmFtZSkKKGFjYywgcHJvcCkgPT4KRWxlbWVudAogIGNvbnN0cnVjdG9yKG9iaiwgcGFyZW50KQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgYXR0cmlidXRlcygpCiAgc2V0IHRhZ05hbWUodikKICBnZXQgdGFnTmFtZSgpCiAgc2V0IG5vZGVOYW1lKHYpCiAgZ2V0IG5vZGVOYW1lKCkKICBnZXQgY2hpbGRyZW4oKQogIGdldCBjaGlsZEVsZW1lbnRDb3VudCgpCiAgZ2V0IGZpcnN0RWxlbWVudENoaWxkKCkKICBuID0+CiAgZ2V0IGxhc3RFbGVtZW50Q2hpbGQoKQogIGdldCBpZCgpCiAgZ2V0QXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5hbWVzKCkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGhhc0F0dHJpYnV0ZXMoKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGF0dHJpYnV0ZXMgPT4KICBnZXRBdHRyaWJ1dGVOb2RlKG5hbWUpCiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGF0dHJpYnV0ZXMgPT4KKG9iaiwgb3duZXIpID0+CiAgYXR0cmlidXRlcyhlbGVtKQpFbGVtZW50CkRvY3VtZW50CiAgY29uc3RydWN0b3Iob2JqKQpEb2N1bWVudAogIGNyZWF0ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkKICBjcmVhdGVFbGVtZW50KHRhZ05hbWUpCiAgY3JlYXRlVGV4dE5vZGUodGV4dCkKICBwcmVkID0gKG4sIGspID0+CiAgKG4sIGspID0+CiAgKG4sIHApID0+CiAgZ2V0IGJvZHkoKQpEb2N1bWVudApBdHRyCiAgY29uc3RydWN0b3IocmF3LCBvd25lcikKICBnZXQgcGF0aCgpCiAgZ2V0IG93bmVyRWxlbWVudCgpCiAgZ2V0IG93bmVyRG9jdW1lbnQoKQogIGdldCBuYW1lKCkKICBzZXQgbmFtZSh2KQogIGdldCB2YWx1ZSgpCiAgc2V0IHZhbHVlKHYpCkF0dHIKVGV4dAogIGNvbnN0cnVjdG9yKGtleSwgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9PgogIHRvU3RyaW5nKCkKKGtleSwgb3duZXIpID0+ClRleHQKTm9kZQpUZXh0CkNvbW1lbnQKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGRhdGEoKQogIHZhbHVlID0+CiAgZ2V0IG5vZGVWYWx1ZSgpCiAgdmFsdWUgPT4KKG5vZGUsIG93bmVyKSA9PgpDb21tZW50Ck5vZGUKQ29tbWVudApUb2tlbkxpc3QKICBjb25zdHJ1Y3Rvcihvd25lciwga2V5ID0gJ2NsYXNzJykKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgKCkgPT4KICB2YWx1ZSA9PgogIGdldCBsZW5ndGgoKQogIHZhbHVlID0+CiAgZ2V0IHZhbHVlKCkKICB2YWx1ZSA9PgogIGl0ZW0oaW5kZXgpCiAgdmFsdWUgPT4KICBjb250YWlucyh0b2tlbikKICB2YWx1ZSA9PgogIGFkZCguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICByZW1vdmUoLi4udG9rZW5zKQooYXJyLCBzZXQpID0+CiAgdG9nZ2xlKHRva2VuLCBmb3JjZSkKKGFyciwgc2V0KSA9PgogIHN1cHBvcnRzKHRva2VuKQogIHJlcGxhY2Uob2xkVG9rZW4sIG5ld1Rva2VuKQooYXJyLCBzZXQpID0+ClRva2VuTGlzdApUb2tlbkxpc3QKICAoY29udGFpbmVyLCBpKSA9PgpNZW1icmFuZShpbnN0YW5jZSwgb2JqLCBwcm90bywgd3JhcFByb3AsIHdyYXBFbGVtZW50KQogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKHRhcmdldCwgcHJvcCkgPT4KICBnZXRQcm90b3R5cGVPZjogdGFyZ2V0ID0+CiAgc2V0UHJvdG90eXBlT2Y6ICh0YXJnZXQsIHApID0+CiAgb3duS2V5czogdGFyZ2V0ID0+CkZhY3RvcnkocmF3LCBvd25lciwgY3RvcikKICBpc0FycmF5ID0gYXJnID0+CiAgaXNBdHRyaWJ1dGVzID0gYXJnID0+AAAAAAAAAABCDAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2286,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10221,
								10229
							],
							[
								10281,
								10291
							],
							[
								10746,
								10780
							],
							[
								10856,
								10872
							],
							[
								10921,
								10948
							],
							[
								11107,
								11139
							],
							[
								11621,
								11639
							],
							[
								11773,
								11785
							],
							[
								11823,
								11835
							],
							[
								11851,
								11861
							],
							[
								11958,
								11967
							],
							[
								11999,
								12017
							],
							[
								12116,
								12137
							],
							[
								12201,
								12219
							],
							[
								12693,
								12707
							],
							[
								12769,
								12776
							],
							[
								12794,
								12818
							],
							[
								12991,
								13010
							],
							[
								13135,
								13151
							],
							[
								13232,
								13246
							],
							[
								13287,
								13300
							],
							[
								13344,
								13359
							],
							[
								13390,
								13404
							],
							[
								13970,
								13984
							],
							[
								14137,
								14160
							],
							[
								14219,
								14242
							],
							[
								14318,
								14322
							],
							[
								14424,
								14446
							],
							[
								14686,
								14694
							],
							[
								14740,
								14758
							],
							[
								14797,
								14810
							],
							[
								14837,
								14856
							],
							[
								14895,
								14908
							],
							[
								14942,
								14960
							],
							[
								14999,
								15012
							],
							[
								15041,
								15056
							],
							[
								15114,
								15135
							],
							[
								15167,
								15180
							],
							[
								15214,
								15236
							],
							[
								15280,
								15305
							],
							[
								15337,
								15350
							],
							[
								15412,
								15427
							],
							[
								15477,
								15493
							],
							[
								15613,
								15620
							],
							[
								17905,
								17913
							],
							[
								17934,
								17950
							],
							[
								17974,
								17982
							],
							[
								18002,
								18030
							],
							[
								18081,
								18103
							],
							[
								18188,
								18208
							],
							[
								18268,
								18284
							],
							[
								18381,
								18396
							],
							[
								18433,
								18448
							],
							[
								18524,
								18534
							],
							[
								18982,
								18990
							],
							[
								19080,
								19084
							],
							[
								19102,
								19125
							],
							[
								19289,
								19299
							],
							[
								19487,
								19505
							],
							[
								19555,
								19574
							],
							[
								19616,
								19626
							],
							[
								19689,
								19700
							],
							[
								19737,
								19748
							],
							[
								19819,
								19831
							],
							[
								20073,
								20077
							],
							[
								20168,
								20172
							],
							[
								20231,
								20254
							],
							[
								20509,
								20520
							],
							[
								20543,
								20557
							],
							[
								20626,
								20637
							],
							[
								20662,
								20676
							],
							[
								20791,
								20801
							],
							[
								20832,
								20840
							],
							[
								20856,
								20871
							],
							[
								20902,
								20910
							],
							[
								20926,
								20936
							],
							[
								21164,
								21179
							],
							[
								21206,
								21210
							],
							[
								21233,
								21237
							],
							[
								21256,
								21260
							],
							[
								21409,
								21416
							],
							[
								21434,
								21457
							],
							[
								21580,
								21591
							],
							[
								21624,
								21638
							],
							[
								21700,
								21713
							],
							[
								21751,
								21767
							],
							[
								21811,
								21821
							],
							[
								21845,
								21853
							],
							[
								21886,
								21901
							],
							[
								21925,
								21933
							],
							[
								22097,
								22113
							],
							[
								22144,
								22151
							],
							[
								22174,
								22178
							],
							[
								22197,
								22204
							],
							[
								22365,
								22374
							],
							[
								22379,
								22412
							],
							[
								22502,
								22513
							],
							[
								22545,
								22559
							],
							[
								22628,
								22641
							],
							[
								22670,
								22686
							],
							[
								22730,
								22742
							],
							[
								22769,
								22777
							],
							[
								22800,
								22811
							],
							[
								22838,
								22846
							],
							[
								22872,
								22883
							],
							[
								22910,
								22918
							],
							[
								22941,
								22956
							],
							[
								22983,
								22991
							],
							[
								23028,
								23042
							],
							[
								23062,
								23075
							],
							[
								23223,
								23240
							],
							[
								23260,
								23273
							],
							[
								23425,
								23445
							],
							[
								23465,
								23478
							],
							[
								23612,
								23627
							],
							[
								23654,
								23681
							],
							[
								23701,
								23714
							],
							[
								23937,
								23946
							],
							[
								24012,
								24021
							],
							[
								24032,
								24050
							],
							[
								24072,
								24134
							],
							[
								24203,
								24235
							],
							[
								24331,
								24353
							],
							[
								24411,
								24454
							],
							[
								24642,
								24667
							],
							[
								24714,
								24744
							],
							[
								24762,
								24780
							],
							[
								25869,
								25904
							],
							[
								26027,
								26043
							],
							[
								26072,
								26093
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABCDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCigpID0+CiAgdmFsdWUgPT4KICBpbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSkKICByZW1vdmVDaGlsZChub2RlKQogIHJlcGxhY2VDaGlsZChuZXdDaGlsZCwgb2xkQ2hpbGQpCk5vZGUKICByYXcobm9kZSkKICBjaGlsZHJlbihub2RlKQogIG93bmVyKG5vZGUpCiAgcGFyZW50KG5vZGUpCiAgaGllcihub2RlLCBwcmVkID0gbm9kZSA9PiB0cnVlKQooeyBub2RlVHlwZSB9KSA9PgpOb2RlCk1ha2VDYWNoZShjdG9yLCBzdG9yZSA9IAooKSkKICAoaywgLi4uYXJncykgPT4KTWFrZUNhY2hlMihjdG9yLCBzdG9yZSA9IAooKSkKICBrZXkgPT4KICAoaWQsIG93bmVyKSA9PgpOb2RlTGlzdAogIGNvbnN0cnVjdG9yKG9iaiwgb3duZXIpCiAgaXNFbGVtZW50ID0gcHJvcCA9PgogIGlzTGlzdCA9IHByb3AgPT4KICB3cmFwRWxlbWVudCA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKHRhcmdldCwgcHJvcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KICBwcm9wID0+Ck5vZGVMaXN0CiAgZ2V0IHBhdGgoKQpOYW1lZE5vZGVNYXAob2JqLCBvd25lcikKICBpc0F0dHIgPSBwcm9wID0+CiAgd3JhcEF0dHIgPSAodmFsdWUsIHByb3ApID0+CiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KTmFtZWROb2RlTWFwCk5hbWVkTm9kZU1hcAogIGdldCBwYXRoKCkKICBpdGVtKGtleSkKICBzZXROYW1lZEl0ZW0oYXR0cikKICByZW1vdmVOYW1lZEl0ZW0obmFtZSkKICBnZXROYW1lZEl0ZW0obmFtZSkKKGFjYywgcHJvcCkgPT4KRWxlbWVudAogIGNvbnN0cnVjdG9yKG9iaiwgcGFyZW50KQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgYXR0cmlidXRlcygpCiAgc2V0IHRhZ05hbWUodikKICBnZXQgdGFnTmFtZSgpCiAgc2V0IG5vZGVOYW1lKHYpCiAgZ2V0IG5vZGVOYW1lKCkKICBnZXQgY2hpbGRyZW4oKQogIGdldCBjaGlsZEVsZW1lbnRDb3VudCgpCiAgZ2V0IGZpcnN0RWxlbWVudENoaWxkKCkKICBuID0+CiAgZ2V0IGxhc3RFbGVtZW50Q2hpbGQoKQogIGdldCBpZCgpCiAgZ2V0QXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5hbWVzKCkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGhhc0F0dHJpYnV0ZXMoKQogIHJlbW92ZUF0dHJpYnV0ZShuYW1lKQogIGF0dHJpYnV0ZXMgPT4KICBnZXRBdHRyaWJ1dGVOb2RlKG5hbWUpCiAgc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGF0dHJpYnV0ZXMgPT4KKG9iaiwgb3duZXIpID0+CiAgYXR0cmlidXRlcyhlbGVtKQpFbGVtZW50CkRvY3VtZW50CiAgY29uc3RydWN0b3Iob2JqKQpEb2N1bWVudAogIGNyZWF0ZUF0dHJpYnV0ZShuYW1lLCB2YWx1ZSkKICBjcmVhdGVFbGVtZW50KHRhZ05hbWUpCiAgY3JlYXRlVGV4dE5vZGUodGV4dCkKICBwcmVkID0gKG4sIGspID0+CiAgKG4sIGspID0+CiAgKG4sIHApID0+CiAgZ2V0IGJvZHkoKQpEb2N1bWVudApBdHRyCiAgY29uc3RydWN0b3IocmF3LCBvd25lcikKICBnZXQgcGF0aCgpCiAgZ2V0IG93bmVyRWxlbWVudCgpCiAgZ2V0IG93bmVyRG9jdW1lbnQoKQogIGdldCBuYW1lKCkKICBzZXQgbmFtZSh2KQogIGdldCB2YWx1ZSgpCiAgc2V0IHZhbHVlKHYpCkF0dHIKVGV4dAogIGNvbnN0cnVjdG9yKGtleSwgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9PgogIHRvU3RyaW5nKCkKKGtleSwgb3duZXIpID0+ClRleHQKTm9kZQpUZXh0CkNvbW1lbnQKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGRhdGEoKQogIHZhbHVlID0+CiAgZ2V0IG5vZGVWYWx1ZSgpCiAgdmFsdWUgPT4KKG5vZGUsIG93bmVyKSA9PgpDb21tZW50Ck5vZGUKQ29tbWVudApUb2tlbkxpc3QKICBjb25zdHJ1Y3Rvcihvd25lciwga2V5ID0gJ2NsYXNzJykKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgKCkgPT4KICB2YWx1ZSA9PgogIGdldCBsZW5ndGgoKQogIHZhbHVlID0+CiAgZ2V0IHZhbHVlKCkKICB2YWx1ZSA9PgogIGl0ZW0oaW5kZXgpCiAgdmFsdWUgPT4KICBjb250YWlucyh0b2tlbikKICB2YWx1ZSA9PgogIGFkZCguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICByZW1vdmUoLi4udG9rZW5zKQooYXJyLCBzZXQpID0+CiAgdG9nZ2xlKHRva2VuLCBmb3JjZSkKKGFyciwgc2V0KSA9PgogIHN1cHBvcnRzKHRva2VuKQogIHJlcGxhY2Uob2xkVG9rZW4sIG5ld1Rva2VuKQooYXJyLCBzZXQpID0+ClRva2VuTGlzdApUb2tlbkxpc3QKICAoY29udGFpbmVyLCBpKSA9PgpNZW1icmFuZShpbnN0YW5jZSwgb2JqLCBwcm90bywgd3JhcFByb3AsIHdyYXBFbGVtZW50KQogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgaGFzOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogKHRhcmdldCwgcHJvcCkgPT4KICBnZXRQcm90b3R5cGVPZjogdGFyZ2V0ID0+CiAgc2V0UHJvdG90eXBlT2Y6ICh0YXJnZXQsIHApID0+CiAgb3duS2V5czogdGFyZ2V0ID0+CkZhY3RvcnkocmF3LCBvd25lciwgY3RvcikKICBpc0FycmF5ID0gYXJnID0+CiAgaXNBdHRyaWJ1dGVzID0gYXJnID0+AAAAAAAAAABEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2287,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCiAgKCkgPT4KICB2YWx1ZSA9PgogIGluc2VydEJlZm9yZShub2RlLCByZWZOb2RlKQogIHJlbW92ZUNoaWxkKG5vZGUpCiAgcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkKTm9kZQogIHJhdyhub2RlKQogIGNoaWxkcmVuKG5vZGUpCiAgb3duZXIobm9kZSkKICBwYXJlbnQobm9kZSkKICBoaWVyKG5vZGUsIHByZWQgPSBub2RlID0+IHRydWUpCih7IG5vZGVUeXBlIH0pID0+Ck5vZGUKTWFrZUNhY2hlKGN0b3IsIHN0b3JlID0gCigpKQogIChrLCAuLi5hcmdzKSA9PgpNYWtlQ2FjaGUyKGN0b3IsIHN0b3JlID0gCigpKQogIGtleSA9PgogIChpZCwgb3duZXIpID0+Ck5vZGVMaXN0CiAgY29uc3RydWN0b3Iob2JqLCBvd25lcikKICBpc0VsZW1lbnQgPSBwcm9wID0+CiAgaXNMaXN0ID0gcHJvcCA9PgogIHdyYXBFbGVtZW50ID0gKHZhbHVlLCBwcm9wKSA9PgogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIG93bktleXM6IHRhcmdldCA9PgogIHByb3AgPT4KTm9kZUxpc3QKICBnZXQgcGF0aCgpCk5hbWVkTm9kZU1hcChvYmosIG93bmVyKQogIGlzQXR0ciA9IHByb3AgPT4KICB3cmFwQXR0ciA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIG93bktleXM6IHRhcmdldCA9PgpOYW1lZE5vZGVNYXAKTmFtZWROb2RlTWFwCiAgZ2V0IHBhdGgoKQogIGl0ZW0oa2V5KQogIHNldE5hbWVkSXRlbShhdHRyKQogIHJlbW92ZU5hbWVkSXRlbShuYW1lKQogIGdldE5hbWVkSXRlbShuYW1lKQooYWNjLCBwcm9wKSA9PgpFbGVtZW50CiAgY29uc3RydWN0b3Iob2JqLCBwYXJlbnQpCiAgZ2V0IHBhcmVudEVsZW1lbnQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBzZXQgdGFnTmFtZSh2KQogIGdldCB0YWdOYW1lKCkKICBzZXQgbm9kZU5hbWUodikKICBnZXQgbm9kZU5hbWUoKQogIGdldCBjaGlsZHJlbigpCiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCkKICBnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKQogIG4gPT4KICBnZXQgbGFzdEVsZW1lbnRDaGlsZCgpCiAgZ2V0IGlkKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgZ2V0QXR0cmlidXRlTmFtZXMoKQogIGF0dHJpYnV0ZXMgPT4KICBoYXNBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlcygpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5vZGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgYXR0cmlidXRlcyA9Pgoob2JqLCBvd25lcikgPT4KICBhdHRyaWJ1dGVzKGVsZW0pCkVsZW1lbnQKRG9jdW1lbnQKICBjb25zdHJ1Y3RvcihvYmopCkRvY3VtZW50CiAgY3JlYXRlQXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkKICBjcmVhdGVUZXh0Tm9kZSh0ZXh0KQogIHByZWQgPSAobiwgaykgPT4KICAobiwgaykgPT4KICAobiwgcCkgPT4KICBnZXQgYm9keSgpCkRvY3VtZW50CkF0dHIKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCBwYXRoKCkKICBnZXQgb3duZXJFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IG5hbWUoKQogIHNldCBuYW1lKHYpCiAgZ2V0IHZhbHVlKCkKICBzZXQgdmFsdWUodikKQXR0cgpUZXh0CiAgY29uc3RydWN0b3Ioa2V5LCBvd25lcikKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCBkYXRhKCkKICB2YWx1ZSA9PgogIGdldCBub2RlVmFsdWUoKQogIHZhbHVlID0+CiAgdG9TdHJpbmcoKQooa2V5LCBvd25lcikgPT4KVGV4dApOb2RlClRleHQKQ29tbWVudAogIGNvbnN0cnVjdG9yKHJhdywgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogICgpID0+CiAgdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9Pgoobm9kZSwgb3duZXIpID0+CkNvbW1lbnQKTm9kZQpDb21tZW50ClRva2VuTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCBrZXkgPSAnY2xhc3MnKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGxlbmd0aCgpCiAgdmFsdWUgPT4KICBnZXQgdmFsdWUoKQogIHZhbHVlID0+CiAgaXRlbShpbmRleCkKICB2YWx1ZSA9PgogIGNvbnRhaW5zKHRva2VuKQogIHZhbHVlID0+CiAgYWRkKC4uLnRva2VucykKKGFyciwgc2V0KSA9PgogIHJlbW92ZSguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICB0b2dnbGUodG9rZW4sIGZvcmNlKQooYXJyLCBzZXQpID0+CiAgc3VwcG9ydHModG9rZW4pCiAgcmVwbGFjZShvbGRUb2tlbiwgbmV3VG9rZW4pCihhcnIsIHNldCkgPT4KVG9rZW5MaXN0ClRva2VuTGlzdAogIChjb250YWluZXIsIGkpID0+Ck1lbWJyYW5lKGluc3RhbmNlLCBvYmosIHByb3RvLCB3cmFwUHJvcCwgd3JhcEVsZW1lbnQpCiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBoYXM6ICh0YXJnZXQsIHByb3ApID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldFByb3RvdHlwZU9mOiB0YXJnZXQgPT4KICBzZXRQcm90b3R5cGVPZjogKHRhcmdldCwgcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KRmFjdG9yeShyYXcsIG93bmVyLCBjdG9yKQogIGlzQXJyYXkgPSBhcmcgPT4KICBpc0F0dHJpYnV0ZXMgPSBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2288,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10221,
								10229
							],
							[
								10281,
								10291
							],
							[
								10746,
								10780
							],
							[
								10856,
								10872
							],
							[
								10921,
								10948
							],
							[
								11107,
								11139
							],
							[
								11621,
								11639
							],
							[
								11773,
								11785
							],
							[
								11823,
								11835
							],
							[
								11851,
								11861
							],
							[
								11958,
								11967
							],
							[
								11999,
								12017
							],
							[
								12116,
								12137
							],
							[
								12201,
								12219
							],
							[
								12693,
								12707
							],
							[
								12769,
								12776
							],
							[
								12794,
								12818
							],
							[
								12991,
								13010
							],
							[
								13135,
								13151
							],
							[
								13232,
								13246
							],
							[
								13287,
								13300
							],
							[
								13344,
								13359
							],
							[
								13390,
								13404
							],
							[
								13970,
								13984
							],
							[
								14137,
								14160
							],
							[
								14219,
								14242
							],
							[
								14318,
								14322
							],
							[
								14424,
								14446
							],
							[
								14686,
								14694
							],
							[
								14740,
								14758
							],
							[
								14797,
								14810
							],
							[
								14837,
								14856
							],
							[
								14895,
								14908
							],
							[
								14942,
								14960
							],
							[
								14999,
								15012
							],
							[
								15041,
								15056
							],
							[
								15114,
								15135
							],
							[
								15167,
								15180
							],
							[
								15214,
								15236
							],
							[
								15280,
								15305
							],
							[
								15337,
								15350
							],
							[
								15412,
								15427
							],
							[
								15477,
								15493
							],
							[
								15613,
								15620
							],
							[
								17905,
								17913
							],
							[
								17934,
								17950
							],
							[
								17974,
								17982
							],
							[
								18002,
								18030
							],
							[
								18081,
								18103
							],
							[
								18188,
								18208
							],
							[
								18268,
								18284
							],
							[
								18381,
								18396
							],
							[
								18433,
								18448
							],
							[
								18524,
								18534
							],
							[
								18982,
								18990
							],
							[
								19080,
								19084
							],
							[
								19102,
								19125
							],
							[
								19289,
								19299
							],
							[
								19487,
								19505
							],
							[
								19555,
								19574
							],
							[
								19616,
								19626
							],
							[
								19689,
								19700
							],
							[
								19737,
								19748
							],
							[
								19819,
								19831
							],
							[
								20073,
								20077
							],
							[
								20168,
								20172
							],
							[
								20231,
								20254
							],
							[
								20509,
								20520
							],
							[
								20543,
								20557
							],
							[
								20626,
								20637
							],
							[
								20662,
								20676
							],
							[
								20791,
								20801
							],
							[
								20832,
								20840
							],
							[
								20856,
								20871
							],
							[
								20902,
								20910
							],
							[
								20926,
								20936
							],
							[
								21164,
								21179
							],
							[
								21206,
								21210
							],
							[
								21233,
								21237
							],
							[
								21256,
								21260
							],
							[
								21409,
								21416
							],
							[
								21434,
								21457
							],
							[
								21580,
								21591
							],
							[
								21624,
								21638
							],
							[
								21700,
								21713
							],
							[
								21751,
								21767
							],
							[
								21811,
								21821
							],
							[
								21845,
								21853
							],
							[
								21886,
								21901
							],
							[
								21925,
								21933
							],
							[
								22097,
								22113
							],
							[
								22144,
								22151
							],
							[
								22174,
								22178
							],
							[
								22197,
								22204
							],
							[
								22365,
								22374
							],
							[
								22379,
								22412
							],
							[
								22502,
								22513
							],
							[
								22545,
								22559
							],
							[
								22628,
								22641
							],
							[
								22670,
								22686
							],
							[
								22730,
								22742
							],
							[
								22769,
								22777
							],
							[
								22800,
								22811
							],
							[
								22838,
								22846
							],
							[
								22872,
								22883
							],
							[
								22910,
								22918
							],
							[
								22941,
								22956
							],
							[
								22983,
								22991
							],
							[
								23028,
								23042
							],
							[
								23062,
								23075
							],
							[
								23223,
								23240
							],
							[
								23260,
								23273
							],
							[
								23425,
								23445
							],
							[
								23465,
								23478
							],
							[
								23612,
								23627
							],
							[
								23654,
								23681
							],
							[
								23701,
								23714
							],
							[
								23937,
								23946
							],
							[
								24012,
								24021
							],
							[
								24032,
								24050
							],
							[
								24072,
								24134
							],
							[
								24203,
								24235
							],
							[
								24331,
								24353
							],
							[
								24411,
								24454
							],
							[
								24642,
								24667
							],
							[
								24714,
								24744
							],
							[
								24762,
								24780
							],
							[
								25869,
								25904
							],
							[
								26027,
								26043
							],
							[
								26072,
								26093
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AQAAAAAAAAAAAAAARAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2289,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCiAgKCkgPT4KICB2YWx1ZSA9PgogIGluc2VydEJlZm9yZShub2RlLCByZWZOb2RlKQogIHJlbW92ZUNoaWxkKG5vZGUpCiAgcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkKTm9kZQogIHJhdyhub2RlKQogIGNoaWxkcmVuKG5vZGUpCiAgb3duZXIobm9kZSkKICBwYXJlbnQobm9kZSkKICBoaWVyKG5vZGUsIHByZWQgPSBub2RlID0+IHRydWUpCih7IG5vZGVUeXBlIH0pID0+Ck5vZGUKTWFrZUNhY2hlKGN0b3IsIHN0b3JlID0gCigpKQogIChrLCAuLi5hcmdzKSA9PgpNYWtlQ2FjaGUyKGN0b3IsIHN0b3JlID0gCigpKQogIGtleSA9PgogIChpZCwgb3duZXIpID0+Ck5vZGVMaXN0CiAgY29uc3RydWN0b3Iob2JqLCBvd25lcikKICBpc0VsZW1lbnQgPSBwcm9wID0+CiAgaXNMaXN0ID0gcHJvcCA9PgogIHdyYXBFbGVtZW50ID0gKHZhbHVlLCBwcm9wKSA9PgogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIG93bktleXM6IHRhcmdldCA9PgogIHByb3AgPT4KTm9kZUxpc3QKICBnZXQgcGF0aCgpCk5hbWVkTm9kZU1hcChvYmosIG93bmVyKQogIGlzQXR0ciA9IHByb3AgPT4KICB3cmFwQXR0ciA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIG93bktleXM6IHRhcmdldCA9PgpOYW1lZE5vZGVNYXAKTmFtZWROb2RlTWFwCiAgZ2V0IHBhdGgoKQogIGl0ZW0oa2V5KQogIHNldE5hbWVkSXRlbShhdHRyKQogIHJlbW92ZU5hbWVkSXRlbShuYW1lKQogIGdldE5hbWVkSXRlbShuYW1lKQooYWNjLCBwcm9wKSA9PgpFbGVtZW50CiAgY29uc3RydWN0b3Iob2JqLCBwYXJlbnQpCiAgZ2V0IHBhcmVudEVsZW1lbnQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBzZXQgdGFnTmFtZSh2KQogIGdldCB0YWdOYW1lKCkKICBzZXQgbm9kZU5hbWUodikKICBnZXQgbm9kZU5hbWUoKQogIGdldCBjaGlsZHJlbigpCiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCkKICBnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKQogIG4gPT4KICBnZXQgbGFzdEVsZW1lbnRDaGlsZCgpCiAgZ2V0IGlkKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgZ2V0QXR0cmlidXRlTmFtZXMoKQogIGF0dHJpYnV0ZXMgPT4KICBoYXNBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlcygpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5vZGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgYXR0cmlidXRlcyA9Pgoob2JqLCBvd25lcikgPT4KICBhdHRyaWJ1dGVzKGVsZW0pCkVsZW1lbnQKRG9jdW1lbnQKICBjb25zdHJ1Y3RvcihvYmopCkRvY3VtZW50CiAgY3JlYXRlQXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkKICBjcmVhdGVUZXh0Tm9kZSh0ZXh0KQogIHByZWQgPSAobiwgaykgPT4KICAobiwgaykgPT4KICAobiwgcCkgPT4KICBnZXQgYm9keSgpCkRvY3VtZW50CkF0dHIKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCBwYXRoKCkKICBnZXQgb3duZXJFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IG5hbWUoKQogIHNldCBuYW1lKHYpCiAgZ2V0IHZhbHVlKCkKICBzZXQgdmFsdWUodikKQXR0cgpUZXh0CiAgY29uc3RydWN0b3Ioa2V5LCBvd25lcikKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCBkYXRhKCkKICB2YWx1ZSA9PgogIGdldCBub2RlVmFsdWUoKQogIHZhbHVlID0+CiAgdG9TdHJpbmcoKQooa2V5LCBvd25lcikgPT4KVGV4dApOb2RlClRleHQKQ29tbWVudAogIGNvbnN0cnVjdG9yKHJhdywgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogICgpID0+CiAgdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9Pgoobm9kZSwgb3duZXIpID0+CkNvbW1lbnQKTm9kZQpDb21tZW50ClRva2VuTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCBrZXkgPSAnY2xhc3MnKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGxlbmd0aCgpCiAgdmFsdWUgPT4KICBnZXQgdmFsdWUoKQogIHZhbHVlID0+CiAgaXRlbShpbmRleCkKICB2YWx1ZSA9PgogIGNvbnRhaW5zKHRva2VuKQogIHZhbHVlID0+CiAgYWRkKC4uLnRva2VucykKKGFyciwgc2V0KSA9PgogIHJlbW92ZSguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICB0b2dnbGUodG9rZW4sIGZvcmNlKQooYXJyLCBzZXQpID0+CiAgc3VwcG9ydHModG9rZW4pCiAgcmVwbGFjZShvbGRUb2tlbiwgbmV3VG9rZW4pCihhcnIsIHNldCkgPT4KVG9rZW5MaXN0ClRva2VuTGlzdAogIChjb250YWluZXIsIGkpID0+Ck1lbWJyYW5lKGluc3RhbmNlLCBvYmosIHByb3RvLCB3cmFwUHJvcCwgd3JhcEVsZW1lbnQpCiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBoYXM6ICh0YXJnZXQsIHByb3ApID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldFByb3RvdHlwZU9mOiB0YXJnZXQgPT4KICBzZXRQcm90b3R5cGVPZjogKHRhcmdldCwgcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KRmFjdG9yeShyYXcsIG93bmVyLCBjdG9yKQogIGlzQXJyYXkgPSBhcmcgPT4KICBpc0F0dHJpYnV0ZXMgPSBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2290,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10221,
								10229
							],
							[
								10281,
								10291
							],
							[
								10746,
								10780
							],
							[
								10856,
								10872
							],
							[
								10921,
								10948
							],
							[
								11107,
								11139
							],
							[
								11621,
								11639
							],
							[
								11773,
								11785
							],
							[
								11823,
								11835
							],
							[
								11851,
								11861
							],
							[
								11958,
								11967
							],
							[
								11999,
								12017
							],
							[
								12116,
								12137
							],
							[
								12201,
								12219
							],
							[
								12693,
								12707
							],
							[
								12769,
								12776
							],
							[
								12794,
								12818
							],
							[
								12991,
								13010
							],
							[
								13135,
								13151
							],
							[
								13232,
								13246
							],
							[
								13287,
								13300
							],
							[
								13344,
								13359
							],
							[
								13390,
								13404
							],
							[
								13970,
								13984
							],
							[
								14137,
								14160
							],
							[
								14219,
								14242
							],
							[
								14318,
								14322
							],
							[
								14424,
								14446
							],
							[
								14686,
								14694
							],
							[
								14740,
								14758
							],
							[
								14797,
								14810
							],
							[
								14837,
								14856
							],
							[
								14895,
								14908
							],
							[
								14942,
								14960
							],
							[
								14999,
								15012
							],
							[
								15041,
								15056
							],
							[
								15114,
								15135
							],
							[
								15167,
								15180
							],
							[
								15214,
								15236
							],
							[
								15280,
								15305
							],
							[
								15337,
								15350
							],
							[
								15412,
								15427
							],
							[
								15477,
								15493
							],
							[
								15613,
								15620
							],
							[
								17905,
								17913
							],
							[
								17934,
								17950
							],
							[
								17974,
								17982
							],
							[
								18002,
								18030
							],
							[
								18081,
								18103
							],
							[
								18188,
								18208
							],
							[
								18268,
								18284
							],
							[
								18381,
								18396
							],
							[
								18433,
								18448
							],
							[
								18524,
								18534
							],
							[
								18982,
								18990
							],
							[
								19080,
								19084
							],
							[
								19102,
								19125
							],
							[
								19289,
								19299
							],
							[
								19487,
								19505
							],
							[
								19555,
								19574
							],
							[
								19616,
								19626
							],
							[
								19689,
								19700
							],
							[
								19737,
								19748
							],
							[
								19819,
								19831
							],
							[
								20073,
								20077
							],
							[
								20168,
								20172
							],
							[
								20231,
								20254
							],
							[
								20509,
								20520
							],
							[
								20543,
								20557
							],
							[
								20626,
								20637
							],
							[
								20662,
								20676
							],
							[
								20791,
								20801
							],
							[
								20832,
								20840
							],
							[
								20856,
								20871
							],
							[
								20902,
								20910
							],
							[
								20926,
								20936
							],
							[
								21164,
								21179
							],
							[
								21206,
								21210
							],
							[
								21233,
								21237
							],
							[
								21256,
								21260
							],
							[
								21409,
								21416
							],
							[
								21434,
								21457
							],
							[
								21580,
								21591
							],
							[
								21624,
								21638
							],
							[
								21700,
								21713
							],
							[
								21751,
								21767
							],
							[
								21811,
								21821
							],
							[
								21845,
								21853
							],
							[
								21886,
								21901
							],
							[
								21925,
								21933
							],
							[
								22097,
								22113
							],
							[
								22144,
								22151
							],
							[
								22174,
								22178
							],
							[
								22197,
								22204
							],
							[
								22365,
								22374
							],
							[
								22379,
								22412
							],
							[
								22502,
								22513
							],
							[
								22545,
								22559
							],
							[
								22628,
								22641
							],
							[
								22670,
								22686
							],
							[
								22730,
								22742
							],
							[
								22769,
								22777
							],
							[
								22800,
								22811
							],
							[
								22838,
								22846
							],
							[
								22872,
								22883
							],
							[
								22910,
								22918
							],
							[
								22941,
								22956
							],
							[
								22983,
								22991
							],
							[
								23028,
								23042
							],
							[
								23062,
								23075
							],
							[
								23223,
								23240
							],
							[
								23260,
								23273
							],
							[
								23425,
								23445
							],
							[
								23465,
								23478
							],
							[
								23612,
								23627
							],
							[
								23654,
								23681
							],
							[
								23701,
								23714
							],
							[
								23937,
								23946
							],
							[
								24012,
								24021
							],
							[
								24032,
								24050
							],
							[
								24072,
								24134
							],
							[
								24203,
								24235
							],
							[
								24331,
								24353
							],
							[
								24411,
								24454
							],
							[
								24642,
								24667
							],
							[
								24714,
								24744
							],
							[
								24762,
								24780
							],
							[
								25869,
								25904
							],
							[
								26027,
								26043
							],
							[
								26072,
								26093
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AQAAAAAAAAAAAAAARAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2291,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCiAgKCkgPT4KICB2YWx1ZSA9PgogIGluc2VydEJlZm9yZShub2RlLCByZWZOb2RlKQogIHJlbW92ZUNoaWxkKG5vZGUpCiAgcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkKTm9kZQogIHJhdyhub2RlKQogIGNoaWxkcmVuKG5vZGUpCiAgb3duZXIobm9kZSkKICBwYXJlbnQobm9kZSkKICBoaWVyKG5vZGUsIHByZWQgPSBub2RlID0+IHRydWUpCih7IG5vZGVUeXBlIH0pID0+Ck5vZGUKTWFrZUNhY2hlKGN0b3IsIHN0b3JlID0gCigpKQogIChrLCAuLi5hcmdzKSA9PgpNYWtlQ2FjaGUyKGN0b3IsIHN0b3JlID0gCigpKQogIGtleSA9PgogIChpZCwgb3duZXIpID0+Ck5vZGVMaXN0CiAgY29uc3RydWN0b3Iob2JqLCBvd25lcikKICBpc0VsZW1lbnQgPSBwcm9wID0+CiAgaXNMaXN0ID0gcHJvcCA9PgogIHdyYXBFbGVtZW50ID0gKHZhbHVlLCBwcm9wKSA9PgogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIG93bktleXM6IHRhcmdldCA9PgogIHByb3AgPT4KTm9kZUxpc3QKICBnZXQgcGF0aCgpCk5hbWVkTm9kZU1hcChvYmosIG93bmVyKQogIGlzQXR0ciA9IHByb3AgPT4KICB3cmFwQXR0ciA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIG93bktleXM6IHRhcmdldCA9PgpOYW1lZE5vZGVNYXAKTmFtZWROb2RlTWFwCiAgZ2V0IHBhdGgoKQogIGl0ZW0oa2V5KQogIHNldE5hbWVkSXRlbShhdHRyKQogIHJlbW92ZU5hbWVkSXRlbShuYW1lKQogIGdldE5hbWVkSXRlbShuYW1lKQooYWNjLCBwcm9wKSA9PgpFbGVtZW50CiAgY29uc3RydWN0b3Iob2JqLCBwYXJlbnQpCiAgZ2V0IHBhcmVudEVsZW1lbnQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBzZXQgdGFnTmFtZSh2KQogIGdldCB0YWdOYW1lKCkKICBzZXQgbm9kZU5hbWUodikKICBnZXQgbm9kZU5hbWUoKQogIGdldCBjaGlsZHJlbigpCiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCkKICBnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKQogIG4gPT4KICBnZXQgbGFzdEVsZW1lbnRDaGlsZCgpCiAgZ2V0IGlkKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgZ2V0QXR0cmlidXRlTmFtZXMoKQogIGF0dHJpYnV0ZXMgPT4KICBoYXNBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlcygpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5vZGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgYXR0cmlidXRlcyA9Pgoob2JqLCBvd25lcikgPT4KICBhdHRyaWJ1dGVzKGVsZW0pCkVsZW1lbnQKRG9jdW1lbnQKICBjb25zdHJ1Y3RvcihvYmopCkRvY3VtZW50CiAgY3JlYXRlQXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkKICBjcmVhdGVUZXh0Tm9kZSh0ZXh0KQogIHByZWQgPSAobiwgaykgPT4KICAobiwgaykgPT4KICAobiwgcCkgPT4KICBnZXQgYm9keSgpCkRvY3VtZW50CkF0dHIKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCBwYXRoKCkKICBnZXQgb3duZXJFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IG5hbWUoKQogIHNldCBuYW1lKHYpCiAgZ2V0IHZhbHVlKCkKICBzZXQgdmFsdWUodikKQXR0cgpUZXh0CiAgY29uc3RydWN0b3Ioa2V5LCBvd25lcikKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCBkYXRhKCkKICB2YWx1ZSA9PgogIGdldCBub2RlVmFsdWUoKQogIHZhbHVlID0+CiAgdG9TdHJpbmcoKQooa2V5LCBvd25lcikgPT4KVGV4dApOb2RlClRleHQKQ29tbWVudAogIGNvbnN0cnVjdG9yKHJhdywgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogICgpID0+CiAgdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9Pgoobm9kZSwgb3duZXIpID0+CkNvbW1lbnQKTm9kZQpDb21tZW50ClRva2VuTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCBrZXkgPSAnY2xhc3MnKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGxlbmd0aCgpCiAgdmFsdWUgPT4KICBnZXQgdmFsdWUoKQogIHZhbHVlID0+CiAgaXRlbShpbmRleCkKICB2YWx1ZSA9PgogIGNvbnRhaW5zKHRva2VuKQogIHZhbHVlID0+CiAgYWRkKC4uLnRva2VucykKKGFyciwgc2V0KSA9PgogIHJlbW92ZSguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICB0b2dnbGUodG9rZW4sIGZvcmNlKQooYXJyLCBzZXQpID0+CiAgc3VwcG9ydHModG9rZW4pCiAgcmVwbGFjZShvbGRUb2tlbiwgbmV3VG9rZW4pCihhcnIsIHNldCkgPT4KVG9rZW5MaXN0ClRva2VuTGlzdAogIChjb250YWluZXIsIGkpID0+Ck1lbWJyYW5lKGluc3RhbmNlLCBvYmosIHByb3RvLCB3cmFwUHJvcCwgd3JhcEVsZW1lbnQpCiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBoYXM6ICh0YXJnZXQsIHByb3ApID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldFByb3RvdHlwZU9mOiB0YXJnZXQgPT4KICBzZXRQcm90b3R5cGVPZjogKHRhcmdldCwgcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KRmFjdG9yeShyYXcsIG93bmVyLCBjdG9yKQogIGlzQXJyYXkgPSBhcmcgPT4KICBpc0F0dHJpYnV0ZXMgPSBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2292,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10221,
								10229
							],
							[
								10281,
								10291
							],
							[
								10746,
								10780
							],
							[
								10856,
								10872
							],
							[
								10921,
								10948
							],
							[
								11107,
								11139
							],
							[
								11621,
								11639
							],
							[
								11773,
								11785
							],
							[
								11823,
								11835
							],
							[
								11851,
								11861
							],
							[
								11958,
								11967
							],
							[
								11999,
								12017
							],
							[
								12116,
								12137
							],
							[
								12201,
								12219
							],
							[
								12693,
								12707
							],
							[
								12769,
								12776
							],
							[
								12794,
								12818
							],
							[
								12991,
								13010
							],
							[
								13135,
								13151
							],
							[
								13232,
								13246
							],
							[
								13287,
								13300
							],
							[
								13344,
								13359
							],
							[
								13390,
								13404
							],
							[
								13970,
								13984
							],
							[
								14137,
								14160
							],
							[
								14219,
								14242
							],
							[
								14318,
								14322
							],
							[
								14424,
								14446
							],
							[
								14686,
								14694
							],
							[
								14740,
								14758
							],
							[
								14797,
								14810
							],
							[
								14837,
								14856
							],
							[
								14895,
								14908
							],
							[
								14942,
								14960
							],
							[
								14999,
								15012
							],
							[
								15041,
								15056
							],
							[
								15114,
								15135
							],
							[
								15167,
								15180
							],
							[
								15214,
								15236
							],
							[
								15280,
								15305
							],
							[
								15337,
								15350
							],
							[
								15412,
								15427
							],
							[
								15477,
								15493
							],
							[
								15613,
								15620
							],
							[
								17905,
								17913
							],
							[
								17934,
								17950
							],
							[
								17974,
								17982
							],
							[
								18002,
								18030
							],
							[
								18081,
								18103
							],
							[
								18188,
								18208
							],
							[
								18268,
								18284
							],
							[
								18381,
								18396
							],
							[
								18433,
								18448
							],
							[
								18524,
								18534
							],
							[
								18982,
								18990
							],
							[
								19080,
								19084
							],
							[
								19102,
								19125
							],
							[
								19289,
								19299
							],
							[
								19487,
								19505
							],
							[
								19555,
								19574
							],
							[
								19616,
								19626
							],
							[
								19689,
								19700
							],
							[
								19737,
								19748
							],
							[
								19819,
								19831
							],
							[
								20073,
								20077
							],
							[
								20168,
								20172
							],
							[
								20231,
								20254
							],
							[
								20509,
								20520
							],
							[
								20543,
								20557
							],
							[
								20626,
								20637
							],
							[
								20662,
								20676
							],
							[
								20791,
								20801
							],
							[
								20832,
								20840
							],
							[
								20856,
								20871
							],
							[
								20902,
								20910
							],
							[
								20926,
								20936
							],
							[
								21164,
								21179
							],
							[
								21206,
								21210
							],
							[
								21233,
								21237
							],
							[
								21256,
								21260
							],
							[
								21409,
								21416
							],
							[
								21434,
								21457
							],
							[
								21580,
								21591
							],
							[
								21624,
								21638
							],
							[
								21700,
								21713
							],
							[
								21751,
								21767
							],
							[
								21811,
								21821
							],
							[
								21845,
								21853
							],
							[
								21886,
								21901
							],
							[
								21925,
								21933
							],
							[
								22097,
								22113
							],
							[
								22144,
								22151
							],
							[
								22174,
								22178
							],
							[
								22197,
								22204
							],
							[
								22365,
								22374
							],
							[
								22379,
								22412
							],
							[
								22502,
								22513
							],
							[
								22545,
								22559
							],
							[
								22628,
								22641
							],
							[
								22670,
								22686
							],
							[
								22730,
								22742
							],
							[
								22769,
								22777
							],
							[
								22800,
								22811
							],
							[
								22838,
								22846
							],
							[
								22872,
								22883
							],
							[
								22910,
								22918
							],
							[
								22941,
								22956
							],
							[
								22983,
								22991
							],
							[
								23028,
								23042
							],
							[
								23062,
								23075
							],
							[
								23223,
								23240
							],
							[
								23260,
								23273
							],
							[
								23425,
								23445
							],
							[
								23465,
								23478
							],
							[
								23612,
								23627
							],
							[
								23654,
								23681
							],
							[
								23701,
								23714
							],
							[
								23937,
								23946
							],
							[
								24012,
								24021
							],
							[
								24032,
								24050
							],
							[
								24072,
								24134
							],
							[
								24203,
								24235
							],
							[
								24331,
								24353
							],
							[
								24411,
								24454
							],
							[
								24642,
								24667
							],
							[
								24714,
								24744
							],
							[
								24762,
								24780
							],
							[
								25869,
								25904
							],
							[
								26027,
								26043
							],
							[
								26072,
								26093
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AQAAAAAAAAAAAAAARAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2293,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								708,
								730
							],
							[
								2540,
								2552
							],
							[
								2659,
								2676
							],
							[
								3429,
								3469
							]
						],
						"symlist":
						[
							"function main(...args)",
							"(...args) =>",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCiAgKCkgPT4KICB2YWx1ZSA9PgogIGluc2VydEJlZm9yZShub2RlLCByZWZOb2RlKQogIHJlbW92ZUNoaWxkKG5vZGUpCiAgcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkKTm9kZQogIHJhdyhub2RlKQogIGNoaWxkcmVuKG5vZGUpCiAgb3duZXIobm9kZSkKICBwYXJlbnQobm9kZSkKICBoaWVyKG5vZGUsIHByZWQgPSBub2RlID0+IHRydWUpCih7IG5vZGVUeXBlIH0pID0+Ck5vZGUKTWFrZUNhY2hlKGN0b3IsIHN0b3JlID0gCigpKQogIChrLCAuLi5hcmdzKSA9PgpNYWtlQ2FjaGUyKGN0b3IsIHN0b3JlID0gCigpKQogIGtleSA9PgogIChpZCwgb3duZXIpID0+Ck5vZGVMaXN0CiAgY29uc3RydWN0b3Iob2JqLCBvd25lcikKICBpc0VsZW1lbnQgPSBwcm9wID0+CiAgaXNMaXN0ID0gcHJvcCA9PgogIHdyYXBFbGVtZW50ID0gKHZhbHVlLCBwcm9wKSA9PgogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIG93bktleXM6IHRhcmdldCA9PgogIHByb3AgPT4KTm9kZUxpc3QKICBnZXQgcGF0aCgpCk5hbWVkTm9kZU1hcChvYmosIG93bmVyKQogIGlzQXR0ciA9IHByb3AgPT4KICB3cmFwQXR0ciA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIG93bktleXM6IHRhcmdldCA9PgpOYW1lZE5vZGVNYXAKTmFtZWROb2RlTWFwCiAgZ2V0IHBhdGgoKQogIGl0ZW0oa2V5KQogIHNldE5hbWVkSXRlbShhdHRyKQogIHJlbW92ZU5hbWVkSXRlbShuYW1lKQogIGdldE5hbWVkSXRlbShuYW1lKQooYWNjLCBwcm9wKSA9PgpFbGVtZW50CiAgY29uc3RydWN0b3Iob2JqLCBwYXJlbnQpCiAgZ2V0IHBhcmVudEVsZW1lbnQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBzZXQgdGFnTmFtZSh2KQogIGdldCB0YWdOYW1lKCkKICBzZXQgbm9kZU5hbWUodikKICBnZXQgbm9kZU5hbWUoKQogIGdldCBjaGlsZHJlbigpCiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCkKICBnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKQogIG4gPT4KICBnZXQgbGFzdEVsZW1lbnRDaGlsZCgpCiAgZ2V0IGlkKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgZ2V0QXR0cmlidXRlTmFtZXMoKQogIGF0dHJpYnV0ZXMgPT4KICBoYXNBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlcygpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5vZGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgYXR0cmlidXRlcyA9Pgoob2JqLCBvd25lcikgPT4KICBhdHRyaWJ1dGVzKGVsZW0pCkVsZW1lbnQKRG9jdW1lbnQKICBjb25zdHJ1Y3RvcihvYmopCkRvY3VtZW50CiAgY3JlYXRlQXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkKICBjcmVhdGVUZXh0Tm9kZSh0ZXh0KQogIHByZWQgPSAobiwgaykgPT4KICAobiwgaykgPT4KICAobiwgcCkgPT4KICBnZXQgYm9keSgpCkRvY3VtZW50CkF0dHIKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCBwYXRoKCkKICBnZXQgb3duZXJFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IG5hbWUoKQogIHNldCBuYW1lKHYpCiAgZ2V0IHZhbHVlKCkKICBzZXQgdmFsdWUodikKQXR0cgpUZXh0CiAgY29uc3RydWN0b3Ioa2V5LCBvd25lcikKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCBkYXRhKCkKICB2YWx1ZSA9PgogIGdldCBub2RlVmFsdWUoKQogIHZhbHVlID0+CiAgdG9TdHJpbmcoKQooa2V5LCBvd25lcikgPT4KVGV4dApOb2RlClRleHQKQ29tbWVudAogIGNvbnN0cnVjdG9yKHJhdywgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogICgpID0+CiAgdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9Pgoobm9kZSwgb3duZXIpID0+CkNvbW1lbnQKTm9kZQpDb21tZW50ClRva2VuTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCBrZXkgPSAnY2xhc3MnKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGxlbmd0aCgpCiAgdmFsdWUgPT4KICBnZXQgdmFsdWUoKQogIHZhbHVlID0+CiAgaXRlbShpbmRleCkKICB2YWx1ZSA9PgogIGNvbnRhaW5zKHRva2VuKQogIHZhbHVlID0+CiAgYWRkKC4uLnRva2VucykKKGFyciwgc2V0KSA9PgogIHJlbW92ZSguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICB0b2dnbGUodG9rZW4sIGZvcmNlKQooYXJyLCBzZXQpID0+CiAgc3VwcG9ydHModG9rZW4pCiAgcmVwbGFjZShvbGRUb2tlbiwgbmV3VG9rZW4pCihhcnIsIHNldCkgPT4KVG9rZW5MaXN0ClRva2VuTGlzdAogIChjb250YWluZXIsIGkpID0+Ck1lbWJyYW5lKGluc3RhbmNlLCBvYmosIHByb3RvLCB3cmFwUHJvcCwgd3JhcEVsZW1lbnQpCiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBoYXM6ICh0YXJnZXQsIHByb3ApID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldFByb3RvdHlwZU9mOiB0YXJnZXQgPT4KICBzZXRQcm90b3R5cGVPZjogKHRhcmdldCwgcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KRmFjdG9yeShyYXcsIG93bmVyLCBjdG9yKQogIGlzQXJyYXkgPSBhcmcgPT4KICBpc0F0dHJpYnV0ZXMgPSBhcmcgPT4AAAAAAAAAAE0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2294,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABNAAAAICBtYWluKC4uLmFyZ3MpCiguLi5hcmdzKSA9PgogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2295,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2296,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								708,
								730
							],
							[
								2540,
								2552
							],
							[
								2659,
								2676
							],
							[
								3429,
								3469
							]
						],
						"symlist":
						[
							"function main(...args)",
							"(...args) =>",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AQAAAAAAAAAAAAAATQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2297,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
						"symkeys":
						[
							[
								708,
								730
							],
							[
								2544,
								2556
							],
							[
								2663,
								2680
							],
							[
								3433,
								3473
							]
						],
						"symlist":
						[
							"function main(...args)",
							"(...args) =>",
							" (node, stack) =>",
							" function Recurse(node, fn, stack = [])"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABNAAAAICBtYWluKC4uLmFyZ3MpCiguLi5hcmdzKSA9PgogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAE0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2298,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABNAAAAICBtYWluKC4uLmFyZ3MpCiguLi5hcmdzKSA9PgogIChub2RlLCBzdGFjaykgPT4KUmVjdXJzZShub2RlLCBmbiwgc3RhY2sgPSBbXSkAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2299,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10221,
								10229
							],
							[
								10281,
								10291
							],
							[
								10746,
								10780
							],
							[
								10856,
								10872
							],
							[
								10921,
								10948
							],
							[
								11107,
								11139
							],
							[
								11621,
								11639
							],
							[
								11773,
								11785
							],
							[
								11823,
								11835
							],
							[
								11851,
								11861
							],
							[
								11958,
								11967
							],
							[
								11999,
								12017
							],
							[
								12116,
								12137
							],
							[
								12201,
								12219
							],
							[
								12693,
								12707
							],
							[
								12769,
								12776
							],
							[
								12794,
								12818
							],
							[
								12991,
								13010
							],
							[
								13135,
								13151
							],
							[
								13232,
								13246
							],
							[
								13287,
								13300
							],
							[
								13344,
								13359
							],
							[
								13390,
								13404
							],
							[
								13970,
								13984
							],
							[
								14137,
								14160
							],
							[
								14219,
								14242
							],
							[
								14318,
								14322
							],
							[
								14424,
								14446
							],
							[
								14686,
								14694
							],
							[
								14740,
								14758
							],
							[
								14797,
								14810
							],
							[
								14837,
								14856
							],
							[
								14895,
								14908
							],
							[
								14942,
								14960
							],
							[
								14999,
								15012
							],
							[
								15041,
								15056
							],
							[
								15114,
								15135
							],
							[
								15167,
								15180
							],
							[
								15214,
								15236
							],
							[
								15280,
								15305
							],
							[
								15337,
								15350
							],
							[
								15412,
								15427
							],
							[
								15477,
								15493
							],
							[
								15613,
								15620
							],
							[
								17905,
								17913
							],
							[
								17934,
								17950
							],
							[
								17974,
								17982
							],
							[
								18002,
								18030
							],
							[
								18081,
								18103
							],
							[
								18188,
								18208
							],
							[
								18268,
								18284
							],
							[
								18381,
								18396
							],
							[
								18433,
								18448
							],
							[
								18524,
								18534
							],
							[
								18982,
								18990
							],
							[
								19080,
								19084
							],
							[
								19102,
								19125
							],
							[
								19289,
								19299
							],
							[
								19487,
								19505
							],
							[
								19555,
								19574
							],
							[
								19616,
								19626
							],
							[
								19689,
								19700
							],
							[
								19737,
								19748
							],
							[
								19819,
								19831
							],
							[
								20073,
								20077
							],
							[
								20168,
								20172
							],
							[
								20231,
								20254
							],
							[
								20509,
								20520
							],
							[
								20543,
								20557
							],
							[
								20626,
								20637
							],
							[
								20662,
								20676
							],
							[
								20791,
								20801
							],
							[
								20832,
								20840
							],
							[
								20856,
								20871
							],
							[
								20902,
								20910
							],
							[
								20926,
								20936
							],
							[
								21164,
								21179
							],
							[
								21206,
								21210
							],
							[
								21233,
								21237
							],
							[
								21256,
								21260
							],
							[
								21409,
								21416
							],
							[
								21434,
								21457
							],
							[
								21580,
								21591
							],
							[
								21624,
								21638
							],
							[
								21700,
								21713
							],
							[
								21751,
								21767
							],
							[
								21811,
								21821
							],
							[
								21845,
								21853
							],
							[
								21886,
								21901
							],
							[
								21925,
								21933
							],
							[
								22097,
								22113
							],
							[
								22144,
								22151
							],
							[
								22174,
								22178
							],
							[
								22197,
								22204
							],
							[
								22365,
								22374
							],
							[
								22379,
								22412
							],
							[
								22502,
								22513
							],
							[
								22545,
								22559
							],
							[
								22628,
								22641
							],
							[
								22670,
								22686
							],
							[
								22730,
								22742
							],
							[
								22769,
								22777
							],
							[
								22800,
								22811
							],
							[
								22838,
								22846
							],
							[
								22872,
								22883
							],
							[
								22910,
								22918
							],
							[
								22941,
								22956
							],
							[
								22983,
								22991
							],
							[
								23028,
								23042
							],
							[
								23062,
								23075
							],
							[
								23223,
								23240
							],
							[
								23260,
								23273
							],
							[
								23425,
								23445
							],
							[
								23465,
								23478
							],
							[
								23612,
								23627
							],
							[
								23654,
								23681
							],
							[
								23701,
								23714
							],
							[
								23937,
								23946
							],
							[
								24012,
								24021
							],
							[
								24032,
								24050
							],
							[
								24072,
								24134
							],
							[
								24203,
								24235
							],
							[
								24331,
								24353
							],
							[
								24411,
								24454
							],
							[
								24642,
								24667
							],
							[
								24714,
								24744
							],
							[
								24762,
								24780
							],
							[
								25869,
								25904
							],
							[
								26027,
								26043
							],
							[
								26072,
								26093
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AQAAAAAAAAAAAAAARAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2300,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABEDAAAICBrZXlPZiA9IChvYmosIHZhbHVlKSA9PgogIGNoZWNrTm9kZShub2RlKQpQYXJzZXIKICBwYXJzZUZyb21TdHJpbmcoc3RyLCBmaWxlLCAuLi5yZXN0KQpHZXROb2RlKG9iaiwgb3duZXIpCk5vZGUKICBjb25zdHJ1Y3RvcihvYmosIHBhcmVudCwgcHJvdG8gPSBOb2RlLnByb3RvdHlwZSkKICBnZXQgcGF0aCgpCiAgZ2V0IHBhcmVudE5vZGUoKQogIGdldCBwYXJlbnRFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IGNoaWxkTm9kZXMoKQogIGdldCBmaXJzdENoaWxkKCkKICBnZXQgbGFzdENoaWxkKCkKICBnZXQgbmV4dFNpYmxpbmcoKQogIGdldCBwcmV2aW91c1NpYmxpbmcoKQogIGFwcGVuZENoaWxkKG5vZGUpCiAgKCkgPT4KICB2YWx1ZSA9PgogIGluc2VydEJlZm9yZShub2RlLCByZWZOb2RlKQogIHJlbW92ZUNoaWxkKG5vZGUpCiAgcmVwbGFjZUNoaWxkKG5ld0NoaWxkLCBvbGRDaGlsZCkKTm9kZQogIHJhdyhub2RlKQogIGNoaWxkcmVuKG5vZGUpCiAgb3duZXIobm9kZSkKICBwYXJlbnQobm9kZSkKICBoaWVyKG5vZGUsIHByZWQgPSBub2RlID0+IHRydWUpCih7IG5vZGVUeXBlIH0pID0+Ck5vZGUKTWFrZUNhY2hlKGN0b3IsIHN0b3JlID0gCigpKQogIChrLCAuLi5hcmdzKSA9PgpNYWtlQ2FjaGUyKGN0b3IsIHN0b3JlID0gCigpKQogIGtleSA9PgogIChpZCwgb3duZXIpID0+Ck5vZGVMaXN0CiAgY29uc3RydWN0b3Iob2JqLCBvd25lcikKICBpc0VsZW1lbnQgPSBwcm9wID0+CiAgaXNMaXN0ID0gcHJvcCA9PgogIHdyYXBFbGVtZW50ID0gKHZhbHVlLCBwcm9wKSA9PgogIGdldDogKHRhcmdldCwgcHJvcCwgcmVjZWl2ZXIpID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIG93bktleXM6IHRhcmdldCA9PgogIHByb3AgPT4KTm9kZUxpc3QKICBnZXQgcGF0aCgpCk5hbWVkTm9kZU1hcChvYmosIG93bmVyKQogIGlzQXR0ciA9IHByb3AgPT4KICB3cmFwQXR0ciA9ICh2YWx1ZSwgcHJvcCkgPT4KICBnZXQ6ICh0YXJnZXQsIHByb3AsIHJlY2VpdmVyKSA9PgogIG93bktleXM6IHRhcmdldCA9PgpOYW1lZE5vZGVNYXAKTmFtZWROb2RlTWFwCiAgZ2V0IHBhdGgoKQogIGl0ZW0oa2V5KQogIHNldE5hbWVkSXRlbShhdHRyKQogIHJlbW92ZU5hbWVkSXRlbShuYW1lKQogIGdldE5hbWVkSXRlbShuYW1lKQooYWNjLCBwcm9wKSA9PgpFbGVtZW50CiAgY29uc3RydWN0b3Iob2JqLCBwYXJlbnQpCiAgZ2V0IHBhcmVudEVsZW1lbnQoKQogIGdldCBhdHRyaWJ1dGVzKCkKICBzZXQgdGFnTmFtZSh2KQogIGdldCB0YWdOYW1lKCkKICBzZXQgbm9kZU5hbWUodikKICBnZXQgbm9kZU5hbWUoKQogIGdldCBjaGlsZHJlbigpCiAgZ2V0IGNoaWxkRWxlbWVudENvdW50KCkKICBnZXQgZmlyc3RFbGVtZW50Q2hpbGQoKQogIG4gPT4KICBnZXQgbGFzdEVsZW1lbnRDaGlsZCgpCiAgZ2V0IGlkKCkKICBnZXRBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgZ2V0QXR0cmlidXRlTmFtZXMoKQogIGF0dHJpYnV0ZXMgPT4KICBoYXNBdHRyaWJ1dGUobmFtZSkKICBhdHRyaWJ1dGVzID0+CiAgaGFzQXR0cmlidXRlcygpCiAgcmVtb3ZlQXR0cmlidXRlKG5hbWUpCiAgYXR0cmlidXRlcyA9PgogIGdldEF0dHJpYnV0ZU5vZGUobmFtZSkKICBzZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpCiAgYXR0cmlidXRlcyA9Pgoob2JqLCBvd25lcikgPT4KICBhdHRyaWJ1dGVzKGVsZW0pCkVsZW1lbnQKRG9jdW1lbnQKICBjb25zdHJ1Y3RvcihvYmopCkRvY3VtZW50CiAgY3JlYXRlQXR0cmlidXRlKG5hbWUsIHZhbHVlKQogIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkKICBjcmVhdGVUZXh0Tm9kZSh0ZXh0KQogIHByZWQgPSAobiwgaykgPT4KICAobiwgaykgPT4KICAobiwgcCkgPT4KICBnZXQgYm9keSgpCkRvY3VtZW50CkF0dHIKICBjb25zdHJ1Y3RvcihyYXcsIG93bmVyKQogIGdldCBwYXRoKCkKICBnZXQgb3duZXJFbGVtZW50KCkKICBnZXQgb3duZXJEb2N1bWVudCgpCiAgZ2V0IG5hbWUoKQogIHNldCBuYW1lKHYpCiAgZ2V0IHZhbHVlKCkKICBzZXQgdmFsdWUodikKQXR0cgpUZXh0CiAgY29uc3RydWN0b3Ioa2V5LCBvd25lcikKICBnZXQgPSAoKSA9PgogIHNldCA9IHZhbHVlID0+CiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogIGdldCBkYXRhKCkKICB2YWx1ZSA9PgogIGdldCBub2RlVmFsdWUoKQogIHZhbHVlID0+CiAgdG9TdHJpbmcoKQooa2V5LCBvd25lcikgPT4KVGV4dApOb2RlClRleHQKQ29tbWVudAogIGNvbnN0cnVjdG9yKHJhdywgb3duZXIpCiAgZ2V0ID0gKCkgPT4KICBzZXQgPSB2YWx1ZSA9PgogICgpID0+CiAgdmFsdWUgPT4KICBnZXQgZGF0YSgpCiAgdmFsdWUgPT4KICBnZXQgbm9kZVZhbHVlKCkKICB2YWx1ZSA9Pgoobm9kZSwgb3duZXIpID0+CkNvbW1lbnQKTm9kZQpDb21tZW50ClRva2VuTGlzdAogIGNvbnN0cnVjdG9yKG93bmVyLCBrZXkgPSAnY2xhc3MnKQogIGdldCA9ICgpID0+CiAgc2V0ID0gdmFsdWUgPT4KICAoKSA9PgogIHZhbHVlID0+CiAgZ2V0IGxlbmd0aCgpCiAgdmFsdWUgPT4KICBnZXQgdmFsdWUoKQogIHZhbHVlID0+CiAgaXRlbShpbmRleCkKICB2YWx1ZSA9PgogIGNvbnRhaW5zKHRva2VuKQogIHZhbHVlID0+CiAgYWRkKC4uLnRva2VucykKKGFyciwgc2V0KSA9PgogIHJlbW92ZSguLi50b2tlbnMpCihhcnIsIHNldCkgPT4KICB0b2dnbGUodG9rZW4sIGZvcmNlKQooYXJyLCBzZXQpID0+CiAgc3VwcG9ydHModG9rZW4pCiAgcmVwbGFjZShvbGRUb2tlbiwgbmV3VG9rZW4pCihhcnIsIHNldCkgPT4KVG9rZW5MaXN0ClRva2VuTGlzdAogIChjb250YWluZXIsIGkpID0+Ck1lbWJyYW5lKGluc3RhbmNlLCBvYmosIHByb3RvLCB3cmFwUHJvcCwgd3JhcEVsZW1lbnQpCiAgZ2V0OiAodGFyZ2V0LCBwcm9wLCByZWNlaXZlcikgPT4KICBoYXM6ICh0YXJnZXQsIHByb3ApID0+CiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAodGFyZ2V0LCBwcm9wKSA9PgogIGdldFByb3RvdHlwZU9mOiB0YXJnZXQgPT4KICBzZXRQcm90b3R5cGVPZjogKHRhcmdldCwgcCkgPT4KICBvd25LZXlzOiB0YXJnZXQgPT4KRmFjdG9yeShyYXcsIG93bmVyLCBjdG9yKQogIGlzQXJyYXkgPSBhcmcgPT4KICBpc0F0dHJpYnV0ZXMgPSBhcmcgPT4AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2301,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10221,
								10229
							],
							[
								10281,
								10291
							],
							[
								10746,
								10780
							],
							[
								10856,
								10872
							],
							[
								10921,
								10948
							],
							[
								11107,
								11139
							],
							[
								11621,
								11639
							],
							[
								11773,
								11785
							],
							[
								11823,
								11835
							],
							[
								11851,
								11861
							],
							[
								11958,
								11967
							],
							[
								11999,
								12017
							],
							[
								12116,
								12137
							],
							[
								12201,
								12219
							],
							[
								12693,
								12707
							],
							[
								12769,
								12776
							],
							[
								12794,
								12818
							],
							[
								12991,
								13010
							],
							[
								13135,
								13151
							],
							[
								13232,
								13246
							],
							[
								13287,
								13300
							],
							[
								13344,
								13359
							],
							[
								13390,
								13404
							],
							[
								13970,
								13984
							],
							[
								14137,
								14160
							],
							[
								14219,
								14242
							],
							[
								14318,
								14322
							],
							[
								14424,
								14446
							],
							[
								14686,
								14694
							],
							[
								14740,
								14758
							],
							[
								14797,
								14810
							],
							[
								14837,
								14856
							],
							[
								14895,
								14908
							],
							[
								14942,
								14960
							],
							[
								14999,
								15012
							],
							[
								15041,
								15056
							],
							[
								15114,
								15135
							],
							[
								15167,
								15180
							],
							[
								15214,
								15236
							],
							[
								15280,
								15305
							],
							[
								15337,
								15350
							],
							[
								15412,
								15427
							],
							[
								15477,
								15493
							],
							[
								15613,
								15620
							],
							[
								17905,
								17913
							],
							[
								17934,
								17950
							],
							[
								17974,
								17982
							],
							[
								18002,
								18030
							],
							[
								18081,
								18103
							],
							[
								18188,
								18208
							],
							[
								18268,
								18284
							],
							[
								18381,
								18396
							],
							[
								18433,
								18448
							],
							[
								18524,
								18534
							],
							[
								18982,
								18990
							],
							[
								19080,
								19084
							],
							[
								19102,
								19125
							],
							[
								19289,
								19299
							],
							[
								19487,
								19505
							],
							[
								19555,
								19574
							],
							[
								19616,
								19626
							],
							[
								19689,
								19700
							],
							[
								19737,
								19748
							],
							[
								19819,
								19831
							],
							[
								20073,
								20077
							],
							[
								20168,
								20172
							],
							[
								20231,
								20254
							],
							[
								20509,
								20520
							],
							[
								20543,
								20557
							],
							[
								20626,
								20637
							],
							[
								20662,
								20676
							],
							[
								20791,
								20801
							],
							[
								20832,
								20840
							],
							[
								20856,
								20871
							],
							[
								20902,
								20910
							],
							[
								20926,
								20936
							],
							[
								21164,
								21179
							],
							[
								21206,
								21210
							],
							[
								21233,
								21237
							],
							[
								21256,
								21260
							],
							[
								21409,
								21416
							],
							[
								21434,
								21457
							],
							[
								21580,
								21591
							],
							[
								21624,
								21638
							],
							[
								21700,
								21713
							],
							[
								21751,
								21767
							],
							[
								21811,
								21821
							],
							[
								21845,
								21853
							],
							[
								21886,
								21901
							],
							[
								21925,
								21933
							],
							[
								22097,
								22113
							],
							[
								22144,
								22151
							],
							[
								22174,
								22178
							],
							[
								22197,
								22204
							],
							[
								22365,
								22374
							],
							[
								22379,
								22412
							],
							[
								22502,
								22513
							],
							[
								22545,
								22559
							],
							[
								22628,
								22641
							],
							[
								22670,
								22686
							],
							[
								22730,
								22742
							],
							[
								22769,
								22777
							],
							[
								22800,
								22811
							],
							[
								22838,
								22846
							],
							[
								22872,
								22883
							],
							[
								22910,
								22918
							],
							[
								22941,
								22956
							],
							[
								22983,
								22991
							],
							[
								23028,
								23042
							],
							[
								23062,
								23075
							],
							[
								23223,
								23240
							],
							[
								23260,
								23273
							],
							[
								23425,
								23445
							],
							[
								23465,
								23478
							],
							[
								23612,
								23627
							],
							[
								23654,
								23681
							],
							[
								23701,
								23714
							],
							[
								23937,
								23946
							],
							[
								24012,
								24021
							],
							[
								24032,
								24050
							],
							[
								24072,
								24134
							],
							[
								24203,
								24235
							],
							[
								24331,
								24353
							],
							[
								24411,
								24454
							],
							[
								24642,
								24667
							],
							[
								24714,
								24744
							],
							[
								24762,
								24780
							],
							[
								25869,
								25904
							],
							[
								26027,
								26043
							],
							[
								26072,
								26093
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"AQAAAAAAAAAAAAAARAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2302,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10228,
								10236
							],
							[
								10288,
								10298
							],
							[
								10753,
								10787
							],
							[
								10863,
								10879
							],
							[
								10928,
								10955
							],
							[
								11114,
								11146
							],
							[
								11628,
								11646
							],
							[
								11780,
								11792
							],
							[
								11830,
								11842
							],
							[
								11858,
								11868
							],
							[
								11965,
								11974
							],
							[
								12006,
								12024
							],
							[
								12123,
								12144
							],
							[
								12208,
								12226
							],
							[
								12700,
								12714
							],
							[
								12776,
								12783
							],
							[
								12801,
								12825
							],
							[
								12998,
								13017
							],
							[
								13142,
								13158
							],
							[
								13239,
								13253
							],
							[
								13294,
								13307
							],
							[
								13351,
								13366
							],
							[
								13397,
								13411
							],
							[
								13977,
								13991
							],
							[
								14144,
								14167
							],
							[
								14226,
								14249
							],
							[
								14325,
								14329
							],
							[
								14431,
								14453
							],
							[
								14693,
								14701
							],
							[
								14747,
								14765
							],
							[
								14804,
								14817
							],
							[
								14844,
								14863
							],
							[
								14902,
								14915
							],
							[
								14949,
								14967
							],
							[
								15006,
								15019
							],
							[
								15048,
								15063
							],
							[
								15121,
								15142
							],
							[
								15174,
								15187
							],
							[
								15221,
								15243
							],
							[
								15287,
								15312
							],
							[
								15344,
								15357
							],
							[
								15419,
								15434
							],
							[
								15484,
								15500
							],
							[
								15620,
								15627
							],
							[
								17912,
								17920
							],
							[
								17941,
								17957
							],
							[
								17981,
								17989
							],
							[
								18009,
								18037
							],
							[
								18088,
								18110
							],
							[
								18195,
								18215
							],
							[
								18275,
								18291
							],
							[
								18388,
								18403
							],
							[
								18440,
								18455
							],
							[
								18531,
								18541
							],
							[
								18989,
								18997
							],
							[
								19087,
								19091
							],
							[
								19109,
								19132
							],
							[
								19296,
								19306
							],
							[
								19494,
								19512
							],
							[
								19562,
								19581
							],
							[
								19623,
								19633
							],
							[
								19696,
								19707
							],
							[
								19744,
								19755
							],
							[
								19826,
								19838
							],
							[
								20080,
								20084
							],
							[
								20175,
								20179
							],
							[
								20238,
								20261
							],
							[
								20516,
								20527
							],
							[
								20550,
								20564
							],
							[
								20633,
								20644
							],
							[
								20669,
								20683
							],
							[
								20798,
								20808
							],
							[
								20839,
								20847
							],
							[
								20863,
								20878
							],
							[
								20909,
								20917
							],
							[
								20933,
								20943
							],
							[
								21171,
								21186
							],
							[
								21213,
								21217
							],
							[
								21240,
								21244
							],
							[
								21263,
								21267
							],
							[
								21416,
								21423
							],
							[
								21441,
								21464
							],
							[
								21587,
								21598
							],
							[
								21631,
								21645
							],
							[
								21707,
								21720
							],
							[
								21758,
								21774
							],
							[
								21818,
								21828
							],
							[
								21852,
								21860
							],
							[
								21893,
								21908
							],
							[
								21932,
								21940
							],
							[
								22104,
								22120
							],
							[
								22151,
								22158
							],
							[
								22181,
								22185
							],
							[
								22204,
								22211
							],
							[
								22372,
								22381
							],
							[
								22386,
								22419
							],
							[
								22509,
								22520
							],
							[
								22552,
								22566
							],
							[
								22635,
								22648
							],
							[
								22677,
								22693
							],
							[
								22737,
								22749
							],
							[
								22776,
								22784
							],
							[
								22807,
								22818
							],
							[
								22845,
								22853
							],
							[
								22879,
								22890
							],
							[
								22917,
								22925
							],
							[
								22948,
								22963
							],
							[
								22990,
								22998
							],
							[
								23035,
								23049
							],
							[
								23069,
								23082
							],
							[
								23230,
								23247
							],
							[
								23267,
								23280
							],
							[
								23432,
								23452
							],
							[
								23472,
								23485
							],
							[
								23619,
								23634
							],
							[
								23661,
								23688
							],
							[
								23708,
								23721
							],
							[
								23944,
								23953
							],
							[
								24019,
								24028
							],
							[
								24039,
								24057
							],
							[
								24079,
								24141
							],
							[
								24210,
								24242
							],
							[
								24338,
								24360
							],
							[
								24418,
								24461
							],
							[
								24649,
								24674
							],
							[
								24721,
								24751
							],
							[
								24769,
								24787
							],
							[
								25876,
								25911
							],
							[
								26034,
								26050
							],
							[
								26079,
								26100
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					2303,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
						"symkeys":
						[
							[
								1017,
								1040
							],
							[
								1413,
								1437
							],
							[
								1713,
								1719
							],
							[
								1724,
								1759
							],
							[
								2038,
								2066
							],
							[
								2499,
								2503
							],
							[
								2508,
								2556
							],
							[
								2916,
								2926
							],
							[
								2968,
								2984
							],
							[
								3102,
								3121
							],
							[
								3216,
								3235
							],
							[
								3357,
								3373
							],
							[
								3474,
								3490
							],
							[
								3639,
								3654
							],
							[
								3820,
								3837
							],
							[
								4116,
								4137
							],
							[
								4313,
								4330
							],
							[
								4518,
								4533
							],
							[
								4555,
								4573
							],
							[
								4749,
								4776
							],
							[
								5130,
								5147
							],
							[
								5435,
								5467
							],
							[
								6248,
								6252
							],
							[
								6320,
								6329
							],
							[
								6391,
								6405
							],
							[
								6453,
								6464
							],
							[
								6835,
								6847
							],
							[
								6931,
								6962
							],
							[
								7392,
								7409
							],
							[
								7971,
								7975
							],
							[
								8017,
								8050
							],
							[
								8061,
								8064
							],
							[
								8109,
								8125
							],
							[
								8269,
								8303
							],
							[
								8314,
								8317
							],
							[
								8341,
								8347
							],
							[
								8369,
								8384
							],
							[
								8618,
								8626
							],
							[
								8631,
								8654
							],
							[
								8685,
								8704
							],
							[
								8757,
								8773
							],
							[
								8821,
								8851
							],
							[
								9084,
								9116
							],
							[
								9355,
								9398
							],
							[
								9662,
								9680
							],
							[
								9729,
								9736
							],
							[
								10241,
								10249
							],
							[
								10301,
								10311
							],
							[
								10766,
								10800
							],
							[
								10876,
								10892
							],
							[
								10941,
								10968
							],
							[
								11127,
								11159
							],
							[
								11641,
								11659
							],
							[
								11793,
								11805
							],
							[
								11843,
								11855
							],
							[
								11871,
								11881
							],
							[
								11978,
								11987
							],
							[
								12019,
								12037
							],
							[
								12136,
								12157
							],
							[
								12221,
								12239
							],
							[
								12713,
								12727
							],
							[
								12789,
								12796
							],
							[
								12814,
								12838
							],
							[
								13011,
								13030
							],
							[
								13155,
								13171
							],
							[
								13252,
								13266
							],
							[
								13307,
								13320
							],
							[
								13364,
								13379
							],
							[
								13410,
								13424
							],
							[
								13990,
								14004
							],
							[
								14157,
								14180
							],
							[
								14239,
								14262
							],
							[
								14338,
								14342
							],
							[
								14444,
								14466
							],
							[
								14706,
								14714
							],
							[
								14760,
								14778
							],
							[
								14817,
								14830
							],
							[
								14857,
								14876
							],
							[
								14915,
								14928
							],
							[
								14962,
								14980
							],
							[
								15019,
								15032
							],
							[
								15061,
								15076
							],
							[
								15134,
								15155
							],
							[
								15187,
								15200
							],
							[
								15234,
								15256
							],
							[
								15300,
								15325
							],
							[
								15357,
								15370
							],
							[
								15432,
								15447
							],
							[
								15497,
								15513
							],
							[
								15633,
								15640
							],
							[
								17925,
								17933
							],
							[
								17954,
								17970
							],
							[
								17994,
								18002
							],
							[
								18022,
								18050
							],
							[
								18101,
								18123
							],
							[
								18208,
								18228
							],
							[
								18288,
								18304
							],
							[
								18401,
								18416
							],
							[
								18453,
								18468
							],
							[
								18544,
								18554
							],
							[
								19002,
								19010
							],
							[
								19100,
								19104
							],
							[
								19122,
								19145
							],
							[
								19309,
								19319
							],
							[
								19507,
								19525
							],
							[
								19575,
								19594
							],
							[
								19636,
								19646
							],
							[
								19709,
								19720
							],
							[
								19757,
								19768
							],
							[
								19839,
								19851
							],
							[
								20093,
								20097
							],
							[
								20188,
								20192
							],
							[
								20251,
								20274
							],
							[
								20529,
								20540
							],
							[
								20563,
								20577
							],
							[
								20646,
								20657
							],
							[
								20682,
								20696
							],
							[
								20811,
								20821
							],
							[
								20852,
								20860
							],
							[
								20876,
								20891
							],
							[
								20922,
								20930
							],
							[
								20946,
								20956
							],
							[
								21184,
								21199
							],
							[
								21226,
								21230
							],
							[
								21253,
								21257
							],
							[
								21276,
								21280
							],
							[
								21429,
								21436
							],
							[
								21454,
								21477
							],
							[
								21600,
								21611
							],
							[
								21644,
								21658
							],
							[
								21720,
								21733
							],
							[
								21771,
								21787
							],
							[
								21831,
								21841
							],
							[
								21865,
								21873
							],
							[
								21906,
								21921
							],
							[
								21945,
								21953
							],
							[
								22117,
								22133
							],
							[
								22164,
								22171
							],
							[
								22194,
								22198
							],
							[
								22217,
								22224
							],
							[
								22385,
								22394
							],
							[
								22399,
								22432
							],
							[
								22522,
								22533
							],
							[
								22565,
								22579
							],
							[
								22648,
								22661
							],
							[
								22690,
								22706
							],
							[
								22750,
								22762
							],
							[
								22789,
								22797
							],
							[
								22820,
								22831
							],
							[
								22858,
								22866
							],
							[
								22892,
								22903
							],
							[
								22930,
								22938
							],
							[
								22961,
								22976
							],
							[
								23003,
								23011
							],
							[
								23048,
								23062
							],
							[
								23082,
								23095
							],
							[
								23243,
								23260
							],
							[
								23280,
								23293
							],
							[
								23445,
								23465
							],
							[
								23485,
								23498
							],
							[
								23632,
								23647
							],
							[
								23674,
								23701
							],
							[
								23721,
								23734
							],
							[
								23957,
								23966
							],
							[
								24032,
								24041
							],
							[
								24052,
								24070
							],
							[
								24092,
								24154
							],
							[
								24223,
								24255
							],
							[
								24351,
								24373
							],
							[
								24431,
								24474
							],
							[
								24662,
								24687
							],
							[
								24734,
								24764
							],
							[
								24782,
								24800
							],
							[
								25889,
								25924
							],
							[
								26047,
								26063
							],
							[
								26092,
								26113
							]
						],
						"symlist":
						[
							"keyOf = (obj, value) =>",
							"function checkNode(node)",
							"Parser",
							"parseFromString(str, file, ...rest)",
							"function GetNode(obj, owner)",
							"Node",
							"constructor(obj, parent, proto = Node.prototype)",
							"get path()",
							"get parentNode()",
							"get parentElement()",
							"get ownerDocument()",
							"get childNodes()",
							"get firstChild()",
							"get lastChild()",
							"get nextSibling()",
							"get previousSibling()",
							"appendChild(node)",
							" () =>",
							" value =>",
							"insertBefore(node, refNode)",
							"removeChild(node)",
							"replaceChild(newChild, oldChild)",
							"Node",
							"raw(node)",
							"children(node)",
							"owner(node)",
							"parent(node)",
							"hier(node, pred = node => true)",
							"({ nodeType }) =>",
							"Node",
							"function MakeCache(ctor, store = ",
							"())",
							" (k, ...args) =>",
							"function MakeCache2(ctor, store = ",
							"())",
							"key =>",
							" (id, owner) =>",
							"NodeList",
							"constructor(obj, owner)",
							"isElement = prop =>",
							"isList = prop =>",
							"wrapElement = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"ownKeys: target =>",
							"prop =>",
							"NodeList",
							"get path()",
							" function NamedNodeMap(obj, owner)",
							"isAttr = prop =>",
							"wrapAttr = (value, prop) =>",
							"get: (target, prop, receiver) =>",
							"ownKeys: target =>",
							"NamedNodeMap",
							"NamedNodeMap",
							"get path()",
							"item(key)",
							"setNamedItem(attr)",
							"removeNamedItem(name)",
							"getNamedItem(name)",
							"(acc, prop) =>",
							"Element",
							"constructor(obj, parent)",
							"get parentElement()",
							"get attributes()",
							"set tagName(v)",
							"get tagName()",
							"set nodeName(v)",
							"get nodeName()",
							"get children()",
							"get childElementCount()",
							"get firstElementChild()",
							"n =>",
							"get lastElementChild()",
							"get id()",
							"getAttribute(name)",
							"attributes =>",
							"getAttributeNames()",
							"attributes =>",
							"hasAttribute(name)",
							"attributes =>",
							"hasAttributes()",
							"removeAttribute(name)",
							"attributes =>",
							"getAttributeNode(name)",
							"setAttribute(name, value)",
							"attributes =>",
							"(obj, owner) =>",
							"attributes(elem)",
							"Element",
							"Document",
							"constructor(obj)",
							"Document",
							"createAttribute(name, value)",
							"createElement(tagName)",
							"createTextNode(text)",
							"pred = (n, k) =>",
							" (n, k) =>",
							" (n, p) =>",
							"get body()",
							"Document",
							"Attr",
							"constructor(raw, owner)",
							"get path()",
							"get ownerElement()",
							"get ownerDocument()",
							"get name()",
							"set name(v)",
							"get value()",
							"set value(v)",
							"Attr",
							"Text",
							"constructor(key, owner)",
							"get = () =>",
							"set = value =>",
							"get = () =>",
							"set = value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"toString()",
							"(key, owner) =>",
							"Text",
							"Node",
							"Text",
							"Comment",
							"constructor(raw, owner)",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get data()",
							"value =>",
							"get nodeValue()",
							"value =>",
							"(node, owner) =>",
							"Comment",
							"Node",
							"Comment",
							"TokenList",
							"constructor(owner, key = 'class')",
							"get = () =>",
							"set = value =>",
							" () =>",
							" value =>",
							"get length()",
							"value =>",
							"get value()",
							"value =>",
							"item(index)",
							"value =>",
							"contains(token)",
							"value =>",
							"add(...tokens)",
							"(arr, set) =>",
							"remove(...tokens)",
							"(arr, set) =>",
							"toggle(token, force)",
							"(arr, set) =>",
							"supports(token)",
							"replace(oldToken, newToken)",
							"(arr, set) =>",
							"TokenList",
							"TokenList",
							" (container, i) =>",
							"function Membrane(instance, obj, proto, wrapProp, wrapElement)",
							"get: (target, prop, receiver) =>",
							"has: (target, prop) =>",
							"getOwnPropertyDescriptor: (target, prop) =>",
							"getPrototypeOf: target =>",
							"setPrototypeOf: (target, p) =>",
							"ownKeys: target =>",
							" function Factory(raw, owner, ctor)",
							"isArray = arg =>",
							"isAttributes = arg =>"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/dom.js",
			"settings":
			{
				"buffer_size": 26330,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12121,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAAoJAAAAAAAACwkAAAAAAAAAAAAACwkAAAAAAAANCQAAAAAAAAAAAAANCQAAAAAAAA4JAAAAAAAAAAAAAA4JAAAAAAAAEAkAAAAAAAAAAAAACwkAAAAAAAALCQAAAAAAAAIAAAAgIA4JAAAAAAAADwkAAAAAAAAAAAAADwkAAAAAAAAQCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgkAAAAAAAAKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12122,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABAJAAAAAAAAEgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAkAAAAAAAAQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12123,
					1,
					"insert",
					{
						"characters": "!type.cache"
					},
					"CwAAABEJAAAAAAAAEgkAAAAAAAAAAAAAEgkAAAAAAAATCQAAAAAAAAAAAAATCQAAAAAAABQJAAAAAAAAAAAAABQJAAAAAAAAFQkAAAAAAAAAAAAAFQkAAAAAAAAWCQAAAAAAAAAAAAAWCQAAAAAAABcJAAAAAAAAAAAAABcJAAAAAAAAGAkAAAAAAAAAAAAAGAkAAAAAAAAZCQAAAAAAAAAAAAAZCQAAAAAAABoJAAAAAAAAAAAAABoJAAAAAAAAGwkAAAAAAAAAAAAAGwkAAAAAAAAcCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQkAAAAAAAARCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12125,
					1,
					"insert",
					{
						"characters": "\nthrow"
					},
					"CQAAAB0JAAAAAAAAHgkAAAAAAAAAAAAAHgkAAAAAAAAgCQAAAAAAAAAAAAAeCQAAAAAAAB4JAAAAAAAAAgAAACAgHgkAAAAAAAAiCQAAAAAAAAAAAAAiCQAAAAAAACMJAAAAAAAAAAAAACMJAAAAAAAAJAkAAAAAAAAAAAAAJAkAAAAAAAAlCQAAAAAAAAAAAAAlCQAAAAAAACYJAAAAAAAAAAAAACYJAAAAAAAAJwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQkAAAAAAAAdCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12126,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAACcJAAAAAAAAKAkAAAAAAAAAAAAAKAkAAAAAAAApCQAAAAAAAAAAAAApCQAAAAAAACoJAAAAAAAAAAAAACoJAAAAAAAAKwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwkAAAAAAAAnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12127,
					1,
					"insert",
					{
						"characters": " Error"
					},
					"BgAAACsJAAAAAAAALAkAAAAAAAAAAAAALAkAAAAAAAAtCQAAAAAAAAAAAAAtCQAAAAAAAC4JAAAAAAAAAAAAAC4JAAAAAAAALwkAAAAAAAAAAAAALwkAAAAAAAAwCQAAAAAAAAAAAAAwCQAAAAAAADEJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwkAAAAAAAArCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12128,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADEJAAAAAAAAMwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQkAAAAAAAAxCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12129,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAADIJAAAAAAAANAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgkAAAAAAAAyCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12130,
					1,
					"insert",
					{
						"characters": "No"
					},
					"AgAAADMJAAAAAAAANAkAAAAAAAAAAAAANAkAAAAAAAA1CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwkAAAAAAAAzCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12131,
					1,
					"insert",
					{
						"characters": " such"
					},
					"BQAAADUJAAAAAAAANgkAAAAAAAAAAAAANgkAAAAAAAA3CQAAAAAAAAAAAAA3CQAAAAAAADgJAAAAAAAAAAAAADgJAAAAAAAAOQkAAAAAAAAAAAAAOQkAAAAAAAA6CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQkAAAAAAAA1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					12132,
					1,
					"insert",
					{
						"characters": " node"
					},
					"BQAAADoJAAAAAAAAOwkAAAAAAAAAAAAAOwkAAAAAAAA8CQAAAAAAAAAAAAA8CQAAAAAAAD0JAAAAAAAAAAAAAD0JAAAAAAAAPgkAAAAAAAAAAAAAPgkAAAAAAAA/CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgkAAAAAAAA6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					12133,
					1,
					"insert",
					{
						"characters": " tpye"
					},
					"BQAAAD8JAAAAAAAAQAkAAAAAAAAAAAAAQAkAAAAAAABBCQAAAAAAAAAAAABBCQAAAAAAAEIJAAAAAAAAAAAAAEIJAAAAAAAAQwkAAAAAAAAAAAAAQwkAAAAAAABECQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwkAAAAAAAA/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					12134,
					3,
					"left_delete",
					null,
					"AwAAAEMJAAAAAAAAQwkAAAAAAAABAAAAZUIJAAAAAAAAQgkAAAAAAAABAAAAeUEJAAAAAAAAQQkAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAARAkAAAAAAABECQAAAAAAAAAAAAAAAPC/"
				],
				[
					12135,
					1,
					"insert",
					{
						"characters": "ype"
					},
					"AwAAAEEJAAAAAAAAQgkAAAAAAAAAAAAAQgkAAAAAAABDCQAAAAAAAAAAAABDCQAAAAAAAEQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQkAAAAAAABBCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12136,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEQJAAAAAAAARQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAkAAAAAAABECQAAAAAAAAAAAAAAAPC/"
				],
				[
					12137,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAABHCQAAAAAAAEgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQkAAAAAAABFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12138,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgJAAAAAAAASQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAkAAAAAAABICQAAAAAAAAAAAAAAAPC/"
				],
				[
					12139,
					1,
					"insert",
					{
						"characters": "${ínspect(ob"
					},
					"DAAAAEkJAAAAAAAASgkAAAAAAAAAAAAASgkAAAAAAABLCQAAAAAAAAAAAABLCQAAAAAAAEwJAAAAAAAAAAAAAEwJAAAAAAAATQkAAAAAAAAAAAAATQkAAAAAAABOCQAAAAAAAAAAAABOCQAAAAAAAE8JAAAAAAAAAAAAAE8JAAAAAAAAUAkAAAAAAAAAAAAAUAkAAAAAAABRCQAAAAAAAAAAAABRCQAAAAAAAFIJAAAAAAAAAAAAAFIJAAAAAAAAUwkAAAAAAAAAAAAAUwkAAAAAAABUCQAAAAAAAAAAAABUCQAAAAAAAFUJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQkAAAAAAABJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12140,
					1,
					"insert",
					{
						"characters": "j)}"
					},
					"AwAAAFUJAAAAAAAAVgkAAAAAAAAAAAAAVgkAAAAAAABXCQAAAAAAAAAAAABXCQAAAAAAAFgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQkAAAAAAABVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12144,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFoJAAAAAAAAWwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgkAAAAAAABaCQAAAAAAAP///////+9/"
				],
				[
					12149,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAWwkAAAAAAABbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12157,
					1,
					"insert",
					{
						"characters": "type"
					},
					"BAAAABIJAAAAAAAAEwkAAAAAAAAAAAAAEwkAAAAAAAAUCQAAAAAAAAAAAAAUCQAAAAAAABUJAAAAAAAAAAAAABUJAAAAAAAAFgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgkAAAAAAAASCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12158,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAABYJAAAAAAAAFwkAAAAAAAAAAAAAFwkAAAAAAAAYCQAAAAAAAAAAAAAYCQAAAAAAABkJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgkAAAAAAAAWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12159,
					1,
					"insert",
					{
						"characters": " !"
					},
					"AgAAABkJAAAAAAAAGgkAAAAAAAAAAAAAGgkAAAAAAAAbCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQkAAAAAAAAZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12168,
					1,
					"left_delete",
					null,
					"AQAAAFAJAAAAAAAAUAkAAAAAAAACAAAAw60",
					"AQAAAAAAAAABAAAAUQkAAAAAAABRCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12169,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAFAJAAAAAAAAUQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAkAAAAAAABQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					12195,
					1,
					"right_delete",
					null,
					"AQAAAMAQAAAAAAAAwBAAAAAAAAApAAAAaXNPYmplY3Qobm9kZSkgJiYgbm9kZSBpbnN0YW5jZW9mIE5vZGUgPyA",
					"AQAAAAAAAAABAAAAwBAAAAAAAADpEAAAAAAAAAAAAAAAAPC/"
				],
				[
					12199,
					1,
					"left_delete",
					null,
					"AQAAAM4QAAAAAAAAzhAAAAAAAAAHAAAAIDogbm9kZQ",
					"AQAAAAAAAAABAAAAzhAAAAAAAADVEAAAAAAAAAAAAAAAAPC/"
				],
				[
					12241,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFJNAAAAAAAAU00AAAAAAAAAAAAAU00AAAAAAABTTQAAAAAAAFUAAAAgICAgLy9jb25zb2xlLmxvZygnVGV4dC5jb25zdHJ1Y3RvcicsIHtrZXksb3duZXI6IG93bmVyICYmIG93bmVyLmNvbnN0cnVjdG9yLm5hbWV9KTsK",
					"AQAAAAAAAAABAAAAUk0AAAAAAACnTQAAAAAAAAAAAAAAAPC/"
				],
				[
					12248,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKlNAAAAAAAAqk0AAAAAAAAAAAAAqk0AAAAAAACqTQAAAAAAAD4AAAAgICAgICAvL2NvbnNvbGUubG9nKCdyYXcnLCB0eXBlb2YgcmF3LCByYXcuY29uc3RydWN0b3IubmFtZSk7Cg",
					"AQAAAAAAAAABAAAAqU0AAAAAAADnTQAAAAAAAAAAAAAAAPC/"
				],
				[
					12251,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAAFNNAAAAAAAAG08AAAAAAADKAQAACiAgICBpZihvd25lcikgewogICAgICBsZXQgcmF3ID0gb3duZXIgaW5zdGFuY2VvZiBOb2RlTGlzdCA/IE5vZGUucmF3KG93bmVyKSA6IG93bmVyOwogICAgICAgaWYoa2V5IGluIHJhdykgewogICAgICB9IGVsc2UgaWYocmF3LmluZGV4T2Yoa2V5KSAhPSAtMSkgewogICAgICAgIGtleSA9IHJhdy5pbmRleE9mKGtleSk7CiAgICAgIH0KCiAgICAgIGdldCA9ICgpID0+IHJhd1trZXldID8/ICcnOwogICAgICBzZXQgPSB2YWx1ZSA9PiAocmF3W2tleV0gPSB2YWx1ZSk7CiAgICB9IGVsc2UgewogICAgICBUZXh0Q2FjaGUodGhpcywgeyB0ZXh0OiBrZXkgfSk7CiAgICAgIGdldCA9ICgpID0+IFRleHRDYWNoZSh0aGlzKS50ZXh0OwogICAgICBzZXQgPSB2YWx1ZSA9PiAoVGV4dENhY2hlKHRoaXMpLnRleHQgPSB2YWx1ZSk7CiAgICB9CiAgICBUZXh0VmFsdWUodGhpcywgbW9kaWZpZXIoZ2V0LCBzZXQpKTs",
					"AQAAAAAAAAABAAAAU00AAAAAAAAdTwAAAAAAAAAAAAAAAPC/"
				],
				[
					12255,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACBPAAAAAAAAIU8AAAAAAAAAAAAAIU8AAAAAAAAiTwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIE8AAAAAAAAgTwAAAAAAAAAAAAAAAPC/"
				],
				[
					12310,
					1,
					"insert",
					{
						"characters": "stati"
					},
					"BgAAALNMAAAAAAAAtEwAAAAAAAAAAAAAtEwAAAAAAAC0TAAAAAAAAAkAAABUZXh0Q2FjaGW0TAAAAAAAALVMAAAAAAAAAAAAALVMAAAAAAAAtkwAAAAAAAAAAAAAtkwAAAAAAAC3TAAAAAAAAAAAAAC3TAAAAAAAALhMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAs0wAAAAAAAC8TAAAAAAAAAAAAAAAAPC/"
				],
				[
					12311,
					5,
					"left_delete",
					null,
					"BQAAALdMAAAAAAAAt0wAAAAAAAABAAAAabZMAAAAAAAAtkwAAAAAAAABAAAAdLVMAAAAAAAAtUwAAAAAAAABAAAAYbRMAAAAAAAAtEwAAAAAAAABAAAAdLNMAAAAAAAAs0wAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAuEwAAAAAAAC4TAAAAAAAAAAAAAAAAPC/"
				],
				[
					12312,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BQAAALNMAAAAAAAAtEwAAAAAAAAAAAAAtEwAAAAAAAC1TAAAAAAAAAAAAAC1TAAAAAAAALZMAAAAAAAAAAAAALZMAAAAAAAAt0wAAAAAAAAAAAAAt0wAAAAAAAC4TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAs0wAAAAAAACzTAAAAAAAAAAAAAAAAPC/"
				],
				[
					12314,
					5,
					"right_delete",
					null,
					"BQAAAK1MAAAAAAAArUwAAAAAAAABAAAAY61MAAAAAAAArUwAAAAAAAABAAAAb61MAAAAAAAArUwAAAAAAAABAAAAbq1MAAAAAAAArUwAAAAAAAABAAAAc61MAAAAAAAArUwAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAArUwAAAAAAACtTAAAAAAAAAAAAAAAAAAA"
				],
				[
					12315,
					1,
					"insert",
					{
						"characters": "statoc"
					},
					"BgAAAK1MAAAAAAAArkwAAAAAAAAAAAAArkwAAAAAAACvTAAAAAAAAAAAAACvTAAAAAAAALBMAAAAAAAAAAAAALBMAAAAAAAAsUwAAAAAAAAAAAAAsUwAAAAAAACyTAAAAAAAAAAAAACyTAAAAAAAALNMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArUwAAAAAAACtTAAAAAAAAAAAAAAAAPC/"
				],
				[
					12316,
					2,
					"left_delete",
					null,
					"AgAAALJMAAAAAAAAskwAAAAAAAABAAAAY7FMAAAAAAAAsUwAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAs0wAAAAAAACzTAAAAAAAAAAAAAAAAPC/"
				],
				[
					12317,
					1,
					"insert",
					{
						"characters": "ic"
					},
					"AgAAALFMAAAAAAAAskwAAAAAAAAAAAAAskwAAAAAAACzTAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsUwAAAAAAACxTAAAAAAAAAAAAAAAAPC/"
				],
				[
					12321,
					1,
					"insert",
					{
						"characters": "store"
					},
					"BgAAALRMAAAAAAAAtUwAAAAAAAAAAAAAtUwAAAAAAAC1TAAAAAAAAAUAAAB2YWx1ZbVMAAAAAAAAtkwAAAAAAAAAAAAAtkwAAAAAAAC3TAAAAAAAAAAAAAC3TAAAAAAAALhMAAAAAAAAAAAAALhMAAAAAAAAuUwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtEwAAAAAAAC5TAAAAAAAAAAAAAAAAPC/"
				],
				[
					12336,
					1,
					"",
					null,
					"AQAAAG1OAAAAAAAAd04AAAAAAAAJAAAAVGV4dENhY2hl",
					"AQAAAAAAAAABAAAAbU4AAAAAAAB2TgAAAAAAAAAAAAAAAPC/"
				],
				[
					12337,
					1,
					"",
					null,
					"AQAAAKBOAAAAAAAAqk4AAAAAAAAJAAAAVGV4dENhY2hl",
					"AQAAAAAAAAABAAAAoE4AAAAAAACpTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12338,
					1,
					"",
					null,
					"AQAAAM1OAAAAAAAA104AAAAAAAAJAAAAVGV4dENhY2hl",
					"AQAAAAAAAAABAAAAzU4AAAAAAADWTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12349,
					1,
					"cut",
					null,
					"AQAAAK1MAAAAAAAArUwAAAAAAAAsAAAAc3RhdGljIHN0b3JlID0gZ2V0dGVyc2V0dGVyKG5ldyBXZWFrTWFwKCkpOwo",
					"AQAAAAAAAAABAAAArUwAAAAAAADZTAAAAAAAAAAAAAAAAPC/"
				],
				[
					12351,
					1,
					"paste",
					null,
					"AQAAAM9MAAAAAAAA+0wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz0wAAAAAAADPTAAAAAAAAAAAAAAAAAAA"
				],
				[
					12353,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAM9MAAAAAAAA0UwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz0wAAAAAAADPTAAAAAAAAAAAAAAAAAAA"
				],
				[
					12355,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPxMAAAAAAAA/UwAAAAAAAAAAAAA/UwAAAAAAAD/TAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/EwAAAAAAAD8TAAAAAAAAP///////+9/"
				],
				[
					12370,
					1,
					"paste",
					null,
					"AgAAAO1MAAAAAAAA9EwAAAAAAAAAAAAA9EwAAAAAAAD0TAAAAAAAAA0AAABuZXcgV2Vha01hcCgp",
					"AQAAAAAAAAABAAAA7UwAAAAAAAD6TAAAAAAAAAAAAAAAAPC/"
				],
				[
					12416,
					2,
					"left_delete",
					null,
					"AwAAALBOAAAAAAAAsE4AAAAAAAAEAAAAdGV4dPdMAAAAAAAA90wAAAAAAAACAAAAICCtTgAAAAAAAK1OAAAAAAAAAQAAAC4",
					"AQAAAAAAAAABAAAAsE4AAAAAAAC0TgAAAAAAAAAAAAAAAPC/"
				],
				[
					12427,
					1,
					"left_delete",
					null,
					"AQAAAMROAAAAAAAAxE4AAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAxU4AAAAAAADFTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12429,
					8,
					"right_delete",
					null,
					"CAAAANNOAAAAAAAA004AAAAAAAABAAAAKdNOAAAAAAAA004AAAAAAAABAAAALtNOAAAAAAAA004AAAAAAAABAAAAdNNOAAAAAAAA004AAAAAAAABAAAAZdNOAAAAAAAA004AAAAAAAABAAAAeNNOAAAAAAAA004AAAAAAAABAAAAdNNOAAAAAAAA004AAAAAAAABAAAAINNOAAAAAAAA004AAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAA004AAAAAAADTTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12430,
					1,
					"insert",
					{
						"characters": ",m"
					},
					"AgAAANNOAAAAAAAA1E4AAAAAAAAAAAAA1E4AAAAAAADVTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA004AAAAAAADTTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12431,
					1,
					"left_delete",
					null,
					"AQAAANROAAAAAAAA1E4AAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA1U4AAAAAAADVTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12438,
					8,
					"right_delete",
					null,
					"CAAAAHtOAAAAAAAAe04AAAAAAAABAAAAe3tOAAAAAAAAe04AAAAAAAABAAAAIHtOAAAAAAAAe04AAAAAAAABAAAAdHtOAAAAAAAAe04AAAAAAAABAAAAZXtOAAAAAAAAe04AAAAAAAABAAAAeHtOAAAAAAAAe04AAAAAAAABAAAAdHtOAAAAAAAAe04AAAAAAAABAAAAOntOAAAAAAAAe04AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAe04AAAAAAAB7TgAAAAAAAAAAAAAAAPC/"
				],
				[
					12441,
					2,
					"left_delete",
					null,
					"AgAAAH9OAAAAAAAAf04AAAAAAAABAAAAfX5OAAAAAAAAfk4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAgE4AAAAAAACATgAAAAAAAAAAAAAAAPC/"
				],
				[
					12489,
					1,
					"cut",
					null,
					"AQAAAH5MAAAAAAAAfkwAAAAAAAAvAAAAY29uc3QgVGV4dFZhbHVlID0gZ2V0dGVyc2V0dGVyKG5ldyBXZWFrTWFwKCkpOwo",
					"AQAAAAAAAAABAAAAfkwAAAAAAACtTAAAAAAAAAAAAAAAAPC/"
				],
				[
					12495,
					1,
					"paste",
					null,
					"AQAAAHACAAAAAAAAnwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAIAAAAAAABwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					12500,
					1,
					"insert",
					{
						"characters": "textVales"
					},
					"CgAAAHYCAAAAAAAAdwIAAAAAAAAAAAAAdwIAAAAAAAB3AgAAAAAAAAkAAABUZXh0VmFsdWV3AgAAAAAAAHgCAAAAAAAAAAAAAHgCAAAAAAAAeQIAAAAAAAAAAAAAeQIAAAAAAAB6AgAAAAAAAAAAAAB6AgAAAAAAAHsCAAAAAAAAAAAAAHsCAAAAAAAAfAIAAAAAAAAAAAAAfAIAAAAAAAB9AgAAAAAAAAAAAAB9AgAAAAAAAH4CAAAAAAAAAAAAAH4CAAAAAAAAfwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgIAAAAAAAB/AgAAAAAAAAAAAAAAAPC/"
				],
				[
					12501,
					2,
					"left_delete",
					null,
					"AgAAAH4CAAAAAAAAfgIAAAAAAAABAAAAc30CAAAAAAAAfQIAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAfwIAAAAAAAB/AgAAAAAAAAAAAAAAAPC/"
				],
				[
					12502,
					1,
					"insert",
					{
						"characters": "ues"
					},
					"AwAAAH0CAAAAAAAAfgIAAAAAAAAAAAAAfgIAAAAAAAB/AgAAAAAAAAAAAAB/AgAAAAAAAIACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQIAAAAAAAB9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					12521,
					1,
					"insert",
					{
						"characters": "textValzu"
					},
					"CgAAAN5OAAAAAAAA304AAAAAAAAAAAAA304AAAAAAADfTgAAAAAAAAkAAABUZXh0VmFsdWXfTgAAAAAAAOBOAAAAAAAAAAAAAOBOAAAAAAAA4U4AAAAAAAAAAAAA4U4AAAAAAADiTgAAAAAAAAAAAADiTgAAAAAAAONOAAAAAAAAAAAAAONOAAAAAAAA5E4AAAAAAAAAAAAA5E4AAAAAAADlTgAAAAAAAAAAAADlTgAAAAAAAOZOAAAAAAAAAAAAAOZOAAAAAAAA504AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3k4AAAAAAADnTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12522,
					2,
					"left_delete",
					null,
					"AgAAAOZOAAAAAAAA5k4AAAAAAAABAAAAdeVOAAAAAAAA5U4AAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAA504AAAAAAADnTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12523,
					1,
					"insert",
					{
						"characters": "ûes"
					},
					"AwAAAOVOAAAAAAAA5k4AAAAAAAAAAAAA5k4AAAAAAADnTgAAAAAAAAAAAADnTgAAAAAAAOhOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5U4AAAAAAADlTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12524,
					3,
					"left_delete",
					null,
					"AwAAAOdOAAAAAAAA504AAAAAAAABAAAAc+ZOAAAAAAAA5k4AAAAAAAABAAAAZeVOAAAAAAAA5U4AAAAAAAACAAAAw7s",
					"AQAAAAAAAAABAAAA6E4AAAAAAADoTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12525,
					1,
					"insert",
					{
						"characters": "uies"
					},
					"BAAAAOVOAAAAAAAA5k4AAAAAAAAAAAAA5k4AAAAAAADnTgAAAAAAAAAAAADnTgAAAAAAAOhOAAAAAAAAAAAAAOhOAAAAAAAA6U4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5U4AAAAAAADlTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12526,
					3,
					"left_delete",
					null,
					"AwAAAOhOAAAAAAAA6E4AAAAAAAABAAAAc+dOAAAAAAAA504AAAAAAAABAAAAZeZOAAAAAAAA5k4AAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA6U4AAAAAAADpTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12527,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAOZOAAAAAAAA504AAAAAAAAAAAAA504AAAAAAADoTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5k4AAAAAAADmTgAAAAAAAAAAAAAAAPC/"
				],
				[
					12537,
					1,
					"paste",
					null,
					"AgAAAEVPAAAAAAAAT08AAAAAAAAAAAAAT08AAAAAAABPTwAAAAAAAAkAAABUZXh0VmFsdWU",
					"AQAAAAAAAAABAAAARU8AAAAAAABOTwAAAAAAAAAAAAAAAPC/"
				],
				[
					12542,
					1,
					"paste",
					null,
					"AgAAAItPAAAAAAAAlU8AAAAAAAAAAAAAlU8AAAAAAACVTwAAAAAAAAkAAABUZXh0VmFsdWU",
					"AQAAAAAAAAABAAAAi08AAAAAAACUTwAAAAAAAAAAAAAAAPC/"
				],
				[
					12556,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAP8QAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAEEQAAAAAAAAAAAAAEEQAAAAAAAAURAAAAAAAAAAAAAAURAAAAAAAABhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/xAAAAAAAAD/EAAAAAAAAAAAAAAAAPC/"
				],
				[
					12557,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAYRAAAAAAAACBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABhEAAAAAAAAGEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12558,
					1,
					"insert",
					{
						"characters": "node"
					},
					"BAAAAAcRAAAAAAAACBEAAAAAAAAAAAAACBEAAAAAAAAJEQAAAAAAAAAAAAAJEQAAAAAAAAoRAAAAAAAAAAAAAAoRAAAAAAAACxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABxEAAAAAAAAHEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12559,
					1,
					"insert",
					{
						"characters": " instanceof"
					},
					"CwAAAAsRAAAAAAAADBEAAAAAAAAAAAAADBEAAAAAAAANEQAAAAAAAAAAAAANEQAAAAAAAA4RAAAAAAAAAAAAAA4RAAAAAAAADxEAAAAAAAAAAAAADxEAAAAAAAAQEQAAAAAAAAAAAAAQEQAAAAAAABERAAAAAAAAAAAAABERAAAAAAAAEhEAAAAAAAAAAAAAEhEAAAAAAAATEQAAAAAAAAAAAAATEQAAAAAAABQRAAAAAAAAAAAAABQRAAAAAAAAFREAAAAAAAAAAAAAFREAAAAAAAAWEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACxEAAAAAAAALEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12560,
					1,
					"insert",
					{
						"characters": " Text"
					},
					"BQAAABYRAAAAAAAAFxEAAAAAAAAAAAAAFxEAAAAAAAAYEQAAAAAAAAAAAAAYEQAAAAAAABkRAAAAAAAAAAAAABkRAAAAAAAAGhEAAAAAAAAAAAAAGhEAAAAAAAAbEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFhEAAAAAAAAWEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12562,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABwRAAAAAAAAHREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHBEAAAAAAAAcEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12566,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAB0RAAAAAAAAHxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHREAAAAAAAAdEQAAAAAAAP///////+9/"
				],
				[
					12567,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAB4RAAAAAAAAHxEAAAAAAAAAAAAAHxEAAAAAAAAjEQAAAAAAAAAAAAAjEQAAAAAAACQRAAAAAAAAAAAAACQRAAAAAAAAKBEAAAAAAAAAAAAAHxEAAAAAAAAfEQAAAAAAAAQAAAAgICAgHxEAAAAAAAAlEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhEAAAAAAAAeEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12568,
					1,
					"insert",
					{
						"characters": "textValues"
					},
					"CgAAACURAAAAAAAAJhEAAAAAAAAAAAAAJhEAAAAAAAAnEQAAAAAAAAAAAAAnEQAAAAAAACgRAAAAAAAAAAAAACgRAAAAAAAAKREAAAAAAAAAAAAAKREAAAAAAAAqEQAAAAAAAAAAAAAqEQAAAAAAACsRAAAAAAAAAAAAACsRAAAAAAAALBEAAAAAAAAAAAAALBEAAAAAAAAtEQAAAAAAAAAAAAAtEQAAAAAAAC4RAAAAAAAAAAAAAC4RAAAAAAAALxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJREAAAAAAAAlEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12569,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAC8RAAAAAAAAMBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxEAAAAAAAAvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12570,
					1,
					"left_delete",
					null,
					"AQAAAC8RAAAAAAAALxEAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAMBEAAAAAAAAwEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12571,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC8RAAAAAAAAMREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALxEAAAAAAAAvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12572,
					1,
					"insert",
					{
						"characters": "node,"
					},
					"BQAAADARAAAAAAAAMREAAAAAAAAAAAAAMREAAAAAAAAyEQAAAAAAAAAAAAAyEQAAAAAAADMRAAAAAAAAAAAAADMRAAAAAAAANBEAAAAAAAAAAAAANBEAAAAAAAA1EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMBEAAAAAAAAwEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12573,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADURAAAAAAAANhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANREAAAAAAAA1EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12605,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAB4RAAAAAAAAHxEAAAAAAAAAAAAAHxEAAAAAAAAjEQAAAAAAAAAAAAAjEQAAAAAAACURAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHhEAAAAAAAAeEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12606,
					1,
					"paste",
					null,
					"AQAAACURAAAAAAAAHRIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJREAAAAAAAAlEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12609,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHARAAAAAAAAcREAAAAAAAAAAAAAcREAAAAAAABxEQAAAAAAAH4AAAAgfSBlbHNlIHsKICAgICAgVGV4dC5zdG9yZSh0aGlzLCBrZXkpOwogICAgICBnZXQgPSAoKSA9PiBUZXh0LnN0b3JlKHRoaXMpOwogICAgICBzZXQgPSB2YWx1ZSA9PiBUZXh0LnN0b3JlKHRoaXMsIHZhbHVlKTsKICAgIH0",
					"AQAAAAAAAAABAAAAcBEAAAAAAADuEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12612,
					1,
					"cut",
					null,
					"AQAAAC4RAAAAAAAALhEAAAAAAAAUAAAAKCkgPT4gcmF3W2tleV0gPz8gJyc",
					"AQAAAAAAAAABAAAALhEAAAAAAABCEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12617,
					1,
					"paste",
					null,
					"AgAAAHwRAAAAAAAAkBEAAAAAAAAAAAAAkBEAAAAAAACQEQAAAAAAAAMAAABnZXQ",
					"AQAAAAAAAAABAAAAfBEAAAAAAAB/EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12634,
					1,
					"insert",
					{
						"characters": "kl"
					},
					"AgAAAF0RAAAAAAAAXhEAAAAAAAAAAAAAXhEAAAAAAABfEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXREAAAAAAABdEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12635,
					2,
					"left_delete",
					null,
					"AgAAAF4RAAAAAAAAXhEAAAAAAAABAAAAbF0RAAAAAAAAXREAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAXxEAAAAAAABfEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12636,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAF0RAAAAAAAAXhEAAAAAAAAAAAAAXhEAAAAAAABfEQAAAAAAAAAAAABfEQAAAAAAAGARAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXREAAAAAAABdEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12637,
					1,
					"insert",
					{
						"characters": " key"
					},
					"BAAAAGARAAAAAAAAYREAAAAAAAAAAAAAYREAAAAAAABiEQAAAAAAAAAAAABiEQAAAAAAAGMRAAAAAAAAAAAAAGMRAAAAAAAAZBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYBEAAAAAAABgEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12638,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAGQRAAAAAAAAZREAAAAAAAAAAAAAZREAAAAAAABmEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZBEAAAAAAABkEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12639,
					1,
					"insert",
					{
						"characters": " children.le"
					},
					"DAAAAGYRAAAAAAAAZxEAAAAAAAAAAAAAZxEAAAAAAABoEQAAAAAAAAAAAABoEQAAAAAAAGkRAAAAAAAAAAAAAGkRAAAAAAAAahEAAAAAAAAAAAAAahEAAAAAAABrEQAAAAAAAAAAAABrEQAAAAAAAGwRAAAAAAAAAAAAAGwRAAAAAAAAbREAAAAAAAAAAAAAbREAAAAAAABuEQAAAAAAAAAAAABuEQAAAAAAAG8RAAAAAAAAAAAAAG8RAAAAAAAAcBEAAAAAAAAAAAAAcBEAAAAAAABxEQAAAAAAAAAAAABxEQAAAAAAAHIRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZhEAAAAAAABmEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12640,
					1,
					"insert",
					{
						"characters": "ngth;"
					},
					"BQAAAHIRAAAAAAAAcxEAAAAAAAAAAAAAcxEAAAAAAAB0EQAAAAAAAAAAAAB0EQAAAAAAAHURAAAAAAAAAAAAAHURAAAAAAAAdhEAAAAAAAAAAAAAdhEAAAAAAAB3EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAchEAAAAAAAByEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12644,
					1,
					"left_delete",
					null,
					"AQAAAB8RAAAAAAAAHxEAAAAAAAA6AAAAICAgICAgICAgZ2V0ID0gOwogICAgICBzZXQgPSB2YWx1ZSA9PiAocmF3W2tleV0gPSB2YWx1ZSk7Cg",
					"AQAAAAAAAAABAAAAWREAAAAAAAAfEQAAAAAAAAAAAAAAAAAA"
				],
				[
					12649,
					1,
					"insert",
					{
						"characters": "children"
					},
					"CQAAAGIRAAAAAAAAYxEAAAAAAAAAAAAAYxEAAAAAAABjEQAAAAAAAAMAAAByYXdjEQAAAAAAAGQRAAAAAAAAAAAAAGQRAAAAAAAAZREAAAAAAAAAAAAAZREAAAAAAABmEQAAAAAAAAAAAABmEQAAAAAAAGcRAAAAAAAAAAAAAGcRAAAAAAAAaBEAAAAAAAAAAAAAaBEAAAAAAABpEQAAAAAAAAAAAABpEQAAAAAAAGoRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYhEAAAAAAABlEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12665,
					1,
					"insert",
					{
						"characters": "value"
					},
					"BgAAAHcRAAAAAAAAeBEAAAAAAAAAAAAAeBEAAAAAAAB4EQAAAAAAAAMAAABzZXR4EQAAAAAAAHkRAAAAAAAAAAAAAHkRAAAAAAAAehEAAAAAAAAAAAAAehEAAAAAAAB7EQAAAAAAAAAAAAB7EQAAAAAAAHwRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdxEAAAAAAAB6EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12666,
					1,
					"insert",
					{
						"characters": " =>"
					},
					"AwAAAHwRAAAAAAAAfREAAAAAAAAAAAAAfREAAAAAAAB+EQAAAAAAAAAAAAB+EQAAAAAAAH8RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfBEAAAAAAAB8EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12667,
					1,
					"insert",
					{
						"characters": " children"
					},
					"CQAAAH8RAAAAAAAAgBEAAAAAAAAAAAAAgBEAAAAAAACBEQAAAAAAAAAAAACBEQAAAAAAAIIRAAAAAAAAAAAAAIIRAAAAAAAAgxEAAAAAAAAAAAAAgxEAAAAAAACEEQAAAAAAAAAAAACEEQAAAAAAAIURAAAAAAAAAAAAAIURAAAAAAAAhhEAAAAAAAAAAAAAhhEAAAAAAACHEQAAAAAAAAAAAACHEQAAAAAAAIgRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfxEAAAAAAAB/EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12668,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIgRAAAAAAAAihEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiBEAAAAAAACIEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12669,
					1,
					"insert",
					{
						"characters": "key"
					},
					"AwAAAIkRAAAAAAAAihEAAAAAAAAAAAAAihEAAAAAAACLEQAAAAAAAAAAAACLEQAAAAAAAIwRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiREAAAAAAACJEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12671,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAI0RAAAAAAAAjhEAAAAAAAAAAAAAjhEAAAAAAACPEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjREAAAAAAACNEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12672,
					1,
					"insert",
					{
						"characters": " value"
					},
					"BgAAAI8RAAAAAAAAkBEAAAAAAAAAAAAAkBEAAAAAAACREQAAAAAAAAAAAACREQAAAAAAAJIRAAAAAAAAAAAAAJIRAAAAAAAAkxEAAAAAAAAAAAAAkxEAAAAAAACUEQAAAAAAAAAAAACUEQAAAAAAAJURAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxEAAAAAAACPEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12677,
					1,
					"left_delete",
					null,
					"AQAAAJkRAAAAAAAAmREAAAAAAAAeAAAAICAgIAogICAgICB0ZXh0VmFsdWVzKG5vZGUsICkK",
					"AQAAAAAAAAABAAAAmREAAAAAAAC3EQAAAAAAAAAAAAAAAAAA"
				],
				[
					12680,
					1,
					"indent",
					null,
					"AgAAAB8RAAAAAAAAIREAAAAAAAAAAAAAQBEAAAAAAABCEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHxEAAAAAAACZEQAAAAAAAAAAAAAAAAAA"
				],
				[
					12698,
					1,
					"insert",
					{
						"characters": "\nownerElement"
					},
					"DgAAAJwRAAAAAAAAnREAAAAAAAAAAAAAnREAAAAAAACjEQAAAAAAAAAAAACjEQAAAAAAAKQRAAAAAAAAAAAAAKQRAAAAAAAApREAAAAAAAAAAAAApREAAAAAAACmEQAAAAAAAAAAAACmEQAAAAAAAKcRAAAAAAAAAAAAAKcRAAAAAAAAqBEAAAAAAAAAAAAAqBEAAAAAAACpEQAAAAAAAAAAAACpEQAAAAAAAKoRAAAAAAAAAAAAAKoRAAAAAAAAqxEAAAAAAAAAAAAAqxEAAAAAAACsEQAAAAAAAAAAAACsEQAAAAAAAK0RAAAAAAAAAAAAAK0RAAAAAAAArhEAAAAAAAAAAAAArhEAAAAAAACvEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnBEAAAAAAACcEQAAAAAAAP///////+9/"
				],
				[
					12699,
					1,
					"insert",
					{
						"characters": ".set"
					},
					"BAAAAK8RAAAAAAAAsBEAAAAAAAAAAAAAsBEAAAAAAACxEQAAAAAAAAAAAACxEQAAAAAAALIRAAAAAAAAAAAAALIRAAAAAAAAsxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArxEAAAAAAACvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12700,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALMRAAAAAAAAtREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsxEAAAAAAACzEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12702,
					5,
					"left_delete",
					null,
					"BQAAALQRAAAAAAAAtBEAAAAAAAABAAAAKbMRAAAAAAAAsxEAAAAAAAABAAAAKLIRAAAAAAAAshEAAAAAAAABAAAAdLERAAAAAAAAsREAAAAAAAABAAAAZbARAAAAAAAAsBEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAtREAAAAAAAC1EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12704,
					1,
					"cut",
					null,
					"AQAAAKMRAAAAAAAAoxEAAAAAAAANAAAAb3duZXJFbGVtZW50Lg",
					"AQAAAAAAAAABAAAAsBEAAAAAAACjEQAAAAAAAAAAAAAAAFJA"
				],
				[
					12705,
					1,
					"paste",
					null,
					"AQAAAKMRAAAAAAAAsBEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxEAAAAAAACjEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12730,
					1,
					"cut",
					null,
					"AQAAAJ0RAAAAAAAAnREAAAAAAAAUAAAAICAgICAgb3duZXJFbGVtZW50Lgo",
					"AQAAAAAAAAABAAAAnREAAAAAAACxEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12732,
					1,
					"paste",
					null,
					"AQAAAKMRAAAAAAAAtxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoxEAAAAAAACjEQAAAAAAAAAAAAAAAAAA"
				],
				[
					12734,
					1,
					"insert",
					{
						"characters": "set"
					},
					"AwAAALYRAAAAAAAAtxEAAAAAAAAAAAAAtxEAAAAAAAC4EQAAAAAAAAAAAAC4EQAAAAAAALkRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAthEAAAAAAAC2EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12735,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAALkRAAAAAAAAuxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuREAAAAAAAC5EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12736,
					1,
					"insert",
					{
						"characters": "node,"
					},
					"BQAAALoRAAAAAAAAuxEAAAAAAAAAAAAAuxEAAAAAAAC8EQAAAAAAAAAAAAC8EQAAAAAAAL0RAAAAAAAAAAAAAL0RAAAAAAAAvhEAAAAAAAAAAAAAvhEAAAAAAAC/EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuhEAAAAAAAC6EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12737,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAAL8RAAAAAAAAwBEAAAAAAAAAAAAAwBEAAAAAAADBEQAAAAAAAAAAAADBEQAAAAAAAMIRAAAAAAAAAAAAAMIRAAAAAAAAwxEAAAAAAAAAAAAAwxEAAAAAAADEEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvxEAAAAAAAC/EQAAAAAAAAAAAAAAAPC/"
				],
				[
					12739,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMURAAAAAAAAxhEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxREAAAAAAADFEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12742,
					2,
					"right_delete",
					null,
					"AgAAAKQRAAAAAAAApBEAAAAAAAABAAAAIKQRAAAAAAAApBEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAApBEAAAAAAACkEQAAAAAAAAAAAAAAAChA"
				],
				[
					12781,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMQRAAAAAAAAxREAAAAAAAAAAAAAxREAAAAAAADJEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxBEAAAAAAADEEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12782,
					1,
					"paste",
					null,
					"AQAAAMURAAAAAAAA1BEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyREAAAAAAADJEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12783,
					3,
					"left_delete",
					null,
					"AwAAANYRAAAAAAAA1hEAAAAAAAACAAAAICDUEQAAAAAAANQRAAAAAAAAAgAAACAg0xEAAAAAAADTEQAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAA2BEAAAAAAADYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12784,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANMRAAAAAAAA1REAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0xEAAAAAAADTEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12785,
					1,
					"insert",
					{
						"characters": "node,"
					},
					"BQAAANQRAAAAAAAA1REAAAAAAAAAAAAA1REAAAAAAADWEQAAAAAAAAAAAADWEQAAAAAAANcRAAAAAAAAAAAAANcRAAAAAAAA2BEAAAAAAAAAAAAA2BEAAAAAAADZEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BEAAAAAAADUEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12786,
					1,
					"insert",
					{
						"characters": " this"
					},
					"BQAAANkRAAAAAAAA2hEAAAAAAAAAAAAA2hEAAAAAAADbEQAAAAAAAAAAAADbEQAAAAAAANwRAAAAAAAAAAAAANwRAAAAAAAA3REAAAAAAAAAAAAA3REAAAAAAADeEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2REAAAAAAADZEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12788,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAN8RAAAAAAAA4BEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xEAAAAAAADfEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12791,
					1,
					"insert",
					{
						"characters": "\t\t"
					},
					"AgAAAMURAAAAAAAAxxEAAAAAAAAAAAAAxxEAAAAAAADJEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxREAAAAAAADFEQAAAAAAAAAAAAAAAAAA"
				],
				[
					12812,
					1,
					"insert",
					{
						"characters": ".childNodes"
					},
					"CwAAAMIRAAAAAAAAwxEAAAAAAAAAAAAAwxEAAAAAAADEEQAAAAAAAAAAAADEEQAAAAAAAMURAAAAAAAAAAAAAMURAAAAAAAAxhEAAAAAAAAAAAAAxhEAAAAAAADHEQAAAAAAAAAAAADHEQAAAAAAAMgRAAAAAAAAAAAAAMgRAAAAAAAAyREAAAAAAAAAAAAAyREAAAAAAADKEQAAAAAAAAAAAADKEQAAAAAAAMsRAAAAAAAAAAAAAMsRAAAAAAAAzBEAAAAAAAAAAAAAzBEAAAAAAADNEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhEAAAAAAADCEQAAAAAAAAAAAAAAAPC/"
				],
				[
					12835,
					1,
					"cut",
					null,
					"AQAAAEEzAAAAAAAAQTMAAAAAAAAwAAAACiAgZ2V0IHBhdGgoKSB7CiAgICByZXR1cm4gTm9kZS5wYXRoKHRoaXMpOwogIH0K",
					"AQAAAAAAAAABAAAAQTMAAAAAAABxMwAAAAAAAAAAAAAAAPC/"
				],
				[
					12838,
					1,
					"paste",
					null,
					"AQAAAGELAAAAAAAAkQsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQsAAAAAAABhCwAAAAAAAAAAAAAAAPC/"
				],
				[
					12841,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAJELAAAAAAAAkgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQsAAAAAAACRCwAAAAAAAAAAAAAAAPC/"
				],
				[
					13015,
					6,
					"left_delete",
					null,
					"BgAAAPQRAAAAAAAA9BEAAAAAAAAKAAAAY2hpbGROb2Rlc/MRAAAAAAAA8xEAAAAAAAABAAAALvIRAAAAAAAA8hEAAAAAAAABAAAAc/ERAAAAAAAA8REAAAAAAAABAAAAafARAAAAAAAA8BEAAAAAAAABAAAAaO8RAAAAAAAA7xEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAA9BEAAAAAAAD+EQAAAAAAAAAAAAAAAPC/"
				],
				[
					13016,
					1,
					"insert",
					{
						"characters": "chioldre"
					},
					"CAAAAO8RAAAAAAAA8BEAAAAAAAAAAAAA8BEAAAAAAADxEQAAAAAAAAAAAADxEQAAAAAAAPIRAAAAAAAAAAAAAPIRAAAAAAAA8xEAAAAAAAAAAAAA8xEAAAAAAAD0EQAAAAAAAAAAAAD0EQAAAAAAAPURAAAAAAAAAAAAAPURAAAAAAAA9hEAAAAAAAAAAAAA9hEAAAAAAAD3EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xEAAAAAAADvEQAAAAAAAAAAAAAAAPC/"
				],
				[
					13017,
					5,
					"left_delete",
					null,
					"BQAAAPYRAAAAAAAA9hEAAAAAAAABAAAAZfURAAAAAAAA9REAAAAAAAABAAAAcvQRAAAAAAAA9BEAAAAAAAABAAAAZPMRAAAAAAAA8xEAAAAAAAABAAAAbPIRAAAAAAAA8hEAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAA9xEAAAAAAAD3EQAAAAAAAAAAAAAAAPC/"
				],
				[
					13018,
					1,
					"insert",
					{
						"characters": "ldren"
					},
					"BQAAAPIRAAAAAAAA8xEAAAAAAAAAAAAA8xEAAAAAAAD0EQAAAAAAAAAAAAD0EQAAAAAAAPURAAAAAAAAAAAAAPURAAAAAAAA9hEAAAAAAAAAAAAA9hEAAAAAAAD3EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8hEAAAAAAADyEQAAAAAAAAAAAAAAAPC/"
				],
				[
					13028,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANgRAAAAAAAA2REAAAAAAAAAAAAA2REAAAAAAADaEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2BEAAAAAAADYEQAAAAAAAAAAAAAAAPC/"
				],
				[
					13057,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFwZAAAAAAAAXRkAAAAAAAAAAAAAXRkAAAAAAABhGQAAAAAAAAAAAABhGQAAAAAAAGIZAAAAAAAAAAAAAGIZAAAAAAAAZhkAAAAAAAAAAAAAXRkAAAAAAABdGQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAXBkAAAAAAABcGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13061,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AgAAACQZAAAAAAAAJRkAAAAAAAAAAAAAXxkAAAAAAABfGQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAJBkAAAAAAAAkGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13062,
					1,
					"left_delete",
					null,
					"AQAAACQZAAAAAAAAJBkAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAJRkAAAAAAAAlGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13063,
					1,
					"insert",
					{
						"characters": ",parent"
					},
					"BwAAACQZAAAAAAAAJRkAAAAAAAAAAAAAJRkAAAAAAAAmGQAAAAAAAAAAAAAmGQAAAAAAACcZAAAAAAAAAAAAACcZAAAAAAAAKBkAAAAAAAAAAAAAKBkAAAAAAAApGQAAAAAAAAAAAAApGQAAAAAAACoZAAAAAAAAAAAAACoZAAAAAAAAKxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBkAAAAAAAAkGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13067,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMZAAAAAAAAZBkAAAAAAAAAAAAAZBkAAAAAAABoGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYxkAAAAAAABjGQAAAAAAAP///////+9/"
				],
				[
					13070,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAGgZAAAAAAAAaRkAAAAAAAAAAAAAaRkAAAAAAABqGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaBkAAAAAAABoGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13071,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAGoZAAAAAAAAbBkAAAAAAAAAAAAAaxkAAAAAAABtGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAahkAAAAAAABqGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13072,
					1,
					"insert",
					{
						"characters": "parnet"
					},
					"BgAAAGwZAAAAAAAAbRkAAAAAAAAAAAAAbRkAAAAAAABuGQAAAAAAAAAAAABuGQAAAAAAAG8ZAAAAAAAAAAAAAG8ZAAAAAAAAcBkAAAAAAAAAAAAAcBkAAAAAAABxGQAAAAAAAAAAAABxGQAAAAAAAHIZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbBkAAAAAAABsGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13073,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAHIZAAAAAAAAcxkAAAAAAAAAAAAAcxkAAAAAAAB0GQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAchkAAAAAAAByGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13074,
					1,
					"insert",
					{
						"characters": " parentElement"
					},
					"DgAAAHQZAAAAAAAAdRkAAAAAAAAAAAAAdRkAAAAAAAB2GQAAAAAAAAAAAAB2GQAAAAAAAHcZAAAAAAAAAAAAAHcZAAAAAAAAeBkAAAAAAAAAAAAAeBkAAAAAAAB5GQAAAAAAAAAAAAB5GQAAAAAAAHoZAAAAAAAAAAAAAHoZAAAAAAAAexkAAAAAAAAAAAAAexkAAAAAAAB8GQAAAAAAAAAAAAB8GQAAAAAAAH0ZAAAAAAAAAAAAAH0ZAAAAAAAAfhkAAAAAAAAAAAAAfhkAAAAAAAB/GQAAAAAAAAAAAAB/GQAAAAAAAIAZAAAAAAAAAAAAAIAZAAAAAAAAgRkAAAAAAAAAAAAAgRkAAAAAAACCGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdBkAAAAAAAB0GQAAAAAAAAAAAAAAAPC/"
				],
				[
					13075,
					1,
					"insert",
					{
						"characters": ".get"
					},
					"BAAAAIIZAAAAAAAAgxkAAAAAAAAAAAAAgxkAAAAAAACEGQAAAAAAAAAAAACEGQAAAAAAAIUZAAAAAAAAAAAAAIUZAAAAAAAAhhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAghkAAAAAAACCGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13076,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIYZAAAAAAAAiBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhkAAAAAAACGGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13077,
					1,
					"insert",
					{
						"characters": "ndoe"
					},
					"BAAAAIcZAAAAAAAAiBkAAAAAAAAAAAAAiBkAAAAAAACJGQAAAAAAAAAAAACJGQAAAAAAAIoZAAAAAAAAAAAAAIoZAAAAAAAAixkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxkAAAAAAACHGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13079,
					5,
					"left_delete",
					null,
					"BQAAAIwZAAAAAAAAjBkAAAAAAAABAAAAKYsZAAAAAAAAixkAAAAAAAABAAAAKYoZAAAAAAAAihkAAAAAAAABAAAAZYkZAAAAAAAAiRkAAAAAAAABAAAAb4gZAAAAAAAAiBkAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAjRkAAAAAAACNGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13080,
					1,
					"left_delete",
					null,
					"AQAAAIcZAAAAAAAAhxkAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAiBkAAAAAAACIGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13081,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAIYZAAAAAAAAhhkAAAAAAAABAAAAKIYZAAAAAAAAhhkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAhxkAAAAAAACHGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13082,
					3,
					"left_delete",
					null,
					"AwAAAIUZAAAAAAAAhRkAAAAAAAABAAAAdIQZAAAAAAAAhBkAAAAAAAABAAAAZYMZAAAAAAAAgxkAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAhhkAAAAAAACGGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13083,
					1,
					"insert",
					{
						"characters": "get"
					},
					"AwAAAIMZAAAAAAAAhBkAAAAAAAAAAAAAhBkAAAAAAACFGQAAAAAAAAAAAACFGQAAAAAAAIYZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgxkAAAAAAACDGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13084,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIYZAAAAAAAAiBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhhkAAAAAAACGGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13085,
					1,
					"insert",
					{
						"characters": "node"
					},
					"BAAAAIcZAAAAAAAAiBkAAAAAAAAAAAAAiBkAAAAAAACJGQAAAAAAAAAAAACJGQAAAAAAAIoZAAAAAAAAAAAAAIoZAAAAAAAAixkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhxkAAAAAAACHGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13087,
					1,
					"insert",
					{
						"characters": "))"
					},
					"AgAAAIwZAAAAAAAAjRkAAAAAAAAAAAAAjRkAAAAAAACOGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjBkAAAAAAACMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13090,
					1,
					"right_delete",
					null,
					"AQAAAG8ZAAAAAAAAbxkAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAbxkAAAAAAABvGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13091,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAG8ZAAAAAAAAcBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbxkAAAAAAABvGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13092,
					1,
					"left_delete",
					null,
					"AQAAAG8ZAAAAAAAAbxkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAcBkAAAAAAABwGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13094,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAHAZAAAAAAAAcRkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcBkAAAAAAABwGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13096,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI4ZAAAAAAAAjxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhkAAAAAAACOGQAAAAAAAP///////+9/"
				],
				[
					13101,
					1,
					"insert",
					{
						"characters": " %%"
					},
					"AwAAAI0ZAAAAAAAAjhkAAAAAAAAAAAAAjhkAAAAAAACPGQAAAAAAAAAAAACPGQAAAAAAAJAZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjRkAAAAAAACNGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13102,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJAZAAAAAAAAkRkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBkAAAAAAACQGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13103,
					3,
					"left_delete",
					null,
					"AwAAAJAZAAAAAAAAkBkAAAAAAAABAAAAII8ZAAAAAAAAjxkAAAAAAAABAAAAJY4ZAAAAAAAAjhkAAAAAAAABAAAAJQ",
					"AQAAAAAAAAABAAAAkRkAAAAAAACRGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13104,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAI4ZAAAAAAAAjxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjhkAAAAAAACOGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13105,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI8ZAAAAAAAAkBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxkAAAAAAACPGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13106,
					1,
					"left_delete",
					null,
					"AQAAAI8ZAAAAAAAAjxkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAkBkAAAAAAACQGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13107,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAI8ZAAAAAAAAkBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjxkAAAAAAACPGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13108,
					1,
					"insert",
					{
						"characters": " Array.isA"
					},
					"CgAAAJAZAAAAAAAAkRkAAAAAAAAAAAAAkRkAAAAAAACSGQAAAAAAAAAAAACSGQAAAAAAAJMZAAAAAAAAAAAAAJMZAAAAAAAAlBkAAAAAAAAAAAAAlBkAAAAAAACVGQAAAAAAAAAAAACVGQAAAAAAAJYZAAAAAAAAAAAAAJYZAAAAAAAAlxkAAAAAAAAAAAAAlxkAAAAAAACYGQAAAAAAAAAAAACYGQAAAAAAAJkZAAAAAAAAAAAAAJkZAAAAAAAAmhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkBkAAAAAAACQGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13109,
					1,
					"insert",
					{
						"characters": "rray"
					},
					"BAAAAJoZAAAAAAAAmxkAAAAAAAAAAAAAmxkAAAAAAACcGQAAAAAAAAAAAACcGQAAAAAAAJ0ZAAAAAAAAAAAAAJ0ZAAAAAAAAnhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmhkAAAAAAACaGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13110,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ4ZAAAAAAAAoBkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnhkAAAAAAACeGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13111,
					1,
					"insert",
					{
						"characters": "parent.children"
					},
					"DwAAAJ8ZAAAAAAAAoBkAAAAAAAAAAAAAoBkAAAAAAAChGQAAAAAAAAAAAAChGQAAAAAAAKIZAAAAAAAAAAAAAKIZAAAAAAAAoxkAAAAAAAAAAAAAoxkAAAAAAACkGQAAAAAAAAAAAACkGQAAAAAAAKUZAAAAAAAAAAAAAKUZAAAAAAAAphkAAAAAAAAAAAAAphkAAAAAAACnGQAAAAAAAAAAAACnGQAAAAAAAKgZAAAAAAAAAAAAAKgZAAAAAAAAqRkAAAAAAAAAAAAAqRkAAAAAAACqGQAAAAAAAAAAAACqGQAAAAAAAKsZAAAAAAAAAAAAAKsZAAAAAAAArBkAAAAAAAAAAAAArBkAAAAAAACtGQAAAAAAAAAAAACtGQAAAAAAAK4ZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnxkAAAAAAACfGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13113,
					1,
					"insert",
					{
						"characters": " rerturn"
					},
					"CAAAALAZAAAAAAAAsRkAAAAAAAAAAAAAsRkAAAAAAACyGQAAAAAAAAAAAACyGQAAAAAAALMZAAAAAAAAAAAAALMZAAAAAAAAtBkAAAAAAAAAAAAAtBkAAAAAAAC1GQAAAAAAAAAAAAC1GQAAAAAAALYZAAAAAAAAAAAAALYZAAAAAAAAtxkAAAAAAAAAAAAAtxkAAAAAAAC4GQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsBkAAAAAAACwGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13114,
					5,
					"left_delete",
					null,
					"BQAAALcZAAAAAAAAtxkAAAAAAAABAAAAbrYZAAAAAAAAthkAAAAAAAABAAAAcrUZAAAAAAAAtRkAAAAAAAABAAAAdbQZAAAAAAAAtBkAAAAAAAABAAAAdLMZAAAAAAAAsxkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAuBkAAAAAAAC4GQAAAAAAAAAAAAAAAPC/"
				],
				[
					13115,
					1,
					"insert",
					{
						"characters": "turn"
					},
					"BAAAALMZAAAAAAAAtBkAAAAAAAAAAAAAtBkAAAAAAAC1GQAAAAAAAAAAAAC1GQAAAAAAALYZAAAAAAAAAAAAALYZAAAAAAAAtxkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsxkAAAAAAACzGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13116,
					1,
					"insert",
					{
						"characters": " parent.chidlren;"
					},
					"EQAAALcZAAAAAAAAuBkAAAAAAAAAAAAAuBkAAAAAAAC5GQAAAAAAAAAAAAC5GQAAAAAAALoZAAAAAAAAAAAAALoZAAAAAAAAuxkAAAAAAAAAAAAAuxkAAAAAAAC8GQAAAAAAAAAAAAC8GQAAAAAAAL0ZAAAAAAAAAAAAAL0ZAAAAAAAAvhkAAAAAAAAAAAAAvhkAAAAAAAC/GQAAAAAAAAAAAAC/GQAAAAAAAMAZAAAAAAAAAAAAAMAZAAAAAAAAwRkAAAAAAAAAAAAAwRkAAAAAAADCGQAAAAAAAAAAAADCGQAAAAAAAMMZAAAAAAAAAAAAAMMZAAAAAAAAxBkAAAAAAAAAAAAAxBkAAAAAAADFGQAAAAAAAAAAAADFGQAAAAAAAMYZAAAAAAAAAAAAAMYZAAAAAAAAxxkAAAAAAAAAAAAAxxkAAAAAAADIGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtxkAAAAAAAC3GQAAAAAAAAAAAAAAAPC/"
				],
				[
					13119,
					5,
					"left_delete",
					null,
					"BQAAAMYZAAAAAAAAxhkAAAAAAAABAAAAbsUZAAAAAAAAxRkAAAAAAAABAAAAZcQZAAAAAAAAxBkAAAAAAAABAAAAcsMZAAAAAAAAwxkAAAAAAAABAAAAbMIZAAAAAAAAwhkAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAxxkAAAAAAADHGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13120,
					1,
					"insert",
					{
						"characters": "ldren"
					},
					"BQAAAMIZAAAAAAAAwxkAAAAAAAAAAAAAwxkAAAAAAADEGQAAAAAAAAAAAADEGQAAAAAAAMUZAAAAAAAAAAAAAMUZAAAAAAAAxhkAAAAAAAAAAAAAxhkAAAAAAADHGQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwhkAAAAAAADCGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13122,
					1,
					"left_delete",
					null,
					"AQAAAMgZAAAAAAAAyBkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAyRkAAAAAAADJGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13124,
					1,
					"left_delete",
					null,
					"AQAAAMgZAAAAAAAAyBkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAyRkAAAAAAADJGQAAAAAAAAAAAAAAQI9A"
				],
				[
					13161,
					1,
					"paste",
					null,
					"AgAAAHUZAAAAAAAAfxkAAAAAAAAAAAAAfxkAAAAAAAB/GQAAAAAAAA0AAABwYXJlbnRFbGVtZW50",
					"AQAAAAAAAAABAAAAdRkAAAAAAACCGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13179,
					1,
					"left_delete",
					null,
					"AQAAAMUZAAAAAAAAxRkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAxhkAAAAAAADGGQAAAAAAAAAAAAAAAAAA"
				],
				[
					13192,
					1,
					"cut",
					null,
					"AQAAAGUZAAAAAAAAZRkAAAAAAABhAAAAICAgaWYoKHBhcmVudCA9IHBhcmVudE5vZGUuZ2V0KG5vZGUpKSAmJiBBcnJheS5pc0FycmF5KHBhcmVudC5jaGlsZHJlbikpIHJldHVybiBwYXJlbnQuY2hpbGRyZW47Cg",
					"AQAAAAAAAAABAAAAZRkAAAAAAADGGQAAAAAAAAAAAAAAACRA"
				],
				[
					13193,
					1,
					"paste",
					null,
					"AQAAAGUZAAAAAAAAxhkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZRkAAAAAAABlGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13195,
					1,
					"paste",
					null,
					"AQAAAOIZAAAAAAAAQxoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4hkAAAAAAADiGQAAAAAAAAAAAAAAAAAA"
				],
				[
					13231,
					1,
					"right_delete",
					null,
					"AQAAANgRAAAAAAAA2BEAAAAAAAACAAAALy8",
					"AQAAAAAAAAABAAAA2BEAAAAAAADaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					13246,
					1,
					"insert",
					{
						"characters": "tghi"
					},
					"BQAAAO8RAAAAAAAA8BEAAAAAAAAAAAAA8BEAAAAAAADwEQAAAAAAAAgAAABjaGlsZHJlbvARAAAAAAAA8REAAAAAAAAAAAAA8REAAAAAAADyEQAAAAAAAAAAAADyEQAAAAAAAPMRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7xEAAAAAAAD3EQAAAAAAAAAAAAAAAPC/"
				],
				[
					13247,
					3,
					"left_delete",
					null,
					"AwAAAPIRAAAAAAAA8hEAAAAAAAABAAAAafERAAAAAAAA8REAAAAAAAABAAAAaPARAAAAAAAA8BEAAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAA8xEAAAAAAADzEQAAAAAAAAAAAAAAAPC/"
				],
				[
					13248,
					1,
					"insert",
					{
						"characters": "his.childNodes"
					},
					"DgAAAPARAAAAAAAA8REAAAAAAAAAAAAA8REAAAAAAADyEQAAAAAAAAAAAADyEQAAAAAAAPMRAAAAAAAAAAAAAPMRAAAAAAAA9BEAAAAAAAAAAAAA9BEAAAAAAAD1EQAAAAAAAAAAAAD1EQAAAAAAAPYRAAAAAAAAAAAAAPYRAAAAAAAA9xEAAAAAAAAAAAAA9xEAAAAAAAD4EQAAAAAAAAAAAAD4EQAAAAAAAPkRAAAAAAAAAAAAAPkRAAAAAAAA+hEAAAAAAAAAAAAA+hEAAAAAAAD7EQAAAAAAAAAAAAD7EQAAAAAAAPwRAAAAAAAAAAAAAPwRAAAAAAAA/REAAAAAAAAAAAAA/REAAAAAAAD+EQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8BEAAAAAAADwEQAAAAAAAAAAAAAAAPC/"
				],
				[
					13266,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAACASAAAAAAAAIRIAAAAAAAAAAAAAIRIAAAAAAAAlEgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIBIAAAAAAAAgEgAAAAAAAP///////+9/"
				],
				[
					13299,
					1,
					"cut",
					null,
					"AQAAAG4ZAAAAAAAAbhkAAAAAAABiAAAAICAgIGlmKChwYXJlbnQgPSBwYXJlbnROb2RlLmdldChub2RlKSkgJiYgQXJyYXkuaXNBcnJheShwYXJlbnQuY2hpbGRyZW4pKSByZXR1cm4gcGFyZW50LmNoaWxkcmVuOwo",
					"AQAAAAAAAAABAAAAbhkAAAAAAADQGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13301,
					1,
					"paste",
					null,
					"AQAAADcZAAAAAAAAmRkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANxkAAAAAAAA3GQAAAAAAAAAAAAAAAAAA"
				],
				[
					13321,
					1,
					"insert",
					{
						"characters": "let"
					},
					"BQAAANUZAAAAAAAA1hkAAAAAAAAAAAAA1hkAAAAAAADWGQAAAAAAAAQAAABub2RlIRIAAAAAAAAhEgAAAAAAAAQAAAAgICAg0hkAAAAAAADTGQAAAAAAAAAAAADTGQAAAAAAANQZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1RkAAAAAAADZGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13322,
					1,
					"insert",
					{
						"characters": " raw"
					},
					"BAAAANQZAAAAAAAA1RkAAAAAAAAAAAAA1RkAAAAAAADWGQAAAAAAAAAAAADWGQAAAAAAANcZAAAAAAAAAAAAANcZAAAAAAAA2BkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1BkAAAAAAADUGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13332,
					1,
					"paste",
					null,
					"AgAAAAoaAAAAAAAADRoAAAAAAAAAAAAADRoAAAAAAAANGgAAAAAAAAQAAABub2Rl",
					"AQAAAAAAAAABAAAAChoAAAAAAAAOGgAAAAAAAAAAAAAAAPC/"
				],
				[
					13346,
					1,
					"paste",
					null,
					"AgAAAGcaAAAAAAAAahoAAAAAAAAAAAAAahoAAAAAAABqGgAAAAAAAAQAAABub2Rl",
					"AQAAAAAAAAABAAAAZxoAAAAAAABrGgAAAAAAAAAAAAAAAPC/"
				],
				[
					13384,
					1,
					"cut",
					null,
					"AQAAAJUZAAAAAAAAlRkAAAAAAAA3AAAAICAgIGlmKChvd25lciA9IG93bmVyRWxlbWVudC5nZXQobm9kZSkpKSByZXR1cm4gb3duZXI7Cg",
					"AQAAAAAAAAABAAAAlRkAAAAAAADMGQAAAAAAAAAAAAAAAPC/"
				],
				[
					13388,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABQaAAAAAAAAFRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBoAAAAAAAAUGgAAAAAAAAAAAAAAAAAA"
				],
				[
					13389,
					1,
					"paste",
					null,
					"AQAAABUaAAAAAAAATBoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFRoAAAAAAAAVGgAAAAAAAAAAAAAAAPC/"
				],
				[
					13470,
					1,
					"insert",
					{
						"characters": ".children"
					},
					"CQAAAAU5AAAAAAAABjkAAAAAAAAAAAAABjkAAAAAAAAHOQAAAAAAAAAAAAAHOQAAAAAAAAg5AAAAAAAAAAAAAAg5AAAAAAAACTkAAAAAAAAAAAAACTkAAAAAAAAKOQAAAAAAAAAAAAAKOQAAAAAAAAs5AAAAAAAAAAAAAAs5AAAAAAAADDkAAAAAAAAAAAAADDkAAAAAAAANOQAAAAAAAAAAAAANOQAAAAAAAA45AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABTkAAAAAAAAFOQAAAAAAAAAAAAAAAPC/"
				],
				[
					13477,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAojgAAAAAAACiOAAAAAAAAAAAAAAAAPC/"
				],
				[
					13484,
					1,
					"insert",
					{
						"characters": ".children"
					},
					"CQAAAEU4AAAAAAAARjgAAAAAAAAAAAAARjgAAAAAAABHOAAAAAAAAAAAAABHOAAAAAAAAEg4AAAAAAAAAAAAAEg4AAAAAAAASTgAAAAAAAAAAAAASTgAAAAAAABKOAAAAAAAAAAAAABKOAAAAAAAAEs4AAAAAAAAAAAAAEs4AAAAAAAATDgAAAAAAAAAAAAATDgAAAAAAABNOAAAAAAAAAAAAABNOAAAAAAAAE44AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARTgAAAAAAABFOAAAAAAAAAAAAAAAAPC/"
				],
				[
					13507,
					1,
					"insert",
					{
						"characters": "[0,"
					},
					"AwAAAFgnAAAAAAAAWScAAAAAAAAAAAAAWScAAAAAAABaJwAAAAAAAAAAAABaJwAAAAAAAFsnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWCcAAAAAAABYJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13508,
					1,
					"left_delete",
					null,
					"AQAAAFonAAAAAAAAWicAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAWycAAAAAAABbJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13509,
					1,
					"insert",
					{
						"characters": "];"
					},
					"AgAAAFonAAAAAAAAWycAAAAAAAAAAAAAWycAAAAAAABcJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWicAAAAAAABaJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13510,
					1,
					"insert",
					{
						"characters": " //"
					},
					"AwAAAFwnAAAAAAAAXScAAAAAAAAAAAAAXScAAAAAAABeJwAAAAAAAAAAAABeJwAAAAAAAF8nAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXCcAAAAAAABcJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13519,
					1,
					"insert",
					{
						"characters": "str"
					},
					"AwAAAFgnAAAAAAAAWScAAAAAAAAAAAAAWScAAAAAAABaJwAAAAAAAAAAAABaJwAAAAAAAFsnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWCcAAAAAAABYJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13520,
					1,
					"insert",
					{
						"characters": "[0]=='["
					},
					"BwAAAFsnAAAAAAAAXCcAAAAAAAAAAAAAXCcAAAAAAABdJwAAAAAAAAAAAABdJwAAAAAAAF4nAAAAAAAAAAAAAF4nAAAAAAAAXycAAAAAAAAAAAAAXycAAAAAAABgJwAAAAAAAAAAAABgJwAAAAAAAGEnAAAAAAAAAAAAAGEnAAAAAAAAYicAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWycAAAAAAABbJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13521,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAGInAAAAAAAAYycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYicAAAAAAABiJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13522,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAGMnAAAAAAAAZCcAAAAAAAAAAAAAZCcAAAAAAABlJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYycAAAAAAABjJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13523,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGUnAAAAAAAAZicAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZScAAAAAAABlJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13525,
					1,
					"cut",
					null,
					"AQAAAGYnAAAAAAAAZicAAAAAAAADAAAAWzBd",
					"AQAAAAAAAAABAAAAZicAAAAAAABpJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13526,
					4,
					"right_delete",
					null,
					"BAAAAGYnAAAAAAAAZicAAAAAAAABAAAAO2YnAAAAAAAAZicAAAAAAAABAAAAIGYnAAAAAAAAZicAAAAAAAABAAAAL2YnAAAAAAAAZicAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAZicAAAAAAABmJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13529,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAAJInAAAAAAAAkycAAAAAAAAAAAAAkycAAAAAAACUJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkicAAAAAAACSJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13530,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJQnAAAAAAAAlScAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlCcAAAAAAACUJwAAAAAAAAAAAAAAAPC/"
				],
				[
					13531,
					1,
					"paste",
					null,
					"AQAAAJUnAAAAAAAAmCcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlScAAAAAAACVJwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "tests/test_dom.js",
			"settings":
			{
				"buffer_size": 4325,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					23,
					1,
					"insert",
					{
						"characters": ".replace(&/"
					},
					"CwAAAHkJAAAAAAAAegkAAAAAAAAAAAAAegkAAAAAAAB7CQAAAAAAAAAAAAB7CQAAAAAAAHwJAAAAAAAAAAAAAHwJAAAAAAAAfQkAAAAAAAAAAAAAfQkAAAAAAAB+CQAAAAAAAAAAAAB+CQAAAAAAAH8JAAAAAAAAAAAAAH8JAAAAAAAAgAkAAAAAAAAAAAAAgAkAAAAAAACBCQAAAAAAAAAAAACBCQAAAAAAAIIJAAAAAAAAAAAAAIIJAAAAAAAAgwkAAAAAAAAAAAAAgwkAAAAAAACECQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQkAAAAAAAB5CQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					2,
					"left_delete",
					null,
					"AgAAAIMJAAAAAAAAgwkAAAAAAAABAAAAL4IJAAAAAAAAggkAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAhAkAAAAAAACECQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "/test_/,"
					},
					"CAAAAIIJAAAAAAAAgwkAAAAAAAAAAAAAgwkAAAAAAACECQAAAAAAAAAAAACECQAAAAAAAIUJAAAAAAAAAAAAAIUJAAAAAAAAhgkAAAAAAAAAAAAAhgkAAAAAAACHCQAAAAAAAAAAAACHCQAAAAAAAIgJAAAAAAAAAAAAAIgJAAAAAAAAiQkAAAAAAAAAAAAAiQkAAAAAAACKCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggkAAAAAAACCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " ''()"
					},
					"BQAAAIoJAAAAAAAAiwkAAAAAAAAAAAAAiwkAAAAAAACMCQAAAAAAAAAAAACMCQAAAAAAAI0JAAAAAAAAAAAAAI0JAAAAAAAAjgkAAAAAAAAAAAAAjgkAAAAAAACPCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigkAAAAAAACKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					2,
					"left_delete",
					null,
					"AgAAAI4JAAAAAAAAjgkAAAAAAAABAAAAKY0JAAAAAAAAjQkAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAjwkAAAAAAACPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAI0JAAAAAAAAjgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQkAAAAAAACNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "'0"
					},
					"AgAAAFQJAAAAAAAAVQkAAAAAAAAAAAAAVQkAAAAAAABWCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAkAAAAAAABUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"left_delete",
					null,
					"AQAAAFUJAAAAAAAAVQkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAVgkAAAAAAABWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\\x1b["
					},
					"BQAAAFUJAAAAAAAAVgkAAAAAAAAAAAAAVgkAAAAAAABXCQAAAAAAAAAAAABXCQAAAAAAAFgJAAAAAAAAAAAAAFgJAAAAAAAAWQkAAAAAAAAAAAAAWQkAAAAAAABaCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQkAAAAAAABVCQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "1;32m'"
					},
					"BgAAAFoJAAAAAAAAWwkAAAAAAAAAAAAAWwkAAAAAAABcCQAAAAAAAAAAAABcCQAAAAAAAF0JAAAAAAAAAAAAAF0JAAAAAAAAXgkAAAAAAAAAAAAAXgkAAAAAAABfCQAAAAAAAAAAAABfCQAAAAAAAGAJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgkAAAAAAABaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAGAJAAAAAAAAYQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"paste",
					null,
					"AQAAAJsJAAAAAAAAqAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwkAAAAAAACbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAKcJAAAAAAAApwkAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAqAkAAAAAAACoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAJsJAAAAAAAAnAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwkAAAAAAACbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					4,
					"right_delete",
					null,
					"BAAAAKIJAAAAAAAAogkAAAAAAAABAAAAMaIJAAAAAAAAogkAAAAAAAABAAAAO6IJAAAAAAAAogkAAAAAAAABAAAAM6IJAAAAAAAAogkAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKIJAAAAAAAAowkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"left_delete",
					null,
					"AQAAAFoJAAAAAAAAWgkAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAWgkAAAAAAABbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "38;2;"
					},
					"BQAAAFoJAAAAAAAAWwkAAAAAAAAAAAAAWwkAAAAAAABcCQAAAAAAAAAAAABcCQAAAAAAAF0JAAAAAAAAAAAAAF0JAAAAAAAAXgkAAAAAAAAAAAAAXgkAAAAAAABfCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgkAAAAAAABaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "30,"
					},
					"AwAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAABhCQAAAAAAAGIJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAGEJAAAAAAAAYQkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAYgkAAAAAAABiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": ";0,"
					},
					"AwAAAGEJAAAAAAAAYgkAAAAAAAAAAAAAYgkAAAAAAABjCQAAAAAAAAAAAABjCQAAAAAAAGQJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAGMJAAAAAAAAYwkAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAZAkAAAAAAABkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": ";255m"
					},
					"BQAAAGMJAAAAAAAAZAkAAAAAAAAAAAAAZAkAAAAAAABlCQAAAAAAAAAAAABlCQAAAAAAAGYJAAAAAAAAAAAAAGYJAAAAAAAAZwkAAAAAAAAAAAAAZwkAAAAAAABoCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					4,
					"right_delete",
					null,
					"BAAAAGgJAAAAAAAAaAkAAAAAAAABAAAAO2gJAAAAAAAAaAkAAAAAAAABAAAAM2gJAAAAAAAAaAkAAAAAAAABAAAAMmgJAAAAAAAAaAkAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAaAkAAAAAAABoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"right_delete",
					null,
					"AQAAAGgJAAAAAAAAaAkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAaAkAAAAAAABoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAGgJAAAAAAAAaQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAkAAAAAAABoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"left_delete",
					null,
					"AQAAAGgJAAAAAAAAaAkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAaQkAAAAAAABpCQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAGgJAAAAAAAAaQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAkAAAAAAABoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAGIJAAAAAAAAYgkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "60"
					},
					"AgAAAGIJAAAAAAAAYwkAAAAAAAAAAAAAYwkAAAAAAABkCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgkAAAAAAABiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"left_delete",
					null,
					"AQAAAF8JAAAAAAAAXwkAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAYAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "92"
					},
					"AgAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"right_delete",
					null,
					"AQAAAGEJAAAAAAAAYQkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					2,
					"left_delete",
					null,
					"AgAAAGAJAAAAAAAAYAkAAAAAAAABAAAAMl8JAAAAAAAAXwkAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "40"
					},
					"AgAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"left_delete",
					null,
					"AQAAAGIJAAAAAAAAYgkAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "15"
					},
					"AgAAAGIJAAAAAAAAYwkAAAAAAAAAAAAAYwkAAAAAAABkCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgkAAAAAAABiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"left_delete",
					null,
					"AQAAAGMJAAAAAAAAYwkAAAAAAAABAAAANQ",
					"AQAAAAAAAAABAAAAZAkAAAAAAABkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AQAAAGMJAAAAAAAAZAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"left_delete",
					null,
					"AQAAAF8JAAAAAAAAXwkAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAYAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "90"
					},
					"AgAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"left_delete",
					null,
					"AQAAAGAJAAAAAAAAYAkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					2,
					"left_delete",
					null,
					"AgAAAGMJAAAAAAAAYwkAAAAAAAABAAAAOWIJAAAAAAAAYgkAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAZAkAAAAAAABkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "24"
					},
					"AgAAAGIJAAAAAAAAYwkAAAAAAAAAAAAAYwkAAAAAAABkCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgkAAAAAAABiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"left_delete",
					null,
					"AQAAAGMJAAAAAAAAYwkAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAZAkAAAAAAABkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAGMJAAAAAAAAZAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwkAAAAAAABjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAF8JAAAAAAAAXwkAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAAYAkAAAAAAABgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "20"
					},
					"AgAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					2,
					"left_delete",
					null,
					"AgAAAGAJAAAAAAAAYAkAAAAAAAABAAAAMF8JAAAAAAAAXwkAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "12"
					},
					"AgAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					2,
					"left_delete",
					null,
					"AgAAAGAJAAAAAAAAYAkAAAAAAAABAAAAMl8JAAAAAAAAXwkAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "80"
					},
					"AgAAAF8JAAAAAAAAYAkAAAAAAAAAAAAAYAkAAAAAAABhCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwkAAAAAAABfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"left_delete",
					null,
					"AQAAAGAJAAAAAAAAYAkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAYQkAAAAAAABhCQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgJAAAAAAAAqQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAkAAAAAAACoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADREAAAaW1wb3J0ICogYXMgb3MgZnJvbSAnb3MnOwppbXBvcnQgKiBhcyBzdGQgZnJvbSAnc3RkJzsKaW1wb3J0IHsKICBlc2NhcGUsCiAgcXVvdGUsCiAgaXNPYmplY3QsCiAgZGVmaW5lLAogIGdldENsYXNzTmFtZSwKICBtYXBPYmplY3QsCiAgZ2V0c2V0LAogIGdldHRlcnNldHRlciwKICBvbmNlLAogIG1lbW9pemUKfSBmcm9tICcuLi9saWIvdXRpbC5qcyc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwppbXBvcnQgKiBhcyB4bWwgZnJvbSAneG1sJzsKaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnOwppbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnOwppbXBvcnQgeyBQb2ludGVyIH0gZnJvbSAncG9pbnRlcic7CmltcG9ydCAqIGFzIGRlZXAgZnJvbSAnZGVlcCc7CmltcG9ydCBDb25zb2xlIGZyb20gJy4uL2xpYi9jb25zb2xlLmpzJzsKaW1wb3J0IHsKICBub2RlVHlwZXMsCiAgUGFyc2VyLAogIE5vZGUsCiAgTm9kZUxpc3QsCiAgTmFtZWROb2RlTWFwLAogIEVsZW1lbnQsCiAgRG9jdW1lbnQsCiAgQXR0ciwKICBUZXh0LAogIFRva2VuTGlzdCwKICBGYWN0b3J5Cn0gZnJvbSAnLi4vbGliL2RvbS5qcyc7CmltcG9ydCB7IEltbXV0YWJsZVhQYXRoLCBNdXRhYmxlWFBhdGgsIGJ1aWxkWFBhdGgsIHBhcnNlWFBhdGgsIFhQYXRoIH0gZnJvbSAnLi4vbGliL3hwYXRoLmpzJzsKaW1wb3J0IFJFUEwgZnJvbSAnLi4vbGliL3JlcGwuanMnOwoKZnVuY3Rpb24gbWFpbiguLi5hcmdzKSB7CiAgZ2xvYmFsVGhpcy5jb25zb2xlID0gbmV3IENvbnNvbGUocHJvY2Vzcy5zdGRvdXQsIHsKICAgIGluc3BlY3RPcHRpb25zOiB7CiAgICAgIGNvbG9yczogdHJ1ZSwKICAgICAgZGVwdGg6IDEwLAogICAgICBzdHJpbmdCcmVha05ld2xpbmU6IGZhbHNlLAogICAgICBtYXhBcnJheUxlbmd0aDogMTAwMDAsCiAgICAgIGNvbXBhY3Q6IGZhbHNlLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IEluZmluaXR5LAogICAgICBjdXN0b21JbnNwZWN0OiB0cnVlIC8qLAogICAgICBoaWRlS2V5czogW1N5bWJvbC5pdGVyYXRvciwgU3ltYm9sLmZvcigncXVpY2tqcy5pbnNwZWN0LmN1c3RvbScpLCBTeW1ib2wuaW5zcGVjdF0qLwogICAgfQogIH0pOwogIGNvbnN0IGRvbSA9IHsgbm9kZVR5cGVzLCBQYXJzZXIsIE5vZGUsIE5vZGVMaXN0LCBOYW1lZE5vZGVNYXAsIEVsZW1lbnQsIERvY3VtZW50LCBBdHRyLCBUZXh0LCBUb2tlbkxpc3QsIEZhY3RvcnkgfTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsKICAgIG9zLAogICAgc3RkLAogICAgLi4ueyBlc2NhcGUsIHF1b3RlLCBpc09iamVjdCwgZGVmaW5lLCBnZXRDbGFzc05hbWUsIG1hcE9iamVjdCwgZ2V0c2V0LCBnZXR0ZXJzZXR0ZXIsIG1lbW9pemUgfSwKICAgIHhtbCwKICAgIHBhdGgsCiAgICBQb2ludGVyLAogICAgZGVlcCwKICAgIC4uLmRvbSwKICAgIGRvbSwKICAgIC4uLnsgSW1tdXRhYmxlWFBhdGgsIE11dGFibGVYUGF0aCwgYnVpbGRYUGF0aCwgcGFyc2VYUGF0aCwgWFBhdGggfQogIH0pOwoKICBsZXQgZmlsZSA9IGFyZ3NbMF0gPz8gJy4uLy4uLy4uL2FuLXRyb25pY3MvZWFnbGUvNTU1LU9zY2lsbGF0b3Iuc2NoJzsKCiAgbGV0IGJhc2UgPSBwYXRoLmJhc2VuYW1lKGZpbGUsIHBhdGguZXh0bmFtZShmaWxlKSk7CgogIGxldCBkYXRhID0gc3RkLmxvYWRGaWxlKGZpbGUsICd1dGYtOCcpOwogIGxldCBzdGFydCA9IERhdGUubm93KCk7CiAgbGV0IGVuZCA9IERhdGUubm93KCk7CiAgY29uc29sZS5sb2coYHBhcnNpbmcgdG9vayAke2VuZCAtIHN0YXJ0fW1zYCk7CgogIHN0YXJ0ID0gRGF0ZS5ub3coKTsKCiAgLyogIGxldCByZXN1bHQgPSB4bWwucmVhZChkYXRhLCBmaWxlLCBmYWxzZSk7CiAgbGV0IGRvYz1uZXcgRG9jdW1lbnQocmVzdWx0WzBdKTsqLwoKICBsZXQgcGFyc2VyID0gbmV3IFBhcnNlcigpOwogIGxldCBkb2MgPSBwYXJzZXIucGFyc2VGcm9tU3RyaW5nKGRhdGEsIGZpbGUsIHsgdG9sZXJhbnQ6IHRydWUgfSk7CgogIGxldCB3YWxrZXIgPSBkb2MuY3JlYXRlVHJlZVdhbGtlcihkb2MuYm9keSk7CgogIGNvbnNvbGUubG9nKCd3YWxrZXInLCB3YWxrZXIpOwoKICBsZXQgcmF3RG9jID0gTm9kZS5yYXcoZG9jKTsKICBPYmplY3QuYXNzaWduKGdsb2JhbFRoaXMsIHsgcmF3RG9jLCBkb2MgfSk7CgogIC8vY29uc29sZS5sb2coJ3Jhd0RvYycsIGluc3BlY3QocmF3RG9jLCB7IGRlcHRoOiA0LCBjb21wYWN0OiBmYWxzZSB9KSk7CgogIGZzLndyaXRlRmlsZVN5bmMoJ291dHB1dC54bWwnLCB4bWwud3JpdGUocmF3RG9jKSk7CgogIGNvbnNvbGUubG9nKCdkb2MnLCBpbnNwZWN0KGRvYywgeyBkZXB0aDogNCwgY29tcGFjdDogZmFsc2UgfSkpOwoKICBsZXQgaGlzdDsKICBnbG9iYWxUaGlzLmZzID0gZnM7CgogIGxldCByZXBsID0gbmV3IFJFUEwoJ1x4MWJbMzg7Mjs4MDsyMDA7MjU1bScrcGF0aC5iYXNlbmFtZShwcm9jZXNzLmFyZ3ZbMV0sICcuanMnKS5yZXBsYWNlKC90ZXN0Xy8sICcnKSsnIFx4MWJbMG0nLCBmYWxzZSk7CiAgcmVwbC5zaG93ID0gcmVwbC5wcmludEZ1bmN0aW9uKCguLi5hcmdzKSA9PiBjb25zb2xlLmxvZyguLi5hcmdzKSk7CiAgcmVwbC5oaXN0b3J5TG9hZChoaXN0KTsKICByZXBsLnJ1bigpOwoKICBsZXQgY291bnQgPSAwOwoKICBpZigwKQogICAgUmVjdXJzZShkb2MsIChub2RlLCBzdGFjaykgPT4gewogICAgICBjb25zdCByYXcgPSBOb2RlLnJhdyhub2RlKTsKICAgICAgY291bnQrKzsKICAgICAgaWYobm9kZS5ub2RlVHlwZSAhPSBub2RlLkVMRU1FTlRfTk9ERSAmJiBub2RlLm5vZGVUeXBlICE9IG5vZGUuRE9DVU1FTlRfTk9ERSkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZihyYXcuY2hpbGRyZW4pIHsKICAgICAgICBsZXQgY2wgPSBub2RlLmNoaWxkcmVuOwogICAgICAgIGlmKHJhdy5jaGlsZHJlblswXSkgewogICAgICAgICAgbGV0IHkgPSBjbC5wYXRoOwogICAgICAgICAgbGV0IGVsbSA9IGNsWzBdOwogICAgICAgICAgaWYoY2wubGVuZ3RoKSB7CiAgICAgICAgICAgIGlmKGVsbSkgewogICAgICAgICAgICAgIC8qICBpZihpc09iamVjdChlbG0pICYmICd0YWdOYW1lJyBpbiBlbG0pIGNvbnNvbGUubG9nKCdlbG0nLCBlbG0udGFnTmFtZSwgZWxtLnBhdGgpOyBlbHNlICovCiAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZygnZWxtJywgZWxtKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZihyYXcuYXR0cmlidXRlcykgewogICAgICAgIGxldCBhbCA9IG5vZGUuYXR0cmlidXRlczsKICAgICAgICBsZXQgeiA9IGFsLnBhdGg7CiAgICAgICAgbGV0IGF0ID0gYWxbT2JqZWN0LmtleXMocmF3LmF0dHJpYnV0ZXMpWzBdXTsKICAgICAgICBpZihhdCkgewogICAgICAgICAgbGV0IHggPSBhdC5wYXRoOwogICAgICAgIH0KICAgICAgfQogICAgfSk7CgogIGZ1bmN0aW9uIFJlY3Vyc2Uobm9kZSwgZm4sIHN0YWNrID0gW10pIHsKICAgIGlmKGlzT2JqZWN0KG5vZGUpKSB7CiAgICAgIGlmKGlzT2JqZWN0KG5vZGUuY2hpbGRyZW4pKQogICAgICAgIGZvcihsZXQgY2hpbGQgb2Ygbm9kZS5jaGlsZHJlbikgewogICAgICAgICAgUmVjdXJzZShjaGlsZCwgZm4sIFsuLi5zdGFjaywgbm9kZV0pOwogICAgICAgIH0KICAgICAgaWYoaXNPYmplY3Qobm9kZS5hdHRyaWJ1dGVzKSkgewogICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSAvKk5vZGUucmF3KG5vZGUpPy5hdHRyaWJ1dGVzID8/Ki8gbm9kZS5hdHRyaWJ1dGVzOwogICAgICAgIGZvcihsZXQgYXR0ciBvZiAvKk5vZGUucmF3KG5vZGUpLiovIGF0dHJpYnV0ZXMpIHsKICAgICAgICAgIFJlY3Vyc2UoYXR0ciwgZm4sIFsuLi5zdGFjaywgbm9kZV0pOwogICAgICAgICAgLy9jb25zb2xlLmxvZygnQXR0cicsIGF0dHIsIE5vZGUucGF0aChhdHRyKSk7CiAgICAgICAgfSAvL1JlY3Vyc2UoeyBuYW1lOiBhdHRyLCB2YWx1ZTphdHRyaWJ1dGVzW2F0dHJdLFtTeW1ib2wudG9TdHJpbmdUYWddOiAnQXR0cicsIF9fcHJvdG9fXzogQXR0ci5wcm90b3R5cGUgfSwgZm4sIFsuLi5zdGFjaywgbm9kZV0pOwogICAgICB9CiAgICB9CiAgICBmbihub2RlLCBzdGFjayk7CiAgfQogIGVuZCA9IERhdGUubm93KCk7CgogIHJlcGwucHJpbnRTdGF0dXMoYHdhbGtpbmcgdG9vayAke2VuZCAtIHN0YXJ0fW1zICgke2NvdW50fSBub2RlcylgKTsKICBzdGQuZ2MoKTsKfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7CiAgc3RkLmV4aXQoMSk7Cn0KAAAAAAAAAADhEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAgIAAAAAAAACggAAAAAAAAAAAAAuAcAAAAAAAC6BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAgAAAAAAAC4BwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 33505,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					23,
					3,
					"left_delete",
					null,
					"AwAAAMQxAAAAAAAAxDEAAAAAAAAsAAAAICBjb25zb2xlLmxvZygnbW9kaWZpZXInLCB7IGdzOiBncyArICcnIH0pOwrDMQAAAAAAAMMxAAAAAAAAAQAAAArCMQAAAAAAAMIxAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAxDEAAAAAAADwMQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-tree-walker.c",
			"settings":
			{
				"buffer_size": 17131,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJQXAAAAAAAAlRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlBcAAAAAAACUFwAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAJUXAAAAAAAAlhcAAAAAAAAAAAAA1BcAAAAAAADYFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlRcAAAAAAACVFwAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJYXAAAAAAAAlxcAAAAAAAAAAAAAlxcAAAAAAACZFwAAAAAAAAAAAACZFwAAAAAAAJsXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlhcAAAAAAACWFwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"paste",
					null,
					"AQAAAJsXAAAAAAAAxRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmxcAAAAAAACbFwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMUXAAAAAAAAxhcAAAAAAAAAAAAAxhcAAAAAAADKFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxRcAAAAAAADFFwAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAJsXAAAAAAAAnBcAAAAAAAAAAAAAnBcAAAAAAACgFwAAAAAAAAAAAADLFwAAAAAAAMsXAAAAAAAABAAAACAgICA",
					"AQAAAAAAAAABAAAAmxcAAAAAAACbFwAAAAAAAAAAAAAAAEhA"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "JSValue"
					},
					"BwAAAJsXAAAAAAAAnBcAAAAAAAAAAAAAnBcAAAAAAACdFwAAAAAAAAAAAACdFwAAAAAAAJ4XAAAAAAAAAAAAAJ4XAAAAAAAAnxcAAAAAAAAAAAAAnxcAAAAAAACgFwAAAAAAAAAAAACgFwAAAAAAAKEXAAAAAAAAAAAAAKEXAAAAAAAAohcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmxcAAAAAAACbFwAAAAAAAAAAAAAAAEhA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " argsw"
					},
					"BgAAAKIXAAAAAAAAoxcAAAAAAAAAAAAAoxcAAAAAAACkFwAAAAAAAAAAAACkFwAAAAAAAKUXAAAAAAAAAAAAAKUXAAAAAAAAphcAAAAAAAAAAAAAphcAAAAAAACnFwAAAAAAAAAAAACnFwAAAAAAAKgXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAohcAAAAAAACiFwAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgXAAAAAAAAqRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqBcAAAAAAACoFwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					2,
					"left_delete",
					null,
					"AgAAAKgXAAAAAAAAqBcAAAAAAAABAAAAIKcXAAAAAAAApxcAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAqRcAAAAAAACpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAKcXAAAAAAAAqBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxcAAAAAAACnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAKcXAAAAAAAApxcAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAqBcAAAAAAACoFwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKcXAAAAAAAAqRcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApxcAAAAAAACnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKkXAAAAAAAAqhcAAAAAAAAAAAAAqhcAAAAAAACrFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqRcAAAAAAACpFwAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKsXAAAAAAAArBcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqxcAAAAAAACrFwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAKwXAAAAAAAArhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArBcAAAAAAACsFwAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK0XAAAAAAAArhcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArRcAAAAAAACtFwAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"right_delete",
					null,
					"AQAAAK4XAAAAAAAArhcAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAArhcAAAAAAACuFwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "ret,"
					},
					"BAAAAK4XAAAAAAAArxcAAAAAAAAAAAAArxcAAAAAAACwFwAAAAAAAAAAAACwFwAAAAAAALEXAAAAAAAAAAAAALEXAAAAAAAAshcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArhcAAAAAAACuFwAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALIXAAAAAAAAsxcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAshcAAAAAAACyFwAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					5,
					"right_delete",
					null,
					"BQAAALMXAAAAAAAAsxcAAAAAAAABAAAACrMXAAAAAAAAsxcAAAAAAAABAAAAILMXAAAAAAAAsxcAAAAAAAABAAAAILMXAAAAAAAAsxcAAAAAAAABAAAAILMXAAAAAAAAsxcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAsxcAAAAAAACzFwAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAN0XAAAAAAAA3hcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3RcAAAAAAADdFwAAAAAAAP///////+9/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN4XAAAAAAAA3xcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3hcAAAAAAADeFwAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "this_val"
					},
					"CAAAAN8XAAAAAAAA4BcAAAAAAAAAAAAA4BcAAAAAAADhFwAAAAAAAAAAAADhFwAAAAAAAOIXAAAAAAAAAAAAAOIXAAAAAAAA4xcAAAAAAAAAAAAA4xcAAAAAAADkFwAAAAAAAAAAAADkFwAAAAAAAOUXAAAAAAAAAAAAAOUXAAAAAAAA5hcAAAAAAAAAAAAA5hcAAAAAAADnFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3xcAAAAAAADfFwAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " };"
					},
					"AwAAAOcXAAAAAAAA6BcAAAAAAAAAAAAA6BcAAAAAAADpFwAAAAAAAAAAAADpFwAAAAAAAOoXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5xcAAAAAAADnFwAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAB8YAAAAAAAAIBgAAAAAAAAAAAAAIBgAAAAAAAAgGAAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAHxgAAAAAAAAgGAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					2,
					"left_delete",
					null,
					"AgAAACMYAAAAAAAAIxgAAAAAAAADAAAAcmV0IhgAAAAAAAAiGAAAAAAAAAEAAAAm",
					"AQAAAAAAAAABAAAAIxgAAAAAAAAmGAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "ars"
					},
					"AwAAACIYAAAAAAAAIxgAAAAAAAAAAAAAIxgAAAAAAAAkGAAAAAAAAAAAAAAkGAAAAAAAACUYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIhgAAAAAAAAiGAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"left_delete",
					null,
					"AQAAACQYAAAAAAAAJBgAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAJRgAAAAAAAAlGAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "gs"
					},
					"AgAAACQYAAAAAAAAJRgAAAAAAAAAAAAAJRgAAAAAAAAmGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJBgAAAAAAAAkGAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "\nJS_FreeValue"
					},
					"DgAAACgYAAAAAAAAKRgAAAAAAAAAAAAAKRgAAAAAAAAtGAAAAAAAAAAAAAAtGAAAAAAAAC4YAAAAAAAAAAAAAC4YAAAAAAAALxgAAAAAAAAAAAAALxgAAAAAAAAwGAAAAAAAAAAAAAAwGAAAAAAAADEYAAAAAAAAAAAAADEYAAAAAAAAMhgAAAAAAAAAAAAAMhgAAAAAAAAzGAAAAAAAAAAAAAAzGAAAAAAAADQYAAAAAAAAAAAAADQYAAAAAAAANRgAAAAAAAAAAAAANRgAAAAAAAA2GAAAAAAAAAAAAAA2GAAAAAAAADcYAAAAAAAAAAAAADcYAAAAAAAAOBgAAAAAAAAAAAAAOBgAAAAAAAA5GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKBgAAAAAAAAoGAAAAAAAAP///////+9/"
				],
				[
					63,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADkYAAAAAAAAOxgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAORgAAAAAAAA5GAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAADoYAAAAAAAAOxgAAAAAAAAAAAAAOxgAAAAAAAA8GAAAAAAAAAAAAAA8GAAAAAAAAD0YAAAAAAAAAAAAAD0YAAAAAAAAPhgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOhgAAAAAAAA6GAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " args"
					},
					"BQAAAD4YAAAAAAAAPxgAAAAAAAAAAAAAPxgAAAAAAABAGAAAAAAAAAAAAABAGAAAAAAAAEEYAAAAAAAAAAAAAEEYAAAAAAAAQhgAAAAAAAAAAAAAQhgAAAAAAABDGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPhgAAAAAAAA+GAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEMYAAAAAAAARRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQxgAAAAAAABDGAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAEQYAAAAAAAARRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBgAAAAAAABEGAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"left_delete",
					null,
					"AQAAAEQYAAAAAAAARBgAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAARRgAAAAAAABFGAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAEQYAAAAAAAARRgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARBgAAAAAAABEGAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAEYYAAAAAAAARhgAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAARxgAAAAAAABHGAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAEYYAAAAAAAARxgAAAAAAAAAAAAARxgAAAAAAABIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARhgAAAAAAABGGAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEgYAAAAAAAASRgAAAAAAAAAAAAASRgAAAAAAABNGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASBgAAAAAAABIGAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"cut",
					null,
					"AQAAACkYAAAAAAAAKRgAAAAAAAAgAAAAICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMV0pOwo",
					"AQAAAAAAAAABAAAAKRgAAAAAAABJGAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					2,
					"paste",
					null,
					"AgAAACkYAAAAAAAASRgAAAAAAAAAAAAASRgAAAAAAABpGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKRgAAAAAAAApGAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AwAAAEQYAAAAAAAARRgAAAAAAAAAAAAARRgAAAAAAABFGAAAAAAAAAEAAAAxaRgAAAAAAABpGAAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAARBgAAAAAAABFGAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"left_delete",
					null,
					"AQAAAGgYAAAAAAAAaBgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAaRgAAAAAAABpGAAAAAAAAAAAAAAAgHZA"
				],
				[
					117,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAShgAAAAAAABKGAAAAAAAAAAAAAAAAChA"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/doc",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/usr/lib/gcc/x86_64-linux-gnu/11/include/stdatomic.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/flexbox-intrinsic-sizing-horiz-1-ref.json",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/usr/i686-w64-mingw32/include/io.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/Makefile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/readlink.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/perf_hooks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/bnflexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stack.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/usr/include/zlib.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Niji.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/wasmedge-quickjs/example_js/es6_module_demo/c.",
		"/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/test-repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c.structs.c"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"'\\['",
			"lastElementChild",
			"get body",
			"get path",
			"parentNode.set",
			"ownerElement.set",
			"TextCache",
			"class Text",
			"appendChild",
			"class Text",
			"createTree",
			"class Text",
			"createTextNode",
			"'raw'",
			"GetNode",
			"new Text",
			"^\\s*f*printf",
			"^\\s*console",
			"console",
			"^\\s*console",
			"GetNode",
			"NEXT_NODE",
			"createTree",
			"'walk'",
			"modifier",
			"createTree",
			"GetNode",
			"createTree",
			"new Text",
			"js_tree_walker_next",
			"Document",
			"nodeName",
			"nodeType",
			"Comment",
			"nodeType",
			"weakAssign",
			"Symbol.iterator",
			"tokenModifiers",
			"TokenList.modifiers",
			"TokenList",
			"gettersetter",
			"isFunction",
			"getter",
			"TokenList",
			"\\.i",
			"\\.i ",
			"Node.constructor",
			"inspectSymbol",
			"Node.prototype",
			"'doc'",
			"inspect",
			"js_object_tmpmark",
			"js_object_tmpmark_clear",
			"debug_xml",
			"printf",
			"xml.write",
			"ParseOpt",
			"js_array_to",
			"\"meta\"",
			"xml_write_text",
			"QUOTE",
			"parse_close",
			"parse_getc",
			"parse_close",
			"parse_getc",
			"parse_close",
			"flat",
			"//\\s*(xml_debug)",
			"xml_debug",
			"printf",
			"yield_next",
			"out->idx",
			"element =",
			"yield_",
			"yield_push",
			"yield_next",
			"element =",
			"yield_next",
			"232",
			"\"mismatch",
			"check_func",
			"fork",
			"USE_SPAWN",
			"class NodeList",
			"NodeList",
			"class Element",
			"new REPL",
			"took",
			"historySave",
			"once",
			"history",
			"inspect",
			"waitRead",
			"setReadHa",
			"function read",
			"read\\(",
			"js_readable_callback",
			"writable_unlock",
			"js_writable_(start|write|close|abort)",
			"GET_READER:",
			"\"getRead",
			"FUNC_GET_WRITER",
			"FUNC_CLOSE",
			"writable_close",
			"writable_size",
			"reader_passthrough",
			"readable_close",
			"readable_enqueue",
			"writable_write",
			"struct streamreader",
			"js_input",
			"chunk_arraybuf",
			"JS_NewObjectProtoClass",
			"READER_CLOSED",
			"readable_abort",
			"READABLE_CANCEL",
			"READABLE_CLOSE",
			"writer_abort",
			"stream_",
			"stream_lock_rd",
			"stream_unlock_..",
			"js_stream_data",
			"writable_get_writeer",
			"readable_at",
			"writable_get_writer",
			"writable_(un|)lock_..",
			"Writer\\* rd",
			"Writer\\*"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"Text.store",
			"Tokens",
			"tokenModifiers",
			"xml_debug",
			"\\1",
			"xml_debug",
			"WRITABLE_GET_WRITER",
			"WRITABLE_CLOSE",
			"struct stream_reader",
			"readable_cancel",
			"READABLE_CANCEL",
			"readable_unlock",
			"writable_get_writer",
			"writable_\\1lock",
			"READABLE_",
			"writ",
			"FUNC_CLOSE",
			"js_reader_method",
			"js_writer_method",
			"js_stream_method",
			"STREAM_LOCKED",
			"->reader",
			"\"StreamReader",
			"Reader",
			"METHOD_",
			"array",
			"funcs.array",
			"js_resolve_functions",
			"js_resolvefunctions",
			"funcs[1]",
			"funcs[0]",
			"js_resolvingfunctions_free",
			"js_resolvingfunctions_ree",
			"length",
			"Chunk",
			"loc",
			"prevLength",
			"prevOffset",
			"compact(\\1)",
			"js_location_create",
			"lexer_token(",
			"token_lex(",
			"LOCATION_PROP_CHAROFFSET",
			"loc->",
			"\\1_release",
			"token",
			"ALLOC_PTR",
			"ALLOC_BLOCK(p)",
			"ALLOC_BLOCK_SIZE",
			"",
			"const char* str\\1",
			"void* p,",
			"size_t size)",
			"JSRuntime* rt,",
			"JSContext\\* ctx,",
			";",
			" &(((struct alloc_block*)p)[-1]);",
			"add_to_list",
			"",
			"DEFINES_H",
			"int",
			"log",
			"out",
			"array_",
			"[%p]",
			"pthread_self()",
			"js_token_data2(ctx,",
			"js_lexer_data2(ctx,",
			"\\1//console",
			"inspectSymbol",
			"parent",
			"gettersetter",
			"ELEMENT_NODE",
			"parent",
			"attributes",
			"Node.prototype.",
			"\\1static \\2 = \\3;",
			"const raw = Node.raw(this);",
			"\\1.set\\(\\2\\)",
			"\\1.get\\(this\\)",
			"ownerElement.get\\(this\\)",
			"rawNode.get\\(this\\)",
			"inspectSymbol",
			"CSV",
			"\\1//",
			"args->c",
			"args->",
			"\\1//\\2",
			"METHOD_VALUES",
			"pr->",
			"property",
			"size[0]",
			"s->",
			"(sock)->",
			", s,",
			"(sock).",
			", *s,",
			"s->",
			"obj",
			"js_socket_data(",
			"obj",
			"loc",
			"YIELD_",
			"if",
			"\\1//\\2",
			"",
			"\\1//\\2",
			"js_pointer_free_func",
			"BITFIELD_SET",
			"fd",
			"misc.IN_",
			"fd",
			"wd",
			"JSValueConst\\1",
			"s",
			"queue_alloc(",
			"queue_alloc",
			"rpt",
			"js_return_",
			"tmp",
			"repeater_execute",
			"queue_item",
			"linked_item",
			"queue_",
			"rpt",
			"Repeater",
			"resolvable_item",
			"resolvable_"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3140,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
							"function_name_status_row": 25,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									1017,
									1040
								],
								[
									1413,
									1437
								],
								[
									1713,
									1719
								],
								[
									1724,
									1759
								],
								[
									2038,
									2066
								],
								[
									2499,
									2503
								],
								[
									2508,
									2556
								],
								[
									2916,
									2926
								],
								[
									2968,
									2984
								],
								[
									3102,
									3121
								],
								[
									3216,
									3235
								],
								[
									3357,
									3373
								],
								[
									3474,
									3490
								],
								[
									3639,
									3654
								],
								[
									3820,
									3837
								],
								[
									4116,
									4137
								],
								[
									4313,
									4330
								],
								[
									4518,
									4533
								],
								[
									4555,
									4573
								],
								[
									4749,
									4776
								],
								[
									5130,
									5147
								],
								[
									5435,
									5467
								],
								[
									6248,
									6252
								],
								[
									6320,
									6329
								],
								[
									6391,
									6405
								],
								[
									6453,
									6464
								],
								[
									6835,
									6847
								],
								[
									6931,
									6962
								],
								[
									7392,
									7409
								],
								[
									7971,
									7975
								],
								[
									8017,
									8050
								],
								[
									8061,
									8064
								],
								[
									8109,
									8125
								],
								[
									8269,
									8303
								],
								[
									8314,
									8317
								],
								[
									8341,
									8347
								],
								[
									8369,
									8384
								],
								[
									8618,
									8626
								],
								[
									8631,
									8654
								],
								[
									8685,
									8704
								],
								[
									8757,
									8773
								],
								[
									8821,
									8851
								],
								[
									9084,
									9116
								],
								[
									9355,
									9398
								],
								[
									9662,
									9680
								],
								[
									9729,
									9736
								],
								[
									10241,
									10249
								],
								[
									10301,
									10311
								],
								[
									10766,
									10800
								],
								[
									10876,
									10892
								],
								[
									10941,
									10968
								],
								[
									11127,
									11159
								],
								[
									11641,
									11659
								],
								[
									11793,
									11805
								],
								[
									11843,
									11855
								],
								[
									11871,
									11881
								],
								[
									11978,
									11987
								],
								[
									12019,
									12037
								],
								[
									12136,
									12157
								],
								[
									12221,
									12239
								],
								[
									12713,
									12727
								],
								[
									12789,
									12796
								],
								[
									12814,
									12838
								],
								[
									13011,
									13030
								],
								[
									13155,
									13171
								],
								[
									13252,
									13266
								],
								[
									13307,
									13320
								],
								[
									13364,
									13379
								],
								[
									13410,
									13424
								],
								[
									13990,
									14004
								],
								[
									14157,
									14180
								],
								[
									14239,
									14262
								],
								[
									14338,
									14342
								],
								[
									14444,
									14466
								],
								[
									14706,
									14714
								],
								[
									14760,
									14778
								],
								[
									14817,
									14830
								],
								[
									14857,
									14876
								],
								[
									14915,
									14928
								],
								[
									14962,
									14980
								],
								[
									15019,
									15032
								],
								[
									15061,
									15076
								],
								[
									15134,
									15155
								],
								[
									15187,
									15200
								],
								[
									15234,
									15256
								],
								[
									15300,
									15325
								],
								[
									15357,
									15370
								],
								[
									15432,
									15447
								],
								[
									15497,
									15513
								],
								[
									15633,
									15640
								],
								[
									17925,
									17933
								],
								[
									17954,
									17970
								],
								[
									17994,
									18002
								],
								[
									18022,
									18050
								],
								[
									18101,
									18123
								],
								[
									18208,
									18228
								],
								[
									18288,
									18304
								],
								[
									18401,
									18416
								],
								[
									18453,
									18468
								],
								[
									18544,
									18554
								],
								[
									19002,
									19010
								],
								[
									19100,
									19104
								],
								[
									19122,
									19145
								],
								[
									19309,
									19319
								],
								[
									19507,
									19525
								],
								[
									19575,
									19594
								],
								[
									19636,
									19646
								],
								[
									19709,
									19720
								],
								[
									19757,
									19768
								],
								[
									19839,
									19851
								],
								[
									20093,
									20097
								],
								[
									20188,
									20192
								],
								[
									20251,
									20274
								],
								[
									20529,
									20540
								],
								[
									20563,
									20577
								],
								[
									20646,
									20657
								],
								[
									20682,
									20696
								],
								[
									20811,
									20821
								],
								[
									20852,
									20860
								],
								[
									20876,
									20891
								],
								[
									20922,
									20930
								],
								[
									20946,
									20956
								],
								[
									21184,
									21199
								],
								[
									21226,
									21230
								],
								[
									21253,
									21257
								],
								[
									21276,
									21280
								],
								[
									21429,
									21436
								],
								[
									21454,
									21477
								],
								[
									21600,
									21611
								],
								[
									21644,
									21658
								],
								[
									21720,
									21733
								],
								[
									21771,
									21787
								],
								[
									21831,
									21841
								],
								[
									21865,
									21873
								],
								[
									21906,
									21921
								],
								[
									21945,
									21953
								],
								[
									22117,
									22133
								],
								[
									22164,
									22171
								],
								[
									22194,
									22198
								],
								[
									22217,
									22224
								],
								[
									22385,
									22394
								],
								[
									22399,
									22432
								],
								[
									22522,
									22533
								],
								[
									22565,
									22579
								],
								[
									22648,
									22661
								],
								[
									22690,
									22706
								],
								[
									22750,
									22762
								],
								[
									22789,
									22797
								],
								[
									22820,
									22831
								],
								[
									22858,
									22866
								],
								[
									22892,
									22903
								],
								[
									22930,
									22938
								],
								[
									22961,
									22976
								],
								[
									23003,
									23011
								],
								[
									23048,
									23062
								],
								[
									23082,
									23095
								],
								[
									23243,
									23260
								],
								[
									23280,
									23293
								],
								[
									23445,
									23465
								],
								[
									23485,
									23498
								],
								[
									23632,
									23647
								],
								[
									23674,
									23701
								],
								[
									23721,
									23734
								],
								[
									23957,
									23966
								],
								[
									24032,
									24041
								],
								[
									24052,
									24070
								],
								[
									24092,
									24154
								],
								[
									24223,
									24255
								],
								[
									24351,
									24373
								],
								[
									24431,
									24474
								],
								[
									24662,
									24687
								],
								[
									24734,
									24764
								],
								[
									24782,
									24800
								],
								[
									25889,
									25924
								],
								[
									26047,
									26063
								],
								[
									26092,
									26113
								]
							],
							"symlist":
							[
								"  keyOf = (obj, value) =>",
								"  checkNode(node)",
								"Parser",
								"  parseFromString(str, file, ...rest)",
								"GetNode(obj, owner)",
								"Node",
								"  constructor(obj, parent, proto = Node.prototype)",
								"  get path()",
								"  get parentNode()",
								"  get parentElement()",
								"  get ownerDocument()",
								"  get childNodes()",
								"  get firstChild()",
								"  get lastChild()",
								"  get nextSibling()",
								"  get previousSibling()",
								"  appendChild(node)",
								"\t() =>",
								"\tvalue =>",
								"  insertBefore(node, refNode)",
								"  removeChild(node)",
								"  replaceChild(newChild, oldChild)",
								"Node",
								"  raw(node)",
								"  children(node)",
								"  owner(node)",
								"  parent(node)",
								"  hier(node, pred = node => true)",
								"({ nodeType }) =>",
								"Node",
								"MakeCache(ctor, store = ",
								"())",
								"\t(k, ...args) =>",
								"MakeCache2(ctor, store = ",
								"())",
								"  key =>",
								"\t(id, owner) =>",
								"NodeList",
								"  constructor(obj, owner)",
								"  isElement = prop =>",
								"  isList = prop =>",
								"  wrapElement = (value, prop) =>",
								"  get: (target, prop, receiver) =>",
								"  getOwnPropertyDescriptor: (target, prop) =>",
								"  ownKeys: target =>",
								"  prop =>",
								"NodeList",
								"  get path()",
								"NamedNodeMap(obj, owner)",
								"  isAttr = prop =>",
								"  wrapAttr = (value, prop) =>",
								"  get: (target, prop, receiver) =>",
								"  ownKeys: target =>",
								"NamedNodeMap",
								"NamedNodeMap",
								"  get path()",
								"  item(key)",
								"  setNamedItem(attr)",
								"  removeNamedItem(name)",
								"  getNamedItem(name)",
								"(acc, prop) =>",
								"Element",
								"  constructor(obj, parent)",
								"  get parentElement()",
								"  get attributes()",
								"  set tagName(v)",
								"  get tagName()",
								"  set nodeName(v)",
								"  get nodeName()",
								"  get children()",
								"  get childElementCount()",
								"  get firstElementChild()",
								"  n =>",
								"  get lastElementChild()",
								"  get id()",
								"  getAttribute(name)",
								"  attributes =>",
								"  getAttributeNames()",
								"  attributes =>",
								"  hasAttribute(name)",
								"  attributes =>",
								"  hasAttributes()",
								"  removeAttribute(name)",
								"  attributes =>",
								"  getAttributeNode(name)",
								"  setAttribute(name, value)",
								"  attributes =>",
								"(obj, owner) =>",
								"  attributes(elem)",
								"Element",
								"Document",
								"  constructor(obj)",
								"Document",
								"  createAttribute(name, value)",
								"  createElement(tagName)",
								"  createTextNode(text)",
								"  pred = (n, k) =>",
								"\t(n, k) =>",
								"\t(n, p) =>",
								"  get body()",
								"Document",
								"Attr",
								"  constructor(raw, owner)",
								"  get path()",
								"  get ownerElement()",
								"  get ownerDocument()",
								"  get name()",
								"  set name(v)",
								"  get value()",
								"  set value(v)",
								"Attr",
								"Text",
								"  constructor(key, owner)",
								"  get = () =>",
								"  set = value =>",
								"  get = () =>",
								"  set = value =>",
								"  get data()",
								"  value =>",
								"  get nodeValue()",
								"  value =>",
								"  toString()",
								"(key, owner) =>",
								"Text",
								"Node",
								"Text",
								"Comment",
								"  constructor(raw, owner)",
								"  get = () =>",
								"  set = value =>",
								"\t() =>",
								"\tvalue =>",
								"  get data()",
								"  value =>",
								"  get nodeValue()",
								"  value =>",
								"(node, owner) =>",
								"Comment",
								"Node",
								"Comment",
								"TokenList",
								"  constructor(owner, key = 'class')",
								"  get = () =>",
								"  set = value =>",
								"\t() =>",
								"\tvalue =>",
								"  get length()",
								"  value =>",
								"  get value()",
								"  value =>",
								"  item(index)",
								"  value =>",
								"  contains(token)",
								"  value =>",
								"  add(...tokens)",
								"(arr, set) =>",
								"  remove(...tokens)",
								"(arr, set) =>",
								"  toggle(token, force)",
								"(arr, set) =>",
								"  supports(token)",
								"  replace(oldToken, newToken)",
								"(arr, set) =>",
								"TokenList",
								"TokenList",
								"\t(container, i) =>",
								"Membrane(instance, obj, proto, wrapProp, wrapElement)",
								"  get: (target, prop, receiver) =>",
								"  has: (target, prop) =>",
								"  getOwnPropertyDescriptor: (target, prop) =>",
								"  getPrototypeOf: target =>",
								"  setPrototypeOf: (target, p) =>",
								"  ownKeys: target =>",
								"Factory(raw, owner, ctor)",
								"  isArray = arg =>",
								"  isAttributes = arg =>"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645093809.41,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/dom.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 26330,
						"regions":
						{
							"col_0000DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										20038,
										20048
									]
								],
								"scope": "col_0000DDFF"
							},
							"col_0000DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_0000DDFF_circle.png",
								"regions":
								[
									[
										20009,
										20009
									]
								],
								"scope": "col_gutter"
							},
							"col_00DDDDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										12589,
										12599
									]
								],
								"scope": "col_00DDDDFF"
							},
							"col_00DDDDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_00DDDDFF_circle.png",
								"regions":
								[
									[
										12554,
										12554
									]
								],
								"scope": "col_gutter"
							},
							"col_7070FCFF":
							{
								"flags": 16,
								"regions":
								[
									[
										25094,
										25116
									],
									[
										25499,
										25521
									]
								],
								"scope": "col_7070FCFF"
							},
							"col_7070FCFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_7070FCFF_circle.png",
								"regions":
								[
									[
										25077,
										25077
									],
									[
										25480,
										25480
									]
								],
								"scope": "col_gutter"
							},
							"col_B800EAFF":
							{
								"flags": 16,
								"regions":
								[
									[
										22047,
										22067
									]
								],
								"scope": "col_B800EAFF"
							},
							"col_B800EAFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_B800EAFF_circle.png",
								"regions":
								[
									[
										22027,
										22027
									]
								],
								"scope": "col_gutter"
							},
							"col_DD0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										5905,
										5915
									],
									[
										18813,
										18823
									],
									[
										21058,
										21068
									]
								],
								"scope": "col_DD0000FF"
							},
							"col_DD0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD0000FF_circle.png",
								"regions":
								[
									[
										5893,
										5893
									],
									[
										18801,
										18801
									],
									[
										21046,
										21046
									]
								],
								"scope": "col_gutter"
							},
							"col_DD00DDFF":
							{
								"flags": 16,
								"regions":
								[
									[
										12567,
										12577
									],
									[
										20021,
										20031
									]
								],
								"scope": "col_DD00DDFF"
							},
							"col_DD00DDFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD00DDFF_circle.png",
								"regions":
								[
									[
										12554,
										12554
									],
									[
										20009,
										20009
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								10136,
								10136
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 382,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645099015.36,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								3,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6615.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "tests/test_dom.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4325,
						"regions":
						{
							"col_50C8FFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										2398,
										2419
									]
								],
								"scope": "col_50C8FFFF"
							},
							"col_50C8FFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_50C8FFFF_circle.png",
								"regions":
								[
									[
										2393,
										2393
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								2040,
								2041
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 81,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645098597.78,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1124.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33505,
						"regions":
						{
						},
						"selection":
						[
							[
								24825,
								24846
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 881,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645090290.03,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 20734.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "quickjs-tree-walker.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 17131,
						"regions":
						{
						},
						"selection":
						[
							[
								4850,
								4850
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 182,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645090289.56,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3982.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.70781882123,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139713493134064)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752673856)":
	{
		"height": 0.0
	},
	"output.Protocol(140156677514432)":
	{
		"height": 0.0
	},
	"output.Protocol(140190208797904)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873537696)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"location",
				"location.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"CMakeLi",
				"CMakeLists.txt"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"js-u",
				"js-utils.h"
			],
			[
				"defines.h",
				"defines.h"
			],
			[
				"queue.c",
				"queue.c"
			],
			[
				"extend",
				"lib/extendArray.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"path.c",
				"path.c"
			],
			[
				"quickjs-sockets",
				"quickjs-sockets.c"
			],
			[
				"lexer",
				"quickjs-lexer.c"
			],
			[
				"buffer-ut",
				"buffer-utils.h"
			],
			[
				"ringbuf",
				"ringbuffer.h"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"quickjs-lexer.c",
				"quickjs-lexer.c"
			],
			[
				"quickjs-loc",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"buffer",
				"buffer-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"xpath.j",
				"lib/xpath.js"
			],
			[
				"predicate.h",
				"predicate.h"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"list.h",
				"~/Projects/plot-cv/quickjs/list.h"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"queue",
				"queue.c"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"test_wa",
				"tests/test_watch.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"tree-wa",
				"quickjs-tree-walker.c"
			],
			[
				"quick",
				"quickjs-xml.c"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"",
				"tests/test_xml.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"doxy",
				"Doxyfile"
			],
			[
				"Doxyfile",
				"Doxyfile"
			],
			[
				"interna",
				"quickjs-internal.h"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"child",
				"child-process.c"
			],
			[
				"qsort_r",
				"qsort_r.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"quicksj-misc",
				"quickjs-misc.c"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-mm",
				"quickjs-mmap.c"
			],
			[
				"quickjs-m",
				"quickjs-misc.c"
			],
			[
				"redicate.c",
				"predicate.c"
			],
			[
				"sockets.h",
				"quickjs-sockets.h"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"parser.js",
				"lib/parser.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"conso",
				"lib/console.js"
			],
			[
				"clang-f",
				".clang-format"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
