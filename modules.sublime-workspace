{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Throw",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_Set",
				"JS_SetPropertyStr"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"js_sys",
				"js_syscallerror_get"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_",
				"js_sockaddr_class_id"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewStringLen"
			],
			[
				"JS_",
				"JS_GetPropertyUint32"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"get",
				"getOwnPropertyNames"
			],
			[
				"JS_Thr",
				"JS_ThrowInternalError"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "‚Äî‚í∏‚Äì DeepIterator { ‚Ä¶ } ; ‚Äî type\n   ‚ìâ  DeepIterator ; ‚Äî typedef\n‚Äî‚í∏‚Äì deep_iterator_return { ‚Ä¶ } ; ‚Äî type\n‚Äî‚íª‚Äì js_deep_parseflags ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_thisflags ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_getflags ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_predicate ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_return ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_iterator_new ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_iterator_constructor ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_iterator_next ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_iterator_finalizer ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_iterator_iterator ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_iterator_tostring ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_find ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_select ( ) { ‚Ä¶ } ‚Äî function\n   ‚í°  js_deep_get ( ) ; ‚Äî function declaration\n‚Äî‚íª‚Äì js_deep_get2 ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_get ( ) { ‚Ä¶ } ‚Äî function\n   ‚í°  js_deep_set ( ) ; ‚Äî function declaration\n‚Äî‚íª‚Äì js_deep_set2 ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_set ( ) { ‚Ä¶ } ‚Äî function\n   ‚í°  js_deep_unset ( ) ; ‚Äî function declaration\n‚Äî‚íª‚Äì js_deep_unset2 ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_unset ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_flatten ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_pathof ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_foreach ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_equals ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_iterate ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_clone ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_call ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_deep_init ( ) { ‚Ä¶ } ‚Äî function\n   ‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object\n   ‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object",
			"settings":
			{
				"buffer_size": 1459,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					691,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAZDgAAICAg4pOCICBQUkVESUNBVEVfSCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrjigJMgcHJlZGljYXRlX2lkIHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIFR5cGVQcmVkaWNhdGUgOyDigJQgdHlwZWRlZgogICDik4kgIENoYXJzZXRQcmVkaWNhdGUgOyDigJQgdHlwZWRlZgogICDik4kgIFN0cmluZ1ByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgVW5hcnlQcmVkaWNhdGUgOyDigJQgdHlwZWRlZgogICDik4kgIEJpbmFyeVByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgQm9vbGVhblByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgUmVnRXhwUHJlZGljYXRlIDsg4oCUIHR5cGVkZWYKICAg4pOJICBQcm9wZXJ0eVByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgTWVtYmVyUHJlZGljYXRlIDsg4oCUIHR5cGVkZWYKICAg4pOJICBTaGlmdFByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgRnVuY3Rpb25QcmVkaWNhdGUgOyDigJQgdHlwZWRlZgrigJTikrjigJMgUHJlZGljYXRlIHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIFByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCuKAlOKTguKAkyBQUkVESUNBVEVfSU5JVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDikqEgIHByZWRpY2F0ZV9pcyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfY2FsbGFibGUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX2lkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV9ldmFsICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV9jYWxsICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV92YWx1ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfdHlwZW5hbWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX3Rvc3RyaW5nICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV90b3NvdXJjZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfcmVnZXhwX2NhcHR1cmUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX2ZyZWVfcnQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX3ZhbHVlcyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfY2xvbmUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX3JlZ2V4cF9jb21waWxlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV9yZWN1cnNpdmVfbnVtX2FyZ3MgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX2RpcmVjdF9udW1fYXJncyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfcHJlY2VkZW5jZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX3VuZGVmaW5lZCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX251bGwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIHByZWRpY2F0ZV9pc19ib29sICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfaW50ICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfb2JqZWN0ICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfc3RyaW5nICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfc3ltYm9sICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfYmlnX2Zsb2F0ICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfYmlnX2ludCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX2JpZ19kZWNpbWFsICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfZmxvYXQ2NCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX251bWJlciAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX3ByaW1pdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX2FsbCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX2Z1bmN0aW9uICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfYXJyYXkgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9jaGFyc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfdHlwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9pbnN0YW5jZW9mICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX3Byb3RvdHlwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9hZGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfc3ViICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX211bCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9kaXYgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfbW9kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFJFRElDQVRFX0JJTkFSWSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUFJFRElDQVRFX1VOQVJZICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfYW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX3hvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9wcm9wZXJ0eSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9tZW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfc2hpZnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfZnVuY3Rpb24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					692,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								106,
								118
							],
							[
								695,
								708
							],
							[
								773,
								789
							],
							[
								838,
								853
							],
							[
								896,
								910
							],
							[
								960,
								975
							],
							[
								1042,
								1058
							],
							[
								1116,
								1131
							],
							[
								1189,
								1206
							],
							[
								1246,
								1261
							],
							[
								1313,
								1327
							],
							[
								1388,
								1405
							],
							[
								1423,
								1432
							],
							[
								1788,
								1797
							],
							[
								1808,
								1822
							],
							[
								1924,
								1936
							],
							[
								1957,
								1975
							],
							[
								2021,
								2033
							],
							[
								2052,
								2066
							],
							[
								2123,
								2137
							],
							[
								2200,
								2215
							],
							[
								2275,
								2293
							],
							[
								2318,
								2336
							],
							[
								2391,
								2409
							],
							[
								2484,
								2508
							],
							[
								2577,
								2594
							],
							[
								2631,
								2647
							],
							[
								2694,
								2709
							],
							[
								2749,
								2773
							],
							[
								2807,
								2835
							],
							[
								2859,
								2884
							],
							[
								2917,
								2937
							],
							[
								2977,
								2991
							],
							[
								3085,
								3107
							],
							[
								3149,
								3166
							],
							[
								3203,
								3220
							],
							[
								3257,
								3273
							],
							[
								3309,
								3328
							],
							[
								3367,
								3386
							],
							[
								3425,
								3444
							],
							[
								3483,
								3505
							],
							[
								3547,
								3567
							],
							[
								3607,
								3631
							],
							[
								3675,
								3695
							],
							[
								3735,
								3754
							],
							[
								3793,
								3815
							],
							[
								3857,
								3873
							],
							[
								3909,
								3930
							],
							[
								3971,
								3989
							],
							[
								4044,
								4061
							],
							[
								4293,
								4309
							],
							[
								4489,
								4505
							],
							[
								4762,
								4776
							],
							[
								4905,
								4925
							],
							[
								5069,
								5088
							],
							[
								5235,
								5248
							],
							[
								5519,
								5532
							],
							[
								5803,
								5816
							],
							[
								6087,
								6100
							],
							[
								6371,
								6384
							],
							[
								6639,
								6655
							],
							[
								6981,
								6996
							],
							[
								7287,
								7299
							],
							[
								7512,
								7525
							],
							[
								7739,
								7752
							],
							[
								8111,
								8129
							],
							[
								8315,
								8331
							],
							[
								8467,
								8482
							],
							[
								8647,
								8665
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉPREDICATE_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉpredicate_id‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTypePredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉCharsetPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉStringPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉUnaryPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉBinaryPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉBooleanPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉRegExpPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉPropertyPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉMemberPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉShiftPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉFunctionPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚í∏‚Äì‚ÄÉPredicate‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉPredicate‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚ìÇ‚Äì‚ÄÉPREDICATE_INIT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_is‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_callable‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_id‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_eval‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_call‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_typename‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_tosource‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_regexp_capture‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_free_rt‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_values‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_clone‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_regexp_compile‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_recursive_num_args‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_direct_num_args‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉpredicate_precedence‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_undefined‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_null‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_bool‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_int‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_object‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_string‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_symbol‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_big_float‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_big_int‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_big_decimal‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_float64‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_number‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_primitive‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_all‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_function‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉpredicate_is_array‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_charset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_type‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_instanceof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_prototype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_add‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_sub‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_mul‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_div‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_mod‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPREDICATE_BINARY‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPREDICATE_UNARY‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_or‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_and‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_xor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_property‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_member‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_shift‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_function‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AQAAAAAAAAAAAAAADwwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					693,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
						"symkeys":
						[
							[
								480,
								498
							],
							[
								917,
								933
							],
							[
								1087,
								1104
							],
							[
								1232,
								1248
							],
							[
								1661,
								1678
							],
							[
								1970,
								1994
							],
							[
								7588,
								7607
							],
							[
								8009,
								8030
							],
							[
								9222,
								9243
							],
							[
								9722,
								9738
							],
							[
								10233,
								10254
							],
							[
								15209,
								15226
							],
							[
								16036,
								16056
							],
							[
								19738,
								19760
							],
							[
								26500,
								26517
							],
							[
								29035,
								29049
							],
							[
								29079,
								29093
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉpredicate_constant‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_duparg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_nextarg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_operator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_function‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAZDgAAICAg4pOCICBQUkVESUNBVEVfSCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrjigJMgcHJlZGljYXRlX2lkIHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIFR5cGVQcmVkaWNhdGUgOyDigJQgdHlwZWRlZgogICDik4kgIENoYXJzZXRQcmVkaWNhdGUgOyDigJQgdHlwZWRlZgogICDik4kgIFN0cmluZ1ByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgVW5hcnlQcmVkaWNhdGUgOyDigJQgdHlwZWRlZgogICDik4kgIEJpbmFyeVByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgQm9vbGVhblByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgUmVnRXhwUHJlZGljYXRlIDsg4oCUIHR5cGVkZWYKICAg4pOJICBQcm9wZXJ0eVByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgTWVtYmVyUHJlZGljYXRlIDsg4oCUIHR5cGVkZWYKICAg4pOJICBTaGlmdFByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCiAgIOKTiSAgRnVuY3Rpb25QcmVkaWNhdGUgOyDigJQgdHlwZWRlZgrigJTikrjigJMgUHJlZGljYXRlIHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIFByZWRpY2F0ZSA7IOKAlCB0eXBlZGVmCuKAlOKTguKAkyBQUkVESUNBVEVfSU5JVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDikqEgIHByZWRpY2F0ZV9pcyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfY2FsbGFibGUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX2lkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV9ldmFsICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV9jYWxsICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV92YWx1ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfdHlwZW5hbWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX3Rvc3RyaW5nICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV90b3NvdXJjZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfcmVnZXhwX2NhcHR1cmUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX2ZyZWVfcnQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX3ZhbHVlcyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfY2xvbmUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX3JlZ2V4cF9jb21waWxlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIHByZWRpY2F0ZV9yZWN1cnNpdmVfbnVtX2FyZ3MgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgcHJlZGljYXRlX2RpcmVjdF9udW1fYXJncyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBwcmVkaWNhdGVfcHJlY2VkZW5jZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX3VuZGVmaW5lZCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX251bGwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIHByZWRpY2F0ZV9pc19ib29sICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfaW50ICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfb2JqZWN0ICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfc3RyaW5nICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfc3ltYm9sICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfYmlnX2Zsb2F0ICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfYmlnX2ludCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX2JpZ19kZWNpbWFsICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfZmxvYXQ2NCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX251bWJlciAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX3ByaW1pdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX2FsbCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgcHJlZGljYXRlX2lzX2Z1bmN0aW9uICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBwcmVkaWNhdGVfaXNfYXJyYXkgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9jaGFyc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfdHlwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9pbnN0YW5jZW9mICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX3Byb3RvdHlwZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9hZGQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfc3ViICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX211bCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9kaXYgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfbW9kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFJFRElDQVRFX0JJTkFSWSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUFJFRElDQVRFX1VOQVJZICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfb3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfYW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX3hvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9wcm9wZXJ0eSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9tZW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfc2hpZnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfZnVuY3Rpb24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAADrAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					694,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
						"symkeys":
						[
							[
								480,
								498
							],
							[
								917,
								933
							],
							[
								1087,
								1104
							],
							[
								1232,
								1248
							],
							[
								1661,
								1678
							],
							[
								1970,
								1994
							],
							[
								7588,
								7607
							],
							[
								8009,
								8030
							],
							[
								9222,
								9243
							],
							[
								9722,
								9738
							],
							[
								10233,
								10254
							],
							[
								15233,
								15250
							],
							[
								16060,
								16080
							],
							[
								19762,
								19784
							],
							[
								26524,
								26541
							],
							[
								29059,
								29073
							],
							[
								29103,
								29117
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉpredicate_constant‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_duparg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_nextarg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_operator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_function‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNAwAA4oCU4pK74oCTIHByZWRpY2F0ZV9jb25zdGFudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9kdXBhcmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfbmV4dGFyZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9tZXRob2QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfb3BlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2Z1bmN0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADrAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					695,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNAwAA4oCU4pK74oCTIHByZWRpY2F0ZV9jb25zdGFudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9kdXBhcmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfbmV4dGFyZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9tZXRob2QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfb3BlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2Z1bmN0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					696,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
						"symkeys":
						[
							[
								480,
								498
							],
							[
								917,
								933
							],
							[
								1087,
								1104
							],
							[
								1232,
								1248
							],
							[
								1661,
								1678
							],
							[
								1970,
								1994
							],
							[
								7588,
								7607
							],
							[
								8009,
								8030
							],
							[
								9222,
								9243
							],
							[
								9722,
								9738
							],
							[
								10233,
								10254
							],
							[
								15233,
								15250
							],
							[
								16060,
								16080
							],
							[
								19762,
								19784
							],
							[
								26524,
								26541
							],
							[
								29059,
								29073
							],
							[
								29103,
								29117
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉpredicate_constant‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_duparg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_nextarg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_operator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_function‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAA6wIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					697,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
						"symkeys":
						[
							[
								480,
								498
							],
							[
								917,
								933
							],
							[
								1087,
								1104
							],
							[
								1232,
								1248
							],
							[
								1661,
								1678
							],
							[
								1970,
								1994
							],
							[
								7588,
								7607
							],
							[
								8009,
								8030
							],
							[
								9222,
								9243
							],
							[
								9722,
								9738
							],
							[
								10233,
								10254
							],
							[
								15233,
								15250
							],
							[
								16060,
								16080
							],
							[
								19874,
								19896
							],
							[
								26636,
								26653
							],
							[
								29171,
								29185
							],
							[
								29215,
								29229
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉpredicate_constant‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_duparg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_nextarg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_operator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_function‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACNAwAA4oCU4pK74oCTIHByZWRpY2F0ZV9jb25zdGFudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9kdXBhcmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfbmV4dGFyZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9tZXRob2QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfb3BlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2Z1bmN0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADrAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjQMAAOKAlOKSu+KAkyBwcmVkaWNhdGVfY29uc3RhbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfZHVwYXJnICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX25leHRhcmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfbWV0aG9kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX29wZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6wIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					698,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
						"symkeys":
						[
							[
								480,
								498
							],
							[
								917,
								933
							],
							[
								1087,
								1104
							],
							[
								1232,
								1248
							],
							[
								1661,
								1678
							],
							[
								1970,
								1994
							],
							[
								7588,
								7607
							],
							[
								8009,
								8030
							],
							[
								9222,
								9243
							],
							[
								9722,
								9738
							],
							[
								10233,
								10254
							],
							[
								15233,
								15250
							],
							[
								16060,
								16080
							],
							[
								19871,
								19893
							],
							[
								26633,
								26650
							],
							[
								29168,
								29182
							],
							[
								29212,
								29226
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉpredicate_constant‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_duparg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpredicate_nextarg‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_operator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_function‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_predicate_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACNAwAA4oCU4pK74oCTIHByZWRpY2F0ZV9jb25zdGFudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9kdXBhcmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfbmV4dGFyZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9tZXRob2QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfb3BlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2Z1bmN0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADrAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjQMAAOKAlOKSu+KAkyBwcmVkaWNhdGVfY29uc3RhbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfZHVwYXJnICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcHJlZGljYXRlX25leHRhcmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfbWV0aG9kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX29wZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9mdW5jdGlvbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jYWxsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA6wIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					699,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30552,
								30562
							],
							[
								31473,
								31492
							],
							[
								31894,
								31921
							],
							[
								31971,
								31998
							],
							[
								32279,
								32300
							],
							[
								32532,
								32547
							],
							[
								33512,
								33526
							],
							[
								33556,
								33570
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACNAwAA4oCU4pK74oCTIHByZWRpY2F0ZV9jb25zdGFudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHByZWRpY2F0ZV9kdXBhcmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwcmVkaWNhdGVfbmV4dGFyZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9uZXcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9tZXRob2QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfb3BlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfdG9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfZ2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2Z1bmN0aW9uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfcHJlZGljYXRlX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5zcGVjdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3ByZWRpY2F0ZV9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19wcmVkaWNhdGVfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAANBgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					707,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAUAAAAAAACsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					708,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30552,
								30562
							],
							[
								31473,
								31492
							],
							[
								31894,
								31921
							],
							[
								31971,
								31998
							],
							[
								32279,
								32300
							],
							[
								32532,
								32547
							],
							[
								33512,
								33526
							],
							[
								33556,
								33570
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAADQYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					709,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30564,
								30574
							],
							[
								31485,
								31504
							],
							[
								31906,
								31933
							],
							[
								31983,
								32010
							],
							[
								32291,
								32312
							],
							[
								32544,
								32559
							],
							[
								33524,
								33538
							],
							[
								33568,
								33582
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAADQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUHAADigJTik4LigJMgSU5TUEVDVF9JTlQzMlRfSU5SQU5HRSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9MRVZFTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9JU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCiAgIOKTiSAgaW5zcGVjdF9vcHRpb25zX3QgOyDigJQgdHlwZWRlZgogICDikp4gIHByb3Bfa2V5IDsg4oCUIHR5cGUgZGVjbGFyYXRpb24K4oCU4pK44oCTIHByb3Bfa2V5IHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIHByb3Bfa2V5X3QgOyDigJQgdHlwZWRlZgogICDikqEgIGpzX2luc3BlY3RfcHJpbnQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyByZWdleHBfcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfZ2V0cHJvcGVydHluYW1lc19yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2N1c3RvbV9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDikqEgIGpzX2RlYnVnZ2VyX2J1aWxkX2JhY2t0cmFjZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZV92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAANBgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					710,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30564,
								30574
							],
							[
								31485,
								31504
							],
							[
								31906,
								31933
							],
							[
								31983,
								32010
							],
							[
								32291,
								32312
							],
							[
								32544,
								32559
							],
							[
								33524,
								33538
							],
							[
								33568,
								33582
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAADQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUHAADigJTik4LigJMgSU5TUEVDVF9JTlQzMlRfSU5SQU5HRSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9MRVZFTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9JU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCiAgIOKTiSAgaW5zcGVjdF9vcHRpb25zX3QgOyDigJQgdHlwZWRlZgogICDikp4gIHByb3Bfa2V5IDsg4oCUIHR5cGUgZGVjbGFyYXRpb24K4oCU4pK44oCTIHByb3Bfa2V5IHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIHByb3Bfa2V5X3QgOyDigJQgdHlwZWRlZgogICDikqEgIGpzX2luc3BlY3RfcHJpbnQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyByZWdleHBfcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfZ2V0cHJvcGVydHluYW1lc19yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2N1c3RvbV9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDikqEgIGpzX2RlYnVnZ2VyX2J1aWxkX2JhY2t0cmFjZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZV92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAANBgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					711,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30564,
								30574
							],
							[
								31485,
								31504
							],
							[
								31906,
								31933
							],
							[
								31983,
								32010
							],
							[
								32291,
								32312
							],
							[
								32544,
								32559
							],
							[
								33524,
								33538
							],
							[
								33568,
								33582
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAADQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUHAADigJTik4LigJMgSU5TUEVDVF9JTlQzMlRfSU5SQU5HRSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9MRVZFTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9JU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCiAgIOKTiSAgaW5zcGVjdF9vcHRpb25zX3QgOyDigJQgdHlwZWRlZgogICDikp4gIHByb3Bfa2V5IDsg4oCUIHR5cGUgZGVjbGFyYXRpb24K4oCU4pK44oCTIHByb3Bfa2V5IHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIHByb3Bfa2V5X3QgOyDigJQgdHlwZWRlZgogICDikqEgIGpzX2luc3BlY3RfcHJpbnQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyByZWdleHBfcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfZ2V0cHJvcGVydHluYW1lc19yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2N1c3RvbV9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDikqEgIGpzX2RlYnVnZ2VyX2J1aWxkX2JhY2t0cmFjZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZV92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAANBgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					712,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					713,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30564,
								30574
							],
							[
								31485,
								31504
							],
							[
								31906,
								31933
							],
							[
								31983,
								32010
							],
							[
								32291,
								32312
							],
							[
								32544,
								32559
							],
							[
								33524,
								33538
							],
							[
								33568,
								33582
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAADQYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					714,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					715,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					716,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					717,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					718,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					719,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					720,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					721,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					722,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					723,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					724,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					725,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					726,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					727,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					728,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					729,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					730,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					731,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					732,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					733,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					734,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					735,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					736,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					737,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					738,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					739,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					740,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					741,
					2,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					742,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					743,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					744,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					745,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					746,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					747,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					748,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					749,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					750,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					751,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					752,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					753,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					754,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					755,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					756,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					757,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					758,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					759,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					760,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					761,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30564,
								30574
							],
							[
								31485,
								31504
							],
							[
								31906,
								31933
							],
							[
								31983,
								32010
							],
							[
								32291,
								32312
							],
							[
								32544,
								32559
							],
							[
								33524,
								33538
							],
							[
								33568,
								33582
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAADQYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					762,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1157,
								1174
							],
							[
								1184,
								1192
							],
							[
								1210,
								1218
							],
							[
								1283,
								1293
							],
							[
								1383,
								1399
							],
							[
								1502,
								1518
							],
							[
								1758,
								1778
							],
							[
								2069,
								2089
							],
							[
								2577,
								2597
							],
							[
								2828,
								2847
							],
							[
								6730,
								6752
							],
							[
								8214,
								8236
							],
							[
								8441,
								8456
							],
							[
								8570,
								8596
							],
							[
								9040,
								9076
							],
							[
								9478,
								9500
							],
							[
								9819,
								9841
							],
							[
								10853,
								10867
							],
							[
								12407,
								12421
							],
							[
								13551,
								13573
							],
							[
								15427,
								15444
							],
							[
								15831,
								15848
							],
							[
								16858,
								16875
							],
							[
								18653,
								18669
							],
							[
								30564,
								30574
							],
							[
								31485,
								31504
							],
							[
								31906,
								31933
							],
							[
								31983,
								32010
							],
							[
								32291,
								32312
							],
							[
								32544,
								32559
							],
							[
								33524,
								33538
							],
							[
								33568,
								33582
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAADQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUHAADigJTik4LigJMgSU5TUEVDVF9JTlQzMlRfSU5SQU5HRSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9MRVZFTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9JU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCiAgIOKTiSAgaW5zcGVjdF9vcHRpb25zX3QgOyDigJQgdHlwZWRlZgogICDikp4gIHByb3Bfa2V5IDsg4oCUIHR5cGUgZGVjbGFyYXRpb24K4oCU4pK44oCTIHByb3Bfa2V5IHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIHByb3Bfa2V5X3QgOyDigJQgdHlwZWRlZgogICDikqEgIGpzX2luc3BlY3RfcHJpbnQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyByZWdleHBfcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfZ2V0cHJvcGVydHluYW1lc19yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2N1c3RvbV9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDikqEgIGpzX2RlYnVnZ2VyX2J1aWxkX2JhY2t0cmFjZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZV92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAANBgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					763,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1522,
								1539
							],
							[
								1549,
								1557
							],
							[
								1575,
								1583
							],
							[
								1648,
								1658
							],
							[
								1748,
								1764
							],
							[
								1867,
								1883
							],
							[
								2123,
								2143
							],
							[
								2434,
								2454
							],
							[
								2942,
								2962
							],
							[
								3193,
								3212
							],
							[
								7095,
								7117
							],
							[
								8579,
								8601
							],
							[
								8806,
								8821
							],
							[
								8935,
								8961
							],
							[
								9405,
								9441
							],
							[
								9843,
								9865
							],
							[
								10184,
								10206
							],
							[
								11218,
								11232
							],
							[
								12772,
								12786
							],
							[
								13916,
								13938
							],
							[
								15792,
								15809
							],
							[
								16196,
								16213
							],
							[
								17223,
								17240
							],
							[
								19018,
								19034
							],
							[
								30937,
								30947
							],
							[
								31858,
								31877
							],
							[
								32279,
								32306
							],
							[
								32356,
								32383
							],
							[
								32664,
								32685
							],
							[
								32917,
								32932
							],
							[
								33897,
								33911
							],
							[
								33941,
								33955
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAADQYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEUHAADigJTik4LigJMgSU5TUEVDVF9JTlQzMlRfSU5SQU5HRSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9MRVZFTCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgSU5TUEVDVF9JU19DT01QQUNUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCiAgIOKTiSAgaW5zcGVjdF9vcHRpb25zX3QgOyDigJQgdHlwZWRlZgogICDikp4gIHByb3Bfa2V5IDsg4oCUIHR5cGUgZGVjbGFyYXRpb24K4oCU4pK44oCTIHByb3Bfa2V5IHsg4oCmIH0gOyDigJQgdHlwZQogICDik4kgIHByb3Bfa2V5X3QgOyDigJQgdHlwZWRlZgogICDikqEgIGpzX2luc3BlY3RfcHJpbnQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyByZWdleHBfcHJlZGljYXRlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9zY3JlZW5fd2lkdGggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19vYmplY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfaGlkZGVuICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9uZXdsaW5lICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19vYmplY3RfZ2V0cHJvcGVydHluYW1lc19yZWN1cnNpdmUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2N1c3RvbV9hdG9tICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fY2FsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfbWFwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9zZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2FycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9yZWdleHAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X251bWJlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9wcmludCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogICDikqEgIGpzX2RlYnVnZ2VyX2J1aWxkX2JhY2t0cmFjZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZV92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc3RhY2t0cmFjZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAAANBgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					764,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								446,
								468
							],
							[
								517,
								530
							],
							[
								571,
								589
							],
							[
								1522,
								1539
							],
							[
								1549,
								1557
							],
							[
								1575,
								1583
							],
							[
								1648,
								1658
							],
							[
								1748,
								1764
							],
							[
								1867,
								1883
							],
							[
								2123,
								2143
							],
							[
								2434,
								2454
							],
							[
								2942,
								2962
							],
							[
								3193,
								3212
							],
							[
								7095,
								7117
							],
							[
								8579,
								8601
							],
							[
								8806,
								8821
							],
							[
								8935,
								8961
							],
							[
								9405,
								9441
							],
							[
								9843,
								9865
							],
							[
								10184,
								10206
							],
							[
								11218,
								11232
							],
							[
								12772,
								12786
							],
							[
								13916,
								13938
							],
							[
								15792,
								15809
							],
							[
								16196,
								16213
							],
							[
								17223,
								17240
							],
							[
								19018,
								19034
							],
							[
								30941,
								30951
							],
							[
								31862,
								31881
							],
							[
								32283,
								32310
							],
							[
								32360,
								32387
							],
							[
								32668,
								32689
							],
							[
								32921,
								32936
							],
							[
								33901,
								33915
							],
							[
								33945,
								33959
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAADQYAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					765,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
						"symkeys":
						[
							[
								105,
								108
							],
							[
								1241,
								1267
							],
							[
								1347,
								1367
							],
							[
								1420,
								1435
							],
							[
								1467,
								1482
							],
							[
								1553,
								1575
							],
							[
								1738,
								1766
							],
							[
								1962,
								1977
							],
							[
								2124,
								2145
							],
							[
								2686,
								2701
							],
							[
								2814,
								2834
							],
							[
								4455,
								4472
							],
							[
								5287,
								5304
							],
							[
								5543,
								5565
							],
							[
								6004,
								6019
							],
							[
								6796,
								6811
							],
							[
								8426,
								8441
							],
							[
								8854,
								8872
							],
							[
								9814,
								9836
							],
							[
								10202,
								10218
							],
							[
								10498,
								10516
							],
							[
								10662,
								10681
							],
							[
								10806,
								10826
							],
							[
								23169,
								23189
							],
							[
								23350,
								23376
							],
							[
								23902,
								23922
							],
							[
								24053,
								24075
							],
							[
								27704,
								27726
							],
							[
								33505,
								33532
							],
							[
								33964,
								33989
							],
							[
								36933,
								36948
							],
							[
								38228,
								38242
							],
							[
								38272,
								38286
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉmax‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_archiveentry_wrap_proto‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_archiveentry_wrap‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉArchiveInstance‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉArchiveEntryRef‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_free_buffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_progress_callback‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_wrap_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_functions‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_getter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_setter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_seek‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_extract‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_filterbytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_close‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_version‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archiveentry_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archiveentry_wrap_proto‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archiveentry_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archiveentry_getter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archiveentry_setter‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archiveentry_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archiveentry_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_archive_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFBwAA4oCU4pOC4oCTIElOU1BFQ1RfSU5UMzJUX0lOUkFOR0UgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfTEVWRUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIElOU1BFQ1RfSVNfQ09NUEFDVCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDik4kgIGluc3BlY3Rfb3B0aW9uc190IDsg4oCUIHR5cGVkZWYKICAg4pKeICBwcm9wX2tleSA7IOKAlCB0eXBlIGRlY2xhcmF0aW9uCuKAlOKSuOKAkyBwcm9wX2tleSB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBwcm9wX2tleV90IDsg4oCUIHR5cGVkZWYKICAg4pKhICBqc19pbnNwZWN0X3ByaW50ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgcmVnZXhwX3ByZWRpY2F0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfc2NyZWVuX3dpZHRoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfZnJlZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3Rfb3B0aW9uc19nZXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBpbnNwZWN0X29wdGlvbnNfb2JqZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgaW5zcGVjdF9vcHRpb25zX2hpZGRlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGluc3BlY3RfbmV3bGluZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX29iamVjdF9nZXRwcm9wZXJ0eW5hbWVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfb2JqZWN0X2dldHByb3BlcnR5bmFtZXNfcmVjdXJzaXZlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9jdXN0b21fYXRvbSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfY3VzdG9tX2NhbGwgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X21hcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3Rfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcmVnZXhwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF9udW1iZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2luc3BlY3RfcHJpbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfaW5zcGVjdF90b3N0cmluZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pKhICBqc19kZWJ1Z2dlcl9idWlsZF9iYWNrdHJhY2UgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2VfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X3N0YWNrdHJhY2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19pbnNwZWN0X2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAygUAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					766,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
						"symkeys":
						[
							[
								1232,
								1245
							],
							[
								1896,
								1910
							],
							[
								2459,
								2472
							],
							[
								2625,
								2639
							],
							[
								2669,
								2683
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉjs_bjson_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bjson_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_bjson_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAABwAA4oCU4pOC4oCTIG1heCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgogICDikqEgIGpzX2FyY2hpdmVlbnRyeV93cmFwX3Byb3RvICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIGpzX2FyY2hpdmVlbnRyeV93cmFwICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrjigJMgQXJjaGl2ZUluc3RhbmNlIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgQXJjaGl2ZUVudHJ5UmVmIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrvigJMganNfYXJjaGl2ZV9mcmVlX2J1ZmZlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FyY2hpdmVfcHJvZ3Jlc3NfY2FsbGJhY2sgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX3dyYXBfcHJvdG8gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX2Z1bmN0aW9ucyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FyY2hpdmVfZ2V0dGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZV9zZXR0ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX2NvbnN0cnVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZV9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZV9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZV9zZWVrICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZV9leHRyYWN0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZV9maWx0ZXJieXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FyY2hpdmVfY2xvc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX3ZlcnNpb24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZV9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlZW50cnlfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FyY2hpdmVlbnRyeV93cmFwX3Byb3RvICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZWVudHJ5X3dyYXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlZW50cnlfZ2V0dGVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYXJjaGl2ZWVudHJ5X3NldHRlciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FyY2hpdmVlbnRyeV9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2FyY2hpdmVlbnRyeV9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19hcmNoaXZlX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					767,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
						"symkeys":
						[
							[
								31,
								45
							],
							[
								146,
								150
							],
							[
								318,
								322
							],
							[
								431,
								439
							],
							[
								506,
								516
							],
							[
								574,
								583
							],
							[
								621,
								631
							],
							[
								665,
								677
							],
							[
								711,
								722
							],
							[
								785,
								797
							],
							[
								848,
								857
							],
							[
								917,
								926
							],
							[
								985,
								997
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUICKJS_BLOB_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉblob‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉBlob‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_write‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_input‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_wrap‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_init‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉblob_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉblob_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_blob_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADrAAAA4oCU4pK74oCTIGpzX2Jqc29uX3JlYWQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ianNvbl93cml0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2Jqc29uX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAgIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAABAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					768,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
						"symkeys":
						[
							[
								31,
								45
							],
							[
								127,
								131
							],
							[
								299,
								303
							],
							[
								412,
								420
							],
							[
								487,
								497
							],
							[
								555,
								564
							],
							[
								602,
								612
							],
							[
								646,
								658
							],
							[
								692,
								703
							],
							[
								766,
								778
							],
							[
								829,
								838
							],
							[
								898,
								907
							],
							[
								966,
								978
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUICKJS_BLOB_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉblob‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉBlob‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_write‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_input‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_wrap‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_init‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉblob_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉblob_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_blob_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABSAgAAICAg4pOCICBRVUlDS0pTX0JMT0JfSCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrjigJMgYmxvYiB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBCbG9iIDsg4oCUIHR5cGVkZWYKICAg4pKhICBibG9iX25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX3dyaXRlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIGJsb2JfZnJlZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX2lucHV0ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIGpzX2Jsb2Jfd3JhcCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX2luaXQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBibG9iX2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBibG9iX3NpemUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ibG9iX2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAAEAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUgIAACAgIOKTgiAgUVVJQ0tKU19CTE9CX0gg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK44oCTIGJsb2IgeyDigKYgfSA7IOKAlCB0eXBlCiAgIOKTiSAgQmxvYiA7IOKAlCB0eXBlZGVmCiAgIOKSoSAgYmxvYl9uZXcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgYmxvYl93cml0ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX2ZyZWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgYmxvYl9pbnB1dCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX3dyYXAgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAganNfYmxvYl9uZXcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAganNfYmxvYl9pbml0ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgYmxvYl9kYXRhICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYmxvYl9zaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYmxvYl9kYXRhICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAABAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					769,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
						"symkeys":
						[
							[
								31,
								45
							],
							[
								127,
								131
							],
							[
								299,
								303
							],
							[
								412,
								420
							],
							[
								487,
								497
							],
							[
								555,
								564
							],
							[
								602,
								612
							],
							[
								646,
								658
							],
							[
								692,
								703
							],
							[
								766,
								778
							],
							[
								829,
								838
							],
							[
								898,
								907
							],
							[
								966,
								978
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUICKJS_BLOB_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉblob‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉBlob‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_write‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉblob_input‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_wrap‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_blob_init‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉblob_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉblob_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_blob_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAABSAgAAICAg4pOCICBRVUlDS0pTX0JMT0JfSCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrjigJMgYmxvYiB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBCbG9iIDsg4oCUIHR5cGVkZWYKICAg4pKhICBibG9iX25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX3dyaXRlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIGJsb2JfZnJlZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX2lucHV0ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIGpzX2Jsb2Jfd3JhcCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX2luaXQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBibG9iX2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBibG9iX3NpemUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ibG9iX2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAAEAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUgIAACAgIOKTgiAgUVVJQ0tKU19CTE9CX0gg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK44oCTIGJsb2IgeyDigKYgfSA7IOKAlCB0eXBlCiAgIOKTiSAgQmxvYiA7IOKAlCB0eXBlZGVmCiAgIOKSoSAgYmxvYl9uZXcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgYmxvYl93cml0ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX2ZyZWUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAgYmxvYl9pbnB1dCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX3dyYXAgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAganNfYmxvYl9uZXcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAgIOKSoSAganNfYmxvYl9pbml0ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgrigJTikrvigJMgYmxvYl9kYXRhICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgYmxvYl9zaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfYmxvYl9kYXRhICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgAAAAAAAAAABAIAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					770,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
						"symkeys":
						[
							[
								638,
								659
							],
							[
								772,
								793
							],
							[
								988,
								1016
							],
							[
								1710,
								1734
							],
							[
								2906,
								2932
							],
							[
								3098,
								3119
							],
							[
								3255,
								3277
							],
							[
								5662,
								5682
							],
							[
								6981,
								7002
							],
							[
								7369,
								7390
							],
							[
								11315,
								11336
							],
							[
								12411,
								12425
							],
							[
								12455,
								12469
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_data‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_exec‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_spawn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_wait‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_kill‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_child_process_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABSAgAAICAg4pOCICBRVUlDS0pTX0JMT0JfSCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrjigJMgYmxvYiB7IOKApiB9IDsg4oCUIHR5cGUKICAg4pOJICBCbG9iIDsg4oCUIHR5cGVkZWYKICAg4pKhICBibG9iX25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX3dyaXRlICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIGJsb2JfZnJlZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBibG9iX2lucHV0ICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogICDikqEgIGpzX2Jsb2Jfd3JhcCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX25ldyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICAg4pKhICBqc19ibG9iX2luaXQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKSu+KAkyBibG9iX2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBibG9iX3NpemUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19ibG9iX2RhdGEgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAABfAgAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					771,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
						"symkeys":
						[
							[
								419,
								431
							],
							[
								528,
								540
							],
							[
								548,
								568
							],
							[
								850,
								868
							],
							[
								1247,
								1264
							],
							[
								1552,
								1568
							],
							[
								1802,
								1819
							],
							[
								2512,
								2526
							],
							[
								3730,
								3750
							],
							[
								4551,
								4579
							],
							[
								5240,
								5261
							],
							[
								6470,
								6496
							],
							[
								6678,
								6703
							],
							[
								6831,
								6856
							],
							[
								7198,
								7210
							],
							[
								8703,
								8717
							],
							[
								9970,
								9981
							],
							[
								10069,
								10081
							],
							[
								10298,
								10309
							],
							[
								10921,
								10932
							],
							[
								11020,
								11032
							],
							[
								11258,
								11269
							],
							[
								11886,
								11899
							],
							[
								11987,
								12001
							],
							[
								12220,
								12233
							],
							[
								12817,
								12832
							],
							[
								14367,
								14381
							],
							[
								15051,
								15066
							],
							[
								16129,
								16143
							],
							[
								17897,
								17912
							],
							[
								18079,
								18092
							],
							[
								18216,
								18228
							],
							[
								21070,
								21082
							],
							[
								22076,
								22090
							],
							[
								22120,
								22134
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉDeepIterator‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉDeepIterator‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚í∏‚Äì‚ÄÉdeep_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_parseflags‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_thisflags‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_getflags‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_return‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_iterator_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_iterator_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_iterator_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_find‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_select‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_deep_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_get2‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_deep_set‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_set2‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_deep_unset‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_unset2‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_unset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_flatten‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_pathof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_foreach‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_equals‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_iterate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_clone‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_deep_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADZAgAA4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3NfZGF0YSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3Nfd3JhcCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3NfY29uc3RydWN0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19jaGlsZF9wcm9jZXNzX2luc3BlY3QgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19jaGlsZF9wcm9jZXNzX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3NfZXhlYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3Nfc3Bhd24gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc19jaGlsZF9wcm9jZXNzX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3Nfd2FpdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3Nfa2lsbCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX2NoaWxkX3Byb2Nlc3NfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAACzBQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "utils.h",
			"settings":
			{
				"buffer_size": 31291,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAtQ0AAAAAAAC1DQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAtQ0AAAAAAAC1DQAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAtQ0AAAAAAAC1DQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "utils.c",
			"settings":
			{
				"buffer_size": 53797,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA16MAAAAAAADaowAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "predicate.c",
			"settings":
			{
				"buffer_size": 29695,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "op"
					},
					"AwAAAJVqAAAAAAAAlmoAAAAAAAAAAAAAlmoAAAAAAACWagAAAAAAAAUAAABuYXJnc5ZqAAAAAAAAl2oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlWoAAAAAAACaagAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					2,
					"left_delete",
					null,
					"AgAAAJZqAAAAAAAAlmoAAAAAAAABAAAAcJVqAAAAAAAAlWoAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAl2oAAAAAAACXagAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "pred->function.ari"
					},
					"EgAAAJVqAAAAAAAAlmoAAAAAAAAAAAAAlmoAAAAAAACXagAAAAAAAAAAAACXagAAAAAAAJhqAAAAAAAAAAAAAJhqAAAAAAAAmWoAAAAAAAAAAAAAmWoAAAAAAACaagAAAAAAAAAAAACaagAAAAAAAJtqAAAAAAAAAAAAAJtqAAAAAAAAnGoAAAAAAAAAAAAAnGoAAAAAAACdagAAAAAAAAAAAACdagAAAAAAAJ5qAAAAAAAAAAAAAJ5qAAAAAAAAn2oAAAAAAAAAAAAAn2oAAAAAAACgagAAAAAAAAAAAACgagAAAAAAAKFqAAAAAAAAAAAAAKFqAAAAAAAAomoAAAAAAAAAAAAAomoAAAAAAACjagAAAAAAAAAAAACjagAAAAAAAKRqAAAAAAAAAAAAAKRqAAAAAAAApWoAAAAAAAAAAAAApWoAAAAAAACmagAAAAAAAAAAAACmagAAAAAAAKdqAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlWoAAAAAAACVagAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "ty"
					},
					"AgAAAKdqAAAAAAAAqGoAAAAAAAAAAAAAqGoAAAAAAACpagAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAp2oAAAAAAACnagAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAC5qAAAAAAAALmoAAAAAAABcAAAAICAgICAgaW50IG5hcmdzID0gTUFYX05VTSgxLCBqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoY3R4LCBwcmVkLT5mdW5jdGlvbi5mdW5jLCAibGVuZ3RoIikpOwo",
					"AQAAAAAAAAABAAAALmoAAAAAAACKagAAAAAAAAAAAAAAAAAA"
				],
				[
					62,
					1,
					"cut",
					null,
					"AQAAAHthAAAAAAAAe2EAAAAAAABKAAAAICAgICAgcmV0LT5mdW5jdGlvbi50aGlzX29iaiA9IEpTX0R1cFZhbHVlKGN0eCwgcHJlZC0+ZnVuY3Rpb24udGhpc19vYmopOwo",
					"AQAAAAAAAAABAAAAe2EAAAAAAADFYQAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					2,
					"paste",
					null,
					"AgAAAHthAAAAAAAAxWEAAAAAAAAAAAAAxWEAAAAAAAAPYgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAe2EAAAAAAAB7YQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "arity"
					},
					"BgAAANlhAAAAAAAA2mEAAAAAAAAAAAAA2mEAAAAAAADaYQAAAAAAAAgAAAB0aGlzX29iatphAAAAAAAA22EAAAAAAAAAAAAA22EAAAAAAADcYQAAAAAAAAAAAADcYQAAAAAAAN1hAAAAAAAAAAAAAN1hAAAAAAAA3mEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4WEAAAAAAADZYQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPJhAAAAAAAA82EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8mEAAAAAAADyYQAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOBhAAAAAAAA4WEAAAAAAAAAAAAA4WEAAAAAAADhYQAAAAAAABMAAAAgSlNfRHVwVmFsdWUoY3R4LCAg",
					"AQAAAAAAAAABAAAA82EAAAAAAADgYQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "arity;"
					},
					"BwAAAPBhAAAAAAAA8WEAAAAAAAAAAAAA8WEAAAAAAADxYQAAAAAAAAgAAAB0aGlzX29iavFhAAAAAAAA8mEAAAAAAAAAAAAA8mEAAAAAAADzYQAAAAAAAAAAAADzYQAAAAAAAPRhAAAAAAAAAAAAAPRhAAAAAAAA9WEAAAAAAAAAAAAA9WEAAAAAAAD2YQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8GEAAAAAAAD4YQAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAAPZhAAAAAAAA9mEAAAAAAAACAAAAKTs",
					"AQAAAAAAAAABAAAA9mEAAAAAAAD4YQAAAAAAAP///////+9/"
				],
				[
					126,
					1,
					"paste",
					null,
					"AgAAANAjAAAAAAAA3SMAAAAAAAAAAAAA3SMAAAAAAADdIwAAAAAAAAUAAABuYXJncw",
					"AQAAAAAAAAABAAAA0CMAAAAAAADVIwAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "ariuty"
					},
					"BgAAAN0jAAAAAAAA3iMAAAAAAAAAAAAA3iMAAAAAAADfIwAAAAAAAAAAAADfIwAAAAAAAOAjAAAAAAAAAAAAAOAjAAAAAAAA4SMAAAAAAAAAAAAA4SMAAAAAAADiIwAAAAAAAAAAAADiIwAAAAAAAOMjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3SMAAAAAAADdIwAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					3,
					"left_delete",
					null,
					"AwAAAOIjAAAAAAAA4iMAAAAAAAABAAAAeeEjAAAAAAAA4SMAAAAAAAABAAAAdOAjAAAAAAAA4CMAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA4yMAAAAAAADjIwAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "ty"
					},
					"AgAAAOAjAAAAAAAA4SMAAAAAAAAAAAAA4SMAAAAAAADiIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4CMAAAAAAADgIwAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"cut",
					null,
					"AQAAANAjAAAAAAAA0CMAAAAAAAASAAAAcHItPmZ1bmN0aW9uLmFyaXR5",
					"AQAAAAAAAAABAAAA0CMAAAAAAADiIwAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "nargs"
					},
					"BQAAANAjAAAAAAAA0SMAAAAAAAAAAAAA0SMAAAAAAADSIwAAAAAAAAAAAADSIwAAAAAAANMjAAAAAAAAAAAAANMjAAAAAAAA1CMAAAAAAAAAAAAA1CMAAAAAAADVIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0CMAAAAAAADQIwAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"paste",
					null,
					"AQAAAHAjAAAAAAAAgiMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcCMAAAAAAABwIwAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIIjAAAAAAAAgyMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgiMAAAAAAACCIwAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"left_delete",
					null,
					"AQAAAIMjAAAAAAAAgyMAAAAAAABGAAAATUFYX05VTSgxLCBqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoY3R4LCBwci0+ZnVuY3Rpb24uZnVuYywgImxlbmd0aCIpKQ",
					"AQAAAAAAAAABAAAAgyMAAAAAAADJIwAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"right_delete",
					null,
					"AQAAAIMjAAAAAAAAgyMAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAgyMAAAAAAACDIwAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALBuAAAAAAAAsW4AAAAAAAAAAAAAsW4AAAAAAACxbgAAAAAAACkAAAAgTUFYX05VTSgxLCBqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoY3R4LA",
					"AQAAAAAAAAABAAAAsG4AAAAAAADZbgAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"insert",
					{
						"characters": "arity;"
					},
					"BwAAAMFuAAAAAAAAwm4AAAAAAAAAAAAAwm4AAAAAAADCbgAAAAAAAAQAAABmdW5jwm4AAAAAAADDbgAAAAAAAAAAAADDbgAAAAAAAMRuAAAAAAAAAAAAAMRuAAAAAAAAxW4AAAAAAAAAAAAAxW4AAAAAAADGbgAAAAAAAAAAAADGbgAAAAAAAMduAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwW4AAAAAAADFbgAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"left_delete",
					null,
					"AQAAAMduAAAAAAAAx24AAAAAAAANAAAALCAibGVuZ3RoIikpOw",
					"AQAAAAAAAAABAAAAx24AAAAAAADUbgAAAAAAAP///////+9/"
				],
				[
					200,
					2,
					"left_delete",
					null,
					"AgAAACAkAAAAAAAAICQAAAAAAAABAAAAPh8kAAAAAAAAHyQAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAAISQAAAAAAAAhJAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAB8kAAAAAAAAICQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHyQAAAAAAAAfJAAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": ".func"
					},
					"BQAAABEkAAAAAAAAEiQAAAAAAAAAAAAAEiQAAAAAAAATJAAAAAAAAAAAAAATJAAAAAAAABQkAAAAAAAAAAAAABQkAAAAAAAAFSQAAAAAAAAAAAAAFSQAAAAAAAAWJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAESQAAAAAAAARJAAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA6yMAAAAAAADrIwAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA6yMAAAAAAADrIwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "predicate.h",
			"settings":
			{
				"buffer_size": 10718,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAQcAAAAAAAADBwAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAHBIAAAAAAABUEgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAADMiAAAAAAAAMyIAAAAAAAACAAAAID0",
					"AQAAAAAAAAABAAAAMyIAAAAAAAA1IgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": ".func"
					},
					"BQAAADMiAAAAAAAANCIAAAAAAAAAAAAANCIAAAAAAAA1IgAAAAAAAAAAAAA1IgAAAAAAADYiAAAAAAAAAAAAADYiAAAAAAAANyIAAAAAAAAAAAAANyIAAAAAAAA4IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMyIAAAAAAAAzIgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgiAAAAAAAAOSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOCIAAAAAAAA4IgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"cut",
					null,
					"AQAAACciAAAAAAAAJyIAAAAAAAAbAAAAcmV0LmZ1bmN0aW9uLmZ1bmMgIGZ1bmM7CiAg",
					"AQAAAAAAAAABAAAAJyIAAAAAAABCIgAAAAAAAAAAAAAAADJA"
				],
				[
					40,
					2,
					"paste",
					null,
					"AgAAACciAAAAAAAAQiIAAAAAAAAAAAAAQiIAAAAAAABdIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJyIAAAAAAAAnIgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "this_val"
					},
					"CQAAAE8iAAAAAAAAUCIAAAAAAAAAAAAAUCIAAAAAAABQIgAAAAAAAAQAAABmdW5jUCIAAAAAAABRIgAAAAAAAAAAAABRIgAAAAAAAFIiAAAAAAAAAAAAAFIiAAAAAAAAUyIAAAAAAAAAAAAAUyIAAAAAAABUIgAAAAAAAAAAAABUIgAAAAAAAFUiAAAAAAAAAAAAAFUiAAAAAAAAViIAAAAAAAAAAAAAViIAAAAAAABXIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATyIAAAAAAABTIgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAFgiAAAAAAAAWSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWCIAAAAAAABYIgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "this_val"
					},
					"CQAAAFoiAAAAAAAAWyIAAAAAAAAAAAAAWyIAAAAAAABbIgAAAAAAAAQAAABmdW5jWyIAAAAAAABcIgAAAAAAAAAAAABcIgAAAAAAAF0iAAAAAAAAAAAAAF0iAAAAAAAAXiIAAAAAAAAAAAAAXiIAAAAAAABfIgAAAAAAAAAAAABfIgAAAAAAAGAiAAAAAAAAAAAAAGAiAAAAAAAAYSIAAAAAAAAAAAAAYSIAAAAAAABiIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWiIAAAAAAABeIgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAADkiAAAAAAAAOiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOSIAAAAAAAA5IgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\nint"
					},
					"BQAAAFwFAAAAAAAAXQUAAAAAAAAAAAAAXQUAAAAAAABfBQAAAAAAAAAAAABfBQAAAAAAAGAFAAAAAAAAAAAAAGAFAAAAAAAAYQUAAAAAAAAAAAAAYQUAAAAAAABiBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAUAAAAAAABcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " arity;"
					},
					"BwAAAGIFAAAAAAAAYwUAAAAAAAAAAAAAYwUAAAAAAABkBQAAAAAAAAAAAABkBQAAAAAAAGUFAAAAAAAAAAAAAGUFAAAAAAAAZgUAAAAAAAAAAAAAZgUAAAAAAABnBQAAAAAAAAAAAABnBQAAAAAAAGgFAAAAAAAAAAAAAGgFAAAAAAAAaQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgUAAAAAAABiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHEiAAAAAAAAciIAAAAAAAAAAAAAciIAAAAAAAB0IgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcSIAAAAAAABxIgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"paste",
					null,
					"AQAAAHQiAAAAAAAA0CIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdCIAAAAAAAB0IgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "ret.fuznct"
					},
					"CwAAAHIiAAAAAAAAcyIAAAAAAAAAAAAAcyIAAAAAAABzIgAAAAAAABEAAAAgICAgICAgIGludCBuYXJnc3MiAAAAAAAAdCIAAAAAAAAAAAAAdCIAAAAAAAB1IgAAAAAAAAAAAAB1IgAAAAAAAHYiAAAAAAAAAAAAAHYiAAAAAAAAdyIAAAAAAAAAAAAAdyIAAAAAAAB4IgAAAAAAAAAAAAB4IgAAAAAAAHkiAAAAAAAAAAAAAHkiAAAAAAAAeiIAAAAAAAAAAAAAeiIAAAAAAAB7IgAAAAAAAAAAAAB7IgAAAAAAAHwiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAciIAAAAAAACDIgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					4,
					"left_delete",
					null,
					"BAAAAHsiAAAAAAAAeyIAAAAAAAABAAAAdHoiAAAAAAAAeiIAAAAAAAABAAAAY3kiAAAAAAAAeSIAAAAAAAABAAAAbngiAAAAAAAAeCIAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAAfCIAAAAAAAB8IgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "nction.arity"
					},
					"DAAAAHgiAAAAAAAAeSIAAAAAAAAAAAAAeSIAAAAAAAB6IgAAAAAAAAAAAAB6IgAAAAAAAHsiAAAAAAAAAAAAAHsiAAAAAAAAfCIAAAAAAAAAAAAAfCIAAAAAAAB9IgAAAAAAAAAAAAB9IgAAAAAAAH4iAAAAAAAAAAAAAH4iAAAAAAAAfyIAAAAAAAAAAAAAfyIAAAAAAACAIgAAAAAAAAAAAACAIgAAAAAAAIEiAAAAAAAAAAAAAIEiAAAAAAAAgiIAAAAAAAAAAAAAgiIAAAAAAACDIgAAAAAAAAAAAACDIgAAAAAAAIQiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeCIAAAAAAAB4IgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIQiAAAAAAAAhSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhCIAAAAAAACEIgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "func"
					},
					"BQAAALEiAAAAAAAAsiIAAAAAAAAAAAAAsiIAAAAAAACyIgAAAAAAABMAAABwcmVkLT5mdW5jdGlvbi5mdW5jsiIAAAAAAACzIgAAAAAAAAAAAACzIgAAAAAAALQiAAAAAAAAAAAAALQiAAAAAAAAtSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsSIAAAAAAADEIgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"left_delete",
					null,
					"AQAAAMIiAAAAAAAAwiIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAwyIAAAAAAADDIgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAHIiAAAAAAAAdCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAciIAAAAAAAByIgAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPghAAAAAAAA+SEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+CEAAAAAAAD4IQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAPkhAAAAAAAA+iEAAAAAAAAAAAAA+iEAAAAAAAD7IQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+SEAAAAAAAD5IQAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"left_delete",
					null,
					"AQAAAPohAAAAAAAA+iEAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA+yEAAAAAAAD7IQAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAAPohAAAAAAAA+yEAAAAAAAAAAAAA+yEAAAAAAAD8IQAAAAAAAAAAAAD8IQAAAAAAAP0hAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+iEAAAAAAAD6IQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " arity"
					},
					"BgAAAP0hAAAAAAAA/iEAAAAAAAAAAAAA/iEAAAAAAAD/IQAAAAAAAAAAAAD/IQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAASIAAAAAAAAAAAAAASIAAAAAAAACIgAAAAAAAAAAAAACIgAAAAAAAAMiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SEAAAAAAAD9IQAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"cut",
					null,
					"AQAAAJUiAAAAAAAAlSIAAAAAAAA6AAAATUFYX05VTSgxLCBqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoY3R4LCBmdW5jLCAibGVuZ3RoIikpOw",
					"AQAAAAAAAAABAAAAlSIAAAAAAADPIgAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "arity;"
					},
					"BgAAAJUiAAAAAAAAliIAAAAAAAAAAAAAliIAAAAAAACXIgAAAAAAAAAAAACXIgAAAAAAAJgiAAAAAAAAAAAAAJgiAAAAAAAAmSIAAAAAAAAAAAAAmSIAAAAAAACaIgAAAAAAAAAAAACaIgAAAAAAAJsiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlSIAAAAAAACVIgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAMQUAAAAAAAAxBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-predicate.c",
			"settings":
			{
				"buffer_size": 29773,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANocAAAAAAAA2xwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2hwAAAAAAADaHAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANscAAAAAAAA3BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2xwAAAAAAADbHAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAANwcAAAAAAAAFh0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3BwAAAAAAADcHAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAABUdAAAAAAAAFR0AAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAFh0AAAAAAAAWHQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAABYdAAAAAAAAFx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFh0AAAAAAAAWHQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					2,
					"left_delete",
					null,
					"AgAAABcdAAAAAAAAFx0AAAAAAAABAAAAOxYdAAAAAAAAFh0AAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAGB0AAAAAAAAYHQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABYdAAAAAAAAFx0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFh0AAAAAAAAWHQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPw6AAAAAAAA/ToAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/DoAAAAAAAD8OgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP06AAAAAAAA/joAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/ToAAAAAAAD9OgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"paste",
					null,
					"AQAAAP46AAAAAAAAODsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/joAAAAAAAD+OgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAADc7AAAAAAAANzsAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAODsAAAAAAAA4OwAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"AwAAANQ6AAAAAAAA1ToAAAAAAAAAAAAA1ToAAAAAAADWOgAAAAAAAAAAAADWOgAAAAAAANc6AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1DoAAAAAAADUOgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					4,
					"right_delete",
					null,
					"BAAAANc6AAAAAAAA1zoAAAAAAAABAAAAINc6AAAAAAAA1zoAAAAAAAABAAAAKtc6AAAAAAAA1zoAAAAAAAABAAAAcNc6AAAAAAAA1zoAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA1zoAAAAAAADXOgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"paste",
					null,
					"AgAAANo6AAAAAAAA8ToAAAAAAAAAAAAA8ToAAAAAAADxOgAAAAAAAAEAAABw",
					"AQAAAAAAAAABAAAA2joAAAAAAADbOgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "p"
					},
					"AQAAAPE6AAAAAAAA8joAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8ToAAAAAAADxOgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAE47AAAAAAAATzsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATjsAAAAAAABOOwAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "val"
					},
					"AwAAAOJMAAAAAAAA40wAAAAAAAAAAAAA40wAAAAAAADkTAAAAAAAAAAAAADkTAAAAAAAAOVMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4kwAAAAAAADiTAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					3,
					"right_delete",
					null,
					"AwAAAOVMAAAAAAAA5UwAAAAAAAABAAAAb+VMAAAAAAAA5UwAAAAAAAABAAAAYuVMAAAAAAAA5UwAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAA5UwAAAAAAADlTAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"cut",
					null,
					"AQAAAI5MAAAAAAAAjkwAAAAAAABzAAAAIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJ0aGlzX29iaiIsIEpTX0R1cFZhbHVlKGN0eCwgcHItPmZ1bmN0aW9uLnRoaXNfdmFsKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICAgIA",
					"AQAAAAAAAAABAAAAjkwAAAAAAAABTQAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					2,
					"paste",
					null,
					"AgAAAI5MAAAAAAAAAU0AAAAAAAAAAAAAAU0AAAAAAAB0TQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjkwAAAAAAACOTAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "arity"
					},
					"BgAAACdNAAAAAAAAKE0AAAAAAAAAAAAAKE0AAAAAAAAoTQAAAAAAAAgAAAB0aGlzX29iaihNAAAAAAAAKU0AAAAAAAAAAAAAKU0AAAAAAAAqTQAAAAAAAAAAAAAqTQAAAAAAACtNAAAAAAAAAAAAACtNAAAAAAAALE0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ00AAAAAAAAvTQAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "arity"
					},
					"BgAAAE1NAAAAAAAATk0AAAAAAAAAAAAATk0AAAAAAABOTQAAAAAAAAgAAAB0aGlzX3ZhbE5NAAAAAAAAT00AAAAAAAAAAAAAT00AAAAAAABQTQAAAAAAAAAAAABQTQAAAAAAAFFNAAAAAAAAAAAAAFFNAAAAAAAAUk0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATU0AAAAAAABVTQAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "J"
					},
					"AgAAADJNAAAAAAAAM00AAAAAAAAAAAAAM00AAAAAAAAzTQAAAAAAAAgAAABEdXBWYWx1ZQ",
					"AQAAAAAAAAABAAAAMk0AAAAAAAA6TQAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"left_delete",
					null,
					"AQAAADJNAAAAAAAAMk0AAAAAAAABAAAASg",
					"AQAAAAAAAAABAAAAM00AAAAAAAAzTQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": "NewInt32"
					},
					"CAAAADJNAAAAAAAAM00AAAAAAAAAAAAAM00AAAAAAAA0TQAAAAAAAAAAAAA0TQAAAAAAADVNAAAAAAAAAAAAADVNAAAAAAAANk0AAAAAAAAAAAAANk0AAAAAAAA3TQAAAAAAAAAAAAA3TQAAAAAAADhNAAAAAAAAAAAAADhNAAAAAAAAOU0AAAAAAAAAAAAAOU0AAAAAAAA6TQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMk0AAAAAAAAyTQAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA/EwAAAAAAAD8TAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-inspect.c",
			"settings":
			{
				"buffer_size": 34304,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					56,
					1,
					"insert",
					{
						"characters": "\niuf"
					},
					"BQAAALpcAAAAAAAAu1wAAAAAAAAAAAAAu1wAAAAAAADBXAAAAAAAAAAAAADBXAAAAAAAAMJcAAAAAAAAAAAAAMJcAAAAAAAAw1wAAAAAAAAAAAAAw1wAAAAAAADEXAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAulwAAAAAAAC6XAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					2,
					"left_delete",
					null,
					"AgAAAMNcAAAAAAAAw1wAAAAAAAABAAAAZsJcAAAAAAAAwlwAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAxFwAAAAAAADEXAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAMJcAAAAAAAAw1wAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwlwAAAAAAADCXAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMNcAAAAAAAAxVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw1wAAAAAAADDXAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAMRcAAAAAAAAxVwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxFwAAAAAAADEXAAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "<)"
					},
					"AwAAAF5eAAAAAAAAX14AAAAAAAAAAAAAX14AAAAAAABfXgAAAAAAAAMAAAA+IDBfXgAAAAAAAGBeAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXl4AAAAAAABhXgAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"left_delete",
					null,
					"AQAAAF9eAAAAAAAAX14AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAYF4AAAAAAABgXgAAAAAAAAAAAAAAAPC/"
				],
				[
					197,
					1,
					"insert",
					{
						"characters": "=0"
					},
					"AgAAAF9eAAAAAAAAYF4AAAAAAAAAAAAAYF4AAAAAAABhXgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX14AAAAAAABfXgAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYV4AAAAAAABhXgAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAMBeAAAAAAAAwV4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwF4AAAAAAADAXgAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAAMFeAAAAAAAAwl4AAAAAAAAAAAAAwl4AAAAAAADDXgAAAAAAAAAAAADDXgAAAAAAAMReAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwV4AAAAAAADBXgAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMReAAAAAAAAxV4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxF4AAAAAAADEXgAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAPdfAAAAAAAA+V8AAAAAAAAAAAAAv18AAAAAAADBXwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAv18AAAAAAAD3XwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-archive.c",
			"settings":
			{
				"buffer_size": 38547,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-bjson.c",
			"settings":
			{
				"buffer_size": 2979,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-blob.h",
			"settings":
			{
				"buffer_size": 1105,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAAFYAAAAAAAAAVgAAAAAAAAATAAAAI2luY2x1ZGUgInV0aWxzLmgiCg",
					"AQAAAAAAAAABAAAAVgAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					2,
					"left_delete",
					null,
					"AgAAAFcAAAAAAAAAVwAAAAAAAAABAAAAL1YAAAAAAAAAVgAAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAWAAAAAAAAABYAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-deep.c",
			"settings":
			{
				"buffer_size": 22514,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"contents": "Searching 973 files for \"nextarg\" (regex, case sensitive)\n\n/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-predicate.c:\n   50  \n   51  static JSValue\n   52: predicate_nextarg(JSContext* ctx, JSArguments* args) {\n   53    JSValue arg = js_arguments_shift(args);\n   54    return predicate_duparg(ctx, arg);\n   ..\n  150  \n  151        case PREDICATE_NOTNOT: {\n  152:         *pr = predicate_notnot(predicate_nextarg(ctx, &args));\n  153          break;\n  154        }\n  155  \n  156        case PREDICATE_NOT: {\n  157:         *pr = predicate_not(predicate_nextarg(ctx, &args));\n  158          break;\n  159        }\n  ...\n  161        case PREDICATE_ADD: {\n  162          JSValue left, right;\n  163:         left = predicate_nextarg(ctx, &args);\n  164:         right = predicate_nextarg(ctx, &args);\n  165          *pr = predicate_add(left, right);\n  166          break;\n  ...\n  169        case PREDICATE_SUB: {\n  170          JSValue left, right;\n  171:         left = predicate_nextarg(ctx, &args);\n  172:         right = predicate_nextarg(ctx, &args);\n  173          *pr = predicate_sub(left, right);\n  174          break;\n  ...\n  177        case PREDICATE_MUL: {\n  178          JSValue left, right;\n  179:         left = predicate_nextarg(ctx, &args);\n  180:         right = predicate_nextarg(ctx, &args);\n  181          *pr = predicate_mul(left, right);\n  182          break;\n  ...\n  185        case PREDICATE_DIV: {\n  186          JSValue left, right;\n  187:         left = predicate_nextarg(ctx, &args);\n  188:         right = predicate_nextarg(ctx, &args);\n  189          *pr = predicate_div(left, right);\n  190          break;\n  ...\n  193        case PREDICATE_MOD: {\n  194          JSValue left, right;\n  195:         left = predicate_nextarg(ctx, &args);\n  196:         right = predicate_nextarg(ctx, &args);\n  197          *pr = predicate_mod(left, right);\n  198          break;\n  ...\n  201        case PREDICATE_BOR: {\n  202          JSValue left, right;\n  203:         left = predicate_nextarg(ctx, &args);\n  204:         right = predicate_nextarg(ctx, &args);\n  205          *pr = predicate_bor(left, right);\n  206          break;\n  ...\n  209        case PREDICATE_BAND: {\n  210          JSValue left, right;\n  211:         left = predicate_nextarg(ctx, &args);\n  212:         right = predicate_nextarg(ctx, &args);\n  213          *pr = predicate_band(left, right);\n  214          break;\n  ...\n  239  \n  240        case PREDICATE_INSTANCEOF: {\n  241:         *pr = predicate_instanceof(predicate_nextarg(ctx, &args));\n  242          break;\n  243        }\n  244  \n  245        case PREDICATE_PROTOTYPEIS: {\n  246:         *pr = predicate_prototype(predicate_nextarg(ctx, &args));\n  247          break;\n  248        }\n  249  \n  250        case PREDICATE_EQUAL: {\n  251:         *pr = predicate_equal(predicate_nextarg(ctx, &args));\n  252          break;\n  253        }\n  ...\n  320    JSArguments args = js_arguments_new(argc, argv);\n  321    JSValue left, right;\n  322:   left = predicate_nextarg(ctx, &args);\n  323:   right = predicate_nextarg(ctx, &args);\n  324    switch(magic) {\n  325      case OPERATOR_PLUS: {\n  ...\n  441  \n  442      case PREDICATE_NOT: {\n  443:       ret = js_predicate_wrap(ctx, predicate_not(predicate_nextarg(ctx, &args)));\n  444        break;\n  445      }\n  ...\n  447      case PREDICATE_ADD: {\n  448        JSValue left, right;\n  449:       left = predicate_nextarg(ctx, &args);\n  450:       right = predicate_nextarg(ctx, &args);\n  451        ret = js_predicate_wrap(ctx, predicate_add(left, right));\n  452        break;\n  ...\n  455      case PREDICATE_SUB: {\n  456        JSValue left, right;\n  457:       left = predicate_nextarg(ctx, &args);\n  458:       right = predicate_nextarg(ctx, &args);\n  459        ret = js_predicate_wrap(ctx, predicate_sub(left, right));\n  460        break;\n  ...\n  463      case PREDICATE_MUL: {\n  464        JSValue left, right;\n  465:       left = predicate_nextarg(ctx, &args);\n  466:       right = predicate_nextarg(ctx, &args);\n  467        ret = js_predicate_wrap(ctx, predicate_mul(left, right));\n  468        break;\n  ...\n  471      case PREDICATE_DIV: {\n  472        JSValue left, right;\n  473:       left = predicate_nextarg(ctx, &args);\n  474:       right = predicate_nextarg(ctx, &args);\n  475        ret = js_predicate_wrap(ctx, predicate_div(left, right));\n  476        break;\n  ...\n  479      case PREDICATE_MOD: {\n  480        JSValue left, right;\n  481:       left = predicate_nextarg(ctx, &args);\n  482:       right = predicate_nextarg(ctx, &args);\n  483        ret = js_predicate_wrap(ctx, predicate_mod(left, right));\n  484        break;\n  ...\n  487      case PREDICATE_BOR: {\n  488        JSValue left, right;\n  489:       left = predicate_nextarg(ctx, &args);\n  490:       right = predicate_nextarg(ctx, &args);\n  491        ret = js_predicate_wrap(ctx, predicate_bor(left, right));\n  492        break;\n  ...\n  494      case PREDICATE_BAND: {\n  495        JSValue left, right;\n  496:       left = predicate_nextarg(ctx, &args);\n  497:       right = predicate_nextarg(ctx, &args);\n  498        ret = js_predicate_wrap(ctx, predicate_band(left, right));\n  499        break;\n  ...\n  501      case PREDICATE_POW: {\n  502        JSValue left, right;\n  503:       left = predicate_nextarg(ctx, &args);\n  504:       right = predicate_nextarg(ctx, &args);\n  505        ret = js_predicate_wrap(ctx, predicate_pow(left, right));\n  506        break;\n  ...\n  530  \n  531      case PREDICATE_INSTANCEOF: {\n  532:       ret = js_predicate_wrap(ctx, predicate_instanceof(predicate_nextarg(ctx, &args)));\n  533        break;\n  534      }\n  535  \n  536      case PREDICATE_PROTOTYPEIS: {\n  537:       ret = js_predicate_wrap(ctx, predicate_prototype(predicate_nextarg(ctx, &args)));\n  538        break;\n  539      }\n  540  \n  541      case PREDICATE_EQUAL: {\n  542:       ret = js_predicate_wrap(ctx, predicate_equal(predicate_nextarg(ctx, &args)));\n  543        break;\n  544      }\n  ...\n  565      case PREDICATE_SHIFT: {\n  566        int32_t shift;\n  567:       JS_ToInt32(ctx, &shift, predicate_nextarg(ctx, &args));\n  568:       ret = js_predicate_wrap(ctx, predicate_shift(shift, predicate_nextarg(ctx, &args)));\n  569        break;\n  570      }\n\n44 matches in 1 file\n",
			"settings":
			{
				"buffer_size": 6257,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
			"settings":
			{
				"buffer_size": 29773,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					29,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYQQAAAAAAABsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYQQAAAAAAABsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYQQAAAAAAABsBAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fd_set.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/timeval.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.clang-format",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeCache.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-socklen_t.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/test-socklen_t.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.prettierrc",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-fd_set.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-fdset.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_location.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/usr/include/x86_64-linux-gnu/bits/syscall.h",
		"/usr/include/x86_64-linux-gnu/sys/syscall.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inspect.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_qjsm.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/Findpigpio.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/pigpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/README",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stringdecoder.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/gpio.c"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"proto_chain",
			"protoChain",
			"COLOR_LIGHTRED",
			"toStringTag",
			"function.this_obj",
			"nextarg",
			"_shift",
			"PRECEDENCE_EQUALITY",
			"js_function_tostring",
			"PREDICATE_FUNC",
			"lerngth",
			"js_get_propertystr_int",
			"PREDICATE_SHIFT",
			"this_arg",
			"js_token_toprimitive",
			"js_token_tostring",
			"property_enumeration_circular",
			"input_skip",
			"location_clone",
			"location_copy",
			"js_location_new",
			"js_location_new_proto",
			"js_location_da",
			"js_location_from",
			"loc\\.",
			"ret\\.",
			"lexer_token",
			"js_token_to",
			"js_deep_predicate",
			"getsockopt",
			"DumpSock",
			"recv",
			"'sock'",
			"\"sock",
			"SOCKET_SHUTDOWN",
			"getsockname",
			"socket_syscall",
			"syscalls",
			"recv",
			"getsockopt",
			"setsockopt",
			"optval_buf",
			"chars",
			"js_input_buffer",
			"js_input_chars",
			"argv\\[2\\]",
			"\"setsock",
			"\"socket\"",
			"\"socket",
			"setsockopt",
			"toStringTag",
			"js_object_getpropertynames_recursive",
			"proto_chain",
			"format",
			"struct JSRun",
			"include_dir",
			"QUICKJS_INCLUDE_DIR",
			"INCLUDE_DIR",
			"LIBRARY_DIR",
			": ",
			"\"QuickJS ",
			"install dir",
			"QUICKJS_INCLUDE_DIR",
			"CheckIncludeFile",
			"include_dir",
			"make_module",
			"^\\s*add_",
			"target_",
			"/modules",
			"QJSC",
			"std.in",
			"GetExc",
			"Column",
			"JS_GetProto",
			"isObj",
			"IsBigInt",
			"class_id",
			"cfunc",
			"JS_IsCFunction",
			"CFunction",
			"isCFunction",
			"ISEM",
			"HTMLDDA",
			"IsReg",
			"IsEx",
			"\"is",
			"Constructor",
			"getPrototypeChain",
			"hasPrototype",
			"getConstructorChain",
			"filter",
			"js_object_construct",
			"'main",
			"Exception:",
			"TOKEN_PROP",
			"\"byte_offset\"",
			"dump_err",
			"dump_error",
			"js_std_",
			"realpath",
			"pow",
			"SockAddr\\* a",
			"sa;",
			"sa->s[^a]",
			"sa->s",
			"socket_send",
			"SOCKET_",
			"_PROP",
			"SOCKADDR_PROP",
			"SOCKET_METHOD_RECVFROM",
			"JS_NewArrayBuffer",
			"^js_strv",
			"js_strv",
			"argv_free",
			"js_is_nullis",
			"528",
			"\"jsm*_module_lo",
			"\"js_module_lo",
			"\"js_module",
			"FD_SETSIZE",
			"struct ",
			"import_",
			"array_to",
			"LOAD_MOD",
			"path;",
			"\"js_eval",
			"import_def",
			"import"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"length",
			"loc->",
			"ret->",
			"arg",
			" ",
			"",
			"\"\\\\t",
			"\"\\t",
			"imp.",
			"ctx,",
			"",
			"JSValueConst)",
			"",
			"jsm_module_loader",
			"js_module_loader_so",
			"js_eval_file",
			"js_eval_buf",
			"js_load_script",
			"jsm_eval_script",
			"js_eval_file",
			"js_load_module",
			"js_eval_str",
			"js_module_get",
			"JSValueConst)",
			"js_module_search",
			"jsm_module_find",
			"js_module_find",
			"js_load_",
			"js_load_module",
			"js_eval_buf",
			"js_load_script",
			"js_std_dump_error",
			"js_module_exports",
			"fdset",
			" ",
			"js_input_buffer",
			"\\1(\\2, sock",
			"\\1(",
			"",
			"JS_CGETSET_MAGIC_DEF",
			"off.",
			"} else if(",
			"port",
			".buf",
			"'",
			"",
			"socket_send",
			"0x00",
			" 0x00,",
			"0x78,",
			"0x78",
			" 0x00,",
			"0x78",
			"JS_CGETSET_MAGIC_DEF",
			"socket_syscalls_size",
			"js_syscallerror_get, js_syscallerror_set,",
			"js_socket_get, js_socket_set, ",
			"e",
			"js_syscallerror_proto_funcs",
			"s.fd",
			"js_socket_proto_funcs",
			"\"",
			"SYSCALLERROR_VALUEOF",
			"s, ",
			"JS_SOCKETCALL",
			"JS_SOCKETCALL_RETURN",
			"js_socket_data2(ctx",
			"sa->family",
			"QUICKJS_SYSCALLERROR_H",
			"data2",
			"js_syscallerror_data2",
			"QUICKJS_MISC_H",
			"js_sockets_defines",
			"js_sockaddr_data2",
			"js_sockaddr_data",
			"SockAddr",
			"struct sockaddr*",
			"sockets_init",
			"argv[i]",
			"pigpio",
			"CHAR_UTILS",
			"${util_SOURCES}",
			"ol.",
			"range_from",
			".range.length",
			".range.offset",
			"input_buffer_length(in)",
			"input_buffer_data(in)",
			"blob",
			"location->vec",
			"location",
			"Location",
			"r->data\\1",
			" this.fs.",
			"stringdecoder",
			"js_stringdecoder_set",
			"js_stringdecoder_get",
			"stringdecoder",
			"\\1if(gpio->debug) fprintf",
			"struct gpio",
			"struct GPIO",
			"struct GPIO*",
			"ctx->rt",
			"",
			": ",
			"\"",
			"ret = \\1;",
			"->errnum",
			"(",
			"error",
			"JS_NewInt32",
			"",
			",",
			"left, right",
			"predicate_nextarg(ctx, &args)",
			"predicate_nextarg(ctx, &args),predicate_nextarg(ctx, &args))",
			"predicate_argument_shift(ctx, &args)",
			"js_arguments_shift(&args)",
			"",
			"ret = PRECEDENCE_",
			"args",
			"",
			"dbuf",
			": left",
			"pred",
			"args->",
			"r",
			"predicate_value"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1459,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									419,
									431
								],
								[
									528,
									540
								],
								[
									548,
									568
								],
								[
									850,
									868
								],
								[
									1247,
									1264
								],
								[
									1552,
									1568
								],
								[
									1802,
									1819
								],
								[
									2512,
									2526
								],
								[
									3730,
									3750
								],
								[
									4551,
									4579
								],
								[
									5240,
									5261
								],
								[
									6470,
									6496
								],
								[
									6678,
									6703
								],
								[
									6831,
									6856
								],
								[
									7198,
									7210
								],
								[
									8703,
									8717
								],
								[
									9970,
									9981
								],
								[
									10069,
									10081
								],
								[
									10298,
									10309
								],
								[
									10921,
									10932
								],
								[
									11020,
									11032
								],
								[
									11258,
									11269
								],
								[
									11886,
									11899
								],
								[
									11987,
									12001
								],
								[
									12220,
									12233
								],
								[
									12817,
									12832
								],
								[
									14367,
									14381
								],
								[
									15051,
									15066
								],
								[
									16129,
									16143
								],
								[
									17897,
									17912
								],
								[
									18079,
									18092
								],
								[
									18216,
									18228
								],
								[
									21070,
									21082
								],
								[
									22076,
									22090
								],
								[
									22120,
									22134
								]
							],
							"symlist":
							[
								"‚Äî‚í∏‚Äì DeepIterator { ‚Ä¶ } ; ‚Äî type",
								"\t‚ìâ  DeepIterator ; ‚Äî typedef",
								"‚Äî‚í∏‚Äì deep_iterator_return { ‚Ä¶ } ; ‚Äî type",
								"‚Äî‚íª‚Äì js_deep_parseflags ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_thisflags ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_getflags ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_predicate ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_return ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_iterator_new ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_iterator_constructor ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_iterator_next ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_iterator_finalizer ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_iterator_iterator ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_iterator_tostring ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_find ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_select ( ) { ‚Ä¶ } ‚Äî function",
								"\t‚í°  js_deep_get ( ) ; ‚Äî function declaration",
								"‚Äî‚íª‚Äì js_deep_get2 ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_get ( ) { ‚Ä¶ } ‚Äî function",
								"\t‚í°  js_deep_set ( ) ; ‚Äî function declaration",
								"‚Äî‚íª‚Äì js_deep_set2 ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_set ( ) { ‚Ä¶ } ‚Äî function",
								"\t‚í°  js_deep_unset ( ) ; ‚Äî function declaration",
								"‚Äî‚íª‚Äì js_deep_unset2 ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_unset ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_flatten ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_pathof ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_foreach ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_equals ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_iterate ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_clone ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_call ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_deep_init ( ) { ‚Ä¶ } ‚Äî function",
								"\t‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object",
								"\t‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 3,
							"tabs_extra_last_activated": 1632285294.77,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31291,
						"regions":
						{
						},
						"selection":
						[
							[
								3509,
								3509
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632282628.36,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2106.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53797,
						"regions":
						{
						},
						"selection":
						[
							[
								41943,
								41946
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632282602.73,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 28016.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "predicate.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29695,
						"regions":
						{
						},
						"selection":
						[
							[
								9195,
								9195
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632283126.86,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5049.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "predicate.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10718,
						"regions":
						{
						},
						"selection":
						[
							[
								1329,
								1329
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632283189.16,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1020.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs-predicate.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29773,
						"regions":
						{
						},
						"selection":
						[
							[
								19708,
								19708
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632285291.67,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11594.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs-inspect.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34304,
						"regions":
						{
						},
						"selection":
						[
							[
								24513,
								24569
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632304281.33,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14072.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "quickjs-archive.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38547,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632304281.85,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs-bjson.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2979,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632304282.53,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1083.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "quickjs-blob.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1105,
						"regions":
						{
						},
						"selection":
						[
							[
								86,
								86
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632304299.22,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 228.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "quickjs-deep.c",
					"selected": true,
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 22514,
						"regions":
						{
							"col_FFFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										771,
										779
									],
									[
										5608,
										5616
									]
								],
								"scope": "col_FFFFFFFF"
							},
							"col_FFFFFFFF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_FFFFFFFF_circle.png",
								"regions":
								[
									[
										753,
										753
									],
									[
										5568,
										5568
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								2305,
								2305
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632317621.09,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1482.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6257,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										175,
										182
									],
									[
										413,
										420
									],
									[
										560,
										567
									],
									[
										728,
										735
									],
									[
										782,
										789
									],
									[
										983,
										990
									],
									[
										1037,
										1044
									],
									[
										1238,
										1245
									],
									[
										1292,
										1299
									],
									[
										1493,
										1500
									],
									[
										1547,
										1554
									],
									[
										1748,
										1755
									],
									[
										1802,
										1809
									],
									[
										2003,
										2010
									],
									[
										2057,
										2064
									],
									[
										2259,
										2266
									],
									[
										2313,
										2320
									],
									[
										2514,
										2521
									],
									[
										2675,
										2682
									],
									[
										2826,
										2833
									],
									[
										3005,
										3012
									],
									[
										3053,
										3060
									],
									[
										3245,
										3252
									],
									[
										3404,
										3411
									],
									[
										3456,
										3463
									],
									[
										3671,
										3678
									],
									[
										3723,
										3730
									],
									[
										3938,
										3945
									],
									[
										3990,
										3997
									],
									[
										4205,
										4212
									],
									[
										4257,
										4264
									],
									[
										4472,
										4479
									],
									[
										4524,
										4531
									],
									[
										4739,
										4746
									],
									[
										4791,
										4798
									],
									[
										5007,
										5014
									],
									[
										5059,
										5066
									],
									[
										5275,
										5282
									],
									[
										5327,
										5334
									],
									[
										5566,
										5573
									],
									[
										5743,
										5750
									],
									[
										5910,
										5917
									],
									[
										6082,
										6089
									],
									[
										6179,
										6186
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								181,
								181
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1632282620.0,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 29773,
						"regions":
						{
						},
						"selection":
						[
							[
								1121,
								1132
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632282622.11,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 440.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.721299893573,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"utils.h",
				"utils.h"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"parser.js",
				"lib/parser.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"conso",
				"lib/console.js"
			],
			[
				"clang-f",
				".clang-format"
			],
			[
				"quickjs.h",
				"~/Sources/plot-cv/quickjs/quickjs.h"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"test_mi",
				"tests/test_misc.js"
			],
			[
				"ockets.",
				"quickjs-sockets.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"test_loca",
				"tests/test_location.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				".clang-fo",
				".clang-format"
			],
			[
				"buff",
				"buffer-utils.c"
			],
			[
				"buffer-util",
				"buffer-utils.c"
			],
			[
				"buffer-utils.c",
				"buffer-utils.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-so",
				"quickjs-sockets.c"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"quickjs-insp",
				"quickjs-inspect.c"
			],
			[
				"test_soc",
				"tests/test_sockets.js"
			],
			[
				"",
				"CMakeLists.txt"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"test_qjsm",
				"tests/test_qjsm.js"
			],
			[
				"buffer-tu",
				"buffer-utils.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"repl.",
				"lib/repl.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"quickjs-blo",
				"quickjs-blob.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"test_mis",
				"tests/test_misc.js"
			],
			[
				"test_blob",
				"tests/test_blob.js"
			],
			[
				"test_string",
				"tests/test_stringdecoder.js"
			],
			[
				"test_str",
				"tests/test_stringdecoder.js"
			],
			[
				"quickjs-blb",
				"quickjs-blob.h"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"ringbuffer.h",
				"ringbuffer.h"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjsmo",
				"cmake/QuickJSModule.cmake"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
