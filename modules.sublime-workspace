{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_Set",
				"JS_SetPropertyStr"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"js_sys",
				"js_syscallerror_get"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_",
				"js_sockaddr_class_id"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewStringLen"
			],
			[
				"JS_",
				"JS_GetPropertyUint32"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"get",
				"getOwnPropertyNames"
			],
			[
				"JS_Thr",
				"JS_ThrowInternalError"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "‚Äî‚ìÇ‚Äì INSPECT_INT32T_INRANGE ( ) ‚Ä¶ ‚Äî macro function\n‚Äî‚ìÇ‚Äì INSPECT_LEVEL ( ) ‚Ä¶ ‚Äî macro function\n‚Äî‚ìÇ‚Äì INSPECT_IS_COMPACT ( ) ‚Ä¶ ‚Äî macro function\n   ‚ìâ  inspect_options_t ; ‚Äî typedef\n   ‚íû  prop_key ; ‚Äî type declaration\n‚Äî‚í∏‚Äì prop_key { ‚Ä¶ } ; ‚Äî type\n   ‚ìâ  prop_key_t ; ‚Äî typedef\n   ‚í°  js_inspect_print ( ) ; ‚Äî function declaration\n‚Äî‚íª‚Äì regexp_predicate ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì inspect_screen_width ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì inspect_options_init ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì inspect_options_free ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì inspect_options_get ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì inspect_options_object ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì inspect_options_hidden ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì inspect_newline ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_object_getpropertynames ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_object_getpropertynames_recursive ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_custom_atom ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_custom_call ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_map ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_set ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_arraybuffer ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_regexp ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_number ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_string ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_print ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_tostring ( ) { ‚Ä¶ } ‚Äî function\n   ‚í°  js_debugger_build_backtrace ( ) ; ‚Äî function declaration\n‚Äî‚íª‚Äì js_inspect_stacktrace_value ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_stacktrace ( ) { ‚Ä¶ } ‚Äî function\n‚Äî‚íª‚Äì js_inspect_init ( ) { ‚Ä¶ } ‚Äî function\n   ‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object\n   ‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object",
			"settings":
			{
				"buffer_size": 1549,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					323,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					324,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
						"symkeys":
						[
							[
								24,
								31
							],
							[
								278,
								286
							],
							[
								363,
								370
							],
							[
								443,
								456
							],
							[
								539,
								551
							],
							[
								674,
								686
							],
							[
								726,
								738
							],
							[
								821,
								831
							],
							[
								1370,
								1382
							],
							[
								1393,
								1418
							],
							[
								2153,
								2179
							],
							[
								2913,
								2931
							],
							[
								3371,
								3382
							],
							[
								3495,
								3502
							],
							[
								3533,
								3539
							],
							[
								3554,
								3561
							],
							[
								3609,
								3615
							],
							[
								3686,
								3693
							],
							[
								3755,
								3762
							],
							[
								3902,
								3915
							],
							[
								3964,
								3973
							],
							[
								4000,
								4013
							],
							[
								4142,
								4157
							],
							[
								4319,
								4331
							],
							[
								4433,
								4449
							],
							[
								4645,
								4656
							],
							[
								4685,
								4701
							],
							[
								4833,
								4851
							],
							[
								5023,
								5038
							],
							[
								5153,
								5172
							],
							[
								5362,
								5370
							],
							[
								5466,
								5475
							],
							[
								5540,
								5549
							],
							[
								5613,
								5623
							],
							[
								5699,
								5708
							],
							[
								5795,
								5804
							],
							[
								5824,
								5835
							],
							[
								5855,
								5867
							],
							[
								5887,
								5897
							],
							[
								5917,
								5930
							],
							[
								5950,
								5962
							],
							[
								5982,
								5997
							],
							[
								6017,
								6027
							],
							[
								6049,
								6059
							],
							[
								6078,
								6092
							],
							[
								6115,
								6131
							],
							[
								6153,
								6170
							],
							[
								6192,
								6207
							],
							[
								6229,
								6247
							],
							[
								6269,
								6286
							],
							[
								6308,
								6319
							],
							[
								6343,
								6350
							],
							[
								6367,
								6379
							],
							[
								6435,
								6449
							],
							[
								6539,
								6554
							],
							[
								6661,
								6673
							],
							[
								6822,
								6828
							],
							[
								6835,
								6856
							],
							[
								6874,
								6897
							],
							[
								6919,
								6935
							],
							[
								6991,
								7007
							],
							[
								7043,
								7057
							],
							[
								7094,
								7109
							],
							[
								7158,
								7172
							],
							[
								7251,
								7262
							],
							[
								7345,
								7358
							],
							[
								7417,
								7430
							],
							[
								7664,
								7683
							],
							[
								7731,
								7742
							],
							[
								8207,
								8217
							],
							[
								9051,
								9069
							],
							[
								9099,
								9116
							],
							[
								9177,
								9195
							],
							[
								9304,
								9317
							],
							[
								9389,
								9403
							],
							[
								9745,
								9760
							],
							[
								10163,
								10181
							],
							[
								10210,
								10226
							],
							[
								10429,
								10441
							],
							[
								10517,
								10529
							],
							[
								10620,
								10632
							],
							[
								10689,
								10711
							],
							[
								10735,
								10748
							],
							[
								10782,
								10798
							],
							[
								10832,
								10847
							],
							[
								10902,
								10916
							],
							[
								10962,
								10976
							],
							[
								11023,
								11036
							],
							[
								11094,
								11108
							],
							[
								11168,
								11185
							],
							[
								11243,
								11258
							],
							[
								11295,
								11308
							],
							[
								11379,
								11393
							],
							[
								11434,
								11448
							],
							[
								11479,
								11495
							],
							[
								11519,
								11534
							],
							[
								11611,
								11625
							],
							[
								11803,
								11820
							],
							[
								12012,
								12027
							],
							[
								12196,
								12206
							],
							[
								12333,
								12347
							],
							[
								12645,
								12656
							],
							[
								12761,
								12776
							],
							[
								13216,
								13228
							],
							[
								13333,
								13350
							],
							[
								13744,
								13759
							],
							[
								13831,
								13853
							],
							[
								14011,
								14032
							],
							[
								14186,
								14206
							],
							[
								14347,
								14367
							],
							[
								14504,
								14522
							],
							[
								14565,
								14583
							],
							[
								14772,
								14785
							],
							[
								15390,
								15406
							],
							[
								16551,
								16572
							],
							[
								16766,
								16789
							],
							[
								16982,
								17005
							],
							[
								17074,
								17098
							],
							[
								17287,
								17311
							],
							[
								17360,
								17386
							],
							[
								18126,
								18147
							],
							[
								18220,
								18246
							],
							[
								18408,
								18422
							],
							[
								18449,
								18472
							],
							[
								18535,
								18554
							],
							[
								18603,
								18623
							],
							[
								18668,
								18690
							],
							[
								18733,
								18754
							],
							[
								18795,
								18809
							],
							[
								18850,
								18864
							],
							[
								18908,
								18926
							],
							[
								18970,
								18985
							],
							[
								19029,
								19045
							],
							[
								19103,
								19116
							],
							[
								19162,
								19180
							],
							[
								19228,
								19255
							],
							[
								19281,
								19307
							],
							[
								19334,
								19353
							],
							[
								19413,
								19429
							],
							[
								19559,
								19572
							],
							[
								19624,
								19645
							],
							[
								19766,
								19781
							],
							[
								19801,
								19816
							],
							[
								19848,
								19861
							],
							[
								19905,
								19920
							],
							[
								19982,
								19995
							],
							[
								20057,
								20072
							],
							[
								20123,
								20138
							],
							[
								20192,
								20207
							],
							[
								20372,
								20388
							],
							[
								20415,
								20436
							],
							[
								20485,
								20497
							],
							[
								20557,
								20573
							],
							[
								20624,
								20641
							],
							[
								20685,
								20703
							],
							[
								20753,
								20769
							],
							[
								20819,
								20839
							],
							[
								20882,
								20902
							],
							[
								20947,
								20966
							],
							[
								21008,
								21020
							],
							[
								21083,
								21102
							],
							[
								21147,
								21162
							],
							[
								21209,
								21224
							],
							[
								21262,
								21276
							],
							[
								21506,
								21520
							],
							[
								21687,
								21705
							],
							[
								21763,
								21786
							],
							[
								21844,
								21869
							],
							[
								21939,
								21961
							],
							[
								22029,
								22054
							],
							[
								22130,
								22158
							],
							[
								22253,
								22279
							],
							[
								22335,
								22359
							],
							[
								22419,
								22445
							],
							[
								22511,
								22540
							],
							[
								22614,
								22639
							],
							[
								22699,
								22727
							],
							[
								22803,
								22827
							],
							[
								22890,
								22915
							],
							[
								22973,
								22998
							],
							[
								23095,
								23116
							],
							[
								23442,
								23466
							],
							[
								23739,
								23761
							],
							[
								23890,
								23901
							],
							[
								23937,
								23951
							],
							[
								23968,
								23980
							],
							[
								24019,
								24032
							],
							[
								24076,
								24089
							],
							[
								24141,
								24158
							],
							[
								24257,
								24273
							],
							[
								24407,
								24424
							],
							[
								24457,
								24480
							],
							[
								24513,
								24522
							],
							[
								24555,
								24564
							],
							[
								24597,
								24612
							],
							[
								24645,
								24657
							],
							[
								24690,
								24703
							],
							[
								24736,
								24750
							],
							[
								24798,
								24821
							],
							[
								24918,
								24931
							],
							[
								25298,
								25310
							],
							[
								25387,
								25400
							],
							[
								25581,
								25604
							],
							[
								25630,
								25655
							],
							[
								25693,
								25710
							],
							[
								25906,
								25922
							],
							[
								26128,
								26139
							],
							[
								26246,
								26257
							],
							[
								26300,
								26315
							],
							[
								26363,
								26379
							],
							[
								26437,
								26452
							],
							[
								26495,
								26509
							],
							[
								26555,
								26569
							],
							[
								26592,
								26603
							],
							[
								26640,
								26654
							],
							[
								26692,
								26704
							],
							[
								26740,
								26755
							],
							[
								26793,
								26809
							],
							[
								26848,
								26864
							],
							[
								26900,
								26916
							],
							[
								26970,
								26984
							],
							[
								27036,
								27049
							],
							[
								27118,
								27127
							],
							[
								27241,
								27262
							],
							[
								27415,
								27440
							],
							[
								27497,
								27520
							],
							[
								27779,
								27801
							],
							[
								28080,
								28091
							],
							[
								28126,
								28141
							],
							[
								28175,
								28195
							],
							[
								28236,
								28257
							],
							[
								28305,
								28320
							],
							[
								28355,
								28367
							],
							[
								28410,
								28426
							],
							[
								28459,
								28483
							],
							[
								28530,
								28554
							],
							[
								28615,
								28625
							],
							[
								28668,
								28684
							],
							[
								28949,
								28964
							],
							[
								28975,
								28986
							],
							[
								29026,
								29040
							],
							[
								29076,
								29087
							],
							[
								29123,
								29132
							],
							[
								29168,
								29182
							],
							[
								29228,
								29243
							],
							[
								29265,
								29281
							],
							[
								29328,
								29346
							],
							[
								29393,
								29407
							],
							[
								29454,
								29471
							],
							[
								29518,
								29531
							],
							[
								29567,
								29579
							],
							[
								29613,
								29629
							],
							[
								29662,
								29682
							],
							[
								29732,
								29751
							],
							[
								29823,
								29836
							],
							[
								29877,
								29891
							],
							[
								29926,
								29940
							],
							[
								29984,
								30008
							],
							[
								30065,
								30091
							],
							[
								30142,
								30158
							],
							[
								30249,
								30268
							],
							[
								30304,
								30318
							],
							[
								30365,
								30379
							],
							[
								30449,
								30460
							],
							[
								30542,
								30553
							],
							[
								30618,
								30628
							],
							[
								30640,
								30660
							],
							[
								30687,
								30702
							],
							[
								30733,
								30746
							],
							[
								30778,
								30793
							],
							[
								30823,
								30835
							],
							[
								30857,
								30868
							],
							[
								30889,
								30899
							],
							[
								30937,
								30956
							],
							[
								30985,
								31004
							],
							[
								31034,
								31049
							],
							[
								31074,
								31094
							],
							[
								31124,
								31137
							],
							[
								31178,
								31195
							],
							[
								31223,
								31237
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉUTILS_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉoffsetof‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉinrange‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉtrim_dotslash‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉprecedence‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉJSPrecedence‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CGETSET_ENUMERABLE_DEF‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CGETSET_MAGIC_FLAGS_DEF‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CFUNC_DEF_FLAGS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CONSTANT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉVISIBLE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHIDDEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉVISIBLE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHIDDEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉMAX_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉMIN_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉIteratorValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉArguments‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉarguments_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_shift‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_at‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_shiftn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉJSArguments‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_shift‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_at‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_shiftn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmin_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉabs_int64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉabs_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsign_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmod_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_RED‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_GREEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_YELLOW‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_BLUE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_MAGENTA‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_MARINE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTGRAY‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_GRAY‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_NONE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTRED‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTGREEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTYELLOW‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTBLUE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTMAGENTA‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTMARINE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_WHITE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉtime_us‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉarray_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚ìÇ‚Äì‚ÄÉarray_contains‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉjs_dbuf_init_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_dbuf_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉRegExp‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_flags_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_flags_fromstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_from_argv‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_from_dbuf‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_compile‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_to_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_free_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_global_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_global_prototype‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉvalue_types‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉvalue_mask‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_flag‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_type2flag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_types‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_typeof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_typestr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_ptr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_has_ref_count‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_free_rt‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_equals‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_clone‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_toarray‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_fwrite‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_ptr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_newlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_toint64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_towstringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_towstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_tosize‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_todouble_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_toint64_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tobool_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_toatom_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_from_char‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_cmpstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_VALUE_FREE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_VALUE_FREE_RT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_set‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_clear‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_isset‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_set‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_get‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_clear‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_propertyenums_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_propertydescriptor_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_ctor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_invoke_static‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_to_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_to_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_static_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_static_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_iterable‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_iterator‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_method‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_next‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_for‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_for_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_operatorset_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_operatorset_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_operators_create‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_int64_default‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_number_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_new_bool_or_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_ATOM_TAG_INT‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_ATOM_MAX_INT‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_isint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_fromint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_toint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_toint64‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_toint32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_tovalue‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_tobinary‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_to_cstringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_is_index‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_is_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_isnative‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_classname‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_is‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_construct‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_error‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_stack‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_same‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_has_propertystr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_bool‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertyint_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertyint_int‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertystr_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertystr_stringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertyint_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertyint_int32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_cstringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_stringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_int32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_uint64‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertydescriptor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_inspect_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_tostringtag_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_tostringtag_str‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_id‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_newid‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_isclass‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_isclass‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_arraybuffer‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_sharedarraybuffer‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_map‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_set‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_generator‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_regexp‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_promise‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_dataview‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_null_or_undefined‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_falsish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_truish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_nullish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_typedarray_prototype‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_typedarray_constructor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_basic_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_typedarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_input‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_propenum_cmp‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_equals‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_clear‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free_n‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free_rt‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_to_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_intv_to_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_to_argv‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_copys‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_copys‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_invoke‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_bytelength‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_find_cfunction_entry‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_find_cfunction_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_ms‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_time_ns‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_timespec‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_gettime‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_time‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_timespec‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_freevalue‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_fromvalue‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_map_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉimport_directive‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉImportDirective‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_namestr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_func‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_ns‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_exports‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_list‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_entries‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_map‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_object‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_object‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_entry‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_search_ext‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_normalize‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_def‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_find‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_import_eval‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import_default‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import_namespace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_loader_so‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_module‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_binary‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_buf‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_str‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_time_ms‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_interrupt_handler‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_timer_unlink‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_timer_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_call_handler‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_alloc‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_new_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_dup_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_free_message‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_free_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_error_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_error_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_error_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration"
						]
					},
					"AQAAAAAAAAAAAAAAxzMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					325,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					326,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
						"symkeys":
						[
							[
								24,
								31
							],
							[
								278,
								286
							],
							[
								363,
								370
							],
							[
								443,
								456
							],
							[
								539,
								551
							],
							[
								674,
								686
							],
							[
								726,
								738
							],
							[
								821,
								831
							],
							[
								1370,
								1382
							],
							[
								1393,
								1418
							],
							[
								2153,
								2179
							],
							[
								2913,
								2931
							],
							[
								3371,
								3382
							],
							[
								3495,
								3502
							],
							[
								3533,
								3539
							],
							[
								3554,
								3561
							],
							[
								3609,
								3615
							],
							[
								3686,
								3693
							],
							[
								3755,
								3762
							],
							[
								3902,
								3915
							],
							[
								3964,
								3973
							],
							[
								4000,
								4013
							],
							[
								4142,
								4157
							],
							[
								4319,
								4331
							],
							[
								4433,
								4449
							],
							[
								4645,
								4656
							],
							[
								4685,
								4701
							],
							[
								4833,
								4851
							],
							[
								5023,
								5038
							],
							[
								5153,
								5172
							],
							[
								5362,
								5370
							],
							[
								5466,
								5475
							],
							[
								5540,
								5549
							],
							[
								5613,
								5623
							],
							[
								5699,
								5708
							],
							[
								5795,
								5804
							],
							[
								5824,
								5835
							],
							[
								5855,
								5867
							],
							[
								5887,
								5897
							],
							[
								5917,
								5930
							],
							[
								5950,
								5962
							],
							[
								5982,
								5997
							],
							[
								6017,
								6027
							],
							[
								6049,
								6059
							],
							[
								6078,
								6092
							],
							[
								6115,
								6131
							],
							[
								6153,
								6170
							],
							[
								6192,
								6207
							],
							[
								6229,
								6247
							],
							[
								6269,
								6286
							],
							[
								6308,
								6319
							],
							[
								6343,
								6350
							],
							[
								6367,
								6379
							],
							[
								6435,
								6449
							],
							[
								6539,
								6554
							],
							[
								6661,
								6673
							],
							[
								6822,
								6828
							],
							[
								6835,
								6856
							],
							[
								6874,
								6897
							],
							[
								6919,
								6935
							],
							[
								6991,
								7007
							],
							[
								7043,
								7057
							],
							[
								7094,
								7109
							],
							[
								7158,
								7172
							],
							[
								7251,
								7262
							],
							[
								7345,
								7358
							],
							[
								7417,
								7430
							],
							[
								7664,
								7683
							],
							[
								7731,
								7742
							],
							[
								8207,
								8217
							],
							[
								9051,
								9069
							],
							[
								9099,
								9116
							],
							[
								9177,
								9195
							],
							[
								9304,
								9317
							],
							[
								9389,
								9403
							],
							[
								9745,
								9760
							],
							[
								10163,
								10181
							],
							[
								10210,
								10226
							],
							[
								10429,
								10441
							],
							[
								10517,
								10529
							],
							[
								10620,
								10632
							],
							[
								10689,
								10711
							],
							[
								10735,
								10748
							],
							[
								10782,
								10798
							],
							[
								10832,
								10847
							],
							[
								10902,
								10916
							],
							[
								10962,
								10976
							],
							[
								11023,
								11036
							],
							[
								11094,
								11108
							],
							[
								11168,
								11185
							],
							[
								11243,
								11258
							],
							[
								11295,
								11308
							],
							[
								11379,
								11393
							],
							[
								11434,
								11448
							],
							[
								11479,
								11495
							],
							[
								11519,
								11534
							],
							[
								11611,
								11625
							],
							[
								11803,
								11820
							],
							[
								12012,
								12027
							],
							[
								12196,
								12206
							],
							[
								12333,
								12347
							],
							[
								12645,
								12656
							],
							[
								12761,
								12776
							],
							[
								13216,
								13228
							],
							[
								13333,
								13350
							],
							[
								13744,
								13759
							],
							[
								13831,
								13853
							],
							[
								14011,
								14032
							],
							[
								14186,
								14206
							],
							[
								14347,
								14367
							],
							[
								14504,
								14522
							],
							[
								14565,
								14583
							],
							[
								14772,
								14785
							],
							[
								15390,
								15406
							],
							[
								16551,
								16572
							],
							[
								16766,
								16789
							],
							[
								16982,
								17005
							],
							[
								17074,
								17098
							],
							[
								17287,
								17311
							],
							[
								17360,
								17386
							],
							[
								18126,
								18147
							],
							[
								18220,
								18246
							],
							[
								18408,
								18422
							],
							[
								18449,
								18472
							],
							[
								18535,
								18554
							],
							[
								18603,
								18623
							],
							[
								18668,
								18690
							],
							[
								18733,
								18754
							],
							[
								18795,
								18809
							],
							[
								18850,
								18864
							],
							[
								18908,
								18926
							],
							[
								18970,
								18985
							],
							[
								19029,
								19045
							],
							[
								19103,
								19116
							],
							[
								19162,
								19180
							],
							[
								19228,
								19255
							],
							[
								19281,
								19307
							],
							[
								19334,
								19353
							],
							[
								19413,
								19429
							],
							[
								19559,
								19572
							],
							[
								19624,
								19645
							],
							[
								19766,
								19781
							],
							[
								19801,
								19816
							],
							[
								19848,
								19861
							],
							[
								19905,
								19920
							],
							[
								19982,
								19995
							],
							[
								20057,
								20072
							],
							[
								20123,
								20138
							],
							[
								20192,
								20207
							],
							[
								20372,
								20388
							],
							[
								20415,
								20436
							],
							[
								20485,
								20497
							],
							[
								20557,
								20573
							],
							[
								20624,
								20641
							],
							[
								20685,
								20703
							],
							[
								20753,
								20769
							],
							[
								20819,
								20839
							],
							[
								20882,
								20902
							],
							[
								20947,
								20966
							],
							[
								21008,
								21020
							],
							[
								21083,
								21102
							],
							[
								21147,
								21162
							],
							[
								21209,
								21224
							],
							[
								21262,
								21276
							],
							[
								21506,
								21520
							],
							[
								21687,
								21705
							],
							[
								21763,
								21786
							],
							[
								21844,
								21869
							],
							[
								21939,
								21961
							],
							[
								22029,
								22054
							],
							[
								22130,
								22158
							],
							[
								22253,
								22279
							],
							[
								22335,
								22359
							],
							[
								22419,
								22445
							],
							[
								22511,
								22540
							],
							[
								22614,
								22639
							],
							[
								22699,
								22727
							],
							[
								22803,
								22827
							],
							[
								22890,
								22915
							],
							[
								22973,
								22998
							],
							[
								23095,
								23116
							],
							[
								23442,
								23466
							],
							[
								23739,
								23761
							],
							[
								23890,
								23901
							],
							[
								23937,
								23951
							],
							[
								23968,
								23980
							],
							[
								24019,
								24032
							],
							[
								24076,
								24089
							],
							[
								24141,
								24158
							],
							[
								24257,
								24273
							],
							[
								24407,
								24424
							],
							[
								24457,
								24480
							],
							[
								24513,
								24522
							],
							[
								24555,
								24564
							],
							[
								24597,
								24612
							],
							[
								24645,
								24657
							],
							[
								24690,
								24703
							],
							[
								24736,
								24750
							],
							[
								24798,
								24821
							],
							[
								24918,
								24931
							],
							[
								25298,
								25310
							],
							[
								25387,
								25400
							],
							[
								25581,
								25604
							],
							[
								25630,
								25655
							],
							[
								25693,
								25710
							],
							[
								25906,
								25922
							],
							[
								26128,
								26139
							],
							[
								26246,
								26257
							],
							[
								26300,
								26315
							],
							[
								26363,
								26379
							],
							[
								26437,
								26452
							],
							[
								26495,
								26509
							],
							[
								26555,
								26569
							],
							[
								26592,
								26603
							],
							[
								26640,
								26654
							],
							[
								26692,
								26704
							],
							[
								26740,
								26755
							],
							[
								26793,
								26809
							],
							[
								26848,
								26864
							],
							[
								26900,
								26916
							],
							[
								26970,
								26984
							],
							[
								27036,
								27049
							],
							[
								27118,
								27127
							],
							[
								27241,
								27262
							],
							[
								27415,
								27440
							],
							[
								27497,
								27520
							],
							[
								27779,
								27801
							],
							[
								28080,
								28091
							],
							[
								28126,
								28141
							],
							[
								28175,
								28195
							],
							[
								28236,
								28257
							],
							[
								28305,
								28320
							],
							[
								28355,
								28367
							],
							[
								28410,
								28426
							],
							[
								28459,
								28483
							],
							[
								28530,
								28554
							],
							[
								28615,
								28625
							],
							[
								28668,
								28684
							],
							[
								28949,
								28964
							],
							[
								28975,
								28986
							],
							[
								29026,
								29040
							],
							[
								29076,
								29087
							],
							[
								29123,
								29132
							],
							[
								29168,
								29182
							],
							[
								29228,
								29243
							],
							[
								29265,
								29281
							],
							[
								29328,
								29346
							],
							[
								29393,
								29407
							],
							[
								29454,
								29471
							],
							[
								29518,
								29531
							],
							[
								29567,
								29579
							],
							[
								29613,
								29629
							],
							[
								29662,
								29682
							],
							[
								29732,
								29751
							],
							[
								29823,
								29836
							],
							[
								29877,
								29891
							],
							[
								29926,
								29940
							],
							[
								29984,
								30008
							],
							[
								30065,
								30091
							],
							[
								30142,
								30158
							],
							[
								30249,
								30268
							],
							[
								30304,
								30318
							],
							[
								30365,
								30379
							],
							[
								30449,
								30460
							],
							[
								30542,
								30553
							],
							[
								30618,
								30628
							],
							[
								30640,
								30660
							],
							[
								30687,
								30702
							],
							[
								30733,
								30746
							],
							[
								30778,
								30793
							],
							[
								30823,
								30835
							],
							[
								30857,
								30868
							],
							[
								30889,
								30899
							],
							[
								30937,
								30956
							],
							[
								30985,
								31004
							],
							[
								31034,
								31049
							],
							[
								31074,
								31094
							],
							[
								31124,
								31137
							],
							[
								31178,
								31195
							],
							[
								31223,
								31237
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉUTILS_H‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉoffsetof‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉinrange‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉtrim_dotslash‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉthread_local‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉprecedence‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉJSPrecedence‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CGETSET_ENUMERABLE_DEF‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CGETSET_MAGIC_FLAGS_DEF‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CFUNC_DEF_FLAGS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_CONSTANT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉVISIBLE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHIDDEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉVISIBLE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHIDDEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉMAX_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉMIN_NUM‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉIteratorValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉArguments‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉarguments_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_shift‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_at‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_shiftn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉJSArguments‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_shift‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_at‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_shiftn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmin_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉabs_int64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉabs_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉsign_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmod_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_RED‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_GREEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_YELLOW‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_BLUE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_MAGENTA‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_MARINE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTGRAY‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_GRAY‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_NONE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTRED‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTGREEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTYELLOW‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTBLUE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTMAGENTA‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_LIGHTMARINE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCOLOR_WHITE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉtime_us‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉarray_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚ìÇ‚Äì‚ÄÉarray_contains‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉjs_dbuf_init_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_dbuf_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉRegExp‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_flags_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_flags_fromstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_from_argv‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_from_dbuf‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_compile‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉregexp_to_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_free_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_global_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_global_prototype‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉvalue_types‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉvalue_mask‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_flag‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_type2flag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_types‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_typeof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_type_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_typestr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_ptr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_has_ref_count‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_free_rt‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_equals‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_clone‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_values_toarray‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_fwrite‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_ptr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_cstring_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_newlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_toint64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_towstringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_towstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_tosize‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_todouble_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_toint64_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tobool_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_toatom_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_value_from_char‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_cmpstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_VALUE_FREE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉJS_VALUE_FREE_RT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_set‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_clear‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_object_tmpmark_isset‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_set‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_get‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_runtime_exception_clear‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_propertyenums_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_propertydescriptor_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_ctor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_invoke_static‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_to_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_to_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_static_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_static_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_iterable‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_iterator‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_method‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_iterator_next‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_for‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_for_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_operatorset_value‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_symbol_operatorset_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_operators_create‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_int64_default‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_number_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_new_bool_or_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_ATOM_TAG_INT‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_ATOM_MAX_INT‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_isint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_fromint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjs_atom_toint‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_toint64‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_toint32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_tovalue‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_tobinary‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_to_cstringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_is_index‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_atom_is_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_function_isnative‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_classname‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_is‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_construct‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_error‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_stack‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_same‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_classid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_has_propertystr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_bool‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertyint_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertyint_int‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertystr_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_set_propertystr_stringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertyint_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertyint_int32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_cstring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_cstringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_string‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_stringlen‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_int32‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertystr_uint64‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_get_propertydescriptor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_inspect_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_tostringtag_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_tostringtag_str‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_id‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_newid‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_get‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_atom‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_class_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_isclass‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_isclass‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_arraybuffer‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_sharedarraybuffer‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_map‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_set‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_generator‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_regexp‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_promise‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_dataview‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_null_or_undefined‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_falsish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_truish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_nullish‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_typedarray_prototype‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_typedarray_constructor‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_basic_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_typedarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_is_input‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_propenum_cmp‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_object_equals‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_clear‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_length‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free_n‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_free_rt‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_to_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_intv_to_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_to_argv‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_array_copys‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_strv_copys‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_invoke‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_bytelength‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_find_cfunction_entry‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_find_cfunction_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_ms‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_time_ns‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_from_timespec‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_gettime‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_time‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_date_timespec‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_freevalue‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_arraybuffer_fromvalue‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_map_new‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚í∏‚Äì‚ÄÉimport_directive‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉImportDirective‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_name‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_namestr‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_func‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_ns‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_exports‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_list‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_array‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_entries‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_map‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_modules_object‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_object‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmodule_entry‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_search‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_search_ext‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_normalize‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_def‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_find‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_import_eval‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import_default‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import_namespace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_import‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_module_loader_so‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_module‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_binary‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_buf‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_eval_str‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_time_ms‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_interrupt_handler‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_timer_unlink‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_timer_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_call_handler‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_alloc‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_free‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_sab_dup‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_new_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_dup_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_free_message‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_free_message_pipe‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_error_dump‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_error_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_error_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration"
						]
					},
					"AQAAAAAAAAAAAAAAxzMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					327,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
						"symkeys":
						[
							[
								418,
								440
							],
							[
								489,
								502
							],
							[
								543,
								561
							],
							[
								1494,
								1511
							],
							[
								1521,
								1529
							],
							[
								1547,
								1555
							],
							[
								1620,
								1630
							],
							[
								1720,
								1736
							],
							[
								1839,
								1855
							],
							[
								2095,
								2115
							],
							[
								2406,
								2426
							],
							[
								2914,
								2934
							],
							[
								3165,
								3184
							],
							[
								7067,
								7089
							],
							[
								8551,
								8573
							],
							[
								8778,
								8793
							],
							[
								8907,
								8933
							],
							[
								9377,
								9413
							],
							[
								9815,
								9837
							],
							[
								10156,
								10178
							],
							[
								11190,
								11204
							],
							[
								12744,
								12758
							],
							[
								13888,
								13910
							],
							[
								15764,
								15781
							],
							[
								16168,
								16185
							],
							[
								17195,
								17212
							],
							[
								18990,
								19006
							],
							[
								30889,
								30899
							],
							[
								31810,
								31829
							],
							[
								32231,
								32258
							],
							[
								32308,
								32335
							],
							[
								32616,
								32637
							],
							[
								32869,
								32884
							],
							[
								33849,
								33863
							],
							[
								33893,
								33907
							]
						],
						"symlist":
						[
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_INT32T_INRANGE‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_LEVEL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉINSPECT_IS_COMPACT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉinspect_options_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚íû‚ÄÇ‚ÄÉprop_key‚Äâ;‚ÄÉ‚Äî‚ÄÉtype declaration",
							"‚Äî‚í∏‚Äì‚ÄÉprop_key‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉprop_key_t‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_predicate‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_screen_width‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_options_hidden‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉinspect_newline‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_getpropertynames_recursive‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_custom_call‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_number‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_debugger_build_backtrace‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_stacktrace‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_inspect_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 20807,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAAgrAAAAAAAACSsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIKwAAAAAAAAgrAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"left_delete",
					null,
					"AQAAAAgrAAAAAAAACCsAAAAAAAABAAAAZg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJKwAAAAAAAAkrAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " hideKes"
					},
					"CAAAAOYbAAAAAAAA5xsAAAAAAAAAAAAA5xsAAAAAAADoGwAAAAAAAAAAAADoGwAAAAAAAOkbAAAAAAAAAAAAAOkbAAAAAAAA6hsAAAAAAAAAAAAA6hsAAAAAAADrGwAAAAAAAAAAAADrGwAAAAAAAOwbAAAAAAAAAAAAAOwbAAAAAAAA7RsAAAAAAAAAAAAA7RsAAAAAAADuGwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmGwAAAAAAAOYbAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"left_delete",
					null,
					"AQAAAO0bAAAAAAAA7RsAAAAAAAABAAAAcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuGwAAAAAAAO4bAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "ys:"
					},
					"AwAAAO0bAAAAAAAA7hsAAAAAAAAAAAAA7hsAAAAAAADvGwAAAAAAAAAAAADvGwAAAAAAAPAbAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtGwAAAAAAAO0bAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPAbAAAAAAAA8RsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwGwAAAAAAAPAbAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPEbAAAAAAAA8xsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxGwAAAAAAAPEbAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAPEbAAAAAAAA8RsAAAAAAAABAAAAJ/EbAAAAAAAA8RsAAAAAAAABAAAAJw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyGwAAAAAAAPIbAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPEbAAAAAAAA8xsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADxGwAAAAAAAPEbAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAPIbAAAAAAAA9BsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyGwAAAAAAAPIbAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "constructor"
					},
					"CwAAAPMbAAAAAAAA9BsAAAAAAAAAAAAA9BsAAAAAAAD1GwAAAAAAAAAAAAD1GwAAAAAAAPYbAAAAAAAAAAAAAPYbAAAAAAAA9xsAAAAAAAAAAAAA9xsAAAAAAAD4GwAAAAAAAAAAAAD4GwAAAAAAAPkbAAAAAAAAAAAAAPkbAAAAAAAA+hsAAAAAAAAAAAAA+hsAAAAAAAD7GwAAAAAAAAAAAAD7GwAAAAAAAPwbAAAAAAAAAAAAAPwbAAAAAAAA/RsAAAAAAAAAAAAA/RsAAAAAAAD+GwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzGwAAAAAAAPMbAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAcAAAAAAAAARwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAOYiAAAAAAAA5yIAAAAAAAAAAAAA5yIAAAAAAADnIgAAAAAAAAEAAAA0",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmIgAAAAAAAOciAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOciAAAAAAAA6CIAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADnIgAAAAAAAOciAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "\nprotoChain"
					},
					"DAAAAOgiAAAAAAAA6SIAAAAAAAAAAAAA6SIAAAAAAAD5IgAAAAAAAAAAAAD5IgAAAAAAAPoiAAAAAAAAAAAAAPoiAAAAAAAA+yIAAAAAAAAAAAAA+yIAAAAAAAD8IgAAAAAAAAAAAAD8IgAAAAAAAP0iAAAAAAAAAAAAAP0iAAAAAAAA/iIAAAAAAAAAAAAA/iIAAAAAAAD/IgAAAAAAAAAAAAD/IgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAASMAAAAAAAAAAAAAASMAAAAAAAACIwAAAAAAAAAAAAACIwAAAAAAAAMjAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADoIgAAAAAAAOgiAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAAMjAAAAAAAABCMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADIwAAAAAAAAMjAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAAQjAAAAAAAABSMAAAAAAAAAAAAABSMAAAAAAAAGIwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEIwAAAAAAAAQjAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"left_delete",
					null,
					"AQAAAAUjAAAAAAAABSMAAAAAAAABAAAAMA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGIwAAAAAAAAYjAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAAUjAAAAAAAABiMAAAAAAAAAAAAABiMAAAAAAAAHIwAAAAAAAAAAAAAHIwAAAAAAAAgjAAAAAAAAAAAAAAgjAAAAAAAACSMAAAAAAAAAAAAACSMAAAAAAAAKIwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFIwAAAAAAAAUjAAAAAAAAAAAAAAAA8L8"
				],
				[
					60,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKIwAAAAAAAAojAAAAAAAAAAAAAAAA8L8"
				],
				[
					61,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKIwAAAAAAAAojAAAAAAAAAAAAAAAA8L8"
				],
				[
					62,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKIwAAAAAAAAojAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "utils.c",
			"settings":
			{
				"buffer_size": 53797,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAl0gAAI3VuZGVmIF9JU09DOTlfU09VUkNFCiNkZWZpbmUgX0lTT0M5OV9TT1VSQ0UgMQoKI2luY2x1ZGUgInV0aWxzLmgiCiNpbmNsdWRlICJsaXN0LmgiCiNpbmNsdWRlICJjdXRpbHMuaCIKI2luY2x1ZGUgInZlY3Rvci5oIgojaW5jbHVkZSAibGlicmVnZXhwLmgiCiNpbmNsdWRlICJxdWlja2pzLWludGVybmFsLmgiCiNpbmNsdWRlICJidWZmZXItdXRpbHMuaCIKI2luY2x1ZGUgPHRpbWUuaD4KI2luY2x1ZGUgPG1hdGguaD4KI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNsdWRlIDxzaWduYWwuaD4KI2luY2x1ZGUgPHN5cy9zdGF0Lmg+CiNpbmNsdWRlIDxkbGZjbi5oPgoKI2lmbmRlZiBJTkZJTklUWQojZGVmaW5lIElORklOSVRZIF9fYnVpbHRpbl9pbmYoKQojZW5kaWYKClZJU0lCTEUgY29uc3QgY2hhcioganNfZGVmYXVsdF9tb2R1bGVfcGF0aCA9ICIuIgojaWZkZWYgQ09ORklHX1BSRUZJWAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOiIgQ09ORklHX1BSRUZJWCAiL2xpYi9xdWlja2pzIgojZW5kaWYKICAgIDsKCiNpZmRlZiBVU0VfV09SS0VSCiNpbmNsdWRlIDxwdGhyZWFkLmg+CiNpbmNsdWRlIDxzdGRhdG9taWMuaD4KCnN0YXRpYyBpbnQKYXRvbWljX2FkZF9pbnQoaW50KiBwdHIsIGludCB2KSB7CiAgcmV0dXJuIGF0b21pY19mZXRjaF9hZGQoKF9BdG9taWModWludDMyX3QpKilwdHIsIHYpICsgdjsKfQojZW5kaWYKCiNpZiBkZWZpbmVkKF9fbGludXhfXykgfHwgZGVmaW5lZChfX0FQUExFX18pCnVpbnQ2NF90CnRpbWVfdXModm9pZCkgewogIHN0cnVjdCB0aW1lc3BlYyB0czsKICBjbG9ja19nZXR0aW1lKENMT0NLX01PTk9UT05JQywgJnRzKTsKICByZXR1cm4gKHVpbnQ2NF90KXRzLnR2X3NlYyAqIDEwMDAwMDAgKyAodHMudHZfbnNlYyAvIDEwMDApOwp9CiNlbHNlCi8qIG1vcmUgcG9ydGFibGUsIGJ1dCBkb2VzIG5vdCB3b3JrIGlmIHRoZSBkYXRlIGlzIHVwZGF0ZWQgKi8KdWludDY0X3QKdGltZV91cyh2b2lkKSB7CiAgc3RydWN0IHRpbWV2YWwgdHY7CiAgZ2V0dGltZW9mZGF5KCZ0diwgMCk7CiAgcmV0dXJuIChpbnQ2NF90KXR2LnR2X3NlYyAqIDEwMDAwMDAgKyB0di50dl91c2VjOwp9CiNlbmRpZgoKaW50CnJlZ2V4cF9mbGFnc19mcm9tc3RyaW5nKGNvbnN0IGNoYXIqIHMpIHsKICBpbnQgZmxhZ3MgPSAwOwoKICBpZihzdHJfY29udGFpbnMocywgJ2cnKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX0dMT0JBTDsKICBpZihzdHJfY29udGFpbnMocywgJ2knKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX0lHTk9SRUNBU0U7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICdtJykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19NVUxUSUxJTkU7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICdzJykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19ET1RBTEw7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICd1JykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19VVEYxNjsKICBpZihzdHJfY29udGFpbnMocywgJ3knKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX1NUSUNLWTsKCiAgcmV0dXJuIGZsYWdzOwp9CgppbnQKcmVnZXhwX2ZsYWdzX3Rvc3RyaW5nKGludCBmbGFncywgY2hhciogYnVmKSB7CiAgY2hhciogb3V0ID0gYnVmOwoKICBpZihmbGFncyAmIExSRV9GTEFHX0dMT0JBTCkKICAgICpvdXQrKyA9ICdnJzsKICBpZihmbGFncyAmIExSRV9GTEFHX0lHTk9SRUNBU0UpCiAgICAqb3V0KysgPSAnaSc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19NVUxUSUxJTkUpCiAgICAqb3V0KysgPSAnbSc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19ET1RBTEwpCiAgICAqb3V0KysgPSAncyc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19VVEYxNikKICAgICpvdXQrKyA9ICd1JzsKICBpZihmbGFncyAmIExSRV9GTEFHX1NUSUNLWSkKICAgICpvdXQrKyA9ICd5JzsKCiAgKm91dCA9ICdcMCc7CiAgcmV0dXJuIG91dCAtIGJ1ZjsKfQoKUmVnRXhwCnJlZ2V4cF9mcm9tX2FyZ3YoaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIEpTQ29udGV4dCogY3R4KSB7CiAgUmVnRXhwIHJlID0gezAsIDAsIDB9OwogIGNvbnN0IGNoYXIqIGZsYWdzdHI7CiAgYXNzZXJ0KGFyZ2MgPiAwKTsKICBpZihqc19pc19yZWdleHAoY3R4LCBhcmd2WzBdKSkgewogICAgcmUuc291cmNlID0ganNfZ2V0X3Byb3BlcnR5c3RyX3N0cmluZ2xlbihjdHgsIGFyZ3ZbMF0sICJzb3VyY2UiLCAmcmUubGVuKTsKICAgIHJlLmZsYWdzID0gcmVnZXhwX2ZsYWdzX2Zyb21zdHJpbmcoKGZsYWdzdHIgPSBqc19nZXRfcHJvcGVydHlzdHJfY3N0cmluZyhjdHgsIGFyZ3ZbMF0sICJmbGFncyIpKSk7CiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBmbGFnc3RyKTsKICB9IGVsc2UgewogICAgcmUuc291cmNlID0ganNfdG9zdHJpbmdsZW4oY3R4LCAmcmUubGVuLCBhcmd2WzBdKTsKICAgIGlmKGFyZ2MgPiAxICYmIEpTX0lzU3RyaW5nKGFyZ3ZbMV0pKSB7CiAgICAgIHJlLmZsYWdzID0gcmVnZXhwX2ZsYWdzX2Zyb21zdHJpbmcoKGZsYWdzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCBhcmd2WzFdKSkpOwogICAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBmbGFnc3RyKTsKICAgIH0KICB9CiAgcmV0dXJuIHJlOwp9CgpSZWdFeHAKcmVnZXhwX2Zyb21fZGJ1ZihEeW5CdWYqIGRidWYsIGludCBmbGFncykgewogIFJlZ0V4cCByZSA9IHsoY2hhciopZGJ1Zi0+YnVmLCBkYnVmLT5zaXplLCBmbGFnc307CiAgZGJ1Zi0+YnVmID0gMDsKICBkYnVmLT5hbGxvY2F0ZWRfc2l6ZSA9IDA7CiAgZGJ1Zi0+c2l6ZSA9IDA7CiAgcmV0dXJuIHJlOwp9Cgp1aW50OF90KgpyZWdleHBfY29tcGlsZShSZWdFeHAgcmUsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciBlcnJvcl9tc2dbNjRdOwogIGludCBsZW4gPSAwOwogIHVpbnQ4X3QqIGJ5dGVjb2RlOwogIGlmKCEoYnl0ZWNvZGUgPSBscmVfY29tcGlsZSgmbGVuLCBlcnJvcl9tc2csIHNpemVvZihlcnJvcl9tc2cpLCByZS5zb3VyY2UsIHJlLmxlbiwgcmUuZmxhZ3MsIGN0eCkpKQogICAgSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIkVycm9yIGNvbXBpbGluZyByZWdleCAvJS4qcy86ICVzIiwgKGludClyZS5sZW4sIHJlLnNvdXJjZSwgZXJyb3JfbXNnKTsKCiAgcmV0dXJuIGJ5dGVjb2RlOwp9CgpKU1ZhbHVlCnJlZ2V4cF90b192YWx1ZShSZWdFeHAgcmUsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciBmbGFnc3RyWzMyXSA9IHswfTsKICBzaXplX3QgZmxhZ2xlbiA9IHJlZ2V4cF9mbGFnc190b3N0cmluZyhyZS5mbGFncywgZmxhZ3N0cik7CiAgSlNWYWx1ZUNvbnN0IGFyZ3NbMl0gPSB7SlNfTmV3U3RyaW5nTGVuKGN0eCwgcmUuc291cmNlLCByZS5sZW4pLCBKU19OZXdTdHJpbmdMZW4oY3R4LCBmbGFnc3RyLCBmbGFnbGVuKX07CiAgSlNWYWx1ZSByZWdleCwgY3RvciA9IGpzX2dsb2JhbF9nZXQoY3R4LCAiUmVnRXhwIik7CiAgcmVnZXggPSBKU19DYWxsQ29uc3RydWN0b3IoY3R4LCBjdG9yLCAyLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzFdKTsKICByZXR1cm4gcmVnZXg7Cn0KCmludDY0X3QKanNfYXJyYXlfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYXJyYXkpIHsKICBpbnQ2NF90IGxlbiA9IC0xOwogIGlmKEpTX0lzQXJyYXkoY3R4LCBhcnJheSkgfHwganNfaXNfdHlwZWRhcnJheShhcnJheSkpIHsKICAgIEpTVmFsdWUgbGVuZ3RoID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBhcnJheSwgImxlbmd0aCIpOwogICAgSlNfVG9JbnQ2NChjdHgsICZsZW4sIGxlbmd0aCk7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBsZW5ndGgpOwogIH0KICByZXR1cm4gbGVuOwp9Cgp2b2lkCmpzX2FycmF5X2NsZWFyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYXJyYXkpIHsKICBpbnQ2NF90IGxlbiA9IGpzX2FycmF5X2xlbmd0aChjdHgsIGFycmF5KTsKICBKU1ZhbHVlIHJldDsKICBKU0F0b20gc3BsaWNlID0gSlNfTmV3QXRvbShjdHgsICJzcGxpY2UiKTsKICBKU1ZhbHVlQ29uc3QgYXJnc1syXSA9IHtKU19OZXdJbnQ2NChjdHgsIDApLCBKU19OZXdJbnQ2NChjdHgsIGxlbil9OwoKICByZXQgPSBKU19JbnZva2UoY3R4LCBhcnJheSwgc3BsaWNlLCAyLCBhcmdzKTsKICBKU19GcmVlQXRvbShjdHgsIHNwbGljZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcmV0KTsKCiAgYXNzZXJ0KGpzX2FycmF5X2xlbmd0aChjdHgsIGFycmF5KSA9PSAwKTsKfQoKY2hhcioqCmpzX2FycmF5X3RvX2FyZ3YoSlNDb250ZXh0KiBjdHgsIGludCogYXJnY3AsIEpTVmFsdWVDb25zdCBhcnJheSkgewogIGludCBpLCBsZW4gPSBqc19hcnJheV9sZW5ndGgoY3R4LCBhcnJheSk7CiAgY2hhcioqIHJldCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoY2hhciopICogKGxlbiArIDEpKTsKICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgSlNWYWx1ZSBpdGVtID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBhcnJheSwgaSk7CiAgICByZXRbaV0gPSBqc190b3N0cmluZyhjdHgsIGl0ZW0pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgaXRlbSk7CiAgfQogIGlmKGFyZ2NwKQogICAgKmFyZ2NwID0gbGVuOwogIHJldHVybiByZXQ7Cn0KCmludApqc19hcnJheV9jb3B5cyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGFycmF5LCBpbnQgbiwgY2hhcioqIHN0cmEpIHsKICBpbnQgaSwgbGVuID0gTUlOX05VTShuLCBqc19hcnJheV9sZW5ndGgoY3R4LCBhcnJheSkpOwogIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBKU1ZhbHVlIGl0ZW0gPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGFycmF5LCBpKTsKICAgIGlmKHN0cmFbaV0pCiAgICAgIGpzX2ZyZWUoY3R4LCBzdHJhW2ldKTsKICAgIHN0cmFbaV0gPSBqc190b3N0cmluZyhjdHgsIGl0ZW0pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgaXRlbSk7CiAgfQogIHJldHVybiBpOwp9CgppbnQKanNfc3Rydl9jb3B5cyhKU0NvbnRleHQqIGN0eCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBuLCBjaGFyKiogc3RyYSkgewogIGludCBpLCBsZW4gPSBNSU5fTlVNKG4sIGFyZ2MpOwogIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBpZighSlNfSXNOdWxsKGFyZ3ZbaV0pICYmICFKU19Jc1VuZGVmaW5lZChhcmd2W2ldKSkKICAgICAgc3RyYVtpXSA9IGpzX3Rvc3RyaW5nKGN0eCwgYXJndltpXSk7CiAgICBlbHNlCiAgICAgIHN0cmFbaV0gPSAwOwogIH0KICBmb3IoOyBpIDwgbjsgaSsrKSBzdHJhW2ldID0gMDsKCiAgcmV0dXJuIGk7Cn0KCnZvaWQKanNfYXRvbV9kdW1wKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSwgRHluQnVmKiBkYiwgQk9PTCBjb2xvcikgewogIGNvbnN0IGNoYXIqIHN0cjsKICBCT09MIGlzX2ludDsKICBzdHIgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgYXRvbSk7CiAgaXNfaW50ID0ganNfYXRvbV9pc2ludChhdG9tKSB8fCBpc19pbnRlZ2VyKHN0cik7CiAgaWYoY29sb3IpCiAgICBkYnVmX3B1dHN0cihkYiwgaXNfaW50ID8gIlx4MWJbMzNtIiA6ICJceDFiWzE7MzBtIik7CgogIGRidWZfcHV0c3RyKGRiLCBzdHIpOwogIGlmKGNvbG9yKQogICAgZGJ1Zl9wdXRzdHIoZGIsICJceDFiWzE7MzZtIik7CgogIGlmKCFpc19pbnQpCiAgICBkYnVmX3ByaW50ZihkYiwgIigweCV4KSIsIGpzX2F0b21fdG9iaW5hcnkoYXRvbSkpOwoKICBpZihjb2xvcikKICAgIGRidWZfcHV0c3RyKGRiLCAiXHgxYlttIik7Cn0KCnVuc2lnbmVkIGludApqc19hdG9tX3RvYmluYXJ5KEpTQXRvbSBhdG9tKSB7CiAgc3NpemVfdCByZXQ7CiAgaWYoanNfYXRvbV9pc2ludChhdG9tKSkgewogICAgcmV0ID0ganNfYXRvbV90b2ludChhdG9tKTsKICAgIHJldCA9IC1yZXQ7CiAgfSBlbHNlIHsKICAgIHJldCA9IGF0b207CiAgfQogIHJldHVybiByZXQ7Cn0KCmNvbnN0IGNoYXIqCmpzX2F0b21fdG9fY3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgc2l6ZV90KiBsZW4sIEpTQXRvbSBhdG9tKSB7CiAgSlNWYWx1ZSB2OwogIGNvbnN0IGNoYXIqIHM7CiAgdiA9IEpTX0F0b21Ub1ZhbHVlKGN0eCwgYXRvbSk7CiAgcyA9IEpTX1RvQ1N0cmluZ0xlbihjdHgsIGxlbiwgdik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdik7CiAgcmV0dXJuIHM7Cn0KCmludDMyX3QKanNfYXRvbV90b2ludDMyKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSkgewogIGlmKCFqc19hdG9tX2lzaW50KGF0b20pKSB7CiAgICBpbnQ2NF90IGkgPSBJTlQ2NF9NSU47CiAgICBqc19hdG9tX3RvaW50NjQoY3R4LCAmaSwgYXRvbSk7CiAgICByZXR1cm4gaTsKICB9CiAgcmV0dXJuIC1hdG9tOwp9CgppbnQKanNfYXRvbV90b2ludDY0KEpTQ29udGV4dCogY3R4LCBpbnQ2NF90KiBpLCBKU0F0b20gYXRvbSkgewogIGludCByZXQ7CiAgSlNWYWx1ZSB2YWx1ZTsKICAqaSA9IElOVDY0X01BWDsKICB2YWx1ZSA9IEpTX0F0b21Ub1ZhbHVlKGN0eCwgYXRvbSk7CiAgcmV0ID0gIUpTX1RvSW50NjQoY3R4LCBpLCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCkJPT0wKanNfYXRvbV9pc19pbmRleChKU0NvbnRleHQqIGN0eCwgaW50NjRfdCogcHZhbCwgSlNBdG9tIGF0b20pIHsKICBKU1ZhbHVlIHZhbHVlOwogIEJPT0wgcmV0ID0gRkFMU0U7CiAgaW50NjRfdCBpbmRleDsKCiAgaWYoYXRvbSAmICgxVSA8PCAzMSkpIHsKICAgICpwdmFsID0gYXRvbSAmICh+KDFVIDw8IDMxKSk7CiAgICByZXR1cm4gVFJVRTsKICB9CgogIHZhbHVlID0gSlNfQXRvbVRvVmFsdWUoY3R4LCBhdG9tKTsKCiAgaWYoSlNfSXNOdW1iZXIodmFsdWUpKSB7CiAgICBKU19Ub0ludDY0KGN0eCwgJmluZGV4LCB2YWx1ZSk7CiAgICByZXQgPSBUUlVFOwogIH0gZWxzZSBpZihKU19Jc1N0cmluZyh2YWx1ZSkpIHsKICAgIGNvbnN0IGNoYXIqIHMgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSk7CiAgICBpZihzWzBdID09ICctJyAmJiBpc19kaWdpdF9jaGFyKHNbc1swXSA9PSAnLSddKSkgewogICAgICBpbmRleCA9IGF0b2kocyk7CiAgICAgIHJldCA9IFRSVUU7CiAgICB9CiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHMpOwogIH0KCiAgaWYocmV0ID09IFRSVUUpCiAgICAqcHZhbCA9IGluZGV4OwoKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2F0b21faXNfbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU0F0b20gYXRvbSkgewogIGNvbnN0IGNoYXIqIHN0ciA9IEpTX0F0b21Ub0NTdHJpbmcoY3R4LCBhdG9tKTsKICBCT09MIHJldCA9ICFzdHJjbXAoc3RyLCAibGVuZ3RoIik7CiAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogIHJldHVybiByZXQ7Cn0KCmNvbnN0IGNoYXIqCmpzX2Z1bmN0aW9uX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTQXRvbSBhdG9tOwogIEpTVmFsdWUgc3RyLCBuYW1lLCBhcmdzWzJdLCBpZHg7CiAgY29uc3QgY2hhciogcyA9IDA7CiAgaW50MzJfdCBpID0gLTE7CiAgc3RyID0ganNfdmFsdWVfdG9zdHJpbmcoY3R4LCAiRnVuY3Rpb24iLCB2YWx1ZSk7CiAgYXRvbSA9IEpTX05ld0F0b20oY3R4LCAiaW5kZXhPZiIpOwogIGFyZ3NbMF0gPSBKU19OZXdTdHJpbmcoY3R4LCAiZnVuY3Rpb24gIik7CiAgaWR4ID0gSlNfSW52b2tlKGN0eCwgc3RyLCBhdG9tLCAxLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICBKU19Ub0ludDMyKGN0eCwgJmksIGlkeCk7CiAgaWYoaSAhPSAwKSB7CiAgICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgc3RyKTsKICAgIHJldHVybiAwOwogIH0KICBhcmdzWzBdID0gSlNfTmV3U3RyaW5nKGN0eCwgIigiKTsKICBpZHggPSBKU19JbnZva2UoY3R4LCBzdHIsIGF0b20sIDEsIGFyZ3MpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgYXRvbSA9IEpTX05ld0F0b20oY3R4LCAic3Vic3RyaW5nIik7CiAgYXJnc1swXSA9IEpTX05ld1VpbnQzMihjdHgsIDkpOwogIGFyZ3NbMV0gPSBpZHg7CiAgbmFtZSA9IEpTX0ludm9rZShjdHgsIHN0ciwgYXRvbSwgMiwgYXJncyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3RyKTsKICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIHMgPSBKU19Ub0NTdHJpbmcoY3R4LCBuYW1lKTsKICBKU19GcmVlVmFsdWUoY3R4LCBuYW1lKTsKICByZXR1cm4gczsKfQoKSlNWYWx1ZQpqc19nbG9iYWxfZ2V0KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBwcm9wKSB7CiAgSlNWYWx1ZSBnbG9iYWxfb2JqLCByZXQ7CiAgZ2xvYmFsX29iaiA9IEpTX0dldEdsb2JhbE9iamVjdChjdHgpOwogIHJldCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgZ2xvYmFsX29iaiwgcHJvcCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZ2xvYmFsX29iaik7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19nbG9iYWxfcHJvdG90eXBlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBjbGFzc19uYW1lKSB7CiAgSlNWYWx1ZSBjdG9yLCByZXQ7CiAgY3RvciA9IGpzX2dsb2JhbF9nZXQoY3R4LCBjbGFzc19uYW1lKTsKICByZXQgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGN0b3IsICJwcm90b3R5cGUiKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2l0ZXJhdG9yX21ldGhvZChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaikgewogIEpTQXRvbSBhdG9tOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIGF0b20gPSBqc19zeW1ib2xfc3RhdGljX2F0b20oY3R4LCAiaXRlcmF0b3IiKTsKICBpZihKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSkpCiAgICByZXQgPSBKU19HZXRQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSk7CgogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgaWYoIUpTX0lzRnVuY3Rpb24oY3R4LCByZXQpKSB7CiAgICBhdG9tID0ganNfc3ltYm9sX3N0YXRpY19hdG9tKGN0eCwgImFzeW5jSXRlcmF0b3IiKTsKICAgIGlmKEpTX0hhc1Byb3BlcnR5KGN0eCwgb2JqLCBhdG9tKSkKICAgICAgcmV0ID0gSlNfR2V0UHJvcGVydHkoY3R4LCBvYmosIGF0b20pOwoKICAgIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfaXRlcmF0b3JfbmV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKSB7CiAgSlNWYWx1ZSBmbiwgcmV0OwogIGZuID0ganNfaXRlcmF0b3JfbWV0aG9kKGN0eCwgb2JqKTsKICByZXQgPSBKU19DYWxsKGN0eCwgZm4sIG9iaiwgMCwgMCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZm4pOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfaXRlcmF0b3JfbmV4dChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgQk9PTCogZG9uZV9wKSB7CiAgSlNWYWx1ZSBmbiwgcmVzdWx0LCBkb25lLCB2YWx1ZTsKICBmbiA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAibmV4dCIpOwogIHJlc3VsdCA9IEpTX0NhbGwoY3R4LCBmbiwgb2JqLCAwLCAwKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmbik7CiAgZG9uZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgcmVzdWx0LCAiZG9uZSIpOwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCByZXN1bHQsICJ2YWx1ZSIpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHJlc3VsdCk7CiAgKmRvbmVfcCA9IEpTX1RvQm9vbChjdHgsIGRvbmUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGRvbmUpOwogIHJldHVybiB2YWx1ZTsKfQoKSlNWYWx1ZQpqc19vYmplY3RfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTVmFsdWUgY3RvciA9IEpTX1VOREVGSU5FRDsKICBpZihKU19Jc09iamVjdCh2YWx1ZSkpCiAgICBjdG9yID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB2YWx1ZSwgImNvbnN0cnVjdG9yIik7CiAgcmV0dXJuIGN0b3I7Cn0KCmNoYXIqCmpzX29iamVjdF9jbGFzc25hbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTVmFsdWUgcHJvdG8sIGN0b3I7CiAgY29uc3QgY2hhciogc3RyOwogIGNoYXIqIG5hbWUgPSAwOwogIGludCBuYW1lbGVuOwogIGN0b3IgPSBqc19vYmplY3RfY29uc3RydWN0b3IoY3R4LCB2YWx1ZSk7CiAgaWYoIUpTX0lzRnVuY3Rpb24oY3R4LCBjdG9yKSkgewogICAgcHJvdG8gPSBKU19HZXRQcm90b3R5cGUoY3R4LCB2YWx1ZSk7CiAgICBjdG9yID0ganNfb2JqZWN0X2NvbnN0cnVjdG9yKGN0eCwgcHJvdG8pOwogIH0KICBpZigoc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgY3RvcikpKSB7CiAgICBpZighc3RybmNtcChzdHIsICJmdW5jdGlvbiAiLCA5KSkgewogICAgICBuYW1lbGVuID0gYnl0ZV9jaHIoc3RyICsgOSwgc3RybGVuKHN0cikgLSA5LCAnKCcpOwogICAgICBuYW1lID0ganNfc3RybmR1cChjdHgsIHN0ciArIDksIG5hbWVsZW4pOwogICAgfQogIH0KICBpZighbmFtZSkgewogICAgaWYoc3RyKQogICAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwogICAgaWYoKHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIEpTX0dldFByb3BlcnR5U3RyKGN0eCwgY3RvciwgIm5hbWUiKSkpKQogICAgICBuYW1lID0ganNfc3RyZHVwKGN0eCwgc3RyKTsKICB9CiAgaWYoc3RyKQogICAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyKTsKICByZXR1cm4gbmFtZTsKfQoKQk9PTApqc19vYmplY3RfZXF1YWxzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYSwgSlNWYWx1ZUNvbnN0IGIpIHsKICBKU1Byb3BlcnR5RW51bSAqYXRvbXNfYSwgKmF0b21zX2I7CiAgdWludDMyX3QgaSwgbmF0b21zX2EsIG5hdG9tc19iOwogIGludDMyX3QgdGEsIHRiOwogIHRhID0ganNfdmFsdWVfdHlwZShjdHgsIGEpOwogIHRiID0ganNfdmFsdWVfdHlwZShjdHgsIGIpOwogIGFzc2VydCh0YSA9PSBUWVBFX09CSkVDVCk7CiAgYXNzZXJ0KHRiID09IFRZUEVfT0JKRUNUKTsKICBpZihKU19HZXRPd25Qcm9wZXJ0eU5hbWVzKGN0eCwgJmF0b21zX2EsICZuYXRvbXNfYSwgYSwgSlNfR1BOX1NUUklOR19NQVNLIHwgSlNfR1BOX1NZTUJPTF9NQVNLIHwgSlNfR1BOX0VOVU1fT05MWSkpCiAgICByZXR1cm4gRkFMU0U7CgogIGlmKEpTX0dldE93blByb3BlcnR5TmFtZXMoY3R4LCAmYXRvbXNfYiwgJm5hdG9tc19iLCBiLCBKU19HUE5fU1RSSU5HX01BU0sgfCBKU19HUE5fU1lNQk9MX01BU0sgfCBKU19HUE5fRU5VTV9PTkxZKSkKICAgIHJldHVybiBGQUxTRTsKCiAgaWYobmF0b21zX2EgIT0gbmF0b21zX2IpCiAgICByZXR1cm4gRkFMU0U7CgogIHFzb3J0X3IoJmF0b21zX2EsIG5hdG9tc19hLCBzaXplb2YoSlNQcm9wZXJ0eUVudW0pLCAmanNfcHJvcGVudW1fY21wLCBjdHgpOwogIHFzb3J0X3IoJmF0b21zX2IsIG5hdG9tc19iLCBzaXplb2YoSlNQcm9wZXJ0eUVudW0pLCAmanNfcHJvcGVudW1fY21wLCBjdHgpOwogIGZvcihpID0gMDsgaSA8IG5hdG9tc19hOyBpKyspCiAgICBpZihhdG9tc19hW2ldLmF0b20gIT0gYXRvbXNfYltpXS5hdG9tKQogICAgICByZXR1cm4gRkFMU0U7CiAgcmV0dXJuIFRSVUU7Cn0KCmludApqc19vYmplY3RfaXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgY29uc3QgY2hhciogY21wKSB7CiAgaW50IHJldDsKICBjb25zdCBjaGFyKiBzdHI7CiAgc3RyID0ganNfb2JqZWN0X3Rvc3RyaW5nKGN0eCwgdmFsdWUpOwogIHJldCA9IHN0cmNtcChzdHIsIGNtcCkgPT0gMDsKICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfb2JqZWN0X2NvbnN0cnVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGN0b3IpIHsKICBKU1ZhbHVlQ29uc3QgYXJnc1tdID0ge0pTX1VOREVGSU5FRH07CiAgcmV0dXJuIEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIDAsIGFyZ3MpOwp9CgpKU1ZhbHVlCmpzX29iamVjdF9lcnJvcihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbWVzc2FnZSkgewogIEpTVmFsdWVDb25zdCBjdG9yID0ganNfZ2xvYmFsX2dldChjdHgsICJFcnJvciIpOwogIEpTVmFsdWVDb25zdCBhcmdzW10gPSB7SlNfTmV3U3RyaW5nKGN0eCwgbWVzc2FnZSl9OwogIEpTVmFsdWUgcmV0OwogIHJldCA9IEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIDEsIGFyZ3MpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGN0b3IpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfb2JqZWN0X3N0YWNrKEpTQ29udGV4dCogY3R4KSB7CiAgSlNWYWx1ZSBlcnJvciA9IGpzX29iamVjdF9lcnJvcihjdHgsICIiKTsKICBKU1ZhbHVlIHN0YWNrID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBlcnJvciwgInN0YWNrIik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZXJyb3IpOwogIHJldHVybiBzdGFjazsKfQoKQk9PTApqc19oYXNfcHJvcGVydHlzdHIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHN0cikgewogIEpTQXRvbSBhdG9tOwogIEJPT0wgcmV0ID0gRkFMU0U7CiAgYXRvbSA9IEpTX05ld0F0b20oY3R4LCBzdHIpOwogIHJldCA9IEpTX0hhc1Byb3BlcnR5KGN0eCwgb2JqLCBhdG9tKTsKICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIHJldHVybiByZXQ7Cn0KCkJPT0wKanNfZ2V0X3Byb3BlcnR5c3RyX2Jvb2woSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHN0cikgewogIEJPT0wgcmV0ID0gRkFMU0U7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBzdHIpOwogIGlmKCFKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICByZXQgPSBKU19Ub0Jvb2woY3R4LCB2YWx1ZSk7CgogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9Cgpjb25zdCBjaGFyKgpqc19nZXRfcHJvcGVydHlzdHJfY3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCkgewogIEpTVmFsdWUgdmFsdWU7CiAgY29uc3QgY2hhciogcmV0OwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvYmosIHByb3ApOwogIGlmKEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICByZXR1cm4gMDsKCiAgcmV0ID0gSlNfVG9DU3RyaW5nKGN0eCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9Cgpjb25zdCBjaGFyKgpqc19nZXRfcHJvcGVydHlzdHJfY3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCwgc2l6ZV90KiBsZW5wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBjb25zdCBjaGFyKiByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwoKICByZXQgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCBsZW5wLCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCmNvbnN0IGNoYXIqCmpzX2dldF9wcm9wZXJ0eWludF9jc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCB1aW50MzJfdCBwcm9wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBjaGFyKiByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIG9iaiwgcHJvcCk7CiAgLyogaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgICByZXR1cm4gMDsqLwoKICByZXQgPSBqc190b3N0cmluZyhjdHgsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKaW50MzJfdApqc19nZXRfcHJvcGVydHlpbnRfaW50MzIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIHVpbnQzMl90IHByb3ApIHsKICBpbnQzMl90IHJldDsKICBKU1ZhbHVlIHZhbHVlID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIHByb3ApOwogIEpTX1RvSW50MzIoY3R4LCAmcmV0LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCmNoYXIqCmpzX2dldF9wcm9wZXJ0eXN0cl9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApIHsKICBKU1ZhbHVlIHZhbHVlOwogIGNoYXIqIHJldDsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBwcm9wKTsKICBpZihKU19Jc1VuZGVmaW5lZCh2YWx1ZSkgfHwgSlNfSXNFeGNlcHRpb24odmFsdWUpKQogICAgcmV0dXJuIDA7CgogIHJldCA9IGpzX3Rvc3RyaW5nKGN0eCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgpjaGFyKgpqc19nZXRfcHJvcGVydHlzdHJfc3RyaW5nbGVuKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wLCBzaXplX3QqIGxlbnApIHsKICBKU1ZhbHVlIHZhbHVlOwogIGNoYXIqIHJldDsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBwcm9wKTsKICBpZihKU19Jc1VuZGVmaW5lZCh2YWx1ZSkgfHwgSlNfSXNFeGNlcHRpb24odmFsdWUpKQogICAgcmV0dXJuIDA7CgogIHJldCA9IGpzX3Rvc3RyaW5nbGVuKGN0eCwgbGVucCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgppbnQzMl90CmpzX2dldF9wcm9wZXJ0eXN0cl9pbnQzMihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCkgewogIEpTVmFsdWUgdmFsdWU7CiAgaW50MzJfdCByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwogIEpTX1RvSW50MzIoY3R4LCAmcmV0LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCnVpbnQ2NF90CmpzX2dldF9wcm9wZXJ0eXN0cl91aW50NjQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApIHsKICBKU1ZhbHVlIHZhbHVlOwogIHVpbnQ2NF90IHJldDsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBwcm9wKTsKICBpZihKU19Jc1VuZGVmaW5lZCh2YWx1ZSkgfHwgSlNfSXNFeGNlcHRpb24odmFsdWUpKQogICAgcmV0dXJuIDA7CiAgSlNfVG9JbmRleChjdHgsICZyZXQsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKdm9pZApqc19zZXRfcHJvcGVydHlpbnRfc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCB1aW50MzJfdCBpLCBjb25zdCBjaGFyKiBzdHIpIHsKICBKU1ZhbHVlIHZhbHVlOwogIHZhbHVlID0gSlNfTmV3U3RyaW5nKGN0eCwgc3RyKTsKICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIG9iaiwgaSwgdmFsdWUpOwp9Cgp2b2lkCmpzX3NldF9wcm9wZXJ0eWludF9pbnQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIHVpbnQzMl90IGksIGludDMyX3QgdmFsdWUpIHsKICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIG9iaiwgaSwgSlNfTmV3SW50MzIoY3R4LCB2YWx1ZSkpOwp9Cgp2b2lkCmpzX3NldF9wcm9wZXJ0eXN0cl9zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3AsIGNvbnN0IGNoYXIqIHN0cikgewogIEpTVmFsdWUgdmFsdWU7CiAgdmFsdWUgPSBKU19OZXdTdHJpbmcoY3R4LCBzdHIpOwogIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBwcm9wLCB2YWx1ZSk7Cn0KCnZvaWQKanNfc2V0X3Byb3BlcnR5c3RyX3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgY29uc3QgY2hhciogcHJvcCwgY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX05ld1N0cmluZ0xlbihjdHgsIHN0ciwgbGVuKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCwgdmFsdWUpOwp9CgppbnQKanNfZ2V0X3Byb3BlcnR5ZGVzY3JpcHRvcihKU0NvbnRleHQqIGN0eCwgSlNQcm9wZXJ0eURlc2NyaXB0b3IqIGRlc2MsIEpTVmFsdWVDb25zdCB2YWx1ZSwgSlNBdG9tIHByb3ApIHsKICBKU1ZhbHVlIG9iaiwgcHJvdG87CiAgb2JqID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgZG8gewogICAgaWYoSlNfR2V0T3duUHJvcGVydHkoY3R4LCBkZXNjLCBvYmosIHByb3ApID09IFRSVUUpCiAgICAgIHJldHVybiBUUlVFOwogICAgcHJvdG8gPSBKU19HZXRQcm90b3R5cGUoY3R4LCBvYmopOwogICAgaWYoSlNfVkFMVUVfR0VUX09CSihwcm90bykgPT0gSlNfVkFMVUVfR0VUX09CSihvYmopKQogICAgICBicmVhazsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIG9iaik7CiAgICBvYmogPSBwcm90bzsKICB9IHdoaWxlKEpTX0lzT2JqZWN0KG9iaikpOwogIHJldHVybiBGQUxTRTsKfQoKSlNDbGFzc0lECmpzX2NsYXNzX2lkKEpTQ29udGV4dCogY3R4LCBpbnQgaWQpIHsKICByZXR1cm4gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX2lkOwp9CgpKU0NsYXNzSUQKanNfY2xhc3NfbmV3aWQodm9pZCkgewogIEpTQ2xhc3NJRCBpZDsKICBKU19OZXdDbGFzc0lEKCZpZCk7CiAgcmV0dXJuIGlkOwp9CgpKU0NsYXNzKgpqc19jbGFzc19nZXQoSlNDb250ZXh0KiBjdHgsIEpTQ2xhc3NJRCBpZCkgewogIEpTQ2xhc3MqIHJldCA9ICZjdHgtPnJ0LT5jbGFzc19hcnJheVtpZF07CiAgcmV0dXJuIHJldC0+Y2xhc3NfaWQgPT0gaWQgPyByZXQgOiAwOwp9CgpKU0F0b20KanNfY2xhc3NfYXRvbShKU0NvbnRleHQqIGN0eCwgSlNDbGFzc0lEIGlkKSB7CiAgSlNBdG9tIGF0b20gPSAwOwogIGlmKGlkID4gMCAmJiBpZCA8IChKU0NsYXNzSUQpY3R4LT5ydC0+Y2xhc3NfY291bnQpCiAgICBhdG9tID0gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX25hbWU7CiAgcmV0dXJuIGF0b207Cn0KCmNvbnN0IGNoYXIqCmpzX2NsYXNzX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTQ2xhc3NJRCBpZCkgewogIEpTQXRvbSBhdG9tID0gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX25hbWU7CiAgcmV0dXJuIEpTX0F0b21Ub0NTdHJpbmcoY3R4LCBhdG9tKTsKfQoKY29uc3QgY2hhcioKanNfb2JqZWN0X3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU1ZhbHVlIHN0ciA9IGpzX3ZhbHVlX3Rvc3RyaW5nKGN0eCwgIk9iamVjdCIsIHZhbHVlKTsKICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgc3RyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogIHJldHVybiBzOwp9Cgpjb25zdCBjaGFyKgpqc19mdW5jdGlvbl90b3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNWYWx1ZSBzdHIgPSBqc192YWx1ZV90b3N0cmluZyhjdHgsICJGdW5jdGlvbiIsIHZhbHVlKTsKICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgc3RyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogIHJldHVybiBzOwp9CgpCT09MCmpzX2Z1bmN0aW9uX2lzbmF0aXZlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBjb25zdCBjaGFyKiBmbiA9IGpzX2Z1bmN0aW9uX3Rvc3RyaW5nKGN0eCwgdmFsdWUpOwogIEJPT0wgcmV0ID0gISFzdHJzdHIoZm4sICJcbiAgICBbbmF0aXZlIGNvZGVdXG4iKTsKICBKU19GcmVlQ1N0cmluZyhjdHgsIGZuKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2lzX2lucHV0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNTdHJpbmcodmFsdWUpIHx8IGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfQVJSQVlfQlVGRkVSKTsKfQoKaW50CmpzX3Byb3BlbnVtX2NtcChjb25zdCB2b2lkKiBhLCBjb25zdCB2b2lkKiBiLCB2b2lkKiBwdHIpIHsKICBKU0NvbnRleHQqIGN0eCA9IHB0cjsKICBjb25zdCBjaGFyICpzdHJhLCAqc3RyYjsKICBpbnQgcmV0OwogIHN0cmEgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgKChjb25zdCBKU1Byb3BlcnR5RW51bSopYSktPmF0b20pOwogIHN0cmIgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgKChjb25zdCBKU1Byb3BlcnR5RW51bSopYiktPmF0b20pOwogIHJldCA9IHN0cnZlcnNjbXAoc3RyYSwgc3RyYik7CiAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYSk7CiAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYik7CiAgcmV0dXJuIHJldDsKfQoKdm9pZApqc19wcm9wZXJ0eWVudW1zX2ZyZWUoSlNDb250ZXh0KiBjdHgsIEpTUHJvcGVydHlFbnVtKiBwcm9wcywgc2l6ZV90IGxlbikgewogIHVpbnQzMl90IGk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIEpTX0ZyZWVBdG9tKGN0eCwgcHJvcHNbaV0uYXRvbSk7CiAgLy8ganNfZnJlZShjdHgsIHByb3BzKTsKfQoKdm9pZApqc19zdHJ2X2ZyZWVfbihKU0NvbnRleHQqIGN0eCwgaW50IG4sIGNoYXIqIGFyZ3ZbXSkgewogIGludCBpOwogIGZvcihpID0gMDsgaSA8IG47IGkrKykgewogICAgaWYoYXJndltpXSkgewogICAgICBqc19mcmVlKGN0eCwgYXJndltpXSk7CiAgICAgIGFyZ3ZbaV0gPSAwOwogICAgfQogIH0KfQoKdm9pZApqc19zdHJ2X2ZyZWUoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgc2l6ZV90IGk7CiAgaWYoc3RydiA9PSAwKQogICAgcmV0dXJuOwoKICBmb3IoaSA9IDA7IHN0cnZbaV07IGkrKykgeyBqc19mcmVlKGN0eCwgc3RydltpXSk7IH0KICBqc19mcmVlKGN0eCwgc3Rydik7Cn0KCnZvaWQKanNfc3Rydl9mcmVlX3J0KEpTUnVudGltZSogcnQsIGNoYXIqKiBzdHJ2KSB7CiAgc2l6ZV90IGk7CiAgaWYoc3RydiA9PSAwKQogICAgcmV0dXJuOwoKICBmb3IoaSA9IDA7IHN0cnZbaV07IGkrKykgeyBqc19mcmVlX3J0KHJ0LCBzdHJ2W2ldKTsgfQogIGpzX2ZyZWVfcnQocnQsIHN0cnYpOwp9CgpKU1ZhbHVlCmpzX3N0cnZfdG9fYXJyYXkoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIGlmKHN0cnYpIHsKICAgIHNpemVfdCBpOwogICAgZm9yKGkgPSAwOyBzdHJ2W2ldOyBpKyspIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdTdHJpbmcoY3R4LCBzdHJ2W2ldKSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCnNpemVfdApqc19zdHJ2X2xlbmd0aChjaGFyKiogc3RydikgewogIHNpemVfdCBpOwogIGZvcihpID0gMDsgc3RydltpXTsgaSsrKSB7fQogIHJldHVybiBpOwp9CgpjaGFyKioKanNfc3Rydl9kdXAoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgY2hhcioqIHJldDsKICBzaXplX3QgaSwgbGVuID0ganNfc3Rydl9sZW5ndGgoc3Rydik7CiAgcmV0ID0ganNfbWFsbG9jKGN0eCwgKGxlbiArIDEpICogc2l6ZW9mKGNoYXIqKSk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsgcmV0W2ldID0ganNfc3RyZHVwKGN0eCwgc3RydltpXSk7IH0KICByZXRbaV0gPSAwOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfaW50dl90b19hcnJheShKU0NvbnRleHQqIGN0eCwgaW50KiBpbnR2KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIGlmKGludHYpIHsKICAgIHNpemVfdCBpOwogICAgZm9yKGkgPSAwOyBpbnR2W2ldOyBpKyspIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdJbnQzMihjdHgsIGludHZbaV0pKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNBdG9tCmpzX3N5bWJvbF9zdGF0aWNfYXRvbShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSkgewogIEpTVmFsdWUgc3ltID0ganNfc3ltYm9sX3N0YXRpY192YWx1ZShjdHgsIG5hbWUpOwogIEpTQXRvbSByZXQgPSBKU19WYWx1ZVRvQXRvbShjdHgsIHN5bSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3ltKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9zdGF0aWNfdmFsdWUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBKU1ZhbHVlIHN5bWJvbF9jdG9yLCByZXQ7CiAgc3ltYm9sX2N0b3IgPSBqc19zeW1ib2xfY3RvcihjdHgpOwogIHJldCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgc3ltYm9sX2N0b3IsIG5hbWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHN5bWJvbF9jdG9yKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9jdG9yKEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIGpzX2dsb2JhbF9nZXQoY3R4LCAiU3ltYm9sIik7Cn0KCkpTVmFsdWUKanNfc3ltYm9sX2ludm9rZV9zdGF0aWMoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUsIEpTVmFsdWVDb25zdCBhcmcpIHsKICBKU1ZhbHVlIHJldDsKICBKU0F0b20gbWV0aG9kX25hbWUgPSBKU19OZXdBdG9tKGN0eCwgbmFtZSk7CiAgcmV0ID0gSlNfSW52b2tlKGN0eCwganNfc3ltYm9sX2N0b3IoY3R4KSwgbWV0aG9kX25hbWUsIDEsICZhcmcpOwogIEpTX0ZyZWVBdG9tKGN0eCwgbWV0aG9kX25hbWUpOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfc3ltYm9sX2ZvcihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogc3ltX2ZvcikgewogIEpTVmFsdWUga2V5LCBzeW07CiAgSlNBdG9tIGF0b207CiAga2V5ID0gSlNfTmV3U3RyaW5nKGN0eCwgc3ltX2Zvcik7CiAgc3ltID0ganNfc3ltYm9sX2ludm9rZV9zdGF0aWMoY3R4LCAiZm9yIiwga2V5KTsKICBKU19GcmVlVmFsdWUoY3R4LCBrZXkpOwogIHJldHVybiBzeW07Cn0KCkpTQXRvbQpqc19zeW1ib2xfZm9yX2F0b20oSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN5bV9mb3IpIHsKICBKU1ZhbHVlIHN5bSA9IGpzX3N5bWJvbF9mb3IoY3R4LCBzeW1fZm9yKTsKICBKU0F0b20gYXRvbSA9IEpTX1ZhbHVlVG9BdG9tKGN0eCwgc3ltKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzeW0pOwogIHJldHVybiBhdG9tOwp9CgpKU1ZhbHVlCmpzX3N5bWJvbF90b19zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBzeW0pIHsKICBKU1ZhbHVlIHZhbHVlLCBzdHI7CiAgSlNBdG9tIGF0b207CiAgdmFsdWUgPSBqc19zeW1ib2xfaW52b2tlX3N0YXRpYyhjdHgsICJrZXlGb3IiLCBzeW0pOwogIGlmKCFKU19Jc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICByZXR1cm4gdmFsdWU7CgogIGF0b20gPSBKU19WYWx1ZVRvQXRvbShjdHgsIHN5bSk7CiAgc3RyID0gSlNfQXRvbVRvU3RyaW5nKGN0eCwgYXRvbSk7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gc3RyOwp9Cgpjb25zdCBjaGFyKgpqc19zeW1ib2xfdG9fY3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHN5bSkgewogIEpTVmFsdWUgdmFsdWUgPSBqc19zeW1ib2xfdG9fc3RyaW5nKGN0eCwgc3ltKTsKICBjb25zdCBjaGFyKiBzdHI7CiAgc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gc3RyOwp9CgpKU1ZhbHVlKgpqc192YWx1ZXNfZHVwKEpTQ29udGV4dCogY3R4LCBpbnQgbnZhbHVlcywgSlNWYWx1ZUNvbnN0KiB2YWx1ZXMpIHsKICBKU1ZhbHVlKiByZXQgPSBqc19tYWxsb2N6X3J0KGN0eC0+cnQsIHNpemVvZihKU1ZhbHVlKSAqIG52YWx1ZXMpOwogIGludCBpOwogIGZvcihpID0gMDsgaSA8IG52YWx1ZXM7IGkrKykgcmV0W2ldID0gSlNfRHVwVmFsdWVSVChjdHgtPnJ0LCB2YWx1ZXNbaV0pOwogIHJldHVybiByZXQ7Cn0KLyoKdm9pZApqc192YWx1ZXNfZnJlZShKU0NvbnRleHQqIGN0eCwgaW50IG52YWx1ZXMsIEpTVmFsdWVDb25zdCogdmFsdWVzKSB7CiAgaW50IGk7CiAgZm9yKGkgPSAwOyBpIDwgbnZhbHVlczsgaSsrKSBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZXNbaV0pOwogIGpzX2ZyZWUoY3R4LCB2YWx1ZXMpOwp9CiovCnZvaWQKanNfdmFsdWVzX2ZyZWUoSlNSdW50aW1lKiBydCwgaW50IG52YWx1ZXMsIEpTVmFsdWVDb25zdCogdmFsdWVzKSB7CiAgaW50IGk7CiAgZm9yKGkgPSAwOyBpIDwgbnZhbHVlczsgaSsrKSBKU19GcmVlVmFsdWVSVChydCwgdmFsdWVzW2ldKTsKICBqc19mcmVlX3J0KHJ0LCB2YWx1ZXMpOwp9CgpKU1ZhbHVlCmpzX3ZhbHVlc190b2FycmF5KEpTQ29udGV4dCogY3R4LCBpbnQgbnZhbHVlcywgSlNWYWx1ZUNvbnN0KiB2YWx1ZXMpIHsKICBpbnQgaTsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgZm9yKGkgPSAwOyBpIDwgbnZhbHVlczsgaSsrKSBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSwgSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZXNbaV0pKTsKICByZXR1cm4gcmV0Owp9Cgpjb25zdCBjaGFyKgpqc192YWx1ZV90eXBlX25hbWUoaW50MzJfdCB0eXBlKSB7CiAgaW50MzJfdCBmbGFnID0ganNfdmFsdWVfdHlwZTJmbGFnKHR5cGUpOwogIGNvbnN0IGNoYXIqIGNvbnN0IHR5cGVzW10gPSB7CiAgICAgICJVTkRFRklORUQiLCAgICAgIjAiLAogICAgICAiQk9PTCIsICAgICAgICAgICJJTlQiLAogICAgICAiT0JKRUNUIiwgICAgICAgICJTVFJJTkciLAogICAgICAiU1lNQk9MIiwgICAgICAgICJCSUdfRkxPQVQiLAogICAgICAiQklHX0lOVCIsICAgICAgICJCSUdfREVDSU1BTCIsCiAgICAgICJGTE9BVDY0IiwgICAgICAgIk5BTiIsCiAgICAgICJGVU5DVElPTiIsICAgICAgIkFSUkFZIiwKICAgICAgIk1PRFVMRSIsICAgICAgICAiRlVOQ1RJT05fQllURUNPREUiLAogICAgICAiVU5JTklUSUFMSVpFRCIsICJDQVRDSF9PRkZTRVQiLAogICAgICAiRVhDRVBUSU9OIiwKICB9OwogIGlmKGZsYWcgPj0gMCAmJiBmbGFnIDwgY291bnRvZih0eXBlcykpCiAgICByZXR1cm4gdHlwZXNbZmxhZ107CiAgcmV0dXJuIDA7Cn0KCmNvbnN0IGNoYXIqCmpzX3ZhbHVlX3R5cGVzdHIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGludDMyX3QgdHlwZSA9IGpzX3ZhbHVlX3R5cGUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIGpzX3ZhbHVlX3R5cGVfbmFtZSh0eXBlKTsKfQoKQk9PTApqc192YWx1ZV9oYXNfcmVmX2NvdW50KEpTVmFsdWUgdikgewogIHJldHVybiAoKHVuc2lnbmVkKWpzX3ZhbHVlX3RhZyh2KSA+PSAodW5zaWduZWQpSlNfVEFHX0ZJUlNUKTsKfQoKZW51bSB2YWx1ZV9tYXNrCmpzX3ZhbHVlX3R5cGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGludDMyX3QgZmxhZzsKICB1aW50MzJfdCB0eXBlID0gMDsKICBpZigoZmxhZyA9IGpzX3ZhbHVlX3R5cGVfZ2V0KGN0eCwgdmFsdWUpKSA9PSAtMSkKICAgIHJldHVybiAwOwoKICBpZihmbGFnID09IEZMQUdfQVJSQVkgLyp8fCBmbGFnID09IEZMQUdfRlVOQ1RJT04qLykKICAgIHR5cGUgfD0gVFlQRV9PQkpFQ1Q7CgogIHR5cGUgfD0gMSA8PCBmbGFnOwoKICByZXR1cm4gdHlwZTsKfQoKaW50MzJfdApqc192YWx1ZV90eXBlX2dldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgaWYoSlNfSXNBcnJheShjdHgsIHZhbHVlKSkKICAgIHJldHVybiBGTEFHX0FSUkFZOwoKICBpZihKU19Jc0Z1bmN0aW9uKGN0eCwgdmFsdWUpKQogICAgcmV0dXJuIEZMQUdfRlVOQ1RJT047CgogIGlmKEpTX1ZBTFVFX0lTX05BTih2YWx1ZSkpCiAgICByZXR1cm4gRkxBR19OQU47CgogIHJldHVybiBqc192YWx1ZV90eXBlX2ZsYWcodmFsdWUpOwp9CgppbnQzMl90CmpzX3ZhbHVlX3R5cGVfZmxhZyhKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBzd2l0Y2goSlNfVkFMVUVfR0VUX1RBRyh2YWx1ZSkpIHsKICAgIGNhc2UgSlNfVEFHX0JJR19ERUNJTUFMOiByZXR1cm4gRkxBR19CSUdfREVDSU1BTDsKICAgIGNhc2UgSlNfVEFHX0JJR19JTlQ6IHJldHVybiBGTEFHX0JJR19JTlQ7CiAgICBjYXNlIEpTX1RBR19CSUdfRkxPQVQ6IHJldHVybiBGTEFHX0JJR19GTE9BVDsKICAgIGNhc2UgSlNfVEFHX1NZTUJPTDogcmV0dXJuIEZMQUdfU1lNQk9MOwogICAgY2FzZSBKU19UQUdfU1RSSU5HOiByZXR1cm4gRkxBR19TVFJJTkc7CiAgICBjYXNlIEpTX1RBR19NT0RVTEU6IHJldHVybiBGTEFHX01PRFVMRTsKICAgIGNhc2UgSlNfVEFHX0ZVTkNUSU9OX0JZVEVDT0RFOiByZXR1cm4gRkxBR19GVU5DVElPTl9CWVRFQ09ERTsKICAgIGNhc2UgSlNfVEFHX09CSkVDVDogcmV0dXJuIEZMQUdfT0JKRUNUOwogICAgY2FzZSBKU19UQUdfSU5UOiByZXR1cm4gRkxBR19JTlQ7CiAgICBjYXNlIEpTX1RBR19CT09MOiByZXR1cm4gRkxBR19CT09MOwogICAgY2FzZSBKU19UQUdfTlVMTDogcmV0dXJuIEZMQUdfTlVMTDsKICAgIGNhc2UgSlNfVEFHX1VOREVGSU5FRDogcmV0dXJuIEZMQUdfVU5ERUZJTkVEOwogICAgY2FzZSBKU19UQUdfVU5JTklUSUFMSVpFRDogcmV0dXJuIEZMQUdfVU5JTklUSUFMSVpFRDsKICAgIGNhc2UgSlNfVEFHX0NBVENIX09GRlNFVDogcmV0dXJuIEZMQUdfQ0FUQ0hfT0ZGU0VUOwogICAgY2FzZSBKU19UQUdfRVhDRVBUSU9OOiByZXR1cm4gRkxBR19FWENFUFRJT047CiAgICBjYXNlIEpTX1RBR19GTE9BVDY0OiByZXR1cm4gRkxBR19GTE9BVDY0OwogIH0KICByZXR1cm4gLTE7Cn0KCnZvaWQKanNfdmFsdWVfZnJlZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSB2KSB7CiAgaWYoanNfdmFsdWVfaGFzX3JlZl9jb3VudCh2KSkgewogICAgSlNSZWZDb3VudEhlYWRlciogcCA9IChKU1JlZkNvdW50SGVhZGVyKilqc192YWx1ZV9wdHIodik7CiAgICBpZihwLT5yZWZfY291bnQgPiAwKSB7CiAgICAgIC0tcC0+cmVmX2NvdW50OwogICAgICBpZihwLT5yZWZfY291bnQgPT0gMCkKICAgICAgICBfX0pTX0ZyZWVWYWx1ZShjdHgsIHYpOwogICAgfQogIH0KfQoKSlNWYWx1ZQpqc192YWx1ZV9jbG9uZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgZW51bSB2YWx1ZV9tYXNrIHR5cGUgPSAxIDw8IGpzX3ZhbHVlX3R5cGVfZ2V0KGN0eCwgdmFsdWUpOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwogIHN3aXRjaCh0eXBlKSB7CiAgICAvKmNhc2UgVFlQRV9TVFJJTkc6IHsKICAgICBzaXplX3QgbGVuOwogICAgIGNvbnN0IGNoYXIqIHN0cjsKICAgICBzdHIgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCAmbGVuLCB2YWx1ZSk7CiAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgc3RyLCBsZW4pOwogICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cik7CiAgICAgYnJlYWs7CiAgICAgfSovCiAgICBjYXNlIFRZUEVfSU5UOiB7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgSlNfVkFMVUVfR0VUX0lOVCh2YWx1ZSkpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVFlQRV9GTE9BVDY0OiB7CiAgICAgIHJldCA9IEpTX05ld0Zsb2F0NjQoY3R4LCBKU19WQUxVRV9HRVRfRkxPQVQ2NCh2YWx1ZSkpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVFlQRV9CT09MOiB7CiAgICAgIHJldCA9IEpTX05ld0Jvb2woY3R4LCBKU19WQUxVRV9HRVRfQk9PTCh2YWx1ZSkpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVFlQRV9GVU5DVElPTjoKICAgIGNhc2UgVFlQRV9BUlJBWToKICAgIGNhc2UgVFlQRV9PQkpFQ1Q6IHsKICAgICAgSlNQcm9wZXJ0eUVudW0qIHRhYl9hdG9tOwogICAgICB1aW50MzJfdCB0YWJfYXRvbV9sZW47CiAgICAgIHJldCA9IEpTX0lzQXJyYXkoY3R4LCB2YWx1ZSkgPyBKU19OZXdBcnJheShjdHgpIDogSlNfTmV3T2JqZWN0KGN0eCk7CiAgICAgIGlmKCFKU19HZXRPd25Qcm9wZXJ0eU5hbWVzKGN0eCwgJnRhYl9hdG9tLCAmdGFiX2F0b21fbGVuLCB2YWx1ZSwgSlNfR1BOX1NUUklOR19NQVNLIHwgSlNfR1BOX1NZTUJPTF9NQVNLIHwgSlNfR1BOX0VOVU1fT05MWSkpIHsKICAgICAgICB1aW50MzJfdCBpOwogICAgICAgIGZvcihpID0gMDsgaSA8IHRhYl9hdG9tX2xlbjsgaSsrKSB7CiAgICAgICAgICBKU1ZhbHVlIHByb3A7CiAgICAgICAgICBwcm9wID0gSlNfR2V0UHJvcGVydHkoY3R4LCB2YWx1ZSwgdGFiX2F0b21baV0uYXRvbSk7CiAgICAgICAgICBKU19TZXRQcm9wZXJ0eShjdHgsIHJldCwgdGFiX2F0b21baV0uYXRvbSwganNfdmFsdWVfY2xvbmUoY3R4LCBwcm9wKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUWVBFX1VOREVGSU5FRDoKICAgIGNhc2UgVFlQRV9OVUxMOgogICAgY2FzZSBUWVBFX1NUUklORzoKICAgIGNhc2UgVFlQRV9TWU1CT0w6CiAgICBjYXNlIFRZUEVfQklHX0RFQ0lNQUw6CiAgICBjYXNlIFRZUEVfQklHX0lOVDoKICAgIGNhc2UgVFlQRV9CSUdfRkxPQVQ6IHsKICAgICAgcmV0ID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgZGVmYXVsdDogewogICAgICByZXQgPSBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJObyBzdWNoIHR5cGU6ICVzICgweCUwOHgpXG4iLCBqc192YWx1ZV90eXBlX25hbWUodHlwZSksIHR5cGUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKdm9pZApqc192YWx1ZV9md3JpdGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWwsIEZJTEUqIGYpIHsKICBEeW5CdWYgZGJ1ZiA9IHswfTsKICBzaXplX3QgbjsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CiAganNfdmFsdWVfZHVtcChjdHgsIHZhbCwgJmRidWYpOwogIGRidWZfcHV0YygmZGJ1ZiwgJ1xuJyk7CiAgbiA9IGRidWYuc2l6ZTsKICBkYnVmXzAoJmRidWYpOwogIGZ3cml0ZShkYnVmLmJ1ZiwgMSwgbiwgZik7CiAgZmZsdXNoKGYpOwogIGRidWZfZnJlZSgmZGJ1Zik7Cn0KCnZvaWQKanNfdmFsdWVfZHVtcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlLCBEeW5CdWYqIGRiKSB7CiAgY29uc3QgY2hhciogc3RyOwogIHNpemVfdCBsZW47CiAgaWYoSlNfSXNPYmplY3QodmFsdWUpKSB7CiAgICBjb25zdCBjaGFyKiBzdHIgPSBqc19vYmplY3RfdG9zdHJpbmcoY3R4LCB2YWx1ZSk7CiAgICBkYnVmX3B1dHN0cihkYiwgc3RyKTsKICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cik7CiAgICBpZihkYi0+c2l6ZSAmJiBkYi0+YnVmW2RiLT5zaXplIC0gMV0gPT0gJ1xuJykKICAgICAgZGItPnNpemUtLTsKICB9IGVsc2UgewogICAgaW50IGlzX3N0cmluZyA9IEpTX0lzU3RyaW5nKHZhbHVlKTsKCiAgICBpZihpc19zdHJpbmcpCiAgICAgIGRidWZfcHV0YyhkYiwgJyInKTsKCiAgICBzdHIgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCAmbGVuLCB2YWx1ZSk7CiAgICBkYnVmX2FwcGVuZChkYiwgKGNvbnN0IHVpbnQ4X3QqKXN0ciwgbGVuKTsKCiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwoKICAgIGlmKGlzX3N0cmluZykKICAgICAgZGJ1Zl9wdXRjKGRiLCAnIicpOwogICAgZWxzZSBpZihKU19Jc0JpZ0Zsb2F0KHZhbHVlKSkKICAgICAgZGJ1Zl9wdXRjKGRiLCAnbCcpOwogICAgZWxzZSBpZihKU19Jc0JpZ0RlY2ltYWwodmFsdWUpKQogICAgICBkYnVmX3B1dGMoZGIsICdtJyk7CiAgICBlbHNlIGlmKEpTX0lzQmlnSW50KGN0eCwgdmFsdWUpKQogICAgICBkYnVmX3B1dGMoZGIsICduJyk7CiAgfQp9CgpCT09MCmpzX3ZhbHVlX2VxdWFscyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGEsIEpTVmFsdWVDb25zdCBiKSB7CiAgaW50MzJfdCB0YSwgdGI7CiAgQk9PTCByZXQgPSBGQUxTRTsKICB0YSA9IGpzX3ZhbHVlX3R5cGUoY3R4LCBhKTsKICB0YiA9IGpzX3ZhbHVlX3R5cGUoY3R4LCBiKTsKCiAgaWYodGEgIT0gdGIpIHsKICAgIHJldCA9IEZBTFNFOwogIH0gZWxzZSBpZih0YSAmIHRiICYgKFRZUEVfTlVMTCB8IFRZUEVfVU5ERUZJTkVEIHwgVFlQRV9OQU4pKSB7CiAgICByZXQgPSBUUlVFOwogIH0gZWxzZSBpZih0YSAmIHRiICYgKFRZUEVfQklHX0lOVCB8IFRZUEVfQklHX0ZMT0FUIHwgVFlQRV9CSUdfREVDSU1BTCkpIHsKICAgIGNvbnN0IGNoYXIgKmFzdHIsICpic3RyOwoKICAgIGFzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCBhKTsKICAgIGJzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCBiKTsKCiAgICByZXQgPSAhc3RyY21wKGFzdHIsIGJzdHIpOwoKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgYXN0cik7CiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIGJzdHIpOwoKICB9IGVsc2UgaWYodGEgJiBUWVBFX0lOVCkgewogICAgaW50MzJfdCBpbnRhLCBpbnRiOwoKICAgIGludGEgPSBKU19WQUxVRV9HRVRfSU5UKGEpOwogICAgaW50YiA9IEpTX1ZBTFVFX0dFVF9JTlQoYik7CiAgICByZXQgPSBpbnRhID09IGludGI7CiAgfSBlbHNlIGlmKHRhICYgVFlQRV9CT09MKSB7CiAgICBCT09MIGJvb2xhLCBib29sYjsKCiAgICBib29sYSA9ICEhSlNfVkFMVUVfR0VUX0JPT0woYSk7CiAgICBib29sYiA9ICEhSlNfVkFMVUVfR0VUX0JPT0woYik7CiAgICByZXQgPSBib29sYSA9PSBib29sYjsKCiAgfSBlbHNlIGlmKHRhICYgVFlQRV9GTE9BVDY0KSB7CiAgICBkb3VibGUgZmx0YSwgZmx0YjsKCiAgICBmbHRhID0gSlNfVkFMVUVfR0VUX0ZMT0FUNjQoYSk7CiAgICBmbHRiID0gSlNfVkFMVUVfR0VUX0ZMT0FUNjQoYik7CiAgICByZXQgPSBmbHRhID09IGZsdGI7CgogIH0gZWxzZSBpZih0YSAmIFRZUEVfT0JKRUNUKSB7CiAgICByZXQgPSBqc19vYmplY3RfZXF1YWxzKGN0eCwgYSwgYik7CiAgICAvKnZvaWQgKm9iamEsICpvYmpiOwoKICAgIG9iamEgPSBKU19WQUxVRV9HRVRfT0JKKGEpOwogICAgb2JqYiA9IEpTX1ZBTFVFX0dFVF9PQkooYik7CgogICAgcmV0ID0gb2JqYSA9PSBvYmpiOyovCiAgfSBlbHNlIGlmKHRhICYgVFlQRV9TVFJJTkcpIHsKICAgIGNvbnN0IGNoYXIgKnN0cmEsICpzdHJiOwoKICAgIHN0cmEgPSBKU19Ub0NTdHJpbmcoY3R4LCBhKTsKICAgIHN0cmIgPSBKU19Ub0NTdHJpbmcoY3R4LCBiKTsKCiAgICByZXQgPSAhc3RyY21wKHN0cmEsIHN0cmIpOwoKICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cmEpOwogICAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYik7CiAgfQoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3ZhbHVlX2Zyb21fY2hhcihKU0NvbnRleHQqIGN0eCwgaW50IGMpIHsKICB1aW50OF90IGJ1ZlsxNl07CiAgc2l6ZV90IGxlbiA9IHVuaWNvZGVfdG9fdXRmOChidWYsIGMpOwogIHJldHVybiBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopYnVmLCBsZW4pOwp9Cgp2b2lkCmpzX3ZhbHVlX3ByaW50KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBEeW5CdWYgZGJ1ZjsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CiAganNfdmFsdWVfZHVtcChjdHgsIHZhbHVlLCAmZGJ1Zik7CiAgZGJ1Zl8wKCZkYnVmKTsKICBmcHV0cygoY29uc3QgY2hhciopZGJ1Zi5idWYsIHN0ZG91dCk7CiAgZGJ1Zl9mcmVlKCZkYnVmKTsKfQoKaW50CmpzX3ZhbHVlX3Rvc2l6ZShKU0NvbnRleHQqIGN0eCwgc2l6ZV90KiBzeiwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgdWludDY0X3QgdTY0ID0gMDsKICBpbnQgcjsKICByID0gSlNfVG9JbmRleChjdHgsICZ1NjQsIHZhbHVlKTsKICAqc3ogPSB1NjQ7CiAgcmV0dXJuIHI7Cn0KCnZvaWQKanNfdmFsdWVfZnJlZV9ydChKU1J1bnRpbWUqIHJ0LCBKU1ZhbHVlIHYpIHsKICBpZihqc192YWx1ZV9oYXNfcmVmX2NvdW50KHYpKSB7CiAgICBKU1JlZkNvdW50SGVhZGVyKiBwID0gKEpTUmVmQ291bnRIZWFkZXIqKWpzX3ZhbHVlX3B0cih2KTsKICAgIC0tcC0+cmVmX2NvdW50OwogICAgaWYocC0+cmVmX2NvdW50ID09IDApCiAgICAgIF9fSlNfRnJlZVZhbHVlUlQocnQsIHYpOwogIH0KfQoKY2hhcioKanNfY3N0cmluZ19wdHIoSlNWYWx1ZUNvbnN0IHYpIHsKICBKU1N0cmluZyogcDsKCiAgaWYoSlNfSXNTdHJpbmcodikpIHsKICAgIHAgPSBKU19WQUxVRV9HRVRfUFRSKHYpOwogICAgcmV0dXJuIChjaGFyKilwLT51LnN0cjg7CiAgfQogIHJldHVybiAwOwp9CmNoYXIqCmpzX2NzdHJpbmdfZHVwKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBzdHIpIHsKICBKU1N0cmluZyogcDsKICBpZighc3RyKQogICAgcmV0dXJuIDA7CiAgLyogcHVycG9zZWx5IHJlbW92aW5nIGNvbnN0bmVzcyAqLwogIHAgPSAoSlNTdHJpbmcqKSh2b2lkKikoc3RyIC0gb2Zmc2V0b2YoSlNTdHJpbmcsIHUpKTsKICBKU19EdXBWYWx1ZShjdHgsIEpTX01LUFRSKEpTX1RBR19TVFJJTkcsIHApKTsKICByZXR1cm4gKGNoYXIqKXN0cjsKfQoKSlNWYWx1ZUNvbnN0CmpzX2NzdHJpbmdfdmFsdWUoY29uc3QgY2hhciogcHRyKSB7CiAgSlNTdHJpbmcqIHA7CiAgaWYoIXB0cikKICAgIHJldHVybiBKU19VTkRFRklORUQ7CgogIHAgPSAoSlNTdHJpbmcqKSh2b2lkKikocHRyIC0gb2Zmc2V0b2YoSlNTdHJpbmcsIHUpKTsKICByZXR1cm4gSlNfTUtQVFIoSlNfVEFHX1NUUklORywgcCk7Cn0KCnZvaWQKanNfY3N0cmluZ19kdW1wKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUsIER5bkJ1ZiogZGIpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgc2l6ZV90IGxlbjsKCiAgc3RyID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgJmxlbiwgdmFsdWUpOwogIGRidWZfYXBwZW5kKGRiLCAoY29uc3QgdWludDhfdCopc3RyLCBsZW4pOwoKICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwp9CgpKU1ZhbHVlCmpzX21hcF9uZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBlbnRyaWVzKSB7CiAgSlNWYWx1ZSBtYXAsIGN0b3IgPSBqc19nbG9iYWxfZ2V0KGN0eCwgIk1hcCIpOwogIG1hcCA9IEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIDEsICZlbnRyaWVzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gbWFwOwp9CgpKU1ZhbHVlCm1vZHVsZV9uYW1lKEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbW9kdWxlKSB7CiAgcmV0dXJuIEpTX0F0b21Ub1ZhbHVlKGN0eCwgbW9kdWxlLT5tb2R1bGVfbmFtZSk7Cn0KCmNvbnN0IGNoYXIqCm1vZHVsZV9uYW1lc3RyKEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbW9kdWxlKSB7CiAgY29uc3QgY2hhciAqc3RyLCAqbmFtZSA9IEpTX0F0b21Ub0NTdHJpbmcoY3R4LCBtb2R1bGUtPm1vZHVsZV9uYW1lKTsKICBzdHIgPSBqc19zdHJkdXAoY3R4LCBuYW1lKTsKICBKU19GcmVlQ1N0cmluZyhjdHgsIG5hbWUpOwogIHJldHVybiBzdHI7Cn0KCkpTVmFsdWUKbW9kdWxlX2Z1bmMoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtb2R1bGUpIHsKICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBtb2R1bGUtPmZ1bmNfb2JqKTsKfQoKSlNWYWx1ZQptb2R1bGVfbnMoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtb2R1bGUpIHsKICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBtb2R1bGUtPm1vZHVsZV9ucyk7Cn0KCkpTVmFsdWUKbW9kdWxlX2V4cG9ydHMoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtb2R1bGUpIHsKICBKU1ZhbHVlIGV4cG9ydHMgPSBKU19OZXdPYmplY3QoY3R4KTsKICBzaXplX3QgaTsKICBmb3IoaSA9IDA7IGkgPCBtb2R1bGUtPmV4cG9ydF9lbnRyaWVzX2NvdW50OyBpKyspIHsKICAgIEpTRXhwb3J0RW50cnkqIGVudHJ5ID0gJm1vZHVsZS0+ZXhwb3J0X2VudHJpZXNbaV07CiAgICBKU1ZhclJlZiogcmVmID0gZW50cnktPnUubG9jYWwudmFyX3JlZjsKICAgIGlmKHJlZikgewogICAgICBKU1ZhbHVlIGV4cG9ydCA9IEpTX0R1cFZhbHVlKGN0eCwgcmVmLT5wdmFsdWUgPyAqcmVmLT5wdmFsdWUgOiByZWYtPnZhbHVlKTsKICAgICAgSlNfU2V0UHJvcGVydHkoY3R4LCBleHBvcnRzLCBlbnRyeS0+ZXhwb3J0X25hbWUsIGV4cG9ydCk7CiAgICB9CiAgfQogIHJldHVybiBleHBvcnRzOwp9CgpzdHJ1Y3QgbGlzdF9oZWFkKgpqc19tb2R1bGVzX2xpc3QoSlNDb250ZXh0KiBjdHgpIHsKICByZXR1cm4gJmN0eC0+bG9hZGVkX21vZHVsZXM7Cn0KCkpTVmFsdWUKanNfbW9kdWxlc19hcnJheShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBzdHJ1Y3QgbGlzdF9oZWFkKiBlbDsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgdWludDMyX3QgaSA9IDA7CiAgbGlzdF9mb3JfZWFjaChlbCwgJmN0eC0+bG9hZGVkX21vZHVsZXMpIHsKICAgIEpTTW9kdWxlRGVmKiBkZWYgPSBsaXN0X2VudHJ5KGVsLCBKU01vZHVsZURlZiwgbGluayk7CiAgICBjb25zdCBjaGFyKiBzdHIgPSBtb2R1bGVfbmFtZXN0cihjdHgsIGRlZik7CiAgICBKU1ZhbHVlIGVudHJ5ID0gbWFnaWMgPyBtb2R1bGVfZW50cnkoY3R4LCBkZWYpIDogbW9kdWxlX29iamVjdChjdHgsIGRlZik7CiAgICBpZihzdHJbMF0gIT0gJzwnKQogICAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSsrLCBlbnRyeSk7CiAgICBlbHNlCiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGVudHJ5KTsKICAgIGpzX2ZyZWUoY3R4LCBzdHIpOwogIH0KICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX21vZHVsZXNfZW50cmllcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBzdHJ1Y3QgbGlzdF9oZWFkKiBlbDsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgdWludDMyX3QgaSA9IDA7CiAgbGlzdF9mb3JfZWFjaChlbCwgJmN0eC0+bG9hZGVkX21vZHVsZXMpIHsKICAgIEpTTW9kdWxlRGVmKiBkZWYgPSBsaXN0X2VudHJ5KGVsLCBKU01vZHVsZURlZiwgbGluayk7CiAgICBjb25zdCBjaGFyKiBuYW1lID0gbW9kdWxlX25hbWVzdHIoY3R4LCBkZWYpOwogICAgSlNWYWx1ZSBlbnRyeSA9IEpTX05ld0FycmF5KGN0eCk7CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAwLCBKU19OZXdTdHJpbmcoY3R4LCAvKmJhc2VuYW1lKi8gKG5hbWUpKSk7CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAxLCBtYWdpYyA/IG1vZHVsZV9lbnRyeShjdHgsIGRlZikgOiBtb2R1bGVfb2JqZWN0KGN0eCwgZGVmKSk7CiAgICBpZihuYW1lWzBdICE9ICc8JykKICAgICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGkrKywgZW50cnkpOwogICAgZWxzZQogICAgICBKU19GcmVlVmFsdWUoY3R4LCBlbnRyeSk7CiAgICBqc19mcmVlKGN0eCwgbmFtZSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfbW9kdWxlc19tYXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgSlNWYWx1ZSBtYXAsIGVudHJpZXMgPSBqc19tb2R1bGVzX2VudHJpZXMoY3R4LCB0aGlzX3ZhbCwgbWFnaWMpOwogIG1hcCA9IGpzX21hcF9uZXcoY3R4LCBlbnRyaWVzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBlbnRyaWVzKTsKICByZXR1cm4gbWFwOwp9CgpKU1ZhbHVlCmpzX21vZHVsZXNfb2JqZWN0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykgewogIHN0cnVjdCBsaXN0X2hlYWQqIGl0OwogIEpTVmFsdWUgb2JqID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgbGlzdF9mb3JfZWFjaChpdCwgJmN0eC0+bG9hZGVkX21vZHVsZXMpIHsKICAgIEpTTW9kdWxlRGVmKiBkZWYgPSBsaXN0X2VudHJ5KGl0LCBKU01vZHVsZURlZiwgbGluayk7CiAgICBjb25zdCBjaGFyKiBuYW1lID0gbW9kdWxlX25hbWVzdHIoY3R4LCBkZWYpOwogICAgSlNWYWx1ZSBlbnRyeSA9IG1hZ2ljID8gbW9kdWxlX2VudHJ5KGN0eCwgZGVmKSA6IG1vZHVsZV9vYmplY3QoY3R4LCBkZWYpOwogICAgaWYobmFtZVswXSAhPSAnPCcpCiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBiYXNlbmFtZShuYW1lKSwgZW50cnkpOwogICAgZWxzZQogICAgICBKU19GcmVlVmFsdWUoY3R4LCBlbnRyeSk7CiAgICBqc19mcmVlKGN0eCwgbmFtZSk7CiAgfQogIHJldHVybiBvYmo7Cn0KCkpTVmFsdWUKbW9kdWxlX29iamVjdChKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIGRlZikgewogIHJldHVybiBKU19EdXBWYWx1ZShjdHgsIEpTX01LUFRSKEpTX1RBR19NT0RVTEUsIGRlZikpOwp9CgpKU1ZhbHVlCm1vZHVsZV9lbnRyeShKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIGRlZikgewogIEpTVmFsdWUgZW50cnkgPSBKU19OZXdBcnJheShjdHgpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgZW50cnksIDAsIG1vZHVsZV9ucyhjdHgsIGRlZikpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgZW50cnksIDEsIG1vZHVsZV9leHBvcnRzKGN0eCwgZGVmKSk7CiAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBlbnRyeSwgMiwgbW9kdWxlX2Z1bmMoY3R4LCBkZWYpKTsKICByZXR1cm4gZW50cnk7Cn0KCmNoYXIqCmpzX21vZHVsZV9zZWFyY2goSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG1vZHVsZSkgewogIGNoYXIqIHBhdGggPSAwOwogIHNpemVfdCBsZW47CgogIHdoaWxlKCFzdHJuY21wKG1vZHVsZSwgIi4vIiwgMikpIG1vZHVsZSA9IHRyaW1fZG90c2xhc2gobW9kdWxlKTsKICBsZW4gPSBzdHJsZW4obW9kdWxlKTsKCiAgaWYoIXN0cl9jb250YWlucyhtb2R1bGUsICcvJykgfHwgc3RyX2VuZHMobW9kdWxlLCAiLnNvIikpCiAgICBwYXRoID0ganNfbW9kdWxlX3NlYXJjaF9leHQoY3R4LCBtb2R1bGUsICIuc28iKTsKCiAgaWYoIXBhdGgpCiAgICBwYXRoID0ganNfbW9kdWxlX3NlYXJjaF9leHQoY3R4LCBtb2R1bGUsICIuanMiKTsKCiAgcmV0dXJuIHBhdGg7Cn0KCmNoYXIqCmpzX21vZHVsZV9zZWFyY2hfZXh0KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lLCBjb25zdCBjaGFyKiBleHQpIHsKICBjb25zdCBjaGFyICpwYXRoLCAqcCwgKnE7CiAgY2hhciogZmlsZSA9IDA7CiAgc2l6ZV90IGksIGo7CiAgc3RydWN0IHN0YXQgc3Q7CgogIGlmKChwYXRoID0gZ2V0ZW52KCJRVUlDS0pTX01PRFVMRV9QQVRIIikpID09IDApCiAgICBwYXRoID0ganNfZGVmYXVsdF9tb2R1bGVfcGF0aDsKCiAgZm9yKHAgPSBwYXRoOyAqcDsgcCA9IHEpIHsKICAgIGlmKChxID0gc3RyY2hyKHAsICc6JykpID09IDApCiAgICAgIHEgPSBwICsgc3RybGVuKHApOwogICAgaSA9IHEgLSBwOwogICAgZmlsZSA9IGpzX21hbGxvYyhjdHgsIGkgKyAxICsgc3RybGVuKG5hbWUpICsgMyArIDEpOwogICAgc3RybmNweShmaWxlLCBwLCBpKTsKICAgIGZpbGVbaV0gPSAnLyc7CiAgICBzdHJjcHkoJmZpbGVbaSArIDFdLCBuYW1lKTsKICAgIGogPSBzdHJsZW4obmFtZSk7CiAgICBpZighKGogPj0gMyAmJiAhc3RyY21wKCZuYW1lW2ogLSAzXSwgZXh0KSkpCiAgICAgIHN0cmNweSgmZmlsZVtpICsgMSArIGpdLCBleHQpOwogICAgaWYoIXN0YXQoZmlsZSwgJnN0KSkKICAgICAgcmV0dXJuIGZpbGU7CiAgICBqc19mcmVlKGN0eCwgZmlsZSk7CiAgICBpZigqcSA9PSAnOicpCiAgICAgICsrcTsKICB9CiAgcmV0dXJuIDA7Cn0KCmNoYXIqCmpzX21vZHVsZV9ub3JtYWxpemUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHBhdGgsIGNvbnN0IGNoYXIqIG5hbWUsIHZvaWQqIG9wYXF1ZSkgewogIHNpemVfdCBwOwogIGNvbnN0IGNoYXIqIHI7CiAgRHluQnVmIGZpbGUgPSB7MCwgMCwgMH07CiAgc2l6ZV90IG47CiAgaWYobmFtZVswXSAhPSAnLicpCiAgICByZXR1cm4ganNfc3RyZHVwKGN0eCwgbmFtZSk7CiAganNfZGJ1Zl9pbml0KGN0eCwgJmZpbGUpOwogIG4gPSBwYXRoWyhwID0gc3RyX3JjaHIocGF0aCwgJy8nKSldID8gcCA6IDA7CiAgZGJ1Zl9wdXQoJmZpbGUsIHBhdGgsIG4pOwogIGRidWZfMCgmZmlsZSk7CiAgZm9yKHIgPSBuYW1lOzspIHsKICAgIGlmKHJbMF0gPT0gJy4nICYmIHJbMV0gPT0gJy8nKSB7CiAgICAgIHIgKz0gMjsKICAgIH0gZWxzZSBpZihyWzBdID09ICcuJyAmJiByWzFdID09ICcuJyAmJiByWzJdID09ICcvJykgewogICAgICBpZihmaWxlLnNpemUgPT0gMCkKICAgICAgICBicmVhazsKICAgICAgaWYoKHAgPSBieXRlX3JjaHIoZmlsZS5idWYsIGZpbGUuc2l6ZSwgJy8nKSkgPCBmaWxlLnNpemUpCiAgICAgICAgcCsrOwogICAgICBlbHNlCiAgICAgICAgcCA9IDA7CiAgICAgIGlmKCFzdHJjbXAoJmZpbGUuYnVmW3BdLCAiLiIpIHx8ICFzdHJjbXAoJmZpbGUuYnVmW3BdLCAiLi4iKSkKICAgICAgICBicmVhazsKICAgICAgaWYocCA+IDApCiAgICAgICAgcC0tOwogICAgICBmaWxlLnNpemUgPSBwOwogICAgICByICs9IDM7CiAgICB9IGVsc2UgewogICAgICBicmVhazsKICAgIH0KICB9CiAgaWYoZmlsZS5zaXplID09IDApCiAgICBkYnVmX3B1dGMoJmZpbGUsICcuJyk7CiAgZGJ1Zl9wdXRjKCZmaWxlLCAnLycpOwogIGRidWZfcHV0c3RyKCZmaWxlLCByKTsKICBkYnVmXzAoJmZpbGUpOwogIHJldHVybiBmaWxlLmJ1ZjsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9kZWYoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEpTTW9kdWxlRGVmKiBkZWYgPSAwOwogIGlmKEpTX0lzU3RyaW5nKHZhbHVlKSkgewogICAgY29uc3QgY2hhciogbmFtZSA9IEpTX1RvQ1N0cmluZyhjdHgsIHZhbHVlKTsKICAgIGRlZiA9IGpzX21vZHVsZV9maW5kKGN0eCwgbmFtZSk7CiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIG5hbWUpOwogIH0gZWxzZSBpZihKU19WQUxVRV9HRVRfVEFHKHZhbHVlKSA9PSBKU19UQUdfTU9EVUxFKSB7CiAgICBkZWYgPSBKU19WQUxVRV9HRVRfUFRSKHZhbHVlKTsKICB9CiAgcmV0dXJuIGRlZjsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9maW5kKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBuYW1lKSB7CiAgc3RydWN0IGxpc3RfaGVhZCogZWw7CiAgc2l6ZV90IG5hbWVsZW4gPSBzdHJsZW4obmFtZSk7CiAgbGlzdF9mb3JfZWFjaChlbCwgJmN0eC0+bG9hZGVkX21vZHVsZXMpIHsKICAgIEpTTW9kdWxlRGVmKiBtb2QgPSBsaXN0X2VudHJ5KGVsLCBKU01vZHVsZURlZiwgbGluayk7CiAgICBjb25zdCBjaGFyICpuLCAqc3RyID0gbW9kdWxlX25hbWVzdHIoY3R4LCBtb2QpOwogICAgc2l6ZV90IGxlbjsKICAgIG4gPSBiYXNlbmFtZShzdHIpOwogICAgbGVuID0gc3RyX3JjaHIobiwgJy4nKTsKICAgIGlmKCFzdHJjbXAoc3RyLCBuYW1lKSB8fCAhc3RyY21wKG4sIG5hbWUpIHx8IChsZW4gPT0gbmFtZWxlbiAmJiAhc3RybmNtcChuLCBuYW1lLCBsZW4pKSkKICAgICAgcmV0dXJuIG1vZDsKICAgIGpzX2ZyZWUoY3R4LCBzdHIpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIHZvaWQKanNfaW1wb3J0X2RpcmVjdGl2ZShKU0NvbnRleHQqIGN0eCwgSW1wb3J0RGlyZWN0aXZlIGltcCwgRHluQnVmKiBkYikgewogIEJPT0wgaGFzX3Byb3AgPSBpbXAucHJvcCAmJiBpbXAucHJvcFswXTsKICBCT09MIGlzX25zID0gaW1wLnNwZWMgJiYgaW1wLnNwZWNbMF0gPT0gJyonOwogIGNoYXIqIHZhcjsKICBjb25zdCBjaGFyKiBiYXNlID0gYmFzZW5hbWUoaW1wLnBhdGgpOwogIHNpemVfdCBibGVuID0gc3RyX2NocihiYXNlLCAnLicpOwogIGRidWZfcHV0c3RyKGRiLCAiaW1wb3J0ICIpOwogIGlmKGltcC5zcGVjKSB7CiAgICBkYnVmX3B1dHN0cihkYiwgaW1wLnNwZWMpOwogICAgaWYoaXNfbnMpIHsKICAgICAgaWYoIWltcC5ucykKICAgICAgICBpbXAubnMgPSBqc19zdHJuZHVwKGN0eCwgYmFzZSwgYmxlbik7CiAgICAgIGRidWZfcHV0c3RyKGRiLCAiIGFzICIpOwogICAgfQogIH0KICBpZihpbXAuc3BlYyA9PSAwIHx8IHN0cl9lcXVhbChpbXAuc3BlYywgImRlZmF1bHQiKSkgewogICAgaWYoIWltcC5ucykKICAgICAgaW1wLm5zID0ganNfc3RybmR1cChjdHgsIGJhc2UsIGJsZW4pOwogIH0KICBpZihpbXAubnMpCiAgICBkYnVmX3B1dG0oZGIsIGltcC5ucywgMCk7CiAgaWYoaW1wLnBhdGgpCiAgICBkYnVmX3B1dG0oZGIsICIgZnJvbSAnIiwgaW1wLnBhdGgsICInIiwgMCk7CiAgaWYoISh2YXIgPSBpbXAudmFyKSkKICAgIGlmKCEodmFyID0gaW1wLm5zKSkKICAgICAgdmFyID0gaW1wLnNwZWM7CiAgZGJ1Zl9wdXRzdHIoZGIsICI7XG4iKTsKCiAgaWYoKGhhc19wcm9wIHx8IGlzX25zKSAmJiB2YXJbMF0gIT0gJyonKSB7CiAgICBkYnVmX3B1dG0oZGIsICJnbG9iYWxUaGlzLiIsIHZhciwgIiA9ICIsIGltcC5ucyA/IGltcC5ucyA6IGltcC5zcGVjLCBpbXAucHJvcCAmJiAqaW1wLnByb3AgPyAiLiIgOiAwLCBpbXAucHJvcCwgMCk7CiAgfSBlbHNlIHsKICAgIGRidWZfcHV0bShkYiwgIk9iamVjdC5hc3NpZ24oZ2xvYmFsVGhpcywgIiwgaW1wLm5zID8gaW1wLm5zIDogaW1wLnNwZWMsIDApOwogICAgZGJ1Zl9wdXRjKGRiLCAnKScpOwogIH0KICBkYnVmX3B1dG0oZGIsICI7IiwgMCk7CiAgZGJ1Zl8wKGRiKTsKfQoKSlNWYWx1ZQpqc19pbXBvcnRfZXZhbChKU0NvbnRleHQqIGN0eCwgSW1wb3J0RGlyZWN0aXZlIGltcCkgewogIER5bkJ1ZiBidWY7CiAganNfZGJ1Zl9pbml0KGN0eCwgJmJ1Zik7CiAganNfaW1wb3J0X2RpcmVjdGl2ZShjdHgsIGltcCwgJmJ1Zik7CiAgcHJpbnRmKCJqc19pbXBvcnRfZXZhbDogJyUuKnMnXG4iLCBidWYuc2l6ZSwgYnVmLmJ1Zik7CiAgcmV0dXJuIGpzX2V2YWxfYnVmKGN0eCwgYnVmLmJ1ZiwgYnVmLnNpemUsIDAsIEpTX0VWQUxfVFlQRV9NT0RVTEUpOwp9CgpKU01vZHVsZURlZioKanNfbW9kdWxlX2ltcG9ydF9kZWZhdWx0KEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBwYXRoLCBjb25zdCBjaGFyKiB2YXIpIHsKICBqc19pbXBvcnRfZXZhbChjdHgsCiAgICAgICAgICAgICAgICAgKEltcG9ydERpcmVjdGl2ZSl7CiAgICAgICAgICAgICAgICAgICAgIC5wYXRoID0gcGF0aCwKICAgICAgICAgICAgICAgICAgICAgLnNwZWMgPSAiZGVmYXVsdCIsCiAgICAgICAgICAgICAgICAgICAgIC5ucyA9IDAsCiAgICAgICAgICAgICAgICAgICAgIC5wcm9wID0gImRlZmF1bHQiLAogICAgICAgICAgICAgICAgICAgICAudmFyID0gMCwKICAgICAgICAgICAgICAgICB9KTsKICAvLyBwcmludGYoImpzX2ltcG9ydF9ldmFsOiAnJS4qcydcbiIsIGJ1Zi5zaXplLCBidWYuYnVmKTsKICByZXR1cm4ganNfbW9kdWxlX2ZpbmQoY3R4LCBwYXRoKTsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9pbXBvcnRfbmFtZXNwYWNlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBwYXRoLCBjb25zdCBjaGFyKiBucykgewogIGpzX2ltcG9ydF9ldmFsKGN0eCwKICAgICAgICAgICAgICAgICAoSW1wb3J0RGlyZWN0aXZlKXsKICAgICAgICAgICAgICAgICAgICAgLnBhdGggPSBwYXRoLAogICAgICAgICAgICAgICAgICAgICAuc3BlYyA9ICIqIiwKICAgICAgICAgICAgICAgICAgICAgLm5zID0gbnMsCiAgICAgICAgICAgICAgICAgICAgIC5wcm9wID0gMCwKICAgICAgICAgICAgICAgICAgICAgLnZhciA9IDAsCiAgICAgICAgICAgICAgICAgfSk7CiAgLy8ganNfbW9kdWxlX2ltcG9ydChjdHgsIHBhdGgsIG5zLCAwLCAwKTsKCiAgcmV0dXJuIGpzX21vZHVsZV9maW5kKGN0eCwgcGF0aCk7Cn0KCkpTVmFsdWUKanNfbW9kdWxlX2ltcG9ydChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcGF0aCwgY29uc3QgY2hhciogbnMsIGNvbnN0IGNoYXIqIHZhciwgY29uc3QgY2hhciogcHJvcCkgewogIER5bkJ1ZiBidWY7CiAgY29uc3QgY2hhciogbmFtZTsKICBzaXplX3QgbGVuLCBuc2xlbjsKICBuYW1lID0gYmFzZW5hbWUocGF0aCk7CiAgbGVuID0gMDsKICB3aGlsZShuYW1lW2xlbl0gJiYgaXNfaWRlbnRpZmllcl9jaGFyKG5hbWVbbGVuXSkpICsrbGVuOwogIG5zbGVuID0gbnMgPyBzdHJsZW4obnMpIDogbGVuOwogIG5zID0gbnMgPyBqc19zdHJkdXAoY3R4LCBucykgOiBqc19zdHJuZHVwKGN0eCwgbmFtZSwgbGVuKTsKICBqc19kYnVmX2luaXQoY3R4LCAmYnVmKTsKICBkYnVmX3ByaW50ZigmYnVmLCAiaW1wb3J0ICVzJXMgZnJvbSAnJXMnOyBnbG9iYWxUaGlzLiVzID0gJXMiLCBucyA/ICIqIGFzICIgOiAiIiwgbnMsIHBhdGgsIHZhciA/IHZhciA6IG5zLCBucyk7CgogIGlmKHByb3AgJiYgKnByb3ApIHsKICAgIGRidWZfcHV0YygmYnVmLCAnLicpOwogICAgZGJ1Zl9wdXRzdHIoJmJ1ZiwgcHJvcCk7CiAgfQogIGRidWZfcHV0YygmYnVmLCAnOycpOwogIGRidWZfMCgmYnVmKTsKICBwcmludGYoImpzX21vZHVsZV9pbXBvcnQ6ICclcydcbiIsIGJ1Zi5idWYpOwogIHJldHVybiBqc19ldmFsX2J1ZihjdHgsIGJ1Zi5idWYsIGJ1Zi5zaXplLCAwLCBKU19FVkFMX1RZUEVfTU9EVUxFKTsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9sb2FkZXJfc28oSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG1vZHVsZSkgewogIEpTTW9kdWxlRGVmKiBkZWY7CiAgSlNNb2R1bGVMb2FkZXJGdW5jKiBpbml0OwogIHZvaWQqIGhkOwogIGNoYXIqIGZpbGU7CiAgc3RhdGljIGNvbnN0IGNoYXIqIGVycm9yc1szXSA9IHsiZGxvcGVuKCkgZmFpbGVkIiwgImpzX2luaXRfbW9kdWxlIG5vdCBmb3VuZCIsICJpbml0aWFsaXphdGlvbiBlcnJvciJ9OwogIGlmKCFzdHJjaHIobW9kdWxlLCAnLycpKSB7CiAgICBpZighKGZpbGUgPSBqc19tYWxsb2MoY3R4LCBzdHJsZW4obW9kdWxlKSArIDIgKyAxKSkpCiAgICAgIHJldHVybiAwOwogICAgc3RyY3B5KGZpbGUsICIuLyIpOwogICAgc3RyY3B5KGZpbGUgKyAyLCBtb2R1bGUpOwogIH0gZWxzZSB7CiAgICBmaWxlID0gKGNoYXIqKW1vZHVsZTsKICB9CiAgaGQgPSBkbG9wZW4oZmlsZSwgUlRMRF9OT1cgfCBSVExEX0xPQ0FMKTsKICBpZihmaWxlICE9IG1vZHVsZSkKICAgIGpzX2ZyZWUoY3R4LCBmaWxlKTsKICBpZihoZCkgewogICAgaWYoKGluaXQgPSBkbHN5bShoZCwgImpzX2luaXRfbW9kdWxlIikpKSB7CiAgICAgIGlmKCEoZGVmID0gaW5pdChjdHgsIG1vZHVsZSwgMCkpKSB7CiAgICAgICAgSlNfVGhyb3dSZWZlcmVuY2VFcnJvcihjdHgsICJjb3VsZCBub3QgbG9hZCBtb2R1bGUgZmlsZSAnJXMnOiAlcyIsIGVycm9yc1syXSk7CiAgICAgICAgZ290byBmYWlsOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBKU19UaHJvd1JlZmVyZW5jZUVycm9yKGN0eCwgImNvdWxkIG5vdCBsb2FkIG1vZHVsZSBmaWxlICclcyc6ICVzIiwgZXJyb3JzWzFdKTsKICAgICAgZ290byBmYWlsOwogICAgfQogIH0gZWxzZSB7CiAgICBKU19UaHJvd1JlZmVyZW5jZUVycm9yKGN0eCwgImNvdWxkIG5vdCBsb2FkIG1vZHVsZSBmaWxlICclcyc6ICVzOiAlcyIsIG1vZHVsZSwgZXJyb3JzWzBdLCBkbGVycm9yKCkpOwogICAgZ290byBmYWlsOwogIH0KICByZXR1cm4gZGVmOwpmYWlsOgogIGlmKGhkKQogICAgZGxjbG9zZShoZCk7CiAgcmV0dXJuIDA7Cn0KCkJPT0wKanNfaXNfYXJyYXlidWZmZXIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIEJPT0wgcmV0ID0gRkFMU0U7CiAgaWYoIUpTX0lzT2JqZWN0KHZhbHVlKSkKICAgIHJldHVybiByZXQ7CiAgaWYoIXJldCkKICAgIHJldCB8PSBqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX0FSUkFZX0JVRkZFUik7CiAgaWYoIXJldCkKICAgIHJldCB8PSBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgQXJyYXlCdWZmZXJdIik7CiAgLyogIGlmKCFyZXQpIHsKICAgICAgSlNPYmplY3QqIG9iajsKICAgICAgaWYoKG9iaiA9IGpzX3ZhbHVlX29iaih2YWx1ZSkpICYmIG9iai0+Y2xhc3NfaWQpIHsKICAgICAgICBKU1ZhbHVlIGN0b3IgPSBqc19nbG9iYWxfZ2V0KGN0eCwgIkFycmF5QnVmZmVyIik7CiAgICAgICAgcmV0ID0gSlNfSXNJbnN0YW5jZU9mKGN0eCwgdmFsdWUsIGN0b3IpOwogICAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGN0b3IpOwogICAgICB9CiAgICB9Ki8KICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2lzX3NoYXJlZGFycmF5YnVmZmVyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX1NIQVJFRF9BUlJBWV9CVUZGRVIpLyogfHwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgU2hhcmVkQXJyYXlCdWZmZXJdIikqLyk7Cn0KCkJPT0wKanNfaXNfbWFwKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX01BUCkgLyp8fCBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgTWFwXSIpKi8pOwp9CgpCT09MCmpzX2lzX3NldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzT2JqZWN0KHZhbHVlKSAmJiAoanNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19TRVQpIC8qIHx8IGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBTZXRdIikqLyk7Cn0KCkJPT0wKanNfaXNfZ2VuZXJhdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX0dFTkVSQVRPUikgLyp8fCBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgR2VuZXJhdG9yXSIpKi8pOwp9CgpCT09MCmpzX2lzX3JlZ2V4cChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzT2JqZWN0KHZhbHVlKSAmJiAoanNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19SRUdFWFApIC8qfHwganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IFJlZ0V4cF0iKSovKTsKfQoKQk9PTApqc19pc19wcm9taXNlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX1BST01JU0UpIHx8IGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBQcm9taXNlXSIpKTsKfQoKQk9PTApqc19pc19kYXRhdmlldyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzT2JqZWN0KHZhbHVlKSAmJiAoanNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19EQVRBVklFVykgLyp8fCBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgRGF0YVZpZXddIikqLyk7Cn0KCkJPT0wKanNfaXNfaXRlcmFibGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmopIHsKICBKU0F0b20gYXRvbTsKICBCT09MIHJldCA9IEZBTFNFOwogIGF0b20gPSBqc19zeW1ib2xfc3RhdGljX2F0b20oY3R4LCAiaXRlcmF0b3IiKTsKICBpZihKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSkpCiAgICByZXQgPSBUUlVFOwoKICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIGlmKCFyZXQpIHsKICAgIGF0b20gPSBqc19zeW1ib2xfc3RhdGljX2F0b20oY3R4LCAiYXN5bmNJdGVyYXRvciIpOwogICAgaWYoSlNfSGFzUHJvcGVydHkoY3R4LCBvYmosIGF0b20pKQogICAgICByZXQgPSBUUlVFOwoKICAgIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCkJPT0wKanNfaXNfaXRlcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmopIHsKICBpZihKU19Jc09iamVjdChvYmopKSB7CiAgICBKU1ZhbHVlIG5leHQgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgIm5leHQiKTsKCiAgICBpZihKU19Jc0Z1bmN0aW9uKGN0eCwgbmV4dCkpCiAgICAgIHJldHVybiBUUlVFOwogIH0KICByZXR1cm4gRkFMU0U7Cn0KCkpTVmFsdWUKanNfdHlwZWRhcnJheV9wcm90b3R5cGUoSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHU4YXJyX3Byb3RvID0ganNfZ2xvYmFsX3Byb3RvdHlwZShjdHgsICJVaW50OEFycmF5Iik7CiAgSlNWYWx1ZSB0eXBlZGFycl9wcm90byA9IEpTX0dldFByb3RvdHlwZShjdHgsIHU4YXJyX3Byb3RvKTsKICBKU19GcmVlVmFsdWUoY3R4LCB1OGFycl9wcm90byk7CiAgcmV0dXJuIHR5cGVkYXJyX3Byb3RvOwp9CgpKU1ZhbHVlCmpzX3R5cGVkYXJyYXlfY29uc3RydWN0b3IoSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHR5cGVkYXJyX3Byb3RvID0ganNfdHlwZWRhcnJheV9wcm90b3R5cGUoY3R4KTsKICBKU1ZhbHVlIHR5cGVkYXJyX2N0b3IgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHR5cGVkYXJyX3Byb3RvLCAiY29uc3RydWN0b3IiKTsKICBKU19GcmVlVmFsdWUoY3R4LCB0eXBlZGFycl9wcm90byk7CiAgcmV0dXJuIHR5cGVkYXJyX2N0b3I7Cn0KCkpTVmFsdWUKanNfaW52b2tlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc19vYmosIGNvbnN0IGNoYXIqIG1ldGhvZCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU0F0b20gYXRvbTsKICBKU1ZhbHVlIHJldDsKICBhdG9tID0gSlNfTmV3QXRvbShjdHgsIG1ldGhvZCk7CiAgcmV0ID0gSlNfSW52b2tlKGN0eCwgdGhpc19vYmosIGF0b20sIGFyZ2MsIGFyZ3YpOwogIEpTX0ZyZWVBdG9tKGN0eCwgYXRvbSk7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19zeW1ib2xfb3BlcmF0b3JzZXRfdmFsdWUoSlNDb250ZXh0KiBjdHgpIHsKICByZXR1cm4ganNfc3ltYm9sX3N0YXRpY192YWx1ZShjdHgsICJvcGVyYXRvclNldCIpOwp9CgpKU0F0b20KanNfc3ltYm9sX29wZXJhdG9yc2V0X2F0b20oSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIG9wZXJhdG9yX3NldCA9IGpzX3N5bWJvbF9vcGVyYXRvcnNldF92YWx1ZShjdHgpOwogIEpTQXRvbSBhdG9tID0gSlNfVmFsdWVUb0F0b20oY3R4LCBvcGVyYXRvcl9zZXQpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIG9wZXJhdG9yX3NldCk7CiAgcmV0dXJuIGF0b207Cn0KCkpTVmFsdWUKanNfb3BlcmF0b3JzX2NyZWF0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSogdGhpc19vYmopIHsKICBKU1ZhbHVlIG9wZXJhdG9ycyA9IGpzX2dsb2JhbF9nZXQoY3R4LCAiT3BlcmF0b3JzIik7CiAgSlNWYWx1ZSBjcmVhdGVfZnVuID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvcGVyYXRvcnMsICJjcmVhdGUiKTsKICBpZih0aGlzX29iaikKICAgICp0aGlzX29iaiA9IG9wZXJhdG9yczsKICBlbHNlCiAgICBKU19GcmVlVmFsdWUoY3R4LCBvcGVyYXRvcnMpOwogIHJldHVybiBjcmVhdGVfZnVuOwp9CgpKU1ZhbHVlCmpzX251bWJlcl9uZXcoSlNDb250ZXh0KiBjdHgsIGludDMyX3QgbikgewogIGlmKG4gPT0gSU5UMzJfTUFYKQogICAgcmV0dXJuIEpTX05ld0Zsb2F0NjQoY3R4LCBJTkZJTklUWSk7CgogIHJldHVybiBKU19OZXdJbnQzMihjdHgsIG4pOwp9CgpKU1ZhbHVlCmpzX2RhdGVfbmV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYXJnKSB7CiAgSlNWYWx1ZSBjdG9yID0ganNfZ2xvYmFsX2dldChjdHgsICJEYXRlIik7CiAgSlNWYWx1ZSByZXQgPSBKU19DYWxsQ29uc3RydWN0b3IoY3R4LCBjdG9yLCAxLCAmYXJnKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2RhdGVfZnJvbV9tcyhKU0NvbnRleHQqIGN0eCwgaW50NjRfdCBtcykgewogIEpTVmFsdWUgYXJnID0gSlNfTmV3SW50NjQoY3R4LCBtcyk7CiAgSlNWYWx1ZSByZXQgPSBqc19kYXRlX25ldyhjdHgsIGFyZyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2RhdGVfZnJvbV90aW1lX25zKEpTQ29udGV4dCogY3R4LCB0aW1lX3QgdCwgbG9uZyBucykgewogIHJldHVybiBqc19kYXRlX2Zyb21fbXMoY3R4LCB0ICogMTAwMHVsbCArIG5zIC8gMTAwMDAwMHVsbCk7Cn0KCkpTVmFsdWUKanNfZGF0ZV9mcm9tX3RpbWVzcGVjKEpTQ29udGV4dCogY3R4LCBjb25zdCBzdHJ1Y3QgdGltZXNwZWMgdHMpIHsKICByZXR1cm4ganNfZGF0ZV9mcm9tX3RpbWVfbnMoY3R4LCB0cy50dl9zZWMsIHRzLnR2X25zZWMpOwp9CgppbnQ2NF90CmpzX2RhdGVfZ2V0dGltZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGFyZykgewogIGludDY0X3QgciA9IC0xOwogIEpTQXRvbSBtZXRob2QgPSBKU19OZXdBdG9tKGN0eCwgImdldFRpbWUiKTsKICBKU1ZhbHVlIHZhbHVlID0gSlNfSW52b2tlKGN0eCwgYXJnLCBtZXRob2QsIDAsIDApOwogIEpTX0ZyZWVBdG9tKGN0eCwgbWV0aG9kKTsKICBpZihKU19Jc051bWJlcih2YWx1ZSkpCiAgICBKU19Ub0ludDY0KGN0eCwgJnIsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHI7Cn0KCmludDY0X3QKanNfZGF0ZV90aW1lKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlIGFyZykgewogIGludDY0X3QgciA9IC0xOwogIGlmKEpTX0lzT2JqZWN0KGFyZykpCiAgICByID0ganNfZGF0ZV9nZXR0aW1lKGN0eCwgYXJnKTsKICBlbHNlIGlmKCFqc19pc19udWxsaXNoKGN0eCwgYXJnKSkKICAgIEpTX1RvSW50NjQoY3R4LCAmciwgYXJnKTsKICByZXR1cm4gcjsKfQoKc3RydWN0IHRpbWVzcGVjCmpzX2RhdGVfdGltZXNwZWMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgYXJnKSB7CiAgc3RydWN0IHRpbWVzcGVjIHRzOwogIGludDY0X3QgciA9IGpzX2RhdGVfdGltZShjdHgsIGFyZyk7CiAgdHMudHZfc2VjID0gciAvIDEwMDB1bGw7CiAgdHMudHZfbnNlYyA9IChyIC0gdHMudHZfc2VjKSAqIDEwMDAwMDB1bGw7CiAgcmV0dXJuIHRzOwp9Cgp2b2lkCmpzX2FycmF5YnVmZmVyX2ZyZWV2YWx1ZShKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIEpTVmFsdWUqIHZhbHB0ciA9IG9wYXF1ZTsKICBKU19GcmVlVmFsdWVSVChydCwgKnZhbHB0cik7CiAganNfZnJlZV9ydChydCwgb3BhcXVlKTsKfQoKSlNWYWx1ZQpqc19hcnJheWJ1ZmZlcl9mcm9tdmFsdWUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IHZvaWQqIHgsIHNpemVfdCBuLCBKU1ZhbHVlQ29uc3QgdmFsKSB7CiAgSlNWYWx1ZSogdmFscHRyOwogIGlmKCEodmFscHRyID0ganNfbWFsbG9jKGN0eCwgc2l6ZW9mKEpTVmFsdWUpKSkpCiAgICByZXR1cm4gSlNfVGhyb3dPdXRPZk1lbW9yeShjdHgpOwogICp2YWxwdHIgPSBKU19EdXBWYWx1ZShjdHgsIHZhbCk7CiAgcmV0dXJuIEpTX05ld0FycmF5QnVmZmVyKGN0eCwgeCwgbiwganNfYXJyYXlidWZmZXJfZnJlZXZhbHVlLCB2YWxwdHIsIEZBTFNFKTsKfQoKaW50NjRfdApqc19hcnJheWJ1ZmZlcl9ieXRlbGVuZ3RoKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpbnQ2NF90IGxlbiA9IC0xOwogIGlmKGpzX2lzX2FycmF5YnVmZmVyKGN0eCwgdmFsdWUpKSB7CiAgICBKU1ZhbHVlIGxlbmd0aCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgdmFsdWUsICJieXRlTGVuZ3RoIik7CiAgICBKU19Ub0ludDY0KGN0eCwgJmxlbiwgbGVuZ3RoKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGxlbmd0aCk7CiAgfQogIHJldHVybiBsZW47Cn0KCkpTVmFsdWUKanNfZXZhbF9tb2R1bGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIEJPT0wgbG9hZF9vbmx5KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CiAgaW50IHRhZyA9IEpTX1ZBTFVFX0dFVF9UQUcob2JqKTsKICBpZih0YWcgPT0gSlNfVEFHX01PRFVMRSkgewogICAgaWYoIWxvYWRfb25seSAmJiBKU19SZXNvbHZlTW9kdWxlKGN0eCwgb2JqKSA8IDApIHsKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICAgICAgcmV0dXJuIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJGYWlsZWQgcmVzb2x2aW5nIG1vZHVsZSIpOwogICAgfQogICAganNfbW9kdWxlX3NldF9pbXBvcnRfbWV0YShjdHgsIG9iaiwgRkFMU0UsICFsb2FkX29ubHkpOwogICAgcmV0dXJuIGxvYWRfb25seSA/IEpTX0R1cFZhbHVlKGN0eCwgb2JqKSA6IEpTX0V2YWxGdW5jdGlvbihjdHgsIG9iaik7CiAgfQogIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiaW52YWxpZCB0YWcgJWkiLCB0YWcpOwp9CgpKU1ZhbHVlCmpzX2V2YWxfYmluYXJ5KEpTQ29udGV4dCogY3R4LCBjb25zdCB1aW50OF90KiBidWYsIHNpemVfdCBidWZfbGVuLCBCT09MIGxvYWRfb25seSkgewogIEpTVmFsdWUgb2JqID0gSlNfUmVhZE9iamVjdChjdHgsIGJ1ZiwgYnVmX2xlbiwgSlNfUkVBRF9PQkpfQllURUNPREUpOwogIGlmKEpTX0lzRXhjZXB0aW9uKG9iaikpCiAgICByZXR1cm4gb2JqOwogIC8vIHByaW50ZigianNfZXZhbF9iaW5hcnkgb2JqPSVzXG4iLCBqc192YWx1ZV90eXBlc3RyKGN0eCwgb2JqKSk7CiAgaWYoIWxvYWRfb25seSkgewogICAgSlNWYWx1ZSB0bXAgPSBqc19ldmFsX21vZHVsZShjdHgsIG9iaiwgbG9hZF9vbmx5KTsKICAgIGludCB0YWcgPSBKU19WQUxVRV9HRVRfVEFHKHRtcCk7CiAgICAvLyBwcmludGYoImpzX2V2YWxfYmluYXJ5IHRtcD0lc1xuIiwganNfdmFsdWVfdHlwZXN0cihjdHgsIHRtcCkpOwogICAgaWYoIUpTX0lzRXhjZXB0aW9uKHRtcCkgJiYgIUpTX0lzVW5kZWZpbmVkKHRtcCkpCiAgICAgIGlmKHRhZyA+PSBKU19UQUdfRklSU1QgJiYgdGFnIDw9IEpTX1RBR19GTE9BVDY0KQogICAgICAgIHJldHVybiB0bXA7CiAgfQogIHJldHVybiBvYmo7Cn0KCkpTVmFsdWUKanNfZXZhbF9idWYoSlNDb250ZXh0KiBjdHgsIGNvbnN0IHZvaWQqIGJ1ZiwgaW50IGJ1Zl9sZW4sIGNvbnN0IGNoYXIqIGZpbGVuYW1lLCBpbnQgZXZhbF9mbGFncykgewogIEpTVmFsdWUgdmFsOwoKICBpZigoZXZhbF9mbGFncyAmIEpTX0VWQUxfVFlQRV9NQVNLKSA9PSBKU19FVkFMX1RZUEVfTU9EVUxFKSB7CiAgICAvKiBmb3IgdGhlIG1vZHVsZXMsIHdlIGNvbXBpbGUgdGhlbiBydW4gdG8gYmUgYWJsZSB0byBzZXQgaW1wb3J0Lm1ldGEgKi8KICAgIHZhbCA9IEpTX0V2YWwoY3R4LCBidWYsIGJ1Zl9sZW4sIGZpbGVuYW1lID8gZmlsZW5hbWUgOiAiPGlucHV0PiIsIGV2YWxfZmxhZ3MgfCBKU19FVkFMX0ZMQUdfQ09NUElMRV9PTkxZKTsKICAgIGlmKCFKU19Jc0V4Y2VwdGlvbih2YWwpKSB7CiAgICAgIGpzX21vZHVsZV9zZXRfaW1wb3J0X21ldGEoY3R4LCB2YWwsICEhZmlsZW5hbWUsIFRSVUUpOwogICAgICB2YWwgPSBKU19FdmFsRnVuY3Rpb24oY3R4LCB2YWwpOwogICAgfQogIH0gZWxzZSB7CiAgICB2YWwgPSBKU19FdmFsKGN0eCwgYnVmLCBidWZfbGVuLCBmaWxlbmFtZSwgZXZhbF9mbGFncyk7CiAgfQogIGlmKEpTX0lzRXhjZXB0aW9uKHZhbCkpCiAgICBqc19lcnJvcl9wcmludChjdHgsIEpTX0dldEV4Y2VwdGlvbihjdHgpKTsKICByZXR1cm4gdmFsOwp9CgppbnQKanNfZXZhbF9zdHIoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN0ciwgY29uc3QgY2hhciogZmlsZSwgaW50IGZsYWdzKSB7CiAgSlNWYWx1ZSB2YWwgPSBqc19ldmFsX2J1ZihjdHgsIHN0ciwgc3RybGVuKHN0ciksIGZpbGUsIGZsYWdzKTsKICBpbnQzMl90IHJldCA9IC0xOwogIGlmKEpTX0lzTnVtYmVyKHZhbCkpCiAgICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsKTsKICByZXR1cm4gcmV0Owp9Cgp0aHJlYWRfbG9jYWwgdWludDY0X3QganNfcGVuZGluZ19zaWduYWxzID0gMDsKCmludDY0X3QKanNfdGltZV9tcyh2b2lkKSB7CiAgc3RydWN0IHRpbWVzcGVjIHRzOwogIGNsb2NrX2dldHRpbWUoQ0xPQ0tfTU9OT1RPTklDLCAmdHMpOwogIHJldHVybiAodWludDY0X3QpdHMudHZfc2VjICogMTAwMCArICh0cy50dl9uc2VjIC8gMTAwMDAwMCk7Cn0KCmludApqc19pbnRlcnJ1cHRfaGFuZGxlcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUpIHsKICByZXR1cm4gKGpzX3BlbmRpbmdfc2lnbmFscyA+PiBTSUdJTlQpICYgMTsKfQoKdm9pZApqc190aW1lcl91bmxpbmsoSlNSdW50aW1lKiBydCwgSlNPU1RpbWVyKiB0aCkgewogIGlmKHRoLT5saW5rLnByZXYpIHsKICAgIGxpc3RfZGVsKCZ0aC0+bGluayk7CiAgICB0aC0+bGluay5wcmV2ID0gdGgtPmxpbmsubmV4dCA9IDA7CiAgfQp9Cgp2b2lkCmpzX3RpbWVyX2ZyZWUoSlNSdW50aW1lKiBydCwgSlNPU1RpbWVyKiB0aCkgewogIEpTX0ZyZWVWYWx1ZVJUKHJ0LCB0aC0+ZnVuYyk7CiAganNfZnJlZV9ydChydCwgdGgpOwp9Cgp2b2lkCmpzX2NhbGxfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZ1bmMpIHsKICBKU1ZhbHVlIHJldCwgZnVuYzE7CiAgZnVuYzEgPSBKU19EdXBWYWx1ZShjdHgsIGZ1bmMpOwogIHJldCA9IEpTX0NhbGwoY3R4LCBmdW5jMSwgSlNfVU5ERUZJTkVELCAwLCAwKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmdW5jMSk7CiAgaWYoSlNfSXNFeGNlcHRpb24ocmV0KSkKICAgIGpzX3N0ZF9kdW1wX2Vycm9yKGN0eCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcmV0KTsKfQp2b2lkKgpqc19zYWJfYWxsb2Modm9pZCogb3BhcXVlLCBzaXplX3Qgc2l6ZSkgewogIEpTU0FCSGVhZGVyKiBzYWI7CiAgc2FiID0gbWFsbG9jKHNpemVvZihKU1NBQkhlYWRlcikgKyBzaXplKTsKICBpZighc2FiKQogICAgcmV0dXJuIDA7CiAgc2FiLT5yZWZfY291bnQgPSAxOwogIHJldHVybiBzYWItPmJ1ZjsKfQp2b2lkCmpzX3NhYl9mcmVlKHZvaWQqIG9wYXF1ZSwgdm9pZCogcHRyKSB7CiAgSlNTQUJIZWFkZXIqIHNhYjsKICBpbnQgcmVmX2NvdW50OwogIHNhYiA9IChKU1NBQkhlYWRlciopKCh1aW50OF90KilwdHIgLSBzaXplb2YoSlNTQUJIZWFkZXIpKTsKICByZWZfY291bnQgPSBhdG9taWNfYWRkX2ludCgmc2FiLT5yZWZfY291bnQsIC0xKTsKICBhc3NlcnQocmVmX2NvdW50ID49IDApOwogIGlmKHJlZl9jb3VudCA9PSAwKSB7CiAgICBmcmVlKHNhYik7CiAgfQp9CnZvaWQKanNfc2FiX2R1cCh2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIEpTU0FCSGVhZGVyKiBzYWI7CiAgc2FiID0gKEpTU0FCSGVhZGVyKikoKHVpbnQ4X3QqKXB0ciAtIHNpemVvZihKU1NBQkhlYWRlcikpOwogIGF0b21pY19hZGRfaW50KCZzYWItPnJlZl9jb3VudCwgMSk7Cn0KCkpTV29ya2VyTWVzc2FnZVBpcGUqCmpzX25ld19tZXNzYWdlX3BpcGUodm9pZCkgewogIEpTV29ya2VyTWVzc2FnZVBpcGUqIHBzOwogIGludCBwaXBlX2Zkc1syXTsKCiAgaWYocGlwZShwaXBlX2ZkcykgPCAwKQogICAgcmV0dXJuIDA7CgogIHBzID0gbWFsbG9jKHNpemVvZigqcHMpKTsKICBpZighcHMpIHsKICAgIGNsb3NlKHBpcGVfZmRzWzBdKTsKICAgIGNsb3NlKHBpcGVfZmRzWzFdKTsKICAgIHJldHVybiAwOwogIH0KICBwcy0+cmVmX2NvdW50ID0gMTsKICBpbml0X2xpc3RfaGVhZCgmcHMtPm1zZ19xdWV1ZSk7CiAgcHRocmVhZF9tdXRleF9pbml0KCZwcy0+bXV0ZXgsIDApOwogIHBzLT5yZWFkX2ZkID0gcGlwZV9mZHNbMF07CiAgcHMtPndyaXRlX2ZkID0gcGlwZV9mZHNbMV07CiAgcmV0dXJuIHBzOwp9CgpKU1dvcmtlck1lc3NhZ2VQaXBlKgpqc19kdXBfbWVzc2FnZV9waXBlKEpTV29ya2VyTWVzc2FnZVBpcGUqIHBzKSB7CiAgYXRvbWljX2FkZF9pbnQoJnBzLT5yZWZfY291bnQsIDEpOwogIHJldHVybiBwczsKfQoKdm9pZApqc19mcmVlX21lc3NhZ2UoSlNXb3JrZXJNZXNzYWdlKiBtc2cpIHsKICBzaXplX3QgaTsKCiAgZm9yKGkgPSAwOyBpIDwgbXNnLT5zYWJfdGFiX2xlbjsgaSsrKSB7IGpzX3NhYl9mcmVlKDAsIG1zZy0+c2FiX3RhYltpXSk7IH0KICBmcmVlKG1zZy0+c2FiX3RhYik7CiAgZnJlZShtc2ctPmRhdGEpOwogIGZyZWUobXNnKTsKfQoKdm9pZApqc19mcmVlX21lc3NhZ2VfcGlwZShKU1dvcmtlck1lc3NhZ2VQaXBlKiBwcykgewogIHN0cnVjdCBsaXN0X2hlYWQgKmVsLCAqZWwxOwogIEpTV29ya2VyTWVzc2FnZSogbXNnOwogIGludCByZWZfY291bnQ7CgogIGlmKCFwcykKICAgIHJldHVybjsKCiAgcmVmX2NvdW50ID0gYXRvbWljX2FkZF9pbnQoJnBzLT5yZWZfY291bnQsIC0xKTsKICBhc3NlcnQocmVmX2NvdW50ID49IDApOwogIGlmKHJlZl9jb3VudCA9PSAwKSB7CiAgICBsaXN0X2Zvcl9lYWNoX3NhZmUoZWwsIGVsMSwgJnBzLT5tc2dfcXVldWUpIHsKICAgICAgbXNnID0gbGlzdF9lbnRyeShlbCwgSlNXb3JrZXJNZXNzYWdlLCBsaW5rKTsKICAgICAganNfZnJlZV9tZXNzYWdlKG1zZyk7CiAgICB9CiAgICBwdGhyZWFkX211dGV4X2Rlc3Ryb3koJnBzLT5tdXRleCk7CiAgICBjbG9zZShwcy0+cmVhZF9mZCk7CiAgICBjbG9zZShwcy0+d3JpdGVfZmQpOwogICAgZnJlZShwcyk7CiAgfQp9Cgp2b2lkCmpzX2Vycm9yX2R1bXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBlcnJvciwgRHluQnVmKiBkYikgewogIGNoYXIgKnN0ciwgKnN0YWNrID0gMDsKICBpZihKU19Jc09iamVjdChlcnJvcikpIHsKICAgIEpTVmFsdWUgc3QgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGVycm9yLCAic3RhY2siKTsKICAgIGlmKCFKU19Jc1VuZGVmaW5lZChzdCkpCiAgICAgIHN0YWNrID0gSlNfVG9DU3RyaW5nKGN0eCwgc3QpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgc3QpOwogIH0KICBpZigoc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgZXJyb3IpKSkgewogICAgY29uc3QgY2hhciogdHlwZSA9IEpTX0lzT2JqZWN0KGVycm9yKSA/IGpzX29iamVjdF9jbGFzc25hbWUoY3R4LCBlcnJvcikgOiBqc192YWx1ZV90eXBlc3RyKGN0eCwgZXJyb3IpOwoKICAgIGlmKCFzdHJfc3RhcnQoc3RyLCB0eXBlKSkgewogICAgICBkYnVmX3B1dHN0cihkYiwgdHlwZSk7CiAgICAgIGRidWZfcHV0c3RyKGRiLCAiOiAiKTsKICAgIH0KICAgIGRidWZfcHV0c3RyKGRiLCBzdHIpOwogICAgZGJ1Zl9wdXRjKGRiLCAnXG4nKTsKICAgIGlmKHN0YWNrKSB7CiAgICAgIGRidWZfcHV0c3RyKGRiLCAiU1RBQ0tcbiIpOwogICAgICBkYnVmX3B1dHN0cihkYiwgc3RhY2spOwogICAgICBkYnVmX3B1dGMoZGIsICdcbicpOwogICAgfQogICAgZGJ1Zl8wKGRiKTsKICB9CiAgaWYoc3RhY2spCiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0YWNrKTsKICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7Cn0KCmNoYXIqCmpzX2Vycm9yX3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgZXJyb3IpIHsKICBEeW5CdWYgZGI7CiAganNfZGJ1Zl9pbml0KGN0eCwgJmRiKTsKICBqc19lcnJvcl9kdW1wKGN0eCwgZXJyb3IsICZkYik7CiAgcmV0dXJuIGRiLmJ1ZjsKfQoKdm9pZApqc19lcnJvcl9wcmludChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGVycm9yKSB7CiAgY2hhciAqc3RyLCAqc3RhY2sgPSAwOwoKICBpZihKU19Jc09iamVjdChlcnJvcikpIHsKICAgIEpTVmFsdWUgc3QgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGVycm9yLCAic3RhY2siKTsKCiAgICBpZighSlNfSXNVbmRlZmluZWQoc3QpKQogICAgICBzdGFjayA9IEpTX1RvQ1N0cmluZyhjdHgsIHN0KTsKCiAgICBKU19GcmVlVmFsdWUoY3R4LCBzdCk7CiAgfQoKICBpZigoc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgZXJyb3IpKSkgewogICAgcHJpbnRmKCIlczogJXNcbiIsIEpTX0lzT2JqZWN0KGVycm9yKSA/IGpzX29iamVjdF9jbGFzc25hbWUoY3R4LCBlcnJvcikgOiBqc192YWx1ZV90eXBlc3RyKGN0eCwgZXJyb3IpLCBzdHIpOwogICAgaWYoc3RhY2spCiAgICAgIHByaW50ZigiU1RBQ0s9XG4lc1xuIiwgc3RhY2spOwogICAgZmZsdXNoKHN0ZG91dCk7CiAgfQogIGlmKHN0YWNrKQogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdGFjayk7CiAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwp9CgAAAAAAAAAAJdIAAAAAAAAAAAAAAAAAAAAAAAAl0gAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvzQAAAAAAAO/NAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "char-utils.h",
			"settings":
			{
				"buffer_size": 8196,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACEYAAAAAAAAIhgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhGAAAAAAAACEYAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACEYAAAAAAAAIhgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhGAAAAAAAACEYAAAAAAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAACIYAAAAAAAAKhkAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiGAAAAAAAACIYAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAACkZAAAAAAAAKRkAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqGQAAAAAAACoZAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAANMYAAAAAAAA1BgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTGAAAAAAAANMYAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"left_delete",
					null,
					"AQAAANMYAAAAAAAA0xgAAAAAAAABAAAAcw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUGAAAAAAAANQYAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "\nstatic"
					},
					"BwAAANMYAAAAAAAA1BgAAAAAAAAAAAAA1BgAAAAAAADVGAAAAAAAAAAAAADVGAAAAAAAANYYAAAAAAAAAAAAANYYAAAAAAAA1xgAAAAAAAAAAAAA1xgAAAAAAADYGAAAAAAAAAAAAADYGAAAAAAAANkYAAAAAAAAAAAAANkYAAAAAAAA2hgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTGAAAAAAAANMYAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": " inline"
					},
					"BwAAANoYAAAAAAAA2xgAAAAAAAAAAAAA2xgAAAAAAADcGAAAAAAAAAAAAADcGAAAAAAAAN0YAAAAAAAAAAAAAN0YAAAAAAAA3hgAAAAAAAAAAAAA3hgAAAAAAADfGAAAAAAAAAAAAADfGAAAAAAAAOAYAAAAAAAAAAAAAOAYAAAAAAAA4RgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaGAAAAAAAANoYAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOEYAAAAAAAA4hgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhGAAAAAAAAOEYAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"cut",
					null,
					"AQAAANQYAAAAAAAA1BgAAAAAAAAOAAAAc3RhdGljIGlubGluZSA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiGAAAAAAAANQYAAAAAAAAAAAAAAAAAAA"
				],
				[
					22,
					1,
					"paste",
					null,
					"AQAAANQYAAAAAAAA4hgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUGAAAAAAAANQYAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"paste",
					null,
					"AQAAACIYAAAAAAAAMBgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAiGAAAAAAAACIYAAAAAAAAAAAAAAAAAAA"
				],
				[
					39,
					1,
					"left_delete",
					null,
					"AQAAADsZAAAAAAAAOxkAAAAAAAABAAAAXw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8GQAAAAAAADwZAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7GQAAAAAAADsZAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7GQAAAAAAADsZAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7GQAAAAAAADsZAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7GQAAAAAAADsZAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lexer.c",
			"settings":
			{
				"buffer_size": 10497,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAABKQAAI2luY2x1ZGUgImxleGVyLmgiCiNpbmNsdWRlICJsb2NhdGlvbi5oIgojaW5jbHVkZSAibGlicmVnZXhwLmgiCiNpbmNsdWRlIDxjdHlwZS5oPgojaW5jbHVkZSAiYnVmZmVyLXV0aWxzLmgiCgppbnQKbGV4ZXJfc3RhdGVfZmluZGIoTGV4ZXIqIGxleCwgY29uc3QgY2hhciogc3RhdGUsIHNpemVfdCBzbGVuKSB7CiAgaW50IHJldCA9IC0xOwogIGNoYXIqKiBzdGF0ZXA7CgogIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+c3RhdGVzLCBzdGF0ZXApIHsKICAgICsrcmV0OwoKICAgIGlmKHN0cmxlbigoKnN0YXRlcCkpID09IHNsZW4gJiYgIXN0cm5jbXAoKCpzdGF0ZXApLCBzdGF0ZSwgc2xlbikpCiAgICAgIHJldHVybiByZXQ7CiAgfQoKICByZXR1cm4gLTE7Cn0KCmludApsZXhlcl9zdGF0ZV9uZXcoTGV4ZXIqIGxleCwgY29uc3QgY2hhciogbmFtZSwgc2l6ZV90IGxlbikgewogIGNoYXIqIHN0YXRlOwogIGludCByZXQ7CgogIGlmKChyZXQgPSBsZXhlcl9zdGF0ZV9maW5kYihsZXgsIG5hbWUsIGxlbikpICE9IC0xKQogICAgcmV0dXJuIHJldDsKCiAgc3RhdGUgPSBzdHJfbmR1cChuYW1lLCBsZW4pOwogIHJldCA9IHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlcywgc2l6ZW9mKGNoYXIqKSk7CiAgdmVjdG9yX3B1c2goJmxleC0+c3RhdGVzLCBzdGF0ZSk7CiAgcmV0dXJuIHJldDsKfQoKaW50CmxleGVyX3N0YXRlX3B1c2goTGV4ZXIqIGxleCwgY29uc3QgY2hhciogc3RhdGUpIHsKICBpbnQzMl90IGlkOwojaWZkZWYgREVCVUdfT1VUUFVUXwogIHByaW50ZigibGV4ZXJfc3RhdGVfcHVzaCglenUpOiAlc1xuIiwgdmVjdG9yX3NpemUoJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSksIHN0YXRlKTsKI2VuZGlmCiAgaWYoKGlkID0gbGV4ZXJfc3RhdGVfZmluZGIobGV4LCBzdGF0ZSwgc3RybGVuKHN0YXRlKSkpID49IDApIHsKICAgIHZlY3Rvcl9wdXNoKCZsZXgtPnN0YXRlX3N0YWNrLCBsZXgtPnN0YXRlKTsKICAgIGxleC0+c3RhdGUgPSBpZDsKICB9CiAgYXNzZXJ0KGlkID49IDApOwogIHJldHVybiBpZDsKfQoKaW50CmxleGVyX3N0YXRlX3BvcChMZXhlciogbGV4KSB7CiAgaW50MzJfdCBpZDsKICBzaXplX3QgbiA9IHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCkpIC0gMTsKICBpZCA9IGxleC0+c3RhdGU7CiNpZmRlZiBERUJVR19PVVRQVVRfCiAgcHJpbnRmKCJsZXhlcl9zdGF0ZV9wb3AoJXp1KTogJXNcbiIsIG4sIGxleGVyX3N0YXRlX25hbWUobGV4LCBpZCkpOwojZW5kaWYKICBpZighdmVjdG9yX2VtcHR5KCZsZXgtPnN0YXRlX3N0YWNrKSkgewogICAgbGV4LT5zdGF0ZSA9ICooaW50MzJfdCopdmVjdG9yX2JhY2soJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSk7CiAgICB2ZWN0b3JfcG9wKCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCkpOwogIH0gZWxzZSB7CiAgICBsZXgtPnN0YXRlID0gLTE7CiAgfQogIHJldHVybiBpZDsKfQoKaW50CmxleGVyX3N0YXRlX3RvcChMZXhlciogbGV4LCBpbnQgaSkgewogIGludCBzejsKICBpZihpID09IDApCiAgICByZXR1cm4gbGV4LT5zdGF0ZTsKICBzeiA9IHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCkpOwogIGlmKGkgLSAxID49IHN6KQogICAgcmV0dXJuIC0xOwoKICBhc3NlcnQoc3ogPj0gaSk7CiAgcmV0dXJuICooaW50MzJfdCopdmVjdG9yX2F0KCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCksIHN6IC0gaSk7Cn0KCmNoYXIqCmxleGVyX3N0YXRlX25hbWUoTGV4ZXIqIGxleCwgaW50IHN0YXRlKSB7CiAgY2hhcioqIG5hbWVfcDsKCiAgbmFtZV9wID0gdmVjdG9yX2F0KCZsZXgtPnN0YXRlcywgc2l6ZW9mKGNoYXIqKSwgc3RhdGUpOwoKICByZXR1cm4gbmFtZV9wID8gKm5hbWVfcCA6IDA7Cn0KCmNoYXIqCmxleGVyX3N0YXRlc19za2lwKGNoYXIqIGV4cHIpIHsKICBjaGFyKiByZSA9IGV4cHI7CgogIGlmKCpyZSA9PSAnPCcpIHsKICAgIHNpemVfdCBvZmZzZXQgPSBzdHJfY2hyKHJlLCAnPicpOwoKICAgIGlmKHJlW29mZnNldF0pCiAgICAgIHJlICs9IG9mZnNldCArIDE7CiAgfQogIHJldHVybiByZTsKfQoKdm9pZApsZXhlcl9zdGF0ZXNfZHVtcChMZXhlciogbGV4LCB1aW50NjRfdCBtYXNrLCBEeW5CdWYqIGRidWYpIHsKICBpbnQgc3RhdGUgPSAwOwogIGNoYXIqKiBzdGF0ZXA7CiAgc2l6ZV90IG4gPSBkYnVmLT5zaXplOwoKICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPnN0YXRlcywgc3RhdGVwKSB7CiAgICBpZihtYXNrICYgKDEgPDwgc3RhdGUpKSB7CgogICAgICBpZihkYnVmLT5zaXplID4gbikKICAgICAgICBkYnVmX3B1dGMoZGJ1ZiwgJywnKTsKICAgICAgZGJ1Zl9wdXRzdHIoZGJ1ZiwgKnN0YXRlcCk7CiAgICAgIHN0YXRlKys7CiAgICB9CiAgfQp9CgpjaGFyKgpsZXhlcl9ydWxlX3JlZ2V4KExleGVyUnVsZSogcnVsZSkgewogIHJldHVybiBsZXhlcl9zdGF0ZXNfc2tpcChydWxlLT5leHByKTsKfQoKQk9PTApsZXhlcl9ydWxlX2V4cGFuZChMZXhlciogbGV4LCBjaGFyKiBwLCBEeW5CdWYqIGRiKSB7CiAgc2l6ZV90IGxlbjsKCiAgZGJ1Zl96ZXJvKGRiKTsKCiAgZm9yKDsgKnA7IHArKykgewogICAgaWYoKnAgPT0gJ3snKSB7CiAgICAgIGlmKHBbbGVuID0gc3RyX2NocihwLCAnfScpXSkgewogICAgICAgIExleGVyUnVsZSogc3Vic3Q7CiAgICAgICAgaWYoKHN1YnN0ID0gbGV4ZXJfZmluZF9kZWZpbml0aW9uKGxleCwgcCArIDEsIGxlbiAtIDEpKSkgewogICAgICAgICAgbGV4ZXJfcnVsZV9leHBhbmQobGV4LCBzdWJzdC0+ZXhwciwgZGIpOwogICAgICAgICAgcCArPSBsZW47CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZigqcCA9PSAnXFwnKQogICAgICBkYnVmX3B1dGMoZGIsICpwKyspOwogICAgZGJ1Zl9wdXRjKGRiLCAqcCk7CiAgfQogIGRidWZfMChkYik7CgogIC8vIHByaW50ZigiZXhwYW5kICVzICVzXG4iLCBwLCBkYi0+YnVmKTsKCiAgcmV0dXJuIFRSVUU7Cn0KCnN0YXRpYyBCT09MCmxleGVyX3J1bGVfY29tcGlsZShMZXhlciogbGV4LCBMZXhlclJ1bGUqIHJ1bGUsIEpTQ29udGV4dCogY3R4KSB7CiAgRHluQnVmIGRidWY7CiAgQk9PTCByZXQ7CgogIGlmKHJ1bGUtPmJ5dGVjb2RlKQogICAgcmV0dXJuIFRSVUU7CgogIGpzX2RidWZfaW5pdChjdHgsICZkYnVmKTsKCiAgaWYobGV4ZXJfcnVsZV9leHBhbmQobGV4LCBsZXhlcl9ydWxlX3JlZ2V4KHJ1bGUpLCAmZGJ1ZikpIHsKICAgIHJ1bGUtPmV4cGFuc2lvbiA9IGpzX3N0cm5kdXAoY3R4LCAoY29uc3QgY2hhciopZGJ1Zi5idWYsIGRidWYuc2l6ZSk7CiAgICBydWxlLT5ieXRlY29kZSA9IHJlZ2V4cF9jb21waWxlKHJlZ2V4cF9mcm9tX2RidWYoJmRidWYsIExSRV9GTEFHX0dMT0JBTCB8IExSRV9GTEFHX01VTFRJTElORSB8IExSRV9GTEFHX1NUSUNLWSksIGN0eCk7CiAgICByZXQgPSBydWxlLT5ieXRlY29kZSAhPSAwOwoKICB9IGVsc2UgewogICAgSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIkVycm9yIGV4cGFuZGluZyBydWxlICclcyciLCBydWxlLT5uYW1lKTsKICAgIHJldCA9IEZBTFNFOwogIH0KCiAgZGJ1Zl9mcmVlKCZkYnVmKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW50CmxleGVyX3J1bGVfbWF0Y2goTGV4ZXIqIGxleCwgTGV4ZXJSdWxlKiBydWxlLCB1aW50OF90KiogY2FwdHVyZSwgSlNDb250ZXh0KiBjdHgpIHsKCiAgaWYocnVsZS0+Ynl0ZWNvZGUgPT0gMCkgewogICAgaWYoIWxleGVyX3J1bGVfY29tcGlsZShsZXgsIHJ1bGUsIGN0eCkpCiAgICAgIHJldHVybiBMRVhFUl9FUlJPUl9DT01QSUxFOwogIH0KCiAgLy8gcHJpbnRmKCJsZXhlcl9ydWxlX21hdGNoICVzICVzICVzXG4iLCBydWxlLT5uYW1lLCBydWxlLT5leHByLAogIC8vIHJ1bGUtPmV4cGFuc2lvbik7CgogIHJldHVybiBscmVfZXhlYyhjYXB0dXJlLCBydWxlLT5ieXRlY29kZSwgKHVpbnQ4X3QqKWxleC0+aW5wdXQuZGF0YSwgbGV4LT5pbnB1dC5wb3MsIGxleC0+aW5wdXQuc2l6ZSwgMCwgY3R4KTsKfQoKaW50CmxleGVyX3J1bGVfYWRkKExleGVyKiBsZXgsIGNoYXIqIG5hbWUsIGNoYXIqIGV4cHIpIHsKICBMZXhlclJ1bGUgcnVsZSA9IHtuYW1lLCBleHByLCAxLCAwLCAwLCAwfSwgKnByZXZpb3VzOwogIGludCByZXQgPSB2ZWN0b3Jfc2l6ZSgmbGV4LT5ydWxlcywgc2l6ZW9mKExleGVyUnVsZSkpOwoKICBpZihydWxlLmV4cHJbMF0gPT0gJzwnKSB7CiAgICBjaGFyKiBzOwogICAgaW50MzJfdCBmbGFncyA9IDA7CgogICAgZm9yKHMgPSAmcnVsZS5leHByWzFdOyAqcyAmJiAqcyAhPSAnPic7KSB7CiAgICAgIHNpemVfdCBsZW4gPSBzdHJfY2hycyhzLCAiLD4iLCAyKTsKICAgICAgaW50IGluZGV4OwoKICAgICAgaWYoKGluZGV4ID0gbGV4ZXJfc3RhdGVfZmluZGIobGV4LCBzLCBsZW4pKSA9PSAtMSkKICAgICAgICBpbmRleCA9IGxleGVyX3N0YXRlX25ldyhsZXgsIHMsIGxlbik7CgogICAgICBhc3NlcnQoaW5kZXggIT0gLTEpOwogICAgICBmbGFncyB8PSAxIDw8IGluZGV4OwoKICAgICAgaWYoKihzICs9IGxlbikgPT0gJywnKQogICAgICAgIHMrKzsKICAgIH0KCiAgICBydWxlLm1hc2sgPSBmbGFnczsKICB9CgogIHZlY3Rvcl9wdXNoKCZsZXgtPnJ1bGVzLCBydWxlKTsKICByZXR1cm4gcmV0Owp9CgpMZXhlclJ1bGUqCmxleGVyX3J1bGVfZmluZChMZXhlciogbGV4LCBjb25zdCBjaGFyKiBuYW1lKSB7CiAgTGV4ZXJSdWxlKiBydWxlOwogIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+cnVsZXMsIHJ1bGUpIHsKICAgIGlmKG5hbWUgJiYgcnVsZS0+bmFtZSkgewogICAgICBpZighc3RyY21wKHJ1bGUtPm5hbWUsIG5hbWUpKQogICAgICAgIHJldHVybiBydWxlOwogICAgfSBlbHNlIHsKICAgICAgaWYobmFtZSA9PSBydWxlLT5uYW1lKQogICAgICAgIHJldHVybiBydWxlOwogICAgfQogIH0KICByZXR1cm4gMDsKfQoKdm9pZApsZXhlcl9ydWxlX2ZyZWUoTGV4ZXJSdWxlKiBydWxlLCBKU0NvbnRleHQqIGN0eCkgewogIGlmKHJ1bGUtPm5hbWUpCiAgICBqc19mcmVlKGN0eCwgcnVsZS0+bmFtZSk7CiAganNfZnJlZShjdHgsIHJ1bGUtPmV4cHIpOwoKICBpZihydWxlLT5ieXRlY29kZSkKICAgIGpzX2ZyZWUoY3R4LCBydWxlLT5ieXRlY29kZSk7Cn0KCnZvaWQKbGV4ZXJfcnVsZV9mcmVlX3J0KExleGVyUnVsZSogcnVsZSwgSlNSdW50aW1lKiBydCkgewogIGlmKHJ1bGUtPm5hbWUpCiAgICBqc19mcmVlX3J0KHJ0LCBydWxlLT5uYW1lKTsKICBqc19mcmVlX3J0KHJ0LCBydWxlLT5leHByKTsKCiAgaWYocnVsZS0+Ynl0ZWNvZGUpCiAgICBqc19mcmVlX3J0KHJ0LCBydWxlLT5ieXRlY29kZSk7Cn0KCnZvaWQKbGV4ZXJfcnVsZV9kdW1wKExleGVyKiBsZXgsIExleGVyUnVsZSogcnVsZSwgRHluQnVmKiBkYnVmKSB7CiAgLyogIGlmKHJ1bGUtPm1hc2sgIT0gMCkgewogICAgICBkYnVmX3B1dGMoZGJ1ZiwgJzwnKTsKICAgICAgbGV4ZXJfc3RhdGVzX2R1bXAobGV4LCBydWxlLT5tYXNrLCBkYnVmKTsKICAgICAgZGJ1Zl9wdXRjKGRidWYsICc+Jyk7CiAgICB9Ki8KICBsZXhlcl9ydWxlX2V4cGFuZChsZXgsIHJ1bGUtPmV4cHIsIGRidWYpOwp9Cgp2b2lkCmxleGVyX2luaXQoTGV4ZXIqIGxleCwgZW51bSBsZXhlcl9tb2RlIG1vZGUsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciogaW5pdGlhbCA9IGpzX3N0cmR1cChjdHgsICJJTklUSUFMIik7CiAgbWVtc2V0KGxleCwgMCwgc2l6ZW9mKExleGVyKSk7CiAgbGV4LT5tb2RlID0gbW9kZTsKICBsZXgtPnN0YXRlID0gMDsKICBsZXgtPnNlcSA9IDA7CiAgdmVjdG9yX2luaXQoJmxleC0+ZGVmaW5lcywgY3R4KTsKICB2ZWN0b3JfaW5pdCgmbGV4LT5ydWxlcywgY3R4KTsKICB2ZWN0b3JfaW5pdCgmbGV4LT5zdGF0ZXMsIGN0eCk7CiAgdmVjdG9yX3B1c2goJmxleC0+c3RhdGVzLCBpbml0aWFsKTsKICB2ZWN0b3JfaW5pdCgmbGV4LT5zdGF0ZV9zdGFjaywgY3R4KTsKfQoKdm9pZApsZXhlcl9zZXRfaW5wdXQoTGV4ZXIqIGxleCwgSW5wdXRCdWZmZXIgaW5wdXQsIGNoYXIqIGZpbGVuYW1lKSB7CiAgbGV4LT5pbnB1dCA9IGlucHV0OwogIGxleC0+bG9jLmZpbGUgPSBmaWxlbmFtZTsKfQoKdm9pZApsZXhlcl9kZWZpbmUoTGV4ZXIqIGxleCwgY2hhciogbmFtZSwgY2hhciogZXhwcikgewogIExleGVyUnVsZSBkZWZpbml0aW9uID0ge25hbWUsIGV4cHIsIE1BU0tfQUxMLCAwLCAwLCAwfTsKICB2ZWN0b3Jfc2l6ZSgmbGV4LT5kZWZpbmVzLCBzaXplb2YoTGV4ZXJSdWxlKSk7CiAgdmVjdG9yX3B1c2goJmxleC0+ZGVmaW5lcywgZGVmaW5pdGlvbik7Cn0KCkxleGVyUnVsZSoKbGV4ZXJfZmluZF9kZWZpbml0aW9uKExleGVyKiBsZXgsIGNvbnN0IGNoYXIqIG5hbWUsIHNpemVfdCBuYW1lbGVuKSB7CiAgTGV4ZXJSdWxlKiBkZWZpbml0aW9uOwogIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+ZGVmaW5lcywgZGVmaW5pdGlvbikgewogICAgaWYoIXN0cm5jbXAoZGVmaW5pdGlvbi0+bmFtZSwgbmFtZSwgbmFtZWxlbikgJiYgZGVmaW5pdGlvbi0+bmFtZVtuYW1lbGVuXSA9PSAnXDAnKQogICAgICByZXR1cm4gZGVmaW5pdGlvbjsKICB9CiAgcmV0dXJuIDA7Cn0KCkJPT0wKbGV4ZXJfY29tcGlsZV9ydWxlcyhMZXhlciogbGV4LCBKU0NvbnRleHQqIGN0eCkgewogIExleGVyUnVsZSogcnVsZTsKCiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgewogICAgaWYoIWxleGVyX3J1bGVfY29tcGlsZShsZXgsIHJ1bGUsIGN0eCkpCiAgICAgIHJldHVybiBGQUxTRTsKICB9CiAgcmV0dXJuIFRSVUU7Cn0KCmludApsZXhlcl9wZWVrKExleGVyKiBsZXgsIHVpbnQ2NF90IHN0YXRlLCBKU0NvbnRleHQqIGN0eCkgewogIExleGVyUnVsZSogcnVsZTsKICB1aW50OF90KiBjYXB0dXJlWzUxMl07CiAgaW50IGkgPSAwLCByZXQgPSBMRVhFUl9FUlJPUl9OT01BVENIOwogIHNpemVfdCBsZW4gPSAwOwoKICBpZihpbnB1dF9idWZmZXJfZW9mKCZsZXgtPmlucHV0KSkKICAgIHJldHVybiBMRVhFUl9FT0Y7CgogIGxleC0+c3RhcnQgPSBsZXgtPmlucHV0LnBvczsKCiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgewogICAgaW50IHJlc3VsdDsKICAgIGlmKChydWxlLT5tYXNrICYgKDEgPDwgbGV4LT5zdGF0ZSkpID09IDApIHsKICAgICAgaSsrOwogICAgICBjb250aW51ZTsKICAgIH0KICAgIHJlc3VsdCA9IGxleGVyX3J1bGVfbWF0Y2gobGV4LCBydWxlLCBjYXB0dXJlLCBjdHgpOwogICAgaWYocmVzdWx0ID09IExFWEVSX0VSUk9SX0NPTVBJTEUpIHsKICAgICAgcmV0ID0gcmVzdWx0OwogICAgICBicmVhazsKICAgIH0gZWxzZSBpZihyZXN1bHQgPCAwKSB7CiAgICAgIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJFcnJvciBtYXRjaGluZyByZWdleCAvJXMvIiwgcnVsZS0+ZXhwcik7CiAgICAgIHJldCA9IExFWEVSX0VSUk9SX0VYRUM7CiAgICAgIGJyZWFrOwogICAgfSBlbHNlIGlmKHJlc3VsdCA+IDAgJiYgKGNhcHR1cmVbMV0gLSBjYXB0dXJlWzBdKSA+IDApIHsKICAgICAgLypwcmludGYoIiVzOiUiIFBSSXUzMiAiOiUiIFBSSXUzMiAiICMlaSAlLTIwcyAtIC8lcy8gWyV6dV0gJS4qc1xuIiwKICAgICAgICAgICAgIGxleC0+bG9jLmZpbGUsCiAgICAgICAgICAgICBsZXgtPmxvYy5saW5lICsgMSwKICAgICAgICAgICAgIGxleC0+bG9jLmNvbHVtbiArIDEsCiAgICAgICAgICAgICBpLAogICAgICAgICAgICAgcnVsZS0+bmFtZSwKICAgICAgICAgICAgIHJ1bGUtPmV4cHIsCiAgICAgICAgICAgICBjYXB0dXJlWzFdIC0gY2FwdHVyZVswXSwKICAgICAgICAgICAgIGNhcHR1cmVbMV0gLSBjYXB0dXJlWzBdLAogICAgICAgICAgICAgY2FwdHVyZVswXSk7ICovCiAgICAgIGlmKChsZXgtPm1vZGUgJiBMRVhFUl9MT05HRVNUKSA9PSAwIHx8IHJldCA8IDAgfHwgKHNpemVfdCkoY2FwdHVyZVsxXSAtIGNhcHR1cmVbMF0pID49IGxlbikgewogICAgICAgIHJldCA9IGk7CiAgICAgICAgbGVuID0gY2FwdHVyZVsxXSAtIGNhcHR1cmVbMF07CiAgICAgICAgaWYobGV4LT5tb2RlID09IExFWEVSX0ZJUlNUKQogICAgICAgICAgYnJlYWs7CiAgICAgIH0KICAgIH0KICAgIGkrKzsKICB9CiAgaWYocmV0ID49IDApIHsKICAgIGxleC0+Ynl0ZV9sZW5ndGggPSBsZW47CiAgICBsZXgtPnRva2VuX2lkID0gaTsKICB9CgogIHJldHVybiByZXQ7Cn0KCnNpemVfdApsZXhlcl9za2lwKExleGVyKiBsZXgpIHsKICBzaXplX3QgbGVuID0gaW5wdXRfc2tpcCgmbGV4LT5pbnB1dCwgbGV4LT5zdGFydCArIGxleC0+Ynl0ZV9sZW5ndGgsICZsZXgtPmxvYyk7CiAgbGV4LT5zZXErKzsKICByZXR1cm4gbGVuOwp9CgpjaGFyKgpsZXhlcl9sZXhlbWUoTGV4ZXIqIGxleCwgc2l6ZV90KiBsZW5wKSB7CiAgc2l6ZV90IGxlbiA9IGxleC0+aW5wdXQucG9zIC0gbGV4LT5zdGFydDsKICBjaGFyKiBzID0gKGNoYXIqKWxleC0+aW5wdXQuZGF0YSArIGxleC0+c3RhcnQ7CiAgaWYobGVucCkKICAgICpsZW5wID0gbGVuOwogIHJldHVybiBzOwp9CgppbnQKbGV4ZXJfbmV4dChMZXhlciogbGV4LCB1aW50NjRfdCBzdGF0ZSwgSlNDb250ZXh0KiBjdHgpIHsKICBpbnQgcmV0OwoKICBpZigocmV0ID0gbGV4ZXJfcGVlayhsZXgsIHN0YXRlLCBjdHgpKSA+PSAwKQogICAgbGV4ZXJfc2tpcChsZXgpOwoKICByZXR1cm4gcmV0Owp9Cgp2b2lkCmxleGVyX3NldF9sb2NhdGlvbihMZXhlciogbGV4LCBjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIGxleC0+c3RhcnQgPSBsb2MtPnBvczsKICBsZXgtPmJ5dGVfbGVuZ3RoID0gMDsKICBsZXgtPmlucHV0LnBvcyA9IGxvYy0+cG9zOwogIGxvY2F0aW9uX2ZyZWUoJmxleC0+bG9jLCBjdHgpOwogIGxleC0+bG9jID0gbG9jYXRpb25fY2xvbmUobG9jLCBjdHgpOwp9Cgp2b2lkCmxleGVyX2ZyZWUoTGV4ZXIqIGxleCwgSlNDb250ZXh0KiBjdHgpIHsKICBMZXhlclJ1bGUqIHJ1bGU7CiAgY2hhcioqIHN0YXRlOwoKICBpZighY3R4KQogICAgY3R4ID0gbGV4LT5ydWxlcy5vcGFxdWU7CgogIGlucHV0X2J1ZmZlcl9mcmVlKCZsZXgtPmlucHV0LCBjdHgpOwoKICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPmRlZmluZXMsIHJ1bGUpIHsgbGV4ZXJfcnVsZV9mcmVlKHJ1bGUsIGN0eCk7IH0KICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPnJ1bGVzLCBydWxlKSB7IGxleGVyX3J1bGVfZnJlZShydWxlLCBjdHgpOyB9CiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5zdGF0ZXMsIHN0YXRlKSB7IGZyZWUoKnN0YXRlKTsgfQoKICB2ZWN0b3JfZnJlZSgmbGV4LT5kZWZpbmVzKTsKICB2ZWN0b3JfZnJlZSgmbGV4LT5ydWxlcyk7CiAgdmVjdG9yX2ZyZWUoJmxleC0+c3RhdGVzKTsKICB2ZWN0b3JfZnJlZSgmbGV4LT5zdGF0ZV9zdGFjayk7Cn0KCnZvaWQKbGV4ZXJfZnJlZV9ydChMZXhlciogbGV4LCBKU1J1bnRpbWUqIHJ0KSB7CiAgY2hhcioqIHN0YXRlcDsKICBMZXhlclJ1bGUqIHJ1bGU7CiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5zdGF0ZXMsIHN0YXRlcCkgeyBqc19mcmVlX3J0KHJ0LCAqc3RhdGVwKTsgfQogIHZlY3Rvcl9mcmVlKCZsZXgtPnN0YXRlcyk7CiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgeyBsZXhlcl9ydWxlX2ZyZWVfcnQocnVsZSwgcnQpOyB9CiAgdmVjdG9yX2ZyZWUoJmxleC0+cnVsZXMpOwogIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+ZGVmaW5lcywgcnVsZSkgeyBsZXhlcl9ydWxlX2ZyZWVfcnQocnVsZSwgcnQpOyB9CiAgdmVjdG9yX2ZyZWUoJmxleC0+ZGVmaW5lcyk7CiAgdmVjdG9yX2ZyZWUoJmxleC0+c3RhdGVfc3RhY2spOwp9Cgp2b2lkCmxleGVyX2R1bXAoTGV4ZXIqIGxleCwgRHluQnVmKiBkYnVmKSB7CiAgZGJ1Zl9wcmludGYoZGJ1ZiwgIkxleGVyIHtcbiAgbW9kZTogJXgsXG4gIHN0YXJ0OiAlenUsIHN0YXRlOiAlcyIsIGxleC0+bW9kZSwgbGV4LT5zdGFydCwgbGV4ZXJfc3RhdGVfbmFtZShsZXgsIGxleC0+c3RhdGUpKTsKICBkYnVmX3B1dHN0cihkYnVmLCAiLFxuICBpbnB1dDogIik7CiAgaW5wdXRfYnVmZmVyX2R1bXAoJmxleC0+aW5wdXQsIGRidWYpOwogIGRidWZfcHV0c3RyKGRidWYsICIsXG4gIGxvY2F0aW9uOiAiKTsKICBsb2NhdGlvbl9wcmludCgmbGV4LT5sb2MsIGRidWYpOwogIGRidWZfcHV0c3RyKGRidWYsICJcbn0iKTsKfQoKc2l6ZV90CmlucHV0X3NraXAoSW5wdXRCdWZmZXIqIGlucHV0LCBzaXplX3QgZW5kLCBMb2NhdGlvbiogbG9jKSB7CiAgc2l6ZV90IG4gPSAwOwogIHdoaWxlKGlucHV0LT5wb3MgPCBlbmQpIHsKICAgIHNpemVfdCBwcmV2ID0gaW5wdXQtPnBvczsKICAgIGlmKGlucHV0X2J1ZmZlcl9nZXRjKGlucHV0KSA9PSAnXG4nKSB7CiAgICAgIGxvYy0+bGluZSsrOwogICAgICBsb2MtPmNvbHVtbiA9IDA7CiAgICB9IGVsc2UgewogICAgICBsb2MtPmNvbHVtbisrOwogICAgfQogICAgbG9jLT5wb3MrKzsKICAgIG4rKzsKICB9CiAgcmV0dXJuIG47Cn0KAAAAAAAAAAABKQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPEQAAAAAAAI8RAAAAAAAAAAAAAAAA8L8"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPEQAAAAAAAI8RAAAAAAAAAAAAAAAA8L8"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPEQAAAAAAAI8RAAAAAAAAAAAAAAAA8L8"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPEQAAAAAAAI8RAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/parser.js",
			"settings":
			{
				"buffer_size": 1943,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-sockets.c",
			"settings":
			{
				"buffer_size": 44008,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					239,
					1,
					"cut",
					null,
					"AQAAALtoAAAAAAAAu2gAAAAAAAARAQAAICAgY2FzZSBTT0NLRVRfU0hVVERPV046IHsKICAgICAgaW50MzJfdCBob3c7CiAgICAgIEpTX1RvSW50MzIoY3R4LCAmaG93LCBhcmd2WzBdKTsKICAgICAgSlNfU09DS0VUQ0FMTChTWVNDQUxMX1NIVVRET1dOLCBzb2NrLCBzaHV0ZG93bihzb2NrLmZkLCBob3cpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFNPQ0tFVF9DTE9TRTogewogICAgICBKU19TT0NLRVRDQUxMKFNZU0NBTExfQ0xPU0UsIHNvY2ssIGNsb3NlKHNvY2suZmQpKTsKICAgICAgYnJlYWs7CiAgICB9",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7aAAAAAAAAMxpAAAAAAAAAAAAAAAA8L8"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAF9yAAAAAAAAYHIAAAAAAAAAAAAAYHIAAAAAAABkcgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfcgAAAAAAAF9yAAAAAAAAAAAAAAAA8L8"
				],
				[
					245,
					1,
					"paste",
					null,
					"AQAAAGRyAAAAAAAAdXMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABkcgAAAAAAAGRyAAAAAAAAAAAAAAAA8L8"
				],
				[
					254,
					1,
					"cut",
					null,
					"AQAAAK5eAAAAAAAArl4AAAAAAABkAAAACgogIGlmKCFzb2NrZXRfb3Blbihzb2NrKSkKICAgIHJldHVybiBKU19UaHJvd0ludGVybmFsRXJyb3IoY3R4LCAiU29ja2V0ICMlZCBpcyBub3Qgb3BlbiIsIHNvY2suZmQpOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuXgAAAAAAABJfAAAAAAAAAAAAAAAA8L8"
				],
				[
					255,
					2,
					"paste",
					null,
					"AgAAAK5eAAAAAAAAEl8AAAAAAAAAAAAAEl8AAAAAAAB2XwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuXgAAAAAAAK5eAAAAAAAAAAAAAAAA8L8"
				],
				[
					258,
					1,
					"right_delete",
					null,
					"AQAAABlfAAAAAAAAGV8AAAAAAAABAAAAIQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZXwAAAAAAABlfAAAAAAAAAAAAAAAA8L8"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": "_eiof"
					},
					"BgAAAB9fAAAAAAAAIF8AAAAAAAAAAAAAIF8AAAAAAAAgXwAAAAAAAAUAAABfb3BlbiBfAAAAAAAAIV8AAAAAAAAAAAAAIV8AAAAAAAAiXwAAAAAAAAAAAAAiXwAAAAAAACNfAAAAAAAAAAAAACNfAAAAAAAAJF8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfXwAAAAAAACRfAAAAAAAAAAAAAAAA8L8"
				],
				[
					262,
					3,
					"left_delete",
					null,
					"AwAAACNfAAAAAAAAI18AAAAAAAABAAAAZiJfAAAAAAAAIl8AAAAAAAABAAAAbyFfAAAAAAAAIV8AAAAAAAABAAAAaQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAkXwAAAAAAACRfAAAAAAAAAAAAAAAA8L8"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAACFfAAAAAAAAIl8AAAAAAAAAAAAAIl8AAAAAAAAjXwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhXwAAAAAAACFfAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AgAAAF1fAAAAAAAAXl8AAAAAAAAAAAAAXl8AAAAAAABeXwAAAAAAAAIAAABpcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdXwAAAAAAAF9fAAAAAAAAAAAAAAAA8L8"
				],
				[
					278,
					1,
					"left_delete",
					null,
					"AQAAAF1fAAAAAAAAXV8AAAAAAAABAAAARQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABeXwAAAAAAAF5fAAAAAAAAAAAAAAAA8L8"
				],
				[
					279,
					1,
					"insert",
					{
						"characters": "EOF"
					},
					"AwAAAF1fAAAAAAAAXl8AAAAAAAAAAAAAXl8AAAAAAABfXwAAAAAAAAAAAABfXwAAAAAAAGBfAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABdXwAAAAAAAF1fAAAAAAAAAAAAAAAA8L8"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGBfAAAAAAAAYV8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgXwAAAAAAAGBfAAAAAAAAAAAAAAAA8L8"
				],
				[
					281,
					1,
					"left_delete",
					null,
					"AQAAAGBfAAAAAAAAYF8AAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhXwAAAAAAAGFfAAAAAAAAAAAAAAAA8L8"
				],
				[
					282,
					9,
					"right_delete",
					null,
					"CQAAAGBfAAAAAAAAYF8AAAAAAAABAAAAIGBfAAAAAAAAYF8AAAAAAAABAAAAbmBfAAAAAAAAYF8AAAAAAAABAAAAb2BfAAAAAAAAYF8AAAAAAAABAAAAdGBfAAAAAAAAYF8AAAAAAAABAAAAIGBfAAAAAAAAYF8AAAAAAAABAAAAb2BfAAAAAAAAYF8AAAAAAAABAAAAcGBfAAAAAAAAYF8AAAAAAAABAAAAZWBfAAAAAAAAYF8AAAAAAAABAAAAbg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgXwAAAAAAAGBfAAAAAAAAAAAAAAAA8L8"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": "\nuf"
					},
					"BgAAACpfAAAAAAAAK18AAAAAAAAAAAAAK18AAAAAAAAtXwAAAAAAAAAAAAArXwAAAAAAACtfAAAAAAAAAgAAACAgK18AAAAAAAAvXwAAAAAAAAAAAAAvXwAAAAAAADBfAAAAAAAAAAAAADBfAAAAAAAAMV8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqXwAAAAAAACpfAAAAAAAAAAAAAAAA8L8"
				],
				[
					288,
					1,
					"left_delete",
					null,
					"AQAAADBfAAAAAAAAMF8AAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxXwAAAAAAADFfAAAAAAAAAAAAAAAA8L8"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAADBfAAAAAAAAMV8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwXwAAAAAAADBfAAAAAAAAAAAAAAAA8L8"
				],
				[
					290,
					2,
					"left_delete",
					null,
					"AgAAADBfAAAAAAAAMF8AAAAAAAABAAAAaS9fAAAAAAAAL18AAAAAAAABAAAAdQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxXwAAAAAAADFfAAAAAAAAAAAAAAAA8L8"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAC9fAAAAAAAAMF8AAAAAAAAAAAAAMF8AAAAAAAAxXwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvXwAAAAAAAC9fAAAAAAAAAAAAAAAA8L8"
				],
				[
					292,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADFfAAAAAAAAM18AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxXwAAAAAAADFfAAAAAAAAAAAAAAAA8L8"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": "magic"
					},
					"BQAAADJfAAAAAAAAM18AAAAAAAAAAAAAM18AAAAAAAA0XwAAAAAAAAAAAAA0XwAAAAAAADVfAAAAAAAAAAAAADVfAAAAAAAANl8AAAAAAAAAAAAANl8AAAAAAAA3XwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyXwAAAAAAADJfAAAAAAAAAAAAAAAA8L8"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADdfAAAAAAAAOF8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3XwAAAAAAADdfAAAAAAAAAAAAAAAA8L8"
				],
				[
					295,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAADhfAAAAAAAAOV8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA4XwAAAAAAADhfAAAAAAAAAAAAAAAA8L8"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": " SOC"
					},
					"BAAAADlfAAAAAAAAOl8AAAAAAAAAAAAAOl8AAAAAAAA7XwAAAAAAAAAAAAA7XwAAAAAAADxfAAAAAAAAAAAAADxfAAAAAAAAPV8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA5XwAAAAAAADlfAAAAAAAAAAAAAAAA8L8"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "KET_SHUTDOWN"
					},
					"DAAAAD1fAAAAAAAAPl8AAAAAAAAAAAAAPl8AAAAAAAA/XwAAAAAAAAAAAAA/XwAAAAAAAEBfAAAAAAAAAAAAAEBfAAAAAAAAQV8AAAAAAAAAAAAAQV8AAAAAAABCXwAAAAAAAAAAAABCXwAAAAAAAENfAAAAAAAAAAAAAENfAAAAAAAARF8AAAAAAAAAAAAARF8AAAAAAABFXwAAAAAAAAAAAABFXwAAAAAAAEZfAAAAAAAAAAAAAEZfAAAAAAAAR18AAAAAAAAAAAAAR18AAAAAAABIXwAAAAAAAAAAAABIXwAAAAAAAElfAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9XwAAAAAAAD1fAAAAAAAAAAAAAAAA8L8"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAEtfAAAAAAAATV8AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABLXwAAAAAAAEtfAAAAAAAAAAAAAAAA8L8"
				],
				[
					336,
					1,
					"cut",
					null,
					"AQAAAK9eAAAAAAAAr14AAAAAAABjAAAACiAgaWYoIXNvY2tldF9vcGVuKHNvY2spKQogICAgcmV0dXJuIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJTb2NrZXQgIyVkIGlzIG5vdCBvcGVuIiwgc29jay5mZCk7",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvXgAAAAAAABJfAAAAAAAAAAAAAAAA8L8"
				],
				[
					337,
					2,
					"paste",
					null,
					"AgAAAK9eAAAAAAAAEl8AAAAAAAAAAAAAEl8AAAAAAAB1XwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvXgAAAAAAAK9eAAAAAAAAAAAAAAAA8L8"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": "clkose"
					},
					"BwAAAL1eAAAAAAAAvl4AAAAAAAAAAAAAvl4AAAAAAAC+XgAAAAAAAAQAAABvcGVuvl4AAAAAAAC/XgAAAAAAAAAAAAC/XgAAAAAAAMBeAAAAAAAAAAAAAMBeAAAAAAAAwV4AAAAAAAAAAAAAwV4AAAAAAADCXgAAAAAAAAAAAADCXgAAAAAAAMNeAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9XgAAAAAAAMFeAAAAAAAAAAAAAAAA8L8"
				],
				[
					341,
					4,
					"left_delete",
					null,
					"BAAAAMJeAAAAAAAAwl4AAAAAAAABAAAAZcFeAAAAAAAAwV4AAAAAAAABAAAAc8BeAAAAAAAAwF4AAAAAAAABAAAAb79eAAAAAAAAv14AAAAAAAABAAAAaw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDXgAAAAAAAMNeAAAAAAAAAAAAAAAA8L8"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": "osed"
					},
					"BAAAAL9eAAAAAAAAwF4AAAAAAAAAAAAAwF4AAAAAAADBXgAAAAAAAAAAAADBXgAAAAAAAMJeAAAAAAAAAAAAAMJeAAAAAAAAw14AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC/XgAAAAAAAL9eAAAAAAAAAAAAAAAA8L8"
				],
				[
					346,
					1,
					"left_delete",
					null,
					"AQAAALVeAAAAAAAAtV4AAAAAAAABAAAAIQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC2XgAAAAAAALZeAAAAAAAAAAAAAAAA8L8"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "has"
					},
					"BAAAAPxeAAAAAAAA/V4AAAAAAAAAAAAA/V4AAAAAAAD9XgAAAAAAAAsAAABpcyBub3Qgb3Blbv1eAAAAAAAA/l4AAAAAAAAAAAAA/l4AAAAAAAD/XgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8XgAAAAAAAAdfAAAAAAAAAAAAAAAA8L8"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": " already"
					},
					"CAAAAP9eAAAAAAAAAF8AAAAAAAAAAAAAAF8AAAAAAAABXwAAAAAAAAAAAAABXwAAAAAAAAJfAAAAAAAAAAAAAAJfAAAAAAAAA18AAAAAAAAAAAAAA18AAAAAAAAEXwAAAAAAAAAAAAAEXwAAAAAAAAVfAAAAAAAAAAAAAAVfAAAAAAAABl8AAAAAAAAAAAAABl8AAAAAAAAHXwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/XgAAAAAAAP9eAAAAAAAAAAAAAAAA8L8"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": " been"
					},
					"BQAAAAdfAAAAAAAACF8AAAAAAAAAAAAACF8AAAAAAAAJXwAAAAAAAAAAAAAJXwAAAAAAAApfAAAAAAAAAAAAAApfAAAAAAAAC18AAAAAAAAAAAAAC18AAAAAAAAMXwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHXwAAAAAAAAdfAAAAAAAAAAAAAAAA8L8"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " closed"
					},
					"BwAAAAxfAAAAAAAADV8AAAAAAAAAAAAADV8AAAAAAAAOXwAAAAAAAAAAAAAOXwAAAAAAAA9fAAAAAAAAAAAAAA9fAAAAAAAAEF8AAAAAAAAAAAAAEF8AAAAAAAARXwAAAAAAAAAAAAARXwAAAAAAABJfAAAAAAAAAAAAABJfAAAAAAAAE18AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMXwAAAAAAAAxfAAAAAAAAAAAAAAAA8L8"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAB9fAAAAAAAAIF8AAAAAAAAAAAAAIF8AAAAAAAAkXwAAAAAAAAAAAAAgXwAAAAAAACBfAAAAAAAABAAAACAgICAgXwAAAAAAACJfAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAfXwAAAAAAAB9fAAAAAAAAAAAAAAAA8L8"
				],
				[
					400,
					1,
					"cut",
					null,
					"AQAAAIZfAAAAAAAAhl8AAAAAAAB8AAAACiAgaWYoc29ja2V0X2VvZihzb2NrKSkKICAgIGlmKG1hZ2ljIDwgU09DS0VUX1NIVVRET1dOKQogICAgICByZXR1cm4gSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIlNvY2tldCAjJWQgRU9GIiwgc29jay5mZCk7Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGXwAAAAAAAAJgAAAAAAAAAAAAAAAA8L8"
				],
				[
					401,
					2,
					"paste",
					null,
					"AgAAAIZfAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAB+YAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGXwAAAAAAAIZfAAAAAAAAAAAAAAAA8L8"
				],
				[
					404,
					2,
					"left_delete",
					null,
					"AwAAABBgAAAAAAAAEGAAAAAAAAACAAAAb2YgXwAAAAAAACBfAAAAAAAAAgAAACAgDWAAAAAAAAANYAAAAAAAAAEAAABl",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQYAAAAAAAABJgAAAAAAAAAAAAAAAA8L8"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "error"
					},
					"BQAAAA1gAAAAAAAADmAAAAAAAAAAAAAADmAAAAAAAAAPYAAAAAAAAAAAAAAPYAAAAAAAABBgAAAAAAAAAAAAABBgAAAAAAAAEWAAAAAAAAAAAAAAEWAAAAAAAAASYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANYAAAAAAAAA1gAAAAAAAAAAAAAAAA8L8"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "CLOSE"
					},
					"BgAAADBgAAAAAAAAMWAAAAAAAAAAAAAAMWAAAAAAAAAxYAAAAAAAAAgAAABTSFVURE9XTjFgAAAAAAAAMmAAAAAAAAAAAAAAMmAAAAAAAAAzYAAAAAAAAAAAAAAzYAAAAAAAADRgAAAAAAAAAAAAADRgAAAAAAAANWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwYAAAAAAAADhgAAAAAAAAAAAAAAAA8L8"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "error"
					},
					"BgAAAGtgAAAAAAAAbGAAAAAAAAAAAAAAbGAAAAAAAABsYAAAAAAAAAMAAABFT0ZsYAAAAAAAAG1gAAAAAAAAAAAAAG1gAAAAAAAAbmAAAAAAAAAAAAAAbmAAAAAAAABvYAAAAAAAAAAAAABvYAAAAAAAAHBgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrYAAAAAAAAG5gAAAAAAAAAAAAAAAA8L8"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHBgAAAAAAAAcWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwYAAAAAAAAHBgAAAAAAAAAAAAAAAA8L8"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHFgAAAAAAAAcmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABxYAAAAAAAAHFgAAAAAAAAAAAAAAAA8L8"
				],
				[
					438,
					2,
					"left_delete",
					null,
					"AgAAAHFgAAAAAAAAcWAAAAAAAAABAAAAIHBgAAAAAAAAcGAAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByYAAAAAAAAHJgAAAAAAAAAAAAAAAA8L8"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": " (%d)"
					},
					"BQAAAHBgAAAAAAAAcWAAAAAAAAAAAAAAcWAAAAAAAAByYAAAAAAAAAAAAAByYAAAAAAAAHNgAAAAAAAAAAAAAHNgAAAAAAAAdGAAAAAAAAAAAAAAdGAAAAAAAAB1YAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwYAAAAAAAAHBgAAAAAAAAAAAAAAAA8L8"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHVgAAAAAAAAdmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1YAAAAAAAAHVgAAAAAAAAAAAAAAAA8L8"
				],
				[
					441,
					1,
					"left_delete",
					null,
					"AQAAAHVgAAAAAAAAdWAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2YAAAAAAAAHZgAAAAAAAAAAAAAAAA8L8"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHVgAAAAAAAAdmAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1YAAAAAAAAHVgAAAAAAAAAAAAAAAA8L8"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": " %d"
					},
					"AwAAAHZgAAAAAAAAd2AAAAAAAAAAAAAAd2AAAAAAAAB4YAAAAAAAAAAAAAB4YAAAAAAAAHlgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB2YAAAAAAAAHZgAAAAAAAAAAAAAAAA8L8"
				],
				[
					444,
					1,
					"left_delete",
					null,
					"AQAAAHhgAAAAAAAAeGAAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5YAAAAAAAAHlgAAAAAAAAAAAAAAAA8L8"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHhgAAAAAAAAeWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB4YAAAAAAAAHhgAAAAAAAAAAAAAAAA8L8"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAINgAAAAAAAAhGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACDYAAAAAAAAINgAAAAAAAAAAAAAAAA8L8"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " sock.error,"
					},
					"DAAAAIRgAAAAAAAAhWAAAAAAAAAAAAAAhWAAAAAAAACGYAAAAAAAAAAAAACGYAAAAAAAAIdgAAAAAAAAAAAAAIdgAAAAAAAAiGAAAAAAAAAAAAAAiGAAAAAAAACJYAAAAAAAAAAAAACJYAAAAAAAAIpgAAAAAAAAAAAAAIpgAAAAAAAAi2AAAAAAAAAAAAAAi2AAAAAAAACMYAAAAAAAAAAAAACMYAAAAAAAAI1gAAAAAAAAAAAAAI1gAAAAAAAAjmAAAAAAAAAAAAAAjmAAAAAAAACPYAAAAAAAAAAAAACPYAAAAAAAAJBgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEYAAAAAAAAIRgAAAAAAAAAAAAAAAA8L8"
				],
				[
					450,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJBgAAAAAAAAkWAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACQYAAAAAAAAJBgAAAAAAAAAAAAAAAA8L8"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "strerror"
					},
					"CAAAAJFgAAAAAAAAkmAAAAAAAAAAAAAAkmAAAAAAAACTYAAAAAAAAAAAAACTYAAAAAAAAJRgAAAAAAAAAAAAAJRgAAAAAAAAlWAAAAAAAAAAAAAAlWAAAAAAAACWYAAAAAAAAAAAAACWYAAAAAAAAJdgAAAAAAAAAAAAAJdgAAAAAAAAmGAAAAAAAAAAAAAAmGAAAAAAAACZYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRYAAAAAAAAJFgAAAAAAAAAAAAAAAA8L8"
				],
				[
					452,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJlgAAAAAAAAm2AAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZYAAAAAAAAJlgAAAAAAAAAAAAAAAA8L8"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": "sock.error"
					},
					"CgAAAJpgAAAAAAAAm2AAAAAAAAAAAAAAm2AAAAAAAACcYAAAAAAAAAAAAACcYAAAAAAAAJ1gAAAAAAAAAAAAAJ1gAAAAAAAAnmAAAAAAAAAAAAAAnmAAAAAAAACfYAAAAAAAAAAAAACfYAAAAAAAAKBgAAAAAAAAAAAAAKBgAAAAAAAAoWAAAAAAAAAAAAAAoWAAAAAAAACiYAAAAAAAAAAAAACiYAAAAAAAAKNgAAAAAAAAAAAAAKNgAAAAAAAApGAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACaYAAAAAAAAJpgAAAAAAAAAAAAAAAA8L8"
				],
				[
					469,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAKhgAAAAAAAAqmAAAAAAAAAAAAAAA2AAAAAAAAAFYAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADYAAAAAAAAKhgAAAAAAAAAAAAAAAA8L8"
				],
				[
					483,
					1,
					"insert",
					{
						"characters": "sock."
					},
					"BgAAAAhgAAAAAAAACWAAAAAAAAAAAAAACWAAAAAAAAAJYAAAAAAAABIAAABzb2NrZXRfZXJyb3Ioc29jaykJYAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAAC2AAAAAAAAAAAAAAC2AAAAAAAAAMYAAAAAAAAAAAAAAMYAAAAAAAAA1gAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIYAAAAAAAABpgAAAAAAAAAAAAAAAA8L8"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAP8GAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAABBwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/BgAAAAAAAP8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": "(0"
					},
					"AgAAAGwDAAAAAAAAbQMAAAAAAAAAAAAAbQMAAAAAAABuAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAwAAAAAAAGwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					555,
					1,
					"left_delete",
					null,
					"AQAAAG0DAAAAAAAAbQMAAAAAAAABAAAAMA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuAwAAAAAAAG4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					557,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAHcDAAAAAAAAeAMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB3AwAAAAAAAHcDAAAAAAAAAAAAAAAA8L8"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAJEDAAAAAAAAkgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAwAAAAAAAJEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					577,
					1,
					"left_delete",
					null,
					"AQAAAJEDAAAAAAAAkQMAAAAAAAABAAAALw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACSAwAAAAAAAJIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					578,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAJEDAAAAAAAAkgMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACRAwAAAAAAAJEDAAAAAAAAAAAAAAAA8L8"
				],
				[
					581,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAJYDAAAAAAAAlwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWAwAAAAAAAJYDAAAAAAAAAAAAAAAA8L8"
				],
				[
					590,
					1,
					"paste",
					null,
					"AgAAANUDAAAAAAAA2wMAAAAAAAAAAAAA2wMAAAAAAADbAwAAAAAAAAQAAABzb2Nr",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADVAwAAAAAAANkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAKIDAAAAAAAAowMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAwAAAAAAAKIDAAAAAAAAAAAAAAAA8L8"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKoDAAAAAAAAqwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqAwAAAAAAAKoDAAAAAAAAAAAAAAAA8L8"
				],
				[
					632,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAK4DAAAAAAAArwMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuAwAAAAAAAK4DAAAAAAAAAAAAAAAA8L8"
				],
				[
					635,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAALkDAAAAAAAAugMAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5AwAAAAAAALkDAAAAAAAAAAAAAAAA8L8"
				],
				[
					677,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKBQAAAAAAAIoFAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "tests/test_sockets.js",
			"settings":
			{
				"buffer_size": 5936,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOYSAAAAAAAA5xIAAAAAAAAAAAAA5xIAAAAAAADoEgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmEgAAAAAAAOYSAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANMUAAAAAAAA1BQAAAAAAAAAAAAA1BQAAAAAAADVFAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTFAAAAAAAANMUAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAE4LAAAAAAAATwsAAAAAAAAAAAAATwsAAAAAAABPCwAAAAAAAAIAAAAvKg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABOCwAAAAAAAFALAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					2,
					"left_delete",
					null,
					"AgAAAFoLAAAAAAAAWgsAAAAAAAACAAAALyBZCwAAAAAAAFkLAAAAAAAAAQAAACo",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaCwAAAAAAAFwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkLAAAAAAAAWgsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZCwAAAAAAAFkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					3,
					"left_delete",
					null,
					"AwAAAFoLAAAAAAAAWgsAAAAAAAAEAAAAbW9kZVkLAAAAAAAAWQsAAAAAAAABAAAAIFgLAAAAAAAAWAsAAAAAAAABAAAALA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaCwAAAAAAAF4LAAAAAAAAAAAAAAAA8L8"
				],
				[
					166,
					5,
					"left_delete",
					null,
					"BQAAALQTAAAAAAAAtBMAAAAAAACfAAAAICAgICAgICAgIC8qaW5zcGVjdChidWYsIHtjb2xvcnM6IHRydWUsIG1heEFycmF5TGVuZ3RoOiA0LCBtYXhTdHJpbmdMZW5ndGg6IDEwLCBtdWx0aWxpbmU6IGZhbHNlLCBicmVha0xlbmd0aDogSW5maW5pdHksIGNvbXBhY3Q6IDIgfSkucmVwbGFjZSgvXHMrL2csICcgJyksKi8KsxMAAAAAAACzEwAAAAAAAAEAAAAKshMAAAAAAACyEwAAAAAAAAEAAAArsRMAAAAAAACxEwAAAAAAAAEAAAAgsBMAAAAAAACwEwAAAAAAAAEAAABg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC0EwAAAAAAAFMUAAAAAAAAAAAAAAAA8L8"
				],
				[
					167,
					10,
					"right_delete",
					null,
					"CgAAALATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAILATAAAAAAAAsBMAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwEwAAAAAAALATAAAAAAAAAAAAAAAA8L8"
				],
				[
					168,
					1,
					"right_delete",
					null,
					"AQAAALATAAAAAAAAsBMAAAAAAAABAAAAYA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwEwAAAAAAALATAAAAAAAAAAAAAAAA8L8"
				],
				[
					223,
					1,
					"paste",
					null,
					"AQAAAJQVAAAAAAAAMxYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUFQAAAAAAAJQVAAAAAAAAAAAAAAAA8L8"
				],
				[
					230,
					1,
					"insert",
					{
						"characters": "sck"
					},
					"BAAAAKoVAAAAAAAAqxUAAAAAAAAAAAAAqxUAAAAAAACrFQAAAAAAAGUAAAByZWN2KEFycmF5QnVmZmVyICR7YnVmLmJ5dGVMZW5ndGh9KSA9ICR7bn0gJHtuID49IDAgPyBxdW90ZShkYXRhLCAiJyIpIDogc29jay5lcnJvciArICcnfWAucGFkRW5kKDcwKasVAAAAAAAArBUAAAAAAAAAAAAArBUAAAAAAACtFQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqFQAAAAAAAA8WAAAAAAAAAAAAAAAA8L8"
				],
				[
					231,
					2,
					"left_delete",
					null,
					"AgAAAKwVAAAAAAAArBUAAAAAAAABAAAAa6sVAAAAAAAAqxUAAAAAAAABAAAAYw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtFQAAAAAAAK0VAAAAAAAAAAAAAAAA8L8"
				],
				[
					232,
					1,
					"insert",
					{
						"characters": "ock`"
					},
					"BAAAAKsVAAAAAAAArBUAAAAAAAAAAAAArBUAAAAAAACtFQAAAAAAAAAAAACtFQAAAAAAAK4VAAAAAAAAAAAAAK4VAAAAAAAArxUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrFQAAAAAAAKsVAAAAAAAAAAAAAAAA8L8"
				],
				[
					234,
					3,
					"join_lines",
					null,
					"CAAAAKAVAAAAAAAAoBUAAAAAAAABAAAACqAVAAAAAAAAoBUAAAAAAAAIAAAAICAgICAgICCnFQAAAAAAAKcVAAAAAAAAAQAAAAqnFQAAAAAAAKcVAAAAAAAACAAAACAgICAgICAgpxUAAAAAAACoFQAAAAAAAAAAAAC5FQAAAAAAALkVAAAAAAAAAQAAAAq5FQAAAAAAALkVAAAAAAAABgAAACAgICAgILkVAAAAAAAAuhUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgFQAAAAAAAKAVAAAAAAAAAAAAAAAAXEA"
				],
				[
					235,
					1,
					"left_delete",
					null,
					"AQAAALkVAAAAAAAAuRUAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6FQAAAAAAALoVAAAAAAAAAAAAAAAA8L8"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPUKAAAAAAAA9goAAAAAAAAAAAAA9goAAAAAAAD2CgAAAAAAABAAAAAgbG9jYWwsIHJlbW90ZSwg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1CgAAAAAAAAULAAAAAAAAAAAAAAAA8L8"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": "ret,"
					},
					"BAAAAN8KAAAAAAAA4AoAAAAAAAAAAAAA4AoAAAAAAADhCgAAAAAAAAAAAADhCgAAAAAAAOIKAAAAAAAAAAAAAOIKAAAAAAAA4woAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADfCgAAAAAAAN8KAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMKAAAAAAAA5AoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjCgAAAAAAAOMKAAAAAAAAAAAAAAAA8L8"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "retm,"
					},
					"BQAAACwLAAAAAAAALQsAAAAAAAAAAAAALQsAAAAAAAAuCwAAAAAAAAAAAAAuCwAAAAAAAC8LAAAAAAAAAAAAAC8LAAAAAAAAMAsAAAAAAAAAAAAAMAsAAAAAAAAxCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsCwAAAAAAACwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					261,
					2,
					"left_delete",
					null,
					"AgAAADALAAAAAAAAMAsAAAAAAAABAAAALC8LAAAAAAAALwsAAAAAAAABAAAAbQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxCwAAAAAAADELAAAAAAAAAAAAAAAA8L8"
				],
				[
					262,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAC8LAAAAAAAAMAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvCwAAAAAAAC8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": "closed,"
					},
					"BwAAAE8LAAAAAAAAUAsAAAAAAAAAAAAAUAsAAAAAAABRCwAAAAAAAAAAAABRCwAAAAAAAFILAAAAAAAAAAAAAFILAAAAAAAAUwsAAAAAAAAAAAAAUwsAAAAAAABUCwAAAAAAAAAAAABUCwAAAAAAAFULAAAAAAAAAAAAAFULAAAAAAAAVgsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPCwAAAAAAAE8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": " connecting,"
					},
					"DAAAAFYLAAAAAAAAVwsAAAAAAAAAAAAAVwsAAAAAAABYCwAAAAAAAAAAAABYCwAAAAAAAFkLAAAAAAAAAAAAAFkLAAAAAAAAWgsAAAAAAAAAAAAAWgsAAAAAAABbCwAAAAAAAAAAAABbCwAAAAAAAFwLAAAAAAAAAAAAAFwLAAAAAAAAXQsAAAAAAAAAAAAAXQsAAAAAAABeCwAAAAAAAAAAAABeCwAAAAAAAF8LAAAAAAAAAAAAAF8LAAAAAAAAYAsAAAAAAAAAAAAAYAsAAAAAAABhCwAAAAAAAAAAAABhCwAAAAAAAGILAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABWCwAAAAAAAFYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": " connected,"
					},
					"CwAAAGILAAAAAAAAYwsAAAAAAAAAAAAAYwsAAAAAAABkCwAAAAAAAAAAAABkCwAAAAAAAGULAAAAAAAAAAAAAGULAAAAAAAAZgsAAAAAAAAAAAAAZgsAAAAAAABnCwAAAAAAAAAAAABnCwAAAAAAAGgLAAAAAAAAAAAAAGgLAAAAAAAAaQsAAAAAAAAAAAAAaQsAAAAAAABqCwAAAAAAAAAAAABqCwAAAAAAAGsLAAAAAAAAAAAAAGsLAAAAAAAAbAsAAAAAAAAAAAAAbAsAAAAAAABtCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiCwAAAAAAAGILAAAAAAAAAAAAAAAA8L8"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG0LAAAAAAAAbgsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABtCwAAAAAAAG0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					281,
					1,
					"paste",
					null,
					"AQAAAAALAAAAAAAAIAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAACwAAAAAAAAALAAAAAAAAAAAAAAAA8L8"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAAALAAAAAAAAAQsAAAAAAAAAAAAAAQsAAAAAAAABCwAAAAAAACAAAAAgY2xvc2VkLCBjb25uZWN0aW5nLCBjb25uZWN0ZWQsIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgCwAAAAAAAAALAAAAAAAAAAAAAAAA8L8"
				],
				[
					288,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAE8LAAAAAAAAUAsAAAAAAAAAAAAAUAsAAAAAAABQCwAAAAAAACAAAAAgY2xvc2VkLCBjb25uZWN0aW5nLCBjb25uZWN0ZWQsIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABPCwAAAAAAAG8LAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
			"settings":
			{
				"buffer_size": 44008,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					46,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEXAAAAAAAANVcAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADEXAAAAAAAANVcAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "quickjs-sockets.h",
			"settings":
			{
				"buffer_size": 2799,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					12,
					1,
					"cut",
					null,
					"AQAAADUAAAAAAAAANQAAAAAAAAATAAAAI2luY2x1ZGUgInV0aWxzLmgiCg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUAAAAAAAAASAAAAAAAAAAAAAAAAADwvw"
				],
				[
					13,
					2,
					"paste",
					null,
					"AgAAADUAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABbAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUAAAAAAAAANQAAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"insert_snippet",
					{
						"contents": "<${0:$SELECTION}>"
					},
					"AgAAAD4AAAAAAAAAPgAAAAAAAAAJAAAAInV0aWxzLmgiPgAAAAAAAABJAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD4AAAAAAAAARwAAAAAAAAAAAAAAAADwvw"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": "quickjs.h"
					},
					"CgAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAAkAAAAidXRpbHMuaCJAAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8AAAAAAAAASAAAAAAAAAAAAAAAAADwvw"
				],
				[
					21,
					1,
					"cut",
					null,
					"AQAAADUAAAAAAAAANQAAAAAAAAAVAAAAI2luY2x1ZGUgPHF1aWNranMuaD4K",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUAAAAAAAAASgAAAAAAAAAAAAAAAAAAAA"
				],
				[
					23,
					1,
					"paste",
					null,
					"AQAAAHgAAAAAAAAAjQAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"cut",
					null,
					"AQAAAEgAAAAAAAAASAAAAAAAAABFAAAAI2luY2x1ZGUgPHN5cy9zb2NrZXQuaD4KI2luY2x1ZGUgPG5ldGluZXQvaW4uaD4KI2luY2x1ZGUgPHF1aWNranMuaD4K",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI0AAAAAAAAASAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					27,
					1,
					"paste",
					null,
					"AQAAADUAAAAAAAAAegAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADUAAAAAAAAANQAAAAAAAAAAAAAAAAAAAA"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAHoAAAAAAAAAewAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHoAAAAAAAAAegAAAAAAAAAAAAAAAADwvw"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAACoFAAAAAAAAKgUAAAAAAACxAAAACgpKU1ZhbHVlIGpzX3NvY2tldF9uZXdfcHJvdG8oSlNDb250ZXh0KiwgSlNWYWx1ZSwgaW50IGZkKTsKSlNWYWx1ZSBqc19zb2NrZXRfbmV3KEpTQ29udGV4dCosIGludCk7CkpTVmFsdWUganNfc29ja2V0X2NvbnN0cnVjdG9yKEpTQ29udGV4dCosIEpTVmFsdWUsIGludCBhcmdjLCBKU1ZhbHVlIGFyZ3ZbXSk7",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANsFAAAAAAAAKgUAAAAAAAAAAAAAAADwvw"
				],
				[
					31,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+CgAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSA8c3lzL3NvY2tldC5oPgojaW5jbHVkZSA8bmV0aW5ldC9pbi5oPgojaW5jbHVkZSA8cXVpY2tqcy5oPgoKI2luY2x1ZGUgInV0aWxzLmgiCgp0eXBlZGVmIHVuaW9uIHsKICB1aW50MTZfdCBmYW1pbHk7CiAgc3RydWN0IHNvY2thZGRyIHM7CiAgc3RydWN0IHNvY2thZGRyX2luIHNhaTsKICBzdHJ1Y3Qgc29ja2FkZHJfaW42IHNhaTY7Cn0gU29ja0FkZHI7CgpfX2F0dHJpYnV0ZV9fKChwYWNrZWQpKSB1bmlvbiBzb2NrZXRfc3RhdGUgewogIHN0cnVjdCB7CiAgICB1aW50MTZfdCBmZDsKICAgIHVuc2lnbmVkIGVycm9yIDogMTI7CiAgICB1bnNpZ25lZCBzeXNjYWxsIDogNDsKICAgIGludDMyX3QgcmV0OwogIH07CiAgdWludDY0X3QgdTY0OwogIHZvaWQqIHB0cjsKfTsKCnR5cGVkZWYgdW5pb24gc29ja2V0X3N0YXRlIFNvY2tldDsKCmV4dGVybiB0aHJlYWRfbG9jYWwgVklTSUJMRSBKU0NsYXNzSUQganNfc29ja2FkZHJfY2xhc3NfaWQsIGpzX3NvY2tldF9jbGFzc19pZDsKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU1ZhbHVlIHNvY2thZGRyX3Byb3RvLCBzb2NrYWRkcl9jdG9yLCBzb2NrZXRfcHJvdG8sIHNvY2tldF9jdG9yOwoKZW51bSBTb2NrZXRDYWxscyB7CiAgU1lTQ0FMTF9TT0NLRVQgPSAxLAogIFNZU0NBTExfR0VUU09DS05BTUUsCiAgU1lTQ0FMTF9HRVRQRUVSTkFNRSwKICBTWVNDQUxMX0ZDTlRMLAogIFNZU0NBTExfQklORCwKICBTWVNDQUxMX0FDQ0VQVCwKICBTWVNDQUxMX0NPTk5FQ1QsCiAgU1lTQ0FMTF9MSVNURU4sCiAgU1lTQ0FMTF9SRUNWLAogIFNZU0NBTExfUkVDVkZST00sCiAgU1lTQ0FMTF9TRU5ELAogIFNZU0NBTExfU0VORFRPLAogIFNZU0NBTExfU0hVVERPV04sCiAgU1lTQ0FMTF9DTE9TRSwKICBTWVNDQUxMX0dFVFNPQ0tPUFQsCiAgU1lTQ0FMTF9TRVRTT0NLT1BUCn07CgojZGVmaW5lIHNvY2tldF9jbG9zZWQoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfQ0xPU0UgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9lb2Yoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfUkVDViAmJiAoc29jaykucmV0ID09IDApCiNkZWZpbmUgc29ja2V0X29wZW4oc29jaykgKChzb2NrKS5mZCA+PSAwICYmICFzb2NrZXRfY2xvc2VkKHNvY2spKQojZGVmaW5lIHNvY2tldF9lcnJvcihzb2NrKSAoKHNvY2spLnJldCA8IDAgJiYgKHNvY2spLmVycm9yKQojZGVmaW5lIHNvY2tldF9zeXNjYWxsKHNvY2spIHNvY2tldF9zeXNjYWxsc1soc29jaykuc3lzY2FsbF0KCnN0YXRpYyBpbmxpbmUgaW50CnNvY2thZGRyX3BvcnQoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIG50b2hzKHNhLT5zYWkuc2luX3BvcnQpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIG50b2hzKHNhLT5zYWk2LnNpbjZfcG9ydCk7CiAgfQogIHJldHVybiAtMTsKfQoKc3RhdGljIGlubGluZSB2b2lkKgpzb2NrYWRkcl9hZGRyKGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiAmc2EtPnNhaS5zaW5fYWRkcjsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiAmc2EtPnNhaTYuc2luNl9hZGRyOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzb2NrbGVuX3QKc29ja2FkZHJfYWRkcmxlbihjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHNhLT5zYWkuc2luX2FkZHIpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzYS0+c2FpNi5zaW42X2FkZHIpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc29ja2FkZHJfc2l6ZShjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbik7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbjYpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBTb2NrQWRkcioKanNfc29ja2FkZHJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja0FkZHIqCmpzX3NvY2thZGRyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja2V0CmpzX3NvY2tldF9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tldApqc19zb2NrZXRfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgojZW5kaWYgLyogZGVmaW5lZChRVUlDS0pTX1NPQ0tFVFNfSCkgICAgICAgICAqLwoAAAAAAAAAAL4KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAQAAAAAAAJsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+CgAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSA8c3lzL3NvY2tldC5oPgojaW5jbHVkZSA8bmV0aW5ldC9pbi5oPgojaW5jbHVkZSA8cXVpY2tqcy5oPgoKI2luY2x1ZGUgInV0aWxzLmgiCgp0eXBlZGVmIHVuaW9uIHsKICB1aW50MTZfdCBmYW1pbHk7CiAgc3RydWN0IHNvY2thZGRyIHM7CiAgc3RydWN0IHNvY2thZGRyX2luIHNhaTsKICBzdHJ1Y3Qgc29ja2FkZHJfaW42IHNhaTY7Cn0gU29ja0FkZHI7CgpfX2F0dHJpYnV0ZV9fKChwYWNrZWQpKSB1bmlvbiBzb2NrZXRfc3RhdGUgewogIHN0cnVjdCB7CiAgICB1aW50MTZfdCBmZDsKICAgIHVuc2lnbmVkIGVycm9yIDogMTI7CiAgICB1bnNpZ25lZCBzeXNjYWxsIDogNDsKICAgIGludDMyX3QgcmV0OwogIH07CiAgdWludDY0X3QgdTY0OwogIHZvaWQqIHB0cjsKfTsKCnR5cGVkZWYgdW5pb24gc29ja2V0X3N0YXRlIFNvY2tldDsKCmV4dGVybiB0aHJlYWRfbG9jYWwgVklTSUJMRSBKU0NsYXNzSUQganNfc29ja2FkZHJfY2xhc3NfaWQsIGpzX3NvY2tldF9jbGFzc19pZDsKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU1ZhbHVlIHNvY2thZGRyX3Byb3RvLCBzb2NrYWRkcl9jdG9yLCBzb2NrZXRfcHJvdG8sIHNvY2tldF9jdG9yOwoKZW51bSBTb2NrZXRDYWxscyB7CiAgU1lTQ0FMTF9TT0NLRVQgPSAxLAogIFNZU0NBTExfR0VUU09DS05BTUUsCiAgU1lTQ0FMTF9HRVRQRUVSTkFNRSwKICBTWVNDQUxMX0ZDTlRMLAogIFNZU0NBTExfQklORCwKICBTWVNDQUxMX0FDQ0VQVCwKICBTWVNDQUxMX0NPTk5FQ1QsCiAgU1lTQ0FMTF9MSVNURU4sCiAgU1lTQ0FMTF9SRUNWLAogIFNZU0NBTExfUkVDVkZST00sCiAgU1lTQ0FMTF9TRU5ELAogIFNZU0NBTExfU0VORFRPLAogIFNZU0NBTExfU0hVVERPV04sCiAgU1lTQ0FMTF9DTE9TRSwKICBTWVNDQUxMX0dFVFNPQ0tPUFQsCiAgU1lTQ0FMTF9TRVRTT0NLT1BUCn07CgojZGVmaW5lIHNvY2tldF9jbG9zZWQoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfQ0xPU0UgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9lb2Yoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfUkVDViAmJiAoc29jaykucmV0ID09IDApCiNkZWZpbmUgc29ja2V0X29wZW4oc29jaykgKChzb2NrKS5mZCA+PSAwICYmICFzb2NrZXRfY2xvc2VkKHNvY2spKQojZGVmaW5lIHNvY2tldF9lcnJvcihzb2NrKSAoKHNvY2spLnJldCA8IDAgJiYgKHNvY2spLmVycm9yKQojZGVmaW5lIHNvY2tldF9zeXNjYWxsKHNvY2spIHNvY2tldF9zeXNjYWxsc1soc29jaykuc3lzY2FsbF0KCnN0YXRpYyBpbmxpbmUgaW50CnNvY2thZGRyX3BvcnQoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIG50b2hzKHNhLT5zYWkuc2luX3BvcnQpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIG50b2hzKHNhLT5zYWk2LnNpbjZfcG9ydCk7CiAgfQogIHJldHVybiAtMTsKfQoKc3RhdGljIGlubGluZSB2b2lkKgpzb2NrYWRkcl9hZGRyKGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiAmc2EtPnNhaS5zaW5fYWRkcjsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiAmc2EtPnNhaTYuc2luNl9hZGRyOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzb2NrbGVuX3QKc29ja2FkZHJfYWRkcmxlbihjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHNhLT5zYWkuc2luX2FkZHIpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzYS0+c2FpNi5zaW42X2FkZHIpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc29ja2FkZHJfc2l6ZShjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbik7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbjYpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBTb2NrQWRkcioKanNfc29ja2FkZHJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja0FkZHIqCmpzX3NvY2thZGRyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja2V0CmpzX3NvY2tldF9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tldApqc19zb2NrZXRfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgojZW5kaWYgLyogZGVmaW5lZChRVUlDS0pTX1NPQ0tFVFNfSCkgICAgICAgICAqLwoAAAAAAAAAAL4KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYAQAAAAAAAN4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+CgAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSA8c3lzL3NvY2tldC5oPgojaW5jbHVkZSA8bmV0aW5ldC9pbi5oPgojaW5jbHVkZSA8cXVpY2tqcy5oPgoKI2luY2x1ZGUgInV0aWxzLmgiCgp0eXBlZGVmIHVuaW9uIHsKICB1aW50MTZfdCBmYW1pbHk7CiAgc3RydWN0IHNvY2thZGRyIHM7CiAgc3RydWN0IHNvY2thZGRyX2luIHNhaTsKICBzdHJ1Y3Qgc29ja2FkZHJfaW42IHNhaTY7Cn0gU29ja0FkZHI7CgpfX2F0dHJpYnV0ZV9fKChwYWNrZWQpKSB1bmlvbiBzb2NrZXRfc3RhdGUgewogIHN0cnVjdCB7CiAgICB1aW50MTZfdCBmZDsKICAgIHVuc2lnbmVkIGVycm9yIDogMTI7CiAgICB1bnNpZ25lZCBzeXNjYWxsIDogNDsKICAgIGludDMyX3QgcmV0OwogIH07CiAgdWludDY0X3QgdTY0OwogIHZvaWQqIHB0cjsKfTsKCnR5cGVkZWYgdW5pb24gc29ja2V0X3N0YXRlIFNvY2tldDsKCmV4dGVybiB0aHJlYWRfbG9jYWwgVklTSUJMRSBKU0NsYXNzSUQganNfc29ja2FkZHJfY2xhc3NfaWQsIGpzX3NvY2tldF9jbGFzc19pZDsKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU1ZhbHVlIHNvY2thZGRyX3Byb3RvLCBzb2NrYWRkcl9jdG9yLCBzb2NrZXRfcHJvdG8sIHNvY2tldF9jdG9yOwoKZW51bSBTb2NrZXRDYWxscyB7CiAgU1lTQ0FMTF9TT0NLRVQgPSAxLAogIFNZU0NBTExfR0VUU09DS05BTUUsCiAgU1lTQ0FMTF9HRVRQRUVSTkFNRSwKICBTWVNDQUxMX0ZDTlRMLAogIFNZU0NBTExfQklORCwKICBTWVNDQUxMX0FDQ0VQVCwKICBTWVNDQUxMX0NPTk5FQ1QsCiAgU1lTQ0FMTF9MSVNURU4sCiAgU1lTQ0FMTF9SRUNWLAogIFNZU0NBTExfUkVDVkZST00sCiAgU1lTQ0FMTF9TRU5ELAogIFNZU0NBTExfU0VORFRPLAogIFNZU0NBTExfU0hVVERPV04sCiAgU1lTQ0FMTF9DTE9TRSwKICBTWVNDQUxMX0dFVFNPQ0tPUFQsCiAgU1lTQ0FMTF9TRVRTT0NLT1BUCn07CgojZGVmaW5lIHNvY2tldF9jbG9zZWQoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfQ0xPU0UgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9lb2Yoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfUkVDViAmJiAoc29jaykucmV0ID09IDApCiNkZWZpbmUgc29ja2V0X29wZW4oc29jaykgKChzb2NrKS5mZCA+PSAwICYmICFzb2NrZXRfY2xvc2VkKHNvY2spKQojZGVmaW5lIHNvY2tldF9lcnJvcihzb2NrKSAoKHNvY2spLnJldCA8IDAgJiYgKHNvY2spLmVycm9yKQojZGVmaW5lIHNvY2tldF9zeXNjYWxsKHNvY2spIHNvY2tldF9zeXNjYWxsc1soc29jaykuc3lzY2FsbF0KCnN0YXRpYyBpbmxpbmUgaW50CnNvY2thZGRyX3BvcnQoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIG50b2hzKHNhLT5zYWkuc2luX3BvcnQpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIG50b2hzKHNhLT5zYWk2LnNpbjZfcG9ydCk7CiAgfQogIHJldHVybiAtMTsKfQoKc3RhdGljIGlubGluZSB2b2lkKgpzb2NrYWRkcl9hZGRyKGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiAmc2EtPnNhaS5zaW5fYWRkcjsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiAmc2EtPnNhaTYuc2luNl9hZGRyOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzb2NrbGVuX3QKc29ja2FkZHJfYWRkcmxlbihjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHNhLT5zYWkuc2luX2FkZHIpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzYS0+c2FpNi5zaW42X2FkZHIpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc29ja2FkZHJfc2l6ZShjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbik7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbjYpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBTb2NrQWRkcioKanNfc29ja2FkZHJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja0FkZHIqCmpzX3NvY2thZGRyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja2V0CmpzX3NvY2tldF9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tldApqc19zb2NrZXRfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgojZW5kaWYgLyogZGVmaW5lZChRVUlDS0pTX1NPQ0tFVFNfSCkgICAgICAgICAqLwoAAAAAAAAAAL4KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADYAQAAAAAAAN4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC+CgAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSA8c3lzL3NvY2tldC5oPgojaW5jbHVkZSA8bmV0aW5ldC9pbi5oPgojaW5jbHVkZSA8cXVpY2tqcy5oPgoKI2luY2x1ZGUgInV0aWxzLmgiCgp0eXBlZGVmIHVuaW9uIHsKICB1aW50MTZfdCBmYW1pbHk7CiAgc3RydWN0IHNvY2thZGRyIHM7CiAgc3RydWN0IHNvY2thZGRyX2luIHNhaTsKICBzdHJ1Y3Qgc29ja2FkZHJfaW42IHNhaTY7Cn0gU29ja0FkZHI7CgpfX2F0dHJpYnV0ZV9fKChwYWNrZWQpKSB1bmlvbiBzb2NrZXRfc3RhdGUgewogIHN0cnVjdCB7CiAgICB1aW50MTZfdCBmZDsKICAgIHVuc2lnbmVkIGVycm9yIDogMTI7CiAgICB1bnNpZ25lZCBzeXNjYWxsIDogNDsKICAgIGludDMyX3QgcmV0OwogIH07CiAgdWludDY0X3QgdTY0OwogIHZvaWQqIHB0cjsKfTsKCnR5cGVkZWYgdW5pb24gc29ja2V0X3N0YXRlIFNvY2tldDsKCmV4dGVybiB0aHJlYWRfbG9jYWwgVklTSUJMRSBKU0NsYXNzSUQganNfc29ja2FkZHJfY2xhc3NfaWQsIGpzX3NvY2tldF9jbGFzc19pZDsKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU1ZhbHVlIHNvY2thZGRyX3Byb3RvLCBzb2NrYWRkcl9jdG9yLCBzb2NrZXRfcHJvdG8sIHNvY2tldF9jdG9yOwoKZW51bSBTb2NrZXRDYWxscyB7CiAgU1lTQ0FMTF9TT0NLRVQgPSAxLAogIFNZU0NBTExfR0VUU09DS05BTUUsCiAgU1lTQ0FMTF9HRVRQRUVSTkFNRSwKICBTWVNDQUxMX0ZDTlRMLAogIFNZU0NBTExfQklORCwKICBTWVNDQUxMX0FDQ0VQVCwKICBTWVNDQUxMX0NPTk5FQ1QsCiAgU1lTQ0FMTF9MSVNURU4sCiAgU1lTQ0FMTF9SRUNWLAogIFNZU0NBTExfUkVDVkZST00sCiAgU1lTQ0FMTF9TRU5ELAogIFNZU0NBTExfU0VORFRPLAogIFNZU0NBTExfU0hVVERPV04sCiAgU1lTQ0FMTF9DTE9TRSwKICBTWVNDQUxMX0dFVFNPQ0tPUFQsCiAgU1lTQ0FMTF9TRVRTT0NLT1BUCn07CgojZGVmaW5lIHNvY2tldF9jbG9zZWQoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfQ0xPU0UgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9lb2Yoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfUkVDViAmJiAoc29jaykucmV0ID09IDApCiNkZWZpbmUgc29ja2V0X29wZW4oc29jaykgKChzb2NrKS5mZCA+PSAwICYmICFzb2NrZXRfY2xvc2VkKHNvY2spKQojZGVmaW5lIHNvY2tldF9lcnJvcihzb2NrKSAoKHNvY2spLnJldCA8IDAgJiYgKHNvY2spLmVycm9yKQojZGVmaW5lIHNvY2tldF9zeXNjYWxsKHNvY2spIHNvY2tldF9zeXNjYWxsc1soc29jaykuc3lzY2FsbF0KCnN0YXRpYyBpbmxpbmUgaW50CnNvY2thZGRyX3BvcnQoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIG50b2hzKHNhLT5zYWkuc2luX3BvcnQpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIG50b2hzKHNhLT5zYWk2LnNpbjZfcG9ydCk7CiAgfQogIHJldHVybiAtMTsKfQoKc3RhdGljIGlubGluZSB2b2lkKgpzb2NrYWRkcl9hZGRyKGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiAmc2EtPnNhaS5zaW5fYWRkcjsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiAmc2EtPnNhaTYuc2luNl9hZGRyOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzb2NrbGVuX3QKc29ja2FkZHJfYWRkcmxlbihjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHNhLT5zYWkuc2luX2FkZHIpOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzYS0+c2FpNi5zaW42X2FkZHIpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc29ja2FkZHJfc2l6ZShjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbik7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gc2l6ZW9mKHN0cnVjdCBzb2NrYWRkcl9pbjYpOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBTb2NrQWRkcioKanNfc29ja2FkZHJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja0FkZHIqCmpzX3NvY2thZGRyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrYWRkcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja2V0CmpzX3NvY2tldF9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tldApqc19zb2NrZXRfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIFNvY2tldCBzb2NrOwogIHNvY2sucHRyID0gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19zb2NrZXRfY2xhc3NfaWQpOwogIHJldHVybiBzb2NrOwp9CgojZW5kaWYgLyogZGVmaW5lZChRVUlDS0pTX1NPQ0tFVFNfSCkgICAgICAgICAqLwoAAAAAAAAAAL4KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbAgAAAAAAAMwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "¬£="
					},
					"AwAAAJQEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACVBAAAAAAAAAQAAAA+PSAwlQQAAAAAAACWBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUBAAAAAAAAJgEAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					2,
					"left_delete",
					null,
					"AgAAAJUEAAAAAAAAlQQAAAAAAAABAAAAPZQEAAAAAAAAlAQAAAAAAAACAAAAwqM",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBAAAAAAAAJYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "!="
					},
					"AgAAAJQEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACWBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUBAAAAAAAAJQEAAAAAAAAAAAAAAAA8L8"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " UINT156"
					},
					"CAAAAJYEAAAAAAAAlwQAAAAAAAAAAAAAlwQAAAAAAACYBAAAAAAAAAAAAACYBAAAAAAAAJkEAAAAAAAAAAAAAJkEAAAAAAAAmgQAAAAAAAAAAAAAmgQAAAAAAACbBAAAAAAAAAAAAACbBAAAAAAAAJwEAAAAAAAAAAAAAJwEAAAAAAAAnQQAAAAAAAAAAAAAnQQAAAAAAACeBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACWBAAAAAAAAJYEAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					2,
					"left_delete",
					null,
					"AgAAAJ0EAAAAAAAAnQQAAAAAAAABAAAANpwEAAAAAAAAnAQAAAAAAAABAAAANQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACeBAAAAAAAAJ4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "6_MAX"
					},
					"BQAAAJwEAAAAAAAAnQQAAAAAAAAAAAAAnQQAAAAAAACeBAAAAAAAAAAAAACeBAAAAAAAAJ8EAAAAAAAAAAAAAJ8EAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAAChBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcBAAAAAAAAJwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAADwEAAAAAAAAPQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8BAAAAAAAADwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"cut",
					null,
					"AQAAAD0EAAAAAAAAPQQAAAAAAAAfAAAAKHNvY2spLnN5c2NhbGwgPT0gU1lTQ0FMTF9SRUNWIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9BAAAAAAAAFwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"paste",
					null,
					"AQAAAD0EAAAAAAAAXAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA9BAAAAAAAAD0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAAFwEAAAAAAAAXQQAAAAAAAAAAAAAXQQAAAAAAABeBAAAAAAAAAAAAABeBAAAAAAAAF8EAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABcBAAAAAAAAFwEAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"paste",
					null,
					"AQAAAF8EAAAAAAAAfgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfBAAAAAAAAF8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAH4EAAAAAAAAfwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB+BAAAAAAAAH4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					2,
					"left_delete",
					null,
					"AgAAAH4EAAAAAAAAfgQAAAAAAAABAAAAKX0EAAAAAAAAfQQAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/BAAAAAAAAH8EAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "FROM)"
					},
					"BQAAAH0EAAAAAAAAfgQAAAAAAAAAAAAAfgQAAAAAAAB/BAAAAAAAAAAAAAB/BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAgQQAAAAAAAAAAAAAgQQAAAAAAACCBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB9BAAAAAAAAH0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIIEAAAAAAAAgwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCBAAAAAAAAIIEAAAAAAAAAAAAAAAA8L8"
				],
				[
					154,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADvCgAAI2lmbmRlZiBRVUlDS0pTX1NPQ0tFVFNfSAojZGVmaW5lIFFVSUNLSlNfU09DS0VUU19ICgojaW5jbHVkZSA8c3lzL3NvY2tldC5oPgojaW5jbHVkZSA8bmV0aW5ldC9pbi5oPgojaW5jbHVkZSA8cXVpY2tqcy5oPgoKI2luY2x1ZGUgInV0aWxzLmgiCgp0eXBlZGVmIHVuaW9uIHsKICB1aW50MTZfdCBmYW1pbHk7CiAgc3RydWN0IHNvY2thZGRyIHM7CiAgc3RydWN0IHNvY2thZGRyX2luIHNhaTsKICBzdHJ1Y3Qgc29ja2FkZHJfaW42IHNhaTY7Cn0gU29ja0FkZHI7CgpfX2F0dHJpYnV0ZV9fKChwYWNrZWQpKSB1bmlvbiBzb2NrZXRfc3RhdGUgewogIHN0cnVjdCB7CiAgICB1aW50MTZfdCBmZDsKICAgIHVuc2lnbmVkIGVycm9yIDogMTI7CiAgICB1bnNpZ25lZCBzeXNjYWxsIDogNDsKICAgIGludDMyX3QgcmV0OwogIH07CiAgdWludDY0X3QgdTY0OwogIHZvaWQqIHB0cjsKfTsKCnR5cGVkZWYgdW5pb24gc29ja2V0X3N0YXRlIFNvY2tldDsKCmV4dGVybiB0aHJlYWRfbG9jYWwgVklTSUJMRSBKU0NsYXNzSUQganNfc29ja2FkZHJfY2xhc3NfaWQsIGpzX3NvY2tldF9jbGFzc19pZDsKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU1ZhbHVlIHNvY2thZGRyX3Byb3RvLCBzb2NrYWRkcl9jdG9yLCBzb2NrZXRfcHJvdG8sIHNvY2tldF9jdG9yOwoKZW51bSBTb2NrZXRDYWxscyB7CiAgU1lTQ0FMTF9TT0NLRVQgPSAxLAogIFNZU0NBTExfR0VUU09DS05BTUUsCiAgU1lTQ0FMTF9HRVRQRUVSTkFNRSwKICBTWVNDQUxMX0ZDTlRMLAogIFNZU0NBTExfQklORCwKICBTWVNDQUxMX0FDQ0VQVCwKICBTWVNDQUxMX0NPTk5FQ1QsCiAgU1lTQ0FMTF9MSVNURU4sCiAgU1lTQ0FMTF9SRUNWLAogIFNZU0NBTExfUkVDVkZST00sCiAgU1lTQ0FMTF9TRU5ELAogIFNZU0NBTExfU0VORFRPLAogIFNZU0NBTExfU0hVVERPV04sCiAgU1lTQ0FMTF9DTE9TRSwKICBTWVNDQUxMX0dFVFNPQ0tPUFQsCiAgU1lTQ0FMTF9TRVRTT0NLT1BUCn07CgojZGVmaW5lIHNvY2tldF9jbG9zZWQoc29jaykgKChzb2NrKS5zeXNjYWxsID09IFNZU0NBTExfQ0xPU0UgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9lb2Yoc29jaykgKCgoc29jaykuc3lzY2FsbCA9PSBTWVNDQUxMX1JFQ1YgIHx8KHNvY2spLnN5c2NhbGwgPT0gU1lTQ0FMTF9SRUNWRlJPTSkgJiYgKHNvY2spLnJldCA9PSAwKQojZGVmaW5lIHNvY2tldF9vcGVuKHNvY2spICgoc29jaykuZmQgIT0gVUlOVDE2X01BWCAmJiAhc29ja2V0X2Nsb3NlZChzb2NrKSkKI2RlZmluZSBzb2NrZXRfZXJyb3Ioc29jaykgKChzb2NrKS5yZXQgPCAwICYmIChzb2NrKS5lcnJvcikKI2RlZmluZSBzb2NrZXRfc3lzY2FsbChzb2NrKSBzb2NrZXRfc3lzY2FsbHNbKHNvY2spLnN5c2NhbGxdCgpzdGF0aWMgaW5saW5lIGludApzb2NrYWRkcl9wb3J0KGNvbnN0IFNvY2tBZGRyKiBzYSkgewogIHN3aXRjaChzYS0+ZmFtaWx5KSB7CiAgICBjYXNlIEFGX0lORVQ6IHJldHVybiBudG9ocyhzYS0+c2FpLnNpbl9wb3J0KTsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiBudG9ocyhzYS0+c2FpNi5zaW42X3BvcnQpOwogIH0KICByZXR1cm4gLTE7Cn0KCnN0YXRpYyBpbmxpbmUgdm9pZCoKc29ja2FkZHJfYWRkcihjb25zdCBTb2NrQWRkciogc2EpIHsKICBzd2l0Y2goc2EtPmZhbWlseSkgewogICAgY2FzZSBBRl9JTkVUOiByZXR1cm4gJnNhLT5zYWkuc2luX2FkZHI7CiAgICBjYXNlIEFGX0lORVQ2OiByZXR1cm4gJnNhLT5zYWk2LnNpbjZfYWRkcjsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgc29ja2xlbl90CnNvY2thZGRyX2FkZHJsZW4oY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIHNpemVvZihzYS0+c2FpLnNpbl9hZGRyKTsKICAgIGNhc2UgQUZfSU5FVDY6IHJldHVybiBzaXplb2Yoc2EtPnNhaTYuc2luNl9hZGRyKTsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnNvY2thZGRyX3NpemUoY29uc3QgU29ja0FkZHIqIHNhKSB7CiAgc3dpdGNoKHNhLT5mYW1pbHkpIHsKICAgIGNhc2UgQUZfSU5FVDogcmV0dXJuIHNpemVvZihzdHJ1Y3Qgc29ja2FkZHJfaW4pOwogICAgY2FzZSBBRl9JTkVUNjogcmV0dXJuIHNpemVvZihzdHJ1Y3Qgc29ja2FkZHJfaW42KTsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgU29ja0FkZHIqCmpzX3NvY2thZGRyX2RhdGEoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfc29ja2FkZHJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tBZGRyKgpqc19zb2NrYWRkcl9kYXRhMihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfc29ja2FkZHJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFNvY2tldApqc19zb2NrZXRfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBTb2NrZXQgc29jazsKICBzb2NrLnB0ciA9IEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfc29ja2V0X2NsYXNzX2lkKTsKICByZXR1cm4gc29jazsKfQoKc3RhdGljIGlubGluZSBTb2NrZXQKanNfc29ja2V0X2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBTb2NrZXQgc29jazsKICBzb2NrLnB0ciA9IEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfc29ja2V0X2NsYXNzX2lkKTsKICByZXR1cm4gc29jazsKfQoKI2VuZGlmIC8qIGRlZmluZWQoUVVJQ0tKU19TT0NLRVRTX0gpICAgICAgICAgKi8KAAAAAAAAAADvCgAAAAAAAAAAAAAAAAAAAAAAAO8KAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqBAAAAAAAADQEAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "lib/socklen_t.js",
			"settings":
			{
				"buffer_size": 453,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-inspect.c",
			"settings":
			{
				"buffer_size": 34252,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					4,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "utils.h",
			"settings":
			{
				"buffer_size": 31291,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "buffer-utils.h",
			"settings":
			{
				"buffer_size": 7323,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtFAAAAAAAAPwUAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtFAAAAAAAAPwUAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtFAAAAAAAAPwUAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtFAAAAAAAAPwUAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "buffer-utils.c",
			"settings":
			{
				"buffer_size": 11830,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					119,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAFkkAAAAAAAAWiQAAAAAAAAAAAAAWiQAAAAAAABaJAAAAAAAAMwCAAAKICBpZihqc19pc190eXBlZGFycmF5KHZhbHVlKSB8fCBqc19pc19kYXRhdmlldyhjdHgsIHZhbHVlKSkgewogICAgSlNWYWx1ZSBhcnJheWJ1ZiwgYnl0ZW9mZnMsIGJ5dGVsZW47CiAgICBhcnJheWJ1ZiA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgdmFsdWUsICJidWZmZXIiKTsKICAgIGJ5dGVsZW4gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHZhbHVlLCAiYnl0ZUxlbmd0aCIpOwogICAgaWYoSlNfSXNOdW1iZXIoYnl0ZWxlbikpCiAgICAgIEpTX1RvSW50NjQoY3R4LCAmbGVuZ3RoLCBieXRlbGVuKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGJ5dGVsZW4pOwogICAgYnl0ZW9mZnMgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHZhbHVlLCAiYnl0ZU9mZnNldCIpOwogICAgaWYoSlNfSXNOdW1iZXIoYnl0ZW9mZnMpKQogICAgICBKU19Ub0ludDY0KGN0eCwgJm9mZnNldCwgYnl0ZW9mZnMpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgYnl0ZW9mZnMpOwogICAgdmFsdWUgPSBhcnJheWJ1ZjsKICB9CgogIGlmKGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfQVJSQVlfQlVGRkVSKSB8fCBqc19pc19hcnJheWJ1ZmZlcihjdHgsIHZhbHVlKSkgewogICAgcmV0LnZhbHVlID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgICByZXQuZGF0YSA9IEpTX0dldEFycmF5QnVmZmVyKGN0eCwgJnJldC5zaXplLCByZXQudmFsdWUpOwogIH0gZWxzZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABZJAAAAAAAACUnAAAAAAAAAAAAAAAA8L8"
				],
				[
					120,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFokAAAAAAAAWyQAAAAAAAAAAAAAWyQAAAAAAABcJAAAAAAAAAAAAABcJAAAAAAAAF0kAAAAAAAAAAAAAF0kAAAAAAAAXiQAAAAAAAAAAAAAWyQAAAAAAABbJAAAAAAAAAEAAAAg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABaJAAAAAAAAFokAAAAAAAAAAAAAAAA8L8"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"BAAAABslAAAAAAAAHCUAAAAAAAAAAAAAHCUAAAAAAAAcJQAAAAAAAFkAAAByZXQudmFsdWUgPSBKU19FWENFUFRJT047CiAgICAvLyBKU19UaHJvd1R5cGVFcnJvcihjdHgsICJJbnZhbGlkIHR5cGUgZm9yIGlucHV0IGJ1ZmZlciIpOxwlAAAAAAAAHSUAAAAAAAAAAAAAHSUAAAAAAAAeJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbJQAAAAAAAHQlAAAAAAAAAAAAAAAA8L8"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAB4lAAAAAAAAHyUAAAAAAAAAAAAAHyUAAAAAAAAgJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAeJQAAAAAAAB4lAAAAAAAAAAAAAAAA8L8"
				],
				[
					125,
					1,
					"insert",
					{
						"characters": " js_ihn"
					},
					"BwAAACAlAAAAAAAAISUAAAAAAAAAAAAAISUAAAAAAAAiJQAAAAAAAAAAAAAiJQAAAAAAACMlAAAAAAAAAAAAACMlAAAAAAAAJCUAAAAAAAAAAAAAJCUAAAAAAAAlJQAAAAAAAAAAAAAlJQAAAAAAACYlAAAAAAAAAAAAACYlAAAAAAAAJyUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAgJQAAAAAAACAlAAAAAAAAAAAAAAAA8L8"
				],
				[
					126,
					2,
					"left_delete",
					null,
					"AgAAACYlAAAAAAAAJiUAAAAAAAABAAAAbiUlAAAAAAAAJSUAAAAAAAABAAAAaA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnJQAAAAAAACclAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "nput_buffer"
					},
					"CwAAACUlAAAAAAAAJiUAAAAAAAAAAAAAJiUAAAAAAAAnJQAAAAAAAAAAAAAnJQAAAAAAACglAAAAAAAAAAAAACglAAAAAAAAKSUAAAAAAAAAAAAAKSUAAAAAAAAqJQAAAAAAAAAAAAAqJQAAAAAAACslAAAAAAAAAAAAACslAAAAAAAALCUAAAAAAAAAAAAALCUAAAAAAAAtJQAAAAAAAAAAAAAtJQAAAAAAAC4lAAAAAAAAAAAAAC4lAAAAAAAALyUAAAAAAAAAAAAALyUAAAAAAAAwJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAlJQAAAAAAACUlAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADAlAAAAAAAAMiUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAwJQAAAAAAADAlAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAADElAAAAAAAAMiUAAAAAAAAAAAAAMiUAAAAAAAAzJQAAAAAAAAAAAAAzJQAAAAAAADQlAAAAAAAAAAAAADQlAAAAAAAANSUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxJQAAAAAAADElAAAAAAAAAAAAAAAA8L8"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": " value"
					},
					"BgAAADUlAAAAAAAANiUAAAAAAAAAAAAANiUAAAAAAAA3JQAAAAAAAAAAAAA3JQAAAAAAADglAAAAAAAAAAAAADglAAAAAAAAOSUAAAAAAAAAAAAAOSUAAAAAAAA6JQAAAAAAAAAAAAA6JQAAAAAAADslAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1JQAAAAAAADUlAAAAAAAAAAAAAAAA8L8"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADwlAAAAAAAAPSUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8JQAAAAAAADwlAAAAAAAAAAAAAAAA8L8"
				],
				[
					139,
					1,
					"left_delete",
					null,
					"AQAAAFokAAAAAAAAWiQAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABbJAAAAAAAAFskAAAAAAAAAAAAAAAA8L8"
				],
				[
					173,
					1,
					"cut",
					null,
					"AQAAAEElAAAAAAAAQSUAAAAAAADxAAAACiAgaWYob2Zmc2V0IDwgMCkKICAgIHJldC5yYW5nZS5vZmZzZXQgPSByZXQuc2l6ZSArIG9mZnNldCAlIHJldC5zaXplOwogIGVsc2UgaWYob2Zmc2V0ID4gcmV0LnNpemUpCiAgICByZXQucmFuZ2Uub2Zmc2V0ID0gcmV0LnNpemU7CiAgZWxzZQogICAgcmV0LnJhbmdlLm9mZnNldCA9IG9mZnNldDsKCiAgaWYobGVuZ3RoID49IDAgJiYgbGVuZ3RoIDwgcmV0LnNpemUpCiAgICByZXQucmFuZ2UubGVuZ3RoID0gbGVuZ3RoOw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBJQAAAAAAADImAAAAAAAAAAAAAAAA8L8"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAolAAAAAAAACyUAAAAAAAAAAAAACyUAAAAAAAAPJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKJQAAAAAAAAolAAAAAAAAAAAAAAAA8L8"
				],
				[
					181,
					1,
					"paste",
					null,
					"AQAAAA8lAAAAAAAAACYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPJQAAAAAAAA8lAAAAAAAAAAAAAAAA8L8"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BQAAAAAmAAAAAAAAASYAAAAAAAAAAAAAASYAAAAAAAAFJgAAAAAAAAAAAAALJQAAAAAAAAslAAAAAAAABAAAACAgICD9JQAAAAAAAP0lAAAAAAAABAAAACAgICD9JQAAAAAAAP8lAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAA8L8"
				],
				[
					184,
					1,
					"indent",
					null,
					"CQAAAAwlAAAAAAAADiUAAAAAAAAAAAAAHyUAAAAAAAAhJQAAAAAAAAAAAABWJQAAAAAAAFglAAAAAAAAAAAAAHUlAAAAAAAAdyUAAAAAAAAAAAAAmCUAAAAAAACaJQAAAAAAAAAAAAChJQAAAAAAAKMlAAAAAAAAAAAAAMMlAAAAAAAAxSUAAAAAAAAAAAAA7CUAAAAAAADuJQAAAAAAAAAAAAANJgAAAAAAAA8mAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/JQAAAAAAAAslAAAAAAAAAAAAAAAAMkA"
				],
				[
					271,
					2,
					"left_delete",
					null,
					"AgAAAAslAAAAAAAACyUAAAAAAAAGAQAACiAgICBpZihvZmZzZXQgPCAwKQogICAgICByZXQucmFuZ2Uub2Zmc2V0ID0gcmV0LnNpemUgKyBvZmZzZXQgJSByZXQuc2l6ZTsKICAgIGVsc2UgaWYob2Zmc2V0ID4gcmV0LnNpemUpCiAgICAgIHJldC5yYW5nZS5vZmZzZXQgPSByZXQuc2l6ZTsKICAgIGVsc2UKICAgICAgcmV0LnJhbmdlLm9mZnNldCA9IG9mZnNldDsKCiAgICBpZihsZW5ndGggPj0gMCAmJiBsZW5ndGggPCByZXQuc2l6ZSkKICAgICAgcmV0LnJhbmdlLmxlbmd0aCA9IGxlbmd0aDsKICAgIAolAAAAAAAACiUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALJQAAAAAAABEmAAAAAAAAAAAAAAAA8L8"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAolAAAAAAAACyUAAAAAAAAAAAAACyUAAAAAAAAPJQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKJQAAAAAAAAolAAAAAAAAAAAAAAAA8L8"
				],
				[
					273,
					3,
					"left_delete",
					null,
					"AwAAAA0lAAAAAAAADSUAAAAAAAACAAAAICALJQAAAAAAAAslAAAAAAAAAgAAACAgCiUAAAAAAAAKJQAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPJQAAAAAAAA8lAAAAAAAAAAAAAAAA8L8"
				],
				[
					277,
					1,
					"left_delete",
					null,
					"AQAAAEAlAAAAAAAAQCUAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABBJQAAAAAAAEElAAAAAAAAAAAAAACgd0A"
				],
				[
					289,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPHgAAAAAAAJ4eAAAAAAAAAAAAAAAA8L8"
				],
				[
					290,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPHgAAAAAAAJ4eAAAAAAAAAAAAAAAA8L8"
				],
				[
					291,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA2LgAAI2luY2x1ZGUgImNoYXItdXRpbHMuaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSAidXRpbHMuaCIKCnNpemVfdAphbnNpX2xlbmd0aChjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4pIHsKICBzaXplX3QgaSwgbiA9IDAsIHA7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOykgewogICAgaWYoc3RyW2ldID09IDB4MWIgJiYgKHAgPSBhbnNpX3NraXAoJnN0cltpXSwgbGVuIC0gaSkpID4gMCkgewogICAgICBpICs9IHA7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgbisrOwogICAgaSsrOwogIH0KICByZXR1cm4gbjsKfQoKc2l6ZV90CmFuc2lfc2tpcChjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4pIHsKICBzaXplX3QgcG9zID0gMDsKICBpZihzdHJbcG9zXSA9PSAweDFiKSB7CiAgICBpZigrK3BvcyA8IGxlbiAmJiBzdHJbcG9zXSA9PSAnWycpIHsKICAgICAgd2hpbGUoKytwb3MgPCBsZW4pCiAgICAgICAgaWYoaXNfYWxwaGFudW1lcmljX2NoYXIoc3RyW3Bvc10pKQogICAgICAgICAgYnJlYWs7CiAgICAgIGlmKCsrcG9zIDwgbGVuICYmIHN0cltwb3NdID09ICd+JykKICAgICAgICArK3BvczsKICAgICAgcmV0dXJuIHBvczsKICAgIH0KICB9CiAgcmV0dXJuIDA7Cn0KCnNpemVfdAphbnNpX3RydW5jYXRlKGNvbnN0IGNoYXIqIHN0ciwgc2l6ZV90IGxlbiwgc2l6ZV90IGxpbWl0KSB7CiAgc2l6ZV90IGksIG4gPSAwLCBwOwogIGZvcihpID0gMDsgaSA8IGxlbjspIHsKICAgIGlmKChwID0gYW5zaV9za2lwKCZzdHJbaV0sIGxlbiAtIGkpKSA+IDApIHsKICAgICAgaSArPSBwOwogICAgICBjb250aW51ZTsKICAgIH0KICAgIG4gKz0gaXNfZXNjYXBlX2NoYXIoc3RyW2ldKSA/IDIgOiAxOwoKICAgIGkrKzsKICAgIGlmKG4gPiBsaW1pdCkKICAgICAgYnJlYWs7CiAgfQogIHJldHVybiBpOwp9CgppbnQ2NF90CmFycmF5X3NlYXJjaCh2b2lkKiBhLCBzaXplX3QgbSwgc2l6ZV90IGVsc3osIHZvaWQqIG5lZWRsZSkgewogIGNoYXIqIHB0ciA9IGE7CiAgaW50NjRfdCBuLCByZXQ7CiAgbiA9IG0gLyBlbHN6OwogIGZvcihyZXQgPSAwOyByZXQgPCBuOyByZXQrKykgewogICAgaWYoIW1lbWNtcChwdHIsIG5lZWRsZSwgZWxzeikpCiAgICAgIHJldHVybiByZXQ7CgogICAgcHRyICs9IGVsc3o7CiAgfQogIHJldHVybiAtMTsKfQpjaGFyKgpzdHJfZXNjYXBlKGNvbnN0IGNoYXIqIHMpIHsKICBEeW5CdWYgZGJ1ZjsKICBkYnVmX2luaXQyKCZkYnVmLCAwLCAwKTsKICBkYnVmX3B1dF9lc2NhcGVkKCZkYnVmLCBzLCBzdHJsZW4ocykpOwogIGRidWZfMCgmZGJ1Zik7CiAgcmV0dXJuIChjaGFyKilkYnVmLmJ1ZjsKfQoKY2hhcioKYnl0ZV9lc2NhcGUoY29uc3QgY2hhciogcywgc2l6ZV90IG4pIHsKICBEeW5CdWYgZGJ1ZjsKICBkYnVmX2luaXQyKCZkYnVmLCAwLCAwKTsKICBkYnVmX3B1dF9lc2NhcGVkKCZkYnVmLCBzLCBuKTsKICBkYnVmXzAoJmRidWYpOwogIHJldHVybiAoY2hhciopZGJ1Zi5idWY7Cn0KCnNpemVfdApieXRlX2ZpbmRiKGNvbnN0IHZvaWQqIGhheXN0YWNrLCBzaXplX3QgaGxlbiwgY29uc3Qgdm9pZCogd2hhdCwgc2l6ZV90IHdsZW4pIHsKICBzaXplX3QgaSwgbGFzdDsKICBjb25zdCBjaGFyKiBzID0gKGNvbnN0IGNoYXIqKWhheXN0YWNrOwogIGlmKGhsZW4gPCB3bGVuKQogICAgcmV0dXJuIGhsZW47CiAgbGFzdCA9IGhsZW4gLSB3bGVuOwogIGZvcihpID0gMDsgaSA8PSBsYXN0OyBpKyspIHsKICAgIGlmKGJ5dGVfZXF1YWwocywgd2xlbiwgd2hhdCkpCiAgICAgIHJldHVybiBpOwogICAgcysrOwogIH0KICByZXR1cm4gaGxlbjsKfQoKc2l6ZV90CmJ5dGVfZmluZHMoY29uc3Qgdm9pZCogaGF5c3RhY2ssIHNpemVfdCBobGVuLCBjb25zdCBjaGFyKiB3aGF0KSB7CiAgcmV0dXJuIGJ5dGVfZmluZGIoaGF5c3RhY2ssIGhsZW4sIHdoYXQsIHN0cmxlbih3aGF0KSk7Cn0KCnNpemVfdApieXRlX2VxdWFsKGNvbnN0IHZvaWQqIHMsIHNpemVfdCBuLCBjb25zdCB2b2lkKiB0KSB7CiAgcmV0dXJuIG1lbWNtcChzLCB0LCBuKSA9PSAwOwp9CgpjaGFyKgpkYnVmX2F0X24oY29uc3QgRHluQnVmKiBkYiwgc2l6ZV90IGksIHNpemVfdCogbiwgY2hhciBzZXApIHsKICBzaXplX3QgcCwgbCA9IDA7CiAgZm9yKHAgPSAwOyBwIDwgZGItPnNpemU7ICsrcCkgewogICAgaWYobCA9PSBpKSB7CiAgICAgICpuID0gYnl0ZV9jaHIoKGNvbnN0IGNoYXIqKSZkYi0+YnVmW3BdLCBkYi0+c2l6ZSAtIHAsIHNlcCk7CiAgICAgIHJldHVybiAoY2hhciopJmRiLT5idWZbcF07CiAgICB9CiAgICBpZihkYi0+YnVmW3BdID09IHNlcCkKICAgICAgKytsOwogIH0KICAqbiA9IDA7CiAgcmV0dXJuIDA7Cn0KCmNvbnN0IGNoYXIqCmRidWZfbGFzdF9saW5lKER5bkJ1ZiogZGIsIHNpemVfdCogbGVuKSB7CiAgc2l6ZV90IGk7CgogIGlmKChpID0gYnl0ZV9yY2hyKGRiLT5idWYsIGRiLT5zaXplLCAnXG4nKSkgPCBkYi0+c2l6ZSkKICAgIGkrKzsKICBlbHNlCiAgICBpID0gMDsKCiAgaWYobGVuKQogICAgKmxlbiA9IGRiLT5zaXplIC0gaTsKCiAgcmV0dXJuIChjb25zdCBjaGFyKikmZGItPmJ1ZltpXTsKfQoKaW50CmRidWZfcHJlcGVuZChEeW5CdWYqIHMsIGNvbnN0IHVpbnQ4X3QqIGRhdGEsIHNpemVfdCBsZW4pIHsKICBpbnQgcmV0OwogIGlmKCEocmV0ID0gZGJ1Zl9yZXNlcnZlX3N0YXJ0KHMsIGxlbikpKQogICAgbWVtY3B5KHMtPmJ1ZiwgZGF0YSwgbGVuKTsKCiAgcmV0dXJuIDA7Cn0KCnZvaWQKZGJ1Zl9wdXRfY29sb3JzdHIoRHluQnVmKiBkYiwgY29uc3QgY2hhciogc3RyLCBjb25zdCBjaGFyKiBjb2xvciwgaW50IHdpdGhfY29sb3IpIHsKICBpZih3aXRoX2NvbG9yKQogICAgZGJ1Zl9wdXRzdHIoZGIsIGNvbG9yKTsKCiAgZGJ1Zl9wdXRzdHIoZGIsIHN0cik7CiAgaWYod2l0aF9jb2xvcikKICAgIGRidWZfcHV0c3RyKGRiLCBDT0xPUl9OT05FKTsKfQoKdm9pZApkYnVmX3B1dF9lc2NhcGVkX3ByZWQoRHluQnVmKiBkYiwgY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuLCBpbnQgKCpwcmVkKShpbnQpKSB7CiAgc2l6ZV90IGkgPSAwLCBqOwogIGNoYXIgYzsKICB3aGlsZShpIDwgbGVuKSB7CiAgICBpZigoaiA9IHByZWRpY2F0ZV9maW5kKCZzdHJbaV0sIGxlbiAtIGksIHByZWQpKSkgewogICAgICBkYnVmX2FwcGVuZChkYiwgKGNvbnN0IHVpbnQ4X3QqKSZzdHJbaV0sIGopOwogICAgICBpICs9IGo7CiAgICB9CiAgICBpZihpID09IGxlbikKICAgICAgYnJlYWs7CiAgICBkYnVmX3B1dGMoZGIsICdcXCcpOwoKICAgIGlmKHN0cltpXSA9PSAweDFiKSB7CiAgICAgIGRidWZfYXBwZW5kKGRiLCAoY29uc3QgdWludDhfdCopIngxYiIsIDMpOwogICAgfSBlbHNlIHsKICAgICAgaW50IHIgPSBwcmVkKHN0cltpXSk7CgogICAgICBkYnVmX3B1dGMoZGIsIChyID4gMSAmJiByIDw9IDEyNykgPyByIDogKGMgPSBlc2NhcGVfY2hhcl9sZXR0ZXIoc3RyW2ldKSkgPyBjIDogc3RyW2ldKTsKCiAgICAgIGlmKHIgPT0gJ3UnIHx8IHIgPT0gJ3gnKQogICAgICAgIGRidWZfcHJpbnRmKGRiLCByID09ICd1JyA/ICIlMDR4IiA6ICIlMDJ4Iiwgc3RyW2ldKTsKICAgIH0KICAgIGkrKzsKICB9Cn0KCnZvaWQKZGJ1Zl9wdXRfZXNjYXBlZF90YWJsZShEeW5CdWYqIGRiLCBjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4sIGNvbnN0IGNoYXIgdGFibGVbMjU2XSkgewogIHNpemVfdCBpID0gMCwgajsKICBjaGFyIGM7CiAgd2hpbGUoaSA8IGxlbikgewogICAgaWYoKGogPSBsb29rdXBfZmluZCgmc3RyW2ldLCBsZW4gLSBpLCB0YWJsZSkpKSB7CiAgICAgIGRidWZfYXBwZW5kKGRiLCAoY29uc3QgdWludDhfdCopJnN0cltpXSwgaik7CiAgICAgIGkgKz0gajsKICAgIH0KICAgIGlmKGkgPT0gbGVuKQogICAgICBicmVhazsKICAgIGRidWZfcHV0YyhkYiwgJ1xcJyk7CgogICAgaWYoc3RyW2ldID09IDB4MWIpIHsKICAgICAgZGJ1Zl9hcHBlbmQoZGIsIChjb25zdCB1aW50OF90KikieDFiIiwgMyk7CiAgICB9IGVsc2UgewogICAgICBpbnQgciA9IHRhYmxlWyh1bnNpZ25lZCBjaGFyKXN0cltpXV07CgogICAgICBkYnVmX3B1dGMoZGIsIChyID4gMSAmJiByIDw9IDEyNykgPyByIDogKGMgPSBlc2NhcGVfY2hhcl9sZXR0ZXIoc3RyW2ldKSkgPyBjIDogc3RyW2ldKTsKCiAgICAgIGlmKHIgPT0gJ3UnIHx8IHIgPT0gJ3gnKQogICAgICAgIGRidWZfcHJpbnRmKGRiLCByID09ICd1JyA/ICIlMDR4IiA6ICIlMDJ4Iiwgc3RyW2ldKTsKICAgIH0KICAgIGkrKzsKICB9Cn0KCnZvaWQKZGJ1Zl9wdXRfdW5lc2NhcGVkX3ByZWQoRHluQnVmKiBkYiwgY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuLCBpbnQgKCpwcmVkKShpbnQpKSB7CiAgc2l6ZV90IGkgPSAwLCBqOwogIGNoYXIgYzsKICBpbnQgcjsKICB3aGlsZShpIDwgbGVuKSB7CiAgICBpZigoaiA9IGJ5dGVfY2hyKCZzdHJbaV0sIGxlbiAtIGksICdcXCcpKSkgewogICAgICBkYnVmX2FwcGVuZChkYiwgKGNvbnN0IHVpbnQ4X3QqKSZzdHJbaV0sIGopOwogICAgICBpICs9IGo7CiAgICB9CiAgICBpZihpID09IGxlbikKICAgICAgYnJlYWs7CgogICAgaWYoIShyID0gcHJlZChzdHJbKytpXSkpKQogICAgICBkYnVmX3B1dGMoZGIsICdcXCcpOwoKICAgIGRidWZfcHV0YyhkYiwgKHIgPiAxICYmIHIgPCAyNTYpID8gciA6IHN0cltpXSk7CiAgICBpKys7CiAgfQp9Cgp2b2lkCmRidWZfcHV0X2VzY2FwZWQoRHluQnVmKiBkYiwgY29uc3QgY2hhciogc3RyLCBzaXplX3QgbGVuKSB7CiAgc3RhdGljIGNvbnN0IGNoYXIgdGFiWzI1Nl0gPSB7CiAgICAgICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAweDYyLCAweDc0LCAweDZlLCAweDc2LCAweDY2LCAweDcyLCAneCcsICAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywKICAgICAgJ3gnLCAneCcsICd4JywgJ3gnLCAneCcsICd4JywgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDB4MjcsIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDB4NWMsIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAneCcsIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwKICAgICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsCiAgfTsKCiAgcmV0dXJuIGRidWZfcHV0X2VzY2FwZWRfdGFibGUoZGIsIHN0ciwgbGVuLCB0YWIpOwp9Cgp2b2lkCmRidWZfcHV0X3ZhbHVlKER5bkJ1ZiogZGIsIEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgc2l6ZV90IGxlbjsKICBzdHIgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCAmbGVuLCB2YWx1ZSk7CiAgZGJ1Zl9hcHBlbmQoZGIsIHN0ciwgbGVuKTsKICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwp9CgppbnQKZGJ1Zl9yZXNlcnZlX3N0YXJ0KER5bkJ1Ziogcywgc2l6ZV90IGxlbikgewogIGlmKHVubGlrZWx5KChzLT5zaXplICsgbGVuKSA+IHMtPmFsbG9jYXRlZF9zaXplKSkgewogICAgaWYoZGJ1Zl9yZWFsbG9jKHMsIHMtPnNpemUgKyBsZW4pKQogICAgICByZXR1cm4gLTE7CiAgfQogIGlmKHMtPnNpemUgPiAwKQogICAgbWVtY3B5KHMtPmJ1ZiArIGxlbiwgcy0+YnVmLCBzLT5zaXplKTsKCiAgcy0+c2l6ZSArPSBsZW47CiAgcmV0dXJuIDA7Cn0KCnNpemVfdApkYnVmX3Rva2VuX3BvcChEeW5CdWYqIGRiLCBjaGFyIGRlbGltKSB7CiAgc2l6ZV90IG4sIHAsIGxlbjsKICBsZW4gPSBkYi0+c2l6ZTsKICBmb3IobiA9IGRiLT5zaXplOyBuID4gMDspIHsKICAgIGlmKChwID0gYnl0ZV9yY2hyKGRiLT5idWYsIG4sIGRlbGltKSkgPT0gbikgewogICAgICBkYi0+c2l6ZSA9IDA7CiAgICAgIGJyZWFrOwogICAgfQogICAgaWYocCA+IDAgJiYgZGItPmJ1ZltwIC0gMV0gPT0gJ1xcJykgewogICAgICBuID0gcCAtIDE7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgZGItPnNpemUgPSBwOwogICAgYnJlYWs7CiAgfQogIHJldHVybiBsZW4gLSBkYi0+c2l6ZTsKfQoKc2l6ZV90CmRidWZfdG9rZW5fcHVzaChEeW5CdWYqIGRiLCBjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4sIGNoYXIgZGVsaW0pIHsKICBzaXplX3QgcG9zOwogIGlmKGRiLT5zaXplKQogICAgZGJ1Zl9wdXRjKGRiLCBkZWxpbSk7CgogIHBvcyA9IGRiLT5zaXplOwogIGRidWZfcHV0X2VzY2FwZWRfcHJlZChkYiwgc3RyLCBsZW4sIGlzX2RvdF9jaGFyKTsKICByZXR1cm4gZGItPnNpemUgLSBwb3M7Cn0KCkpTVmFsdWUKZGJ1Zl90b3N0cmluZ19mcmVlKER5bkJ1ZiogcywgSlNDb250ZXh0KiBjdHgpIHsKICBKU1ZhbHVlIHI7CiAgciA9IEpTX05ld1N0cmluZ0xlbihjdHgsIHMtPmJ1ZiA/IChjb25zdCBjaGFyKilzLT5idWYgOiAiIiwgcy0+YnVmID8gcy0+c2l6ZSA6IDApOwogIGRidWZfZnJlZShzKTsKICByZXR1cm4gcjsKfQoKc3NpemVfdApkYnVmX2xvYWQoRHluQnVmKiBzLCBjb25zdCBjaGFyKiBmaWxlbmFtZSkgewogIEZJTEUqIGZwOwogIHNpemVfdCBuYnl0ZXMgPSAwOwogIGlmKChmcCA9IGZvcGVuKGZpbGVuYW1lLCAicmIiKSkpIHsKICAgIGNoYXIgYnVmWzQwOTZdOwogICAgc2l6ZV90IHI7CiAgICB3aGlsZSghZmVvZihmcCkpIHsKICAgICAgaWYoKHIgPSBmcmVhZChidWYsIDEsIHNpemVvZihidWYpLCBmcCkpID09IDApCiAgICAgICAgcmV0dXJuIC0xOwogICAgICBkYnVmX3B1dChzLCAodWludDhfdCBjb25zdCopYnVmLCByKTsKICAgICAgbmJ5dGVzICs9IHI7CiAgICB9CiAgICBmY2xvc2UoZnApOwogIH0KICByZXR1cm4gbmJ5dGVzOwp9CgpJbnB1dEJ1ZmZlcgpqc19pbnB1dF9idWZmZXIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIElucHV0QnVmZmVyIHJldCA9IHswLCAwLCAwLCAmaW5wdXRfYnVmZmVyX2ZyZWVfZGVmYXVsdCwgSlNfVU5ERUZJTkVEfTsKICBpbnQ2NF90IG9mZnNldCA9IDAsIGxlbmd0aCA9IElOVDY0X01BWDsKCiAgb2Zmc2V0X2luaXQoJnJldC5yYW5nZSk7CgogIGlmKGpzX2lzX3R5cGVkYXJyYXkodmFsdWUpIHx8IGpzX2lzX2RhdGF2aWV3KGN0eCwgdmFsdWUpKSB7CiAgICBKU1ZhbHVlIGFycmF5YnVmLCBieXRlb2ZmcywgYnl0ZWxlbjsKICAgIGFycmF5YnVmID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB2YWx1ZSwgImJ1ZmZlciIpOwogICAgYnl0ZWxlbiA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgdmFsdWUsICJieXRlTGVuZ3RoIik7CiAgICBpZihKU19Jc051bWJlcihieXRlbGVuKSkKICAgICAgSlNfVG9JbnQ2NChjdHgsICZsZW5ndGgsIGJ5dGVsZW4pOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgYnl0ZWxlbik7CiAgICBieXRlb2ZmcyA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgdmFsdWUsICJieXRlT2Zmc2V0Iik7CiAgICBpZihKU19Jc051bWJlcihieXRlb2ZmcykpCiAgICAgIEpTX1RvSW50NjQoY3R4LCAmb2Zmc2V0LCBieXRlb2Zmcyk7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBieXRlb2Zmcyk7CiAgICB2YWx1ZSA9IGFycmF5YnVmOwogIH0KCiAgaWYoanNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19BUlJBWV9CVUZGRVIpIHx8IGpzX2lzX2FycmF5YnVmZmVyKGN0eCwgdmFsdWUpKSB7CiAgICByZXQudmFsdWUgPSBKU19EdXBWYWx1ZShjdHgsIHZhbHVlKTsKICAgIHJldC5kYXRhID0gSlNfR2V0QXJyYXlCdWZmZXIoY3R4LCAmcmV0LnNpemUsIHJldC52YWx1ZSk7CiAgfSBlbHNlIHsKICAgIHJldC52YWx1ZSA9IEpTX0VYQ0VQVElPTjsKICAgIC8vIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgIkludmFsaWQgdHlwZSBmb3IgaW5wdXQgYnVmZmVyIik7CiAgfQoKICBpZihvZmZzZXQgPCAwKQogICAgcmV0LnJhbmdlLm9mZnNldCA9IHJldC5zaXplICsgb2Zmc2V0ICUgcmV0LnNpemU7CiAgZWxzZSBpZihvZmZzZXQgPiByZXQuc2l6ZSkKICAgIHJldC5yYW5nZS5vZmZzZXQgPSByZXQuc2l6ZTsKICBlbHNlCiAgICByZXQucmFuZ2Uub2Zmc2V0ID0gb2Zmc2V0OwoKICBpZihsZW5ndGggPj0gMCAmJiBsZW5ndGggPCByZXQuc2l6ZSkKICAgIHJldC5yYW5nZS5sZW5ndGggPSBsZW5ndGg7CgogIHJldHVybiByZXQ7Cn0KCklucHV0QnVmZmVyCmpzX2lucHV0X2NoYXJzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBJbnB1dEJ1ZmZlciByZXQgPSB7MCwgMCwgMCwgJmlucHV0X2J1ZmZlcl9mcmVlX2RlZmF1bHQsIEpTX1VOREVGSU5FRH07CiAgaW50NjRfdCBvZmZzZXQgPSAwLCBsZW5ndGggPSBJTlQ2NF9NQVg7CgogIG9mZnNldF9pbml0KCZyZXQucmFuZ2UpOwoKICBpZihKU19Jc1N0cmluZyh2YWx1ZSkpIHsKICAgIHJldC5kYXRhID0gKHVpbnQ4X3QqKUpTX1RvQ1N0cmluZ0xlbihjdHgsICZyZXQuc2l6ZSwgdmFsdWUpOwogICAgcmV0LnZhbHVlID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgICByZXQuZnJlZSA9ICZpbnB1dF9idWZmZXJfZnJlZV9kZWZhdWx0OwogIH0gZWxzZSB7CiAgICByZXQgPSBqc19pbnB1dF9idWZmZXIoY3R4LCB2YWx1ZSk7CiAgfQoKICByZXR1cm4gcmV0Owp9CgpCT09MCmlucHV0X2J1ZmZlcl92YWxpZChjb25zdCBJbnB1dEJ1ZmZlciogaW4pIHsKICByZXR1cm4gIUpTX0lzRXhjZXB0aW9uKGluLT52YWx1ZSk7Cn0KCklucHV0QnVmZmVyCmlucHV0X2J1ZmZlcl9jbG9uZShjb25zdCBJbnB1dEJ1ZmZlciogaW4sIEpTQ29udGV4dCogY3R4KSB7CiAgSW5wdXRCdWZmZXIgcmV0ID0ganNfaW5wdXRfYnVmZmVyKGN0eCwgaW4tPnZhbHVlKTsKCiAgcmV0LnBvcyA9IGluLT5wb3M7CiAgcmV0LnNpemUgPSBpbi0+c2l6ZTsKICByZXQuZnJlZSA9IGluLT5mcmVlOwoKICByZXR1cm4gcmV0Owp9Cgp2b2lkCmlucHV0X2J1ZmZlcl9kdW1wKGNvbnN0IElucHV0QnVmZmVyKiBpbiwgRHluQnVmKiBkYikgewogIGRidWZfcHJpbnRmKGRiLCAiKElucHV0QnVmZmVyKXsgLmRhdGEgPSAlcCwgLnNpemUgPSAlenUsIC5wb3MgPSAlenUsIC5mcmVlID0gJXAgfSIsIGluLT5kYXRhLCBpbi0+c2l6ZSwgaW4tPnBvcywgaW4tPmZyZWUpOwp9Cgp2b2lkCmlucHV0X2J1ZmZlcl9mcmVlKElucHV0QnVmZmVyKiBpbiwgSlNDb250ZXh0KiBjdHgpIHsKICBpZihpbi0+ZGF0YSkgewogICAgaW4tPmZyZWUoY3R4LCAoY29uc3QgY2hhciopaW4tPmRhdGEsIGluLT52YWx1ZSk7CiAgICBpbi0+ZGF0YSA9IDA7CiAgICBpbi0+c2l6ZSA9IDA7CiAgICBpbi0+cG9zID0gMDsKICAgIGluLT52YWx1ZSA9IEpTX1VOREVGSU5FRDsKICB9Cn0KCmludAppbnB1dF9idWZmZXJfcGVla2MoSW5wdXRCdWZmZXIqIGluLCBzaXplX3QqIGxlbnApIHsKICBjb25zdCB1aW50OF90ICpwb3MsICplbmQsICpuZXh0OwogIGludCBjcDsKICBwb3MgPSBpbnB1dF9idWZmZXJfZGF0YShpbikgKyBpbi0+cG9zOwogIGVuZCA9IGlucHV0X2J1ZmZlcl9kYXRhKGluKSArIGlucHV0X2J1ZmZlcl9sZW5ndGgoaW4pOwogIGNwID0gdW5pY29kZV9mcm9tX3V0ZjgocG9zLCBlbmQgLSBwb3MsICZuZXh0KTsKICBpZihsZW5wKQogICAgKmxlbnAgPSBuZXh0IC0gcG9zOwoKICByZXR1cm4gY3A7Cn0KCmNvbnN0IHVpbnQ4X3QqCmlucHV0X2J1ZmZlcl9wZWVrKElucHV0QnVmZmVyKiBpbiwgc2l6ZV90KiBsZW5wKSB7CiAgaW5wdXRfYnVmZmVyX3BlZWtjKGluLCBsZW5wKTsKICByZXR1cm4gaW5wdXRfYnVmZmVyX2RhdGEoaW4pICsgaW4tPnBvczsKfQoKY29uc3QgdWludDhfdCoKaW5wdXRfYnVmZmVyX2dldChJbnB1dEJ1ZmZlciogaW4sIHNpemVfdCogbGVucCkgewogIHNpemVfdCBuOwogIGNvbnN0IHVpbnQ4X3QqIHJldDsKICBpZihsZW5wID09IDApCiAgICBsZW5wID0gJm47CiAgcmV0ID0gaW5wdXRfYnVmZmVyX3BlZWsoaW4sIGxlbnApOwogIGluLT5wb3MgKz0gKmxlbnA7CiAgcmV0dXJuIHJldDsKfQoKY29uc3QgY2hhcioKaW5wdXRfYnVmZmVyX2N1cnJlbnRsaW5lKElucHV0QnVmZmVyKiBpbiwgc2l6ZV90KiBsZW4pIHsKICBzaXplX3QgaTsKCiAgaWYoKGkgPSBieXRlX3JjaHIoaW5wdXRfYnVmZmVyX2RhdGEoaW4pLCBpbi0+cG9zLCAnXG4nKSkgPCBpbi0+cG9zKQogICAgaSsrOwoKICBpZihsZW4pCiAgICAqbGVuID0gaW4tPnBvcyAtIGk7CgogIHJldHVybiAoY29uc3QgY2hhciopJmlucHV0X2J1ZmZlcl9kYXRhKGluKVtpXTsKfQoKc2l6ZV90CmlucHV0X2J1ZmZlcl9jb2x1bW4oSW5wdXRCdWZmZXIqIGluLCBzaXplX3QqIGxlbikgewogIHNpemVfdCBpOwoKICBpZigoaSA9IGJ5dGVfcmNocihpbnB1dF9idWZmZXJfZGF0YShpbiksIGluLT5wb3MsICdcbicpKSA8IGluLT5wb3MpCiAgICBpKys7CgogIHJldHVybiBpbi0+cG9zIC0gaTsKfQoKT2Zmc2V0TGVuZ3RoCmpzX29mZnNldF9sZW5ndGgoSlNDb250ZXh0KiBjdHgsIGludDY0X3Qgc2l6ZSwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBpbnQ2NF90IG9mZiA9IDAsIGxlbiA9IHNpemU7CgogIGlmKGFyZ2MgPj0gMSAmJiBKU19Jc051bWJlcihhcmd2WzBdKSkKICAgIEpTX1RvSW50NjQoY3R4LCAmb2ZmLCBhcmd2WzBdKTsKICBpZihhcmdjID49IDIgJiYgSlNfSXNOdW1iZXIoYXJndlsxXSkpCiAgICBKU19Ub0ludDY0KGN0eCwgJmxlbiwgYXJndlsxXSk7CgogIC8qIGlmKG9mZiA+PSAwKQogICAgIG9mZiA9IE1JTl9OVU0ob2ZmLCBzaXplKTsKICAgZWxzZQogICovCiAgb2ZmID0gKChvZmYgJSBzaXplKSArIG9mZikgJSBzaXplOwoKICBpZihsZW4gPj0gMCkKICAgIGxlbiA9IE1JTl9OVU0obGVuLCBzaXplIC0gb2ZmKTsKICBlbHNlCiAgICBsZW4gPSBzaXplIC0gb2ZmOwoKICByZXR1cm4gKE9mZnNldExlbmd0aCl7b2ZmLCBsZW59Owp9CgAAAAAAAAAANi4AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPHgAAAAAAAJ4eAAAAAAAAAAAAAAAA8L8"
				],
				[
					292,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPHgAAAAAAAJ4eAAAAAAAAAAAAAAAA8L8"
				],
				[
					293,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACPHgAAAAAAAJ4eAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fd_set.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/timeval.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.clang-format",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeCache.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-socklen_t.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/test-socklen_t.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.prettierrc",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-fd_set.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-fdset.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_location.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/usr/include/x86_64-linux-gnu/bits/syscall.h",
		"/usr/include/x86_64-linux-gnu/sys/syscall.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inspect.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_qjsm.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/Findpigpio.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/pigpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/README",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stringdecoder.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/pigpio/pigpiod_if2.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/pigpio/pigpio.h"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"getsockopt",
			"DumpSock",
			"recv",
			"'sock'",
			"\"sock",
			"SOCKET_SHUTDOWN",
			"getsockname",
			"socket_syscall",
			"syscalls",
			"recv",
			"getsockopt",
			"setsockopt",
			"optval_buf",
			"chars",
			"js_input_buffer",
			"js_input_chars",
			"argv\\[2\\]",
			"\"setsock",
			"\"socket\"",
			"\"socket",
			"setsockopt",
			"toStringTag",
			"js_object_getpropertynames_recursive",
			"proto_chain",
			"format",
			"struct JSRun",
			"include_dir",
			"QUICKJS_INCLUDE_DIR",
			"INCLUDE_DIR",
			"LIBRARY_DIR",
			": ",
			"\"QuickJS ",
			"install dir",
			"QUICKJS_INCLUDE_DIR",
			"CheckIncludeFile",
			"include_dir",
			"make_module",
			"^\\s*add_",
			"target_",
			"/modules",
			"QJSC",
			"std.in",
			"GetExc",
			"Column",
			"JS_GetProto",
			"isObj",
			"IsBigInt",
			"class_id",
			"cfunc",
			"JS_IsCFunction",
			"CFunction",
			"isCFunction",
			"ISEM",
			"HTMLDDA",
			"IsReg",
			"IsEx",
			"\"is",
			"Constructor",
			"getPrototypeChain",
			"hasPrototype",
			"getConstructorChain",
			"filter",
			"js_object_construct",
			"'main",
			"Exception:",
			"TOKEN_PROP",
			"\"byte_offset\"",
			"dump_err",
			"dump_error",
			"js_std_",
			"realpath",
			"pow",
			"SockAddr\\* a",
			"sa;",
			"sa->s[^a]",
			"sa->s",
			"socket_send",
			"SOCKET_",
			"_PROP",
			"SOCKADDR_PROP",
			"SOCKET_METHOD_RECVFROM",
			"JS_NewArrayBuffer",
			"^js_strv",
			"js_strv",
			"argv_free",
			"js_is_nullis",
			"528",
			"\"jsm*_module_lo",
			"\"js_module_lo",
			"\"js_module",
			"FD_SETSIZE",
			"struct ",
			"import_",
			"array_to",
			"LOAD_MOD",
			"path;",
			"\"js_eval",
			"import_def",
			"import",
			"imp->",
			"dbuf_",
			"putstr",
			"va_start",
			"^dbuf_",
			", Dyn",
			"LOAD_MODULE",
			"\"loadMod",
			"^js_module",
			"js_module",
			"module_import",
			"import_name",
			"LIB_MOD",
			"syscallerr",
			"syscaller",
			"syscallerr",
			"evalbin",
			"JS_CONSTANT",
			"lookupModule",
			"compile_mo",
			"JS_CGETSET_MAGIC_DEF",
			"cxt,",
			"JS_DupValue.*TAG_MODULE",
			"modules_obj",
			"js_modules_entries",
			"$",
			"\"moduleList",
			"\"module",
			"basename"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"arg",
			" ",
			"",
			"\"\\\\t",
			"\"\\t",
			"imp.",
			"ctx,",
			"",
			"JSValueConst)",
			"",
			"jsm_module_loader",
			"js_module_loader_so",
			"js_eval_file",
			"js_eval_buf",
			"js_load_script",
			"jsm_eval_script",
			"js_eval_file",
			"js_load_module",
			"js_eval_str",
			"js_module_get",
			"JSValueConst)",
			"js_module_search",
			"jsm_module_find",
			"js_module_find",
			"js_load_",
			"js_load_module",
			"js_eval_buf",
			"js_load_script",
			"js_std_dump_error",
			"js_module_exports",
			"fdset",
			" ",
			"js_input_buffer",
			"\\1(\\2, sock",
			"\\1(",
			"",
			"JS_CGETSET_MAGIC_DEF",
			"off.",
			"} else if(",
			"port",
			".buf",
			"'",
			"",
			"socket_send",
			"0x00",
			" 0x00,",
			"0x78,",
			"0x78",
			" 0x00,",
			"0x78",
			"JS_CGETSET_MAGIC_DEF",
			"socket_syscalls_size",
			"js_syscallerror_get, js_syscallerror_set,",
			"js_socket_get, js_socket_set, ",
			"e",
			"js_syscallerror_proto_funcs",
			"s.fd",
			"js_socket_proto_funcs",
			"\"",
			"SYSCALLERROR_VALUEOF",
			"s, ",
			"JS_SOCKETCALL",
			"JS_SOCKETCALL_RETURN",
			"js_socket_data2(ctx",
			"sa->family",
			"QUICKJS_SYSCALLERROR_H",
			"data2",
			"js_syscallerror_data2",
			"QUICKJS_MISC_H",
			"js_sockets_defines",
			"js_sockaddr_data2",
			"js_sockaddr_data",
			"SockAddr",
			"struct sockaddr*",
			"sockets_init",
			"argv[i]",
			"pigpio",
			"CHAR_UTILS",
			"${util_SOURCES}",
			"ol.",
			"range_from",
			".range.length",
			".range.offset",
			"input_buffer_length(in)",
			"input_buffer_data(in)",
			"blob",
			"location->vec",
			"location",
			"Location",
			"r->data\\1",
			" this.fs.",
			"stringdecoder",
			"js_stringdecoder_set",
			"js_stringdecoder_get",
			"stringdecoder",
			"\\1if(gpio->debug) fprintf",
			"struct gpio",
			"struct GPIO",
			"struct GPIO*",
			"ctx->rt",
			"",
			": ",
			"\"",
			"ret = \\1;",
			"->errnum",
			"(",
			"error",
			"JS_NewInt32",
			"",
			",",
			"left, right",
			"predicate_nextarg(ctx, &args)",
			"predicate_nextarg(ctx, &args),predicate_nextarg(ctx, &args))",
			"predicate_argument_shift(ctx, &args)",
			"js_arguments_shift(&args)",
			"",
			"ret = PRECEDENCE_",
			"args",
			"",
			"dbuf",
			": left",
			"pred",
			"args->",
			"r",
			"predicate_value",
			"",
			"'x'",
			"0"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1549,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									418,
									440
								],
								[
									489,
									502
								],
								[
									543,
									561
								],
								[
									1494,
									1511
								],
								[
									1521,
									1529
								],
								[
									1547,
									1555
								],
								[
									1620,
									1630
								],
								[
									1720,
									1736
								],
								[
									1839,
									1855
								],
								[
									2095,
									2115
								],
								[
									2406,
									2426
								],
								[
									2914,
									2934
								],
								[
									3165,
									3184
								],
								[
									7067,
									7089
								],
								[
									8551,
									8573
								],
								[
									8778,
									8793
								],
								[
									8907,
									8933
								],
								[
									9377,
									9413
								],
								[
									9815,
									9837
								],
								[
									10156,
									10178
								],
								[
									11190,
									11204
								],
								[
									12744,
									12758
								],
								[
									13888,
									13910
								],
								[
									15764,
									15781
								],
								[
									16168,
									16185
								],
								[
									17195,
									17212
								],
								[
									18990,
									19006
								],
								[
									30889,
									30899
								],
								[
									31810,
									31829
								],
								[
									32231,
									32258
								],
								[
									32308,
									32335
								],
								[
									32616,
									32637
								],
								[
									32869,
									32884
								],
								[
									33849,
									33863
								],
								[
									33893,
									33907
								]
							],
							"symlist":
							[
								"‚Äî‚ìÇ‚Äì INSPECT_INT32T_INRANGE ( ) ‚Ä¶ ‚Äî macro function",
								"‚Äî‚ìÇ‚Äì INSPECT_LEVEL ( ) ‚Ä¶ ‚Äî macro function",
								"‚Äî‚ìÇ‚Äì INSPECT_IS_COMPACT ( ) ‚Ä¶ ‚Äî macro function",
								"\t‚ìâ  inspect_options_t ; ‚Äî typedef",
								"\t‚íû  prop_key ; ‚Äî type declaration",
								"‚Äî‚í∏‚Äì prop_key { ‚Ä¶ } ; ‚Äî type",
								"\t‚ìâ  prop_key_t ; ‚Äî typedef",
								"\t‚í°  js_inspect_print ( ) ; ‚Äî function declaration",
								"‚Äî‚íª‚Äì regexp_predicate ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì inspect_screen_width ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì inspect_options_init ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì inspect_options_free ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì inspect_options_get ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì inspect_options_object ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì inspect_options_hidden ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì inspect_newline ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_object_getpropertynames ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_object_getpropertynames_recursive ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_custom_atom ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_custom_call ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_map ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_set ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_arraybuffer ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_regexp ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_number ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_string ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_print ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_tostring ( ) { ‚Ä¶ } ‚Äî function",
								"\t‚í°  js_debugger_build_backtrace ( ) ; ‚Äî function declaration",
								"‚Äî‚íª‚Äì js_inspect_stacktrace_value ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_stacktrace ( ) { ‚Ä¶ } ‚Äî function",
								"‚Äî‚íª‚Äì js_inspect_init ( ) { ‚Ä¶ } ‚Äî function",
								"\t‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object",
								"\t‚ìÇ  JS_INIT_MODULE ‚Ä¶ ‚Äî macro object"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 3,
							"tabs_extra_last_activated": 1632140325.73,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20807,
						"regions":
						{
						},
						"selection":
						[
							[
								8764,
								8764
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632119385.42,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5770.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53797,
						"regions":
						{
						},
						"selection":
						[
							[
								52719,
								52719
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632120053.9,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 34918.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "char-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8196,
						"regions":
						{
						},
						"selection":
						[
							[
								6459,
								6459
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632120181.57,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3400.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lexer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10497,
						"regions":
						{
						},
						"selection":
						[
							[
								4495,
								4495
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632122947.54,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2597.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/parser.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1943,
						"regions":
						{
						},
						"selection":
						[
							[
								1153,
								1169
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632137248.44,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs-sockets.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44008,
						"regions":
						{
						},
						"selection":
						[
							[
								1418,
								1418
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632144027.06,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4391.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "tests/test_sockets.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5936,
						"regions":
						{
						},
						"selection":
						[
							[
								2896,
								2896
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632141078.56,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 994.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44008,
						"regions":
						{
						},
						"selection":
						[
							[
								23748,
								23765
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632140222.07,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 12562.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "quickjs-sockets.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2799,
						"regions":
						{
						},
						"selection":
						[
							[
								1066,
								1076
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632140372.2,
							"tabs_extra_last_activated_sheet_index": 8,
							"tabs_extra_moving":
							[
								6,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "lib/socklen_t.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 453,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632134915.65,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "quickjs-inspect.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 34252,
						"regions":
						{
						},
						"selection":
						[
							[
								2073,
								2073
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632162373.77,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1029.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31291,
						"regions":
						{
						},
						"selection":
						[
							[
								661,
								661
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632148464.48,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "buffer-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7323,
						"regions":
						{
						},
						"selection":
						[
							[
								5357,
								5372
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632135678.68,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3366.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "buffer-utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11830,
						"regions":
						{
						},
						"selection":
						[
							[
								7823,
								7838
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1632135527.36,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5576.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"utils.h",
				"utils.h"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"parser.js",
				"lib/parser.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"conso",
				"lib/console.js"
			],
			[
				"clang-f",
				".clang-format"
			],
			[
				"quickjs.h",
				"~/Sources/plot-cv/quickjs/quickjs.h"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"test_mi",
				"tests/test_misc.js"
			],
			[
				"ockets.",
				"quickjs-sockets.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"test_loca",
				"tests/test_location.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				".clang-fo",
				".clang-format"
			],
			[
				"buff",
				"buffer-utils.c"
			],
			[
				"buffer-util",
				"buffer-utils.c"
			],
			[
				"buffer-utils.c",
				"buffer-utils.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-so",
				"quickjs-sockets.c"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"quickjs-insp",
				"quickjs-inspect.c"
			],
			[
				"test_soc",
				"tests/test_sockets.js"
			],
			[
				"",
				"CMakeLists.txt"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"test_qjsm",
				"tests/test_qjsm.js"
			],
			[
				"buffer-tu",
				"buffer-utils.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"repl.",
				"lib/repl.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"quickjs-blo",
				"quickjs-blob.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"test_mis",
				"tests/test_misc.js"
			],
			[
				"test_blob",
				"tests/test_blob.js"
			],
			[
				"test_string",
				"tests/test_stringdecoder.js"
			],
			[
				"test_str",
				"tests/test_stringdecoder.js"
			],
			[
				"quickjs-blb",
				"quickjs-blob.h"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"ringbuffer.h",
				"ringbuffer.h"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjsmo",
				"cmake/QuickJSModule.cmake"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
