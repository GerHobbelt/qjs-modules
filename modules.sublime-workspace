{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"underly",
				"underlying_source"
			],
			[
				"Tok",
				"TokenSequence"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyFunctionList"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  chunk_unref\n  chunk_arraybuffer\n  reader_new\n  reader_release_lock\n  reader_clear\n  reader_cancel\n  reader_read\n  reader_signal\n  reader_update\n  reader_passthrough\n  readable_new\n  readable_close\n  readable_abort\n  readable_enqueue\n  readable_lock\n  readable_unlock\n  readable_get_reader\n  readable_free\n  js_reader_constructor\n  js_reader_wrap\n  js_reader_method\n  js_reader_get\n  js_reader_finalizer\n  js_readable_callback\n  js_readable_constructor\n  js_readable_wrap\n  js_readable_method\n  js_readable_get\n  js_readable_controller\n  js_readable_desired\n  js_readable_finalizer\n  writer_new\n  writer_release_lock\n  writer_write\n  writer_close\n  writer_abort\n  writer_signal\n  writable_new\n  writable_abort\n  writable_lock\n  writable_unlock\n  writable_get_writer\n  writable_free\n  js_writer_constructor\n  js_writer_wrap\n  js_writer_method\n  js_writer_get\n  js_writer_finalizer\n  js_writable_callback\n  js_writable_constructor\n  js_writable_wrap\n  js_writable_iterator\n  js_writable_method\n  js_writable_get\n  js_writable_controller\n  js_writable_finalizer\n  transform_new\n  js_transform_constructor\n  js_transform_get\n  js_transform_controller\n  js_transform_desired\n  js_transform_finalizer\n  js_stream_init\nJS_INIT_MODULE",
			"settings":
			{
				"buffer_size": 1227,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					1357,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
						"symkeys":
						[
							[
								347,
								358
							],
							[
								449,
								453
							],
							[
								650,
								656
							],
							[
								834,
								840
							],
							[
								911,
								924
							],
							[
								1124,
								1132
							],
							[
								1219,
								1232
							],
							[
								1430,
								1438
							],
							[
								1516,
								1530
							],
							[
								1691,
								1700
							],
							[
								1763,
								1782
							],
							[
								2112,
								2122
							],
							[
								2155,
								2174
							],
							[
								2205,
								2218
							],
							[
								2253,
								2264
							],
							[
								2299,
								2312
							],
							[
								2380,
								2393
							],
							[
								2425,
								2443
							],
							[
								2500,
								2512
							],
							[
								2531,
								2545
							],
							[
								2579,
								2593
							],
							[
								2651,
								2667
							],
							[
								2720,
								2733
							],
							[
								2762,
								2777
							],
							[
								2810,
								2829
							],
							[
								2866,
								2886
							],
							[
								2974,
								2984
							],
							[
								3017,
								3036
							],
							[
								3071,
								3083
							],
							[
								3138,
								3150
							],
							[
								3185,
								3197
							],
							[
								3253,
								3266
							],
							[
								3340,
								3352
							],
							[
								3371,
								3385
							],
							[
								3439,
								3452
							],
							[
								3481,
								3496
							],
							[
								3529,
								3548
							],
							[
								3606,
								3626
							],
							[
								3719,
								3740
							],
							[
								3799,
								3812
							],
							[
								3899,
								3915
							],
							[
								4006,
								4021
							],
							[
								4098,
								4113
							],
							[
								4187,
								4200
							],
							[
								4287,
								4299
							],
							[
								4386,
								4401
							],
							[
								4478,
								4493
							],
							[
								4570,
								4584
							],
							[
								4682,
								4697
							],
							[
								4817,
								4831
							],
							[
								4929,
								4944
							],
							[
								5066,
								5082
							],
							[
								5184,
								5201
							],
							[
								5325,
								5341
							],
							[
								5443,
								5460
							],
							[
								5585,
								5602
							],
							[
								5706,
								5724
							]
						],
						"symlist":
						[
							"StreamEvent",
							"Read",
							"Reader",
							"Writer",
							"ReadableEvent",
							"Readable",
							"WritableEvent",
							"Writable",
							"TransformEvent",
							"Transform",
							"TransformProperties",
							"reader_new",
							"reader_release_lock",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"js_readable_callback",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"js_writable_callback",
							"js_init_module_stream",
							"reader_closed",
							"reader_cancelled",
							"readable_closed",
							"readable_locked",
							"writer_closed",
							"writer_ready",
							"writable_closed",
							"writable_locked",
							"js_reader_data",
							"js_reader_data2",
							"js_writer_data",
							"js_writer_data2",
							"js_readable_data",
							"js_readable_data2",
							"js_writable_data",
							"js_writable_data2",
							"js_transform_data",
							"js_transform_data2"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAACwAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1358,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25430,
								25450
							],
							[
								25666,
								25684
							],
							[
								26354,
								26369
							],
							[
								26861,
								26883
							],
							[
								27252,
								27273
							],
							[
								31086,
								31099
							],
							[
								32186,
								32210
							],
							[
								33524,
								33540
							],
							[
								34038,
								34061
							],
							[
								34777,
								34797
							],
							[
								35143,
								35165
							],
							[
								36579,
								36593
							],
							[
								40586,
								40600
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACwAwAAU3RyZWFtRXZlbnQKUmVhZApSZWFkZXIKV3JpdGVyClJlYWRhYmxlRXZlbnQKUmVhZGFibGUKV3JpdGFibGVFdmVudApXcml0YWJsZQpUcmFuc2Zvcm1FdmVudApUcmFuc2Zvcm0KVHJhbnNmb3JtUHJvcGVydGllcwogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICB3cml0ZXJfbmV3CiAgd3JpdGVyX3JlbGVhc2VfbG9jawogIHdyaXRlcl93cml0ZQogIHdyaXRlcl9jbG9zZQogIHdyaXRlcl9hYm9ydAogIHdyaXRlcl9zaWduYWwKICB3cml0YWJsZV9uZXcKICB3cml0YWJsZV9hYm9ydAogIHdyaXRhYmxlX2xvY2sKICB3cml0YWJsZV91bmxvY2sKICB3cml0YWJsZV9nZXRfd3JpdGVyCiAganNfd3JpdGFibGVfY2FsbGJhY2sKICBqc19pbml0X21vZHVsZV9zdHJlYW0KICByZWFkZXJfY2xvc2VkCiAgcmVhZGVyX2NhbmNlbGxlZAogIHJlYWRhYmxlX2Nsb3NlZAogIHJlYWRhYmxlX2xvY2tlZAogIHdyaXRlcl9jbG9zZWQKICB3cml0ZXJfcmVhZHkKICB3cml0YWJsZV9jbG9zZWQKICB3cml0YWJsZV9sb2NrZWQKICBqc19yZWFkZXJfZGF0YQogIGpzX3JlYWRlcl9kYXRhMgogIGpzX3dyaXRlcl9kYXRhCiAganNfd3JpdGVyX2RhdGEyCiAganNfcmVhZGFibGVfZGF0YQogIGpzX3JlYWRhYmxlX2RhdGEyCiAganNfd3JpdGFibGVfZGF0YQogIGpzX3dyaXRhYmxlX2RhdGEyCiAganNfdHJhbnNmb3JtX2RhdGEKICBqc190cmFuc2Zvcm1fZGF0YTIAAAAAAAAAAMsEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1365,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25430,
								25450
							],
							[
								25666,
								25684
							],
							[
								26354,
								26369
							],
							[
								26861,
								26883
							],
							[
								27252,
								27273
							],
							[
								31086,
								31099
							],
							[
								32323,
								32347
							],
							[
								33529,
								33545
							],
							[
								34043,
								34066
							],
							[
								34782,
								34802
							],
							[
								35148,
								35170
							],
							[
								36584,
								36598
							],
							[
								40591,
								40605
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgQAAAAAAAAzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1366,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25430,
								25450
							],
							[
								25666,
								25684
							],
							[
								26354,
								26369
							],
							[
								26861,
								26883
							],
							[
								27252,
								27273
							],
							[
								31086,
								31099
							],
							[
								31459,
								31483
							],
							[
								32665,
								32681
							],
							[
								33179,
								33202
							],
							[
								33918,
								33938
							],
							[
								34284,
								34306
							],
							[
								35720,
								35734
							],
							[
								39727,
								39741
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1367,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25430,
								25450
							],
							[
								25666,
								25684
							],
							[
								26354,
								26369
							],
							[
								26861,
								26883
							],
							[
								27252,
								27273
							],
							[
								31086,
								31099
							],
							[
								31459,
								31483
							],
							[
								32665,
								32681
							],
							[
								33179,
								33202
							],
							[
								33918,
								33938
							],
							[
								34284,
								34306
							],
							[
								35720,
								35734
							],
							[
								39727,
								39741
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1368,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25062,
								25082
							],
							[
								25298,
								25316
							],
							[
								25986,
								26001
							],
							[
								26493,
								26515
							],
							[
								26884,
								26905
							],
							[
								27958,
								27971
							],
							[
								28331,
								28355
							],
							[
								29537,
								29553
							],
							[
								30051,
								30074
							],
							[
								30790,
								30810
							],
							[
								31156,
								31178
							],
							[
								32592,
								32606
							],
							[
								36599,
								36613
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1369,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25062,
								25082
							],
							[
								25298,
								25316
							],
							[
								25986,
								26001
							],
							[
								26493,
								26515
							],
							[
								26884,
								26905
							],
							[
								27958,
								27971
							],
							[
								28331,
								28355
							],
							[
								29537,
								29553
							],
							[
								30051,
								30074
							],
							[
								30790,
								30810
							],
							[
								31156,
								31178
							],
							[
								32592,
								32606
							],
							[
								36599,
								36613
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1376,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAQAAAAAAAB7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1377,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25062,
								25082
							],
							[
								25298,
								25316
							],
							[
								25986,
								26001
							],
							[
								26493,
								26515
							],
							[
								26884,
								26905
							],
							[
								27958,
								27971
							],
							[
								28331,
								28355
							],
							[
								29537,
								29553
							],
							[
								30051,
								30074
							],
							[
								30790,
								30810
							],
							[
								31156,
								31178
							],
							[
								32592,
								32606
							],
							[
								36599,
								36613
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AQAAAAAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1378,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25062,
								25082
							],
							[
								25298,
								25316
							],
							[
								25986,
								26001
							],
							[
								26493,
								26515
							],
							[
								26884,
								26905
							],
							[
								27958,
								27971
							],
							[
								28331,
								28355
							],
							[
								29537,
								29553
							],
							[
								30051,
								30074
							],
							[
								30790,
								30810
							],
							[
								31156,
								31178
							],
							[
								32592,
								32606
							],
							[
								36599,
								36613
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1379,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1380,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4601,
								4615
							],
							[
								5091,
								5105
							],
							[
								5576,
								5592
							],
							[
								6318,
								6331
							],
							[
								6464,
								6479
							],
							[
								6579,
								6598
							],
							[
								6786,
								6799
							],
							[
								7119,
								7140
							],
							[
								7983,
								7997
							],
							[
								8890,
								8906
							],
							[
								9496,
								9509
							],
							[
								9839,
								9858
							],
							[
								10646,
								10666
							],
							[
								11500,
								11523
							],
							[
								12435,
								12451
							],
							[
								13223,
								13241
							],
							[
								13848,
								13863
							],
							[
								14346,
								14368
							],
							[
								14913,
								14932
							],
							[
								15256,
								15277
							],
							[
								16794,
								16804
							],
							[
								17175,
								17194
							],
							[
								17424,
								17436
							],
							[
								17930,
								17942
							],
							[
								18135,
								18147
							],
							[
								18575,
								18588
							],
							[
								18856,
								18868
							],
							[
								19161,
								19175
							],
							[
								19416,
								19429
							],
							[
								19562,
								19577
							],
							[
								19677,
								19696
							],
							[
								19937,
								19950
							],
							[
								20243,
								20264
							],
							[
								21105,
								21119
							],
							[
								21375,
								21391
							],
							[
								22241,
								22254
							],
							[
								22692,
								22711
							],
							[
								23536,
								23556
							],
							[
								23854,
								23877
							],
							[
								24846,
								24862
							],
							[
								25062,
								25082
							],
							[
								25298,
								25316
							],
							[
								25986,
								26001
							],
							[
								26493,
								26515
							],
							[
								26884,
								26905
							],
							[
								27958,
								27971
							],
							[
								28331,
								28355
							],
							[
								29537,
								29553
							],
							[
								30051,
								30074
							],
							[
								30790,
								30810
							],
							[
								31156,
								31178
							],
							[
								32592,
								32606
							],
							[
								36599,
								36613
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AQAAAAAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1392,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4469,
								4483
							],
							[
								4959,
								4973
							],
							[
								5444,
								5460
							],
							[
								6186,
								6199
							],
							[
								6332,
								6347
							],
							[
								6447,
								6466
							],
							[
								6654,
								6667
							],
							[
								6987,
								7008
							],
							[
								7851,
								7865
							],
							[
								8758,
								8774
							],
							[
								9364,
								9377
							],
							[
								9707,
								9726
							],
							[
								10514,
								10534
							],
							[
								11368,
								11391
							],
							[
								12437,
								12453
							],
							[
								13225,
								13243
							],
							[
								13850,
								13865
							],
							[
								14348,
								14370
							],
							[
								14915,
								14934
							],
							[
								15258,
								15279
							],
							[
								16796,
								16806
							],
							[
								17177,
								17196
							],
							[
								17426,
								17438
							],
							[
								17932,
								17944
							],
							[
								18137,
								18149
							],
							[
								18577,
								18590
							],
							[
								18858,
								18870
							],
							[
								19163,
								19177
							],
							[
								19418,
								19431
							],
							[
								19564,
								19579
							],
							[
								19679,
								19698
							],
							[
								19939,
								19952
							],
							[
								20245,
								20266
							],
							[
								21107,
								21121
							],
							[
								21377,
								21393
							],
							[
								22243,
								22256
							],
							[
								22694,
								22713
							],
							[
								23538,
								23558
							],
							[
								23856,
								23879
							],
							[
								24848,
								24864
							],
							[
								25064,
								25084
							],
							[
								25300,
								25318
							],
							[
								25988,
								26003
							],
							[
								26495,
								26517
							],
							[
								26886,
								26907
							],
							[
								27960,
								27973
							],
							[
								28333,
								28357
							],
							[
								29539,
								29555
							],
							[
								30053,
								30076
							],
							[
								30792,
								30812
							],
							[
								31158,
								31180
							],
							[
								32594,
								32608
							],
							[
								36601,
								36615
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwEAAAAAAAC/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					1399,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4469,
								4483
							],
							[
								4959,
								4973
							],
							[
								5444,
								5460
							],
							[
								6186,
								6199
							],
							[
								6332,
								6347
							],
							[
								6447,
								6466
							],
							[
								6654,
								6667
							],
							[
								6987,
								7008
							],
							[
								7851,
								7865
							],
							[
								8758,
								8774
							],
							[
								9364,
								9377
							],
							[
								9707,
								9726
							],
							[
								10514,
								10534
							],
							[
								11368,
								11391
							],
							[
								12437,
								12453
							],
							[
								13225,
								13243
							],
							[
								13850,
								13865
							],
							[
								14348,
								14370
							],
							[
								14915,
								14934
							],
							[
								15258,
								15279
							],
							[
								16796,
								16806
							],
							[
								17177,
								17196
							],
							[
								17426,
								17438
							],
							[
								17932,
								17944
							],
							[
								18137,
								18149
							],
							[
								18577,
								18590
							],
							[
								18858,
								18870
							],
							[
								19032,
								19046
							],
							[
								19287,
								19300
							],
							[
								19433,
								19448
							],
							[
								19548,
								19567
							],
							[
								19808,
								19821
							],
							[
								20114,
								20135
							],
							[
								20976,
								20990
							],
							[
								21246,
								21262
							],
							[
								22112,
								22125
							],
							[
								22563,
								22582
							],
							[
								23407,
								23427
							],
							[
								23725,
								23748
							],
							[
								24851,
								24867
							],
							[
								25067,
								25087
							],
							[
								25303,
								25321
							],
							[
								25991,
								26006
							],
							[
								26498,
								26520
							],
							[
								26889,
								26910
							],
							[
								27963,
								27976
							],
							[
								28336,
								28360
							],
							[
								29542,
								29558
							],
							[
								30056,
								30079
							],
							[
								30795,
								30815
							],
							[
								31161,
								31183
							],
							[
								32597,
								32611
							],
							[
								36604,
								36618
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQMAAAAAAACZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1400,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4469,
								4483
							],
							[
								4959,
								4973
							],
							[
								5444,
								5460
							],
							[
								6186,
								6199
							],
							[
								6332,
								6347
							],
							[
								6447,
								6466
							],
							[
								6654,
								6667
							],
							[
								6987,
								7008
							],
							[
								7851,
								7865
							],
							[
								8758,
								8774
							],
							[
								9364,
								9377
							],
							[
								9707,
								9726
							],
							[
								10514,
								10534
							],
							[
								11368,
								11391
							],
							[
								12437,
								12453
							],
							[
								13225,
								13243
							],
							[
								13850,
								13865
							],
							[
								14348,
								14370
							],
							[
								14915,
								14934
							],
							[
								15258,
								15279
							],
							[
								16796,
								16806
							],
							[
								17177,
								17196
							],
							[
								17426,
								17438
							],
							[
								17932,
								17944
							],
							[
								18137,
								18149
							],
							[
								18577,
								18590
							],
							[
								18858,
								18870
							],
							[
								19032,
								19046
							],
							[
								19287,
								19300
							],
							[
								19433,
								19448
							],
							[
								19548,
								19567
							],
							[
								19808,
								19821
							],
							[
								20114,
								20135
							],
							[
								20976,
								20990
							],
							[
								21246,
								21262
							],
							[
								22112,
								22125
							],
							[
								22563,
								22582
							],
							[
								23407,
								23427
							],
							[
								23725,
								23748
							],
							[
								24848,
								24864
							],
							[
								25064,
								25084
							],
							[
								25300,
								25318
							],
							[
								25988,
								26003
							],
							[
								26495,
								26517
							],
							[
								26886,
								26907
							],
							[
								27960,
								27973
							],
							[
								28333,
								28357
							],
							[
								29539,
								29555
							],
							[
								30053,
								30076
							],
							[
								30792,
								30812
							],
							[
								31158,
								31180
							],
							[
								32594,
								32608
							],
							[
								36601,
								36615
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1405,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4469,
								4483
							],
							[
								4959,
								4973
							],
							[
								5444,
								5460
							],
							[
								6186,
								6199
							],
							[
								6332,
								6347
							],
							[
								6447,
								6466
							],
							[
								6654,
								6667
							],
							[
								6987,
								7008
							],
							[
								7851,
								7865
							],
							[
								8758,
								8774
							],
							[
								9364,
								9377
							],
							[
								9707,
								9726
							],
							[
								10514,
								10534
							],
							[
								11368,
								11391
							],
							[
								12437,
								12453
							],
							[
								13225,
								13243
							],
							[
								13850,
								13865
							],
							[
								14348,
								14370
							],
							[
								14915,
								14934
							],
							[
								15258,
								15279
							],
							[
								16796,
								16806
							],
							[
								17177,
								17196
							],
							[
								17426,
								17438
							],
							[
								17932,
								17944
							],
							[
								18137,
								18149
							],
							[
								18577,
								18590
							],
							[
								18858,
								18870
							],
							[
								19057,
								19071
							],
							[
								19312,
								19325
							],
							[
								19458,
								19473
							],
							[
								19573,
								19592
							],
							[
								19833,
								19846
							],
							[
								20139,
								20160
							],
							[
								21001,
								21015
							],
							[
								21271,
								21287
							],
							[
								22137,
								22150
							],
							[
								22588,
								22607
							],
							[
								23432,
								23452
							],
							[
								23750,
								23773
							],
							[
								24873,
								24889
							],
							[
								25089,
								25109
							],
							[
								25325,
								25343
							],
							[
								26013,
								26028
							],
							[
								26520,
								26542
							],
							[
								26911,
								26932
							],
							[
								27985,
								27998
							],
							[
								28358,
								28382
							],
							[
								29564,
								29580
							],
							[
								30078,
								30101
							],
							[
								30817,
								30837
							],
							[
								31183,
								31205
							],
							[
								32619,
								32633
							],
							[
								36626,
								36640
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQIAAAAAAAC1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					1408,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4495,
								4509
							],
							[
								4985,
								4999
							],
							[
								5470,
								5486
							],
							[
								6212,
								6225
							],
							[
								6358,
								6373
							],
							[
								6473,
								6492
							],
							[
								6680,
								6693
							],
							[
								7013,
								7034
							],
							[
								7877,
								7891
							],
							[
								8784,
								8800
							],
							[
								9390,
								9403
							],
							[
								9733,
								9752
							],
							[
								10540,
								10560
							],
							[
								11394,
								11417
							],
							[
								12463,
								12479
							],
							[
								13251,
								13269
							],
							[
								13876,
								13891
							],
							[
								14374,
								14396
							],
							[
								14941,
								14960
							],
							[
								15284,
								15305
							],
							[
								16822,
								16832
							],
							[
								17203,
								17222
							],
							[
								17452,
								17464
							],
							[
								17958,
								17970
							],
							[
								18163,
								18175
							],
							[
								18603,
								18616
							],
							[
								18884,
								18896
							],
							[
								19083,
								19097
							],
							[
								19338,
								19351
							],
							[
								19484,
								19499
							],
							[
								19599,
								19618
							],
							[
								19859,
								19872
							],
							[
								20165,
								20186
							],
							[
								21027,
								21041
							],
							[
								21297,
								21313
							],
							[
								22163,
								22176
							],
							[
								22614,
								22633
							],
							[
								23458,
								23478
							],
							[
								23776,
								23799
							],
							[
								24899,
								24915
							],
							[
								25115,
								25135
							],
							[
								25351,
								25369
							],
							[
								26039,
								26054
							],
							[
								26546,
								26568
							],
							[
								26937,
								26958
							],
							[
								28011,
								28024
							],
							[
								28384,
								28408
							],
							[
								29590,
								29606
							],
							[
								30104,
								30127
							],
							[
								30843,
								30863
							],
							[
								31209,
								31231
							],
							[
								32645,
								32659
							],
							[
								36652,
								36666
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgAAAAAAAACyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1431,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4495,
								4509
							],
							[
								4985,
								4999
							],
							[
								5470,
								5486
							],
							[
								6207,
								6220
							],
							[
								6353,
								6368
							],
							[
								6468,
								6487
							],
							[
								6675,
								6688
							],
							[
								7008,
								7029
							],
							[
								7872,
								7886
							],
							[
								8779,
								8795
							],
							[
								9385,
								9398
							],
							[
								9728,
								9747
							],
							[
								10535,
								10555
							],
							[
								11389,
								11412
							],
							[
								12458,
								12474
							],
							[
								13246,
								13264
							],
							[
								13871,
								13886
							],
							[
								14369,
								14391
							],
							[
								14936,
								14955
							],
							[
								15279,
								15300
							],
							[
								16817,
								16827
							],
							[
								17198,
								17217
							],
							[
								17447,
								17459
							],
							[
								17953,
								17965
							],
							[
								18158,
								18170
							],
							[
								18598,
								18611
							],
							[
								18879,
								18891
							],
							[
								19078,
								19092
							],
							[
								19333,
								19346
							],
							[
								19479,
								19494
							],
							[
								19594,
								19613
							],
							[
								19854,
								19867
							],
							[
								20160,
								20181
							],
							[
								21022,
								21036
							],
							[
								21292,
								21308
							],
							[
								22158,
								22171
							],
							[
								22609,
								22628
							],
							[
								23453,
								23473
							],
							[
								23771,
								23794
							],
							[
								24894,
								24910
							],
							[
								25110,
								25130
							],
							[
								25346,
								25364
							],
							[
								26034,
								26049
							],
							[
								26541,
								26563
							],
							[
								26932,
								26953
							],
							[
								28006,
								28019
							],
							[
								28379,
								28403
							],
							[
								29585,
								29601
							],
							[
								30099,
								30122
							],
							[
								30838,
								30858
							],
							[
								31204,
								31226
							],
							[
								32640,
								32654
							],
							[
								36647,
								36661
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wAAAAAAAADoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1432,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
						"symkeys":
						[
							[
								347,
								358
							],
							[
								449,
								453
							],
							[
								650,
								656
							],
							[
								834,
								840
							],
							[
								911,
								924
							],
							[
								1124,
								1132
							],
							[
								1219,
								1232
							],
							[
								1430,
								1438
							],
							[
								1516,
								1530
							],
							[
								1691,
								1700
							],
							[
								1763,
								1782
							],
							[
								2112,
								2122
							],
							[
								2155,
								2174
							],
							[
								2205,
								2218
							],
							[
								2253,
								2264
							],
							[
								2299,
								2312
							],
							[
								2380,
								2393
							],
							[
								2425,
								2443
							],
							[
								2500,
								2512
							],
							[
								2531,
								2545
							],
							[
								2579,
								2593
							],
							[
								2651,
								2667
							],
							[
								2720,
								2733
							],
							[
								2762,
								2777
							],
							[
								2810,
								2829
							],
							[
								2866,
								2886
							],
							[
								2974,
								2984
							],
							[
								3017,
								3036
							],
							[
								3071,
								3083
							],
							[
								3138,
								3150
							],
							[
								3185,
								3197
							],
							[
								3253,
								3266
							],
							[
								3340,
								3352
							],
							[
								3371,
								3385
							],
							[
								3439,
								3452
							],
							[
								3481,
								3496
							],
							[
								3529,
								3548
							],
							[
								3606,
								3626
							],
							[
								3719,
								3740
							],
							[
								3799,
								3812
							],
							[
								3899,
								3915
							],
							[
								4006,
								4021
							],
							[
								4098,
								4113
							],
							[
								4187,
								4200
							],
							[
								4287,
								4299
							],
							[
								4386,
								4401
							],
							[
								4478,
								4493
							],
							[
								4570,
								4584
							],
							[
								4682,
								4697
							],
							[
								4817,
								4831
							],
							[
								4929,
								4944
							],
							[
								5066,
								5082
							],
							[
								5184,
								5201
							],
							[
								5325,
								5341
							],
							[
								5443,
								5460
							],
							[
								5585,
								5602
							],
							[
								5706,
								5724
							]
						],
						"symlist":
						[
							"StreamEvent",
							"Read",
							"Reader",
							"Writer",
							"ReadableEvent",
							"Readable",
							"WritableEvent",
							"Writable",
							"TransformEvent",
							"Transform",
							"TransformProperties",
							"reader_new",
							"reader_release_lock",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"js_readable_callback",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"js_writable_callback",
							"js_init_module_stream",
							"reader_closed",
							"reader_cancelled",
							"readable_closed",
							"readable_locked",
							"writer_closed",
							"writer_ready",
							"writable_closed",
							"writable_locked",
							"js_reader_data",
							"js_reader_data2",
							"js_writer_data",
							"js_writer_data2",
							"js_readable_data",
							"js_readable_data2",
							"js_writable_data",
							"js_writable_data2",
							"js_transform_data",
							"js_transform_data2"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAACwAwAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1433,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28375,
								28399
							],
							[
								29580,
								29596
							],
							[
								30094,
								30117
							],
							[
								30833,
								30853
							],
							[
								31199,
								31221
							],
							[
								32635,
								32649
							],
							[
								36642,
								36656
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACwAwAAU3RyZWFtRXZlbnQKUmVhZApSZWFkZXIKV3JpdGVyClJlYWRhYmxlRXZlbnQKUmVhZGFibGUKV3JpdGFibGVFdmVudApXcml0YWJsZQpUcmFuc2Zvcm1FdmVudApUcmFuc2Zvcm0KVHJhbnNmb3JtUHJvcGVydGllcwogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICB3cml0ZXJfbmV3CiAgd3JpdGVyX3JlbGVhc2VfbG9jawogIHdyaXRlcl93cml0ZQogIHdyaXRlcl9jbG9zZQogIHdyaXRlcl9hYm9ydAogIHdyaXRlcl9zaWduYWwKICB3cml0YWJsZV9uZXcKICB3cml0YWJsZV9hYm9ydAogIHdyaXRhYmxlX2xvY2sKICB3cml0YWJsZV91bmxvY2sKICB3cml0YWJsZV9nZXRfd3JpdGVyCiAganNfd3JpdGFibGVfY2FsbGJhY2sKICBqc19pbml0X21vZHVsZV9zdHJlYW0KICByZWFkZXJfY2xvc2VkCiAgcmVhZGVyX2NhbmNlbGxlZAogIHJlYWRhYmxlX2Nsb3NlZAogIHJlYWRhYmxlX2xvY2tlZAogIHdyaXRlcl9jbG9zZWQKICB3cml0ZXJfcmVhZHkKICB3cml0YWJsZV9jbG9zZWQKICB3cml0YWJsZV9sb2NrZWQKICBqc19yZWFkZXJfZGF0YQogIGpzX3JlYWRlcl9kYXRhMgogIGpzX3dyaXRlcl9kYXRhCiAganNfd3JpdGVyX2RhdGEyCiAganNfcmVhZGFibGVfZGF0YQogIGpzX3JlYWRhYmxlX2RhdGEyCiAganNfd3JpdGFibGVfZGF0YQogIGpzX3dyaXRhYmxlX2RhdGEyCiAganNfdHJhbnNmb3JtX2RhdGEKICBqc190cmFuc2Zvcm1fZGF0YTIAAAAAAAAAAMsEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1453,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28383,
								28407
							],
							[
								29588,
								29604
							],
							[
								30102,
								30125
							],
							[
								30841,
								30861
							],
							[
								31207,
								31229
							],
							[
								32643,
								32657
							],
							[
								36650,
								36664
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgQAAAAAAAAzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1454,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28448,
								28472
							],
							[
								29653,
								29669
							],
							[
								30167,
								30190
							],
							[
								30906,
								30926
							],
							[
								31272,
								31294
							],
							[
								32708,
								32722
							],
							[
								36715,
								36729
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMsEAAAgIGNodW5rX3VucmVmCiAgY2h1bmtfYXJyYXlidWZmZXIKICByZWFkZXJfbmV3CiAgcmVhZGVyX3JlbGVhc2VfbG9jawogIHJlYWRlcl9jbGVhcgogIHJlYWRlcl9jYW5jZWwKICByZWFkZXJfcmVhZAogIHJlYWRlcl9zaWduYWwKICByZWFkZXJfdXBkYXRlCiAgcmVhZGVyX3Bhc3N0aHJvdWdoCiAgcmVhZGFibGVfbmV3CiAgcmVhZGFibGVfY2xvc2UKICByZWFkYWJsZV9hYm9ydAogIHJlYWRhYmxlX2VucXVldWUKICByZWFkYWJsZV9sb2NrCiAgcmVhZGFibGVfdW5sb2NrCiAgcmVhZGFibGVfZ2V0X3JlYWRlcgogIHJlYWRhYmxlX2ZyZWUKICBqc19yZWFkZXJfY29uc3RydWN0b3IKICBqc19yZWFkZXJfd3JhcAogIGpzX3JlYWRlcl9tZXRob2QKICBqc19yZWFkZXJfZ2V0CiAganNfcmVhZGVyX2ZpbmFsaXplcgogIGpzX3JlYWRhYmxlX2NhbGxiYWNrCiAganNfcmVhZGFibGVfY29uc3RydWN0b3IKICBqc19yZWFkYWJsZV93cmFwCiAganNfcmVhZGFibGVfbWV0aG9kCiAganNfcmVhZGFibGVfZ2V0CiAganNfcmVhZGFibGVfY29udHJvbGxlcgogIGpzX3JlYWRhYmxlX2Rlc2lyZWQKICBqc19yZWFkYWJsZV9maW5hbGl6ZXIKICB3cml0ZXJfbmV3CiAgd3JpdGVyX3JlbGVhc2VfbG9jawogIHdyaXRlcl93cml0ZQogIHdyaXRlcl9jbG9zZQogIHdyaXRlcl9hYm9ydAogIHdyaXRlcl9zaWduYWwKICB3cml0YWJsZV9uZXcKICB3cml0YWJsZV9hYm9ydAogIHdyaXRhYmxlX2xvY2sKICB3cml0YWJsZV91bmxvY2sKICB3cml0YWJsZV9nZXRfd3JpdGVyCiAgd3JpdGFibGVfZnJlZQogIGpzX3dyaXRlcl9jb25zdHJ1Y3RvcgogIGpzX3dyaXRlcl93cmFwCiAganNfd3JpdGVyX21ldGhvZAogIGpzX3dyaXRlcl9nZXQKICBqc193cml0ZXJfZmluYWxpemVyCiAganNfd3JpdGFibGVfY2FsbGJhY2sKICBqc193cml0YWJsZV9jb25zdHJ1Y3RvcgogIGpzX3dyaXRhYmxlX3dyYXAKICBqc193cml0YWJsZV9pdGVyYXRvcgogIGpzX3dyaXRhYmxlX21ldGhvZAogIGpzX3dyaXRhYmxlX2dldAogIGpzX3dyaXRhYmxlX2NvbnRyb2xsZXIKICBqc193cml0YWJsZV9maW5hbGl6ZXIKICB0cmFuc2Zvcm1fbmV3CiAganNfdHJhbnNmb3JtX2NvbnN0cnVjdG9yCiAganNfdHJhbnNmb3JtX2dldAogIGpzX3RyYW5zZm9ybV9jb250cm9sbGVyCiAganNfdHJhbnNmb3JtX2Rlc2lyZWQKICBqc190cmFuc2Zvcm1fZmluYWxpemVyCiAganNfc3RyZWFtX2luaXQKSlNfSU5JVF9NT0RVTEUAAAAAAAAAAMsEAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1459,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28451,
								28475
							],
							[
								29656,
								29672
							],
							[
								30170,
								30193
							],
							[
								30909,
								30929
							],
							[
								31275,
								31297
							],
							[
								32711,
								32725
							],
							[
								36718,
								36732
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgQAAAAAAAByBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1460,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28375,
								28399
							],
							[
								29580,
								29596
							],
							[
								30094,
								30117
							],
							[
								30833,
								30853
							],
							[
								31199,
								31221
							],
							[
								32635,
								32649
							],
							[
								36642,
								36656
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1461,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28375,
								28399
							],
							[
								29580,
								29596
							],
							[
								30094,
								30117
							],
							[
								30833,
								30853
							],
							[
								31199,
								31221
							],
							[
								32635,
								32649
							],
							[
								36642,
								36656
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAywQAACAgY2h1bmtfdW5yZWYKICBjaHVua19hcnJheWJ1ZmZlcgogIHJlYWRlcl9uZXcKICByZWFkZXJfcmVsZWFzZV9sb2NrCiAgcmVhZGVyX2NsZWFyCiAgcmVhZGVyX2NhbmNlbAogIHJlYWRlcl9yZWFkCiAgcmVhZGVyX3NpZ25hbAogIHJlYWRlcl91cGRhdGUKICByZWFkZXJfcGFzc3Rocm91Z2gKICByZWFkYWJsZV9uZXcKICByZWFkYWJsZV9jbG9zZQogIHJlYWRhYmxlX2Fib3J0CiAgcmVhZGFibGVfZW5xdWV1ZQogIHJlYWRhYmxlX2xvY2sKICByZWFkYWJsZV91bmxvY2sKICByZWFkYWJsZV9nZXRfcmVhZGVyCiAgcmVhZGFibGVfZnJlZQogIGpzX3JlYWRlcl9jb25zdHJ1Y3RvcgogIGpzX3JlYWRlcl93cmFwCiAganNfcmVhZGVyX21ldGhvZAogIGpzX3JlYWRlcl9nZXQKICBqc19yZWFkZXJfZmluYWxpemVyCiAganNfcmVhZGFibGVfY2FsbGJhY2sKICBqc19yZWFkYWJsZV9jb25zdHJ1Y3RvcgogIGpzX3JlYWRhYmxlX3dyYXAKICBqc19yZWFkYWJsZV9tZXRob2QKICBqc19yZWFkYWJsZV9nZXQKICBqc19yZWFkYWJsZV9jb250cm9sbGVyCiAganNfcmVhZGFibGVfZGVzaXJlZAogIGpzX3JlYWRhYmxlX2ZpbmFsaXplcgogIHdyaXRlcl9uZXcKICB3cml0ZXJfcmVsZWFzZV9sb2NrCiAgd3JpdGVyX3dyaXRlCiAgd3JpdGVyX2Nsb3NlCiAgd3JpdGVyX2Fib3J0CiAgd3JpdGVyX3NpZ25hbAogIHdyaXRhYmxlX25ldwogIHdyaXRhYmxlX2Fib3J0CiAgd3JpdGFibGVfbG9jawogIHdyaXRhYmxlX3VubG9jawogIHdyaXRhYmxlX2dldF93cml0ZXIKICB3cml0YWJsZV9mcmVlCiAganNfd3JpdGVyX2NvbnN0cnVjdG9yCiAganNfd3JpdGVyX3dyYXAKICBqc193cml0ZXJfbWV0aG9kCiAganNfd3JpdGVyX2dldAogIGpzX3dyaXRlcl9maW5hbGl6ZXIKICBqc193cml0YWJsZV9jYWxsYmFjawogIGpzX3dyaXRhYmxlX2NvbnN0cnVjdG9yCiAganNfd3JpdGFibGVfd3JhcAogIGpzX3dyaXRhYmxlX2l0ZXJhdG9yCiAganNfd3JpdGFibGVfbWV0aG9kCiAganNfd3JpdGFibGVfZ2V0CiAganNfd3JpdGFibGVfY29udHJvbGxlcgogIGpzX3dyaXRhYmxlX2ZpbmFsaXplcgogIHRyYW5zZm9ybV9uZXcKICBqc190cmFuc2Zvcm1fY29uc3RydWN0b3IKICBqc190cmFuc2Zvcm1fZ2V0CiAganNfdHJhbnNmb3JtX2NvbnRyb2xsZXIKICBqc190cmFuc2Zvcm1fZGVzaXJlZAogIGpzX3RyYW5zZm9ybV9maW5hbGl6ZXIKICBqc19zdHJlYW1faW5pdApKU19JTklUX01PRFVMRQAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1462,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1463,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28375,
								28399
							],
							[
								29580,
								29596
							],
							[
								30094,
								30117
							],
							[
								30833,
								30853
							],
							[
								31199,
								31221
							],
							[
								32635,
								32649
							],
							[
								36642,
								36656
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AQAAAAAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1464,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1465,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28375,
								28399
							],
							[
								29580,
								29596
							],
							[
								30094,
								30117
							],
							[
								30833,
								30853
							],
							[
								31199,
								31221
							],
							[
								32635,
								32649
							],
							[
								36642,
								36656
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AQAAAAAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1466,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1467,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28375,
								28399
							],
							[
								29580,
								29596
							],
							[
								30094,
								30117
							],
							[
								30833,
								30853
							],
							[
								31199,
								31221
							],
							[
								32635,
								32649
							],
							[
								36642,
								36656
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AQAAAAAAAAAAAAAAywQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					1468,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
						"symkeys":
						[
							[
								985,
								996
							],
							[
								1098,
								1115
							],
							[
								1314,
								1324
							],
							[
								1744,
								1763
							],
							[
								1989,
								2001
							],
							[
								2265,
								2278
							],
							[
								2467,
								2478
							],
							[
								3043,
								3056
							],
							[
								3318,
								3331
							],
							[
								3969,
								3987
							],
							[
								4298,
								4310
							],
							[
								4499,
								4513
							],
							[
								4989,
								5003
							],
							[
								5474,
								5490
							],
							[
								6204,
								6217
							],
							[
								6350,
								6365
							],
							[
								6465,
								6484
							],
							[
								6672,
								6685
							],
							[
								7005,
								7026
							],
							[
								7869,
								7883
							],
							[
								8776,
								8792
							],
							[
								9382,
								9395
							],
							[
								9725,
								9744
							],
							[
								10532,
								10552
							],
							[
								11386,
								11409
							],
							[
								12452,
								12468
							],
							[
								13240,
								13258
							],
							[
								13865,
								13880
							],
							[
								14363,
								14385
							],
							[
								14930,
								14949
							],
							[
								15273,
								15294
							],
							[
								16811,
								16821
							],
							[
								17192,
								17211
							],
							[
								17441,
								17453
							],
							[
								17947,
								17959
							],
							[
								18152,
								18164
							],
							[
								18592,
								18605
							],
							[
								18873,
								18885
							],
							[
								19076,
								19090
							],
							[
								19331,
								19344
							],
							[
								19477,
								19492
							],
							[
								19592,
								19611
							],
							[
								19852,
								19865
							],
							[
								20158,
								20179
							],
							[
								21020,
								21034
							],
							[
								21290,
								21306
							],
							[
								22156,
								22169
							],
							[
								22607,
								22626
							],
							[
								23451,
								23471
							],
							[
								23769,
								23792
							],
							[
								24892,
								24908
							],
							[
								25107,
								25127
							],
							[
								25343,
								25361
							],
							[
								26031,
								26046
							],
							[
								26538,
								26560
							],
							[
								26929,
								26950
							],
							[
								28006,
								28019
							],
							[
								28375,
								28399
							],
							[
								29646,
								29662
							],
							[
								30160,
								30183
							],
							[
								30899,
								30919
							],
							[
								31265,
								31287
							],
							[
								32701,
								32715
							],
							[
								36708,
								36722
							]
						],
						"symlist":
						[
							"chunk_unref",
							"chunk_arraybuffer",
							"reader_new",
							"reader_release_lock",
							"reader_clear",
							"reader_cancel",
							"reader_read",
							"reader_signal",
							"reader_update",
							"reader_passthrough",
							"readable_new",
							"readable_close",
							"readable_abort",
							"readable_enqueue",
							"readable_lock",
							"readable_unlock",
							"readable_get_reader",
							"readable_free",
							"js_reader_constructor",
							"js_reader_wrap",
							"js_reader_method",
							"js_reader_get",
							"js_reader_finalizer",
							"js_readable_callback",
							"js_readable_constructor",
							"js_readable_wrap",
							"js_readable_method",
							"js_readable_get",
							"js_readable_controller",
							"js_readable_desired",
							"js_readable_finalizer",
							"writer_new",
							"writer_release_lock",
							"writer_write",
							"writer_close",
							"writer_abort",
							"writer_signal",
							"writable_new",
							"writable_abort",
							"writable_lock",
							"writable_unlock",
							"writable_get_writer",
							"writable_free",
							"js_writer_constructor",
							"js_writer_wrap",
							"js_writer_method",
							"js_writer_get",
							"js_writer_finalizer",
							"js_writable_callback",
							"js_writable_constructor",
							"js_writable_wrap",
							"js_writable_iterator",
							"js_writable_method",
							"js_writable_get",
							"js_writable_controller",
							"js_writable_finalizer",
							"transform_new",
							"js_transform_constructor",
							"js_transform_get",
							"js_transform_controller",
							"js_transform_desired",
							"js_transform_finalizer",
							"js_stream_init",
							"JS_INIT_MODULE"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADLBAAAICBjaHVua191bnJlZgogIGNodW5rX2FycmF5YnVmZmVyCiAgcmVhZGVyX25ldwogIHJlYWRlcl9yZWxlYXNlX2xvY2sKICByZWFkZXJfY2xlYXIKICByZWFkZXJfY2FuY2VsCiAgcmVhZGVyX3JlYWQKICByZWFkZXJfc2lnbmFsCiAgcmVhZGVyX3VwZGF0ZQogIHJlYWRlcl9wYXNzdGhyb3VnaAogIHJlYWRhYmxlX25ldwogIHJlYWRhYmxlX2Nsb3NlCiAgcmVhZGFibGVfYWJvcnQKICByZWFkYWJsZV9lbnF1ZXVlCiAgcmVhZGFibGVfbG9jawogIHJlYWRhYmxlX3VubG9jawogIHJlYWRhYmxlX2dldF9yZWFkZXIKICByZWFkYWJsZV9mcmVlCiAganNfcmVhZGVyX2NvbnN0cnVjdG9yCiAganNfcmVhZGVyX3dyYXAKICBqc19yZWFkZXJfbWV0aG9kCiAganNfcmVhZGVyX2dldAogIGpzX3JlYWRlcl9maW5hbGl6ZXIKICBqc19yZWFkYWJsZV9jYWxsYmFjawogIGpzX3JlYWRhYmxlX2NvbnN0cnVjdG9yCiAganNfcmVhZGFibGVfd3JhcAogIGpzX3JlYWRhYmxlX21ldGhvZAogIGpzX3JlYWRhYmxlX2dldAogIGpzX3JlYWRhYmxlX2NvbnRyb2xsZXIKICBqc19yZWFkYWJsZV9kZXNpcmVkCiAganNfcmVhZGFibGVfZmluYWxpemVyCiAgd3JpdGVyX25ldwogIHdyaXRlcl9yZWxlYXNlX2xvY2sKICB3cml0ZXJfd3JpdGUKICB3cml0ZXJfY2xvc2UKICB3cml0ZXJfYWJvcnQKICB3cml0ZXJfc2lnbmFsCiAgd3JpdGFibGVfbmV3CiAgd3JpdGFibGVfYWJvcnQKICB3cml0YWJsZV9sb2NrCiAgd3JpdGFibGVfdW5sb2NrCiAgd3JpdGFibGVfZ2V0X3dyaXRlcgogIHdyaXRhYmxlX2ZyZWUKICBqc193cml0ZXJfY29uc3RydWN0b3IKICBqc193cml0ZXJfd3JhcAogIGpzX3dyaXRlcl9tZXRob2QKICBqc193cml0ZXJfZ2V0CiAganNfd3JpdGVyX2ZpbmFsaXplcgogIGpzX3dyaXRhYmxlX2NhbGxiYWNrCiAganNfd3JpdGFibGVfY29uc3RydWN0b3IKICBqc193cml0YWJsZV93cmFwCiAganNfd3JpdGFibGVfaXRlcmF0b3IKICBqc193cml0YWJsZV9tZXRob2QKICBqc193cml0YWJsZV9nZXQKICBqc193cml0YWJsZV9jb250cm9sbGVyCiAganNfd3JpdGFibGVfZmluYWxpemVyCiAgdHJhbnNmb3JtX25ldwogIGpzX3RyYW5zZm9ybV9jb25zdHJ1Y3RvcgogIGpzX3RyYW5zZm9ybV9nZXQKICBqc190cmFuc2Zvcm1fY29udHJvbGxlcgogIGpzX3RyYW5zZm9ybV9kZXNpcmVkCiAganNfdHJhbnNmb3JtX2ZpbmFsaXplcgogIGpzX3N0cmVhbV9pbml0CkpTX0lOSVRfTU9EVUxFAAAAAAAAAADLBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "qjsm.c",
			"settings":
			{
				"buffer_size": 42936,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					180,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAsRwAAAAAAACxHAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAsRwAAAAAAACxHAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-internal.h",
			"settings":
			{
				"buffer_size": 37631,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD/kgAAI2lmbmRlZiBRSlNfTU9EVUxFU19JTlRFUk5BTF9ICiNkZWZpbmUgUUpTX01PRFVMRVNfSU5URVJOQUxfSAoKI2luY2x1ZGUgPGxpc3QuaD4KI2luY2x1ZGUgPGN1dGlscy5oPgojaW5jbHVkZSA8cXVpY2tqcy5oPgojaW5jbHVkZSA8c3RkZGVmLmg+CiNpbmNsdWRlIDxzeXMvdHlwZXMuaD4KCiNpbmNsdWRlIDxxdWlja2pzLWNvbmZpZy5oPgoKI2lmZGVmIENPTkZJR19CSUdOVU0KI2luY2x1ZGUgPGxpYmJmLmg+CiNlbmRpZgojaWZkZWYgQ09ORklHX0RFQlVHR0VSCiNpbmNsdWRlIDxxdWlja2pzLWRlYnVnZ2VyLmg+CiNlbmRpZgojaWZkZWYgVVNFX1dPUktFUgojaW5jbHVkZSA8cHRocmVhZC5oPgojZW5kaWYKCmVudW0gSlNDbGFzc0lkcyB7CiAgLyogY2xhc3NpZCB0YWcgICAgICAgICovIC8qIHVuaW9uIHVzYWdlICAgfCBwcm9wZXJ0aWVzICovCiAgSlNfQ0xBU1NfT0JKRUNUID0gMSwgICAgIC8qIG11c3QgYmUgZmlyc3QgKi8KICBKU19DTEFTU19BUlJBWSwgICAgICAgICAgLyogdS5hcnJheSAgICAgICB8IGxlbmd0aCAqLwogIEpTX0NMQVNTX0VSUk9SLAogIEpTX0NMQVNTX05VTUJFUiwgICAgICAgICAgIC8qIHUub2JqZWN0X2RhdGEgKi8KICBKU19DTEFTU19TVFJJTkcsICAgICAgICAgICAvKiB1Lm9iamVjdF9kYXRhICovCiAgSlNfQ0xBU1NfQk9PTEVBTiwgICAgICAgICAgLyogdS5vYmplY3RfZGF0YSAqLwogIEpTX0NMQVNTX1NZTUJPTCwgICAgICAgICAgIC8qIHUub2JqZWN0X2RhdGEgKi8KICBKU19DTEFTU19BUkdVTUVOVFMsICAgICAgICAvKiB1LmFycmF5ICAgICAgIHwgbGVuZ3RoICovCiAgSlNfQ0xBU1NfTUFQUEVEX0FSR1VNRU5UUywgLyogICAgICAgICAgICAgICB8IGxlbmd0aCAqLwogIEpTX0NMQVNTX0RBVEUsICAgICAgICAgICAgIC8qIHUub2JqZWN0X2RhdGEgKi8KICBKU19DTEFTU19NT0RVTEVfTlMsCiAgSlNfQ0xBU1NfQ19GVU5DVElPTiwgICAgICAgICAgLyogdS5jZnVuYyAqLwogIEpTX0NMQVNTX0JZVEVDT0RFX0ZVTkNUSU9OLCAgIC8qIHUuZnVuYyAqLwogIEpTX0NMQVNTX0JPVU5EX0ZVTkNUSU9OLCAgICAgIC8qIHUuYm91bmRfZnVuY3Rpb24gKi8KICBKU19DTEFTU19DX0ZVTkNUSU9OX0RBVEEsICAgICAvKiB1LmNfZnVuY3Rpb25fZGF0YV9yZWNvcmQgKi8KICBKU19DTEFTU19DX0NMT1NVUkUsICAgICAgICAgICAvKiB1LmNfY2xvc3VyZV9yZWNvcmQgKi8KICBKU19DTEFTU19HRU5FUkFUT1JfRlVOQ1RJT04sICAvKiB1LmZ1bmMgKi8KICBKU19DTEFTU19GT1JfSU5fSVRFUkFUT1IsICAgICAvKiB1LmZvcl9pbl9pdGVyYXRvciAqLwogIEpTX0NMQVNTX1JFR0VYUCwgICAgICAgICAgICAgIC8qIHUucmVnZXhwICovCiAgSlNfQ0xBU1NfQVJSQVlfQlVGRkVSLCAgICAgICAgLyogdS5hcnJheV9idWZmZXIgKi8KICBKU19DTEFTU19TSEFSRURfQVJSQVlfQlVGRkVSLCAvKiB1LmFycmF5X2J1ZmZlciAqLwogIEpTX0NMQVNTX1VJTlQ4Q19BUlJBWSwgICAgICAgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwogIEpTX0NMQVNTX0lOVDhfQVJSQVksICAgICAgICAgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwogIEpTX0NMQVNTX1VJTlQ4X0FSUkFZLCAgICAgICAgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwogIEpTX0NMQVNTX0lOVDE2X0FSUkFZLCAgICAgICAgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwogIEpTX0NMQVNTX1VJTlQxNl9BUlJBWSwgICAgICAgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwogIEpTX0NMQVNTX0lOVDMyX0FSUkFZLCAgICAgICAgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwogIEpTX0NMQVNTX1VJTlQzMl9BUlJBWSwgICAgICAgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwojaWZkZWYgQ09ORklHX0JJR05VTQogIEpTX0NMQVNTX0JJR19JTlQ2NF9BUlJBWSwgIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwogIEpTX0NMQVNTX0JJR19VSU5UNjRfQVJSQVksIC8qIHUuYXJyYXkgKHR5cGVkX2FycmF5KSAqLwojZW5kaWYKICBKU19DTEFTU19GTE9BVDMyX0FSUkFZLCAvKiB1LmFycmF5ICh0eXBlZF9hcnJheSkgKi8KICBKU19DTEFTU19GTE9BVDY0X0FSUkFZLCAvKiB1LmFycmF5ICh0eXBlZF9hcnJheSkgKi8KICBKU19DTEFTU19EQVRBVklFVywgICAgICAvKiB1LnR5cGVkX2FycmF5ICovCiNpZmRlZiBDT05GSUdfQklHTlVNCiAgSlNfQ0xBU1NfQklHX0lOVCwgICAgICAvKiB1Lm9iamVjdF9kYXRhICovCiAgSlNfQ0xBU1NfQklHX0ZMT0FULCAgICAvKiB1Lm9iamVjdF9kYXRhICovCiAgSlNfQ0xBU1NfRkxPQVRfRU5WLCAgICAvKiB1LmZsb2F0X2VudiAqLwogIEpTX0NMQVNTX0JJR19ERUNJTUFMLCAgLyogdS5vYmplY3RfZGF0YSAqLwogIEpTX0NMQVNTX09QRVJBVE9SX1NFVCwgLyogdS5vcGVyYXRvcl9zZXQgKi8KI2VuZGlmCiAgSlNfQ0xBU1NfTUFQLCAgICAgICAgICAgICAgICAgICAgICAvKiB1Lm1hcF9zdGF0ZSAqLwogIEpTX0NMQVNTX1NFVCwgICAgICAgICAgICAgICAgICAgICAgLyogdS5tYXBfc3RhdGUgKi8KICBKU19DTEFTU19XRUFLTUFQLCAgICAgICAgICAgICAgICAgIC8qIHUubWFwX3N0YXRlICovCiAgSlNfQ0xBU1NfV0VBS1NFVCwgICAgICAgICAgICAgICAgICAvKiB1Lm1hcF9zdGF0ZSAqLwogIEpTX0NMQVNTX01BUF9JVEVSQVRPUiwgICAgICAgICAgICAgLyogdS5tYXBfaXRlcmF0b3JfZGF0YSAqLwogIEpTX0NMQVNTX1NFVF9JVEVSQVRPUiwgICAgICAgICAgICAgLyogdS5tYXBfaXRlcmF0b3JfZGF0YSAqLwogIEpTX0NMQVNTX0FSUkFZX0lURVJBVE9SLCAgICAgICAgICAgLyogdS5hcnJheV9pdGVyYXRvcl9kYXRhICovCiAgSlNfQ0xBU1NfU1RSSU5HX0lURVJBVE9SLCAgICAgICAgICAvKiB1LmFycmF5X2l0ZXJhdG9yX2RhdGEgKi8KICBKU19DTEFTU19SRUdFWFBfU1RSSU5HX0lURVJBVE9SLCAgIC8qIHUucmVnZXhwX3N0cmluZ19pdGVyYXRvcl9kYXRhICovCiAgSlNfQ0xBU1NfR0VORVJBVE9SLCAgICAgICAgICAgICAgICAvKiB1LmdlbmVyYXRvcl9kYXRhICovCiAgSlNfQ0xBU1NfUFJPWFksICAgICAgICAgICAgICAgICAgICAvKiB1LnByb3h5X2RhdGEgKi8KICBKU19DTEFTU19QUk9NSVNFLCAgICAgICAgICAgICAgICAgIC8qIHUucHJvbWlzZV9kYXRhICovCiAgSlNfQ0xBU1NfUFJPTUlTRV9SRVNPTFZFX0ZVTkNUSU9OLCAvKiB1LnByb21pc2VfZnVuY3Rpb25fZGF0YSAqLwogIEpTX0NMQVNTX1BST01JU0VfUkVKRUNUX0ZVTkNUSU9OLCAgLyogdS5wcm9taXNlX2Z1bmN0aW9uX2RhdGEgKi8KICBKU19DTEFTU19BU1lOQ19GVU5DVElPTiwgICAgICAgICAgIC8qIHUuZnVuYyAqLwogIEpTX0NMQVNTX0FTWU5DX0ZVTkNUSU9OX1JFU09MVkUsICAgLyogdS5hc3luY19mdW5jdGlvbl9kYXRhICovCiAgSlNfQ0xBU1NfQVNZTkNfRlVOQ1RJT05fUkVKRUNULCAgICAvKiB1LmFzeW5jX2Z1bmN0aW9uX2RhdGEgKi8KICBKU19DTEFTU19BU1lOQ19GUk9NX1NZTkNfSVRFUkFUT1IsIC8qIHUuYXN5bmNfZnJvbV9zeW5jX2l0ZXJhdG9yX2RhdGEgKi8KICBKU19DTEFTU19BU1lOQ19HRU5FUkFUT1JfRlVOQ1RJT04sIC8qIHUuZnVuYyAqLwogIEpTX0NMQVNTX0FTWU5DX0dFTkVSQVRPUiwgICAgICAgICAgLyogdS5hc3luY19nZW5lcmF0b3JfZGF0YSAqLwoKICBKU19DTEFTU19JTklUX0NPVU5ULCAvKiBsYXN0IGVudHJ5IGZvciBwcmVkZWZpbmVkIGNsYXNzZXMgKi8KfTsKCnR5cGVkZWYgZW51bSBKU0Vycm9yRW51bSB7CiAgSlNfRVZBTF9FUlJPUiwKICBKU19SQU5HRV9FUlJPUiwKICBKU19SRUZFUkVOQ0VfRVJST1IsCiAgSlNfU1lOVEFYX0VSUk9SLAogIEpTX1RZUEVfRVJST1IsCiAgSlNfVVJJX0VSUk9SLAogIEpTX0lOVEVSTkFMX0VSUk9SLAogIEpTX0FHR1JFR0FURV9FUlJPUiwKICBKU19OQVRJVkVfRVJST1JfQ09VTlQKfSBKU0Vycm9yRW51bTsKCnR5cGVkZWYgZW51bSBPUENvZGVFbnVtIE9QQ29kZUVudW07Cgp0eXBlZGVmIHN0cnVjdCBKU1N0cmluZyBKU1N0cmluZzsKdHlwZWRlZiBzdHJ1Y3QgSlNTdHJpbmcgSlNBdG9tU3RydWN0Owp0eXBlZGVmIHN0cnVjdCBKU1NoYXBlIEpTU2hhcGU7Cgp0eXBlZGVmIGVudW0gewogIEpTX0dDX1BIQVNFX05PTkUsCiAgSlNfR0NfUEhBU0VfREVDUkVGLAogIEpTX0dDX1BIQVNFX1JFTU9WRV9DWUNMRVMsCn0gSlNHQ1BoYXNlRW51bTsKCiNpZmRlZiBDT05GSUdfQklHTlVNCi8qIGZ1bmN0aW9uIHBvaW50ZXJzIGFyZSB1c2VkIGZvciBudW1lcmljIG9wZXJhdGlvbnMgc28gdGhhdCBpdCBpcwogICBwb3NzaWJsZSB0byByZW1vdmUgc29tZSBudW1lcmljIHR5cGVzICovCnR5cGVkZWYgc3RydWN0IHsKICBKU1ZhbHVlICgqdG9fc3RyaW5nKShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbCk7CiAgSlNWYWx1ZSAoKmZyb21fc3RyaW5nKShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogYnVmLCBpbnQgcmFkaXgsIGludCBmbGFncywgc2xpbWJfdCogcGV4cG9uZW50KTsKICBpbnQgKCp1bmFyeV9hcml0aCkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUqIHByZXMsIE9QQ29kZUVudW0gb3AsIEpTVmFsdWUgb3AxKTsKICBpbnQgKCpiaW5hcnlfYXJpdGgpKEpTQ29udGV4dCogY3R4LCBPUENvZGVFbnVtIG9wLCBKU1ZhbHVlKiBwcmVzLCBKU1ZhbHVlIG9wMSwgSlNWYWx1ZSBvcDIpOwogIGludCAoKmNvbXBhcmUpKEpTQ29udGV4dCogY3R4LCBPUENvZGVFbnVtIG9wLCBKU1ZhbHVlIG9wMSwgSlNWYWx1ZSBvcDIpOwogIC8qIG9ubHkgZm9yIGJpZ2Zsb2F0OiAqLwogIEpTVmFsdWUgKCptdWxfcG93MTBfdG9fZmxvYXQ2NCkoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGJmX3QqIGEsIGludDY0X3QgZXhwb25lbnQpOwogIGludCAoKm11bF9wb3cxMCkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUqIHNwKTsKfSBKU051bWVyaWNPcGVyYXRpb25zOwojZW5kaWYKCnR5cGVkZWYgc3RydWN0IEpTUnVudGltZSB7CiAgSlNNYWxsb2NGdW5jdGlvbnMgbWY7CiAgSlNNYWxsb2NTdGF0ZSBtYWxsb2Nfc3RhdGU7CiAgY29uc3QgY2hhciogcnRfaW5mbzsKICBpbnQgYXRvbV9oYXNoX3NpemU7CiAgaW50IGF0b21fY291bnQ7CiAgaW50IGF0b21fc2l6ZTsKICBpbnQgYXRvbV9jb3VudF9yZXNpemU7CiAgdWludDMyX3QqIGF0b21faGFzaDsKICBKU0F0b21TdHJ1Y3QqKiBhdG9tX2FycmF5OwogIGludCBhdG9tX2ZyZWVfaW5kZXg7CiAgaW50IGNsYXNzX2NvdW50OwogIEpTQ2xhc3MqIGNsYXNzX2FycmF5OwogIHN0cnVjdCBsaXN0X2hlYWQgY29udGV4dF9saXN0OwogIHN0cnVjdCBsaXN0X2hlYWQgZ2Nfb2JqX2xpc3Q7CiAgc3RydWN0IGxpc3RfaGVhZCBnY196ZXJvX3JlZl9jb3VudF9saXN0OwogIHN0cnVjdCBsaXN0X2hlYWQgdG1wX29ial9saXN0OwogIEpTR0NQaGFzZUVudW0gZ2NfcGhhc2UgOiA4OwogIHNpemVfdCBtYWxsb2NfZ2NfdGhyZXNob2xkOwojaWZkZWYgRFVNUF9MRUFLUwogIHN0cnVjdCBsaXN0X2hlYWQgc3RyaW5nX2xpc3Q7CiNlbmRpZgogIHVpbnRwdHJfdCBzdGFja19zaXplOwogIHVpbnRwdHJfdCBzdGFja190b3A7CiAgdWludHB0cl90IHN0YWNrX2xpbWl0OwogIEpTVmFsdWUgY3VycmVudF9leGNlcHRpb247CiAgQk9PTCBpbl9vdXRfb2ZfbWVtb3J5IDogODsKICBzdHJ1Y3QgSlNTdGFja0ZyYW1lKiBjdXJyZW50X3N0YWNrX2ZyYW1lOwogIEpTSW50ZXJydXB0SGFuZGxlciogaW50ZXJydXB0X2hhbmRsZXI7CiAgdm9pZCogaW50ZXJydXB0X29wYXF1ZTsKICBKU0hvc3RQcm9taXNlUmVqZWN0aW9uVHJhY2tlciogaG9zdF9wcm9taXNlX3JlamVjdGlvbl90cmFja2VyOwogIHZvaWQqIGhvc3RfcHJvbWlzZV9yZWplY3Rpb25fdHJhY2tlcl9vcGFxdWU7CiAgc3RydWN0IGxpc3RfaGVhZCBqb2JfbGlzdDsKICBKU01vZHVsZU5vcm1hbGl6ZUZ1bmMqIG1vZHVsZV9ub3JtYWxpemVfZnVuYzsKICBKU01vZHVsZUxvYWRlckZ1bmMqIG1vZHVsZV9sb2FkZXJfZnVuYzsKICB2b2lkKiBtb2R1bGVfbG9hZGVyX29wYXF1ZTsKICBCT09MIGNhbl9ibG9jayA6IDg7CiAgSlNTaGFyZWRBcnJheUJ1ZmZlckZ1bmN0aW9ucyBzYWJfZnVuY3M7CiAgaW50IHNoYXBlX2hhc2hfYml0czsKICBpbnQgc2hhcGVfaGFzaF9zaXplOwogIGludCBzaGFwZV9oYXNoX2NvdW50OwogIEpTU2hhcGUqKiBzaGFwZV9oYXNoOwojaWZkZWYgQ09ORklHX0JJR05VTQogIGJmX2NvbnRleHRfdCBiZl9jdHg7CiAgSlNOdW1lcmljT3BlcmF0aW9ucyBiaWdpbnRfb3BzOwogIEpTTnVtZXJpY09wZXJhdGlvbnMgYmlnZmxvYXRfb3BzOwogIEpTTnVtZXJpY09wZXJhdGlvbnMgYmlnZGVjaW1hbF9vcHM7CiAgdWludDMyX3Qgb3BlcmF0b3JfY291bnQ7CiNlbmRpZgogIHZvaWQqIHVzZXJfb3BhcXVlOwp9IEpTUnVudGltZTsKCnN0cnVjdCBKU0NsYXNzIHsKICB1aW50MzJfdCBjbGFzc19pZDsgLyogMCBtZWFucyBmcmVlIGVudHJ5ICovCiAgSlNBdG9tIGNsYXNzX25hbWU7CiAgSlNDbGFzc0ZpbmFsaXplciogZmluYWxpemVyOwogIEpTQ2xhc3NHQ01hcmsqIGdjX21hcms7CiAgSlNDbGFzc0NhbGwqIGNhbGw7CiAgLyogcG9pbnRlcnMgZm9yIGV4b3RpYyBiZWhhdmlvciwgY2FuIGJlIE5VTEwgaWYgbm9uZSBhcmUgcHJlc2VudCAqLwogIGNvbnN0IEpTQ2xhc3NFeG90aWNNZXRob2RzKiBleG90aWM7Cn07CgojZGVmaW5lIEpTX01PREVfU1RSSUNUICgxIDw8IDApCiNkZWZpbmUgSlNfTU9ERV9TVFJJUCAoMSA8PCAxKQojZGVmaW5lIEpTX01PREVfTUFUSCAoMSA8PCAyKQoKdHlwZWRlZiBzdHJ1Y3QgSlNTdGFja0ZyYW1lIHsKICBzdHJ1Y3QgSlNTdGFja0ZyYW1lKiBwcmV2X2ZyYW1lOwogIEpTVmFsdWUgY3VyX2Z1bmM7CiAgSlNWYWx1ZSogYXJnX2J1ZjsgICAgICAgICAgICAgIC8qIGFyZ3VtZW50cyAqLwogIEpTVmFsdWUqIHZhcl9idWY7ICAgICAgICAgICAgICAvKiB2YXJpYWJsZXMgKi8KICBzdHJ1Y3QgbGlzdF9oZWFkIHZhcl9yZWZfbGlzdDsgLyogbGlzdCBvZiBKU1ZhclJlZi5saW5rICovCiAgY29uc3QgdWludDhfdCogY3VyX3BjOyAgICAgICAgIC8qIGJ5dGVjb2RlIGZ1bmN0aW9ucyA6IFBDIG9mIHRoZSBpbnN0cnVjdGlvbiBhZnRlciB0aGUgY2FsbCAqLwogIGludCBhcmdfY291bnQ7CiAgaW50IGpzX21vZGU7IC8qIDAgb3IgSlNfTU9ERV9NQVRIIGZvciBDIGZ1bmN0aW9ucyAqLwogIC8qIG9ubHkgdXNlZCBpbiBnZW5lcmF0b3JzLiBDdXJyZW50IHN0YWNrIHBvaW50ZXIgdmFsdWUgb3IgTlVMTCBpZiB0aGUKICAgKiBmdW5jdGlvbiBpcyBydW5uaW5nLiAqLwogIEpTVmFsdWUqIGN1cl9zcDsKfSBKU1N0YWNrRnJhbWU7Cgp0eXBlZGVmIGVudW0gewogIEpTX0dDX09CSl9UWVBFX0pTX09CSkVDVCwKICBKU19HQ19PQkpfVFlQRV9GVU5DVElPTl9CWVRFQ09ERSwKICBKU19HQ19PQkpfVFlQRV9TSEFQRSwKICBKU19HQ19PQkpfVFlQRV9WQVJfUkVGLAogIEpTX0dDX09CSl9UWVBFX0FTWU5DX0ZVTkNUSU9OLAogIEpTX0dDX09CSl9UWVBFX0pTX0NPTlRFWFQsCn0gSlNHQ09iamVjdFR5cGVFbnVtOwoKc3RydWN0IEpTR0NPYmplY3RIZWFkZXIgewogIGludCByZWZfY291bnQ7CiAgSlNHQ09iamVjdFR5cGVFbnVtIGdjX29ial90eXBlIDogNDsKICB1aW50OF90IG1hcmsgOiA0OwogIHVpbnQ4X3QgZHVtbXkxOwogIHVpbnQxNl90IGR1bW15MjsKICBzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7Cn07Cgp0eXBlZGVmIHN0cnVjdCBKU1ZhclJlZiB7CiAgdW5pb24gewogICAgSlNHQ09iamVjdEhlYWRlciBoZWFkZXI7CiAgICBzdHJ1Y3QgewogICAgICBpbnQgX19nY19yZWZfY291bnQ7CiAgICAgIHVpbnQ4X3QgX19nY19tYXJrOwogICAgICAvKiAwIDogdGhlIEpTVmFyUmVmIGlzIG9uIHRoZSBzdGFjay4gaGVhZGVyLmxpbmsgaXMgYW4gZWxlbWVudAogICAgICAgICBvZiBKU1N0YWNrRnJhbWUudmFyX3JlZl9saXN0LgogICAgICAgICAxIDogdGhlIEpTVmFyUmVmIGlzIGRldGFjaGVkLiBoZWFkZXIubGluayBoYXMgdGhlIG5vcm1hbCBtZWFubmluZwogICAgICAqLwogICAgICB1aW50OF90IGlzX2RldGFjaGVkIDogMTsKICAgICAgdWludDhfdCBpc19hcmcgOiAxOwogICAgICB1aW50MTZfdCB2YXJfaWR4OyAvKiBpbmRleCBvZiB0aGUgY29ycmVzcG9uZGluZyBmdW5jdGlvbiB2YXJpYWJsZSBvbiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhY2sgKi8KICAgIH07CiAgfTsKICBKU1ZhbHVlKiBwdmFsdWU7IC8qIHBvaW50ZXIgdG8gdGhlIHZhbHVlLCBlaXRoZXIgb24gdGhlIHN0YWNrIG9yIHRvICd2YWx1ZScgKi8KICBKU1ZhbHVlIHZhbHVlOyAgIC8qIHVzZWQgd2hlbiB0aGUgdmFyaWFibGUgaXMgbm8gbG9uZ2VyIG9uIHRoZSBzdGFjayAqLwp9IEpTVmFyUmVmOwoKdHlwZWRlZiBzdHJ1Y3QgSlNGbG9hdEVudiB7CiAgdWludHB0cl90IHByZWM7CiAgdWludDMyX3QgZmxhZ3M7CiAgdW5zaWduZWQgaW50IHN0YXR1czsKfSBKU0Zsb2F0RW52OwoKI2lmZGVmIENPTkZJR19CSUdOVU0KLyogdGhlIHNhbWUgc3RydWN0dXJlIGlzIHVzZWQgZm9yIGJpZyBpbnRlZ2VycyBhbmQgYmlnIGZsb2F0cy4gQmlnCiAgIGludGVnZXJzIGFyZSBuZXZlciBpbmZpbml0ZSBvciBOYU5zICovCnR5cGVkZWYgc3RydWN0IEpTQmlnRmxvYXQgewogIEpTUmVmQ291bnRIZWFkZXIgaGVhZGVyOyAvKiBtdXN0IGNvbWUgZmlyc3QsIDMyLWJpdCAqLwogIGJmX3QgbnVtOwp9IEpTQmlnRmxvYXQ7Cgp0eXBlZGVmIHN0cnVjdCBKU0JpZ0RlY2ltYWwgewogIEpTUmVmQ291bnRIZWFkZXIgaGVhZGVyOyAvKiBtdXN0IGNvbWUgZmlyc3QsIDMyLWJpdCAqLwogIGJmZGVjX3QgbnVtOwp9IEpTQmlnRGVjaW1hbDsKI2VuZGlmCgp0eXBlZGVmIGVudW0gewogIEpTX0FVVE9JTklUX0lEX1BST1RPVFlQRSwKICBKU19BVVRPSU5JVF9JRF9NT0RVTEVfTlMsCiAgSlNfQVVUT0lOSVRfSURfUFJPUCwKfSBKU0F1dG9Jbml0SURFbnVtOwoKLyogbXVzdCBiZSBsYXJnZSBlbm91Z2ggdG8gaGF2ZSBhIG5lZ2xpZ2libGUgcnVudGltZSBjb3N0IGFuZCBzbWFsbCBlbm91Z2ggdG8KICogY2FsbCB0aGUgaW50ZXJydXB0IGNhbGxiYWNrIG9mdGVuLiAqLwojZGVmaW5lIEpTX0lOVEVSUlVQVF9DT1VOVEVSX0lOSVQgMTAwMDAKCnN0cnVjdCBKU0NvbnRleHQgewogIEpTR0NPYmplY3RIZWFkZXIgaGVhZGVyOyAvKiBtdXN0IGNvbWUgZmlyc3QgKi8KICBKU1J1bnRpbWUqIHJ0OwogIHN0cnVjdCBsaXN0X2hlYWQgbGluazsKCiAgdWludDE2X3QgYmluYXJ5X29iamVjdF9jb3VudDsKICBpbnQgYmluYXJ5X29iamVjdF9zaXplOwoKICBKU1NoYXBlKiBhcnJheV9zaGFwZTsgLyogaW5pdGlhbCBzaGFwZSBmb3IgQXJyYXkgb2JqZWN0cyAqLwoKICBKU1ZhbHVlKiBjbGFzc19wcm90bzsKICBKU1ZhbHVlIGZ1bmN0aW9uX3Byb3RvOwogIEpTVmFsdWUgZnVuY3Rpb25fY3RvcjsKICBKU1ZhbHVlIGFycmF5X2N0b3I7CiAgSlNWYWx1ZSByZWdleHBfY3RvcjsKICBKU1ZhbHVlIHByb21pc2VfY3RvcjsKICBKU1ZhbHVlIG5hdGl2ZV9lcnJvcl9wcm90b1tKU19OQVRJVkVfRVJST1JfQ09VTlRdOwogIEpTVmFsdWUgaXRlcmF0b3JfcHJvdG87CiAgSlNWYWx1ZSBhc3luY19pdGVyYXRvcl9wcm90bzsKICBKU1ZhbHVlIGFycmF5X3Byb3RvX3ZhbHVlczsKICBKU1ZhbHVlIHRocm93X3R5cGVfZXJyb3I7CiAgSlNWYWx1ZSBldmFsX29iajsKCiAgSlNWYWx1ZSBnbG9iYWxfb2JqOyAgICAgLyogZ2xvYmFsIG9iamVjdCAqLwogIEpTVmFsdWUgZ2xvYmFsX3Zhcl9vYmo7IC8qIGNvbnRhaW5zIHRoZSBnbG9iYWwgbGV0L2NvbnN0IGRlZmluaXRpb25zICovCgogIHVpbnQ2NF90IHJhbmRvbV9zdGF0ZTsKI2lmZGVmIENPTkZJR19CSUdOVU0KICAvKmJmX2NvbnRleHRfdCovIHZvaWQqIGJmX2N0eDsgLyogcG9pbnRzIHRvIHJ0LT5iZl9jdHgsIHNoYXJlZCBieSBhbGwgY29udGV4dHMgKi8KICBKU0Zsb2F0RW52IGZwX2VudjsgICAgICAgICAgICAgLyogZ2xvYmFsIEZQIGVudmlyb25tZW50ICovCiAgQk9PTCBiaWdudW1fZXh0IDogODsgICAgICAgICAgIC8qIGVuYWJsZSBtYXRoIG1vZGUgKi8KICBCT09MIGFsbG93X29wZXJhdG9yX292ZXJsb2FkaW5nIDogODsKI2VuZGlmCiAgLyogd2hlbiB0aGUgY291bnRlciByZWFjaGVzIHplcm8sIEpTUnV0aW1lLmludGVycnVwdF9oYW5kbGVyIGlzIGNhbGxlZCAqLwogIGludCBpbnRlcnJ1cHRfY291bnRlcjsKICBCT09MIGlzX2Vycm9yX3Byb3BlcnR5X2VuYWJsZWQ7CgogIHN0cnVjdCBsaXN0X2hlYWQgbG9hZGVkX21vZHVsZXM7IC8qIGxpc3Qgb2YgSlNNb2R1bGVEZWYubGluayAqLwoKICAvKiBpZiBOVUxMLCBSZWdFeHAgY29tcGlsYXRpb24gaXMgbm90IHN1cHBvcnRlZCAqLwogIEpTVmFsdWUgKCpjb21waWxlX3JlZ2V4cCkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBwYXR0ZXJuLCBKU1ZhbHVlQ29uc3QgZmxhZ3MpOwogIC8qIGlmIE5VTEwsIGV2YWwgaXMgbm90IHN1cHBvcnRlZCAqLwogIEpTVmFsdWUgKCpldmFsX2ludGVybmFsKShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfb2JqLCBjb25zdCBjaGFyKiBpbnB1dCwgc2l6ZV90IGlucHV0X2xlbiwgY29uc3QgY2hhciogZmlsZW5hbWUsIGludCBmbGFncywgaW50IHNjb3BlX2lkeCk7CiAgdm9pZCogdXNlcl9vcGFxdWU7Cn07CgpzdHJ1Y3QgSlNTdHJpbmcgewogIEpTUmVmQ291bnRIZWFkZXIgaGVhZGVyOwogIHVpbnQzMl90IGxlbiA6IDMxOwogIHVpbnQ4X3QgaXNfd2lkZV9jaGFyIDogMTsKICB1aW50MzJfdCBoYXNoIDogMzA7CiAgdWludDhfdCBhdG9tX3R5cGUgOiAyOwogIHVpbnQzMl90IGhhc2hfbmV4dDsKI2lmZGVmIERVTVBfTEVBS1MKICBzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7CiNlbmRpZgogIHVuaW9uIHsKICAgIHVpbnQ4X3Qgc3RyOFswXTsKICAgIHVpbnQxNl90IHN0cjE2WzBdOwogIH0gdTsKfTsKCnR5cGVkZWYgc3RydWN0IEpTQ2xvc3VyZVZhciB7CiAgdWludDhfdCBpc19sb2NhbCA6IDE7CiAgdWludDhfdCBpc19hcmcgOiAxOwogIHVpbnQ4X3QgaXNfY29uc3QgOiAxOwogIHVpbnQ4X3QgaXNfbGV4aWNhbCA6IDE7CiAgdWludDhfdCB2YXJfa2luZCA6IDQ7IC8qIHNlZSBKU1ZhcktpbmRFbnVtICovCiAgLyogOCBiaXRzIGF2YWlsYWJsZSAqLwogIHVpbnQxNl90IHZhcl9pZHg7IC8qIGlzX2xvY2FsID0gVFJVRTogaW5kZXggdG8gYSBub3JtYWwgdmFyaWFibGUgb2YgdGhlCiAgICAgICAgICAgICAgICAgIHBhcmVudCBmdW5jdGlvbi4gb3RoZXJ3aXNlOiBpbmRleCB0byBhIGNsb3N1cmUKICAgICAgICAgICAgICAgICAgdmFyaWFibGUgb2YgdGhlIHBhcmVudCBmdW5jdGlvbiAqLwogIEpTQXRvbSB2YXJfbmFtZTsKfSBKU0Nsb3N1cmVWYXI7Cgp0eXBlZGVmIHN0cnVjdCBKU1ZhclNjb3BlIHsKICBpbnQgcGFyZW50OyAvKiBpbmRleCBpbnRvIGZkLT5zY29wZXMgb2YgdGhlIGVuY2xvc2luZyBzY29wZSAqLwogIGludCBmaXJzdDsgIC8qIGluZGV4IGludG8gZmQtPnZhcnMgb2YgdGhlIGxhc3QgdmFyaWFibGUgaW4gdGhpcyBzY29wZSAqLwp9IEpTVmFyU2NvcGU7Cgp0eXBlZGVmIGVudW0gewogIC8qIFhYWDogYWRkIG1vcmUgdmFyaWFibGUga2luZHMgaGVyZSBpbnN0ZWFkIG9mIHVzaW5nIGJpdCBmaWVsZHMgKi8KICBKU19WQVJfTk9STUFMLAogIEpTX1ZBUl9GVU5DVElPTl9ERUNMLCAgICAgLyogbGV4aWNhbCB2YXIgd2l0aCBmdW5jdGlvbiBkZWNsYXJhdGlvbiAqLwogIEpTX1ZBUl9ORVdfRlVOQ1RJT05fREVDTCwgLyogbGV4aWNhbCB2YXIgd2l0aCBhc3luYy9nZW5lcmF0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGRlY2xhcmF0aW9uICovCiAgSlNfVkFSX0NBVENILAogIEpTX1ZBUl9GVU5DVElPTl9OQU1FLCAvKiBmdW5jdGlvbiBleHByZXNzaW9uIG5hbWUgKi8KICBKU19WQVJfUFJJVkFURV9GSUVMRCwKICBKU19WQVJfUFJJVkFURV9NRVRIT0QsCiAgSlNfVkFSX1BSSVZBVEVfR0VUVEVSLAogIEpTX1ZBUl9QUklWQVRFX1NFVFRFUiwgICAgICAgIC8qIG11c3QgY29tZSBhZnRlciBKU19WQVJfUFJJVkFURV9HRVRURVIgKi8KICBKU19WQVJfUFJJVkFURV9HRVRURVJfU0VUVEVSLCAvKiBtdXN0IGNvbWUgYWZ0ZXIgSlNfVkFSX1BSSVZBVEVfU0VUVEVSICovCn0gSlNWYXJLaW5kRW51bTsKCi8qIFhYWDogY291bGQgdXNlIGEgZGlmZmVyZW50IHN0cnVjdHVyZSBpbiBieXRlY29kZSBmdW5jdGlvbnMgdG8gc2F2ZQogICBtZW1vcnkgKi8KdHlwZWRlZiBzdHJ1Y3QgSlNWYXJEZWYgewogIEpTQXRvbSB2YXJfbmFtZTsKICAvKiBpbmRleCBpbnRvIGZkLT5zY29wZXMgb2YgdGhpcyB2YXJpYWJsZSBsZXhpY2FsIHNjb3BlICovCiAgaW50IHNjb3BlX2xldmVsOwogIC8qIGR1cmluZyBjb21waWxhdGlvbjoKICAgICAgLSBpZiBzY29wZV9sZXZlbCA9IDA6IHNjb3BlIGluIHdoaWNoIHRoZSB2YXJpYWJsZSBpcyBkZWZpbmVkCiAgICAgIC0gaWYgc2NvcGVfbGV2ZWwgIT0gMDogaW5kZXggaW50byBmZC0+dmFycyBvZiB0aGUgbmV4dAogICAgICAgIHZhcmlhYmxlIGluIHRoZSBzYW1lIG9yIGVuY2xvc2luZyBsZXhpY2FsIHNjb3BlCiAgICAgaW4gYSBieXRlY29kZSBmdW5jdGlvbjoKICAgICBpbmRleCBpbnRvIGZkLT52YXJzIG9mIHRoZSBuZXh0CiAgICAgdmFyaWFibGUgaW4gdGhlIHNhbWUgb3IgZW5jbG9zaW5nIGxleGljYWwgc2NvcGUKICAqLwogIGludCBzY29wZV9uZXh0OwogIHVpbnQ4X3QgaXNfY29uc3QgOiAxOwogIHVpbnQ4X3QgaXNfbGV4aWNhbCA6IDE7CiAgdWludDhfdCBpc19jYXB0dXJlZCA6IDE7CiAgdWludDhfdCB2YXJfa2luZCA6IDQ7IC8qIHNlZSBKU1ZhcktpbmRFbnVtICovCiAgLyogb25seSB1c2VkIGR1cmluZyBjb21waWxhdGlvbjogZnVuY3Rpb24gcG9vbCBpbmRleCBmb3IgbGV4aWNhbAogICAgIHZhcmlhYmxlcyB3aXRoIHZhcl9raW5kID0KICAgICBKU19WQVJfRlVOQ1RJT05fREVDTC9KU19WQVJfTkVXX0ZVTkNUSU9OX0RFQ0wgb3Igc2NvcGUgbGV2ZWwgb2YKICAgICB0aGUgZGVmaW5pdGlvbiBvZiB0aGUgJ3ZhcicgdmFyaWFibGVzICh0aGV5IGhhdmUgc2NvcGVfbGV2ZWwgPQogICAgIDApICovCiAgaW50IGZ1bmNfcG9vbF9pZHggOiAyNDsgLyogb25seSB1c2VkIGR1cmluZyBjb21waWxhdGlvbiA6IGluZGV4IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNvbnN0YW50IHBvb2wgZm9yIGhvaXN0ZWQgZnVuY3Rpb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uICovCn0gSlNWYXJEZWY7Cgp0eXBlZGVmIGVudW0gSlNGdW5jdGlvbktpbmRFbnVtIHsKICBKU19GVU5DX05PUk1BTCA9IDAsCiAgSlNfRlVOQ19HRU5FUkFUT1IgPSAoMSA8PCAwKSwKICBKU19GVU5DX0FTWU5DID0gKDEgPDwgMSksCiAgSlNfRlVOQ19BU1lOQ19HRU5FUkFUT1IgPSAoSlNfRlVOQ19HRU5FUkFUT1IgfCBKU19GVU5DX0FTWU5DKSwKfSBKU0Z1bmN0aW9uS2luZEVudW07Cgp0eXBlZGVmIHN0cnVjdCBKU0Z1bmN0aW9uQnl0ZWNvZGUgewogIEpTR0NPYmplY3RIZWFkZXIgaGVhZGVyOyAvKiBtdXN0IGNvbWUgZmlyc3QgKi8KICB1aW50OF90IGpzX21vZGU7CiAgdWludDhfdCBoYXNfcHJvdG90eXBlIDogMTsgLyogdHJ1ZSBpZiBhIHByb3RvdHlwZSBmaWVsZCBpcyBuZWNlc3NhcnkgKi8KICB1aW50OF90IGhhc19zaW1wbGVfcGFyYW1ldGVyX2xpc3QgOiAxOwogIHVpbnQ4X3QgaXNfZGVyaXZlZF9jbGFzc19jb25zdHJ1Y3RvciA6IDE7CiAgLyogdHJ1ZSBpZiBob21lX29iamVjdCBuZWVkcyB0byBiZSBpbml0aWFsaXplZCAqLwogIHVpbnQ4X3QgbmVlZF9ob21lX29iamVjdCA6IDE7CiAgdWludDhfdCBmdW5jX2tpbmQgOiAyOwogIHVpbnQ4X3QgbmV3X3RhcmdldF9hbGxvd2VkIDogMTsKICB1aW50OF90IHN1cGVyX2NhbGxfYWxsb3dlZCA6IDE7CiAgdWludDhfdCBzdXBlcl9hbGxvd2VkIDogMTsKICB1aW50OF90IGFyZ3VtZW50c19hbGxvd2VkIDogMTsKICB1aW50OF90IGhhc19kZWJ1ZyA6IDE7CiAgdWludDhfdCBiYWNrdHJhY2VfYmFycmllciA6IDE7IC8qIHN0b3AgYmFja3RyYWNlIG9uIHRoaXMgZnVuY3Rpb24gKi8KICB1aW50OF90IHJlYWRfb25seV9ieXRlY29kZSA6IDE7CiAgLyogWFhYOiA0IGJpdHMgYXZhaWxhYmxlICovCiAgdWludDhfdCogYnl0ZV9jb2RlX2J1ZjsgLyogKHNlbGYgcG9pbnRlcikgKi8KICBpbnQgYnl0ZV9jb2RlX2xlbjsKICBKU0F0b20gZnVuY19uYW1lOwogIEpTVmFyRGVmKiB2YXJkZWZzOyAgICAgICAgIC8qIGFyZ3VtZW50cyArIGxvY2FsIHZhcmlhYmxlcyAoYXJnX2NvdW50ICsgdmFyX2NvdW50KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzZWxmIHBvaW50ZXIpICovCiAgSlNDbG9zdXJlVmFyKiBjbG9zdXJlX3ZhcjsgLyogbGlzdCBvZiB2YXJpYWJsZXMgaW4gdGhlIGNsb3N1cmUgKHNlbGYgcG9pbnRlcikgKi8KICB1aW50MTZfdCBhcmdfY291bnQ7CiAgdWludDE2X3QgdmFyX2NvdW50OwogIHVpbnQxNl90IGRlZmluZWRfYXJnX2NvdW50OyAvKiBmb3IgbGVuZ3RoIGZ1bmN0aW9uIHByb3BlcnR5ICovCiAgdWludDE2X3Qgc3RhY2tfc2l6ZTsgICAgICAgIC8qIG1heGltdW0gc3RhY2sgc2l6ZSAqLwogIEpTQ29udGV4dCogcmVhbG07ICAgICAgICAgICAvKiBmdW5jdGlvbiByZWFsbSAqLwogIEpTVmFsdWUqIGNwb29sOyAgICAgICAgICAgICAvKiBjb25zdGFudCBwb29sIChzZWxmIHBvaW50ZXIpICovCiAgaW50IGNwb29sX2NvdW50OwogIGludCBjbG9zdXJlX3Zhcl9jb3VudDsKICBzdHJ1Y3QgewogICAgLyogZGVidWcgaW5mbywgbW92ZSB0byBzZXBhcmF0ZSBzdHJ1Y3R1cmUgdG8gc2F2ZSBtZW1vcnk/ICovCiAgICBKU0F0b20gZmlsZW5hbWU7CiAgICBpbnQgbGluZV9udW07CiAgICBpbnQgc291cmNlX2xlbjsKICAgIGludCBwYzJsaW5lX2xlbjsKICAgIHVpbnQ4X3QqIHBjMmxpbmVfYnVmOwogICAgY2hhciogc291cmNlOwogIH0gZGVidWc7CiNpZmRlZiBDT05GSUdfREVCVUdHRVIKICBzdHJ1Y3QgSlNEZWJ1Z2dlckZ1bmN0aW9uSW5mbyBkZWJ1Z2dlcjsKI2VuZGlmCn0gSlNGdW5jdGlvbkJ5dGVjb2RlOwoKdHlwZWRlZiBzdHJ1Y3QgSlNQcm9wZXJ0eSB7CiAgdW5pb24gewogICAgSlNWYWx1ZSB2YWx1ZTsgICAgICAvKiBKU19QUk9QX05PUk1BTCAqLwogICAgc3RydWN0IHsgICAgICAgICAgICAvKiBKU19QUk9QX0dFVFNFVCAqLwogICAgICBKU09iamVjdCogZ2V0dGVyOyAvKiBOVUxMIGlmIHVuZGVmaW5lZCAqLwogICAgICBKU09iamVjdCogc2V0dGVyOyAvKiBOVUxMIGlmIHVuZGVmaW5lZCAqLwogICAgfSBnZXRzZXQ7CiAgICBKU1ZhclJlZiogdmFyX3JlZjsgLyogSlNfUFJPUF9WQVJSRUYgKi8KICAgIHN0cnVjdCB7ICAgICAgICAgICAvKiBKU19QUk9QX0FVVE9JTklUICovCiAgICAgIC8qIGluIG9yZGVyIHRvIHVzZSBvbmx5IDIgcG9pbnRlcnMsIHdlIGNvbXByZXNzIHRoZSByZWFsbQogICAgICAgICBhbmQgdGhlIGluaXQgZnVuY3Rpb24gcG9pbnRlciAqLwogICAgICB1aW50cHRyX3QgcmVhbG1fYW5kX2lkOyAvKiByZWFsbSBhbmQgaW5pdF9pZCAoSlNfQVVUT0lOSVRfSURfeCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIDIgbG93IGJpdHMgKi8KICAgICAgdm9pZCogb3BhcXVlOwogICAgfSBpbml0OwogIH0gdTsKfSBKU1Byb3BlcnR5OwoKI2RlZmluZSBKU19QUk9QX0lOSVRJQUxfU0laRSAyCiNkZWZpbmUgSlNfUFJPUF9JTklUSUFMX0hBU0hfU0laRSA0IC8qIG11c3QgYmUgYSBwb3dlciBvZiB0d28gKi8KI2RlZmluZSBKU19BUlJBWV9JTklUSUFMX1NJWkUgMgoKdHlwZWRlZiBzdHJ1Y3QgSlNTaGFwZVByb3BlcnR5IHsKICB1aW50MzJfdCBoYXNoX25leHQgOiAyNjsgLyogMCBpZiBsYXN0IGluIGxpc3QgKi8KICB1aW50MzJfdCBmbGFncyA6IDY7ICAgICAgLyogSlNfUFJPUF9YWFggKi8KICBKU0F0b20gYXRvbTsgICAgICAgICAgICAgLyogSlNfQVRPTV9OVUxMID0gZnJlZSBwcm9wZXJ0eSBlbnRyeSAqLwp9IEpTU2hhcGVQcm9wZXJ0eTsKCnN0cnVjdCBKU1NoYXBlIHsKICAvKiBoYXNoIHRhYmxlIG9mIHNpemUgaGFzaF9tYXNrICsgMSBiZWZvcmUgdGhlIHN0YXJ0IG9mIHRoZQogICAgIHN0cnVjdHVyZSAoc2VlIHByb3BfaGFzaF9lbmQoKSkuICovCiAgSlNHQ09iamVjdEhlYWRlciBoZWFkZXI7CiAgLyogdHJ1ZSBpZiB0aGUgc2hhcGUgaXMgaW5zZXJ0ZWQgaW4gdGhlIHNoYXBlIGhhc2ggdGFibGUuIElmIG5vdCwKICAgICBKU1NoYXBlLmhhc2ggaXMgbm90IHZhbGlkICovCiAgdWludDhfdCBpc19oYXNoZWQ7CiAgLyogSWYgdHJ1ZSwgdGhlIHNoYXBlIG1heSBoYXZlIHNtYWxsIGFycmF5IGluZGV4IHByb3BlcnRpZXMgJ24nIHdpdGggMAogICAgIDw9IG4gPD0gMl4zMS0xLiBJZiBmYWxzZSwgdGhlIHNoYXBlIGlzIGd1YXJhbnRlZWQgbm90IHRvIGhhdmUKICAgICBzbWFsbCBhcnJheSBpbmRleCBwcm9wZXJ0aWVzICovCiAgdWludDhfdCBoYXNfc21hbGxfYXJyYXlfaW5kZXg7CiAgdWludDMyX3QgaGFzaDsgLyogY3VycmVudCBoYXNoIHZhbHVlICovCiAgdWludDMyX3QgcHJvcF9oYXNoX21hc2s7CiAgaW50IHByb3Bfc2l6ZTsgIC8qIGFsbG9jYXRlZCBwcm9wZXJ0aWVzICovCiAgaW50IHByb3BfY291bnQ7IC8qIGluY2x1ZGUgZGVsZXRlZCBwcm9wZXJ0aWVzICovCiAgaW50IGRlbGV0ZWRfcHJvcF9jb3VudDsKICBKU1NoYXBlKiBzaGFwZV9oYXNoX25leHQ7IC8qIGluIEpTUnVudGltZS5zaGFwZV9oYXNoW2hdIGxpc3QgKi8KICBKU09iamVjdCogcHJvdG87CiAgSlNTaGFwZVByb3BlcnR5IHByb3BbMF07IC8qIHByb3Bfc2l6ZSBlbGVtZW50cyAqLwp9OwoKdHlwZWRlZiBzdHJ1Y3QgSlNSZWdFeHAgewogIEpTU3RyaW5nKiBwYXR0ZXJuOwogIEpTU3RyaW5nKiBieXRlY29kZTsgLyogYWxzbyBjb250YWlucyB0aGUgZmxhZ3MgKi8KfSBKU1JlZ0V4cDsKCnR5cGVkZWYgc3RydWN0IEpTUHJveHlEYXRhIHsKICBKU1ZhbHVlIHRhcmdldDsKICBKU1ZhbHVlIGhhbmRsZXI7CiAgdWludDhfdCBpc19mdW5jOwogIHVpbnQ4X3QgaXNfcmV2b2tlZDsKfSBKU1Byb3h5RGF0YTsKCnR5cGVkZWYgc3RydWN0IEpTQXJyYXlCdWZmZXIgewogIGludCBieXRlX2xlbmd0aDsgLyogMCBpZiBkZXRhY2hlZCAqLwogIHVpbnQ4X3QgZGV0YWNoZWQ7CiAgdWludDhfdCBzaGFyZWQ7IC8qIGlmIHNoYXJlZCwgdGhlIGFycmF5IGJ1ZmZlciBjYW5ub3QgYmUgZGV0YWNoZWQgKi8KICB1aW50OF90KiBkYXRhOyAgLyogTlVMTCBpZiBkZXRhY2hlZCAqLwogIHN0cnVjdCBsaXN0X2hlYWQgYXJyYXlfbGlzdDsKICB2b2lkKiBvcGFxdWU7CiAgSlNGcmVlQXJyYXlCdWZmZXJEYXRhRnVuYyogZnJlZV9mdW5jOwp9IEpTQXJyYXlCdWZmZXI7Cgp0eXBlZGVmIHN0cnVjdCBKU1R5cGVkQXJyYXkgewogIHN0cnVjdCBsaXN0X2hlYWQgbGluazsgLyogbGluayB0byBhcnJheWJ1ZmZlciAqLwogIEpTT2JqZWN0KiBvYmo7ICAgICAgICAgLyogYmFjayBwb2ludGVyIHRvIHRoZSBUeXBlZEFycmF5L0RhdGFWaWV3IG9iamVjdCAqLwogIEpTT2JqZWN0KiBidWZmZXI7ICAgICAgLyogYmFzZWQgYXJyYXkgYnVmZmVyICovCiAgdWludDMyX3Qgb2Zmc2V0OyAgICAgICAvKiBvZmZzZXQgaW4gdGhlIGFycmF5IGJ1ZmZlciAqLwogIHVpbnQzMl90IGxlbmd0aDsgICAgICAgLyogbGVuZ3RoIGluIHRoZSBhcnJheSBidWZmZXIgKi8KfSBKU1R5cGVkQXJyYXk7Cgp0eXBlZGVmIHN0cnVjdCBKU0FzeW5jRnVuY3Rpb25TdGF0ZSB7CiAgSlNWYWx1ZSB0aGlzX3ZhbDsgLyogJ3RoaXMnIGdlbmVyYXRvciBhcmd1bWVudCAqLwogIGludCBhcmdjOyAgICAgICAgIC8qIG51bWJlciBvZiBmdW5jdGlvbiBhcmd1bWVudHMgKi8KICBCT09MIHRocm93X2ZsYWc7ICAvKiB1c2VkIHRvIHRocm93IGFuIGV4Y2VwdGlvbiBpbiBKU19DYWxsSW50ZXJuYWwoKSAqLwogIEpTU3RhY2tGcmFtZSBmcmFtZTsKfSBKU0FzeW5jRnVuY3Rpb25TdGF0ZTsKCi8qIFhYWDogY291bGQgdXNlIGFuIG9iamVjdCBpbnN0ZWFkIHRvIGF2b2lkIHRoZQogICBKU19UQUdfQVNZTkNfRlVOQ1RJT04gdGFnIGZvciB0aGUgR0MgKi8KdHlwZWRlZiBzdHJ1Y3QgSlNBc3luY0Z1bmN0aW9uRGF0YSB7CiAgSlNHQ09iamVjdEhlYWRlciBoZWFkZXI7IC8qIG11c3QgY29tZSBmaXJzdCAqLwogIEpTVmFsdWUgcmVzb2x2aW5nX2Z1bmNzWzJdOwogIEJPT0wgaXNfYWN0aXZlOyAvKiB0cnVlIGlmIHRoZSBhc3luYyBmdW5jdGlvbiBzdGF0ZSBpcyB2YWxpZCAqLwogIEpTQXN5bmNGdW5jdGlvblN0YXRlIGZ1bmNfc3RhdGU7Cn0gSlNBc3luY0Z1bmN0aW9uRGF0YTsKCnN0cnVjdCBKU09iamVjdCB7CiAgdW5pb24gewogICAgSlNHQ09iamVjdEhlYWRlciBoZWFkZXI7CiAgICBzdHJ1Y3QgewogICAgICBpbnQgX19nY19yZWZfY291bnQ7IC8qIGNvcnJlc3BvbmRzIHRvIGhlYWRlci5yZWZfY291bnQgKi8KICAgICAgdWludDhfdCBfX2djX21hcms7ICAvKiBjb3JyZXNwb25kcyB0byBoZWFkZXIubWFyay9nY19vYmpfdHlwZSAqLwoKICAgICAgdWludDhfdCBleHRlbnNpYmxlIDogMTsKICAgICAgdWludDhfdCBmcmVlX21hcmsgOiAxOyAgICAgICAgICAgIC8qIG9ubHkgdXNlZCB3aGVuIGZyZWVpbmcgb2JqZWN0cyB3aXRoIGN5Y2xlcyAqLwogICAgICB1aW50OF90IGlzX2V4b3RpYyA6IDE7ICAgICAgICAgICAgLyogVFJVRSBpZiBvYmplY3QgaGFzIGV4b3RpYyBwcm9wZXJ0eSBoYW5kbGVycyAqLwogICAgICB1aW50OF90IGZhc3RfYXJyYXkgOiAxOyAgICAgICAgICAgLyogVFJVRSBpZiB1LmFycmF5IGlzIHVzZWQgZm9yIGdldC9wdXQgKGZvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfQ0xBU1NfQVJSQVksIEpTX0NMQVNTX0FSR1VNRU5UUyBhbmQgdHlwZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFycmF5cykgKi8KICAgICAgdWludDhfdCBpc19jb25zdHJ1Y3RvciA6IDE7ICAgICAgIC8qIFRSVUUgaWYgb2JqZWN0IGlzIGEgY29uc3RydWN0b3IgZnVuY3Rpb24gKi8KICAgICAgdWludDhfdCBpc191bmNhdGNoYWJsZV9lcnJvciA6IDE7IC8qIGlmIFRSVUUsIGVycm9yIGlzIG5vdCBjYXRjaGFibGUgKi8KICAgICAgdWludDhfdCB0bXBfbWFyayA6IDE7ICAgICAgICAgICAgIC8qIHVzZWQgaW4gSlNfV3JpdGVPYmplY3RSZWMoKSAqLwogICAgICB1aW50OF90IGlzX0hUTUxEREEgOiAxOyAgICAgICAgICAgLyogc3BlY2lmaWMgYW5uZXggQiBJc0h0bWxEREEgYmVoYXZpb3IgKi8KICAgICAgdWludDE2X3QgY2xhc3NfaWQ7ICAgICAgICAgICAgICAgIC8qIHNlZSBKU19DTEFTU194ICovCiAgICB9OwogIH07CiAgLyogYnl0ZSBvZmZzZXRzOiAxNi8yNCAqLwogIEpTU2hhcGUqIHNoYXBlOyAgIC8qIHByb3RvdHlwZSBhbmQgcHJvcGVydHkgbmFtZXMgKyBmbGFnICovCiAgSlNQcm9wZXJ0eSogcHJvcDsgLyogYXJyYXkgb2YgcHJvcGVydGllcyAqLwogIC8qIGJ5dGUgb2Zmc2V0czogMjQvNDAgKi8KICBzdHJ1Y3QgSlNNYXBSZWNvcmQqIGZpcnN0X3dlYWtfcmVmOyAvKiBYWFg6IHVzZSBhIGJpdCBhbmQgYW4gZXh0ZXJuYWwgaGFzaCB0YWJsZT8gKi8KICAvKiBieXRlIG9mZnNldHM6IDI4LzQ4ICovCiAgdW5pb24gewogICAgdm9pZCogb3BhcXVlOwogICAgc3RydWN0IEpTQm91bmRGdW5jdGlvbiogYm91bmRfZnVuY3Rpb247ICAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfQk9VTkRfRlVOQ1RJT04gKi8KICAgIHN0cnVjdCBKU0NGdW5jdGlvbkRhdGFSZWNvcmQqIGNfZnVuY3Rpb25fZGF0YV9yZWNvcmQ7IC8qIEpTX0NMQVNTX0NfRlVOQ1RJT05fREFUQSAqLwogICAgc3RydWN0IEpTRm9ySW5JdGVyYXRvciogZm9yX2luX2l0ZXJhdG9yOyAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfRk9SX0lOX0lURVJBVE9SICovCiAgICBzdHJ1Y3QgSlNBcnJheUJ1ZmZlciogYXJyYXlfYnVmZmVyOyAgICAgICAgICAgICAgICAgICAvKiBKU19DTEFTU19BUlJBWV9CVUZGRVIsIEpTX0NMQVNTX1NIQVJFRF9BUlJBWV9CVUZGRVIgKi8KICAgIHN0cnVjdCBKU1R5cGVkQXJyYXkqIHR5cGVkX2FycmF5OyAgICAgICAgICAgICAgICAgICAgIC8qIEpTX0NMQVNTX1VJTlQ4Q19BUlJBWS4uSlNfQ0xBU1NfREFUQVZJRVcgKi8KI2lmZGVmIENPTkZJR19CSUdOVU0KICAgIHN0cnVjdCBKU0Zsb2F0RW52KiBmbG9hdF9lbnY7ICAgICAgICAgICAvKiBKU19DTEFTU19GTE9BVF9FTlYgKi8KICAgIHN0cnVjdCBKU09wZXJhdG9yU2V0RGF0YSogb3BlcmF0b3Jfc2V0OyAvKiBKU19DTEFTU19PUEVSQVRPUl9TRVQgKi8KI2VuZGlmCiAgICBzdHJ1Y3QgSlNNYXBTdGF0ZSogbWFwX3N0YXRlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfTUFQLi5KU19DTEFTU19XRUFLU0VUICovCiAgICBzdHJ1Y3QgSlNNYXBJdGVyYXRvckRhdGEqIG1hcF9pdGVyYXRvcl9kYXRhOyAgICAgICAgICAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfTUFQX0lURVJBVE9SLCBKU19DTEFTU19TRVRfSVRFUkFUT1IgKi8KICAgIHN0cnVjdCBKU0FycmF5SXRlcmF0b3JEYXRhKiBhcnJheV9pdGVyYXRvcl9kYXRhOyAgICAgICAgICAgICAgICAgICAvKiBKU19DTEFTU19BUlJBWV9JVEVSQVRPUiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DTEFTU19TVFJJTkdfSVRFUkFUT1IgKi8KICAgIHN0cnVjdCBKU1JlZ0V4cFN0cmluZ0l0ZXJhdG9yRGF0YSogcmVnZXhwX3N0cmluZ19pdGVyYXRvcl9kYXRhOyAgICAvKiBKU19DTEFTU19SRUdFWFBfU1RSSU5HX0lURVJBVE9SICovCiAgICBzdHJ1Y3QgSlNHZW5lcmF0b3JEYXRhKiBnZW5lcmF0b3JfZGF0YTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfR0VORVJBVE9SICovCiAgICBzdHJ1Y3QgSlNQcm94eURhdGEqIHByb3h5X2RhdGE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfUFJPWFkgKi8KICAgIHN0cnVjdCBKU1Byb21pc2VEYXRhKiBwcm9taXNlX2RhdGE7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBKU19DTEFTU19QUk9NSVNFICovCiAgICBzdHJ1Y3QgSlNQcm9taXNlRnVuY3Rpb25EYXRhKiBwcm9taXNlX2Z1bmN0aW9uX2RhdGE7ICAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfUFJPTUlTRV9SRVNPTFZFX0ZVTkNUSU9OLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0NMQVNTX1BST01JU0VfUkVKRUNUX0ZVTkNUSU9OICovCiAgICBzdHJ1Y3QgSlNBc3luY0Z1bmN0aW9uRGF0YSogYXN5bmNfZnVuY3Rpb25fZGF0YTsgICAgICAgICAgICAgICAgICAgLyogSlNfQ0xBU1NfQVNZTkNfRlVOQ1RJT05fUkVTT0xWRSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19DTEFTU19BU1lOQ19GVU5DVElPTl9SRUpFQ1QgKi8KICAgIHN0cnVjdCBKU0FzeW5jRnJvbVN5bmNJdGVyYXRvckRhdGEqIGFzeW5jX2Zyb21fc3luY19pdGVyYXRvcl9kYXRhOyAvKiBKU19DTEFTU19BU1lOQ19GUk9NX1NZTkNfSVRFUkFUT1IgKi8KICAgIHN0cnVjdCBKU0FzeW5jR2VuZXJhdG9yRGF0YSogYXN5bmNfZ2VuZXJhdG9yX2RhdGE7ICAgICAgICAgICAgICAgICAvKiBKU19DTEFTU19BU1lOQ19HRU5FUkFUT1IgKi8KICAgIHN0cnVjdCB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBKU19DTEFTU19CWVRFQ09ERV9GVU5DVElPTjogMTIvMjQgYnl0ZXMgKi8KICAgICAgLyogYWxzbyB1c2VkIGJ5IEpTX0NMQVNTX0dFTkVSQVRPUl9GVU5DVElPTiwgSlNfQ0xBU1NfQVNZTkNfRlVOQ1RJT04gYW5kCiAgICAgICAqIEpTX0NMQVNTX0FTWU5DX0dFTkVSQVRPUl9GVU5DVElPTiAqLwogICAgICBzdHJ1Y3QgSlNGdW5jdGlvbkJ5dGVjb2RlKiBmdW5jdGlvbl9ieXRlY29kZTsKICAgICAgSlNWYXJSZWYqKiB2YXJfcmVmczsKICAgICAgSlNPYmplY3QqIGhvbWVfb2JqZWN0OyAvKiBmb3IgJ3N1cGVyJyBhY2Nlc3MgKi8KICAgIH0gZnVuYzsKICAgIHN0cnVjdCB7IC8qIEpTX0NMQVNTX0NfRlVOQ1RJT046IDEyLzIwIGJ5dGVzICovCiAgICAgIEpTQ29udGV4dCogcmVhbG07CiAgICAgIEpTQ0Z1bmN0aW9uVHlwZSBjX2Z1bmN0aW9uOwogICAgICB1aW50OF90IGxlbmd0aDsKICAgICAgdWludDhfdCBjcHJvdG87CiAgICAgIGludDE2X3QgbWFnaWM7CiAgICB9IGNmdW5jOwogICAgLyogYXJyYXkgcGFydCBmb3IgZmFzdCBhcnJheXMgYW5kIHR5cGVkIGFycmF5cyAqLwogICAgc3RydWN0IHsgLyogSlNfQ0xBU1NfQVJSQVksIEpTX0NMQVNTX0FSR1VNRU5UUywKICAgICAgICAgICAgICAgIEpTX0NMQVNTX1VJTlQ4Q19BUlJBWS4uSlNfQ0xBU1NfRkxPQVQ2NF9BUlJBWSAqLwogICAgICB1bmlvbiB7CiAgICAgICAgdWludDMyX3Qgc2l6ZTsgICAgICAgICAgICAgICAgICAgIC8qIEpTX0NMQVNTX0FSUkFZLCBKU19DTEFTU19BUkdVTUVOVFMgKi8KICAgICAgICBzdHJ1Y3QgSlNUeXBlZEFycmF5KiB0eXBlZF9hcnJheTsgLyogSlNfQ0xBU1NfVUlOVDhDX0FSUkFZLi5KU19DTEFTU19GTE9BVDY0X0FSUkFZICovCiAgICAgIH0gdTE7CiAgICAgIHVuaW9uIHsKICAgICAgICBKU1ZhbHVlKiB2YWx1ZXM7ICAgICAgLyogSlNfQ0xBU1NfQVJSQVksIEpTX0NMQVNTX0FSR1VNRU5UUyAqLwogICAgICAgIHZvaWQqIHB0cjsgICAgICAgICAgICAvKiBKU19DTEFTU19VSU5UOENfQVJSQVkuLkpTX0NMQVNTX0ZMT0FUNjRfQVJSQVkgKi8KICAgICAgICBpbnQ4X3QqIGludDhfcHRyOyAgICAgLyogSlNfQ0xBU1NfSU5UOF9BUlJBWSAqLwogICAgICAgIHVpbnQ4X3QqIHVpbnQ4X3B0cjsgICAvKiBKU19DTEFTU19VSU5UOF9BUlJBWSwgSlNfQ0xBU1NfVUlOVDhDX0FSUkFZICovCiAgICAgICAgaW50MTZfdCogaW50MTZfcHRyOyAgIC8qIEpTX0NMQVNTX0lOVDE2X0FSUkFZICovCiAgICAgICAgdWludDE2X3QqIHVpbnQxNl9wdHI7IC8qIEpTX0NMQVNTX1VJTlQxNl9BUlJBWSAqLwogICAgICAgIGludDMyX3QqIGludDMyX3B0cjsgICAvKiBKU19DTEFTU19JTlQzMl9BUlJBWSAqLwogICAgICAgIHVpbnQzMl90KiB1aW50MzJfcHRyOyAvKiBKU19DTEFTU19VSU5UMzJfQVJSQVkgKi8KICAgICAgICBpbnQ2NF90KiBpbnQ2NF9wdHI7ICAgLyogSlNfQ0xBU1NfSU5UNjRfQVJSQVkgKi8KICAgICAgICB1aW50NjRfdCogdWludDY0X3B0cjsgLyogSlNfQ0xBU1NfVUlOVDY0X0FSUkFZICovCiAgICAgICAgZmxvYXQqIGZsb2F0X3B0cjsgICAgIC8qIEpTX0NMQVNTX0ZMT0FUMzJfQVJSQVkgKi8KICAgICAgICBkb3VibGUqIGRvdWJsZV9wdHI7ICAgLyogSlNfQ0xBU1NfRkxPQVQ2NF9BUlJBWSAqLwogICAgICB9IHU7CiAgICAgIHVpbnQzMl90IGNvdW50OyAgICAvKiA8PSAyXjMxLTEuIDAgZm9yIGEgZGV0YWNoZWQgdHlwZWQgYXJyYXkgKi8KICAgIH0gYXJyYXk7ICAgICAgICAgICAgIC8qIDEyLzIwIGJ5dGVzICovCiAgICBKU1JlZ0V4cCByZWdleHA7ICAgICAvKiBKU19DTEFTU19SRUdFWFA6IDgvMTYgYnl0ZXMgKi8KICAgIEpTVmFsdWUgb2JqZWN0X2RhdGE7IC8qIGZvciBKU19TZXRPYmplY3REYXRhKCk6IDgvMTYvMTYgYnl0ZXMgKi8KICB9IHU7CiAgLyogYnl0ZSBzaXplczogNDAvNDgvNzIgKi8KfTsKCiNpZm5kZWYgU0hPUlRfT1BDT0RFUwojZGVmaW5lIFNIT1JUX09QQ09ERVMgMQojZW5kaWYKCnR5cGVkZWYgZW51bSBPUENvZGVGb3JtYXQgewojZGVmaW5lIEZNVChmKSBPUF9GTVRfIyNmLAojZGVmaW5lIERFRihpZCwgc2l6ZSwgbl9wb3AsIG5fcHVzaCwgZikKI2luY2x1ZGUgPHF1aWNranMtb3Bjb2RlLmg+CiN1bmRlZiBERUYKI3VuZGVmIEZNVAp9IE9QQ29kZUZvcm1hdDsKCmVudW0gT1BDb2RlRW51bSB7CiNkZWZpbmUgRk1UKGYpCiNkZWZpbmUgREVGKGlkLCBzaXplLCBuX3BvcCwgbl9wdXNoLCBmKSBPUF8jI2lkLAojZGVmaW5lIGRlZihpZCwgc2l6ZSwgbl9wb3AsIG5fcHVzaCwgZikKI2luY2x1ZGUgPHF1aWNranMtb3Bjb2RlLmg+CiN1bmRlZiBkZWYKI3VuZGVmIERFRgojdW5kZWYgRk1UCiAgT1BfQ09VTlQsIC8qIGV4Y2x1ZGluZyB0ZW1wb3Jhcnkgb3Bjb2RlcyAqLwogIC8qIHRlbXBvcmFyeSBvcGNvZGVzIDogb3ZlcmxhcCB3aXRoIHRoZSBzaG9ydCBvcGNvZGVzICovCiAgT1BfVEVNUF9TVEFSVCA9IE9QX25vcCArIDEsCiAgT1BfX19kdW1teSA9IE9QX1RFTVBfU1RBUlQgLSAxLAojZGVmaW5lIEZNVChmKQojZGVmaW5lIERFRihpZCwgc2l6ZSwgbl9wb3AsIG5fcHVzaCwgZikKI2RlZmluZSBkZWYoaWQsIHNpemUsIG5fcG9wLCBuX3B1c2gsIGYpIE9QXyMjaWQsCiNpbmNsdWRlIDxxdWlja2pzLW9wY29kZS5oPgojdW5kZWYgZGVmCiN1bmRlZiBERUYKI3VuZGVmIEZNVAogIE9QX1RFTVBfRU5ELAp9OwovKiBKU0F0b20gc3VwcG9ydCAqLwoKI2RlZmluZSBKU19BVE9NX1RBR19JTlQgKDFVIDw8IDMxKQojZGVmaW5lIEpTX0FUT01fTUFYX0lOVCAoSlNfQVRPTV9UQUdfSU5UIC0gMSkKI2RlZmluZSBKU19BVE9NX01BWCAoKDFVIDw8IDMwKSAtIDEpCgp0eXBlZGVmIHN0cnVjdCBTdHJpbmdCdWZmZXIgewogIEpTQ29udGV4dCogY3R4OwogIEpTU3RyaW5nKiBzdHI7CiAgaW50IGxlbjsKICBpbnQgc2l6ZTsKICBpbnQgaXNfd2lkZV9jaGFyOwogIGludCBlcnJvcl9zdGF0dXM7Cn0gU3RyaW5nQnVmZmVyOwoKdHlwZWRlZiBzdHJ1Y3QgSlNDRnVuY3Rpb25EYXRhUmVjb3JkIHsKICBKU0NGdW5jdGlvbkRhdGEqIGZ1bmM7CiAgdWludDhfdCBsZW5ndGg7CiAgdWludDhfdCBkYXRhX2xlbjsKICB1aW50MTZfdCBtYWdpYzsKICBKU1ZhbHVlIGRhdGFbMF07Cn0gSlNDRnVuY3Rpb25EYXRhUmVjb3JkOwoKLyp0eXBlZGVmIHN0cnVjdCBKU0NDbG9zdXJlUmVjb3JkIHsKICBKU0NDbG9zdXJlKiBmdW5jOwogIHVpbnQxNl90IGxlbmd0aDsKICB1aW50MTZfdCBtYWdpYzsKICB2b2lkKiBvcGFxdWU7CiAgdm9pZCAoKm9wYXF1ZV9maW5hbGl6ZSkodm9pZCopOwp9IEpTQ0Nsb3N1cmVSZWNvcmQ7Ki8KCnR5cGVkZWYgc3RydWN0IEpTTWVtb3J5VXNhZ2VfaGVscGVyIHsKICBkb3VibGUgbWVtb3J5X3VzZWRfY291bnQ7CiAgZG91YmxlIHN0cl9jb3VudDsKICBkb3VibGUgc3RyX3NpemU7CiAgaW50NjRfdCBqc19mdW5jX2NvdW50OwogIGRvdWJsZSBqc19mdW5jX3NpemU7CiAgaW50NjRfdCBqc19mdW5jX2NvZGVfc2l6ZTsKICBpbnQ2NF90IGpzX2Z1bmNfcGMybGluZV9jb3VudDsKICBpbnQ2NF90IGpzX2Z1bmNfcGMybGluZV9zaXplOwp9IEpTTWVtb3J5VXNhZ2VfaGVscGVyOwoKdHlwZWRlZiBlbnVtIEpTR2VuZXJhdG9yU3RhdGVFbnVtIHsKICBKU19HRU5FUkFUT1JfU1RBVEVfU1VTUEVOREVEX1NUQVJULAogIEpTX0dFTkVSQVRPUl9TVEFURV9TVVNQRU5ERURfWUlFTEQsCiAgSlNfR0VORVJBVE9SX1NUQVRFX1NVU1BFTkRFRF9ZSUVMRF9TVEFSLAogIEpTX0dFTkVSQVRPUl9TVEFURV9FWEVDVVRJTkcsCiAgSlNfR0VORVJBVE9SX1NUQVRFX0NPTVBMRVRFRCwKfSBKU0dlbmVyYXRvclN0YXRlRW51bTsKCnR5cGVkZWYgc3RydWN0IEpTR2VuZXJhdG9yRGF0YSB7CiAgSlNHZW5lcmF0b3JTdGF0ZUVudW0gc3RhdGU7CiAgSlNBc3luY0Z1bmN0aW9uU3RhdGUgZnVuY19zdGF0ZTsKfSBKU0dlbmVyYXRvckRhdGE7Cgp0eXBlZGVmIGVudW0gSlNBc3luY0dlbmVyYXRvclN0YXRlRW51bSB7CiAgSlNfQVNZTkNfR0VORVJBVE9SX1NUQVRFX1NVU1BFTkRFRF9TVEFSVCwKICBKU19BU1lOQ19HRU5FUkFUT1JfU1RBVEVfU1VTUEVOREVEX1lJRUxELAogIEpTX0FTWU5DX0dFTkVSQVRPUl9TVEFURV9TVVNQRU5ERURfWUlFTERfU1RBUiwKICBKU19BU1lOQ19HRU5FUkFUT1JfU1RBVEVfRVhFQ1VUSU5HLAogIEpTX0FTWU5DX0dFTkVSQVRPUl9TVEFURV9BV0FJVElOR19SRVRVUk4sCiAgSlNfQVNZTkNfR0VORVJBVE9SX1NUQVRFX0NPTVBMRVRFRCwKfSBKU0FzeW5jR2VuZXJhdG9yU3RhdGVFbnVtOwoKdHlwZWRlZiBzdHJ1Y3QgSlNBc3luY0dlbmVyYXRvclJlcXVlc3QgewogIHN0cnVjdCBsaXN0X2hlYWQgbGluazsKICAvKiBjb21wbGV0aW9uICovCiAgaW50IGNvbXBsZXRpb25fdHlwZTsgLyogR0VOX01BR0lDX3ggKi8KICBKU1ZhbHVlIHJlc3VsdDsKICAvKiBwcm9taXNlIGNhcGFiaWxpdHkgKi8KICBKU1ZhbHVlIHByb21pc2U7CiAgSlNWYWx1ZSByZXNvbHZpbmdfZnVuY3NbMl07Cn0gSlNBc3luY0dlbmVyYXRvclJlcXVlc3Q7Cgp0eXBlZGVmIHN0cnVjdCBKU0FzeW5jR2VuZXJhdG9yRGF0YSB7CiAgSlNPYmplY3QqIGdlbmVyYXRvcjsgLyogYmFjayBwb2ludGVyIHRvIHRoZSBvYmplY3QgKGNvbnN0KSAqLwogIEpTQXN5bmNHZW5lcmF0b3JTdGF0ZUVudW0gc3RhdGU7CiAgSlNBc3luY0Z1bmN0aW9uU3RhdGUgZnVuY19zdGF0ZTsKICBzdHJ1Y3QgbGlzdF9oZWFkIHF1ZXVlOyAvKiBsaXN0IG9mIEpTQXN5bmNHZW5lcmF0b3JSZXF1ZXN0LmxpbmsgKi8KfSBKU0FzeW5jR2VuZXJhdG9yRGF0YTsKCnR5cGVkZWYgZW51bSBKU1Byb21pc2VTdGF0ZUVudW0gewogIEpTX1BST01JU0VfUEVORElORywKICBKU19QUk9NSVNFX0ZVTEZJTExFRCwKICBKU19QUk9NSVNFX1JFSkVDVEVELAp9IEpTUHJvbWlzZVN0YXRlRW51bTsKCnR5cGVkZWYgc3RydWN0IEpTUHJvbWlzZURhdGEgewogIEpTUHJvbWlzZVN0YXRlRW51bSBwcm9taXNlX3N0YXRlOwogIC8qIDA9ZnVsZmlsbCwgMT1yZWplY3QsIGxpc3Qgb2YgSlNQcm9taXNlUmVhY3Rpb25EYXRhLmxpbmsgKi8KICBzdHJ1Y3QgbGlzdF9oZWFkIHByb21pc2VfcmVhY3Rpb25zWzJdOwogIEJPT0wgaXNfaGFuZGxlZDsgLyogTm90ZTogb25seSB1c2VmdWwgdG8gZGVidWcgKi8KICBKU1ZhbHVlIHByb21pc2VfcmVzdWx0Owp9IEpTUHJvbWlzZURhdGE7Cgp0eXBlZGVmIHN0cnVjdCBKU1Byb21pc2VGdW5jdGlvbkRhdGFSZXNvbHZlZCB7CiAgaW50IHJlZl9jb3VudDsKICBCT09MIGFscmVhZHlfcmVzb2x2ZWQ7Cn0gSlNQcm9taXNlRnVuY3Rpb25EYXRhUmVzb2x2ZWQ7Cgp0eXBlZGVmIHN0cnVjdCBKU1Byb21pc2VGdW5jdGlvbkRhdGEgewogIEpTVmFsdWUgcHJvbWlzZTsKICBKU1Byb21pc2VGdW5jdGlvbkRhdGFSZXNvbHZlZCogcHJlc29sdmVkOwp9IEpTUHJvbWlzZUZ1bmN0aW9uRGF0YTsKCnR5cGVkZWYgc3RydWN0IEpTUHJvbWlzZVJlYWN0aW9uRGF0YSB7CiAgc3RydWN0IGxpc3RfaGVhZCBsaW5rOyAvKiBub3QgdXNlZCBpbiBwcm9taXNlX3JlYWN0aW9uX2pvYiAqLwogIEpTVmFsdWUgcmVzb2x2aW5nX2Z1bmNzWzJdOwogIEpTVmFsdWUgaGFuZGxlcjsKfSBKU1Byb21pc2VSZWFjdGlvbkRhdGE7Cgp0eXBlZGVmIHN0cnVjdCBKU0JvdW5kRnVuY3Rpb24gewogIEpTVmFsdWUgZnVuY19vYmo7CiAgSlNWYWx1ZSB0aGlzX3ZhbDsKICBpbnQgYXJnYzsKICBKU1ZhbHVlIGFyZ3ZbMF07Cn0gSlNCb3VuZEZ1bmN0aW9uOwoKdHlwZWRlZiBlbnVtIEpTSXRlcmF0b3JLaW5kRW51bSB7CiAgSlNfSVRFUkFUT1JfS0lORF9LRVksCiAgSlNfSVRFUkFUT1JfS0lORF9WQUxVRSwKICBKU19JVEVSQVRPUl9LSU5EX0tFWV9BTkRfVkFMVUUsCn0gSlNJdGVyYXRvcktpbmRFbnVtOwoKdHlwZWRlZiBzdHJ1Y3QgSlNGb3JJbkl0ZXJhdG9yIHsKICBKU1ZhbHVlIG9iajsKICBCT09MIGlzX2FycmF5OwogIHVpbnQzMl90IGFycmF5X2xlbmd0aDsKICB1aW50MzJfdCBpZHg7Cn0gSlNGb3JJbkl0ZXJhdG9yOwoKdHlwZWRlZiBlbnVtIHsKICAvKiBiaW5hcnkgb3BlcmF0b3JzICovCiAgSlNfT1ZPUF9BREQsCiAgSlNfT1ZPUF9TVUIsCiAgSlNfT1ZPUF9NVUwsCiAgSlNfT1ZPUF9ESVYsCiAgSlNfT1ZPUF9NT0QsCiAgSlNfT1ZPUF9QT1csCiAgSlNfT1ZPUF9PUiwKICBKU19PVk9QX0FORCwKICBKU19PVk9QX1hPUiwKICBKU19PVk9QX1NITCwKICBKU19PVk9QX1NBUiwKICBKU19PVk9QX1NIUiwKICBKU19PVk9QX0VRLAogIEpTX09WT1BfTEVTUywKCiAgSlNfT1ZPUF9CSU5BUllfQ09VTlQsCiAgLyogdW5hcnkgb3BlcmF0b3JzICovCiAgSlNfT1ZPUF9QT1MgPSBKU19PVk9QX0JJTkFSWV9DT1VOVCwKICBKU19PVk9QX05FRywKICBKU19PVk9QX0lOQywKICBKU19PVk9QX0RFQywKICBKU19PVk9QX05PVCwKCiAgSlNfT1ZPUF9DT1VOVCwKfSBKU092ZXJsb2FkYWJsZU9wZXJhdG9yRW51bTsKCnR5cGVkZWYgc3RydWN0IHsKICB1aW50MzJfdCBvcGVyYXRvcl9pbmRleDsKICBKU09iamVjdCogb3BzW0pTX09WT1BfQklOQVJZX0NPVU5UXTsgLyogc2VsZiBvcGVyYXRvcnMgKi8KfSBKU0JpbmFyeU9wZXJhdG9yRGVmRW50cnk7Cgp0eXBlZGVmIHN0cnVjdCB7CiAgaW50IGNvdW50OwogIEpTQmluYXJ5T3BlcmF0b3JEZWZFbnRyeSogdGFiOwp9IEpTQmluYXJ5T3BlcmF0b3JEZWY7Cgp0eXBlZGVmIHN0cnVjdCB7CiAgdWludDMyX3Qgb3BlcmF0b3JfY291bnRlcjsKICBCT09MIGlzX3ByaW1pdGl2ZTsgLyogT3BlcmF0b3JTZXQgZm9yIGEgcHJpbWl0aXZlIHR5cGUgKi8KICAvKiBOVUxMIGlmIG5vIG9wZXJhdG9yIGlzIGRlZmluZWQgKi8KICBKU09iamVjdCogc2VsZl9vcHNbSlNfT1ZPUF9DT1VOVF07IC8qIHNlbGYgb3BlcmF0b3JzICovCiAgSlNCaW5hcnlPcGVyYXRvckRlZiBsZWZ0OwogIEpTQmluYXJ5T3BlcmF0b3JEZWYgcmlnaHQ7Cn0gSlNPcGVyYXRvclNldERhdGE7Cgp0eXBlZGVmIHN0cnVjdCBKU1JlcU1vZHVsZUVudHJ5IHsKICBKU0F0b20gbW9kdWxlX25hbWU7CiAgSlNNb2R1bGVEZWYqIG1vZHVsZTsgLyogdXNlZCB1c2luZyByZXNvbHV0aW9uICovCn0gSlNSZXFNb2R1bGVFbnRyeTsKCnR5cGVkZWYgZW51bSBKU0V4cG9ydFR5cGVFbnVtIHsKICBKU19FWFBPUlRfVFlQRV9MT0NBTCwKICBKU19FWFBPUlRfVFlQRV9JTkRJUkVDVCwKfSBKU0V4cG9ydFR5cGVFbnVtOwoKdHlwZWRlZiBzdHJ1Y3QgSlNFeHBvcnRFbnRyeSB7CiAgdW5pb24gewogICAgc3RydWN0IHsKICAgICAgaW50IHZhcl9pZHg7ICAgICAgIC8qIGNsb3N1cmUgdmFyaWFibGUgaW5kZXggKi8KICAgICAgSlNWYXJSZWYqIHZhcl9yZWY7IC8qIGlmICE9IE5VTEwsIHJlZmVyZW5jZSB0byB0aGUgdmFyaWFibGUgKi8KICAgIH0gbG9jYWw7ICAgICAgICAgICAgIC8qIGZvciBsb2NhbCBleHBvcnQgKi8KICAgIGludCByZXFfbW9kdWxlX2lkeDsgIC8qIG1vZHVsZSBmb3IgaW5kaXJlY3QgZXhwb3J0ICovCiAgfSB1OwogIEpTRXhwb3J0VHlwZUVudW0gZXhwb3J0X3R5cGU7CiAgSlNBdG9tIGxvY2FsX25hbWU7ICAvKiAnKicgaWYgZXhwb3J0IG5zIGZyb20uIG5vdCB1c2VkIGZvciBsb2NhbAogICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0IGFmdGVyIGNvbXBpbGF0aW9uICovCiAgSlNBdG9tIGV4cG9ydF9uYW1lOyAvKiBleHBvcnRlZCB2YXJpYWJsZSBuYW1lICovCn0gSlNFeHBvcnRFbnRyeTsKCnR5cGVkZWYgc3RydWN0IEpTU3RhckV4cG9ydEVudHJ5IHsKICBpbnQgcmVxX21vZHVsZV9pZHg7IC8qIGluIHJlcV9tb2R1bGVfZW50cmllcyAqLwp9IEpTU3RhckV4cG9ydEVudHJ5OwoKdHlwZWRlZiBzdHJ1Y3QgSlNJbXBvcnRFbnRyeSB7CiAgaW50IHZhcl9pZHg7IC8qIGNsb3N1cmUgdmFyaWFibGUgaW5kZXggKi8KICBKU0F0b20gaW1wb3J0X25hbWU7CiAgaW50IHJlcV9tb2R1bGVfaWR4OyAvKiBpbiByZXFfbW9kdWxlX2VudHJpZXMgKi8KfSBKU0ltcG9ydEVudHJ5OwoKc3RydWN0IEpTTW9kdWxlRGVmIHsKICBKU1JlZkNvdW50SGVhZGVyIGhlYWRlcjsgLyogbXVzdCBjb21lIGZpcnN0LCAzMi1iaXQgKi8KICBKU0F0b20gbW9kdWxlX25hbWU7CiAgc3RydWN0IGxpc3RfaGVhZCBsaW5rOwoKICBKU1JlcU1vZHVsZUVudHJ5KiByZXFfbW9kdWxlX2VudHJpZXM7CiAgaW50IHJlcV9tb2R1bGVfZW50cmllc19jb3VudDsKICBpbnQgcmVxX21vZHVsZV9lbnRyaWVzX3NpemU7CgogIEpTRXhwb3J0RW50cnkqIGV4cG9ydF9lbnRyaWVzOwogIGludCBleHBvcnRfZW50cmllc19jb3VudDsKICBpbnQgZXhwb3J0X2VudHJpZXNfc2l6ZTsKCiAgSlNTdGFyRXhwb3J0RW50cnkqIHN0YXJfZXhwb3J0X2VudHJpZXM7CiAgaW50IHN0YXJfZXhwb3J0X2VudHJpZXNfY291bnQ7CiAgaW50IHN0YXJfZXhwb3J0X2VudHJpZXNfc2l6ZTsKCiAgSlNJbXBvcnRFbnRyeSogaW1wb3J0X2VudHJpZXM7CiAgaW50IGltcG9ydF9lbnRyaWVzX2NvdW50OwogIGludCBpbXBvcnRfZW50cmllc19zaXplOwoKICBKU1ZhbHVlIG1vZHVsZV9uczsKICBKU1ZhbHVlIGZ1bmNfb2JqOyAgICAgICAgICAgIC8qIG9ubHkgdXNlZCBmb3IgSlMgbW9kdWxlcyAqLwogIEpTTW9kdWxlSW5pdEZ1bmMqIGluaXRfZnVuYzsgLyogb25seSB1c2VkIGZvciBDIG1vZHVsZXMgKi8KICBCT09MIHJlc29sdmVkIDogODsKICBCT09MIGZ1bmNfY3JlYXRlZCA6IDg7CiAgQk9PTCBpbnN0YW50aWF0ZWQgOiA4OwogIEJPT0wgZXZhbHVhdGVkIDogODsKICBCT09MIGV2YWxfbWFyayA6IDg7IC8qIHRlbXBvcmFyeSB1c2UgZHVyaW5nIGpzX2V2YWx1YXRlX21vZHVsZSgpICovCiAgLyogdHJ1ZSBpZiBldmFsdWF0aW9uIHlpZWxkZWQgYW4gZXhjZXB0aW9uLiBJdCBpcyBzYXZlZCBpbgogICAgIGV2YWxfZXhjZXB0aW9uICovCiAgQk9PTCBldmFsX2hhc19leGNlcHRpb24gOiA4OwogIEpTVmFsdWUgZXZhbF9leGNlcHRpb247CiAgSlNWYWx1ZSBtZXRhX29iajsgLyogZm9yIGltcG9ydC5tZXRhICovCn07Cgp0eXBlZGVmIHN0cnVjdCBKU0pvYkVudHJ5IHsKICBzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7CiAgSlNDb250ZXh0KiBjdHg7CiAgSlNKb2JGdW5jKiBqb2JfZnVuYzsKICBpbnQgYXJnYzsKICBKU1ZhbHVlIGFyZ3ZbMF07Cn0gSlNKb2JFbnRyeTsKCi8qIFNldC9NYXAvV2Vha1NldC9XZWFrTWFwICovCgp0eXBlZGVmIHN0cnVjdCBKU01hcFJlY29yZCB7CiAgaW50IHJlZl9jb3VudDsgLyogdXNlZCBkdXJpbmcgZW51bWVyYXRpb24gdG8gYXZvaWQgZnJlZWluZyB0aGUgcmVjb3JkICovCiAgQk9PTCBlbXB0eTsgICAgLyogVFJVRSBpZiB0aGUgcmVjb3JkIGlzIGRlbGV0ZWQgKi8KICBzdHJ1Y3QgSlNNYXBTdGF0ZSogbWFwOwogIHN0cnVjdCBKU01hcFJlY29yZCogbmV4dF93ZWFrX3JlZjsKICBzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7CiAgc3RydWN0IGxpc3RfaGVhZCBoYXNoX2xpbms7CiAgSlNWYWx1ZSBrZXk7CiAgSlNWYWx1ZSB2YWx1ZTsKfSBKU01hcFJlY29yZDsKCnR5cGVkZWYgc3RydWN0IEpTTWFwU3RhdGUgewogIEJPT0wgaXNfd2VhazsgICAgICAgICAgICAgLyogVFJVRSBpZiBXZWFrU2V0L1dlYWtNYXAgKi8KICBzdHJ1Y3QgbGlzdF9oZWFkIHJlY29yZHM7IC8qIGxpc3Qgb2YgSlNNYXBSZWNvcmQubGluayAqLwogIHVpbnQzMl90IHJlY29yZF9jb3VudDsKICBzdHJ1Y3QgbGlzdF9oZWFkKiBoYXNoX3RhYmxlOwogIHVpbnQzMl90IGhhc2hfc2l6ZTsgICAgICAgICAgICAgIC8qIG11c3QgYmUgYSBwb3dlciBvZiB0d28gKi8KICB1aW50MzJfdCByZWNvcmRfY291bnRfdGhyZXNob2xkOyAvKiBjb3VudCBhdCB3aGljaCBhIGhhc2ggdGFibGUgcmVzaXplIGlzIG5lZWRlZCAqLwp9IEpTTWFwU3RhdGU7CgojZGVmaW5lIE1BR0lDX1NFVCAoMSA8PCAwKQojZGVmaW5lIE1BR0lDX1dFQUsgKDEgPDwgMSkKCnR5cGVkZWYgc3RydWN0IEpTTWFwSXRlcmF0b3JEYXRhIHsKICBKU1ZhbHVlIG9iajsKICBKU0l0ZXJhdG9yS2luZEVudW0ga2luZDsKICBKU01hcFJlY29yZCogY3VyX3JlY29yZDsKfSBKU01hcEl0ZXJhdG9yRGF0YTsKCnR5cGVkZWYgc3RydWN0IEpTT3BDb2RlIHsKICB1aW50OF90IHNpemU7IC8qIGluIGJ5dGVzICovCiAgLyogdGhlIG9wY29kZXMgcmVtb3ZlIG5fcG9wIGl0ZW1zIGZyb20gdGhlIHRvcCBvZiB0aGUgc3RhY2ssIHRoZW4KICAgICBwdXNoZXMgbl9wdXNoIGl0ZW1zICovCiAgdWludDhfdCBuX3BvcDsKICB1aW50OF90IG5fcHVzaDsKICB1aW50OF90IGZtdDsKICBjb25zdCBjaGFyKiBuYW1lOwp9IEpTT3BDb2RlOwoKI2lmIFNIT1JUX09QQ09ERVMKLyogQWZ0ZXIgdGhlIGZpbmFsIGNvbXBpbGF0aW9uIHBhc3MsIHNob3J0IG9wY29kZXMgYXJlIHVzZWQuIFRoZWlyCiAgIG9wY29kZXMgb3ZlcmxhcCB3aXRoIHRoZSB0ZW1wb3Jhcnkgb3Bjb2RlcyB3aGljaCBjYW5ub3QgYXBwZWFyIGluCiAgIHRoZSBmaW5hbCBieXRlY29kZS4gVGhlaXIgZGVzY3JpcHRpb24gaXMgYWZ0ZXIgdGhlIHRlbXBvcmFyeQogICBvcGNvZGVzIGluIG9wY29kZV9pbmZvW10uICovCiNkZWZpbmUgc2hvcnRfb3Bjb2RlX2luZm8ob3ApIG9wY29kZV9pbmZvWyhvcCkgPj0gT1BfVEVNUF9TVEFSVCA/IChvcCkgKyAoT1BfVEVNUF9FTkQgLSBPUF9URU1QX1NUQVJUKSA6IChvcCldCiNlbHNlCiNkZWZpbmUgc2hvcnRfb3Bjb2RlX2luZm8ob3ApIG9wY29kZV9pbmZvW29wXQojZW5kaWYKCmV4dGVybiBjb25zdCBKU09wQ29kZSBqc19vcGNvZGVzW09QX0NPVU5UICsgKE9QX1RFTVBfRU5EIC0gT1BfVEVNUF9TVEFSVCldOwoKdHlwZWRlZiBzdHJ1Y3QgSlNQYXJzZVBvcyB7CiAgaW50IGxhc3RfbGluZV9udW07CiAgaW50IGxpbmVfbnVtOwogIEJPT0wgZ290X2xmOwogIGNvbnN0IHVpbnQ4X3QqIHB0cjsKfSBKU1BhcnNlUG9zOwoKdHlwZWRlZiBzdHJ1Y3QgSlNSZXNvbHZlRW50cnkgewogIEpTTW9kdWxlRGVmKiBtb2R1bGU7CiAgSlNBdG9tIG5hbWU7Cn0gSlNSZXNvbHZlRW50cnk7Cgp0eXBlZGVmIHN0cnVjdCBKU1Jlc29sdmVTdGF0ZSB7CiAgSlNSZXNvbHZlRW50cnkqIGFycmF5OwogIGludCBzaXplOwogIGludCBjb3VudDsKfSBKU1Jlc29sdmVTdGF0ZTsKCnR5cGVkZWYgZW51bSB7CiAgRVhQT1JURURfTkFNRV9BTUJJR1VPVVMsCiAgRVhQT1JURURfTkFNRV9OT1JNQUwsCiAgRVhQT1JURURfTkFNRV9OUywKfSBFeHBvcnRlZE5hbWVFbnRyeUVudW07Cgp0eXBlZGVmIHN0cnVjdCBFeHBvcnRlZE5hbWVFbnRyeSB7CiAgSlNBdG9tIGV4cG9ydF9uYW1lOwogIEV4cG9ydGVkTmFtZUVudHJ5RW51bSBleHBvcnRfdHlwZTsKICB1bmlvbiB7CiAgICBKU0V4cG9ydEVudHJ5KiBtZTsgICAvKiB1c2luZyB3aGVuIHRoZSBsaXN0IGlzIGJ1aWx0ICovCiAgICBKU1ZhclJlZiogdmFyX3JlZjsgICAvKiBFWFBPUlRFRF9OQU1FX05PUk1BTCAqLwogICAgSlNNb2R1bGVEZWYqIG1vZHVsZTsgLyogZm9yIEVYUE9SVEVEX05BTUVfTlMgKi8KICB9IHU7Cn0gRXhwb3J0ZWROYW1lRW50cnk7Cgp0eXBlZGVmIHN0cnVjdCBHZXRFeHBvcnROYW1lc1N0YXRlIHsKICBKU01vZHVsZURlZioqIG1vZHVsZXM7CiAgaW50IG1vZHVsZXNfc2l6ZTsKICBpbnQgbW9kdWxlc19jb3VudDsKCiAgRXhwb3J0ZWROYW1lRW50cnkqIGV4cG9ydGVkX25hbWVzOwogIGludCBleHBvcnRlZF9uYW1lc19zaXplOwogIGludCBleHBvcnRlZF9uYW1lc19jb3VudDsKfSBHZXRFeHBvcnROYW1lc1N0YXRlOwoKdHlwZWRlZiBzdHJ1Y3QgQ29kZUNvbnRleHQgewogIGNvbnN0IHVpbnQ4X3QqIGJjX2J1ZjsgLyogY29kZSBidWZmZXIgKi8KICBpbnQgYmNfbGVuOyAgICAgICAgICAgIC8qIGxlbmd0aCBvZiB0aGUgY29kZSBidWZmZXIgKi8KICBpbnQgcG9zOyAgICAgICAgICAgICAgIC8qIHBvc2l0aW9uIHBhc3QgdGhlIG1hdGNoZWQgY29kZSBwYXR0ZXJuICovCiAgaW50IGxpbmVfbnVtOyAgICAgICAgICAvKiBsYXN0IHZpc2l0ZWQgT1BfbGluZV9udW0gcGFyYW1ldGVyIG9yIC0xICovCiAgaW50IG9wOwogIGludCBpZHg7CiAgaW50IGxhYmVsOwogIGludCB2YWw7CiAgSlNBdG9tIGF0b207Cn0gQ29kZUNvbnRleHQ7Cgp0eXBlZGVmIHN0cnVjdCBTdGFja1NpemVTdGF0ZSB7CiAgaW50IGJjX2xlbjsKICBpbnQgc3RhY2tfbGVuX21heDsKICB1aW50MTZfdCogc3RhY2tfbGV2ZWxfdGFiOwogIGludCogcGNfc3RhY2s7CiAgaW50IHBjX3N0YWNrX2xlbjsKICBpbnQgcGNfc3RhY2tfc2l6ZTsKfSBTdGFja1NpemVTdGF0ZTsKCnR5cGVkZWYgc3RydWN0IHsKICBKU09iamVjdCogb2JqOwogIHVpbnQzMl90IGhhc2hfbmV4dDsgLyogLTEgaWYgbm8gbmV4dCBlbnRyeSAqLwp9IEpTT2JqZWN0TGlzdEVudHJ5OwoKLyogWFhYOiByZXVzZSBpdCB0byBvcHRpbWl6ZSB3ZWFrIHJlZmVyZW5jZXMgKi8KdHlwZWRlZiBzdHJ1Y3QgewogIEpTT2JqZWN0TGlzdEVudHJ5KiBvYmplY3RfdGFiOwogIGludCBvYmplY3RfY291bnQ7CiAgaW50IG9iamVjdF9zaXplOwogIHVpbnQzMl90KiBoYXNoX3RhYmxlOwogIHVpbnQzMl90IGhhc2hfc2l6ZTsKfSBKU09iamVjdExpc3Q7Cgp0eXBlZGVmIGVudW0gQkNUYWdFbnVtIHsKICBCQ19UQUdfTlVMTCA9IDEsCiAgQkNfVEFHX1VOREVGSU5FRCwKICBCQ19UQUdfQk9PTF9GQUxTRSwKICBCQ19UQUdfQk9PTF9UUlVFLAogIEJDX1RBR19JTlQzMiwKICBCQ19UQUdfRkxPQVQ2NCwKICBCQ19UQUdfU1RSSU5HLAogIEJDX1RBR19PQkpFQ1QsCiAgQkNfVEFHX0FSUkFZLAogIEJDX1RBR19CSUdfSU5ULAogIEJDX1RBR19CSUdfRkxPQVQsCiAgQkNfVEFHX0JJR19ERUNJTUFMLAogIEJDX1RBR19URU1QTEFURV9PQkpFQ1QsCiAgQkNfVEFHX0ZVTkNUSU9OX0JZVEVDT0RFLAogIEJDX1RBR19NT0RVTEUsCiAgQkNfVEFHX1RZUEVEX0FSUkFZLAogIEJDX1RBR19BUlJBWV9CVUZGRVIsCiAgQkNfVEFHX1NIQVJFRF9BUlJBWV9CVUZGRVIsCiAgQkNfVEFHX0RBVEUsCiAgQkNfVEFHX09CSkVDVF9WQUxVRSwKICBCQ19UQUdfT0JKRUNUX1JFRkVSRU5DRSwKfSBCQ1RhZ0VudW07CgojaWZkZWYgQ09ORklHX0JJR05VTQojZGVmaW5lIEJDX0JBU0VfVkVSU0lPTiAyCiNlbHNlCiNkZWZpbmUgQkNfQkFTRV9WRVJTSU9OIDEKI2VuZGlmCiNkZWZpbmUgQkNfQkVfVkVSU0lPTiAweDQwCiNpZmRlZiBXT1JEU19CSUdFTkRJQU4KI2RlZmluZSBCQ19WRVJTSU9OIChCQ19CQVNFX1ZFUlNJT04gfCBCQ19CRV9WRVJTSU9OKQojZWxzZQojZGVmaW5lIEJDX1ZFUlNJT04gQkNfQkFTRV9WRVJTSU9OCiNlbmRpZgoKdHlwZWRlZiBzdHJ1Y3QgQkNXcml0ZXJTdGF0ZSB7CiAgSlNDb250ZXh0KiBjdHg7CiAgRHluQnVmIGRidWY7CiAgQk9PTCBieXRlX3N3YXAgOiA4OwogIEJPT0wgYWxsb3dfYnl0ZWNvZGUgOiA4OwogIEJPT0wgYWxsb3dfc2FiIDogODsKICBCT09MIGFsbG93X3JlZmVyZW5jZSA6IDg7CiAgdWludDMyX3QgZmlyc3RfYXRvbTsKICB1aW50MzJfdCogYXRvbV90b19pZHg7CiAgaW50IGF0b21fdG9faWR4X3NpemU7CiAgSlNBdG9tKiBpZHhfdG9fYXRvbTsKICBpbnQgaWR4X3RvX2F0b21fY291bnQ7CiAgaW50IGlkeF90b19hdG9tX3NpemU7CiAgdWludDhfdCoqIHNhYl90YWI7CiAgaW50IHNhYl90YWJfbGVuOwogIGludCBzYWJfdGFiX3NpemU7CiAgLyogbGlzdCBvZiByZWZlcmVuY2VkIG9iamVjdHMgKHVzZWQgaWYgYWxsb3dfcmVmZXJlbmNlID0gVFJVRSkgKi8KICBKU09iamVjdExpc3Qgb2JqZWN0X2xpc3Q7Cn0gQkNXcml0ZXJTdGF0ZTsKCnR5cGVkZWYgc3RydWN0IEJDUmVhZGVyU3RhdGUgewogIEpTQ29udGV4dCogY3R4OwogIGNvbnN0IHVpbnQ4X3QgKmJ1Zl9zdGFydCwgKnB0ciwgKmJ1Zl9lbmQ7CiAgdWludDMyX3QgZmlyc3RfYXRvbTsKICB1aW50MzJfdCBpZHhfdG9fYXRvbV9jb3VudDsKICBKU0F0b20qIGlkeF90b19hdG9tOwogIGludCBlcnJvcl9zdGF0ZTsKICBCT09MIGFsbG93X3NhYiA6IDg7CiAgQk9PTCBhbGxvd19ieXRlY29kZSA6IDg7CiAgQk9PTCBpc19yb21fZGF0YSA6IDg7CiAgQk9PTCBhbGxvd19yZWZlcmVuY2UgOiA4OwogIC8qIG9iamVjdCByZWZlcmVuY2VzICovCiAgSlNPYmplY3QqKiBvYmplY3RzOwogIGludCBvYmplY3RzX2NvdW50OwogIGludCBvYmplY3RzX3NpemU7CgojaWZkZWYgRFVNUF9SRUFEX09CSkVDVAogIGNvbnN0IHVpbnQ4X3QqIHB0cl9sYXN0OwogIGludCBsZXZlbDsKI2VuZGlmCn0gQkNSZWFkZXJTdGF0ZTsKCnR5cGVkZWYgc3RydWN0IHsKICBzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7CiAgaW50IGZkOwogIEpTVmFsdWUgcndfZnVuY1syXTsKICBzc2l6ZV90IGlwZmQ7Cn0gSlNPU1JXSGFuZGxlcjsKCnR5cGVkZWYgc3RydWN0IHsKICBzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7CiAgaW50IHNpZ19udW07CiAgSlNWYWx1ZSBmdW5jOwp9IEpTT1NTaWduYWxIYW5kbGVyOwoKdHlwZWRlZiBzdHJ1Y3QgewogIHN0cnVjdCBsaXN0X2hlYWQgbGluazsKICBCT09MIGhhc19vYmplY3Q7CiAgaW50NjRfdCB0aW1lb3V0OwogIEpTVmFsdWUgZnVuYzsKfSBKU09TVGltZXI7Cgp0eXBlZGVmIHN0cnVjdCB7CiAgc3RydWN0IGxpc3RfaGVhZCBsaW5rOwogIHVpbnQ4X3QqIGRhdGE7CiAgc2l6ZV90IGRhdGFfbGVuOwogIC8qIGxpc3Qgb2YgU2hhcmVkQXJyYXlCdWZmZXJzLCBuZWNlc3NhcnkgdG8gZnJlZSB0aGUgbWVzc2FnZSAqLwogIHVpbnQ4X3QqKiBzYWJfdGFiOwogIHNpemVfdCBzYWJfdGFiX2xlbjsKfSBKU1dvcmtlck1lc3NhZ2U7Cgp0eXBlZGVmIHN0cnVjdCB7CiAgaW50IHJlZl9jb3VudDsKI2lmZGVmIFVTRV9XT1JLRVIKICBwdGhyZWFkX211dGV4X3QgbXV0ZXg7CiNlbmRpZgogIHN0cnVjdCBsaXN0X2hlYWQgbXNnX3F1ZXVlOyAvKiBsaXN0IG9mIEpTV29ya2VyTWVzc2FnZS5saW5rICovCiAgaW50IHJlYWRfZmQ7CiAgaW50IHdyaXRlX2ZkOwogIHNzaXplX3QgaXBmZDsKfSBKU1dvcmtlck1lc3NhZ2VQaXBlOwoKdHlwZWRlZiBzdHJ1Y3QgewogIHN0cnVjdCBsaXN0X2hlYWQgbGluazsKICBKU1dvcmtlck1lc3NhZ2VQaXBlKiByZWN2X3BpcGU7CiAgSlNWYWx1ZSBvbl9tZXNzYWdlX2Z1bmM7Cn0gSlNXb3JrZXJNZXNzYWdlSGFuZGxlcjsKCnR5cGVkZWYgc3RydWN0IEpTVGhyZWFkU3RhdGUgewogIHN0cnVjdCBsaXN0X2hlYWQgb3NfcndfaGFuZGxlcnM7ICAgICAvKiBsaXN0IG9mIEpTT1NSV0hhbmRsZXIubGluayAqLwogIHN0cnVjdCBsaXN0X2hlYWQgb3Nfc2lnbmFsX2hhbmRsZXJzOyAvKiBsaXN0IEpTT1NTaWduYWxIYW5kbGVyLmxpbmsgKi8KICBzdHJ1Y3QgbGlzdF9oZWFkIG9zX3RpbWVyczsgICAgICAgICAgLyogbGlzdCBvZiBKU09TVGltZXIubGluayAqLwogIHN0cnVjdCBsaXN0X2hlYWQgcG9ydF9saXN0OyAgICAgICAgICAvKiBsaXN0IG9mIEpTV29ya2VyTWVzc2FnZUhhbmRsZXIubGluayAqLwogIGludCBldmFsX3NjcmlwdF9yZWN1cnNlOyAgICAgICAgICAgICAvKiBvbmx5IHVzZWQgaW4gdGhlIG1haW4gdGhyZWFkICovCiAgLyogbm90IHVzZWQgaW4gdGhlIG1haW4gdGhyZWFkICovCiAgSlNXb3JrZXJNZXNzYWdlUGlwZSAqcmVjdl9waXBlLCAqc2VuZF9waXBlOwp9IEpTVGhyZWFkU3RhdGU7Cgp0eXBlZGVmIHN0cnVjdCB7CiAgaW50IHJlZl9jb3VudDsKICB1aW50NjRfdCBidWZbMF07Cn0gSlNTQUJIZWFkZXI7Cgp0eXBlZGVmIHN0cnVjdCB7CiAgRklMRSogZjsKICBCT09MIGNsb3NlX2luX2ZpbmFsaXplcjsKICBCT09MIGlzX3BvcGVuOwp9IEpTU1RERmlsZTsKCkJPT0wgSlNfSXNVbmNhdGNoYWJsZUVycm9yKEpTQ29udGV4dCosIEpTVmFsdWVDb25zdCk7CgojZW5kaWYgLyogZGVmaW5lZChRSlNfTU9EVUxFU19JTlRFUk5BTF9IKSAqLwoAAAAAAAAAAP+SAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "resolve-imports.js",
			"settings":
			{
				"buffer_size": 42454,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					451,
					1,
					"insert",
					{
						"characters": "WS"
					},
					"AgAAAAwpAAAAAAAADSkAAAAAAAAAAAAADSkAAAAAAAAOKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADCkAAAAAAAAMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAA4pAAAAAAAAECkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADikAAAAAAAAOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					3,
					"right_delete",
					null,
					"AwAAAA8pAAAAAAAADykAAAAAAAABAAAAKQ8pAAAAAAAADykAAAAAAAABAAAAIA8pAAAAAAAADykAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAADykAAAAAAAAPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAA8pAAAAAAAAECkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADykAAAAAAAAPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAABMpAAAAAAAAFCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEykAAAAAAAATKQAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": "+00"
					},
					"AwAAABQpAAAAAAAAFSkAAAAAAAAAAAAAFSkAAAAAAAAWKQAAAAAAAAAAAAAWKQAAAAAAABcpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFCkAAAAAAAAUKQAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					2,
					"left_delete",
					null,
					"AgAAABYpAAAAAAAAFikAAAAAAAABAAAAMBUpAAAAAAAAFSkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAFykAAAAAAAAXKQAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": "''"
					},
					"AgAAABUpAAAAAAAAFikAAAAAAAAAAAAAFikAAAAAAAAXKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSkAAAAAAAAVKQAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					6,
					"left_delete",
					null,
					"BgAAAA4pAAAAAAAADikAAAAAAAABAAAAKA0pAAAAAAAADSkAAAAAAAABAAAAUwwpAAAAAAAADCkAAAAAAAABAAAAVwspAAAAAAAACykAAAAAAAABAAAAbgopAAAAAAAACikAAAAAAAABAAAAbwkpAAAAAAAACSkAAAAAAAABAAAATg",
					"AQAAAAAAAAABAAAADykAAAAAAAAPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"right_delete",
					null,
					"AQAAAAwpAAAAAAAADCkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAADCkAAAAAAAAMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BQAAAGcoAAAAAAAAaCgAAAAAAAAAAAAAaCgAAAAAAABuKAAAAAAAAAAAAABuKAAAAAAAAHAoAAAAAAAAAAAAAHAoAAAAAAAAcSgAAAAAAAAAAAAAcSgAAAAAAAByKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZygAAAAAAABnKAAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHIoAAAAAAAAdCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcigAAAAAAAByKAAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "imp.indexOf"
					},
					"CwAAAHMoAAAAAAAAdCgAAAAAAAAAAAAAdCgAAAAAAAB1KAAAAAAAAAAAAAB1KAAAAAAAAHYoAAAAAAAAAAAAAHYoAAAAAAAAdygAAAAAAAAAAAAAdygAAAAAAAB4KAAAAAAAAAAAAAB4KAAAAAAAAHkoAAAAAAAAAAAAAHkoAAAAAAAAeigAAAAAAAAAAAAAeigAAAAAAAB7KAAAAAAAAAAAAAB7KAAAAAAAAHwoAAAAAAAAAAAAAHwoAAAAAAAAfSgAAAAAAAAAAAAAfSgAAAAAAAB+KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcygAAAAAAABzKAAAAAAAAAAAAAAAAPC/"
				],
				[
					552,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAH4oAAAAAAAAgCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfigAAAAAAAB+KAAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": "token"
					},
					"BQAAAH8oAAAAAAAAgCgAAAAAAAAAAAAAgCgAAAAAAACBKAAAAAAAAAAAAACBKAAAAAAAAIIoAAAAAAAAAAAAAIIoAAAAAAAAgygAAAAAAAAAAAAAgygAAAAAAACEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfygAAAAAAAB/KAAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAIUoAAAAAAAAhigAAAAAAAAAAAAAhigAAAAAAACHKAAAAAAAAAAAAACHKAAAAAAAAIgoAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhSgAAAAAAACFKAAAAAAAAAAAAAAAAPC/"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": " 1"
					},
					"AgAAAIgoAAAAAAAAiSgAAAAAAAAAAAAAiSgAAAAAAACKKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiCgAAAAAAACIKAAAAAAAAAAAAAAAAPC/"
				],
				[
					557,
					1,
					"left_delete",
					null,
					"AQAAAIkoAAAAAAAAiSgAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAiigAAAAAAACKKAAAAAAAAAAAAAAAAPC/"
				],
				[
					558,
					1,
					"insert",
					{
						"characters": "-1"
					},
					"AgAAAIkoAAAAAAAAiigAAAAAAAAAAAAAiigAAAAAAACLKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiSgAAAAAAACJKAAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"left_delete",
					null,
					"AQAAAIYoAAAAAAAAhigAAAAAAAABAAAAIQ",
					"AQAAAAAAAAABAAAAhygAAAAAAACHKAAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIYoAAAAAAAAhygAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhigAAAAAAACGKAAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAI0oAAAAAAAAjygAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjSgAAAAAAACNKAAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"cut",
					null,
					"AQAAANgoAAAAAAAA2CgAAAAAAABxAAAAICAgICAgICAgIGNvbnNvbGUubG9nKCdpbXAnLGNvbnNvbGUuY29uZmlnKHticmVha0xlbmd0aDo4MCwgY29tcGFjdDogMX0pLCBUb2tlblNlcXVlbmNlKGltcCkrJycsIGltcFswXS5sb2MrJycpOwo",
					"AQAAAAAAAAABAAAA2CgAAAAAAABJKQAAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"paste",
					null,
					"AQAAAK8oAAAAAAAAICkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArygAAAAAAACvKAAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"cut",
					null,
					"AQAAAA8pAAAAAAAADykAAAAAAAAOAAAAIGltcFswXS5sb2MrJyc",
					"AQAAAAAAAAABAAAADykAAAAAAAAdKQAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"left_delete",
					null,
					"AQAAAA4pAAAAAAAADikAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAADykAAAAAAAAPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					594,
					1,
					"paste",
					null,
					"AgAAAMUoAAAAAAAA0ygAAAAAAAAAAAAA0ygAAAAAAADTKAAAAAAAAAUAAAAnaW1wJw",
					"AQAAAAAAAAABAAAAxSgAAAAAAADKKAAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAB4pAAAAAAAAHykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHikAAAAAAAAeKQAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"left_delete",
					null,
					"AQAAAB4pAAAAAAAAHikAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAHykAAAAAAAAfKQAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"insert",
					{
						"characters": "imp.last.lex"
					},
					"DAAAAB4pAAAAAAAAHykAAAAAAAAAAAAAHykAAAAAAAAgKQAAAAAAAAAAAAAgKQAAAAAAACEpAAAAAAAAAAAAACEpAAAAAAAAIikAAAAAAAAAAAAAIikAAAAAAAAjKQAAAAAAAAAAAAAjKQAAAAAAACQpAAAAAAAAAAAAACQpAAAAAAAAJSkAAAAAAAAAAAAAJSkAAAAAAAAmKQAAAAAAAAAAAAAmKQAAAAAAACcpAAAAAAAAAAAAACcpAAAAAAAAKCkAAAAAAAAAAAAAKCkAAAAAAAApKQAAAAAAAAAAAAApKQAAAAAAACopAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHikAAAAAAAAeKQAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"insert",
					{
						"characters": "eme"
					},
					"AwAAACopAAAAAAAAKykAAAAAAAAAAAAAKykAAAAAAAAsKQAAAAAAAAAAAAAsKQAAAAAAAC0pAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKikAAAAAAAAqKQAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAC0pAAAAAAAALikAAAAAAAAAAAAALikAAAAAAAAvKQAAAAAAAAAAAAAvKQAAAAAAADApAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALSkAAAAAAAAtKQAAAAAAAAAAAAAAAPC/"
				],
				[
					649,
					1,
					"insert",
					{
						"characters": " ';'"
					},
					"BAAAADApAAAAAAAAMSkAAAAAAAAAAAAAMSkAAAAAAAAyKQAAAAAAAAAAAAAyKQAAAAAAADMpAAAAAAAAAAAAADMpAAAAAAAANCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMCkAAAAAAAAwKQAAAAAAAAAAAAAAAPC/"
				],
				[
					652,
					1,
					"left_delete",
					null,
					"AQAAADQpAAAAAAAANCkAAAAAAAAhAAAAWyc7J10uaW5kZXhPZih0b2tlbi5sZXhlbWUpICE9IC0x",
					"AQAAAAAAAAABAAAANCkAAAAAAABVKQAAAAAAAAAAAAAAAPC/"
				],
				[
					662,
					3,
					"left_delete",
					null,
					"AwAAABYpAAAAAAAAFikAAAAAAAABAAAAJxUpAAAAAAAAFSkAAAAAAAABAAAAJxQpAAAAAAAAFCkAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAFykAAAAAAAAXKQAAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAJgpAAAAAAAAmSkAAAAAAAAAAAAAmSkAAAAAAACZKQAAAAAAAAkAAAAgICAgICAvLyA",
					"AQAAAAAAAAABAAAAoSkAAAAAAACYKQAAAAAAAAAAAAAAAPC/"
				],
				[
					764,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AgAAAAIpAAAAAAAAAykAAAAAAAAAAAAAAykAAAAAAAADKQAAAAAAAA0AAABUb2tlblNlcXVlbmNl",
					"AQAAAAAAAAABAAAAAikAAAAAAAAPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					765,
					1,
					"left_delete",
					null,
					"AQAAAAIpAAAAAAAAAikAAAAAAAABAAAAQg",
					"AQAAAAAAAAABAAAAAykAAAAAAAADKQAAAAAAAAAAAAAAAPC/"
				],
				[
					766,
					1,
					"insert",
					{
						"characters": "NonWS"
					},
					"BQAAAAIpAAAAAAAAAykAAAAAAAAAAAAAAykAAAAAAAAEKQAAAAAAAAAAAAAEKQAAAAAAAAUpAAAAAAAAAAAAAAUpAAAAAAAABikAAAAAAAAAAAAABikAAAAAAAAHKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAikAAAAAAAACKQAAAAAAAAAAAAAAAPC/"
				],
				[
					773,
					1,
					"insert",
					{
						"characters": "9"
					},
					"AgAAAP0oAAAAAAAA/igAAAAAAAAAAAAA/igAAAAAAAD+KAAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAA/SgAAAAAAAD+KAAAAAAAAAAAAAAAAPC/"
				],
				[
					774,
					1,
					"left_delete",
					null,
					"AQAAAP0oAAAAAAAA/SgAAAAAAAABAAAAOQ",
					"AQAAAAAAAAABAAAA/igAAAAAAAD+KAAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAP0oAAAAAAAA/igAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SgAAAAAAAD9KAAAAAAAAAAAAAAAAPC/"
				],
				[
					781,
					1,
					"cut",
					null,
					"AQAAAIopAAAAAAAAiikAAAAAAABNAAAAICAgICAgIGNvbnNvbGUubG9nKCdpbXAnLGNvbnNvbGUuY29uZmlnKHticmVha0xlbmd0aDo4MCwgY29tcGFjdDogMH0pLCBpbXApOwo",
					"AQAAAAAAAAABAAAAiikAAAAAAADXKQAAAAAAAAAAAAAAAAAA"
				],
				[
					783,
					1,
					"paste",
					null,
					"AQAAAC0pAAAAAAAAeikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALSkAAAAAAAAtKQAAAAAAAAAAAAAAAAAA"
				],
				[
					796,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALkoAAAAAAAAuigAAAAAAAAAAAAAuigAAAAAAAC7KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuSgAAAAAAAC5KAAAAAAAAAAAAAAAAPC/"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYpAAAAAAAAdykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdikAAAAAAAB2KQAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					1,
					"insert",
					{
						"characters": "Tok"
					},
					"AwAAAHYpAAAAAAAAdykAAAAAAAAAAAAAdykAAAAAAAB4KQAAAAAAAAAAAAB4KQAAAAAAAHkpAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdikAAAAAAAB2KQAAAAAAAAAAAAAAAPC/"
				],
				[
					807,
					1,
					"insert_completion",
					{
						"completion": "TokenSequence",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "TokenSequence"
					},
					"AgAAAHYpAAAAAAAAdikAAAAAAAADAAAAVG9rdikAAAAAAACDKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeSkAAAAAAAB5KQAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAIMpAAAAAAAAhCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgykAAAAAAACDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					809,
					1,
					"left_delete",
					null,
					"AQAAAIMpAAAAAAAAgykAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAhCkAAAAAAACEKQAAAAAAAAAAAAAAAPC/"
				],
				[
					810,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIMpAAAAAAAAhSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgykAAAAAAACDKQAAAAAAAAAAAAAAAPC/"
				],
				[
					811,
					2,
					"right_delete",
					null,
					"AgAAAIQpAAAAAAAAhCkAAAAAAAABAAAAKYQpAAAAAAAAhCkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhCkAAAAAAACEKQAAAAAAAAAAAAAAAPC/"
				],
				[
					813,
					1,
					"insert",
					{
						"characters": "+'')"
					},
					"BAAAAIgpAAAAAAAAiSkAAAAAAAAAAAAAiSkAAAAAAACKKQAAAAAAAAAAAACKKQAAAAAAAIspAAAAAAAAAAAAAIspAAAAAAAAjCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiCkAAAAAAACIKQAAAAAAAAAAAAAAAPC/"
				],
				[
					820,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgpAAAAAAAASSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASCkAAAAAAABIKQAAAAAAAAAAAAAAAPC/"
				],
				[
					822,
					1,
					"insert",
					{
						"characters": "imp"
					},
					"AwAAAEgpAAAAAAAASSkAAAAAAAAAAAAASSkAAAAAAABKKQAAAAAAAAAAAABKKQAAAAAAAEspAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASCkAAAAAAABIKQAAAAAAAAAAAAAAAPC/"
				],
				[
					823,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEspAAAAAAAATSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASykAAAAAAABLKQAAAAAAAAAAAAAAAPC/"
				],
				[
					824,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEwpAAAAAAAATikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATCkAAAAAAABMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAE0pAAAAAAAATikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATSkAAAAAAABNKQAAAAAAAAAAAAAAAPC/"
				],
				[
					826,
					1,
					"left_delete",
					null,
					"AQAAAE0pAAAAAAAATSkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAATikAAAAAAABOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEwpAAAAAAAATCkAAAAAAAABAAAAJ0wpAAAAAAAATCkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAATSkAAAAAAABNKQAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAEwpAAAAAAAATikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATCkAAAAAAABMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAAE0pAAAAAAAATikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATSkAAAAAAABNKQAAAAAAAAAAAAAAAPC/"
				],
				[
					830,
					1,
					"left_delete",
					null,
					"AQAAAE0pAAAAAAAATSkAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAATikAAAAAAABOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAEwpAAAAAAAATCkAAAAAAAABAAAAJ0wpAAAAAAAATCkAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAATSkAAAAAAABNKQAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAEwpAAAAAAAATSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATCkAAAAAAABMKQAAAAAAAAAAAAAAAPC/"
				],
				[
					834,
					1,
					"insert",
					{
						"characters": ".o"
					},
					"AgAAAE4pAAAAAAAATykAAAAAAAAAAAAATykAAAAAAABQKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATikAAAAAAABOKQAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					1,
					"left_delete",
					null,
					"AQAAAE8pAAAAAAAATykAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAUCkAAAAAAABQKQAAAAAAAAAAAAAAAPC/"
				],
				[
					836,
					1,
					"insert",
					{
						"characters": "loc+"
					},
					"BAAAAE8pAAAAAAAAUCkAAAAAAAAAAAAAUCkAAAAAAABRKQAAAAAAAAAAAABRKQAAAAAAAFIpAAAAAAAAAAAAAFIpAAAAAAAAUykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATykAAAAAAABPKQAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFMpAAAAAAAAVSkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUykAAAAAAABTKQAAAAAAAAAAAAAAAPC/"
				],
				[
					839,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFUpAAAAAAAAVikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSkAAAAAAABVKQAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPopAAAAAAAA+ykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+ikAAAAAAAD6KQAAAAAAAAAAAAAAQH1A"
				],
				[
					908,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOMpAAAAAAAA5CkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ykAAAAAAADjKQAAAAAAAAAAAAAAAPC/"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "IsKey"
					},
					"BQAAAOMpAAAAAAAA5CkAAAAAAAAAAAAA5CkAAAAAAADlKQAAAAAAAAAAAADlKQAAAAAAAOYpAAAAAAAAAAAAAOYpAAAAAAAA5ykAAAAAAAAAAAAA5ykAAAAAAADoKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4ykAAAAAAADjKQAAAAAAAAAAAAAAAPC/"
				],
				[
					945,
					1,
					"insert",
					{
						"characters": "word"
					},
					"BAAAAOgpAAAAAAAA6SkAAAAAAAAAAAAA6SkAAAAAAADqKQAAAAAAAAAAAADqKQAAAAAAAOspAAAAAAAAAAAAAOspAAAAAAAA7CkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6CkAAAAAAADoKQAAAAAAAAAAAAAAAPC/"
				],
				[
					946,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOwpAAAAAAAA7ikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7CkAAAAAAADsKQAAAAAAAAAAAAAAAPC/"
				],
				[
					947,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAO0pAAAAAAAA7ykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7SkAAAAAAADtKQAAAAAAAAAAAAAAAPC/"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAAO4pAAAAAAAA7ykAAAAAAAAAAAAA7ykAAAAAAADwKQAAAAAAAAAAAADwKQAAAAAAAPEpAAAAAAAAAAAAAPEpAAAAAAAA8ikAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7ikAAAAAAADuKQAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPMpAAAAAAAA9CkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8ykAAAAAAADzKQAAAAAAAAAAAAAAAPC/"
				],
				[
					951,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAPQpAAAAAAAA9SkAAAAAAAAAAAAA9SkAAAAAAAD2KQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9CkAAAAAAAD0KQAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"cut",
					null,
					"AQAAAPcpAAAAAAAA9ykAAAAAAAAUAAAAIGkubGV4ZW1lID09ICdmcm9tJyk",
					"AQAAAAAAAAABAAAA9ykAAAAAAAALKgAAAAAAAAAAAAAAAPC/"
				],
				[
					957,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAPgpAAAAAAAA+SkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+CkAAAAAAAD4KQAAAAAAAAAAAAAAAPC/"
				],
				[
					958,
					1,
					"left_delete",
					null,
					"AQAAAPgpAAAAAAAA+CkAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA+SkAAAAAAAD5KQAAAAAAAAAAAAAAAPC/"
				],
				[
					959,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAPgpAAAAAAAA+SkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+CkAAAAAAAD4KQAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAC0rAAAAAAAALisAAAAAAAAAAAAALisAAAAAAAAuKwAAAAAAAAYAAAAgICAgLy8",
					"AQAAAAAAAAABAAAAMysAAAAAAAAtKwAAAAAAAAAAAAAAAPC/"
				],
				[
					1167,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAE4oAAAAAAAATygAAAAAAAAAAAAATygAAAAAAABVKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATigAAAAAAABOKAAAAAAAAAAAAAAAgGZA"
				],
				[
					1174,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAE4oAAAAAAAATygAAAAAAAAAAAAATygAAAAAAABVKAAAAAAAAAAAAABWKAAAAAAAAFYoAAAAAAAABgAAACAgICAgIA",
					"AQAAAAAAAAABAAAATigAAAAAAABOKAAAAAAAAP///////+9/"
				],
				[
					1186,
					1,
					"paste",
					null,
					"AQAAAJAnAAAAAAAA/icAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkCcAAAAAAACQJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1191,
					1,
					"insert",
					{
						"characters": "token"
					},
					"BwAAAKQnAAAAAAAApScAAAAAAAAAAAAApScAAAAAAAClJwAAAAAAAAMAAABpbXC7KAAAAAAAALsoAAAAAAAABgAAACAgICAgIKUnAAAAAAAApicAAAAAAAAAAAAApicAAAAAAACnJwAAAAAAAAAAAACnJwAAAAAAAKgnAAAAAAAAAAAAAKgnAAAAAAAAqScAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApCcAAAAAAACnJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1208,
					1,
					"insert",
					{
						"characters": "token"
					},
					"BgAAAOgnAAAAAAAA6ScAAAAAAAAAAAAA6ScAAAAAAADpJwAAAAAAABUAAABUb2tlblNlcXVlbmNlKGltcCkrJyfpJwAAAAAAAOonAAAAAAAAAAAAAOonAAAAAAAA6ycAAAAAAAAAAAAA6ycAAAAAAADsJwAAAAAAAAAAAADsJwAAAAAAAO0nAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6CcAAAAAAAD9JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1215,
					3,
					"left_delete",
					null,
					"AwAAAKwnAAAAAAAArCcAAAAAAAAFAAAAbXBbMF2rJwAAAAAAAKsnAAAAAAAAAQAAAGmqJwAAAAAAAKonAAAAAAAAAQAAACw",
					"AQAAAAAAAAABAAAArCcAAAAAAACxJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1216,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAKonAAAAAAAAqycAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqicAAAAAAACqJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1217,
					1,
					"left_delete",
					null,
					"AQAAAKonAAAAAAAAqicAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAqycAAAAAAACrJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1218,
					1,
					"insert",
					{
						"characters": ",token"
					},
					"BgAAAKonAAAAAAAAqycAAAAAAAAAAAAAqycAAAAAAACsJwAAAAAAAAAAAACsJwAAAAAAAK0nAAAAAAAAAAAAAK0nAAAAAAAAricAAAAAAAAAAAAAricAAAAAAACvJwAAAAAAAAAAAACvJwAAAAAAALAnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqicAAAAAAACqJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1240,
					1,
					"left_delete",
					null,
					"AQAAAKMnAAAAAAAAoycAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAApCcAAAAAAACkJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1241,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAKMnAAAAAAAApCcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoycAAAAAAACjJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1242,
					1,
					"left_delete",
					null,
					"AQAAAKMnAAAAAAAAoycAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAApCcAAAAAAACkJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1243,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAKMnAAAAAAAApCcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoycAAAAAAACjJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1245,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAKknAAAAAAAAqicAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqScAAAAAAACpJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1246,
					1,
					"left_delete",
					null,
					"AQAAAKknAAAAAAAAqScAAAAAAAABAAAAJA",
					"AQAAAAAAAAABAAAAqicAAAAAAACqJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1247,
					1,
					"insert",
					{
						"characters": "[${imp.length"
					},
					"DQAAAKknAAAAAAAAqicAAAAAAAAAAAAAqicAAAAAAACrJwAAAAAAAAAAAACrJwAAAAAAAKwnAAAAAAAAAAAAAKwnAAAAAAAArScAAAAAAAAAAAAArScAAAAAAACuJwAAAAAAAAAAAACuJwAAAAAAAK8nAAAAAAAAAAAAAK8nAAAAAAAAsCcAAAAAAAAAAAAAsCcAAAAAAACxJwAAAAAAAAAAAACxJwAAAAAAALInAAAAAAAAAAAAALInAAAAAAAAsycAAAAAAAAAAAAAsycAAAAAAAC0JwAAAAAAAAAAAAC0JwAAAAAAALUnAAAAAAAAAAAAALUnAAAAAAAAticAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqScAAAAAAACpJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1248,
					1,
					"insert",
					{
						"characters": "}]"
					},
					"AgAAALYnAAAAAAAAtycAAAAAAAAAAAAAtycAAAAAAAC4JwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAticAAAAAAAC2JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1249,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALgnAAAAAAAAuScAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuCcAAAAAAAC4JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1250,
					1,
					"left_delete",
					null,
					"AQAAALgnAAAAAAAAuCcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAuScAAAAAAAC5JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1251,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAALgnAAAAAAAAuScAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuCcAAAAAAAC4JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1252,
					1,
					"right_delete",
					null,
					"AQAAALknAAAAAAAAuScAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAuScAAAAAAAC5JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1297,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJ4rAAAAAAAAnysAAAAAAAAAAAAAnysAAAAAAACgKwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnisAAAAAAACeKwAAAAAAAAAAAAAAAPC/"
				],
				[
					1302,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAKYpAAAAAAAApykAAAAAAAAAAAAApykAAAAAAACoKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApikAAAAAAACmKQAAAAAAAAAAAAAAAPC/"
				],
				[
					1305,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJcnAAAAAAAAmCcAAAAAAAAAAAAAmCcAAAAAAACZJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlycAAAAAAACXJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1308,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAmScAAAAAAACZJwAAAAAAAAAAAAAAAPC/"
				],
				[
					1311,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEApAAAAAAAAQSkAAAAAAAAAAAAAQSkAAAAAAABBKQAAAAAAAAQAAAAgIC8v",
					"AQAAAAAAAAABAAAARCkAAAAAAABAKQAAAAAAAAAAAAAAAPC/"
				],
				[
					1320,
					2,
					"left_delete",
					null,
					"AgAAALwoAAAAAAAAvCgAAAAAAAABAAAAL7soAAAAAAAAuygAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAvSgAAAAAAAC9KAAAAAAAAAAAAAAAAPC/"
				],
				[
					1327,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALsoAAAAAAAAvCgAAAAAAAAAAAAAvCgAAAAAAAC9KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuygAAAAAAAC7KAAAAAAAAAAAAAAAAPC/"
				],
				[
					1331,
					2,
					"left_delete",
					null,
					"AgAAADgnAAAAAAAAOCcAAAAAAAABAAAALzcnAAAAAAAANycAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAOScAAAAAAAA5JwAAAAAAAAAAAAAAAPC/"
				],
				[
					1333,
					1,
					"cut",
					null,
					"AQAAADcnAAAAAAAANycAAAAAAABtAAAAY29uc29sZS5sb2coYHRva2VuWyR7aW1wLmxlbmd0aH1dYCx0b2tlbi5sb2MrJycsIGNvbnNvbGUuY29uZmlnKHticmVha0xlbmd0aDo4MCwgY29tcGFjdDogMH0pLCB0b2tlbik7CiAgICAgIA",
					"AQAAAAAAAAABAAAANycAAAAAAACkJwAAAAAAAAAAAAAAAEtA"
				],
				[
					1337,
					1,
					"paste",
					null,
					"AQAAAPQnAAAAAAAAYSgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9CcAAAAAAAD0JwAAAAAAAAAAAAAAAEtA"
				],
				[
					1340,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAYSgAAAAAAABhKAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/streams.js",
			"settings":
			{
				"buffer_size": 1955,
				"line_ending": "Unix"
			}
		},
		{
			"file": "tests/test_stream.js",
			"settings":
			{
				"buffer_size": 1935,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					45,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAACwGAAAAAAAALQYAAAAAAAAAAAAALQYAAAAAAAAtBgAAAAAAAAUAAAAgICAvLw",
					"AQAAAAAAAAABAAAAMQYAAAAAAAAsBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-stream.c",
			"settings":
			{
				"buffer_size": 37262,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2416,
					1,
					"cut",
					null,
					"AQAAAOuAAAAAAAAA64AAAAAAAACEAAAAICAgc3QtPmNvbnRyb2xsZXIgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgdHJhbnNmb3JtX2NvbnRyb2xsZXIsIGpzX3RyYW5zZm9ybV9jbGFzc19pZCk7CiAgICBKU19TZXRPcGFxdWUoc3QtPmNvbnRyb2xsZXIsIHN0KTsK",
					"AQAAAAAAAAABAAAA64AAAAAAAABvgQAAAAAAAAAAAAAAAPC/"
				],
				[
					2419,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAADR6AAAAAAAANXoAAAAAAAAAAAAANXoAAAAAAAA5egAAAAAAAAAAAAA5egAAAAAAADp6AAAAAAAAAAAAADp6AAAAAAAAPnoAAAAAAAAAAAAANXoAAAAAAAA1egAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAANHoAAAAAAAA0egAAAAAAAAAAAAAAAPC/"
				],
				[
					2420,
					1,
					"paste",
					null,
					"AQAAADp6AAAAAAAAvnoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOnoAAAAAAAA6egAAAAAAAAAAAAAAAPC/"
				],
				[
					2421,
					1,
					"left_delete",
					null,
					"AQAAAL16AAAAAAAAvXoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAvnoAAAAAAAC+egAAAAAAAAAAAAAAAPC/"
				],
				[
					2428,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANJ6AAAAAAAA03oAAAAAAAAAAAAA03oAAAAAAADTegAAAAAAAGEDAAAKLyoKSlNWYWx1ZQpqc190cmFuc2Zvcm1fY2FsbGJhY2soSlNDb250ZXh0KiBjdHgsIFRyYW5zZm9ybSogc3QsIFRyYW5zZm9ybUV2ZW50IGV2ZW50LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIGFzc2VydChldmVudCA+PSAwKTsKICBhc3NlcnQoZXZlbnQgPCBjb3VudG9mKHN0LT5vbikpOwoKICBpZihKU19Jc0Z1bmN0aW9uKGN0eCwgc3QtPm9uW2V2ZW50XSkpCiAgICByZXR1cm4gSlNfQ2FsbChjdHgsIHN0LT5vbltldmVudF0sIHN0LT51bmRlcmx5aW5nX3RyYW5zZm9ybSwgYXJnYywgYXJndik7CgogIHJldHVybiBKU19VTkRFRklORUQ7Cn0KSlNWYWx1ZQpqc190cmFuc2Zvcm1fc3RhcnQoSlNDb250ZXh0KiBjdHgsIFRyYW5zZm9ybSogc3QpIHsKICBKU1ZhbHVlQ29uc3QgYXJnc1tdID0ge3N0LT5jb250cm9sbGVyfTsKICByZXR1cm4ganNfdHJhbnNmb3JtX2NhbGxiYWNrKGN0eCwgc3QsIFRSQU5TRk9STV9TVEFSVCwgY291bnRvZihhcmdzKSwgYXJncyk7Cn0KCkpTVmFsdWUKanNfdHJhbnNmb3JtX3B1bGwoSlNDb250ZXh0KiBjdHgsIFRyYW5zZm9ybSogc3QsIEpTVmFsdWVDb25zdCBjaHVuaykgewogIEpTVmFsdWVDb25zdCBhcmdzW10gPSB7c3QtPmNvbnRyb2xsZXJ9OwogIHJldHVybiBqc190cmFuc2Zvcm1fY2FsbGJhY2soY3R4LCBzdCwgVFJBTlNGT1JNX1BVTEwsIGNvdW50b2YoYXJncyksIGFyZ3MpOwp9CgpKU1ZhbHVlCmpzX3RyYW5zZm9ybV9jYW5jZWwoSlNDb250ZXh0KiBjdHgsIFRyYW5zZm9ybSogc3QsIEpTVmFsdWVDb25zdCByZWFzb24pIHsKICByZXR1cm4ganNfdHJhbnNmb3JtX2NhbGxiYWNrKGN0eCwgc3QsIFRSQU5TRk9STV9DQU5DRUwsIDEsICZyZWFzb24pOwp9Ki8K",
					"AQAAAAAAAAABAAAA0noAAAAAAAAzfgAAAAAAAAAAAAAAAPC/"
				],
				[
					2540,
					2,
					"left_delete",
					null,
					"AgAAAIZ1AAAAAAAAhnUAAAAAAADwAAAACiAgICAvKiAgICBKU19JVEVSQVRPUl9ORVhUX0RFRigibmV4dCIsIDAsIGpzX3dyaXRhYmxlX25leHQsIDApLAogICAgICAgIEpTX0NGVU5DX0RFRigid3JpdGUiLCAxLCBqc193cml0YWJsZV93cml0ZSksCiAgICAgIEpTX0NGVU5DX01BR0lDX0RFRigid3JpdGUiLCAxLCBqc193cml0YWJsZV93cml0ZSwgMCksCiAgICAgICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJwZWVrIiwgMSwganNfd3JpdGFibGVfd3JpdGUsIDEpLCovhXUAAAAAAACFdQAAAAAAAAEAAAB7",
					"AQAAAAAAAAABAAAAhnUAAAAAAAB2dgAAAAAAAAAAAAAAAPC/"
				],
				[
					2541,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIV1AAAAAAAAhnUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhXUAAAAAAACFdQAAAAAAAAAAAAAAAPC/"
				],
				[
					2542,
					1,
					"left_delete",
					null,
					"AQAAAIV1AAAAAAAAhXUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhnUAAAAAAACGdQAAAAAAAAAAAAAAAPC/"
				],
				[
					2543,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAIV1AAAAAAAAh3UAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhXUAAAAAAACFdQAAAAAAAAAAAAAAAPC/"
				],
				[
					2544,
					1,
					"right_delete",
					null,
					"AQAAAIZ1AAAAAAAAhnUAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAhnUAAAAAAACGdQAAAAAAAAAAAAAAAPC/"
				],
				[
					2558,
					1,
					"left_delete",
					null,
					"AQAAABR1AAAAAAAAFHUAAAAAAAAvAAAAICAgIC8vICAuZXhvdGljID0gJmpzX3dyaXRhYmxlX2V4b3RpY19tZXRob2RzLAo",
					"AQAAAAAAAAABAAAAFHUAAAAAAABDdQAAAAAAAAAAAAAAAPC/"
				],
				[
					2563,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPhqAAAAAAAA+WoAAAAAAAAAAAAA+WoAAAAAAAD5agAAAAAAAKoJAAAKLyoKc3RhdGljIGludApqc193cml0YWJsZV9nZXRfb3duX3Byb3BlcnR5KEpTQ29udGV4dCogY3R4LCBKU1Byb3BlcnR5RGVzY3JpcHRvciogcGRlc2MsIEpTVmFsdWVDb25zdCBvYmosIEpTQXRvbSBwcm9wKSB7CiAgV3JpdGFibGUqIHN0ID0ganNfd3JpdGFibGVfZGF0YTIoY3R4LCBvYmopOwogIEpTVmFsdWUgdmFsdWUgPSBKU19VTkRFRklORUQ7CiAgaW50NjRfdCBpbmRleDsKCiAgaWYoanNfYXRvbV9pc19pbmRleChjdHgsICZpbmRleCwgcHJvcCkpIHsKICAgIHNpemVfdCBsZW5ndGggPSB3cml0YWJsZV9zaXplKHN0KTsKCiAgICBpZihpbmRleCA8IDAgJiYgQUJTX05VTShpbmRleCkgPCAoaW50NjRfdClsZW5ndGgpCiAgICAgIGluZGV4ID0gTU9EX05VTShpbmRleCwgKGludDY0X3QpbGVuZ3RoKTsKCiAgICBpZihpbmRleCA+PSAwICYmIGluZGV4IDwgKGludDY0X3QpbGVuZ3RoKQogICAgICB2YWx1ZSA9IEpTX05ld0ludDMyKGN0eCwgd3JpdGFibGVfYXQoc3QsIGluZGV4KSk7CgogIH0gZWxzZSBpZihqc19hdG9tX2lzX3N0cmluZyhjdHgsIHByb3AsICJzaXplIikpIHsKICAgIHZhbHVlID0gSlNfTmV3SW50NjQoY3R4LCB3cml0YWJsZV9zaXplKHN0KSk7CiAgfQoKICBpZighSlNfSXNVbmRlZmluZWQodmFsdWUpKSB7CiAgICBpZihwZGVzYykgewogICAgICBwZGVzYy0+ZmxhZ3MgPSBKU19QUk9QX0VOVU1FUkFCTEU7CiAgICAgIHBkZXNjLT52YWx1ZSA9IHZhbHVlOwogICAgICBwZGVzYy0+Z2V0dGVyID0gSlNfVU5ERUZJTkVEOwogICAgICBwZGVzYy0+c2V0dGVyID0gSlNfVU5ERUZJTkVEOwogICAgfQogICAgcmV0dXJuIFRSVUU7CiAgfQogIHJldHVybiBGQUxTRTsKfQoKc3RhdGljIGludApqc193cml0YWJsZV9oYXNfcHJvcGVydHkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIEpTQXRvbSBwcm9wKSB7CiAgV3JpdGFibGUqIHN0ID0ganNfd3JpdGFibGVfZGF0YTIoY3R4LCBvYmopOwogIGludDY0X3QgaW5kZXg7CgogIGlmKGpzX2F0b21faXNfaW5kZXgoY3R4LCAmaW5kZXgsIHByb3ApKSB7CiAgICBzaXplX3QgbGVuZ3RoID0gd3JpdGFibGVfc2l6ZShzdCk7CgogICAgaWYoaW5kZXggPCAwICYmIEFCU19OVU0oaW5kZXgpIDwgbGVuZ3RoKQogICAgICBpbmRleCA9IE1PRF9OVU0oaW5kZXgsIChpbnQ2NF90KWxlbmd0aCk7CgogICAgaWYoaW5kZXggPj0gMCAmJiBpbmRleCA8IChpbnQ2NF90KWxlbmd0aCkKICAgICAgcmV0dXJuIFRSVUU7CgogIH0gZWxzZSBpZihqc19hdG9tX2lzX3N0cmluZyhjdHgsIHByb3AsICJzaXplIikpIHsKICAgIHJldHVybiBUUlVFOwogIH0KCiAgcmV0dXJuIEZBTFNFOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc193cml0YWJsZV9nZXRfcHJvcGVydHkoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIEpTQXRvbSBwcm9wLCBKU1ZhbHVlQ29uc3QgcmVjZWl2ZXIpIHsKICBXcml0YWJsZSogc3QgPSBqc193cml0YWJsZV9kYXRhMihjdHgsIG9iaik7CiAgSlNWYWx1ZSB2YWx1ZSA9IEpTX1VOREVGSU5FRDsKICBpbnQ2NF90IGluZGV4OwoKICBpZihqc19hdG9tX2lzX2luZGV4KGN0eCwgJmluZGV4LCBwcm9wKSkgewogICAgc2l6ZV90IGxlbmd0aCA9IHdyaXRhYmxlX3NpemUoc3QpOwoKICAgIGlmKGluZGV4IDwgMCAmJiBBQlNfTlVNKGluZGV4KSA8IChpbnQ2NF90KWxlbmd0aCkKICAgICAgaW5kZXggPSBNT0RfTlVNKGluZGV4LCAoaW50NjRfdClsZW5ndGgpOwoKICAgIGlmKGluZGV4ID49IDAgJiYgaW5kZXggPCAoaW50NjRfdClsZW5ndGgpCiAgICAgIHZhbHVlID0gSlNfTmV3VWludDMyKGN0eCwgd3JpdGFibGVfYXQoc3QsIGluZGV4KSk7CgogIH0gZWxzZSBpZihqc19hdG9tX2lzX3N0cmluZyhjdHgsIHByb3AsICJzaXplIikpIHsKICAgIHZhbHVlID0gSlNfTmV3SW50NjQoY3R4LCB3cml0YWJsZV9zaXplKHN0KSk7CgogIH0gZWxzZSB7CiAgICBKU1ZhbHVlIHByb3RvID0gSlNfSXNVbmRlZmluZWQod3JpdGFibGVfcHJvdG8pID8gSlNfR2V0UHJvdG90eXBlKGN0eCwgb2JqKSA6IHdyaXRhYmxlX3Byb3RvOwogICAgaWYoSlNfSXNPYmplY3QocHJvdG8pKSB7CiAgICAgIEpTVmFsdWUgbWV0aG9kID0gSlNfR2V0UHJvcGVydHkoY3R4LCBwcm90bywgcHJvcCk7CgogICAgICBpZihKU19Jc0Z1bmN0aW9uKGN0eCwgbWV0aG9kKSkKICAgICAgICB2YWx1ZSA9IG1ldGhvZDsKICAgICAgZWxzZQogICAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIG1ldGhvZCk7CiAgICB9CiAgfQoKICByZXR1cm4gdmFsdWU7Cn0KCnN0YXRpYyBKU0NsYXNzRXhvdGljTWV0aG9kcyBqc193cml0YWJsZV9leG90aWNfbWV0aG9kcyA9IHsKICAgIC5oYXNfcHJvcGVydHkgPSBqc193cml0YWJsZV9oYXNfcHJvcGVydHksCiAgICAuZ2V0X3Byb3BlcnR5ID0ganNfd3JpdGFibGVfZ2V0X3Byb3BlcnR5LAogICAgLmdldF9vd25fcHJvcGVydHkgPSBqc193cml0YWJsZV9nZXRfb3duX3Byb3BlcnR5LAoKfTsqLw",
					"AQAAAAAAAAABAAAAonQAAAAAAAD4agAAAAAAAAAAAAAAAPC/"
				],
				[
					2566,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAANRhAAAAAAAA1WEAAAAAAAAAAAAA1WEAAAAAAADVYQAAAAAAAHEBAAAKCi8qc3RhdGljIEpTVmFsdWUKanNfd3JpdGFibGVfbmV4dChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgQk9PTCogcGRvbmUsIGludCBtYWdpYykgewogIFdyaXRhYmxlKiBzdDsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoIShzdCA9IEpTX0dldE9wYXF1ZTIoY3R4LCB0aGlzX3ZhbCwganNfd3JpdGFibGVfY2xhc3NfaWQpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogICpwZG9uZSA9IHF1ZXVlX2VtcHR5KCZzdC0+cSk7CgogIGlmKCEqcGRvbmUpCiAgICByZXQgPSB3cml0YWJsZV9uZXh0KHN0LCBjdHgpOwoKICByZXR1cm4gcmV0Owp9Ki8",
					"AQAAAAAAAAABAAAARWMAAAAAAADUYQAAAAAAAAAAAAAAAPC/"
				],
				[
					2745,
					1,
					"cut",
					null,
					"AQAAAFoRAAAAAAAAWhEAAAAAAACEAAAACgogICAgc3QtPmNvbnRyb2xsZXIgPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgcmVhZGFibGVfY29udHJvbGxlciwganNfcmVhZGFibGVfY2xhc3NfaWQpOwogICAgSlNfU2V0T3BhcXVlKHN0LT5jb250cm9sbGVyLCBzdCk7",
					"AQAAAAAAAAABAAAA3hEAAAAAAABaEQAAAAAAAAAAAAAAAPC/"
				],
				[
					2748,
					1,
					"paste",
					null,
					"AQAAAIYvAAAAAAAACjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhi8AAAAAAACGLwAAAAAAAAAAAAAAAPC/"
				],
				[
					2749,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAAowAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAAPMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACjAAAAAAAAAKMAAAAAAAAAAAAAAAAPC/"
				],
				[
					2751,
					3,
					"left_delete",
					null,
					"AwAAAIYvAAAAAAAAhi8AAAAAAAABAAAACoUvAAAAAAAAhS8AAAAAAAABAAAAIIQvAAAAAAAAhC8AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAhy8AAAAAAACHLwAAAAAAAAAAAAAAAEJA"
				],
				[
					2764,
					1,
					"cut",
					null,
					"AQAAAD1KAAAAAAAAPUoAAAAAAACDAAAACiAgICBzdC0+Y29udHJvbGxlciA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB3cml0YWJsZV9jb250cm9sbGVyLCBqc193cml0YWJsZV9jbGFzc19pZCk7CiAgICBKU19TZXRPcGFxdWUoc3QtPmNvbnRyb2xsZXIsIHN0KTs",
					"AQAAAAAAAAABAAAAwEoAAAAAAAA9SgAAAAAAAAAAAAAAAPC/"
				],
				[
					2767,
					1,
					"paste",
					null,
					"AQAAAARgAAAAAAAAh2AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABGAAAAAAAAAEYAAAAAAAAAAAAAAAAPC/"
				],
				[
					2768,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAIdgAAAAAAAAiGAAAAAAAAAAAAAAiGAAAAAAAACMYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh2AAAAAAAACHYAAAAAAAAAAAAAAAAPC/"
				],
				[
					2770,
					2,
					"left_delete",
					null,
					"AgAAAANgAAAAAAAAA2AAAAAAAAABAAAAIAJgAAAAAAAAAmAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAABGAAAAAAAAAEYAAAAAAAAAAAAAAAAEJA"
				],
				[
					2776,
					2,
					"left_delete",
					null,
					"AgAAAIpgAAAAAAAAimAAAAAAAAABAAAAIIhgAAAAAAAAiGAAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAi2AAAAAAAACLYAAAAAAAAAAAAAAAAPC/"
				],
				[
					2849,
					1,
					"insert",
					{
						"characters": "st->controller"
					},
					"DgAAAD1KAAAAAAAAPkoAAAAAAAAAAAAAPkoAAAAAAAA/SgAAAAAAAAAAAAA/SgAAAAAAAEBKAAAAAAAAAAAAAEBKAAAAAAAAQUoAAAAAAAAAAAAAQUoAAAAAAABCSgAAAAAAAAAAAABCSgAAAAAAAENKAAAAAAAAAAAAAENKAAAAAAAAREoAAAAAAAAAAAAAREoAAAAAAABFSgAAAAAAAAAAAABFSgAAAAAAAEZKAAAAAAAAAAAAAEZKAAAAAAAAR0oAAAAAAAAAAAAAR0oAAAAAAABISgAAAAAAAAAAAABISgAAAAAAAElKAAAAAAAAAAAAAElKAAAAAAAASkoAAAAAAAAAAAAASkoAAAAAAABLSgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPUoAAAAAAAA9SgAAAAAAAAAAAAAAAPC/"
				],
				[
					2850,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEtKAAAAAAAATEoAAAAAAAAAAAAATEoAAAAAAABNSgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAS0oAAAAAAABLSgAAAAAAAAAAAAAAAPC/"
				],
				[
					2851,
					1,
					"insert",
					{
						"characters": " JS_NULL;"
					},
					"CQAAAE1KAAAAAAAATkoAAAAAAAAAAAAATkoAAAAAAABPSgAAAAAAAAAAAABPSgAAAAAAAFBKAAAAAAAAAAAAAFBKAAAAAAAAUUoAAAAAAAAAAAAAUUoAAAAAAABSSgAAAAAAAAAAAABSSgAAAAAAAFNKAAAAAAAAAAAAAFNKAAAAAAAAVEoAAAAAAAAAAAAAVEoAAAAAAABVSgAAAAAAAAAAAABVSgAAAAAAAFZKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATUoAAAAAAABNSgAAAAAAAAAAAAAAAPC/"
				],
				[
					2854,
					1,
					"cut",
					null,
					"AQAAAD1KAAAAAAAAPUoAAAAAAAAaAAAAc3QtPmNvbnRyb2xsZXIgPSBKU19OVUxMOwo",
					"AQAAAAAAAAABAAAAV0oAAAAAAAA9SgAAAAAAAAAAAAAAAAAA"
				],
				[
					2855,
					1,
					"paste",
					null,
					"AQAAAD1KAAAAAAAAV0oAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPUoAAAAAAAA9SgAAAAAAAAAAAAAAAPC/"
				],
				[
					2860,
					1,
					"paste",
					null,
					"AQAAAF0RAAAAAAAAdxEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXREAAAAAAABdEQAAAAAAAAAAAAAAAPC/"
				],
				[
					3036,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAPoVAAAAAAAA+xUAAAAAAAAAAAAA+xUAAAAAAAD7FQAAAAAAAAUAAAAgIC8qIA",
					"AQAAAAAAAAABAAAA/xUAAAAAAAD6FQAAAAAAAAAAAAAAAPC/"
				],
				[
					3041,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHoWAAAAAAAAexYAAAAAAAAAAAAAexYAAAAAAAB7FgAAAAAAAAIAAAAqLw",
					"AQAAAAAAAAABAAAAehYAAAAAAAB8FgAAAAAAAAAAAAAAAPC/"
				],
				[
					3046,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAexYAAAAAAAB7FgAAAAAAAAAAAAAAAPC/"
				],
				[
					3091,
					1,
					"paste",
					null,
					"AgAAAK5uAAAAAAAAum4AAAAAAAAAAAAAum4AAAAAAAC6bgAAAAAAAAIAAABzdA",
					"AQAAAAAAAAABAAAArm4AAAAAAACwbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3094,
					1,
					"insert",
					{
						"characters": "ear"
					},
					"BAAAAF9uAAAAAAAAYG4AAAAAAAAAAAAAYG4AAAAAAABgbgAAAAAAAAkAAAB0cmFuc2Zvcm1gbgAAAAAAAGFuAAAAAAAAAAAAAGFuAAAAAAAAYm4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX24AAAAAAABobgAAAAAAAAAAAAAAAPC/"
				],
				[
					3095,
					3,
					"left_delete",
					null,
					"AwAAAGFuAAAAAAAAYW4AAAAAAAABAAAAcmBuAAAAAAAAYG4AAAAAAAABAAAAYV9uAAAAAAAAX24AAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAYm4AAAAAAABibgAAAAAAAAAAAAAAAPC/"
				],
				[
					3096,
					1,
					"insert",
					{
						"characters": "readable"
					},
					"CAAAAF9uAAAAAAAAYG4AAAAAAAAAAAAAYG4AAAAAAABhbgAAAAAAAAAAAABhbgAAAAAAAGJuAAAAAAAAAAAAAGJuAAAAAAAAY24AAAAAAAAAAAAAY24AAAAAAABkbgAAAAAAAAAAAABkbgAAAAAAAGVuAAAAAAAAAAAAAGVuAAAAAAAAZm4AAAAAAAAAAAAAZm4AAAAAAABnbgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX24AAAAAAABfbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3101,
					1,
					"insert",
					{
						"characters": "readable"
					},
					"CQAAAHduAAAAAAAAeG4AAAAAAAAAAAAAeG4AAAAAAAB4bgAAAAAAAAkAAAB0cmFuc2Zvcm14bgAAAAAAAHluAAAAAAAAAAAAAHluAAAAAAAAem4AAAAAAAAAAAAAem4AAAAAAAB7bgAAAAAAAAAAAAB7bgAAAAAAAHxuAAAAAAAAAAAAAHxuAAAAAAAAfW4AAAAAAAAAAAAAfW4AAAAAAAB+bgAAAAAAAAAAAAB+bgAAAAAAAH9uAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd24AAAAAAACAbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3127,
					1,
					"insert",
					{
						"characters": "\n\nst_>re"
					},
					"CwAAALpuAAAAAAAAu24AAAAAAAAAAAAAu24AAAAAAAC/bgAAAAAAAAAAAAC/bgAAAAAAAMBuAAAAAAAAAAAAAMBuAAAAAAAAxG4AAAAAAAAAAAAAu24AAAAAAAC7bgAAAAAAAAQAAAAgICAgwG4AAAAAAADBbgAAAAAAAAAAAADBbgAAAAAAAMJuAAAAAAAAAAAAAMJuAAAAAAAAw24AAAAAAAAAAAAAw24AAAAAAADEbgAAAAAAAAAAAADEbgAAAAAAAMVuAAAAAAAAAAAAAMVuAAAAAAAAxm4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAum4AAAAAAAC6bgAAAAAAAAAAAAAAAPC/"
				],
				[
					3128,
					4,
					"left_delete",
					null,
					"BAAAAMVuAAAAAAAAxW4AAAAAAAABAAAAZcRuAAAAAAAAxG4AAAAAAAABAAAAcsNuAAAAAAAAw24AAAAAAAABAAAAPsJuAAAAAAAAwm4AAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAxm4AAAAAAADGbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3129,
					1,
					"insert",
					{
						"characters": "->readabvl"
					},
					"CgAAAMJuAAAAAAAAw24AAAAAAAAAAAAAw24AAAAAAADEbgAAAAAAAAAAAADEbgAAAAAAAMVuAAAAAAAAAAAAAMVuAAAAAAAAxm4AAAAAAAAAAAAAxm4AAAAAAADHbgAAAAAAAAAAAADHbgAAAAAAAMhuAAAAAAAAAAAAAMhuAAAAAAAAyW4AAAAAAAAAAAAAyW4AAAAAAADKbgAAAAAAAAAAAADKbgAAAAAAAMtuAAAAAAAAAAAAAMtuAAAAAAAAzG4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwm4AAAAAAADCbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3130,
					3,
					"left_delete",
					null,
					"AwAAAMtuAAAAAAAAy24AAAAAAAABAAAAbMpuAAAAAAAAym4AAAAAAAABAAAAdsluAAAAAAAAyW4AAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAzG4AAAAAAADMbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3131,
					1,
					"insert",
					{
						"characters": "ble->controll"
					},
					"DQAAAMluAAAAAAAAym4AAAAAAAAAAAAAym4AAAAAAADLbgAAAAAAAAAAAADLbgAAAAAAAMxuAAAAAAAAAAAAAMxuAAAAAAAAzW4AAAAAAAAAAAAAzW4AAAAAAADObgAAAAAAAAAAAADObgAAAAAAAM9uAAAAAAAAAAAAAM9uAAAAAAAA0G4AAAAAAAAAAAAA0G4AAAAAAADRbgAAAAAAAAAAAADRbgAAAAAAANJuAAAAAAAAAAAAANJuAAAAAAAA024AAAAAAAAAAAAA024AAAAAAADUbgAAAAAAAAAAAADUbgAAAAAAANVuAAAAAAAAAAAAANVuAAAAAAAA1m4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyW4AAAAAAADJbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3132,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAANZuAAAAAAAA124AAAAAAAAAAAAA124AAAAAAADYbgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1m4AAAAAAADWbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3133,
					2,
					"left_delete",
					null,
					"AgAAANduAAAAAAAA124AAAAAAAABAAAAPdZuAAAAAAAA1m4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA2G4AAAAAAADYbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3134,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAANZuAAAAAAAA124AAAAAAAAAAAAA124AAAAAAADYbgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1m4AAAAAAADWbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3135,
					1,
					"insert",
					{
						"characters": " =JS_DupValue"
					},
					"DQAAANhuAAAAAAAA2W4AAAAAAAAAAAAA2W4AAAAAAADabgAAAAAAAAAAAADabgAAAAAAANtuAAAAAAAAAAAAANtuAAAAAAAA3G4AAAAAAAAAAAAA3G4AAAAAAADdbgAAAAAAAAAAAADdbgAAAAAAAN5uAAAAAAAAAAAAAN5uAAAAAAAA324AAAAAAAAAAAAA324AAAAAAADgbgAAAAAAAAAAAADgbgAAAAAAAOFuAAAAAAAAAAAAAOFuAAAAAAAA4m4AAAAAAAAAAAAA4m4AAAAAAADjbgAAAAAAAAAAAADjbgAAAAAAAORuAAAAAAAAAAAAAORuAAAAAAAA5W4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2G4AAAAAAADYbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3136,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOVuAAAAAAAA524AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5W4AAAAAAADlbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3137,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAOZuAAAAAAAA524AAAAAAAAAAAAA524AAAAAAADobgAAAAAAAAAAAADobgAAAAAAAOluAAAAAAAAAAAAAOluAAAAAAAA6m4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5m4AAAAAAADmbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3138,
					1,
					"insert",
					{
						"characters": " st√§-"
					},
					"BQAAAOpuAAAAAAAA624AAAAAAAAAAAAA624AAAAAAADsbgAAAAAAAAAAAADsbgAAAAAAAO1uAAAAAAAAAAAAAO1uAAAAAAAA7m4AAAAAAAAAAAAA7m4AAAAAAADvbgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6m4AAAAAAADqbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3139,
					2,
					"left_delete",
					null,
					"AgAAAO5uAAAAAAAA7m4AAAAAAAABAAAALe1uAAAAAAAA7W4AAAAAAAACAAAAw6Q",
					"AQAAAAAAAAABAAAA724AAAAAAADvbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3140,
					1,
					"insert",
					{
						"characters": "->controller"
					},
					"DAAAAO1uAAAAAAAA7m4AAAAAAAAAAAAA7m4AAAAAAADvbgAAAAAAAAAAAADvbgAAAAAAAPBuAAAAAAAAAAAAAPBuAAAAAAAA8W4AAAAAAAAAAAAA8W4AAAAAAADybgAAAAAAAAAAAADybgAAAAAAAPNuAAAAAAAAAAAAAPNuAAAAAAAA9G4AAAAAAAAAAAAA9G4AAAAAAAD1bgAAAAAAAAAAAAD1bgAAAAAAAPZuAAAAAAAAAAAAAPZuAAAAAAAA924AAAAAAAAAAAAA924AAAAAAAD4bgAAAAAAAAAAAAD4bgAAAAAAAPluAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7W4AAAAAAADtbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3142,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPpuAAAAAAAA+24AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+m4AAAAAAAD6bgAAAAAAAAAAAAAAAPC/"
				],
				[
					3149,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+24AAAAAAAD7bgAAAAAAAAAAAAAAAPC/"
				],
				[
					3203,
					1,
					"insert",
					{
						"characters": "transform"
					},
					"CgAAAF9uAAAAAAAAYG4AAAAAAAAAAAAAYG4AAAAAAABgbgAAAAAAAAgAAAByZWFkYWJsZWBuAAAAAAAAYW4AAAAAAAAAAAAAYW4AAAAAAABibgAAAAAAAAAAAABibgAAAAAAAGNuAAAAAAAAAAAAAGNuAAAAAAAAZG4AAAAAAAAAAAAAZG4AAAAAAABlbgAAAAAAAAAAAABlbgAAAAAAAGZuAAAAAAAAAAAAAGZuAAAAAAAAZ24AAAAAAAAAAAAAZ24AAAAAAABobgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAX24AAAAAAABnbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3206,
					1,
					"insert",
					{
						"characters": "transform"
					},
					"CgAAAHhuAAAAAAAAeW4AAAAAAAAAAAAAeW4AAAAAAAB5bgAAAAAAAAgAAAByZWFkYWJsZXluAAAAAAAAem4AAAAAAAAAAAAAem4AAAAAAAB7bgAAAAAAAAAAAAB7bgAAAAAAAHxuAAAAAAAAAAAAAHxuAAAAAAAAfW4AAAAAAAAAAAAAfW4AAAAAAAB+bgAAAAAAAAAAAAB+bgAAAAAAAH9uAAAAAAAAAAAAAH9uAAAAAAAAgG4AAAAAAAAAAAAAgG4AAAAAAACBbgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeG4AAAAAAACAbgAAAAAAAAAAAAAAAPC/"
				],
				[
					3211,
					1,
					"left_delete",
					null,
					"AQAAALBuAAAAAAAAsG4AAAAAAAAKAAAALT5yZWFkYWJsZQ",
					"AQAAAAAAAAABAAAAsG4AAAAAAAC6bgAAAAAAAAAAAAAAAPC/"
				],
				[
					3218,
					2,
					"left_delete",
					null,
					"AgAAALRuAAAAAAAAtG4AAAAAAABBAAAAICAgIHN0LT5yZWFkYWJsZS0+Y29udHJvbGxlciA9IEpTX0R1cFZhbHVlKGN0eCwgc3QtPmNvbnRyb2xsZXIpOwqzbgAAAAAAALNuAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAtG4AAAAAAAD1bgAAAAAAAAAAAAAAAPC/"
				],
				[
					3375,
					1,
					"insert",
					{
						"characters": "\n\nst->write"
					},
					"DgAAAAFzAAAAAAAAAnMAAAAAAAAAAAAAAnMAAAAAAAAGcwAAAAAAAAAAAAAGcwAAAAAAAAdzAAAAAAAAAAAAAAdzAAAAAAAAC3MAAAAAAAAAAAAAAnMAAAAAAAACcwAAAAAAAAQAAAAgICAgB3MAAAAAAAAIcwAAAAAAAAAAAAAIcwAAAAAAAAlzAAAAAAAAAAAAAAlzAAAAAAAACnMAAAAAAAAAAAAACnMAAAAAAAALcwAAAAAAAAAAAAALcwAAAAAAAAxzAAAAAAAAAAAAAAxzAAAAAAAADXMAAAAAAAAAAAAADXMAAAAAAAAOcwAAAAAAAAAAAAAOcwAAAAAAAA9zAAAAAAAAAAAAAA9zAAAAAAAAEHMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAXMAAAAAAAABcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3376,
					1,
					"left_delete",
					null,
					"AQAAAA9zAAAAAAAAD3MAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAEHMAAAAAAAAQcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3377,
					1,
					"insert",
					{
						"characters": "able->controller"
					},
					"EAAAAA9zAAAAAAAAEHMAAAAAAAAAAAAAEHMAAAAAAAARcwAAAAAAAAAAAAARcwAAAAAAABJzAAAAAAAAAAAAABJzAAAAAAAAE3MAAAAAAAAAAAAAE3MAAAAAAAAUcwAAAAAAAAAAAAAUcwAAAAAAABVzAAAAAAAAAAAAABVzAAAAAAAAFnMAAAAAAAAAAAAAFnMAAAAAAAAXcwAAAAAAAAAAAAAXcwAAAAAAABhzAAAAAAAAAAAAABhzAAAAAAAAGXMAAAAAAAAAAAAAGXMAAAAAAAAacwAAAAAAAAAAAAAacwAAAAAAABtzAAAAAAAAAAAAABtzAAAAAAAAHHMAAAAAAAAAAAAAHHMAAAAAAAAdcwAAAAAAAAAAAAAdcwAAAAAAAB5zAAAAAAAAAAAAAB5zAAAAAAAAH3MAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAD3MAAAAAAAAPcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3378,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAB9zAAAAAAAAIHMAAAAAAAAAAAAAIHMAAAAAAAAhcwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAH3MAAAAAAAAfcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3379,
					1,
					"insert",
					{
						"characters": " JS_DUP"
					},
					"BwAAACFzAAAAAAAAInMAAAAAAAAAAAAAInMAAAAAAAAjcwAAAAAAAAAAAAAjcwAAAAAAACRzAAAAAAAAAAAAACRzAAAAAAAAJXMAAAAAAAAAAAAAJXMAAAAAAAAmcwAAAAAAAAAAAAAmcwAAAAAAACdzAAAAAAAAAAAAACdzAAAAAAAAKHMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIXMAAAAAAAAhcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3380,
					2,
					"left_delete",
					null,
					"AgAAACdzAAAAAAAAJ3MAAAAAAAABAAAAUCZzAAAAAAAAJnMAAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAAKHMAAAAAAAAocwAAAAAAAAAAAAAAAPC/"
				],
				[
					3381,
					1,
					"insert",
					{
						"characters": "uPValu"
					},
					"BgAAACZzAAAAAAAAJ3MAAAAAAAAAAAAAJ3MAAAAAAAAocwAAAAAAAAAAAAAocwAAAAAAAClzAAAAAAAAAAAAAClzAAAAAAAAKnMAAAAAAAAAAAAAKnMAAAAAAAArcwAAAAAAAAAAAAArcwAAAAAAACxzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJnMAAAAAAAAmcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3382,
					5,
					"left_delete",
					null,
					"BQAAACtzAAAAAAAAK3MAAAAAAAABAAAAdSpzAAAAAAAAKnMAAAAAAAABAAAAbClzAAAAAAAAKXMAAAAAAAABAAAAYShzAAAAAAAAKHMAAAAAAAABAAAAVidzAAAAAAAAJ3MAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAALHMAAAAAAAAscwAAAAAAAAAAAAAAAPC/"
				],
				[
					3383,
					1,
					"insert",
					{
						"characters": "pValue"
					},
					"BgAAACdzAAAAAAAAKHMAAAAAAAAAAAAAKHMAAAAAAAApcwAAAAAAAAAAAAApcwAAAAAAACpzAAAAAAAAAAAAACpzAAAAAAAAK3MAAAAAAAAAAAAAK3MAAAAAAAAscwAAAAAAAAAAAAAscwAAAAAAAC1zAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJ3MAAAAAAAAncwAAAAAAAAAAAAAAAPC/"
				],
				[
					3384,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC1zAAAAAAAAL3MAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALXMAAAAAAAAtcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3385,
					1,
					"insert",
					{
						"characters": "ct,"
					},
					"AwAAAC5zAAAAAAAAL3MAAAAAAAAAAAAAL3MAAAAAAAAwcwAAAAAAAAAAAAAwcwAAAAAAADFzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALnMAAAAAAAAucwAAAAAAAAAAAAAAAPC/"
				],
				[
					3386,
					1,
					"left_delete",
					null,
					"AQAAADBzAAAAAAAAMHMAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAMXMAAAAAAAAxcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3387,
					1,
					"insert",
					{
						"characters": "x,"
					},
					"AgAAADBzAAAAAAAAMXMAAAAAAAAAAAAAMXMAAAAAAAAycwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMHMAAAAAAAAwcwAAAAAAAAAAAAAAAPC/"
				],
				[
					3388,
					1,
					"insert",
					{
						"characters": " st->controller"
					},
					"DwAAADJzAAAAAAAAM3MAAAAAAAAAAAAAM3MAAAAAAAA0cwAAAAAAAAAAAAA0cwAAAAAAADVzAAAAAAAAAAAAADVzAAAAAAAANnMAAAAAAAAAAAAANnMAAAAAAAA3cwAAAAAAAAAAAAA3cwAAAAAAADhzAAAAAAAAAAAAADhzAAAAAAAAOXMAAAAAAAAAAAAAOXMAAAAAAAA6cwAAAAAAAAAAAAA6cwAAAAAAADtzAAAAAAAAAAAAADtzAAAAAAAAPHMAAAAAAAAAAAAAPHMAAAAAAAA9cwAAAAAAAAAAAAA9cwAAAAAAAD5zAAAAAAAAAAAAAD5zAAAAAAAAP3MAAAAAAAAAAAAAP3MAAAAAAABAcwAAAAAAAAAAAABAcwAAAAAAAEFzAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMnMAAAAAAAAycwAAAAAAAAAAAAAAAPC/"
				],
				[
					3390,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEJzAAAAAAAAQ3MAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQnMAAAAAAABCcwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-stringdecoder.c",
			"settings":
			{
				"buffer_size": 7535,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-stream.h",
			"redo_stack":
			[
				[
					395,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAF0GAAAAAAAAXQYAAAAAAAACAAAALypsBgAAAAAAAGwGAAAAAAAAAgAAACov",
					"AQAAAAAAAAABAAAAXwYAAAAAAABuBgAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 5879,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"cut",
					null,
					"AQAAAG8EAAAAAAAAbwQAAAAAAABjAAAAdHlwZWRlZiBlbnVtIHsgV1JJVEFCTEVfU1RBUlQgPSAwLCBXUklUQUJMRV9XUklURSwgV1JJVEFCTEVfQ0xPU0UsIFdSSVRBQkxFX0FCT1JUIH0gV3JpdGFibGVFdmVudDsK",
					"AQAAAAAAAAABAAAAbwQAAAAAAADSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"paste",
					null,
					"AQAAAG8EAAAAAAAA0gQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwQAAAAAAABvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"paste",
					null,
					"AQAAAKAFAAAAAAAAAwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAUAAAAAAACgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "TRAS"
					},
					"BQAAAK8FAAAAAAAAsAUAAAAAAAAAAAAAsAUAAAAAAACwBQAAAAAAAA4AAABXUklUQUJMRV9TVEFSVLAFAAAAAAAAsQUAAAAAAAAAAAAAsQUAAAAAAACyBQAAAAAAAAAAAACyBQAAAAAAALMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwUAAAAAAAC9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAALIFAAAAAAAAsgUAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAswUAAAAAAACzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "NSOFM"
					},
					"BQAAALIFAAAAAAAAswUAAAAAAAAAAAAAswUAAAAAAAC0BQAAAAAAAAAAAAC0BQAAAAAAALUFAAAAAAAAAAAAALUFAAAAAAAAtgUAAAAAAAAAAAAAtgUAAAAAAAC3BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgUAAAAAAACyBQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					3,
					"left_delete",
					null,
					"AwAAALYFAAAAAAAAtgUAAAAAAAABAAAATbUFAAAAAAAAtQUAAAAAAAABAAAARrQFAAAAAAAAtAUAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAAtwUAAAAAAAC3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "FORM_READER"
					},
					"CwAAALQFAAAAAAAAtQUAAAAAAAAAAAAAtQUAAAAAAAC2BQAAAAAAAAAAAAC2BQAAAAAAALcFAAAAAAAAAAAAALcFAAAAAAAAuAUAAAAAAAAAAAAAuAUAAAAAAAC5BQAAAAAAAAAAAAC5BQAAAAAAALoFAAAAAAAAAAAAALoFAAAAAAAAuwUAAAAAAAAAAAAAuwUAAAAAAAC8BQAAAAAAAAAAAAC8BQAAAAAAAL0FAAAAAAAAAAAAAL0FAAAAAAAAvgUAAAAAAAAAAAAAvgUAAAAAAAC/BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAUAAAAAAAC0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "TRABSF"
					},
					"BwAAAMUFAAAAAAAAxgUAAAAAAAAAAAAAxgUAAAAAAADGBQAAAAAAAC4AAABXUklUQUJMRV9XUklURSwgV1JJVEFCTEVfQ0xPU0UsIFdSSVRBQkxFX0FCT1JUxgUAAAAAAADHBQAAAAAAAAAAAADHBQAAAAAAAMgFAAAAAAAAAAAAAMgFAAAAAAAAyQUAAAAAAAAAAAAAyQUAAAAAAADKBQAAAAAAAAAAAADKBQAAAAAAAMsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQUAAAAAAADzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					3,
					"left_delete",
					null,
					"AwAAAMoFAAAAAAAAygUAAAAAAAABAAAARskFAAAAAAAAyQUAAAAAAAABAAAAU8gFAAAAAAAAyAUAAAAAAAABAAAAQg",
					"AQAAAAAAAAABAAAAywUAAAAAAADLBQAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "NSFORM_WRITER"
					},
					"DQAAAMgFAAAAAAAAyQUAAAAAAAAAAAAAyQUAAAAAAADKBQAAAAAAAAAAAADKBQAAAAAAAMsFAAAAAAAAAAAAAMsFAAAAAAAAzAUAAAAAAAAAAAAAzAUAAAAAAADNBQAAAAAAAAAAAADNBQAAAAAAAM4FAAAAAAAAAAAAAM4FAAAAAAAAzwUAAAAAAAAAAAAAzwUAAAAAAADQBQAAAAAAAAAAAADQBQAAAAAAANEFAAAAAAAAAAAAANEFAAAAAAAA0gUAAAAAAAAAAAAA0gUAAAAAAADTBQAAAAAAAAAAAADTBQAAAAAAANQFAAAAAAAAAAAAANQFAAAAAAAA1QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAUAAAAAAADIBQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"left_delete",
					null,
					"AQAAANQFAAAAAAAA1AUAAAAAAAABAAAAUg",
					"AQAAAAAAAAABAAAA1QUAAAAAAADVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAANQFAAAAAAAA1QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AUAAAAAAADUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAANQFAAAAAAAA1AUAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAA1QUAAAAAAADVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "R"
					},
					"AQAAANQFAAAAAAAA1QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AUAAAAAAADUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "TransformProp"
					},
					"DgAAANgFAAAAAAAA2QUAAAAAAAAAAAAA2QUAAAAAAADZBQAAAAAAAA0AAABXcml0YWJsZUV2ZW502QUAAAAAAADaBQAAAAAAAAAAAADaBQAAAAAAANsFAAAAAAAAAAAAANsFAAAAAAAA3AUAAAAAAAAAAAAA3AUAAAAAAADdBQAAAAAAAAAAAADdBQAAAAAAAN4FAAAAAAAAAAAAAN4FAAAAAAAA3wUAAAAAAAAAAAAA3wUAAAAAAADgBQAAAAAAAAAAAADgBQAAAAAAAOEFAAAAAAAAAAAAAOEFAAAAAAAA4gUAAAAAAAAAAAAA4gUAAAAAAADjBQAAAAAAAAAAAADjBQAAAAAAAOQFAAAAAAAAAAAAAOQFAAAAAAAA5QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AUAAAAAAADlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QUAAAAAAADlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					2,
					"left_delete",
					null,
					"AgAAAOYFAAAAAAAA5gUAAAAAAAABAAAAZeUFAAAAAAAA5QUAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA5wUAAAAAAADnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "erties"
					},
					"BgAAAOUFAAAAAAAA5gUAAAAAAAAAAAAA5gUAAAAAAADnBQAAAAAAAAAAAADnBQAAAAAAAOgFAAAAAAAAAAAAAOgFAAAAAAAA6QUAAAAAAAAAAAAA6QUAAAAAAADqBQAAAAAAAAAAAADqBQAAAAAAAOsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QUAAAAAAADlBQAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAJ8FAAAAAAAAoAUAAAAAAAAAAAAAoAUAAAAAAAChBQAAAAAAAAAAAAChBQAAAAAAAKIFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwUAAAAAAACfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"left_delete",
					null,
					"AQAAAKEFAAAAAAAAoQUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAogUAAAAAAACiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"cut",
					null,
					"AQAAANIEAAAAAAAA0gQAAAAAAADPAAAACnR5cGVkZWYgc3RydWN0IHdyaXRhYmxlX3N0cmVhbSB7CiAgaW50IHJlZl9jb3VudDsKICBRdWV1ZSBxOwogIF9BdG9taWMoQk9PTCkgY2xvc2VkOwogIF9BdG9taWMoY2hhciopIHJlYXNvbjsKICBfQXRvbWljKFdyaXRlciopIHdyaXRlcjsKICBKU1ZhbHVlIG9uWzRdOwogIEpTVmFsdWUgdW5kZXJseWluZ19zaW5rLCBjb250cm9sbGVyOwp9IFdyaXRhYmxlOwoK",
					"AQAAAAAAAAABAAAAoQUAAAAAAADSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					2,
					"paste",
					null,
					"AgAAANIEAAAAAAAAoQUAAAAAAAAAAAAAoQUAAAAAAABwBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gQAAAAAAADSBAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " transform"
					},
					"CwAAALAFAAAAAAAAsQUAAAAAAAAAAAAAsQUAAAAAAACxBQAAAAAAAAkAAAAgd3JpdGFibGWxBQAAAAAAALIFAAAAAAAAAAAAALIFAAAAAAAAswUAAAAAAAAAAAAAswUAAAAAAAC0BQAAAAAAAAAAAAC0BQAAAAAAALUFAAAAAAAAAAAAALUFAAAAAAAAtgUAAAAAAAAAAAAAtgUAAAAAAAC3BQAAAAAAAAAAAAC3BQAAAAAAALgFAAAAAAAAAAAAALgFAAAAAAAAuQUAAAAAAAAAAAAAuQUAAAAAAAC6BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAUAAAAAAAC5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"paste",
					null,
					"AQAAAKEFAAAAAAAABAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQUAAAAAAAChBQAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "Trasn"
					},
					"BgAAAPUFAAAAAAAA9gUAAAAAAAAAAAAA9gUAAAAAAAD2BQAAAAAAAAgAAABXcml0YWJsZfYFAAAAAAAA9wUAAAAAAAAAAAAA9wUAAAAAAAD4BQAAAAAAAAAAAAD4BQAAAAAAAPkFAAAAAAAAAAAAAPkFAAAAAAAA+gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QUAAAAAAAD9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					2,
					"left_delete",
					null,
					"AgAAAPkFAAAAAAAA+QUAAAAAAAABAAAAbvgFAAAAAAAA+AUAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAA+gUAAAAAAAD6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "nsformable"
					},
					"CgAAAPgFAAAAAAAA+QUAAAAAAAAAAAAA+QUAAAAAAAD6BQAAAAAAAAAAAAD6BQAAAAAAAPsFAAAAAAAAAAAAAPsFAAAAAAAA/AUAAAAAAAAAAAAA/AUAAAAAAAD9BQAAAAAAAAAAAAD9BQAAAAAAAP4FAAAAAAAAAAAAAP4FAAAAAAAA/wUAAAAAAAAAAAAA/wUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAEGAAAAAAAAAAAAAAEGAAAAAAAAAgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AUAAAAAAAD4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					2,
					"left_delete",
					null,
					"AgAAAP8FAAAAAAAA/wUAAAAAAAADAAAAYmxl/gUAAAAAAAD+BQAAAAAAAAEAAABh",
					"AQAAAAAAAAABAAAAAgYAAAAAAAD/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "TRANSFORM"
					},
					"CgAAALAFAAAAAAAAsQUAAAAAAAAAAAAAsQUAAAAAAACxBQAAAAAAAAgAAABXUklUQUJMRbEFAAAAAAAAsgUAAAAAAAAAAAAAsgUAAAAAAACzBQAAAAAAAAAAAACzBQAAAAAAALQFAAAAAAAAAAAAALQFAAAAAAAAtQUAAAAAAAAAAAAAtQUAAAAAAAC2BQAAAAAAAAAAAAC2BQAAAAAAALcFAAAAAAAAAAAAALcFAAAAAAAAuAUAAAAAAAAAAAAAuAUAAAAAAAC5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAUAAAAAAAC4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"paste",
					null,
					"AgAAAMUFAAAAAAAA1AUAAAAAAAAAAAAA1AUAAAAAAADUBQAAAAAAAA4AAABXUklUQUJMRV9XUklURQ",
					"AQAAAAAAAAABAAAAxQUAAAAAAADTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "TRANB"
					},
					"BgAAAM8FAAAAAAAA0AUAAAAAAAAAAAAA0AUAAAAAAADQBQAAAAAAAAUAAABTVEFSVNAFAAAAAAAA0QUAAAAAAAAAAAAA0QUAAAAAAADSBQAAAAAAAAAAAADSBQAAAAAAANMFAAAAAAAAAAAAANMFAAAAAAAA1AUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AUAAAAAAADPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"left_delete",
					null,
					"AQAAANMFAAAAAAAA0wUAAAAAAAABAAAAQg",
					"AQAAAAAAAAABAAAA1AUAAAAAAADUBQAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "SFORM"
					},
					"BQAAANMFAAAAAAAA1AUAAAAAAAAAAAAA1AUAAAAAAADVBQAAAAAAAAAAAADVBQAAAAAAANYFAAAAAAAAAAAAANYFAAAAAAAA1wUAAAAAAAAAAAAA1wUAAAAAAADYBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wUAAAAAAADTBQAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"paste",
					null,
					"AgAAANoFAAAAAAAA7QUAAAAAAAAAAAAA7QUAAAAAAADtBQAAAAAAAA4AAABXUklUQUJMRV9DTE9TRQ",
					"AQAAAAAAAAABAAAA2gUAAAAAAADoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAO0FAAAAAAAA7gUAAAAAAAAAAAAA7gUAAAAAAADuBQAAAAAAABAAAAAsIFdSSVRBQkxFX0FCT1JU",
					"AQAAAAAAAAABAAAA7QUAAAAAAAD9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					10,
					"left_delete",
					null,
					"CgAAAO0FAAAAAAAA7QUAAAAAAAABAAAAIOwFAAAAAAAA7AUAAAAAAAABAAAATesFAAAAAAAA6wUAAAAAAAABAAAAUuoFAAAAAAAA6gUAAAAAAAABAAAAT+kFAAAAAAAA6QUAAAAAAAABAAAARugFAAAAAAAA6AUAAAAAAAABAAAAU+cFAAAAAAAA5wUAAAAAAAABAAAATuYFAAAAAAAA5gUAAAAAAAABAAAAQeUFAAAAAAAA5QUAAAAAAAABAAAAUuQFAAAAAAAA5AUAAAAAAAABAAAAVA",
					"AQAAAAAAAAABAAAA7gUAAAAAAADuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "FLUSH"
					},
					"BQAAAOQFAAAAAAAA5QUAAAAAAAAAAAAA5QUAAAAAAADmBQAAAAAAAAAAAADmBQAAAAAAAOcFAAAAAAAAAAAAAOcFAAAAAAAA6AUAAAAAAAAAAAAA6AUAAAAAAADpBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AUAAAAAAADkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"right_delete",
					null,
					"AQAAADAGAAAAAAAAMAYAAAAAAABXAAAAICBRdWV1ZSBxOwogIF9BdG9taWMoQk9PTCkgY2xvc2VkOwogIF9BdG9taWMoY2hhciopIHJlYXNvbjsKICBfQXRvbWljKFdyaXRlciopIHdyaXRlcjsK",
					"AQAAAAAAAAABAAAAMAYAAAAAAACHBgAAAAAAAAAAAAAAAAAA"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAD0GAAAAAAAAPQYAAAAAAAABAAAANA",
					"AQAAAAAAAAABAAAAPgYAAAAAAAA+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AQAAAD0GAAAAAAAAPgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQYAAAAAAAA9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "\nReadable"
					},
					"CgAAAC8GAAAAAAAAMAYAAAAAAAAAAAAAMAYAAAAAAAAyBgAAAAAAAAAAAAAyBgAAAAAAADMGAAAAAAAAAAAAADMGAAAAAAAANAYAAAAAAAAAAAAANAYAAAAAAAA1BgAAAAAAAAAAAAA1BgAAAAAAADYGAAAAAAAAAAAAADYGAAAAAAAANwYAAAAAAAAAAAAANwYAAAAAAAA4BgAAAAAAAAAAAAA4BgAAAAAAADkGAAAAAAAAAAAAADkGAAAAAAAAOgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwYAAAAAAAAvBgAAAAAAAP///////+9/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAADoGAAAAAAAAOwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgYAAAAAAAA6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					1,
					"insert",
					{
						"characters": " reader"
					},
					"BwAAADsGAAAAAAAAPAYAAAAAAAAAAAAAPAYAAAAAAAA9BgAAAAAAAAAAAAA9BgAAAAAAAD4GAAAAAAAAAAAAAD4GAAAAAAAAPwYAAAAAAAAAAAAAPwYAAAAAAABABgAAAAAAAAAAAABABgAAAAAAAEEGAAAAAAAAAAAAAEEGAAAAAAAAQgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwYAAAAAAAA7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					2,
					"left_delete",
					null,
					"AgAAAEEGAAAAAAAAQQYAAAAAAAABAAAAckAGAAAAAAAAQAYAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAQgYAAAAAAABCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"insert",
					{
						"characters": "able;"
					},
					"BQAAAEAGAAAAAAAAQQYAAAAAAAAAAAAAQQYAAAAAAABCBgAAAAAAAAAAAABCBgAAAAAAAEMGAAAAAAAAAAAAAEMGAAAAAAAARAYAAAAAAAAAAAAARAYAAAAAAABFBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAYAAAAAAABABgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEUGAAAAAAAARgYAAAAAAAAAAAAARgYAAAAAAABIBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQYAAAAAAABFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"insert",
					{
						"characters": "Writable*"
					},
					"CQAAAEgGAAAAAAAASQYAAAAAAAAAAAAASQYAAAAAAABKBgAAAAAAAAAAAABKBgAAAAAAAEsGAAAAAAAAAAAAAEsGAAAAAAAATAYAAAAAAAAAAAAATAYAAAAAAABNBgAAAAAAAAAAAABNBgAAAAAAAE4GAAAAAAAAAAAAAE4GAAAAAAAATwYAAAAAAAAAAAAATwYAAAAAAABQBgAAAAAAAAAAAABQBgAAAAAAAFEGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAYAAAAAAABIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": " writable;"
					},
					"CgAAAFEGAAAAAAAAUgYAAAAAAAAAAAAAUgYAAAAAAABTBgAAAAAAAAAAAABTBgAAAAAAAFQGAAAAAAAAAAAAAFQGAAAAAAAAVQYAAAAAAAAAAAAAVQYAAAAAAABWBgAAAAAAAAAAAABWBgAAAAAAAFcGAAAAAAAAAAAAAFcGAAAAAAAAWAYAAAAAAAAAAAAAWAYAAAAAAABZBgAAAAAAAAAAAABZBgAAAAAAAFoGAAAAAAAAAAAAAFoGAAAAAAAAWwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQYAAAAAAABRBgAAAAAAAAAAAAAAAPC/"
				],
				[
					141,
					1,
					"insert",
					{
						"characters": "ABLE"
					},
					"BQAAAL8GAAAAAAAAwAYAAAAAAAAAAAAAwAYAAAAAAADABgAAAAAAAAIAAABFUsAGAAAAAAAAwQYAAAAAAAAAAAAAwQYAAAAAAADCBgAAAAAAAAAAAADCBgAAAAAAAMMGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwYAAAAAAADBBgAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					2,
					"left_delete",
					null,
					"AgAAANgGAAAAAAAA2AYAAAAAAAACAAAAUiDXBgAAAAAAANcGAAAAAAAAAQAAAEU",
					"AQAAAAAAAAABAAAA2AYAAAAAAADaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "ABLE"
					},
					"BAAAANcGAAAAAAAA2AYAAAAAAAAAAAAA2AYAAAAAAADZBgAAAAAAAAAAAADZBgAAAAAAANoGAAAAAAAAAAAAANoGAAAAAAAA2wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wYAAAAAAADXBgAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"left_delete",
					null,
					"AQAAANoGAAAAAAAA2gYAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAA2wYAAAAAAADbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "E"
					},
					"AQAAANoGAAAAAAAA2wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gYAAAAAAADaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANsGAAAAAAAA3AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wYAAAAAAADbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": "Transform"
					},
					"CgAAAJYGAAAAAAAAlwYAAAAAAAAAAAAAlwYAAAAAAACXBgAAAAAAAAgAAABXcml0YWJsZZcGAAAAAAAAmAYAAAAAAAAAAAAAmAYAAAAAAACZBgAAAAAAAAAAAACZBgAAAAAAAJoGAAAAAAAAAAAAAJoGAAAAAAAAmwYAAAAAAAAAAAAAmwYAAAAAAACcBgAAAAAAAAAAAACcBgAAAAAAAJ0GAAAAAAAAAAAAAJ0GAAAAAAAAngYAAAAAAAAAAAAAngYAAAAAAACfBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgYAAAAAAACeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": "transform"
					},
					"CgAAAIIGAAAAAAAAgwYAAAAAAAAAAAAAgwYAAAAAAACDBgAAAAAAAAQAAABzaW5rgwYAAAAAAACEBgAAAAAAAAAAAACEBgAAAAAAAIUGAAAAAAAAAAAAAIUGAAAAAAAAhgYAAAAAAAAAAAAAhgYAAAAAAACHBgAAAAAAAAAAAACHBgAAAAAAAIgGAAAAAAAAAAAAAIgGAAAAAAAAiQYAAAAAAAAAAAAAiQYAAAAAAACKBgAAAAAAAAAAAACKBgAAAAAAAIsGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggYAAAAAAACGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"left_delete",
					null,
					"AQAAAKUGAAAAAAAApQYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAApgYAAAAAAACmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"paste",
					null,
					"AQAAAIEVAAAAAAAAihYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgRUAAAAAAACBFQAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"cut",
					null,
					"AQAAAFMHAAAAAAAAUwcAAAAAAAAWAAAALCBqc193cml0YWJsZV9jbGFzc19pZA",
					"AQAAAAAAAAABAAAAUwcAAAAAAABpBwAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					2,
					"paste",
					null,
					"AgAAAFMHAAAAAAAAaQcAAAAAAAAAAAAAaQcAAAAAAAB/BwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwcAAAAAAABTBwAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "tras"
					},
					"BQAAAG4HAAAAAAAAbwcAAAAAAAAAAAAAbwcAAAAAAABvBwAAAAAAAAgAAAB3cml0YWJsZW8HAAAAAAAAcAcAAAAAAAAAAAAAcAcAAAAAAABxBwAAAAAAAAAAAABxBwAAAAAAAHIHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgcAAAAAAAB2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"left_delete",
					null,
					"AQAAAHEHAAAAAAAAcQcAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAcgcAAAAAAAByBwAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "nsform"
					},
					"BgAAAHEHAAAAAAAAcgcAAAAAAAAAAAAAcgcAAAAAAABzBwAAAAAAAAAAAABzBwAAAAAAAHQHAAAAAAAAAAAAAHQHAAAAAAAAdQcAAAAAAAAAAAAAdQcAAAAAAAB2BwAAAAAAAAAAAAB2BwAAAAAAAHcHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQcAAAAAAABxBwAAAAAAAAAAAAAAAPC/"
				],
				[
					257,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABAIAAAAAAAAEQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAgAAAAAAAAQCAAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABEIAAAAAAAAEggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQgAAAAAAAARCAAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"paste",
					null,
					"AQAAABIIAAAAAAAANAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEggAAAAAAAASCAAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					2,
					"left_delete",
					null,
					"AgAAADMIAAAAAAAAMwgAAAAAAAABAAAAIDIIAAAAAAAAMggAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD6FgAAI2lmbmRlZiBRVUlDS0pTX1NUUkVBTV9ICiNkZWZpbmUgUVVJQ0tKU19TVFJFQU1fSAoKI2luY2x1ZGUgImRlZmluZXMuaCIKI2luY2x1ZGUgImpzLXV0aWxzLmgiCiNpbmNsdWRlICJidWZmZXItdXRpbHMuaCIKI2luY2x1ZGUgInF1ZXVlLmgiCiNpbmNsdWRlIDxxdWlja2pzLmg+CiNpbmNsdWRlIDxjdXRpbHMuaD4KI2luY2x1ZGUgPHN0ZGF0b21pYy5oPgoKLyoqCiAqIFxkZWZncm91cCBxdWlja2pzLXN0cmVhbSBRdWlja0pTIG1vZHVsZTogc3RyZWFtIC0gU3RyZWFtcwogKiBAewogKi8KCnR5cGVkZWYgZW51bSB7IEVWRU5UX0NMT1NFID0gMCwgRVZFTlRfQ0FOQ0VMID0gMSwgRVZFTlRfUkVBRCA9IDIgfSBTdHJlYW1FdmVudDsKCnR5cGVkZWYgc3RydWN0IHJlYWRfb3BlcmF0aW9uIHsKICBzdHJ1Y3QgbGlzdF9oZWFkIGxpbms7CiAgUmVzb2x2ZUZ1bmN0aW9ucyBoYW5kbGVyczsKfSBSZWFkOwoKZW51bSB7IFJFQURFUl9DTE9TRUQgPSAwLCBSRUFERVJfQ0FOQ0VMTEVEIH07Cgp0eXBlZGVmIHN0cnVjdCBzdHJlYW1fcmVhZGVyIHsKICBpbnQ2NF90IGRlc2lyZWRfc2l6ZTsKICBfQXRvbWljKHN0cnVjdCByZWFkYWJsZV9zdHJlYW0qKSBzdHJlYW07CiAgUHJvbWlzZSBldmVudHNbMl07CiAgc3RydWN0IGxpc3RfaGVhZCByZWFkczsKfSBSZWFkZXI7CgplbnVtIHsgV1JJVEVSX0NMT1NFRCA9IDAsIFdSSVRFUl9SRUFEWSB9OwoKdHlwZWRlZiBzdHJ1Y3Qgc3RyZWFtX3dyaXRlciB7CiAgaW50NjRfdCBkZXNpcmVkX3NpemU7CiAgX0F0b21pYyhzdHJ1Y3Qgd3JpdGFibGVfc3RyZWFtKikgc3RyZWFtOwogIFByb21pc2UgZXZlbnRzWzJdOwogIFF1ZXVlIHE7Cn0gV3JpdGVyOwoKdHlwZWRlZiBlbnVtIHsgUkVBREFCTEVfU1RBUlQgPSAwLCBSRUFEQUJMRV9QVUxMLCBSRUFEQUJMRV9DQU5DRUwgfSBSZWFkYWJsZUV2ZW50OwoKdHlwZWRlZiBzdHJ1Y3QgcmVhZGFibGVfc3RyZWFtIHsKICBpbnQgcmVmX2NvdW50OwogIFF1ZXVlIHE7CiAgX0F0b21pYyhCT09MKSBjbG9zZWQ7CiAgX0F0b21pYyhjaGFyKikgcmVhc29uOwogIF9BdG9taWMoUmVhZGVyKikgcmVhZGVyOwogIEpTVmFsdWUgb25bM107CiAgSlNWYWx1ZSB1bmRlcmx5aW5nX3NvdXJjZSwgY29udHJvbGxlcjsKfSBSZWFkYWJsZTsKCnR5cGVkZWYgZW51bSB7IFdSSVRBQkxFX1NUQVJUID0gMCwgV1JJVEFCTEVfV1JJVEUsIFdSSVRBQkxFX0NMT1NFLCBXUklUQUJMRV9BQk9SVCB9IFdyaXRhYmxlRXZlbnQ7Cgp0eXBlZGVmIHN0cnVjdCB3cml0YWJsZV9zdHJlYW0gewogIGludCByZWZfY291bnQ7CiAgUXVldWUgcTsKICBfQXRvbWljKEJPT0wpIGNsb3NlZDsKICBfQXRvbWljKGNoYXIqKSByZWFzb247CiAgX0F0b21pYyhXcml0ZXIqKSB3cml0ZXI7CiAgSlNWYWx1ZSBvbls0XTsKICBKU1ZhbHVlIHVuZGVybHlpbmdfc2luaywgY29udHJvbGxlcjsKfSBXcml0YWJsZTsKCnR5cGVkZWYgZW51bSB7IFRSQU5TRk9STV9TVEFSVCA9IDAsIFRSQU5TRk9STV9UUkFOU0ZPUk0sIFRSQU5TRk9STV9GTFVTSCB9IFRyYW5zZm9ybUV2ZW50OwoKdHlwZWRlZiBzdHJ1Y3QgdHJhbnNmb3JtX3N0cmVhbSB7CiAgaW50IHJlZl9jb3VudDsKICBSZWFkYWJsZSogcmVhZGFibGU7CiAgV3JpdGFibGUqIHdyaXRhYmxlOwogIEpTVmFsdWUgb25bM107CiAgSlNWYWx1ZSB1bmRlcmx5aW5nX3RyYW5zZm9ybSwgY29udHJvbGxlcjsKfSBUcmFuc2Zvcm07Cgp0eXBlZGVmIGVudW0geyBUUkFOU0ZPUk1fUkVBREFCTEUgPSAwLCBUUkFOU0ZPUk1fV1JJVEFCTEUgfSBUcmFuc2Zvcm1Qcm9wZXJ0aWVzOwoKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU0NsYXNzSUQganNfcmVhZGVyX2NsYXNzX2lkLCBqc193cml0ZXJfY2xhc3NfaWQsIGpzX3JlYWRhYmxlX2NsYXNzX2lkLCBqc193cml0YWJsZV9jbGFzc19pZCwganNfdHJhbnNmb3JtX2NsYXNzX2lkOwpleHRlcm4gdGhyZWFkX2xvY2FsIEpTVmFsdWUgcmVhZGVyX3Byb3RvLCByZWFkZXJfY3Rvciwgd3JpdGVyX3Byb3RvLCB3cml0ZXJfY3RvciwgcmVhZGFibGVfcHJvdG8sIHJlYWRhYmxlX2N0b3IsIHdyaXRhYmxlX3Byb3RvLCB3cml0YWJsZV9jdG9yLCAgdHJhbnNmb3JtX3Byb3RvLCB0cmFuc2Zvcm1fY3RvcjsKClJlYWRlciogcmVhZGVyX25ldyhKU0NvbnRleHQqLCBSZWFkYWJsZSogc3QpOwpCT09MIHJlYWRlcl9yZWxlYXNlX2xvY2soUmVhZGVyKiwgSlNDb250ZXh0KiBjdHgpOwppbnQgcmVhZGVyX2NhbmNlbChSZWFkZXIqLCBKU0NvbnRleHQqIGN0eCk7CkpTVmFsdWUgcmVhZGVyX3JlYWQoUmVhZGVyKiwgSlNDb250ZXh0KiBjdHgpOwpKU1ZhbHVlIHJlYWRlcl9zaWduYWwoUmVhZGVyKiwgU3RyZWFtRXZlbnQgZXZlbnQsIEpTVmFsdWVDb25zdCBhcmcsIEpTQ29udGV4dCogY3R4KTsKaW50IHJlYWRlcl91cGRhdGUoUmVhZGVyKiwgSlNDb250ZXh0KiBjdHgpOwpCT09MIHJlYWRlcl9wYXNzdGhyb3VnaChSZWFkZXIqLCBKU1ZhbHVlQ29uc3QgY2h1bmssIEpTQ29udGV4dCogY3R4KTsKUmVhZGFibGUqIHJlYWRhYmxlX25ldyhKU0NvbnRleHQqKTsKSlNWYWx1ZSByZWFkYWJsZV9jbG9zZShSZWFkYWJsZSosIEpTQ29udGV4dCogY3R4KTsKSlNWYWx1ZSByZWFkYWJsZV9hYm9ydChSZWFkYWJsZSosIEpTVmFsdWVDb25zdCByZWFzb24sIEpTQ29udGV4dCogY3R4KTsKSlNWYWx1ZSByZWFkYWJsZV9lbnF1ZXVlKFJlYWRhYmxlKiwgSlNWYWx1ZUNvbnN0IGNodW5rLCBKU0NvbnRleHQqIGN0eCk7CmludCByZWFkYWJsZV9sb2NrKFJlYWRhYmxlKiwgUmVhZGVyKiByZCk7CmludCByZWFkYWJsZV91bmxvY2soUmVhZGFibGUqLCBSZWFkZXIqIHJkKTsKUmVhZGVyKiByZWFkYWJsZV9nZXRfcmVhZGVyKFJlYWRhYmxlKiwgSlNDb250ZXh0KiBjdHgpOwpKU1ZhbHVlIGpzX3JlYWRhYmxlX2NhbGxiYWNrKEpTQ29udGV4dCosIFJlYWRhYmxlKiBzdCwgUmVhZGFibGVFdmVudCBldmVudCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pOwpXcml0ZXIqIHdyaXRlcl9uZXcoSlNDb250ZXh0KiwgV3JpdGFibGUqIHN0KTsKQk9PTCB3cml0ZXJfcmVsZWFzZV9sb2NrKFdyaXRlciosIEpTQ29udGV4dCogY3R4KTsKSlNWYWx1ZSB3cml0ZXJfd3JpdGUoV3JpdGVyKiwgSlNWYWx1ZUNvbnN0IGNodW5rLCBKU0NvbnRleHQqIGN0eCk7CkpTVmFsdWUgd3JpdGVyX2Nsb3NlKFdyaXRlciosIEpTQ29udGV4dCogY3R4KTsKSlNWYWx1ZSB3cml0ZXJfYWJvcnQoV3JpdGVyKiwgSlNWYWx1ZUNvbnN0IHJlYXNvbiwgSlNDb250ZXh0KiBjdHgpOwpKU1ZhbHVlIHdyaXRlcl9zaWduYWwoV3JpdGVyKiwgU3RyZWFtRXZlbnQgZXZlbnQsIEpTVmFsdWVDb25zdCBhcmcsIEpTQ29udGV4dCogY3R4KTsKV3JpdGFibGUqIHdyaXRhYmxlX25ldyhKU0NvbnRleHQqKTsKdm9pZCB3cml0YWJsZV9hYm9ydChXcml0YWJsZSosIEpTVmFsdWVDb25zdCByZWFzb24sIEpTQ29udGV4dCogY3R4KTsKaW50IHdyaXRhYmxlX2xvY2soV3JpdGFibGUqLCBXcml0ZXIqIHdyKTsKaW50IHdyaXRhYmxlX3VubG9jayhXcml0YWJsZSosIFdyaXRlciogd3IpOwpXcml0ZXIqIHdyaXRhYmxlX2dldF93cml0ZXIoV3JpdGFibGUqLCBzaXplX3QgZGVzaXJlZF9zaXplLCBKU0NvbnRleHQqIGN0eCk7CkpTVmFsdWUganNfd3JpdGFibGVfY2FsbGJhY2soSlNDb250ZXh0KiwgV3JpdGFibGUqIHN0LCBXcml0YWJsZUV2ZW50IGV2ZW50LCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSk7CkpTTW9kdWxlRGVmKiBqc19pbml0X21vZHVsZV9zdHJlYW0oSlNDb250ZXh0KiwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpOwoKc3RhdGljIGlubGluZSBCT09MCnJlYWRlcl9jbG9zZWQoUmVhZGVyKiByZCkgewogIHJldHVybiBwcm9taXNlX2RvbmUoJnJkLT5ldmVudHNbUkVBREVSX0NMT1NFRF0pOwp9CnN0YXRpYyBpbmxpbmUgQk9PTApyZWFkZXJfY2FuY2VsbGVkKFJlYWRlciogcmQpIHsKICByZXR1cm4gcHJvbWlzZV9kb25lKCZyZC0+ZXZlbnRzW1JFQURFUl9DQU5DRUxMRURdKTsKfQoKc3RhdGljIGlubGluZSBCT09MCnJlYWRhYmxlX2Nsb3NlZChSZWFkYWJsZSogc3QpIHsKICByZXR1cm4gYXRvbWljX2xvYWQoJnN0LT5jbG9zZWQpOwp9CgpzdGF0aWMgaW5saW5lIFJlYWRlcioKcmVhZGFibGVfbG9ja2VkKFJlYWRhYmxlKiBzdCkgewogIHJldHVybiBhdG9taWNfbG9hZCgmc3QtPnJlYWRlcik7Cn0KCnN0YXRpYyBpbmxpbmUgQk9PTAp3cml0ZXJfY2xvc2VkKFdyaXRlciogd3IpIHsKICByZXR1cm4gcHJvbWlzZV9kb25lKCZ3ci0+ZXZlbnRzW1dSSVRFUl9DTE9TRURdKTsKfQpzdGF0aWMgaW5saW5lIEJPT0wKd3JpdGVyX3JlYWR5KFdyaXRlciogd3IpIHsKICByZXR1cm4gcHJvbWlzZV9kb25lKCZ3ci0+ZXZlbnRzW1dSSVRFUl9SRUFEWV0pOwp9CgpzdGF0aWMgaW5saW5lIEJPT0wKd3JpdGFibGVfY2xvc2VkKFdyaXRhYmxlKiBzdCkgewogIHJldHVybiBhdG9taWNfbG9hZCgmc3QtPmNsb3NlZCk7Cn0KCnN0YXRpYyBpbmxpbmUgV3JpdGVyKgp3cml0YWJsZV9sb2NrZWQoV3JpdGFibGUqIHN0KSB7CiAgcmV0dXJuIGF0b21pY19sb2FkKCZzdC0+d3JpdGVyKTsKfQoKc3RhdGljIGlubGluZSBSZWFkZXIqCmpzX3JlYWRlcl9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3JlYWRlcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgUmVhZGVyKgpqc19yZWFkZXJfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX3JlYWRlcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgV3JpdGVyKgpqc193cml0ZXJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc193cml0ZXJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFdyaXRlcioKanNfd3JpdGVyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc193cml0ZXJfY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFJlYWRhYmxlKgpqc19yZWFkYWJsZV9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3JlYWRhYmxlX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBSZWFkYWJsZSoKanNfcmVhZGFibGVfZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX3JlYWRhYmxlX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBXcml0YWJsZSoKanNfd3JpdGFibGVfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc193cml0YWJsZV9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgV3JpdGFibGUqCmpzX3dyaXRhYmxlX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc193cml0YWJsZV9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgVHJhbnNmb3JtKgpqc190cmFuc2Zvcm1fZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc190cmFuc2Zvcm1fY2xhc3NfaWQpOwp9CgpzdGF0aWMgaW5saW5lIFRyYW5zZm9ybSoKanNfdHJhbnNmb3JtX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc190cmFuc2Zvcm1fY2xhc3NfaWQpOwp9CgovKioKICogQH0KICovCgojZW5kaWYgLyogZGVmaW5lZChRVUlDS0pTX1NUUkVBTV9IKSAqLwoAAAAAAAAAAP0WAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMggAAAAAAAAyCAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "void"
					},
					"BQAAAN4JAAAAAAAA3wkAAAAAAAAAAAAA3wkAAAAAAADfCQAAAAAAAAcAAABKU1ZhbHVl3wkAAAAAAADgCQAAAAAAAAAAAADgCQAAAAAAAOEJAAAAAAAAAAAAAOEJAAAAAAAA4gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gkAAAAAAADlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"paste",
					null,
					"AgAAAA4KAAAAAAAAEgoAAAAAAAAAAAAAEgoAAAAAAAASCgAAAAAAAAcAAABKU1ZhbHVl",
					"AQAAAAAAAAABAAAADgoAAAAAAAAVCgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js-utils.h",
			"settings":
			{
				"buffer_size": 904,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"cut",
					null,
					"AQAAAIwBAAAAAAAAjAEAAAAAAAApAAAAdm9pZCBwcm9taXNlX2ZyZWUoSlNDb250ZXh0KiwgUHJvbWlzZSopOwo",
					"AQAAAAAAAAABAAAAjAEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					2,
					"paste",
					null,
					"AgAAAIwBAAAAAAAAtQEAAAAAAAAAAAAAtQEAAAAAAADeAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "_rt"
					},
					"AwAAAMYBAAAAAAAAxwEAAAAAAAAAAAAAxwEAAAAAAADIAQAAAAAAAAAAAADIAQAAAAAAAMkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgEAAAAAAADGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "JSRutime"
					},
					"CQAAAMoBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADLAQAAAAAAAAkAAABKU0NvbnRleHTLAQAAAAAAAMwBAAAAAAAAAAAAAMwBAAAAAAAAzQEAAAAAAAAAAAAAzQEAAAAAAADOAQAAAAAAAAAAAADOAQAAAAAAAM8BAAAAAAAAAAAAAM8BAAAAAAAA0AEAAAAAAAAAAAAA0AEAAAAAAADRAQAAAAAAAAAAAADRAQAAAAAAANIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygEAAAAAAADTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					5,
					"left_delete",
					null,
					"BQAAANEBAAAAAAAA0QEAAAAAAAABAAAAZdABAAAAAAAA0AEAAAAAAAABAAAAbc8BAAAAAAAAzwEAAAAAAAABAAAAac4BAAAAAAAAzgEAAAAAAAABAAAAdM0BAAAAAAAAzQEAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA0gEAAAAAAADSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "untime"
					},
					"BgAAAM0BAAAAAAAAzgEAAAAAAAAAAAAAzgEAAAAAAADPAQAAAAAAAAAAAADPAQAAAAAAANABAAAAAAAAAAAAANABAAAAAAAA0QEAAAAAAAAAAAAA0QEAAAAAAADSAQAAAAAAAAAAAADSAQAAAAAAANMBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQEAAAAAAADNAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "js-utils.c",
			"settings":
			{
				"buffer_size": 3154,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"cut",
					null,
					"AQAAABkFAAAAAAAAGQUAAAAAAACqAAAACnZvaWQKcHJvbWlzZV9mcmVlKEpTQ29udGV4dCogY3R4LCBQcm9taXNlKiBwcm9tKSB7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcHJvbS0+cHJvbWlzZSk7CiAgcHJvbS0+cHJvbWlzZSA9IEpTX1VOREVGSU5FRDsKICBqc19yZXNvbHZlX2Z1bmN0aW9uc19mcmVlKGN0eCwgJnByb20tPmZ1bmNzKTsKfQo",
					"AQAAAAAAAAABAAAAGQUAAAAAAADDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					2,
					"paste",
					null,
					"AgAAABkFAAAAAAAAwwUAAAAAAAAAAAAAwwUAAAAAAABtBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQUAAAAAAAAZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "_rt"
					},
					"AwAAANUFAAAAAAAA1gUAAAAAAAAAAAAA1gUAAAAAAADXBQAAAAAAAAAAAADXBQAAAAAAANgFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QUAAAAAAADVBQAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "HJ"
					},
					"AwAAANkFAAAAAAAA2gUAAAAAAAAAAAAA2gUAAAAAAADaBQAAAAAAAAkAAABKU0NvbnRleHTaBQAAAAAAANsFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QUAAAAAAADiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAANoFAAAAAAAA2gUAAAAAAAABAAAAStkFAAAAAAAA2QUAAAAAAAABAAAASA",
					"AQAAAAAAAAABAAAA2wUAAAAAAADbBQAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "JSRuntime"
					},
					"CQAAANkFAAAAAAAA2gUAAAAAAAAAAAAA2gUAAAAAAADbBQAAAAAAAAAAAADbBQAAAAAAANwFAAAAAAAAAAAAANwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADeBQAAAAAAAAAAAADeBQAAAAAAAN8FAAAAAAAAAAAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAADhBQAAAAAAAOIFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QUAAAAAAADZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					3,
					"right_delete",
					null,
					"AwAAAOQFAAAAAAAA5AUAAAAAAAABAAAAY+QFAAAAAAAA5AUAAAAAAAABAAAAdOQFAAAAAAAA5AUAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAA5AUAAAAAAADkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AgAAAOQFAAAAAAAA5QUAAAAAAAAAAAAA5QUAAAAAAADmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AUAAAAAAADkBQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "RT"
					},
					"AgAAAAcGAAAAAAAACAYAAAAAAAAAAAAACAYAAAAAAAAJBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwYAAAAAAAAHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"cut",
					null,
					"AQAAACwBAAAAAAAALAEAAAAAAADEAAAACnN0YXRpYyB2b2lkCmpzX3Jlc29sdmVfZnVuY3Rpb25zX2ZyZWUoSlNDb250ZXh0KiBjdHgsIFJlc29sdmVGdW5jdGlvbnMqIGZ1bmNzKSB7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZnVuY3MtPmFycmF5WzBdKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmdW5jcy0+YXJyYXlbMV0pOwogIGpzX3Jlc29sdmVfZnVuY3Rpb25zX3plcm8oZnVuY3MpOwp9Cg",
					"AQAAAAAAAAABAAAALAEAAAAAAADwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					2,
					"paste",
					null,
					"AgAAACwBAAAAAAAA8AEAAAAAAAAAAAAA8AEAAAAAAAC0AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAEAAAAAAAAsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "_rt"
					},
					"AwAAABYCAAAAAAAAFwIAAAAAAAAAAAAAFwIAAAAAAAAYAgAAAAAAAAAAAAAYAgAAAAAAABkCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgIAAAAAAAAWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "RT"
					},
					"AwAAABoCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAbAgAAAAAAAAkAAABKU0NvbnRleHQbAgAAAAAAABwCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgIAAAAAAAAjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					2,
					"left_delete",
					null,
					"AgAAABsCAAAAAAAAGwIAAAAAAAABAAAAVBoCAAAAAAAAGgIAAAAAAAABAAAAUg",
					"AQAAAAAAAAABAAAAHAIAAAAAAAAcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "JSR"
					},
					"AwAAABoCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAAB0CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgIAAAAAAAAaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert_completion",
					{
						"completion": "JSRuntime",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "JSRuntime"
					},
					"AgAAABoCAAAAAAAAGgIAAAAAAAADAAAASlNSGgIAAAAAAAAjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQIAAAAAAAAdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AwAAACUCAAAAAAAAJgIAAAAAAAAAAAAAJgIAAAAAAAAmAgAAAAAAAAMAAABjdHgmAgAAAAAAACcCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQIAAAAAAAAoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AwAAAHkCAAAAAAAAegIAAAAAAAAAAAAAegIAAAAAAAB6AgAAAAAAAAMAAABjdHh6AgAAAAAAAHsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQIAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AwAAAFMCAAAAAAAAVAIAAAAAAAAAAAAAVAIAAAAAAABUAgAAAAAAAAMAAABjdHhUAgAAAAAAAFUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwIAAAAAAABWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "RT"
					},
					"AgAAAFICAAAAAAAAUwIAAAAAAAAAAAAAUwIAAAAAAABUAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgIAAAAAAABSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "RT"
					},
					"AgAAAHkCAAAAAAAAegIAAAAAAAAAAAAAegIAAAAAAAB7AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQIAAAAAAAB5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "_rt"
					},
					"AwAAACIHAAAAAAAAIwcAAAAAAAAAAAAAIwcAAAAAAAAkBwAAAAAAAAAAAAAkBwAAAAAAACUHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgcAAAAAAAAiBwAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					3,
					"right_delete",
					null,
					"AwAAACYHAAAAAAAAJgcAAAAAAAABAAAAYyYHAAAAAAAAJgcAAAAAAAABAAAAdCYHAAAAAAAAJgcAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAAJgcAAAAAAAAmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AgAAACYHAAAAAAAAJwcAAAAAAAAAAAAAJwcAAAAAAAAoBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgcAAAAAAAAmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "rt"
					},
					"AwAAANIGAAAAAAAA0wYAAAAAAAAAAAAA0wYAAAAAAADTBgAAAAAAAAMAAABjdHjTBgAAAAAAANQGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gYAAAAAAADVBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "queue.h",
			"settings":
			{
				"buffer_size": 1322,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "queue.c",
			"settings":
			{
				"buffer_size": 2744,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-sockets.h",
			"settings":
			{
				"buffer_size": 4606,
				"line_ending": "Unix"
			}
		},
		{
			"file": "extract-structs.js",
			"settings":
			{
				"buffer_size": 2575,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPgDAAAAAAAA+QMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AMAAAAAAAD4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAABQEAAAAAAAAFAQAAAAAAAADAAAAT2Jq",
					"AQAAAAAAAAABAAAAFAQAAAAAAAAXBAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAABoEAAAAAAAAGwQAAAAAAAAAAAAAGwQAAAAAAAAfBAAAAAAAAAAAAAAfBAAAAAAAACEEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgQAAAAAAAAaBAAAAAAAAP///////+9/"
				],
				[
					32,
					1,
					"paste",
					null,
					"AQAAACEEAAAAAAAAQgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQQAAAAAAAAhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"paste",
					null,
					"AgAAADIEAAAAAAAANQQAAAAAAAAAAAAANQQAAAAAAAA1BAAAAAAAAAUAAABsZXhlcg",
					"AQAAAAAAAAABAAAAMgQAAAAAAAA3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"paste",
					null,
					"AgAAADgEAAAAAAAAOwQAAAAAAAAAAAAAOwQAAAAAAAA7BAAAAAAAAAUAAABsZXhlcg",
					"AQAAAAAAAAABAAAAOAQAAAAAAAA9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAD0EAAAAAAAAPgQAAAAAAAAAAAAAPgQAAAAAAABIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQQAAAAAAAA9BAAAAAAAAP///////+9/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "lexer.token"
					},
					"DAAAAGAEAAAAAAAAYQQAAAAAAAAAAAAAPgQAAAAAAAA+BAAAAAAAAAoAAAAgICAgICAgICAgVwQAAAAAAABYBAAAAAAAAAAAAABYBAAAAAAAAFkEAAAAAAAAAAAAAFkEAAAAAAAAWgQAAAAAAAAAAAAAWgQAAAAAAABbBAAAAAAAAAAAAABbBAAAAAAAAFwEAAAAAAAAAAAAAFwEAAAAAAAAXQQAAAAAAAAAAAAAXQQAAAAAAABeBAAAAAAAAAAAAABeBAAAAAAAAF8EAAAAAAAAAAAAAF8EAAAAAAAAYAQAAAAAAAAAAAAAYAQAAAAAAABhBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAQAAAAAAABgBAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					3,
					"right_delete",
					null,
					"AwAAAGEEAAAAAAAAYQQAAAAAAAABAAAAdGEEAAAAAAAAYQQAAAAAAAABAAAAb2EEAAAAAAAAYQQAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAYQQAAAAAAABhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "cons"
					},
					"BAAAAD8EAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABBBAAAAAAAAAAAAABBBAAAAAAAAEIEAAAAAAAAAAAAAEIEAAAAAAAAQwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwQAAAAAAAA/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " ttok"
					},
					"BQAAAEMEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABFBAAAAAAAAAAAAABFBAAAAAAAAEYEAAAAAAAAAAAAAEYEAAAAAAAARwQAAAAAAAAAAAAARwQAAAAAAABIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwQAAAAAAABDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					4,
					"left_delete",
					null,
					"BAAAAEcEAAAAAAAARwQAAAAAAAABAAAAa0YEAAAAAAAARgQAAAAAAAABAAAAb0UEAAAAAAAARQQAAAAAAAABAAAAdEQEAAAAAAAARAQAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAASAQAAAAAAABIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEQEAAAAAAAARQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAQAAAAAAABEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					2,
					"left_delete",
					null,
					"AgAAAEQEAAAAAAAARAQAAAAAAAABAAAAdEMEAAAAAAAAQwQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAARQQAAAAAAABFBAAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAEMEAAAAAAAARAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwQAAAAAAABDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " tok"
					},
					"BAAAAEQEAAAAAAAARQQAAAAAAAAAAAAARQQAAAAAAABGBAAAAAAAAAAAAABGBAAAAAAAAEcEAAAAAAAAAAAAAEcEAAAAAAAASAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAQAAAAAAABEBAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEgEAAAAAAAASQQAAAAAAAAAAAAASQQAAAAAAABKBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAQAAAAAAABIBAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"paste",
					null,
					"AQAAAEoEAAAAAAAAVQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgQAAAAAAABKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFUEAAAAAAAAVgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQQAAAAAAABVBAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "tokId"
					},
					"BgAAAPMDAAAAAAAA9AMAAAAAAAAAAAAA9AMAAAAAAAD0AwAAAAAAAAMAAAB0b2v0AwAAAAAAAPUDAAAAAAAAAAAAAPUDAAAAAAAA9gMAAAAAAAAAAAAA9gMAAAAAAAD3AwAAAAAAAAAAAAD3AwAAAAAAAPgDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wMAAAAAAAD2AwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"paste",
					null,
					"AgAAAAYEAAAAAAAACwQAAAAAAAAAAAAACwQAAAAAAAALBAAAAAAAAAMAAAB0b2s",
					"AQAAAAAAAAABAAAABgQAAAAAAAAJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"paste",
					null,
					"AgAAADYEAAAAAAAAOwQAAAAAAAAAAAAAOwQAAAAAAAA7BAAAAAAAAAMAAAB0b2s",
					"AQAAAAAAAAABAAAAOQQAAAAAAAA2BAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"paste",
					null,
					"AgAAAD4EAAAAAAAAQwQAAAAAAAAAAAAAQwQAAAAAAABDBAAAAAAAAAMAAAB0b2s",
					"AQAAAAAAAAABAAAAPgQAAAAAAABBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAIEEAAAAAAAAggQAAAAAAAAAAAAAggQAAAAAAACIBAAAAAAAAAAAAACIBAAAAAAAAIkEAAAAAAAAAAAAAIkEAAAAAAAAjwQAAAAAAAAAAAAAggQAAAAAAACCBAAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAgQQAAAAAAACBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"cut",
					null,
					"AQAAACUEAAAAAAAAJQQAAAAAAAAhAAAAICAgIGNvbnNvbGUubG9nKCd0b2tJZCcsIHRva0lkKTsK",
					"AQAAAAAAAAABAAAARgQAAAAAAAAlBAAAAAAAAAAAAAAAAEtA"
				],
				[
					118,
					1,
					"paste",
					null,
					"AQAAACUEAAAAAAAARgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQQAAAAAAAAlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"paste",
					null,
					"AQAAAIMEAAAAAAAApAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAAAAA"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "tok"
					},
					"BQAAAHUEAAAAAAAAdgQAAAAAAAAAAAAAdgQAAAAAAAB2BAAAAAAAAAsAAABsZXhlci50b2tlbpoEAAAAAAAAmgQAAAAAAAAGAAAAICAgICAgdgQAAAAAAAB3BAAAAAAAAAAAAAB3BAAAAAAAAHgEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQQAAAAAAACABAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAHcEAAAAAAAAdwQAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAAeAQAAAAAAAB4BAAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAHcEAAAAAAAAeAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwQAAAAAAAB3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHAEAAAAAAAAcQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAQAAAAAAABwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " tpe"
					},
					"BAAAAHEEAAAAAAAAcgQAAAAAAAAAAAAAcgQAAAAAAABzBAAAAAAAAAAAAABzBAAAAAAAAHQEAAAAAAAAAAAAAHQEAAAAAAAAdQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQQAAAAAAABxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					3,
					"left_delete",
					null,
					"AwAAAHQEAAAAAAAAdAQAAAAAAAABAAAAZXMEAAAAAAAAcwQAAAAAAAABAAAAcHIEAAAAAAAAcgQAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAdQQAAAAAAAB1BAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": "type"
					},
					"BAAAAHIEAAAAAAAAcwQAAAAAAAAAAAAAcwQAAAAAAAB0BAAAAAAAAAAAAAB0BAAAAAAAAHUEAAAAAAAAAAAAAHUEAAAAAAAAdgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgQAAAAAAAByBAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"",
					null,
					"AQAAAMYEAAAAAAAAygQAAAAAAAAIAAAAdG9rLnR5cGU",
					"AQAAAAAAAAABAAAAxgQAAAAAAADOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"",
					null,
					"AQAAAF0GAAAAAAAAYQYAAAAAAAAIAAAAdG9rLnR5cGU",
					"AQAAAAAAAAABAAAAXQYAAAAAAABlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"",
					null,
					"AQAAAKUGAAAAAAAAqQYAAAAAAAAIAAAAdG9rLnR5cGU",
					"AQAAAAAAAAABAAAApQYAAAAAAACtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"",
					null,
					"AQAAAGAFAAAAAAAAYwUAAAAAAAAHAAAAdG9rLmxvYw",
					"AQAAAAAAAAABAAAAYAUAAAAAAABnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"",
					null,
					"AQAAAEIGAAAAAAAARQYAAAAAAAAHAAAAdG9rLmxvYw",
					"AQAAAAAAAAABAAAAQgYAAAAAAABJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"",
					null,
					"AQAAAMYHAAAAAAAAyQcAAAAAAAAHAAAAdG9rLmxvYw",
					"AQAAAAAAAAABAAAAxgcAAAAAAADNBwAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"",
					null,
					"AQAAADAIAAAAAAAAMwgAAAAAAAAHAAAAdG9rLmxvYw",
					"AQAAAAAAAAABAAAAMAgAAAAAAAA3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"paste",
					null,
					"AgAAAJIEAAAAAAAAlQQAAAAAAAAAAAAAlQQAAAAAAACVBAAAAAAAAAUAAAB0b2tJZA",
					"AQAAAAAAAAABAAAAkgQAAAAAAACXBAAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"paste",
					null,
					"AgAAAJgEAAAAAAAAmwQAAAAAAAAAAAAAmwQAAAAAAACbBAAAAAAAAAUAAAB0b2tJZA",
					"AQAAAAAAAAABAAAAmAQAAAAAAACdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"cut",
					null,
					"AQAAAIEEAAAAAAAAgQQAAAAAAAAdAAAAICAgIGNvbnNvbGUubG9nKCd0b2snLCB0b2spOwo",
					"AQAAAAAAAAABAAAAgQQAAAAAAACeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"paste",
					null,
					"AQAAAGQEAAAAAAAAgQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAQAAAAAAABkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"paste",
					null,
					"AQAAAJ0EAAAAAAAAugQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQQAAAAAAACdBAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					1,
					"paste",
					null,
					"AgAAALQEAAAAAAAAwgQAAAAAAAAAAAAAwgQAAAAAAADCBAAAAAAAAAMAAAB0b2s",
					"AQAAAAAAAAABAAAAtAQAAAAAAAC3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGgEAAAAAAAAaQQAAAAAAAAAAAAAaQQAAAAAAABqBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAQAAAAAAABoBAAAAAAAAAAAAAAAQFRA"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIIEAAAAAAAAgwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggQAAAAAAACCBAAAAAAAAP///////+9/"
				],
				[
					252,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAIMEAAAAAAAAhQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwQAAAAAAACDBAAAAAAAAAAAAAAAQHRA"
				],
				[
					255,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGcEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABoBAAAAAAAAAMAAAAgLy8",
					"AQAAAAAAAAABAAAAagQAAAAAAABnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"paste",
					null,
					"AgAAABQEAAAAAAAAHQQAAAAAAAAAAAAAHQQAAAAAAAAdBAAAAAAAAAQAAABuZXh0",
					"AQAAAAAAAAABAAAAFAQAAAAAAAAYBAAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "tok"
					},
					"BAAAAPMDAAAAAAAA9AMAAAAAAAAAAAAA9AMAAAAAAAD0AwAAAAAAAAUAAAB0b2tJZPQDAAAAAAAA9QMAAAAAAAAAAAAA9QMAAAAAAAD2AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wMAAAAAAAD4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"paste",
					null,
					"AgAAAAQEAAAAAAAABwQAAAAAAAAAAAAABwQAAAAAAAAHBAAAAAAAAAUAAAB0b2tJZA",
					"AQAAAAAAAAABAAAABAQAAAAAAAAJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					288,
					1,
					"paste",
					null,
					"AgAAADcEAAAAAAAAOgQAAAAAAAAAAAAAOgQAAAAAAAA6BAAAAAAAAAUAAAB0b2tJZA",
					"AQAAAAAAAAABAAAANwQAAAAAAAA8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"paste",
					null,
					"AgAAAD0EAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABABAAAAAAAAAUAAAB0b2tJZA",
					"AQAAAAAAAAABAAAAPQQAAAAAAABCBAAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAEMEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABEBAAAAAAAADwAAAAKY29uc3QgdG9rID1sZXhlci50b2tlbjsKICAgICAgICAgY29uc29sZS5sb2coJ3RvaycsIHRvayk7ICA",
					"AQAAAAAAAAABAAAAQwQAAAAAAAB/BAAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGEEAAAAAAAAYgQAAAAAAAAAAAAAYgQAAAAAAABiBAAAAAAAACkAAAAKICAgIGNvbnNvbGUubG9nKCd0b2snLCAgeyBsb2MsIHR5cGUgfSk7Cg",
					"AQAAAAAAAAABAAAAYQQAAAAAAACKBAAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnCAAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZXNjYXBlLCBleHRlbmRBcnJheSB9IGZyb20gJ3V0aWwnOwoKZXh0ZW5kQXJyYXkoKTsKCmNvbnN0IE5vbldTID0gdCA9PiB0LnR5cGUgIT0gJ3doaXRlc3BhY2UnOwpjb25zdCBXUyA9IHQgPT4gdC50eXBlID09ICd3aGl0ZXNwYWNlJzsKCmZ1bmN0aW9uIHBhcnNlKGxleGVyLCBmbiA9ICh0b2ssIGFycikgPT4ge30sIC4uLmFyZ3MpIHsKICBsZXQgdG9rLAogICAgYXJyID0gWy4uLmFyZ3NdOwoKICB3aGlsZSgodG9rID0gbGV4ZXIubmV4dE9iaigpKSkgewogICAgbGV0IHYgPSBmbih0b2ssIGFycik7CiAgICBpZih2IDwgMCkgYnJlYWs7CiAgICBhcnIucHVzaCh0b2spOwogICAgaWYodikgYnJlYWs7CiAgfQogIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3RkZXJyLCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIG1heFN0cmluZ0xlbmd0aDogMTAwLAogICAgICBtYXhBcnJheUxlbmd0aDogSW5maW5pdHksCiAgICAgIGNvbXBhY3Q6IGZhbHNlCiAgICB9CiAgfSk7CgogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGNvbnNvbGUubG9nKCdhcmcnLCBhcmcpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoYXJnKTsKICAgIGNvbnNvbGUubG9nKCdzdHInLCBlc2NhcGUoc3RyKS5zdWJzdHJpbmcoMCwgMTAwKSk7CgogICAgbGV0IGxleGVyID0gbmV3IENMZXhlcihzdHIsIGFyZyk7CiAgICBjb25zb2xlLmxvZygnbGV4ZXInLCBsZXhlcik7CiAgICBsZXQgdG9rOwoKICAgIHdoaWxlKCh0b2sgPSBsZXhlci5uZXh0VG9rZW4oKSkpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2snLCB0b2spOwogIAogY29uc3QgeyBsb2MsIHR5cGUgfSA9IHRvazsgCgogICAgICBpZih7IHN0cnVjdDogMSwgdHlwZWRlZjogMSB9W3R5cGVdKSB7CiAgICAgICAgaWYobG9jLmNvbHVtbiA9PSAxKSB7CiAgICAgICAgICBsZXQgc2VxLAogICAgICAgICAgICBsaW5lID0gbG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKCiAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiBsb2MubGluZSAhPSBsaW5lICYmIC0xLCB0b2spOwogICAgICAgICAgY29uc3QgbGFzdCA9IHNlcS5maWx0ZXIoTm9uV1MpLmF0KC0xKTsKCiAgICAgICAgICAvLyAgICAgICAgICBjb25zb2xlLmxvZyhgbGluZSAke2xvY30gbGFzdDpgLCBsYXN0KTsKCiAgICAgICAgICBpZihsYXN0LnR5cGUgPT0gJ2xicmFjZScpIHsKICAgICAgICAgICAgc2VxID0gcGFyc2UobGV4ZXIsICh0b2ssIGFycikgPT4gbG9jLmNvbHVtbiA9PSAxICYmIHR5cGUgPT0gJ3JicmFjZScsIC4uLnNlcSk7CiAgICAgICAgICAgIHNlcSA9IHBhcnNlKGxleGVyLCAodG9rLCBhcnIpID0+IHR5cGUgPT0gJ3NlbWknLCAuLi5zZXEpOwogICAgICAgICAgfQoKICAgICAgICAgIHN0ZC5wdXRzKAogICAgICAgICAgICBzZXEKICAgICAgICAgICAgICAuZmlsdGVyKHQgPT4gIXQudHlwZS5lbmRzV2l0aCgnQ29tbWVudCcpKQogICAgICAgICAgICAgIC5tYXAodCA9PiB0LmxleGVtZSkKICAgICAgICAgICAgICAuam9pbignJykKICAgICAgICAgICAgICAudHJpbSgpICsgJ1xuXG4nCiAgICAgICAgICApOwoKICAgICAgICAgIC8qCiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2snLCB0b2ssIGxvYyArICcnLCB7IGxpbmUgfSk7CiAgICAgICAgICAgIHRleHQgKz0gdG9rLmxleGVtZTsKICAgICAgICAgICAgdG9rID0gbGV4ZXIubmV4dE9iaigpOwogICAgICAgICAgfSB3aGlsZShsb2MubGluZSA9PSBsaW5lKTsKKi8KICAgICAgICB9CiAgICAgIH0KICAgIH0KICB9Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgAAAAAAAAAApQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AMAAAAAAADYAwAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					1,
					"left_delete",
					null,
					"AQAAAMwBAAAAAAAAzAEAAAAAAAADAAAAT2Jq",
					"AQAAAAAAAAABAAAAzAEAAAAAAADPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAMwBAAAAAAAAzQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					323,
					2,
					"left_delete",
					null,
					"AgAAAMwBAAAAAAAAzAEAAAAAAAABAAAAdMsBAAAAAAAAywEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAzQEAAAAAAADNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "tToken"
					},
					"BgAAAMsBAAAAAAAAzAEAAAAAAAAAAAAAzAEAAAAAAADNAQAAAAAAAAAAAADNAQAAAAAAAM4BAAAAAAAAAAAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAywEAAAAAAADLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHEFAAAAAAAAcgUAAAAAAAAAAAAAcgUAAAAAAAByBQAAAAAAABIAAAAgICAgICAgICAgLy8gICAgICA",
					"AQAAAAAAAAABAAAAgwUAAAAAAABxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"paste",
					null,
					"AQAAAJAEAAAAAAAAvQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAQAAAAAAACQBAAAAAAAAAAAAAAAAAAA"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALwEAAAAAAAAvQQAAAAAAAAAAAAAvQQAAAAAAADCBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAQAAAAAAAC8BAAAAAAAAAAAAAAAwHhA"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "typoe"
					},
					"BwAAAK4EAAAAAAAArwQAAAAAAAAAAAAArwQAAAAAAACvBAAAAAAAAAQAAABsYXN0ugQAAAAAAAC6BAAAAAAAAAUAAAAgICAgIK8EAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAACxBAAAAAAAAAAAAACxBAAAAAAAALIEAAAAAAAAAAAAALIEAAAAAAAAswQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgQAAAAAAACyBAAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					2,
					"left_delete",
					null,
					"AgAAALIEAAAAAAAAsgQAAAAAAAABAAAAZbEEAAAAAAAAsQQAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAswQAAAAAAACzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAALEEAAAAAAAAsgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQQAAAAAAACxBAAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"paste",
					null,
					"AgAAALYEAAAAAAAAugQAAAAAAAAAAAAAugQAAAAAAAC6BAAAAAAAAAQAAABsYXN0",
					"AQAAAAAAAAABAAAAtgQAAAAAAAC6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"cut",
					null,
					"AQAAAJAEAAAAAAAAkAQAAAAAAAAtAAAAICAgICBjb25zb2xlLmxvZyhgbGluZSAke2xvY30gdHlwZTpgLCB0eXBlKTsK",
					"AQAAAAAAAAABAAAAkAQAAAAAAAC9BAAAAAAAAAAAAAAAAAAA"
				],
				[
					397,
					1,
					"paste",
					null,
					"AQAAAK8EAAAAAAAA3AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwQAAAAAAACvBAAAAAAAAAAAAAAAAAAA"
				],
				[
					400,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANwEAAAAAAAA3QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AQAAAAAAADcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"cut",
					null,
					"AQAAAKAFAAAAAAAAoAUAAAAAAAAtAAAAICAgICBjb25zb2xlLmxvZyhgbGluZSAke2xvY30gbGFzdDpgLCBsYXN0KTsK",
					"AQAAAAAAAAABAAAAoAUAAAAAAADNBQAAAAAAAAAAAAAAAAAA"
				],
				[
					404,
					1,
					"paste",
					null,
					"AQAAAKAFAAAAAAAAzQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAUAAAAAAACgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					406,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACUFAAAAAAAAJgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQUAAAAAAAAlBQAAAAAAAAAAAAAAAAAA"
				],
				[
					408,
					1,
					"paste",
					null,
					"AQAAACUFAAAAAAAAUgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQUAAAAAAAAlBQAAAAAAAAAAAAAAAAAA"
				],
				[
					427,
					1,
					"insert",
					{
						"characters": " #"
					},
					"AgAAADwFAAAAAAAAPQUAAAAAAAAAAAAAPQUAAAAAAAA+BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAUAAAAAAAA8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					2,
					"left_delete",
					null,
					"AgAAAD0FAAAAAAAAPQUAAAAAAAABAAAAIzwFAAAAAAAAPAUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAPgUAAAAAAAA+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAADwFAAAAAAAAPQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAUAAAAAAAA8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"paste",
					null,
					"AQAAAD8FAAAAAAAAQwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwUAAAAAAAA/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					3,
					"right_delete",
					null,
					"AwAAAEMFAAAAAAAAQwUAAAAAAAABAAAAbEMFAAAAAAAAQwUAAAAAAAABAAAAb0MFAAAAAAAAQwUAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAQwUAAAAAAABDBQAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"insert_snippet",
					{
						"contents": "`${0:$SELECTION}`"
					},
					"AgAAAEQFAAAAAAAARAUAAAAAAAANAAAAIGxhc3Q6YCwgbGFzdEQFAAAAAAAAUwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAUAAAAAAABRBQAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					2,
					"right_delete",
					null,
					"AgAAAEUFAAAAAAAARQUAAAAAAAANAAAAIGxhc3Q6YCwgbGFzdEUFAAAAAAAARQUAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAARQUAAAAAAABSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJEFAAAAAAAAkgUAAAAAAAAAAAAAkgUAAAAAAACcBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQUAAAAAAACRBQAAAAAAAP///////+9/"
				],
				[
					471,
					1,
					"paste",
					null,
					"AQAAANkBAAAAAAAA9gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QEAAAAAAADZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"paste",
					null,
					"AgAAAOoBAAAAAAAA7QEAAAAAAAAAAAAA7QEAAAAAAADtAQAAAAAAAAMAAABhcmc",
					"AQAAAAAAAAABAAAA6gEAAAAAAADtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"paste",
					null,
					"AgAAAPABAAAAAAAA8wEAAAAAAAAAAAAA8wEAAAAAAADzAQAAAAAAAAMAAABhcmc",
					"AQAAAAAAAAABAAAA8AEAAAAAAADzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					502,
					1,
					"paste",
					null,
					"AgAAAOoBAAAAAAAA7wEAAAAAAAAAAAAA7wEAAAAAAADvAQAAAAAAAAMAAAB0b2s",
					"AQAAAAAAAAABAAAA6gEAAAAAAADtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert_snippet",
					{
						"contents": "{${0:$SELECTION}}"
					},
					"AwAAAPIBAAAAAAAA8gEAAAAAAAADAAAAdG9r8gEAAAAAAAD3AQAAAAAAAAAAAACzBQAAAAAAALMFAAAAAAAACgAAACAgICAgICAgICA",
					"AQAAAAAAAAABAAAA8gEAAAAAAAD1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"paste",
					null,
					"AgAAAPMBAAAAAAAA+AEAAAAAAAAAAAAA+AEAAAAAAAD4AQAAAAAAAAMAAAB0b2s",
					"AQAAAAAAAAABAAAA8wEAAAAAAAD2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					6,
					"left_delete",
					null,
					"BgAAAPgBAAAAAAAA+AEAAAAAAAABAAAAffcBAAAAAAAA9wEAAAAAAAABAAAAZfYBAAAAAAAA9gEAAAAAAAABAAAAc/UBAAAAAAAA9QEAAAAAAAABAAAAcvQBAAAAAAAA9AEAAAAAAAABAAAAYfMBAAAAAAAA8wEAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAA+QEAAAAAAAD5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "tok}"
					},
					"BAAAAPMBAAAAAAAA9AEAAAAAAAAAAAAA9AEAAAAAAAD1AQAAAAAAAAAAAAD1AQAAAAAAAPYBAAAAAAAAAAAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wEAAAAAAADzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gEAAAAAAAD2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": " fn:fn'"
					},
					"BwAAAPcBAAAAAAAA+AEAAAAAAAAAAAAA+AEAAAAAAAD5AQAAAAAAAAAAAAD5AQAAAAAAAPoBAAAAAAAAAAAAAPoBAAAAAAAA+wEAAAAAAAAAAAAA+wEAAAAAAAD8AQAAAAAAAAAAAAD8AQAAAAAAAP0BAAAAAAAAAAAAAP0BAAAAAAAA/gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wEAAAAAAAD3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"left_delete",
					null,
					"AQAAAP0BAAAAAAAA/QEAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAA/gEAAAAAAAD+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAP0BAAAAAAAA/gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QEAAAAAAAD9AQAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAP4BAAAAAAAAAAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gEAAAAAAAD+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": "tok."
					},
					"BAAAAJ8FAAAAAAAAoAUAAAAAAAAAAAAAoAUAAAAAAAChBQAAAAAAAAAAAAChBQAAAAAAAKIFAAAAAAAAAAAAAKIFAAAAAAAAowUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwUAAAAAAACfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": "\nstd.exit"
					},
					"CgAAACAGAAAAAAAAIQYAAAAAAAAAAAAAIQYAAAAAAAAmBgAAAAAAAAAAAAAmBgAAAAAAACcGAAAAAAAAAAAAACcGAAAAAAAAKAYAAAAAAAAAAAAAKAYAAAAAAAApBgAAAAAAAAAAAAApBgAAAAAAACoGAAAAAAAAAAAAACoGAAAAAAAAKwYAAAAAAAAAAAAAKwYAAAAAAAAsBgAAAAAAAAAAAAAsBgAAAAAAAC0GAAAAAAAAAAAAAC0GAAAAAAAALgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAgBgAAAAAAAAAAAAAAcHpA"
				],
				[
					573,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC4GAAAAAAAAMAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgYAAAAAAAAuBgAAAAAAAAAAAAAAAPC/"
				],
				[
					575,
					1,
					"left_delete",
					null,
					"AQAAAC8GAAAAAAAALwYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAMAYAAAAAAAAwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					576,
					1,
					"insert",
					{
						"characters": "0);"
					},
					"AwAAAC8GAAAAAAAAMAYAAAAAAAAAAAAAMAYAAAAAAAAxBgAAAAAAAAAAAAAxBgAAAAAAADIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwYAAAAAAAAvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					588,
					1,
					"paste",
					null,
					"AQAAAIcGAAAAAAAAiwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwYAAAAAAACHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACYGAAAAAAAAJwYAAAAAAAAAAAAAJwYAAAAAAAAoBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgYAAAAAAAAmBgAAAAAAAAAAAAAAgEZA"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA3gEAAAAAAADfAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					2,
					"left_delete",
					null,
					"AgAAAN4BAAAAAAAA3gEAAAAAAAABAAAAL90BAAAAAAAA3QEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA3wEAAAAAAADfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					620,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAAJgBAAAAAAAAmQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					621,
					1,
					"left_delete",
					null,
					"AQAAAJgBAAAAAAAAmAEAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAJgBAAAAAAAAmQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					1,
					"left_delete",
					null,
					"AQAAAJgBAAAAAAAAmAEAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": "i,"
					},
					"AgAAAJgBAAAAAAAAmQEAAAAAAAAAAAAAmQEAAAAAAACaAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"left_delete",
					null,
					"AQAAAJkBAAAAAAAAmQEAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": "=,"
					},
					"AgAAAJkBAAAAAAAAmgEAAAAAAAAAAAAAmgEAAAAAAACbAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					627,
					1,
					"left_delete",
					null,
					"AQAAAJoBAAAAAAAAmgEAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "0;"
					},
					"AgAAAJoBAAAAAAAAmwEAAAAAAAAAAAAAmwEAAAAAAACcAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					1,
					"left_delete",
					null,
					"AQAAAJsBAAAAAAAAmwEAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					630,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAJsBAAAAAAAAnAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwEAAAAAAACbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					637,
					1,
					"insert",
					{
						"characters": "ki"
					},
					"AgAAAPcBAAAAAAAA+AEAAAAAAAAAAAAA+AEAAAAAAAD5AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wEAAAAAAAD3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					2,
					"left_delete",
					null,
					"AgAAAPgBAAAAAAAA+AEAAAAAAAABAAAAafcBAAAAAAAA9wEAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAA+QEAAAAAAAD5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAAPcBAAAAAAAA+AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wEAAAAAAAD3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"left_delete",
					null,
					"AQAAAPcBAAAAAAAA9wEAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAA+AEAAAAAAAD4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					1,
					"insert",
					{
						"characters": "i:"
					},
					"AgAAAPcBAAAAAAAA+AEAAAAAAAAAAAAA+AEAAAAAAAD5AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wEAAAAAAAD3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					642,
					1,
					"insert",
					{
						"characters": " i++,"
					},
					"BQAAAPkBAAAAAAAA+gEAAAAAAAAAAAAA+gEAAAAAAAD7AQAAAAAAAAAAAAD7AQAAAAAAAPwBAAAAAAAAAAAAAPwBAAAAAAAA/QEAAAAAAAAAAAAA/QEAAAAAAAD+AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QEAAAAAAAD5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					643,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAP4BAAAAAAAA/wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gEAAAAAAAD+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": "tok√∂."
					},
					"BQAAAKwGAAAAAAAArQYAAAAAAAAAAAAArQYAAAAAAACuBgAAAAAAAAAAAACuBgAAAAAAAK8GAAAAAAAAAAAAAK8GAAAAAAAAsAYAAAAAAAAAAAAAsAYAAAAAAACxBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAYAAAAAAACsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					2,
					"left_delete",
					null,
					"AgAAALAGAAAAAAAAsAYAAAAAAAABAAAALq8GAAAAAAAArwYAAAAAAAACAAAAw7Y",
					"AQAAAAAAAAABAAAAsQYAAAAAAACxBgAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAK8GAAAAAAAAsAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwYAAAAAAACvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					1,
					"paste",
					null,
					"AQAAAPgGAAAAAAAA/AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AYAAAAAAAD4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					669,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFCQAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZXNjYXBlLCBleHRlbmRBcnJheSB9IGZyb20gJ3V0aWwnOwoKZXh0ZW5kQXJyYXkoKTsKCmNvbnN0IE5vbldTID0gdCA9PiB0LnR5cGUgIT0gJ3doaXRlc3BhY2UnOwpjb25zdCBXUyA9IHQgPT4gdC50eXBlID09ICd3aGl0ZXNwYWNlJzsKCmZ1bmN0aW9uIHBhcnNlKGxleGVyLCBmbiA9ICh0b2ssIGFycikgPT4ge30sIC4uLmFyZ3MpIHsKICBsZXQgaT0wLHRvaywKICAgIGFyciA9IFsuLi5hcmdzXTsKCiAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgIGNvbnNvbGUubG9nKCdwYXJzZScsIHtpOiBpKyssIHRvaywgZm46Zm4rJyd9KTsKICAgbGV0IHYgPSBmbih0b2ssIGFycik7CiAgICBpZih2IDwgMCkgYnJlYWs7CiAgICBhcnIucHVzaCh0b2spOwogICAgaWYodikgYnJlYWs7CiAgfQogIHJldHVybiBhcnI7Cn0KCmZ1bmN0aW9uIG1haW4oLi4uYXJncykgewogIGdsb2JhbFRoaXMuY29uc29sZSA9IG5ldyBDb25zb2xlKHByb2Nlc3Muc3RkZXJyLCB7CiAgICBpbnNwZWN0T3B0aW9uczogewogICAgICBjb2xvcnM6IHRydWUsCiAgICAgIG1heFN0cmluZ0xlbmd0aDogMTAwLAogICAgICBtYXhBcnJheUxlbmd0aDogSW5maW5pdHksCiAgICAgIGNvbXBhY3Q6IGZhbHNlCiAgICB9CiAgfSk7CgogIGZvcihsZXQgYXJnIG9mIGFyZ3MpIHsKICAgIGNvbnNvbGUubG9nKCdhcmcnLCBhcmcpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoYXJnKTsKICAgIGNvbnNvbGUubG9nKCdzdHInLCBlc2NhcGUoc3RyKS5zdWJzdHJpbmcoMCwgMTAwKSk7CgogICAgbGV0IGxleGVyID0gbmV3IENMZXhlcihzdHIsIGFyZyk7CiAgICBjb25zb2xlLmxvZygnbGV4ZXInLCBsZXhlcik7CiAgICBsZXQgdG9rOwoKICAgIHdoaWxlKCh0b2sgPSBsZXhlci5uZXh0VG9rZW4oKSkpIHsKICAgICAgY29uc29sZS5sb2coJ3RvaycsIHRvayk7CgogICAgICBjb25zdCB7IGxvYywgdHlwZSB9ID0gdG9rOwoKICAgICAgaWYoeyBzdHJ1Y3Q6IDEsIHR5cGVkZWY6IDEgfVt0eXBlXSkgewoKICAgICAgICBpZihsb2MuY29sdW1uID09IDEpIHsKICAgICBjb25zb2xlLmxvZyhgbGluZSAke2xvY30gdHlwZTpgLCB0eXBlKTsKCiAgICAgICAgICBsZXQgc2VxLAogICAgICAgICAgICBsaW5lID0gbG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKCiAgICAgY29uc29sZS5sb2coYGxpbmUgIyR7bGluZX1gKTsKCiAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmxpbmUgIT0gbGluZSAmJiAtMSwgdG9rKTsKCiAgICAgICAgICBjb25zdCBsYXN0ID0gc2VxLmZpbHRlcihOb25XUykuYXQoLTEpOwoKICAgICBjb25zb2xlLmxvZyhgbGluZSAke2xvY30gbGFzdDpgLCBsYXN0KTsKICAgICAvL3N0ZC5leGl0KDApOwoKICAgICAgICAgIGlmKGxhc3QudHlwZSA9PSAnbGJyYWNlJykgewogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmNvbHVtbiA9PSAxICYmIHRvay50eXBlID09ICdyYnJhY2UnLCAuLi5zZXEpOwogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2sudHlwZSA9PSAnc2VtaScsIC4uLnNlcSk7CiAgICAgICAgICB9CgogICAgICAgICAgc3RkLnB1dHMoCiAgICAgICAgICAgIHNlcQogICAgICAgICAgICAgIC5maWx0ZXIodCA9PiAhdC50eXBlLmVuZHNXaXRoKCdDb21tZW50JykpCiAgICAgICAgICAgICAgLm1hcCh0ID0+IHQubGV4ZW1lKQogICAgICAgICAgICAgIC5qb2luKCcnKQogICAgICAgICAgICAgIC50cmltKCkgKyAnXG5cbicKICAgICAgICAgICk7CgogICAgICAgICAgLyoKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3RvaycsIHRvaywgbG9jICsgJycsIHsgbGluZSB9KTsKICAgICAgICAgICAgdGV4dCArPSB0b2subGV4ZW1lOwogICAgICAgICAgICB0b2sgPSBsZXhlci5uZXh0T2JqKCk7CiAgICAgICAgICB9IHdoaWxlKGxvYy5saW5lID09IGxpbmUpOwoqLwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7CiAgc3RkLmV4aXQoMSk7Cn0KAAAAAAAAAABkCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AYAAAAAAAD8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGoEAAAAAAAAbAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagQAAAAAAABqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAGsEAAAAAAAAbAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawQAAAAAAABrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					680,
					1,
					"left_delete",
					null,
					"AQAAAGsEAAAAAAAAawQAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAbAQAAAAAAABsBAAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAGoEAAAAAAAAagQAAAAAAAABAAAAKGoEAAAAAAAAagQAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAawQAAAAAAABrBAAAAAAAAAAAAAAAAPC/"
				],
				[
					682,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAGoEAAAAAAAAawQAAAAAAAAAAAAAawQAAAAAAABsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagQAAAAAAABqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					696,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAOcBAAAAAAAA6AEAAAAAAAAAAAAA6AEAAAAAAADpAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wEAAAAAAADnAQAAAAAAAAAAAAAAAPC/"
				],
				[
					703,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAFkDAAAAAAAAWgMAAAAAAAAAAAAAWgMAAAAAAABcAwAAAAAAAAAAAABcAwAAAAAAAF0DAAAAAAAAAAAAAF0DAAAAAAAAXwMAAAAAAAAAAAAAWgMAAAAAAABaAwAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAWQMAAAAAAABZAwAAAAAAAAAAAAAAAPC/"
				],
				[
					704,
					1,
					"paste",
					null,
					"AQAAAF0DAAAAAAAAzAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQMAAAAAAABdAwAAAAAAAAAAAAAAAPC/"
				],
				[
					720,
					1,
					"insert",
					{
						"characters": " "
					},
					"AwAAAHwDAAAAAAAAfQMAAAAAAAAAAAAAfQMAAAAAAAB9AwAAAAAAACoAAAAgICAgICBkZWJ1ZzogW2ZhbHNlLCAoKSA9PiArK2RlYnVnLCAneCddLApbAwAAAAAAAFsDAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAfAMAAAAAAACmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					723,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAHsDAAAAAAAAfAMAAAAAAAAAAAAAfAMAAAAAAAB8AwAAAAAAACoBAAAgICAgICBsb2c6IFt0cnVlLCBmaWxlID0+IChsb2dGaWxlID0gRmlsZVdyaXRlcihmaWxlKSksICdsJ10sCiAgICAgIHNvcnQ6IFtmYWxzZSwgbnVsbCwgJ3MnXSwKICAgICAgJ2Nhc2Utc2Vuc2l0aXZlJzogW2ZhbHNlLCBudWxsLCAnYyddLAogICAgICBxdWlldDogW2ZhbHNlLCBudWxsLCAncSddLAogICAgICBleHBvcnQ6IFtmYWxzZSwgKCkgPT4gKGV4cCA9IHRydWUpLCAnZSddLAogICAgICAncmVsYXRpdmUtdG8nOiBbdHJ1ZSwgYXJnID0+IChyZWxhdGl2ZVRvID0gcGF0aC5hYnNvbHV0ZShhcmcpKSwgJ3InXSwKICAg",
					"AQAAAAAAAAABAAAApQQAAAAAAAB7AwAAAAAAAAAAAAAAAPC/"
				],
				[
					726,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAALUDAAAAAAAAtgMAAAAAAAAAAAAAtgMAAAAAAAC2AwAAAAAAAIABAAAgICduby1yZWN1cnNpdmUnOiBbZmFsc2UsICgpID0+IChyZWN1cnNpdmUgPSBmYWxzZSksICdSJ10sCiAgICAgICdyZW1vdmUtZXhwb3J0cyc6IFtmYWxzZSwgKCkgPT4gKHJlbW92ZUV4cG9ydHMgPSB0cnVlKSwgJ0UnXSwKICAgICAgJ3JlbW92ZS1pbXBvcnRzJzogW2ZhbHNlLCAoKSA9PiAocmVtb3ZlSW1wb3J0cyA9IHRydWUpLCAnSSddLAogICAgICAncmVtb3ZlLWNvbW1lbnRzJzogW2ZhbHNlLCAoKSA9PiAocmVtb3ZlQ29tbWVudHMgPSB0cnVlKSwgJ0MnXSwKICAgICAgJ2dsb2JhbC1leHBvcnRzJzogW2ZhbHNlLCAoKSA9PiArK2dsb2JhbEV4cG9ydHMsICdHJ10sCiAgICAgICdzaG93LWRlcGVuZGVuY2llcyc6IFtmYWxzZSwgKCkgPT4gKytzaG93RGVwcywgJ2QnXSw",
					"AQAAAAAAAAABAAAAtQMAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					730,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAFwDAAAAAAAAXQMAAAAAAAAAAAAAXQMAAAAAAABeAwAAAAAAAAAAAABeAwAAAAAAAF8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAMAAAAAAABcAwAAAAAAAAAAAAAAAAAA"
				],
				[
					731,
					1,
					"insert",
					{
						"characters": " output;"
					},
					"CAAAAF8DAAAAAAAAYAMAAAAAAAAAAAAAYAMAAAAAAABhAwAAAAAAAAAAAABhAwAAAAAAAGIDAAAAAAAAAAAAAGIDAAAAAAAAYwMAAAAAAAAAAAAAYwMAAAAAAABkAwAAAAAAAAAAAABkAwAAAAAAAGUDAAAAAAAAAAAAAGUDAAAAAAAAZgMAAAAAAAAAAAAAZgMAAAAAAABnAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwMAAAAAAABfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					740,
					1,
					"insert",
					{
						"characters": "File"
					},
					"BAAAAGYDAAAAAAAAZwMAAAAAAAAAAAAAZwMAAAAAAABoAwAAAAAAAAAAAABoAwAAAAAAAGkDAAAAAAAAAAAAAGkDAAAAAAAAagMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgMAAAAAAABmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					743,
					1,
					"left_delete",
					null,
					"AQAAAFoDAAAAAAAAWgMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAWwMAAAAAAABbAwAAAAAAAAAAAAAA4GBA"
				],
				[
					745,
					1,
					"left_delete",
					null,
					"AQAAAL4DAAAAAAAAvgMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAvwMAAAAAAAC/AwAAAAAAAAAAAAAAAAAA"
				],
				[
					759,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACMIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAlCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwgAAAAAAAAjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					766,
					4,
					"left_delete",
					null,
					"BAAAAGgDAAAAAAAAaAMAAAAAAAABAAAAZWcDAAAAAAAAZwMAAAAAAAABAAAAbGYDAAAAAAAAZgMAAAAAAAABAAAAaWUDAAAAAAAAZQMAAAAAAAABAAAARg",
					"AQAAAAAAAAABAAAAaQMAAAAAAABpAwAAAAAAAAAAAAAAAPC/"
				],
				[
					767,
					1,
					"insert",
					{
						"characters": ")="
					},
					"AgAAAGUDAAAAAAAAZgMAAAAAAAAAAAAAZgMAAAAAAABnAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQMAAAAAAABlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					768,
					2,
					"left_delete",
					null,
					"AgAAAGYDAAAAAAAAZgMAAAAAAAABAAAAPWUDAAAAAAAAZQMAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAZwMAAAAAAABnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					769,
					1,
					"insert",
					{
						"characters": "=std.out"
					},
					"CAAAAGUDAAAAAAAAZgMAAAAAAAAAAAAAZgMAAAAAAABnAwAAAAAAAAAAAABnAwAAAAAAAGgDAAAAAAAAAAAAAGgDAAAAAAAAaQMAAAAAAAAAAAAAaQMAAAAAAABqAwAAAAAAAAAAAABqAwAAAAAAAGsDAAAAAAAAAAAAAGsDAAAAAAAAbAMAAAAAAAAAAAAAbAMAAAAAAABtAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQMAAAAAAABlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					780,
					1,
					"insert",
					{
						"characters": "output"
					},
					"BwAAAKkDAAAAAAAAqgMAAAAAAAAAAAAAqgMAAAAAAACqAwAAAAAAAAoAAABvdXRwdXRGaWxlqgMAAAAAAACrAwAAAAAAAAAAAACrAwAAAAAAAKwDAAAAAAAAAAAAAKwDAAAAAAAArQMAAAAAAAAAAAAArQMAAAAAAACuAwAAAAAAAAAAAACuAwAAAAAAAK8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQMAAAAAAACzAwAAAAAAAAAAAAAAAPC/"
				],
				[
					782,
					1,
					"insert",
					{
						"characters": "std.open("
					},
					"CQAAALIDAAAAAAAAswMAAAAAAAAAAAAAswMAAAAAAAC0AwAAAAAAAAAAAAC0AwAAAAAAALUDAAAAAAAAAAAAALUDAAAAAAAAtgMAAAAAAAAAAAAAtgMAAAAAAAC3AwAAAAAAAAAAAAC3AwAAAAAAALgDAAAAAAAAAAAAALgDAAAAAAAAuQMAAAAAAAAAAAAAuQMAAAAAAAC6AwAAAAAAAAAAAAC6AwAAAAAAALsDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgMAAAAAAACyAwAAAAAAAAAAAAAAAPC/"
				],
				[
					784,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAL8DAAAAAAAAwAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwMAAAAAAAC/AwAAAAAAAAAAAAAAAPC/"
				],
				[
					785,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMADAAAAAAAAwQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAMAAAAAAADAAwAAAAAAAAAAAAAAAPC/"
				],
				[
					786,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAMEDAAAAAAAAwwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQMAAAAAAADBAwAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"insert",
					{
						"characters": "rb"
					},
					"AgAAAMIDAAAAAAAAwwMAAAAAAAAAAAAAwwMAAAAAAADEAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgMAAAAAAADCAwAAAAAAAAAAAAAAAPC/"
				],
				[
					789,
					4,
					"left_delete",
					null,
					"BAAAAMUDAAAAAAAAxQMAAAAAAAABAAAAKcQDAAAAAAAAxAMAAAAAAAABAAAAJ8MDAAAAAAAAwwMAAAAAAAABAAAAYsIDAAAAAAAAwgMAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAxgMAAAAAAADGAwAAAAAAAAAAAAAAAPC/"
				],
				[
					790,
					1,
					"insert",
					{
						"characters": "w+')"
					},
					"BAAAAMIDAAAAAAAAwwMAAAAAAAAAAAAAwwMAAAAAAADEAwAAAAAAAAAAAADEAwAAAAAAAMUDAAAAAAAAAAAAAMUDAAAAAAAAxgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgMAAAAAAADCAwAAAAAAAAAAAAAAAPC/"
				],
				[
					794,
					1,
					"left_delete",
					null,
					"AQAAAKgDAAAAAAAAqAMAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAqQMAAAAAAACpAwAAAAAAAAAAAAAAAPC/"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": "output"
					},
					"BwAAAAoIAAAAAAAACwgAAAAAAAAAAAAACwgAAAAAAAALCAAAAAAAAAMAAABzdGQLCAAAAAAAAAwIAAAAAAAAAAAAAAwIAAAAAAAADQgAAAAAAAAAAAAADQgAAAAAAAAOCAAAAAAAAAAAAAAOCAAAAAAAAA8IAAAAAAAAAAAAAA8IAAAAAAAAEAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACggAAAAAAAANCAAAAAAAAAAAAAAAAPC/"
				],
				[
					813,
					1,
					"insert",
					{
						"characters": "\n\noutput.flush"
					},
					"EQAAAJkJAAAAAAAAmgkAAAAAAAAAAAAAmgkAAAAAAACgCQAAAAAAAAAAAACgCQAAAAAAAKEJAAAAAAAAAAAAAKEJAAAAAAAApwkAAAAAAAAAAAAAmgkAAAAAAACaCQAAAAAAAAYAAAAgICAgICChCQAAAAAAAKIJAAAAAAAAAAAAAKIJAAAAAAAAowkAAAAAAAAAAAAAowkAAAAAAACkCQAAAAAAAAAAAACkCQAAAAAAAKUJAAAAAAAAAAAAAKUJAAAAAAAApgkAAAAAAAAAAAAApgkAAAAAAACnCQAAAAAAAAAAAACnCQAAAAAAAKgJAAAAAAAAAAAAAKgJAAAAAAAAqQkAAAAAAAAAAAAAqQkAAAAAAACqCQAAAAAAAAAAAACqCQAAAAAAAKsJAAAAAAAAAAAAAKsJAAAAAAAArAkAAAAAAAAAAAAArAkAAAAAAACtCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					814,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK0JAAAAAAAArwkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQkAAAAAAACtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					816,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAK8JAAAAAAAAsAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwkAAAAAAACvCQAAAAAAAAAAAAAAAPC/"
				],
				[
					821,
					1,
					"insert",
					{
						"characters": "getOpt,"
					},
					"BwAAANIAAAAAAAAA0wAAAAAAAAAAAAAA0wAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANUAAAAAAAAAAAAAANUAAAAAAAAA1gAAAAAAAAAAAAAA1gAAAAAAAADXAAAAAAAAAAAAAADXAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA2QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gAAAAAAAADSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					822,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANkAAAAAAAAA2gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": "files"
					},
					"BgAAAC8EAAAAAAAAMAQAAAAAAAAAAAAAMAQAAAAAAAAwBAAAAAAAAAQAAABhcmdzMAQAAAAAAAAxBAAAAAAAAAAAAAAxBAAAAAAAADIEAAAAAAAAAAAAADIEAAAAAAAAMwQAAAAAAAAAAAAAMwQAAAAAAAA0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwQAAAAAAAAzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					863,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABICgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZ2V0T3B0LCBlc2NhcGUsIGV4dGVuZEFycmF5IH0gZnJvbSAndXRpbCc7CgpleHRlbmRBcnJheSgpOwoKY29uc3QgTm9uV1MgPSB0ID0+IHQudHlwZSAhPSAnd2hpdGVzcGFjZSc7CmNvbnN0IFdTID0gdCA9PiB0LnR5cGUgPT0gJ3doaXRlc3BhY2UnOwoKZnVuY3Rpb24gcGFyc2UobGV4ZXIsIGZuID0gKHRvaywgYXJyKSA9PiB7fSwgLi4uYXJncykgewogIGxldCBpID0gMCwKICAgIHRvaywKICAgIGFyciA9IFsuLi5hcmdzXTsKCiAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgLy9jb25zb2xlLmxvZygncGFyc2UnLCB7IGk6IGkrKywgdG9rLCBmbjogZm4gKyAnJyB9KTsKICAgIGxldCB2ID0gZm4odG9rLCBhcnIpOwogICAgaWYodiA8IDApIGJyZWFrOwogICAgYXJyLnB1c2godG9rKTsKICAgIGlmKHYpIGJyZWFrOwogIH0KICByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShwcm9jZXNzLnN0ZGVyciwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IDEwMCwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZQogICAgfQogIH0pOwoKbGV0IG91dHB1dD1zdGQub3V0OwogIGxldCBwYXJhbXMgPSBnZXRPcHQoCiAgICB7CiAgICAgb3V0cHV0OiBbdHJ1ZSwgZmlsZSA9PiBvdXRwdXQgPSBzdGQub3BlbihmaWxlLCAndysnKSwgJ28nXSwgICAgIAogICAgICAnQCc6ICdmaWxlcycKICAgIH0sCiAgICBhcmdzCiAgKTsKICBsZXQgZmlsZXMgPSBwYXJhbXNbJ0AnXTsKCiAgZm9yKGxldCBhcmcgb2YgZmlsZXMpIHsKICAgIGNvbnNvbGUubG9nKCdhcmcnLCBhcmcpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoYXJnKTsKICAgIGNvbnNvbGUubG9nKCdzdHInLCBlc2NhcGUoc3RyKS5zdWJzdHJpbmcoMCwgMTAwKSk7CgogICAgbGV0IGxleGVyID0gbmV3IENMZXhlcihzdHIsIGFyZyk7CiAgICBjb25zb2xlLmxvZygnbGV4ZXInLCBsZXhlcik7CiAgICBsZXQgdG9rOwoKICAgIHdoaWxlKCh0b2sgPSBsZXhlci5uZXh0VG9rZW4oKSkpIHsKICAgICAvLyBjb25zb2xlLmxvZygndG9rJywgdG9rKTsKCiAgICAgIGNvbnN0IHsgbG9jLCB0eXBlIH0gPSB0b2s7CgogICAgICBpZih7IHN0cnVjdDogMSwgdHlwZWRlZjogMSB9W3R5cGVdKSB7CiAgICAgICAgaWYobG9jLmNvbHVtbiA9PSAxKSB7CiAgICAgICAgICBjb25zb2xlLmxvZyhgbGluZSAke2xvY30gdHlwZTpgLCB0eXBlKTsKCiAgICAgICAgICBsZXQgc2VxLAogICAgICAgICAgICBsaW5lID0gbG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKCiAgICAgICAgICBjb25zb2xlLmxvZyhgbGluZSAjJHtsaW5lfWApOwoKICAgICAgICAgIHNlcSA9IHBhcnNlKGxleGVyLCAodG9rLCBhcnIpID0+IHRvay5sb2MubGluZSAhPSBsaW5lICYmIC0xLCB0b2spOwoKICAgICAgICAgIGNvbnN0IGxhc3QgPSBzZXEuZmlsdGVyKE5vbldTKS5hdCgtMSk7CgogICAgICAgICAgY29uc29sZS5sb2coYGxpbmUgJHtsb2N9IGxhc3Q6YCwgbGFzdCk7CiAgICAgICAgICAvL3N0ZC5leGl0KDApOwoKICAgICAgICAgIGlmKGxhc3QudHlwZSA9PSAnbGJyYWNlJykgewogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmNvbHVtbiA9PSAxICYmIHRvay50eXBlID09ICdyYnJhY2UnLCAuLi5zZXEpOwogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2sudHlwZSA9PSAnc2VtaScsIC4uLnNlcSk7CiAgICAgICAgICB9CgogICAgICAgICAgb3V0cHV0LnB1dHMoCiAgICAgICAgICAgIHNlcQogICAgICAgICAgICAgLy8gLmZpbHRlcih0ID0+ICF0LnR5cGUuZW5kc1dpdGgoJ0NvbW1lbnQnKSkKICAgICAgICAgICAgICAubWFwKHQgPT4gdC5sZXhlbWUpCiAgICAgICAgICAgICAgLmpvaW4oJycpCiAgICAgICAgICAgICAgLnRyaW0oKSArICdcblxuJwogICAgICAgICAgKTsKCiAgICAgICAgICAvKgogICAgICAgICAgZG8gewogICAgICAgICAgICBjb25zb2xlLmxvZygndG9rJywgdG9rLCBsb2MgKyAnJywgeyBsaW5lIH0pOwogICAgICAgICAgICB0ZXh0ICs9IHRvay5sZXhlbWU7CiAgICAgICAgICAgIHRvayA9IGxleGVyLm5leHRPYmooKTsKICAgICAgICAgIH0gd2hpbGUobG9jLmxpbmUgPT0gbGluZSk7CiovCiAgICAgICAgfQogICAgICB9CgogICAgICBvdXRwdXQuZmx1c2goKTsKICAgIH0KICB9Cn0KCnRyeSB7CiAgbWFpbiguLi5zY3JpcHRBcmdzLnNsaWNlKDEpKTsKfSBjYXRjaChlcnJvcikgewogIGNvbnNvbGUubG9nKGBGQUlMOiAke2Vycm9yLm1lc3NhZ2V9XG4ke2Vycm9yLnN0YWNrfWApOwogIHN0ZC5leGl0KDEpOwp9CgAAAAAAAAAATQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgQAAAAAAAAeBAAAAAAAAAAAAAAAAPC/"
				],
				[
					897,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMgJAAAAAAAAyQkAAAAAAAAAAAAAyQkAAAAAAADLCQAAAAAAAAAAAADLCQAAAAAAAMwJAAAAAAAAAAAAAMwJAAAAAAAAzgkAAAAAAAAAAAAAyQkAAAAAAADJCQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAAyAkAAAAAAADICQAAAAAAAAAAAAAAAPC/"
				],
				[
					898,
					1,
					"paste",
					null,
					"AQAAAMwJAAAAAAAA0gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAkAAAAAAADMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					900,
					1,
					"insert",
					{
						"characters": "oou"
					},
					"AwAAAMwJAAAAAAAAzQkAAAAAAAAAAAAAzQkAAAAAAADOCQAAAAAAAAAAAADOCQAAAAAAAM8JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAkAAAAAAADMCQAAAAAAAAAAAAAAADJA"
				],
				[
					901,
					2,
					"left_delete",
					null,
					"AgAAAM4JAAAAAAAAzgkAAAAAAAABAAAAdc0JAAAAAAAAzQkAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAzwkAAAAAAADPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					902,
					1,
					"insert",
					{
						"characters": "zutpu"
					},
					"BQAAAM0JAAAAAAAAzgkAAAAAAAAAAAAAzgkAAAAAAADPCQAAAAAAAAAAAADPCQAAAAAAANAJAAAAAAAAAAAAANAJAAAAAAAA0QkAAAAAAAAAAAAA0QkAAAAAAADSCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQkAAAAAAADNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					903,
					5,
					"left_delete",
					null,
					"BQAAANEJAAAAAAAA0QkAAAAAAAABAAAAddAJAAAAAAAA0AkAAAAAAAABAAAAcM8JAAAAAAAAzwkAAAAAAAABAAAAdM4JAAAAAAAAzgkAAAAAAAABAAAAdc0JAAAAAAAAzQkAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAA0gkAAAAAAADSCQAAAAAAAAAAAAAAAPC/"
				],
				[
					904,
					1,
					"insert",
					{
						"characters": "utput."
					},
					"BgAAAM0JAAAAAAAAzgkAAAAAAAAAAAAAzgkAAAAAAADPCQAAAAAAAAAAAADPCQAAAAAAANAJAAAAAAAAAAAAANAJAAAAAAAA0QkAAAAAAAAAAAAA0QkAAAAAAADSCQAAAAAAAAAAAADSCQAAAAAAANMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQkAAAAAAADNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					908,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANkJAAAAAAAA2gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QkAAAAAAADZCQAAAAAAAP///////+9/"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAMkJAAAAAAAAygkAAAAAAAAAAAAAygkAAAAAAADLCQAAAAAAAAAAAADLCQAAAAAAAMwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQkAAAAAAADJCQAAAAAAAAAAAAAAAGJA"
				],
				[
					911,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMwJAAAAAAAAzgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAkAAAAAAADMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					1,
					"insert",
					{
						"characters": "output"
					},
					"BgAAAM0JAAAAAAAAzgkAAAAAAAAAAAAAzgkAAAAAAADPCQAAAAAAAAAAAADPCQAAAAAAANAJAAAAAAAAAAAAANAJAAAAAAAA0QkAAAAAAAAAAAAA0QkAAAAAAADSCQAAAAAAAAAAAADSCQAAAAAAANMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQkAAAAAAADNCQAAAAAAAAAAAAAAAPC/"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAANMJAAAAAAAA1AkAAAAAAAAAAAAA1AkAAAAAAADVCQAAAAAAAAAAAADVCQAAAAAAANYJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wkAAAAAAADTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					914,
					1,
					"insert",
					{
						"characters": " std.out"
					},
					"CAAAANYJAAAAAAAA1wkAAAAAAAAAAAAA1wkAAAAAAADYCQAAAAAAAAAAAADYCQAAAAAAANkJAAAAAAAAAAAAANkJAAAAAAAA2gkAAAAAAAAAAAAA2gkAAAAAAADbCQAAAAAAAAAAAADbCQAAAAAAANwJAAAAAAAAAAAAANwJAAAAAAAA3QkAAAAAAAAAAAAA3QkAAAAAAADeCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gkAAAAAAADWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": "\ncn"
					},
					"BAAAAN8JAAAAAAAA4AkAAAAAAAAAAAAA4AkAAAAAAADiCQAAAAAAAAAAAADiCQAAAAAAAOMJAAAAAAAAAAAAAOMJAAAAAAAA5AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wkAAAAAAADfCQAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"left_delete",
					null,
					"AQAAAOMJAAAAAAAA4wkAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA5AkAAAAAAADkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"insert",
					{
						"characters": "onsoe"
					},
					"BQAAAOMJAAAAAAAA5AkAAAAAAAAAAAAA5AkAAAAAAADlCQAAAAAAAAAAAADlCQAAAAAAAOYJAAAAAAAAAAAAAOYJAAAAAAAA5wkAAAAAAAAAAAAA5wkAAAAAAADoCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wkAAAAAAADjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					919,
					1,
					"left_delete",
					null,
					"AQAAAOcJAAAAAAAA5wkAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA6AkAAAAAAADoCQAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"insert",
					{
						"characters": "le.log"
					},
					"BgAAAOcJAAAAAAAA6AkAAAAAAAAAAAAA6AkAAAAAAADpCQAAAAAAAAAAAADpCQAAAAAAAOoJAAAAAAAAAAAAAOoJAAAAAAAA6wkAAAAAAAAAAAAA6wkAAAAAAADsCQAAAAAAAAAAAADsCQAAAAAAAO0JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wkAAAAAAADnCQAAAAAAAAAAAAAAAPC/"
				],
				[
					921,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO0JAAAAAAAA7wkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QkAAAAAAADtCQAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAO4JAAAAAAAA8AkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gkAAAAAAADuCQAAAAAAAAAAAAAAAPC/"
				],
				[
					926,
					4,
					"right_delete",
					null,
					"BAAAAO4JAAAAAAAA7gkAAAAAAAABAAAAJ+4JAAAAAAAA7gkAAAAAAAABAAAAJ+4JAAAAAAAA7gkAAAAAAAABAAAAKe4JAAAAAAAA7gkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA7gkAAAAAAADuCQAAAAAAAAAAAAAAgF9A"
				],
				[
					928,
					1,
					"left_delete",
					null,
					"AQAAAP0JAAAAAAAA/QkAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAA/gkAAAAAAAD+CQAAAAAAAP///////+9/"
				],
				[
					929,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QkAAAAAAAD9CQAAAAAAAAAAAAAAAPC/"
				],
				[
					930,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAP4JAAAAAAAAAAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gkAAAAAAAD+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					931,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAP8JAAAAAAAAAAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wkAAAAAAAD/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					932,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAAKAAAAAAAAAQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAPC/"
				],
				[
					933,
					2,
					"left_delete",
					null,
					"AgAAAAAKAAAAAAAAAAoAAAAAAAABAAAAIP8JAAAAAAAA/wkAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAAQoAAAAAAAABCgAAAAAAAAAAAAAAAPC/"
				],
				[
					934,
					1,
					"insert",
					{
						"characters": " byt"
					},
					"BAAAAP8JAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAABCgAAAAAAAAAAAAABCgAAAAAAAAIKAAAAAAAAAAAAAAIKAAAAAAAAAwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wkAAAAAAAD/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					935,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAMKAAAAAAAABAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwoAAAAAAAADCgAAAAAAAAAAAAAAAPC/"
				],
				[
					936,
					1,
					"left_delete",
					null,
					"AQAAAAMKAAAAAAAAAwoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAABAoAAAAAAAAECgAAAAAAAAAAAAAAAPC/"
				],
				[
					937,
					1,
					"insert",
					{
						"characters": "es"
					},
					"AgAAAAMKAAAAAAAABAoAAAAAAAAAAAAABAoAAAAAAAAFCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwoAAAAAAAADCgAAAAAAAAAAAAAAAPC/"
				],
				[
					938,
					1,
					"insert",
					{
						"characters": " written."
					},
					"CQAAAAUKAAAAAAAABgoAAAAAAAAAAAAABgoAAAAAAAAHCgAAAAAAAAAAAAAHCgAAAAAAAAgKAAAAAAAAAAAAAAgKAAAAAAAACQoAAAAAAAAAAAAACQoAAAAAAAAKCgAAAAAAAAAAAAAKCgAAAAAAAAsKAAAAAAAAAAAAAAsKAAAAAAAADAoAAAAAAAAAAAAADAoAAAAAAAANCgAAAAAAAAAAAAANCgAAAAAAAA4KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQoAAAAAAAAFCgAAAAAAAAAAAAAAAPC/"
				],
				[
					940,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAA8KAAAAAAAAEAoAAAAAAAAAAAAAEAoAAAAAAAARCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwoAAAAAAAAPCgAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"left_delete",
					null,
					"AQAAAA0KAAAAAAAADQoAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAADgoAAAAAAAAOCgAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAA0KAAAAAAAADgoAAAAAAAAAAAAADgoAAAAAAAAPCgAAAAAAAAAAAAAPCgAAAAAAABAKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQoAAAAAAAANCgAAAAAAAAAAAAAAAPC/"
				],
				[
					951,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABAKAAAAAAAAEQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAoAAAAAAAAQCgAAAAAAAAAAAAAAAPC/"
				],
				[
					953,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAABIKAAAAAAAAEwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgoAAAAAAAASCgAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"insert",
					{
						"characters": "fs."
					},
					"AwAAABMKAAAAAAAAFAoAAAAAAAAAAAAAFAoAAAAAAAAVCgAAAAAAAAAAAAAVCgAAAAAAABYKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwoAAAAAAAATCgAAAAAAAAAAAAAAAPC/"
				],
				[
					956,
					1,
					"paste",
					null,
					"AQAAABYKAAAAAAAAHgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgoAAAAAAAAWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					957,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB4KAAAAAAAAIAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgoAAAAAAAAeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					958,
					1,
					"insert",
					{
						"characters": "output"
					},
					"BgAAAB8KAAAAAAAAIAoAAAAAAAAAAAAAIAoAAAAAAAAhCgAAAAAAAAAAAAAhCgAAAAAAACIKAAAAAAAAAAAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAAkCgAAAAAAACUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwoAAAAAAAAfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACtCgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZ2V0T3B0LCBlc2NhcGUsIGV4dGVuZEFycmF5IH0gZnJvbSAndXRpbCc7CgpleHRlbmRBcnJheSgpOwoKY29uc3QgTm9uV1MgPSB0ID0+IHQudHlwZSAhPSAnd2hpdGVzcGFjZSc7CmNvbnN0IFdTID0gdCA9PiB0LnR5cGUgPT0gJ3doaXRlc3BhY2UnOwoKZnVuY3Rpb24gcGFyc2UobGV4ZXIsIGZuID0gKHRvaywgYXJyKSA9PiB7fSwgLi4uYXJncykgewogIGxldCBpID0gMCwKICAgIHRvaywKICAgIGFyciA9IFsuLi5hcmdzXTsKCiAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgLy9jb25zb2xlLmxvZygncGFyc2UnLCB7IGk6IGkrKywgdG9rLCBmbjogZm4gKyAnJyB9KTsKICAgIGxldCB2ID0gZm4odG9rLCBhcnIpOwogICAgaWYodiA8IDApIGJyZWFrOwogICAgYXJyLnB1c2godG9rKTsKICAgIGlmKHYpIGJyZWFrOwogIH0KICByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShwcm9jZXNzLnN0ZGVyciwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IDEwMCwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZQogICAgfQogIH0pOwoKbGV0IG91dHB1dD1zdGQub3V0OwogIGxldCBwYXJhbXMgPSBnZXRPcHQoCiAgICB7CiAgICAgb3V0cHV0OiBbdHJ1ZSwgZmlsZSA9PiBvdXRwdXQgPSBzdGQub3BlbihmaWxlLCAndysnKSwgJ28nXSwgICAgIAogICAgICAnQCc6ICdmaWxlcycKICAgIH0sCiAgICBhcmdzCiAgKTsKICBsZXQgZmlsZXMgPSBwYXJhbXNbJ0AnXTsKCiAgZm9yKGxldCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zb2xlLmxvZygnZmlsZScsIGZpbGUpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoZmlsZSk7CiAgICBjb25zb2xlLmxvZygnc3RyJywgZXNjYXBlKHN0cikuc3Vic3RyaW5nKDAsIDEwMCkpOwoKICAgIGxldCBsZXhlciA9IG5ldyBDTGV4ZXIoc3RyLCBmaWxlKTsKICAgIGNvbnNvbGUubG9nKCdsZXhlcicsIGxleGVyKTsKICAgIGxldCB0b2s7CgogICAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgIC8vIGNvbnNvbGUubG9nKCd0b2snLCB0b2spOwoKICAgICAgY29uc3QgeyBsb2MsIHR5cGUgfSA9IHRvazsKCiAgICAgIGlmKHsgc3RydWN0OiAxLCB0eXBlZGVmOiAxIH1bdHlwZV0pIHsKICAgICAgICBpZihsb2MuY29sdW1uID09IDEpIHsKICAgICAgICAgIGNvbnNvbGUubG9nKGBsaW5lICR7bG9jfSB0eXBlOmAsIHR5cGUpOwoKICAgICAgICAgIGxldCBzZXEsCiAgICAgICAgICAgIGxpbmUgPSBsb2MubGluZSwKICAgICAgICAgICAgdGV4dCA9ICcnOwoKICAgICAgICAgIGNvbnNvbGUubG9nKGBsaW5lICMke2xpbmV9YCk7CgogICAgICAgICAgc2VxID0gcGFyc2UobGV4ZXIsICh0b2ssIGFycikgPT4gdG9rLmxvYy5saW5lICE9IGxpbmUgJiYgLTEsIHRvayk7CgogICAgICAgICAgY29uc3QgbGFzdCA9IHNlcS5maWx0ZXIoTm9uV1MpLmF0KC0xKTsKCiAgICAgICAgICBjb25zb2xlLmxvZyhgbGluZSAke2xvY30gbGFzdDpgLCBsYXN0KTsKICAgICAgICAgIC8vc3RkLmV4aXQoMCk7CgogICAgICAgICAgaWYobGFzdC50eXBlID09ICdsYnJhY2UnKSB7CiAgICAgICAgICAgIHNlcSA9IHBhcnNlKGxleGVyLCAodG9rLCBhcnIpID0+IHRvay5sb2MuY29sdW1uID09IDEgJiYgdG9rLnR5cGUgPT0gJ3JicmFjZScsIC4uLnNlcSk7CiAgICAgICAgICAgIHNlcSA9IHBhcnNlKGxleGVyLCAodG9rLCBhcnIpID0+IHRvay50eXBlID09ICdzZW1pJywgLi4uc2VxKTsKICAgICAgICAgIH0KCiAgICAgICAgICBvdXRwdXQucHV0cygKICAgICAgICAgICAgc2VxCiAgICAgICAgICAgICAvLyAuZmlsdGVyKHQgPT4gIXQudHlwZS5lbmRzV2l0aCgnQ29tbWVudCcpKQogICAgICAgICAgICAgIC5tYXAodCA9PiB0LmxleGVtZSkKICAgICAgICAgICAgICAuam9pbignJykKICAgICAgICAgICAgICAudHJpbSgpICsgJ1xuXG4nCiAgICAgICAgICApOwoKICAgICAgICAgIC8qCiAgICAgICAgICBkbyB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0b2snLCB0b2ssIGxvYyArICcnLCB7IGxpbmUgfSk7CiAgICAgICAgICAgIHRleHQgKz0gdG9rLmxleGVtZTsKICAgICAgICAgICAgdG9rID0gbGV4ZXIubmV4dE9iaigpOwogICAgICAgICAgfSB3aGlsZShsb2MubGluZSA9PSBsaW5lKTsKKi8KICAgICAgICB9CiAgICAgIH0KCiAgICAgIG91dHB1dC5mbHVzaCgpOwogICAgfQogIH0KCmlmKG91dHB1dCAhPSBzdGQub3V0KQogIGNvbnNvbGUubG9nKCAgb3V0cHV0LnRlbGwoKSsnIGJ5dGVzIHdyaXR0ZW4gdG8gJytmcy5uYW1lU3luYyhvdXRwdXQpKTsKfQoKdHJ5IHsKICBtYWluKC4uLnNjcmlwdEFyZ3Muc2xpY2UoMSkpOwp9IGNhdGNoKGVycm9yKSB7CiAgY29uc29sZS5sb2coYEZBSUw6ICR7ZXJyb3IubWVzc2FnZX1cbiR7ZXJyb3Iuc3RhY2t9YCk7CiAgc3RkLmV4aXQoMSk7Cn0KAAAAAAAAAACzCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwoAAAAAAAAnCgAAAAAAAAAAAAAAAPC/"
				],
				[
					965,
					1,
					"insert",
					{
						"characters": "path.relative("
					},
					"DgAAABkKAAAAAAAAGgoAAAAAAAAAAAAAGgoAAAAAAAAbCgAAAAAAAAAAAAAbCgAAAAAAABwKAAAAAAAAAAAAABwKAAAAAAAAHQoAAAAAAAAAAAAAHQoAAAAAAAAeCgAAAAAAAAAAAAAeCgAAAAAAAB8KAAAAAAAAAAAAAB8KAAAAAAAAIAoAAAAAAAAAAAAAIAoAAAAAAAAhCgAAAAAAAAAAAAAhCgAAAAAAACIKAAAAAAAAAAAAACIKAAAAAAAAIwoAAAAAAAAAAAAAIwoAAAAAAAAkCgAAAAAAAAAAAAAkCgAAAAAAACUKAAAAAAAAAAAAACUKAAAAAAAAJgoAAAAAAAAAAAAAJgoAAAAAAAAnCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQoAAAAAAAAZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					974,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAADsKAAAAAAAAPAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwoAAAAAAAA7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					985,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADwGAAAAAAAAPQYAAAAAAAAAAAAAPQYAAAAAAAA9BgAAAAAAACgAAAAgICAgICAgICAgY29uc29sZS5sb2coYGxpbmUgIyR7bGluZX1gKTsK",
					"AQAAAAAAAAABAAAAPAYAAAAAAABkBgAAAAAAAAAAAAAAAPC/"
				],
				[
					992,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAL4GAAAAAAAAvwYAAAAAAAAAAAAAvwYAAAAAAAC/BgAAAAAAADIAAAAgICAgICAgICAgY29uc29sZS5sb2coYGxpbmUgJHtsb2N9IGxhc3Q6YCwgbGFzdCk7Cg",
					"AQAAAAAAAAABAAAAvgYAAAAAAADwBgAAAAAAAAAAAAAAAPC/"
				],
				[
					995,
					1,
					"left_delete",
					null,
					"AQAAADwGAAAAAAAAPAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAPQYAAAAAAAA9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					999,
					1,
					"left_delete",
					null,
					"AQAAAMsFAAAAAAAAywUAAAAAAAAzAAAAY29uc29sZS5sb2coYGxpbmUgJHtsb2N9IHR5cGU6YCwgdHlwZSk7CgogICAgICAgICAg",
					"AQAAAAAAAAABAAAAywUAAAAAAAD+BQAAAAAAAAAAAAAAgFZA"
				],
				[
					1001,
					1,
					"left_delete",
					null,
					"AQAAAAgGAAAAAAAACAYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAACQYAAAAAAAAJBgAAAAAAAAAAAAAAgFZA"
				],
				[
					1011,
					1,
					"paste",
					null,
					"AgAAAA4FAAAAAAAA4wcAAAAAAAAAAAAA4wcAAAAAAADjBwAAAAAAAAgEAAAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgICAvLyBjb25zb2xlLmxvZygndG9rJywgdG9rKTsKCiAgICAgIGNvbnN0IHsgbG9jLCB0eXBlIH0gPSB0b2s7CgogICAgICBpZih7IHN0cnVjdDogMSwgdHlwZWRlZjogMSB9W3R5cGVdKSB7CiAgICAgICAgaWYobG9jLmNvbHVtbiA9PSAxKSB7CiAgICAgICAgICBsZXQgc2VxLAogICAgICAgICAgICBsaW5lID0gbG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKCiAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmxpbmUgIT0gbGluZSAmJiAtMSwgdG9rKTsKCiAgICAgICAgICBjb25zdCBsYXN0ID0gc2VxLmZpbHRlcihOb25XUykuYXQoLTEpOwoKICAgICAgICAgICAvL3N0ZC5leGl0KDApOwoKICAgICAgICAgIGlmKGxhc3QudHlwZSA9PSAnbGJyYWNlJykgewogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmNvbHVtbiA9PSAxICYmIHRvay50eXBlID09ICdyYnJhY2UnLCAuLi5zZXEpOwogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2sudHlwZSA9PSAnc2VtaScsIC4uLnNlcSk7CiAgICAgICAgICB9CgogICAgICAgICAgb3V0cHV0LnB1dHMoCiAgICAgICAgICAgIHNlcQogICAgICAgICAgICAgIC8vIC5maWx0ZXIodCA9PiAhdC50eXBlLmVuZHNXaXRoKCdDb21tZW50JykpCiAgICAgICAgICAgICAgLm1hcCh0ID0+IHQubGV4ZW1lKQogICAgICAgICAgICAgIC5qb2luKCcnKQogICAgICAgICAgICAgIC50cmltKCkgKyAnXG5cbicKICAgICAgICAgICk7CgogICAgICAgICAgLyoKICAgICAgICAgIGRvIHsKICAgICAgICAgICAgY29uc29sZS5sb2coJ3RvaycsIHRvaywgbG9jICsgJycsIHsgbGluZSB9KTsKICAgICAgICAgICAgdGV4dCArPSB0b2subGV4ZW1lOwogICAgICAgICAgICB0b2sgPSBsZXhlci5uZXh0T2JqKCk7CiAgICAgICAgICB9IHdoaWxlKGxvYy5saW5lID09IGxpbmUpOwoqLwogICAgICAgIH0",
					"AQAAAAAAAAABAAAADgUAAAAAAAAWCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1014,
					1,
					"delete_blank_lines",
					{
						"surplus": false
					},
					"AQAAAGEEAAAAAAAA1QcAAAAAAACCAwAAdCBzdHIgPSBzdGQubG9hZEZpbGUoZmlsZSk7CiAgICBjb25zb2xlLmxvZygnc3RyJywgZXNjYXBlKHN0cikuc3Vic3RyaW5nKDAsIDEwMCkpOwoKICAgIGxldCBsZXhlciA9IG5ldyBDTGV4ZXIoc3RyLCBmaWxlKTsKICAgIGNvbnNvbGUubG9nKCdsZXhlcicsIGxleGVyKTsKICAgIGxldCB0b2s7CgogICAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewoKCiAgICAgIGNvbnN0IHsgbG9jLCB0eXBlIH0gPSB0b2s7CgogICAgICBpZih7IHN0cnVjdDogMSwgdHlwZWRlZjogMSB9W3R5cGVdKSB7CiAgICAgICAgaWYobG9jLmNvbHVtbiA9PSAxKSB7CiAgICAgICAgICBsZXQgc2VxLAogICAgICAgICAgICBsaW5lID0gbG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKCiAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmxpbmUgIT0gbGluZSAmJiAtMSwgdG9rKTsKCiAgICAgICAgICBjb25zdCBsYXN0ID0gc2VxLmZpbHRlcihOb25XUykuYXQoLTEpOwoKCiAgICAgICAgICBpZihsYXN0LnR5cGUgPT0gJ2xicmFjZScpIHsKICAgICAgICAgICAgc2VxID0gcGFyc2UobGV4ZXIsICh0b2ssIGFycikgPT4gdG9rLmxvYy5jb2x1bW4gPT0gMSAmJiB0b2sudHlwZSA9PSAncmJyYWNlJywgLi4uc2VxKTsKICAgICAgICAgICAgc2VxID0gcGFyc2UobGV4ZXIsICh0b2ssIGFycikgPT4gdG9rLnR5cGUgPT0gJ3NlbWknLCAuLi5zZXEpOwogICAgICAgICAgfQoKICAgICAgICAgIG91dHB1dC5wdXRzKAogICAgICAgICAgICBzZXEKCiAgICAgICAgICAgICAgLm1hcCh0ID0+IHQubGV4ZW1lKQogICAgICAgICAgICAgIC5qb2luKCcnKQogICAgICAgICAgICAgIC50cmltKCkgKyAnXG5cbicKICAgICAgICAgICk7CgoKICAgICAgICB9Cg",
					"AQAAAAAAAAABAAAA4wcAAAAAAABhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1036,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGwIAAAAAAAAbQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAgAAAAAAABsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1037,
					1,
					"paste",
					null,
					"AQAAAG0IAAAAAAAAeggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQgAAAAAAABtCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1049,
					1,
					"insert",
					{
						"characters": "\noutput.close"
					},
					"DgAAAH0IAAAAAAAAfggAAAAAAAAAAAAAfggAAAAAAACACAAAAAAAAAAAAACACAAAAAAAAIEIAAAAAAAAAAAAAIEIAAAAAAAAgggAAAAAAAAAAAAAgggAAAAAAACDCAAAAAAAAAAAAACDCAAAAAAAAIQIAAAAAAAAAAAAAIQIAAAAAAAAhQgAAAAAAAAAAAAAhQgAAAAAAACGCAAAAAAAAAAAAACGCAAAAAAAAIcIAAAAAAAAAAAAAIcIAAAAAAAAiAgAAAAAAAAAAAAAiAgAAAAAAACJCAAAAAAAAAAAAACJCAAAAAAAAIoIAAAAAAAAAAAAAIoIAAAAAAAAiwgAAAAAAAAAAAAAiwgAAAAAAACMCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQgAAAAAAAB9CAAAAAAAAP///////+9/"
				],
				[
					1050,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIwIAAAAAAAAjggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1052,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAI4IAAAAAAAAjwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjggAAAAAAACOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1055,
					1,
					"left_delete",
					null,
					"AQAAAI4IAAAAAAAAjggAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAjwgAAAAAAACPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1056,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAI4IAAAAAAAAjwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjggAAAAAAACOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1065,
					1,
					"insert",
					{
						"characters": "outputNae"
					},
					"CQAAAGkDAAAAAAAAagMAAAAAAAAAAAAAagMAAAAAAABrAwAAAAAAAAAAAABrAwAAAAAAAGwDAAAAAAAAAAAAAGwDAAAAAAAAbQMAAAAAAAAAAAAAbQMAAAAAAABuAwAAAAAAAAAAAABuAwAAAAAAAG8DAAAAAAAAAAAAAG8DAAAAAAAAcAMAAAAAAAAAAAAAcAMAAAAAAABxAwAAAAAAAAAAAABxAwAAAAAAAHIDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQMAAAAAAABpAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1066,
					1,
					"left_delete",
					null,
					"AQAAAHEDAAAAAAAAcQMAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAcgMAAAAAAAByAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1067,
					1,
					"insert",
					{
						"characters": "me,"
					},
					"AwAAAHEDAAAAAAAAcgMAAAAAAAAAAAAAcgMAAAAAAABzAwAAAAAAAAAAAABzAwAAAAAAAHQDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQMAAAAAAABxAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1077,
					1,
					"paste",
					null,
					"AQAAANMDAAAAAAAA3QMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wMAAAAAAADTAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1078,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAN0DAAAAAAAA3gMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QMAAAAAAADdAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1079,
					1,
					"left_delete",
					null,
					"AQAAAN0DAAAAAAAA3QMAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA3gMAAAAAAADeAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1080,
					1,
					"insert",
					{
						"characters": "?="
					},
					"AgAAAN0DAAAAAAAA3gMAAAAAAAAAAAAA3gMAAAAAAADfAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QMAAAAAAADdAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1081,
					2,
					"left_delete",
					null,
					"AgAAAN4DAAAAAAAA3gMAAAAAAAABAAAAPd0DAAAAAAAA3QMAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAA3wMAAAAAAADfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1082,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAN0DAAAAAAAA3gMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QMAAAAAAADdAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1086,
					1,
					"paste",
					null,
					"AgAAABsIAAAAAAAAJQgAAAAAAAAAAAAAJQgAAAAAAAAlCAAAAAAAABEAAABvdXRwdXQgIT0gc3RkLm91dA",
					"AQAAAAAAAAABAAAAGwgAAAAAAAAsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1096,
					1,
					"paste",
					null,
					"AgAAAFoIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABkCAAAAAAAADAAAABwYXRoLnJlbGF0aXZlKGZzLm5hbWVTeW5jKG91dHB1dCkscGF0aC5nZXRjd2QoKSk",
					"AQAAAAAAAAABAAAAWggAAAAAAACKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1104,
					1,
					"left_delete",
					null,
					"AQAAAFYIAAAAAAAAVggAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAVwgAAAAAAABXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1105,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAFYIAAAAAAAAWAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVggAAAAAAABWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1107,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAFYIAAAAAAAAVwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVggAAAAAAABWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1109,
					1,
					"right_delete",
					null,
					"AQAAAFgIAAAAAAAAWAgAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAWAgAAAAAAABYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1110,
					1,
					"left_delete",
					null,
					"AQAAAFcIAAAAAAAAVwgAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAWAgAAAAAAABYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1111,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAFcIAAAAAAAAWAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwgAAAAAAABXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1112,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFgIAAAAAAAAWggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAgAAAAAAABYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1113,
					4,
					"right_delete",
					null,
					"BAAAAFkIAAAAAAAAWQgAAAAAAAABAAAAfVkIAAAAAAAAWQgAAAAAAAABAAAAIFkIAAAAAAAAWQgAAAAAAAABAAAAK1kIAAAAAAAAWQgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAWQgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1116,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAAGMIAAAAAAAAZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwgAAAAAAABjCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1117,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAGQIAAAAAAAAZggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAgAAAAAAABkCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1118,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAGUIAAAAAAAAZggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQgAAAAAAABlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1119,
					1,
					"left_delete",
					null,
					"AQAAAGUIAAAAAAAAZQgAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAZggAAAAAAABmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1120,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAAGUIAAAAAAAAZggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQgAAAAAAABlCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1121,
					1,
					"right_delete",
					null,
					"AQAAAGYIAAAAAAAAZggAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAZggAAAAAAABmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1124,
					1,
					"left_delete",
					null,
					"AQAAAEMIAAAAAAAAQwgAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAARAgAAAAAAABECAAAAAAAAAAAAAAAAPC/"
				],
				[
					1125,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAEMIAAAAAAAARQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwgAAAAAAABDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1128,
					1,
					"right_delete",
					null,
					"AQAAAEQIAAAAAAAARAgAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAARAgAAAAAAABECAAAAAAAAAAAAAAAAPC/"
				],
				[
					1133,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD/CAAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZ2V0T3B0LCBlc2NhcGUsIGV4dGVuZEFycmF5IH0gZnJvbSAndXRpbCc7CgpleHRlbmRBcnJheSgpOwoKY29uc3QgTm9uV1MgPSB0ID0+IHQudHlwZSAhPSAnd2hpdGVzcGFjZSc7CmNvbnN0IFdTID0gdCA9PiB0LnR5cGUgPT0gJ3doaXRlc3BhY2UnOwoKZnVuY3Rpb24gcGFyc2UobGV4ZXIsIGZuID0gKHRvaywgYXJyKSA9PiB7fSwgLi4uYXJncykgewogIGxldCBpID0gMCwKICAgIHRvaywKICAgIGFyciA9IFsuLi5hcmdzXTsKCiAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgLy9jb25zb2xlLmxvZygncGFyc2UnLCB7IGk6IGkrKywgdG9rLCBmbjogZm4gKyAnJyB9KTsKICAgIGxldCB2ID0gZm4odG9rLCBhcnIpOwogICAgaWYodiA8IDApIGJyZWFrOwogICAgYXJyLnB1c2godG9rKTsKICAgIGlmKHYpIGJyZWFrOwogIH0KICByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShwcm9jZXNzLnN0ZGVyciwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IDEwMCwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZQogICAgfQogIH0pOwoKICBsZXQgb3V0cHV0TmFtZSxvdXRwdXQgPSBzdGQub3V0OwogIGxldCBwYXJhbXMgPSBnZXRPcHQoCiAgICB7CiAgICAgIG91dHB1dDogW3RydWUsIGZpbGUgPT4gKG91dHB1dCA9IHN0ZC5vcGVuKG91dHB1dE5hbWU9ZmlsZSwgJ3crJykpLCAnbyddLAogICAgICAnQCc6ICdmaWxlcycKICAgIH0sCiAgICBhcmdzCiAgKTsKICBsZXQgZmlsZXMgPSBwYXJhbXNbJ0AnXTsKCiAgZm9yKGxldCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zb2xlLmxvZygnZmlsZScsIGZpbGUpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoZmlsZSk7CiAgICBjb25zb2xlLmxvZygnc3RyJywgZXNjYXBlKHN0cikuc3Vic3RyaW5nKDAsIDEwMCkpOwogICAgbGV0IGxleGVyID0gbmV3IENMZXhlcihzdHIsIGZpbGUpOwogICAgY29uc29sZS5sb2coJ2xleGVyJywgbGV4ZXIpOwogICAgbGV0IHRvazsKICAgIHdoaWxlKCh0b2sgPSBsZXhlci5uZXh0VG9rZW4oKSkpIHsKICAgICAgY29uc3QgeyBsb2MsIHR5cGUgfSA9IHRvazsKICAgICAgaWYoeyBzdHJ1Y3Q6IDEsIHR5cGVkZWY6IDEgfVt0eXBlXSkgewogICAgICAgIGlmKGxvYy5jb2x1bW4gPT0gMSkgewogICAgICAgICAgbGV0IHNlcSwKICAgICAgICAgICAgbGluZSA9IGxvYy5saW5lLAogICAgICAgICAgICB0ZXh0ID0gJyc7CiAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmxpbmUgIT0gbGluZSAmJiAtMSwgdG9rKTsKICAgICAgICAgIGNvbnN0IGxhc3QgPSBzZXEuZmlsdGVyKE5vbldTKS5hdCgtMSk7CiAgICAgICAgICBpZihsYXN0LnR5cGUgPT0gJ2xicmFjZScpIHsKICAgICAgICAgICAgc2VxID0gcGFyc2UobGV4ZXIsICh0b2ssIGFycikgPT4gdG9rLmxvYy5jb2x1bW4gPT0gMSAmJiB0b2sudHlwZSA9PSAncmJyYWNlJywgLi4uc2VxKTsKICAgICAgICAgICAgc2VxID0gcGFyc2UobGV4ZXIsICh0b2ssIGFycikgPT4gdG9rLnR5cGUgPT0gJ3NlbWknLCAuLi5zZXEpOwogICAgICAgICAgfQogICAgICAgICAgb3V0cHV0LnB1dHMoCiAgICAgICAgICAgIHNlcQogICAgICAgICAgICAgIC5tYXAodCA9PiB0LmxleGVtZSkKICAgICAgICAgICAgICAuam9pbignJykKICAgICAgICAgICAgICAudHJpbSgpICsgJ1xuXG4nCiAgICAgICAgICApOwogICAgICAgIH0KICAgICAgfQoKICAgICAgb3V0cHV0LmZsdXNoKCk7CiAgICB9CiAgfQoKICBpZihvdXRwdXROYW1lKSBjb25zb2xlLmxvZyhvdXRwdXQudGVsbCgpICsgYCBieXRlcyB3cml0dGVuIHRvICcke291dHB1dE5hbWV9J2ApOwogIG91dHB1dC5jbG9zZSgpOwp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKICBzdGQuZXhpdCgxKTsKfQoAAAAAAAAAAAgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAgAAAAAAABECAAAAAAAAAAAAAAAAPC/"
				],
				[
					1140,
					1,
					"insert",
					{
						"characters": "reduce"
					},
					"BwAAAJQHAAAAAAAAlQcAAAAAAAAAAAAAlQcAAAAAAACVBwAAAAAAAAMAAABtYXCVBwAAAAAAAJYHAAAAAAAAAAAAAJYHAAAAAAAAlwcAAAAAAAAAAAAAlwcAAAAAAACYBwAAAAAAAAAAAACYBwAAAAAAAJkHAAAAAAAAAAAAAJkHAAAAAAAAmgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAcAAAAAAACXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1142,
					1,
					"insert",
					{
						"characters": "(a"
					},
					"AgAAAJsHAAAAAAAAnAcAAAAAAAAAAAAAnAcAAAAAAACdBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwcAAAAAAACbBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1143,
					1,
					"left_delete",
					null,
					"AQAAAJwHAAAAAAAAnAcAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAnQcAAAAAAACdBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1144,
					1,
					"insert",
					{
						"characters": "s,"
					},
					"AgAAAJwHAAAAAAAAnQcAAAAAAAAAAAAAnQcAAAAAAACeBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAcAAAAAAACcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1146,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAJ8HAAAAAAAAoAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwcAAAAAAACfBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1148,
					1,
					"insert",
					{
						"characters": "s+"
					},
					"AgAAAKQHAAAAAAAApQcAAAAAAAAAAAAApQcAAAAAAACmBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAcAAAAAAACkBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1151,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK4HAAAAAAAArwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgcAAAAAAACuBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1152,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8HAAAAAAAAsAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwcAAAAAAACvBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1153,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAALAHAAAAAAAAsgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAcAAAAAAACwBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1158,
					1,
					"left_delete",
					null,
					"AQAAALQHAAAAAAAAtAcAAAAAAAAYAAAAICAgICAgICAgICAgICAuam9pbignJykK",
					"AQAAAAAAAAABAAAAtAcAAAAAAADMBwAAAAAAAAAAAAAAAAAA"
				],
				[
					1167,
					2,
					"join_lines",
					null,
					"BgAAAIQHAAAAAAAAhAcAAAAAAAABAAAACoQHAAAAAAAAhAcAAAAAAAAOAAAAICAgICAgICAgICAgICCEBwAAAAAAAIUHAAAAAAAAAAAAAKUHAAAAAAAApQcAAAAAAAABAAAACqUHAAAAAAAApQcAAAAAAAAOAAAAICAgICAgICAgICAgICClBwAAAAAAAKYHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQcAAAAAAAB1BwAAAAAAAAAAAAAAAAAA"
				],
				[
					1168,
					1,
					"left_delete",
					null,
					"AQAAAKUHAAAAAAAApQcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAApgcAAAAAAACmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1171,
					1,
					"right_delete",
					null,
					"AQAAAIQHAAAAAAAAhAcAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhAcAAAAAAACEBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1173,
					2,
					"join_lines",
					null,
					"BAAAAHQHAAAAAAAAdAcAAAAAAAABAAAACnQHAAAAAAAAdAcAAAAAAAAMAAAAICAgICAgICAgICAgpwcAAAAAAACnBwAAAAAAAAEAAAAKpwcAAAAAAACnBwAAAAAAAAoAAAAgICAgICAgICAg",
					"AQAAAAAAAAABAAAAbQcAAAAAAABtBwAAAAAAAAAAAAAA4GBA"
				],
				[
					1180,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANIEAAAAAAAA0wQAAAAAAAAAAAAA0wQAAAAAAADXBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gQAAAAAAADSBAAAAAAAAAAAAAAAiIRA"
				],
				[
					1202,
					1,
					"insert",
					{
						"characters": "srt."
					},
					"BQAAALMEAAAAAAAAtAQAAAAAAAAAAAAA1AQAAAAAAADUBAAAAAAAAAQAAAAgICAgtAQAAAAAAAC1BAAAAAAAAAAAAAC1BAAAAAAAALYEAAAAAAAAAAAAALYEAAAAAAAAtwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswQAAAAAAACzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1203,
					3,
					"left_delete",
					null,
					"AwAAALYEAAAAAAAAtgQAAAAAAAABAAAALrUEAAAAAAAAtQQAAAAAAAABAAAAdLQEAAAAAAAAtAQAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAAtwQAAAAAAAC3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1204,
					1,
					"insert",
					{
						"characters": "tr.split('"
					},
					"CgAAALQEAAAAAAAAtQQAAAAAAAAAAAAAtQQAAAAAAAC2BAAAAAAAAAAAAAC2BAAAAAAAALcEAAAAAAAAAAAAALcEAAAAAAAAuAQAAAAAAAAAAAAAuAQAAAAAAAC5BAAAAAAAAAAAAAC5BAAAAAAAALoEAAAAAAAAAAAAALoEAAAAAAAAuwQAAAAAAAAAAAAAuwQAAAAAAAC8BAAAAAAAAAAAAAC8BAAAAAAAAL0EAAAAAAAAAAAAAL0EAAAAAAAAvgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAQAAAAAAAC0BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1205,
					1,
					"insert",
					{
						"characters": "\\n'‚ÅΩ)"
					},
					"BQAAAL4EAAAAAAAAvwQAAAAAAAAAAAAAvwQAAAAAAADABAAAAAAAAAAAAADABAAAAAAAAMEEAAAAAAAAAAAAAMEEAAAAAAAAwgQAAAAAAAAAAAAAwgQAAAAAAADDBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgQAAAAAAAC+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					1206,
					2,
					"left_delete",
					null,
					"AgAAAMIEAAAAAAAAwgQAAAAAAAABAAAAKcEEAAAAAAAAwQQAAAAAAAADAAAA4oG9",
					"AQAAAAAAAAABAAAAwwQAAAAAAADDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1207,
					1,
					"insert",
					{
						"characters": ")["
					},
					"AgAAAMEEAAAAAAAAwgQAAAAAAAAAAAAAwgQAAAAAAADDBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQQAAAAAAADBBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1208,
					1,
					"insert",
					{
						"characters": "0])"
					},
					"AwAAAMMEAAAAAAAAxAQAAAAAAAAAAAAAxAQAAAAAAADFBAAAAAAAAAAAAADFBAAAAAAAAMYEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwQAAAAAAADDBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1210,
					1,
					"cut",
					null,
					"AQAAAMYEAAAAAAAAxgQAAAAAAAAfAAAAZXNjYXBlKHN0cikuc3Vic3RyaW5nKDAsIDEwMCkpOw",
					"AQAAAAAAAAABAAAAxgQAAAAAAADlBAAAAAAAAP///////+9/"
				],
				[
					1211,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMYEAAAAAAAAxwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgQAAAAAAADGBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1214,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC9CAAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZ2V0T3B0LCBlc2NhcGUsIGV4dGVuZEFycmF5IH0gZnJvbSAndXRpbCc7CgpleHRlbmRBcnJheSgpOwoKY29uc3QgTm9uV1MgPSB0ID0+IHQudHlwZSAhPSAnd2hpdGVzcGFjZSc7CmNvbnN0IFdTID0gdCA9PiB0LnR5cGUgPT0gJ3doaXRlc3BhY2UnOwoKZnVuY3Rpb24gcGFyc2UobGV4ZXIsIGZuID0gKHRvaywgYXJyKSA9PiB7fSwgLi4uYXJncykgewogIGxldCBpID0gMCwKICAgIHRvaywKICAgIGFyciA9IFsuLi5hcmdzXTsKCiAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgLy9jb25zb2xlLmxvZygncGFyc2UnLCB7IGk6IGkrKywgdG9rLCBmbjogZm4gKyAnJyB9KTsKICAgIGxldCB2ID0gZm4odG9rLCBhcnIpOwogICAgaWYodiA8IDApIGJyZWFrOwogICAgYXJyLnB1c2godG9rKTsKICAgIGlmKHYpIGJyZWFrOwogIH0KICByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShwcm9jZXNzLnN0ZGVyciwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IDEwMCwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZQogICAgfQogIH0pOwoKICBsZXQgb3V0cHV0TmFtZSwKICAgIG91dHB1dCA9IHN0ZC5vdXQ7CiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgZmlsZSA9PiAob3V0cHV0ID0gc3RkLm9wZW4oKG91dHB1dE5hbWUgPSBmaWxlKSwgJ3crJykpLCAnbyddLAogICAgICAnQCc6ICdmaWxlcycKICAgIH0sCiAgICBhcmdzCiAgKTsKICBsZXQgZmlsZXMgPSBwYXJhbXNbJ0AnXTsKCiAgZm9yKGxldCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zb2xlLmxvZygnZmlsZScsIGZpbGUpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoZmlsZSk7CiAgICBjb25zb2xlLmxvZygnc3RyJywgc3RyLnNwbGl0KCdcbicpWzBdKTsKCiAgICBsZXQgbGV4ZXIgPSBuZXcgQ0xleGVyKHN0ciwgZmlsZSk7CiAgICBjb25zb2xlLmxvZygnbGV4ZXInLCBsZXhlcik7CiAgICBsZXQgdG9rOwogICAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgICBjb25zdCB7IGxvYywgdHlwZSB9ID0gdG9rOwogICAgICBpZih7IHN0cnVjdDogMSwgdHlwZWRlZjogMSB9W3R5cGVdKSB7CiAgICAgICAgaWYobG9jLmNvbHVtbiA9PSAxKSB7CiAgICAgICAgICBsZXQgc2VxLAogICAgICAgICAgICBsaW5lID0gbG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKICAgICAgICAgIHNlcSA9IHBhcnNlKGxleGVyLCAodG9rLCBhcnIpID0+IHRvay5sb2MubGluZSAhPSBsaW5lICYmIC0xLCB0b2spOwogICAgICAgICAgY29uc3QgbGFzdCA9IHNlcS5maWx0ZXIoTm9uV1MpLmF0KC0xKTsKICAgICAgICAgIGlmKGxhc3QudHlwZSA9PSAnbGJyYWNlJykgewogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmNvbHVtbiA9PSAxICYmIHRvay50eXBlID09ICdyYnJhY2UnLCAuLi5zZXEpOwogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2sudHlwZSA9PSAnc2VtaScsIC4uLnNlcSk7CiAgICAgICAgICB9CiAgICAgICAgICBvdXRwdXQucHV0cyhzZXEucmVkdWNlKChzLHQpID0+IHMrdC5sZXhlbWUsICcnKS50cmltKCkgKyAnXG5cbicpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgb3V0cHV0LmZsdXNoKCk7CiAgICB9CiAgfQoKICBpZihvdXRwdXROYW1lKSBjb25zb2xlLmxvZyhvdXRwdXQudGVsbCgpICsgYCBieXRlcyB3cml0dGVuIHRvICcke291dHB1dE5hbWV9J2ApOwogIG91dHB1dC5jbG9zZSgpOwp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKICBzdGQuZXhpdCgxKTsKfQoAAAAAAAAAAMAIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwQAAAAAAADHBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1256,
					1,
					"cut",
					null,
					"AQAAAPAEAAAAAAAA8AQAAAAAAAAhAAAAICAgIGNvbnNvbGUubG9nKCdsZXhlcicsIGxleGVyKTsK",
					"AQAAAAAAAAABAAAA8AQAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1257,
					2,
					"paste",
					null,
					"AgAAAPAEAAAAAAAAEQUAAAAAAAAAAAAAEQUAAAAAAAAyBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AQAAAAAAADwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					1262,
					1,
					"insert",
					{
						"characters": ".getRule"
					},
					"CAAAACcFAAAAAAAAKAUAAAAAAAAAAAAAKAUAAAAAAAApBQAAAAAAAAAAAAApBQAAAAAAACoFAAAAAAAAAAAAACoFAAAAAAAAKwUAAAAAAAAAAAAAKwUAAAAAAAAsBQAAAAAAAAAAAAAsBQAAAAAAAC0FAAAAAAAAAAAAAC0FAAAAAAAALgUAAAAAAAAAAAAALgUAAAAAAAAvBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwUAAAAAAAAnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1264,
					1,
					"insert",
					{
						"characters": "lee"
					},
					"AwAAADIFAAAAAAAAMwUAAAAAAAAAAAAAMwUAAAAAAAA0BQAAAAAAAAAAAAA0BQAAAAAAADUFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgUAAAAAAAAyBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1265,
					1,
					"left_delete",
					null,
					"AQAAADQFAAAAAAAANAUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAANQUAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1266,
					1,
					"insert",
					{
						"characters": "xer.getRule("
					},
					"DAAAADQFAAAAAAAANQUAAAAAAAAAAAAANQUAAAAAAAA2BQAAAAAAAAAAAAA2BQAAAAAAADcFAAAAAAAAAAAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA5BQAAAAAAADoFAAAAAAAAAAAAADoFAAAAAAAAOwUAAAAAAAAAAAAAOwUAAAAAAAA8BQAAAAAAAAAAAAA8BQAAAAAAAD0FAAAAAAAAAAAAAD0FAAAAAAAAPgUAAAAAAAAAAAAAPgUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAEAFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAUAAAAAAAA0BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1267,
					1,
					"insert",
					{
						"characters": "'struct');"
					},
					"CgAAAEAFAAAAAAAAQQUAAAAAAAAAAAAAQQUAAAAAAABCBQAAAAAAAAAAAABCBQAAAAAAAEMFAAAAAAAAAAAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABFBQAAAAAAAAAAAABFBQAAAAAAAEYFAAAAAAAAAAAAAEYFAAAAAAAARwUAAAAAAAAAAAAARwUAAAAAAABIBQAAAAAAAAAAAABIBQAAAAAAAEkFAAAAAAAAAAAAAEkFAAAAAAAASgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAUAAAAAAABABQAAAAAAAAAAAAAAAPC/"
				],
				[
					1268,
					1,
					"left_delete",
					null,
					"AQAAAEkFAAAAAAAASQUAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAASgUAAAAAAABKBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1269,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAEkFAAAAAAAASgUAAAAAAAAAAAAASgUAAAAAAABLBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQUAAAAAAABJBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1271,
					1,
					"cut",
					null,
					"AQAAAEsFAAAAAAAASwUAAAAAAAAHAAAAbGV4ZXIpOw",
					"AQAAAAAAAAABAAAASwUAAAAAAABSBQAAAAAAAP///////+9/"
				],
				[
					1278,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAC8FAAAAAAAAMAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwUAAAAAAAAvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1279,
					1,
					"left_delete",
					null,
					"AQAAAC8FAAAAAAAALwUAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAMAUAAAAAAAAwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1280,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAC8FAAAAAAAAMAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwUAAAAAAAAvBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1282,
					1,
					"insert",
					{
						"characters": "struct')"
					},
					"CAAAADEFAAAAAAAAMgUAAAAAAAAAAAAAMgUAAAAAAAAzBQAAAAAAAAAAAAAzBQAAAAAAADQFAAAAAAAAAAAAADQFAAAAAAAANQUAAAAAAAAAAAAANQUAAAAAAAA2BQAAAAAAAAAAAAA2BQAAAAAAADcFAAAAAAAAAAAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQUAAAAAAAAxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1283,
					2,
					"left_delete",
					null,
					"AgAAADgFAAAAAAAAOAUAAAAAAAABAAAAKTcFAAAAAAAANwUAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1284,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADcFAAAAAAAAOAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1285,
					1,
					"left_delete",
					null,
					"AQAAADcFAAAAAAAANwUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAOAUAAAAAAAA4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1286,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAADcFAAAAAAAAOAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1287,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgFAAAAAAAAOQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAUAAAAAAAA4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1288,
					1,
					"left_delete",
					null,
					"AQAAADgFAAAAAAAAOAUAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1289,
					1,
					"insert",
					{
						"characters": ")`"
					},
					"AgAAADgFAAAAAAAAOQUAAAAAAAAAAAAAOQUAAAAAAAA6BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAUAAAAAAAA4BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1292,
					1,
					"cut",
					null,
					"AQAAADkFAAAAAAAAOQUAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAOgUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1293,
					1,
					"paste",
					null,
					"AQAAADkFAAAAAAAAOgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1296,
					1,
					"paste",
					null,
					"AgAAACEFAAAAAAAAIgUAAAAAAAAAAAAAIgUAAAAAAAAiBQAAAAAAAAEAAAAn",
					"AQAAAAAAAAABAAAAIgUAAAAAAAAhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1315,
					1,
					"cut",
					null,
					"AQAAABEFAAAAAAAAEQUAAAAAAABFAAAAICAgIGNvbnNvbGUubG9nKGBsZXhlci5nZXRSdWxlKCdzdHJ1Y3QnKWAsIGxleGVyLmdldFJ1bGUoJ3N0cnVjdCcpKTsK",
					"AQAAAAAAAAABAAAAEQUAAAAAAABWBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1316,
					2,
					"paste",
					null,
					"AgAAABEFAAAAAAAAVgUAAAAAAAAAAAAAVgUAAAAAAACbBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1319,
					1,
					"insert",
					{
						"characters": "rules"
					},
					"BgAAACgFAAAAAAAAKQUAAAAAAAAAAAAAKQUAAAAAAAApBQAAAAAAABEAAABnZXRSdWxlKCdzdHJ1Y3QnKSkFAAAAAAAAKgUAAAAAAAAAAAAAKgUAAAAAAAArBQAAAAAAAAAAAAArBQAAAAAAACwFAAAAAAAAAAAAACwFAAAAAAAALQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1326,
					1,
					"insert",
					{
						"characters": "res"
					},
					"BAAAADYFAAAAAAAANwUAAAAAAAAAAAAANwUAAAAAAAA3BQAAAAAAABEAAABnZXRSdWxlKCdzdHJ1Y3QnKTcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgUAAAAAAABHBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1327,
					2,
					"left_delete",
					null,
					"AgAAADgFAAAAAAAAOAUAAAAAAAABAAAAczcFAAAAAAAANwUAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1328,
					1,
					"insert",
					{
						"characters": "ules"
					},
					"BAAAADcFAAAAAAAAOAUAAAAAAAAAAAAAOAUAAAAAAAA5BQAAAAAAAAAAAAA5BQAAAAAAADoFAAAAAAAAAAAAADoFAAAAAAAAOwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1331,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAADsFAAAAAAAAPQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwUAAAAAAAA7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1332,
					1,
					"insert",
					{
						"characters": "≈ùtru"
					},
					"BAAAADwFAAAAAAAAPQUAAAAAAAAAAAAAPQUAAAAAAAA+BQAAAAAAAAAAAAA+BQAAAAAAAD8FAAAAAAAAAAAAAD8FAAAAAAAAQAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAUAAAAAAAA8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1333,
					4,
					"left_delete",
					null,
					"BAAAAD8FAAAAAAAAPwUAAAAAAAABAAAAdT4FAAAAAAAAPgUAAAAAAAABAAAAcj0FAAAAAAAAPQUAAAAAAAABAAAAdDwFAAAAAAAAPAUAAAAAAAACAAAAxZ0",
					"AQAAAAAAAAABAAAAQAUAAAAAAABABQAAAAAAAAAAAAAAAPC/"
				],
				[
					1334,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAADwFAAAAAAAAPgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAUAAAAAAAA8BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1335,
					1,
					"insert",
					{
						"characters": "struct"
					},
					"BgAAAD0FAAAAAAAAPgUAAAAAAAAAAAAAPgUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAEAFAAAAAAAAAAAAAEAFAAAAAAAAQQUAAAAAAAAAAAAAQQUAAAAAAABCBQAAAAAAAAAAAABCBQAAAAAAAEMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQUAAAAAAAA9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1342,
					1,
					"paste",
					null,
					"AQAAAC0FAAAAAAAANwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQUAAAAAAAAtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1349,
					1,
					"cut",
					null,
					"AQAAABEFAAAAAAAAEQUAAAAAAABBAAAAICAgIGNvbnNvbGUubG9nKGBsZXhlci5ydWxlc1snc3RydWN0J11gLCBsZXhlci5ydWxlc1snc3RydWN0J10pOwo",
					"AQAAAAAAAAABAAAAEQUAAAAAAABSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1350,
					2,
					"paste",
					null,
					"AgAAABEFAAAAAAAAUgUAAAAAAAAAAAAAUgUAAAAAAACTBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1355,
					1,
					"insert",
					{
						"characters": "typedef"
					},
					"CAAAAHAFAAAAAAAAcQUAAAAAAAAAAAAAcQUAAAAAAABxBQAAAAAAAAYAAABzdHJ1Y3RxBQAAAAAAAHIFAAAAAAAAAAAAAHIFAAAAAAAAcwUAAAAAAAAAAAAAcwUAAAAAAAB0BQAAAAAAAAAAAAB0BQAAAAAAAHUFAAAAAAAAAAAAAHUFAAAAAAAAdgUAAAAAAAAAAAAAdgUAAAAAAAB3BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAUAAAAAAAB2BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1365,
					1,
					"paste",
					null,
					"AgAAAIkFAAAAAAAAkAUAAAAAAAAAAAAAkAUAAAAAAACQBQAAAAAAAAYAAABzdHJ1Y3Q",
					"AQAAAAAAAAABAAAAiQUAAAAAAACPBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1374,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAANkFAAAAAAAA2gUAAAAAAAAAAAAA2gUAAAAAAADeBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QUAAAAAAADZBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1386,
					1,
					"paste",
					null,
					"AQAAAGUGAAAAAAAAegYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQYAAAAAAABlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1387,
					1,
					"insert",
					{
						"characters": " ;"
					},
					"AwAAAHoGAAAAAAAAewYAAAAAAAAAAAAA2gUAAAAAAADaBQAAAAAAAAQAAAAgICAgdwYAAAAAAAB4BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegYAAAAAAAB6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1388,
					2,
					"left_delete",
					null,
					"AgAAAHcGAAAAAAAAdwYAAAAAAAABAAAAO3YGAAAAAAAAdgYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAeAYAAAAAAAB4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1389,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHYGAAAAAAAAdwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgYAAAAAAAB2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1390,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHcGAAAAAAAAeAYAAAAAAAAAAAAAeAYAAAAAAAB9BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwYAAAAAAAB3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1395,
					1,
					"insert",
					{
						"characters": "token"
					},
					"BgAAAG0GAAAAAAAAbgYAAAAAAAAAAAAAbgYAAAAAAABuBgAAAAAAAAkAAABuZXh0VG9rZW5uBgAAAAAAAG8GAAAAAAAAAAAAAG8GAAAAAAAAcAYAAAAAAAAAAAAAcAYAAAAAAABxBgAAAAAAAAAAAABxBgAAAAAAAHIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQYAAAAAAAB2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1400,
					1,
					"cut",
					null,
					"AQAAABMGAAAAAAAAEwYAAAAAAAAhAAAAICBjb25zdCB7IGxvYywgdHlwZSB9ID0gdG9rOwogICAg",
					"AQAAAAAAAAABAAAAEwYAAAAAAAA0BgAAAAAAAAAAAAAAAEJA"
				],
				[
					1403,
					1,
					"paste",
					null,
					"AQAAAD8GAAAAAAAAYAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwYAAAAAAAA/BgAAAAAAAAAAAAAAAEJA"
				],
				[
					1417,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAANoFAAAAAAAA2wUAAAAAAAAAAAAA2wUAAAAAAADcBQAAAAAAAAAAAADcBQAAAAAAAN0FAAAAAAAAAAAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA3gUAAAAAAADfBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gUAAAAAAADaBQAAAAAAAAAAAAAAAFJA"
				],
				[
					1418,
					1,
					"insert",
					{
						"characters": " √§"
					},
					"AgAAAN8FAAAAAAAA4AUAAAAAAAAAAAAA4AUAAAAAAADhBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wUAAAAAAADfBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1419,
					1,
					"left_delete",
					null,
					"AQAAAOAFAAAAAAAA4AUAAAAAAAACAAAAw6Q",
					"AQAAAAAAAAABAAAA4QUAAAAAAADhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1420,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAOAFAAAAAAAA4gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AUAAAAAAADgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1421,
					1,
					"insert",
					{
						"characters": "rules"
					},
					"BQAAAOEFAAAAAAAA4gUAAAAAAAAAAAAA4gUAAAAAAADjBQAAAAAAAAAAAADjBQAAAAAAAOQFAAAAAAAAAAAAAOQFAAAAAAAA5QUAAAAAAAAAAAAA5QUAAAAAAADmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QUAAAAAAADhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1423,
					1,
					"insert",
					{
						"characters": "=lexer;"
					},
					"BwAAAOcFAAAAAAAA6AUAAAAAAAAAAAAA6AUAAAAAAADpBQAAAAAAAAAAAADpBQAAAAAAAOoFAAAAAAAAAAAAAOoFAAAAAAAA6wUAAAAAAAAAAAAA6wUAAAAAAADsBQAAAAAAAAAAAADsBQAAAAAAAO0FAAAAAAAAAAAAAO0FAAAAAAAA7gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wUAAAAAAADnBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1436,
					1,
					"insert",
					{
						"characters": ",id"
					},
					"AwAAAPoFAAAAAAAA+wUAAAAAAAAAAAAA+wUAAAAAAAD8BQAAAAAAAAAAAAD8BQAAAAAAAP0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gUAAAAAAAD6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1440,
					3,
					"left_delete",
					null,
					"AwAAAAwGAAAAAAAADAYAAAAAAAABAAAAawsGAAAAAAAACwYAAAAAAAABAAAAbwoGAAAAAAAACgYAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAADQYAAAAAAAANBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1441,
					1,
					"insert",
					{
						"characters": "id"
					},
					"AgAAAAoGAAAAAAAACwYAAAAAAAAAAAAACwYAAAAAAAAMBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgYAAAAAAAAKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1446,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AgAAABgGAAAAAAAAGQYAAAAAAAAAAAAAGQYAAAAAAAAZBgAAAAAAAAYAAAB0VG9rZW4",
					"AQAAAAAAAAABAAAAGAYAAAAAAAAeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1452,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACAGAAAAAAAAIQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAgBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1456,
					1,
					"insert",
					{
						"characters": "id"
					},
					"AgAAACoGAAAAAAAAKwYAAAAAAAAAAAAAKwYAAAAAAAAsBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgYAAAAAAAAqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1457,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAACwGAAAAAAAALQYAAAAAAAAAAAAALQYAAAAAAAAuBgAAAAAAAAAAAAAuBgAAAAAAAC8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAYAAAAAAAAsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1458,
					1,
					"insert",
					{
						"characters": " rules."
					},
					"BwAAAC8GAAAAAAAAMAYAAAAAAAAAAAAAMAYAAAAAAAAxBgAAAAAAAAAAAAAxBgAAAAAAADIGAAAAAAAAAAAAADIGAAAAAAAAMwYAAAAAAAAAAAAAMwYAAAAAAAA0BgAAAAAAAAAAAAA0BgAAAAAAADUGAAAAAAAAAAAAADUGAAAAAAAANgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwYAAAAAAAAvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1459,
					1,
					"left_delete",
					null,
					"AQAAADUGAAAAAAAANQYAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAANgYAAAAAAAA2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1460,
					1,
					"insert",
					{
						"characters": " ["
					},
					"AgAAADUGAAAAAAAANgYAAAAAAAAAAAAANgYAAAAAAAA3BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQYAAAAAAAA1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1461,
					2,
					"left_delete",
					null,
					"AgAAADYGAAAAAAAANgYAAAAAAAABAAAAWzUGAAAAAAAANQYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAANwYAAAAAAAA3BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1462,
					1,
					"insert",
					{
						"characters": "['struct']"
					},
					"CgAAADUGAAAAAAAANgYAAAAAAAAAAAAANgYAAAAAAAA3BgAAAAAAAAAAAAA3BgAAAAAAADgGAAAAAAAAAAAAADgGAAAAAAAAOQYAAAAAAAAAAAAAOQYAAAAAAAA6BgAAAAAAAAAAAAA6BgAAAAAAADsGAAAAAAAAAAAAADsGAAAAAAAAPAYAAAAAAAAAAAAAPAYAAAAAAAA9BgAAAAAAAAAAAAA9BgAAAAAAAD4GAAAAAAAAAAAAAD4GAAAAAAAAPwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQYAAAAAAAA1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1463,
					1,
					"insert",
					{
						"characters": "  ||"
					},
					"BAAAAD8GAAAAAAAAQAYAAAAAAAAAAAAAQAYAAAAAAABBBgAAAAAAAAAAAABBBgAAAAAAAEIGAAAAAAAAAAAAAEIGAAAAAAAAQwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwYAAAAAAAA/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1464,
					1,
					"insert",
					{
						"characters": " id"
					},
					"AwAAAEMGAAAAAAAARAYAAAAAAAAAAAAARAYAAAAAAABFBgAAAAAAAAAAAABFBgAAAAAAAEYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1465,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAEYGAAAAAAAARwYAAAAAAAAAAAAARwYAAAAAAABIBgAAAAAAAAAAAABIBgAAAAAAAEkGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgYAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1466,
					1,
					"insert",
					{
						"characters": " '"
					},
					"AgAAAEkGAAAAAAAASgYAAAAAAAAAAAAASgYAAAAAAABLBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQYAAAAAAABJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1467,
					1,
					"left_delete",
					null,
					"AQAAAEoGAAAAAAAASgYAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAASwYAAAAAAABLBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1468,
					1,
					"insert",
					{
						"characters": "ruoles"
					},
					"BgAAAEoGAAAAAAAASwYAAAAAAAAAAAAASwYAAAAAAABMBgAAAAAAAAAAAABMBgAAAAAAAE0GAAAAAAAAAAAAAE0GAAAAAAAATgYAAAAAAAAAAAAATgYAAAAAAABPBgAAAAAAAAAAAABPBgAAAAAAAFAGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgYAAAAAAABKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1469,
					4,
					"left_delete",
					null,
					"BAAAAE8GAAAAAAAATwYAAAAAAAABAAAAc04GAAAAAAAATgYAAAAAAAABAAAAZU0GAAAAAAAATQYAAAAAAAABAAAAbEwGAAAAAAAATAYAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAUAYAAAAAAABQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1470,
					1,
					"insert",
					{
						"characters": "les['typedef'"
					},
					"DQAAAEwGAAAAAAAATQYAAAAAAAAAAAAATQYAAAAAAABOBgAAAAAAAAAAAABOBgAAAAAAAE8GAAAAAAAAAAAAAE8GAAAAAAAAUAYAAAAAAAAAAAAAUAYAAAAAAABRBgAAAAAAAAAAAABRBgAAAAAAAFIGAAAAAAAAAAAAAFIGAAAAAAAAUwYAAAAAAAAAAAAAUwYAAAAAAABUBgAAAAAAAAAAAABUBgAAAAAAAFUGAAAAAAAAAAAAAFUGAAAAAAAAVgYAAAAAAAAAAAAAVgYAAAAAAABXBgAAAAAAAAAAAABXBgAAAAAAAFgGAAAAAAAAAAAAAFgGAAAAAAAAWQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAYAAAAAAABMBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1471,
					1,
					"insert",
					{
						"characters": "])"
					},
					"AgAAAFkGAAAAAAAAWgYAAAAAAAAAAAAAWgYAAAAAAABbBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQYAAAAAAABZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1474,
					1,
					"cut",
					null,
					"AQAAAFsGAAAAAAAAWwYAAAAAAAAhAAAAeyBzdHJ1Y3Q6IDEsIHR5cGVkZWY6IDEgfVt0eXBlXSkg",
					"AQAAAAAAAAABAAAAWwYAAAAAAAB8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1480,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGMGAAAAAAAAZAYAAAAAAAAAAAAAZAYAAAAAAABqBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwYAAAAAAABjBgAAAAAAAAAAAAAAAEtA"
				],
				[
					1486,
					1,
					"cut",
					null,
					"AQAAAIkGAAAAAAAAiQYAAAAAAAAYAAAAIHRvayA9IGxleGVyLnRva2VuOwogICAg",
					"AQAAAAAAAAABAAAAoQYAAAAAAACJBgAAAAAAAAAAAAAAAEJA"
				],
				[
					1488,
					1,
					"paste",
					null,
					"AQAAAGEGAAAAAAAAeQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQYAAAAAAABhBgAAAAAAAAAAAAAAAEJA"
				],
				[
					1493,
					1,
					"cut",
					null,
					"AQAAAGEGAAAAAAAAYQYAAAAAAAATAAAAIHRvayA9IGxleGVyLnRva2VuOw",
					"AQAAAAAAAAABAAAAYQYAAAAAAAB0BgAAAAAAAP///////+9/"
				],
				[
					1496,
					4,
					"left_delete",
					null,
					"BAAAAIgGAAAAAAAAiAYAAAAAAAABAAAAO4cGAAAAAAAAhwYAAAAAAAABAAAAa4YGAAAAAAAAhgYAAAAAAAABAAAAb4UGAAAAAAAAhQYAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAiQYAAAAAAACJBgAAAAAAAP///////+9/"
				],
				[
					1497,
					1,
					"paste",
					null,
					"AQAAAIUGAAAAAAAAmAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQYAAAAAAACFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1499,
					5,
					"left_delete",
					null,
					"BQAAAGYGAAAAAAAAZgYAAAAAAAACAAAAICBkBgAAAAAAAGQGAAAAAAAAAgAAACAgYgYAAAAAAABiBgAAAAAAAAIAAAAgIGEGAAAAAAAAYQYAAAAAAAABAAAACl8GAAAAAAAAXwYAAAAAAAACAAAAICA",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAcHpA"
				],
				[
					1529,
					1,
					"paste",
					null,
					"AQAAACAGAAAAAAAAQQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAYAAAAAAAAgBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1539,
					1,
					"paste",
					null,
					"AgAAADEGAAAAAAAAMwYAAAAAAAAAAAAAMwYAAAAAAAAzBgAAAAAAAAUAAABsZXhlcg",
					"AQAAAAAAAAABAAAAMQYAAAAAAAA2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1544,
					1,
					"paste",
					null,
					"AgAAADYGAAAAAAAAOAYAAAAAAAAAAAAAOAYAAAAAAAA4BgAAAAAAAAUAAABsZXhlcg",
					"AQAAAAAAAAABAAAANgYAAAAAAAA7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1556,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAAB4GAAAAAAAAHwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgYAAAAAAAAeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1557,
					2,
					"left_delete",
					null,
					"AgAAAB4GAAAAAAAAHgYAAAAAAAABAAAAJB0GAAAAAAAAHQYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAHwYAAAAAAAAfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1558,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAB0GAAAAAAAAHgYAAAAAAAAAAAAAHgYAAAAAAAAiBgAAAAAAAAAAAAAiBgAAAAAAACMGAAAAAAAAAAAAACMGAAAAAAAAJwYAAAAAAAAAAAAAHgYAAAAAAAAeBgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAHQYAAAAAAAAdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1560,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAB4GAAAAAAAAHwYAAAAAAAAAAAAAHwYAAAAAAAAgBgAAAAAAAAAAAAAgBgAAAAAAACEGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgYAAAAAAAAeBgAAAAAAAAAAAAAAAEJA"
				],
				[
					1561,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACEGAAAAAAAAIwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQYAAAAAAAAhBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1562,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACIGAAAAAAAAIwYAAAAAAAAAAAAAIwYAAAAAAAAkBgAAAAAAAAAAAAAkBgAAAAAAACUGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgYAAAAAAAAiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1563,
					1,
					"insert",
					{
						"characters": " id"
					},
					"AwAAACUGAAAAAAAAJgYAAAAAAAAAAAAAJgYAAAAAAAAnBgAAAAAAAAAAAAAnBgAAAAAAACgGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQYAAAAAAAAlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1564,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACgGAAAAAAAAKQYAAAAAAAAAAAAAKQYAAAAAAAAqBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAYAAAAAAAAoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1565,
					1,
					"left_delete",
					null,
					"AQAAACkGAAAAAAAAKQYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAKgYAAAAAAAAqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1566,
					1,
					"insert",
					{
						"characters": "of"
					},
					"AgAAACkGAAAAAAAAKgYAAAAAAAAAAAAAKgYAAAAAAAArBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQYAAAAAAAApBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1567,
					1,
					"insert",
					{
						"characters": " lexer"
					},
					"BgAAACsGAAAAAAAALAYAAAAAAAAAAAAALAYAAAAAAAAtBgAAAAAAAAAAAAAtBgAAAAAAAC4GAAAAAAAAAAAAAC4GAAAAAAAALwYAAAAAAAAAAAAALwYAAAAAAAAwBgAAAAAAAAAAAAAwBgAAAAAAADEGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwYAAAAAAAArBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1569,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADIGAAAAAAAAMwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgYAAAAAAAAyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1575,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPoFAAAAAAAA+wUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gUAAAAAAAD6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1576,
					1,
					"insert",
					{
						"characters": "\n\nlet"
					},
					"CAAAAPsFAAAAAAAA/AUAAAAAAAAAAAAA/AUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAEGAAAAAAAAAAAAAAEGAAAAAAAABQYAAAAAAAAAAAAA/AUAAAAAAAD8BQAAAAAAAAQAAAAgICAgAQYAAAAAAAACBgAAAAAAAAAAAAACBgAAAAAAAAMGAAAAAAAAAAAAAAMGAAAAAAAABAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wUAAAAAAAD7BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1577,
					1,
					"right_delete",
					null,
					"AQAAAAQGAAAAAAAABAYAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAABAYAAAAAAAAEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1578,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAQGAAAAAAAABQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAYAAAAAAAAEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1580,
					4,
					"right_delete",
					null,
					"BAAAAAgGAAAAAAAACAYAAAAAAAABAAAACggGAAAAAAAACAYAAAAAAAABAAAAIAgGAAAAAAAACAYAAAAAAAABAAAAIAgGAAAAAAAACAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAACAYAAAAAAAAIBgAAAAAAAP///////+9/"
				],
				[
					1582,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAAEGAAAAAAAAAgYAAAAAAAAAAAAAAgYAAAAAAAADBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQYAAAAAAAABBgAAAAAAAAAAAAAAAEJA"
				],
				[
					1589,
					1,
					"cut",
					null,
					"AQAAAEIGAAAAAAAAQgYAAAAAAAAcAAAAICAgIGNvbnNvbGUubG9nKCdpZCcsIGlkKTsKCg",
					"AQAAAAAAAAABAAAAQgYAAAAAAABeBgAAAAAAAAAAAAAAAAAA"
				],
				[
					1591,
					1,
					"paste",
					null,
					"AQAAAH4GAAAAAAAAmgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgYAAAAAAAB+BgAAAAAAAAAAAAAAAAAA"
				],
				[
					1595,
					1,
					"cut",
					null,
					"AQAAAH4GAAAAAAAAfgYAAAAAAAAcAAAAICAgIGNvbnNvbGUubG9nKCdpZCcsIGlkKTsKCg",
					"AQAAAAAAAAABAAAAmgYAAAAAAAB+BgAAAAAAAAAAAAAAAAAA"
				],
				[
					1598,
					1,
					"paste",
					null,
					"AQAAALMGAAAAAAAAzwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswYAAAAAAACzBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1608,
					1,
					"paste",
					null,
					"AgAAAMQGAAAAAAAAxwYAAAAAAAAAAAAAxwYAAAAAAADHBgAAAAAAAAIAAABpZA",
					"AQAAAAAAAAABAAAAxAYAAAAAAADGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1613,
					1,
					"paste",
					null,
					"AgAAAMoGAAAAAAAAzQYAAAAAAAAAAAAAzQYAAAAAAADNBgAAAAAAAAIAAABpZA",
					"AQAAAAAAAAABAAAAygYAAAAAAADMBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1622,
					1,
					"cut",
					null,
					"AQAAABEFAAAAAAAAEQUAAAAAAABBAAAAICAgIGNvbnNvbGUubG9nKGBsZXhlci5ydWxlc1snc3RydWN0J11gLCBsZXhlci5ydWxlc1snc3RydWN0J10pOwo",
					"AQAAAAAAAAABAAAAEQUAAAAAAABSBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1623,
					2,
					"paste",
					null,
					"AgAAABEFAAAAAAAAUgUAAAAAAAAAAAAAUgUAAAAAAACTBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQUAAAAAAAARBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1628,
					1,
					"insert",
					{
						"characters": "tokens"
					},
					"BwAAACgFAAAAAAAAKQUAAAAAAAAAAAAAKQUAAAAAAAApBQAAAAAAAA8AAABydWxlc1snc3RydWN0J10pBQAAAAAAACoFAAAAAAAAAAAAACoFAAAAAAAAKwUAAAAAAAAAAAAAKwUAAAAAAAAsBQAAAAAAAAAAAAAsBQAAAAAAAC0FAAAAAAAAAAAAAC0FAAAAAAAALgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAUAAAAAAAA3BQAAAAAAAAAAAAAAAPC/"
				],
				[
					1634,
					1,
					"paste",
					null,
					"AgAAADEFAAAAAAAAPQUAAAAAAAAAAAAAPQUAAAAAAAA9BQAAAAAAABUAAABsZXhlci5ydWxlc1snc3RydWN0J10",
					"AQAAAAAAAAABAAAAMQUAAAAAAABGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					1639,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUGAAAAAAAAFgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQYAAAAAAAAVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1640,
					1,
					"left_delete",
					null,
					"AQAAABUGAAAAAAAAFQYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAFgYAAAAAAAAWBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1641,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABUGAAAAAAAAFgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQYAAAAAAAAVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1642,
					1,
					"insert",
					{
						"characters": " tokens"
					},
					"BwAAABYGAAAAAAAAFwYAAAAAAAAAAAAAFwYAAAAAAAAYBgAAAAAAAAAAAAAYBgAAAAAAABkGAAAAAAAAAAAAABkGAAAAAAAAGgYAAAAAAAAAAAAAGgYAAAAAAAAbBgAAAAAAAAAAAAAbBgAAAAAAABwGAAAAAAAAAAAAABwGAAAAAAAAHQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgYAAAAAAAAWBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1730,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAYHAAAAAAAACAcAAAAAAAAAAAAAugYAAAAAAAC8BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugYAAAAAAAAGBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1738,
					1,
					"insert",
					{
						"characters": "tij"
					},
					"AwAAABUHAAAAAAAAFgcAAAAAAAAAAAAAFgcAAAAAAAAXBwAAAAAAAAAAAAAXBwAAAAAAABgHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQcAAAAAAAAVBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1739,
					2,
					"left_delete",
					null,
					"AgAAABcHAAAAAAAAFwcAAAAAAAABAAAAahYHAAAAAAAAFgcAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAGAcAAAAAAAAYBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1740,
					1,
					"insert",
					{
						"characters": "ok."
					},
					"AwAAABYHAAAAAAAAFwcAAAAAAAAAAAAAFwcAAAAAAAAYBwAAAAAAAAAAAAAYBwAAAAAAABkHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgcAAAAAAAAWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1749,
					1,
					"insert",
					{
						"characters": "tok,."
					},
					"BQAAAFIHAAAAAAAAUwcAAAAAAAAAAAAAUwcAAAAAAABUBwAAAAAAAAAAAABUBwAAAAAAAFUHAAAAAAAAAAAAAFUHAAAAAAAAVgcAAAAAAAAAAAAAVgcAAAAAAABXBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgcAAAAAAABSBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1754,
					2,
					"left_delete",
					null,
					"AgAAAFYHAAAAAAAAVgcAAAAAAAABAAAALlUHAAAAAAAAVQcAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAVwcAAAAAAABXBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1755,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAFUHAAAAAAAAVgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQcAAAAAAABVBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1758,
					1,
					"cut",
					null,
					"AQAAANcGAAAAAAAA1wYAAAAAAAASAAAAdG9rID0gbGV4ZXIudG9rZW47",
					"AQAAAAAAAAABAAAA1wYAAAAAAADpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1761,
					1,
					"paste",
					null,
					"AQAAAPkGAAAAAAAACwcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QYAAAAAAAD5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1764,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABACgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZ2V0T3B0LCBlc2NhcGUsIGV4dGVuZEFycmF5IH0gZnJvbSAndXRpbCc7CgpleHRlbmRBcnJheSgpOwoKY29uc3QgTm9uV1MgPSB0ID0+IHQudHlwZSAhPSAnd2hpdGVzcGFjZSc7CmNvbnN0IFdTID0gdCA9PiB0LnR5cGUgPT0gJ3doaXRlc3BhY2UnOwoKZnVuY3Rpb24gcGFyc2UobGV4ZXIsIGZuID0gKHRvaywgYXJyKSA9PiB7fSwgLi4uYXJncykgewogIGxldCBpID0gMCwKICAgIHRvaywKICAgIGFyciA9IFsuLi5hcmdzXTsKCiAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgLy9jb25zb2xlLmxvZygncGFyc2UnLCB7IGk6IGkrKywgdG9rLCBmbjogZm4gKyAnJyB9KTsKICAgIGxldCB2ID0gZm4odG9rLCBhcnIpOwogICAgaWYodiA8IDApIGJyZWFrOwogICAgYXJyLnB1c2godG9rKTsKICAgIGlmKHYpIGJyZWFrOwogIH0KICByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShwcm9jZXNzLnN0ZGVyciwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IDEwMCwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZQogICAgfQogIH0pOwoKICBsZXQgb3V0cHV0TmFtZSwKICAgIG91dHB1dCA9IHN0ZC5vdXQ7CiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgZmlsZSA9PiAob3V0cHV0ID0gc3RkLm9wZW4oKG91dHB1dE5hbWUgPSBmaWxlKSwgJ3crJykpLCAnbyddLAogICAgICAnQCc6ICdmaWxlcycKICAgIH0sCiAgICBhcmdzCiAgKTsKICBsZXQgZmlsZXMgPSBwYXJhbXNbJ0AnXTsKCiAgZm9yKGxldCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zb2xlLmxvZygnZmlsZScsIGZpbGUpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoZmlsZSk7CiAgICBjb25zb2xlLmxvZygnc3RyJywgc3RyLnNwbGl0KCdcbicpWzBdKTsKCiAgICBsZXQgbGV4ZXIgPSBuZXcgQ0xleGVyKHN0ciwgZmlsZSk7CiAgICBjb25zb2xlLmxvZygnbGV4ZXInLCBsZXhlcik7CiAgICBjb25zb2xlLmxvZyhgbGV4ZXIudG9rZW5zYCwgbGV4ZXIudG9rZW5zKTsKICAgIGNvbnNvbGUubG9nKGBsZXhlci5ydWxlc1snc3RydWN0J11gLCBsZXhlci5ydWxlc1snc3RydWN0J10pOwogICAgY29uc29sZS5sb2coYGxleGVyLnJ1bGVzWyd0eXBlZGVmJ11gLCBsZXhlci5ydWxlc1sndHlwZWRlZiddKTsKICAgIGNvbnNvbGUubG9nKGBsZXhlci5nZXRSdWxlKCdzdHJ1Y3QnKWAsIGxleGVyLmdldFJ1bGUoJ3N0cnVjdCcpKTsKY29uc3Qge3J1bGVzLCB0b2tlbnN9PWxleGVyOwogICAgbGV0IHRvazsKCiAgICAvL2xldCBpZDsgd2hpbGUoKGlkID0gbGV4ZXIubmV4dCgpKSkKZm9yKGxldCBpZCBvZiBsZXhlcikgCiAgICB7CiAgICAgIGlmKGlkID09IHJ1bGVzWydzdHJ1Y3QnXSAgfHwgaWQgPT0gcnVsZXNbJ3R5cGVkZWYnXSl7CiAgCiAgLyogICAgY29uc3QgeyBsb2MsIHR5cGUgfSA9ICAKICAgICAgY29uc29sZS5sb2coJ3RvaycsIHRvayk7Ki8KdG9rID0gbGV4ZXIudG9rZW47CiAgICAgIGlmKHRvay5sb2MuY29sdW1uID09IDEpIHsKICAgICAgICAgIGxldCBzZXEsCiAgICAgICAgICAgIGxpbmUgPSB0b2subG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKICAgICAgICAgIHNlcSA9IHBhcnNlKGxleGVyLCAodG9rLCBhcnIpID0+IHRvay5sb2MubGluZSAhPSBsaW5lICYmIC0xLCB0b2spOwogICAgICAgICAgY29uc3QgbGFzdCA9IHNlcS5maWx0ZXIoTm9uV1MpLmF0KC0xKTsKICAgICAgICAgIGlmKGxhc3QudHlwZSA9PSAnbGJyYWNlJykgewogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmNvbHVtbiA9PSAxICYmIHRvay50eXBlID09ICdyYnJhY2UnLCAuLi5zZXEpOwogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2sudHlwZSA9PSAnc2VtaScsIC4uLnNlcSk7CiAgICAgICAgICB9CiAgICAgICAgICBvdXRwdXQucHV0cyhzZXEucmVkdWNlKChzLCB0KSA9PiBzICsgdC5sZXhlbWUsICcnKS50cmltKCkgKyAnXG5cbicpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgb3V0cHV0LmZsdXNoKCk7CiAgICB9CiAgfQoKICBpZihvdXRwdXROYW1lKSBjb25zb2xlLmxvZyhvdXRwdXQudGVsbCgpICsgYCBieXRlcyB3cml0dGVuIHRvICcke291dHB1dE5hbWV9J2ApOwogIG91dHB1dC5jbG9zZSgpOwp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKICBzdGQuZXhpdCgxKTsKfQoAAAAAAAAAAFQKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwcAAAAAAAALBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1767,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAAgGAAAAAAAACgYAAAAAAAAAAAAA8gQAAAAAAAD0BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gQAAAAAAAAIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1770,
					1,
					"cut",
					null,
					"AQAAADYGAAAAAAAANgYAAAAAAAAJAAAAbGV0IHRvazsK",
					"AQAAAAAAAAABAAAANgYAAAAAAAA/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1773,
					1,
					"paste",
					null,
					"AgAAAAUHAAAAAAAADgcAAAAAAAAAAAAADgcAAAAAAAAOBwAAAAAAAAYAAAAgdG9rID0",
					"AQAAAAAAAAABAAAABQcAAAAAAAALBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1774,
					2,
					"left_delete",
					null,
					"AgAAAA0HAAAAAAAADQcAAAAAAAABAAAACgwHAAAAAAAADAcAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAADgcAAAAAAAAOBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1775,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAAwHAAAAAAAADQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAcAAAAAAAAMBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1796,
					1,
					"insert",
					{
						"characters": "lex"
					},
					"BAAAACYHAAAAAAAAJwcAAAAAAAAAAAAAJwcAAAAAAAAnBwAAAAAAAAMAAAB0b2snBwAAAAAAACgHAAAAAAAAAAAAACgHAAAAAAAAKQcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgcAAAAAAAApBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1805,
					1,
					"insert",
					{
						"characters": "lex"
					},
					"BAAAAGMHAAAAAAAAZAcAAAAAAAAAAAAAZAcAAAAAAABkBwAAAAAAAAMAAAB0b2tkBwAAAAAAAGUHAAAAAAAAAAAAAGUHAAAAAAAAZgcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwcAAAAAAABmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1810,
					1,
					"insert",
					{
						"characters": "er"
					},
					"AgAAAGYHAAAAAAAAZwcAAAAAAAAAAAAAZwcAAAAAAABoBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgcAAAAAAABmBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1820,
					1,
					"paste",
					null,
					"AgAAAA4HAAAAAAAAEwcAAAAAAAAAAAAAEwcAAAAAAAATBwAAAAAAAAUAAABsZXhlcg",
					"AQAAAAAAAAABAAAADgcAAAAAAAATBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1830,
					1,
					"paste",
					null,
					"AgAAACYHAAAAAAAAKwcAAAAAAAAAAAAAKwcAAAAAAAArBwAAAAAAAAMAAABsZXg",
					"AQAAAAAAAAABAAAAJgcAAAAAAAApBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1840,
					1,
					"left_delete",
					null,
					"AQAAAL8GAAAAAAAAvwYAAAAAAABFAAAALyogICAgY29uc3QgeyBsb2MsIHR5cGUgfSA9ICAKICAgICAgY29uc29sZS5sb2coJ3RvaycsIHRvayk7Ki8KICAgICAg",
					"AQAAAAAAAAABAAAAvwYAAAAAAAAEBwAAAAAAAAAAAAAAAEtA"
				],
				[
					1845,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAL8GAAAAAAAAwAYAAAAAAAAAAAAAwAYAAAAAAADIBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwYAAAAAAAC/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					1850,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACYGAAAAAAAAJwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgYAAAAAAAAmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1851,
					1,
					"insert",
					{
						"characters": " loc"
					},
					"BAAAACcGAAAAAAAAKAYAAAAAAAAAAAAAKAYAAAAAAAApBgAAAAAAAAAAAAApBgAAAAAAACoGAAAAAAAAAAAAACoGAAAAAAAAKwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwYAAAAAAAAnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1883,
					1,
					"paste",
					null,
					"AQAAAMIGAAAAAAAA7AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgYAAAAAAADCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1886,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAM4GAAAAAAAAzwYAAAAAAAAAAAAAzwYAAAAAAADPBgAAAAAAAA8AAABydWxlcywgdG9rZW5zLCA",
					"AQAAAAAAAAABAAAAzgYAAAAAAADdBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1891,
					2,
					"right_delete",
					null,
					"AgAAAAsHAAAAAAAACwcAAAAAAAAFAAAAbGV4ZXILBwAAAAAAAAsHAAAAAAAAAQAAAC4",
					"AQAAAAAAAAABAAAACwcAAAAAAAAQBwAAAAAAAAAAAAAAAPC/"
				],
				[
					1896,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAANIGAAAAAAAA0wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gYAAAAAAADSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1897,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANMGAAAAAAAA1AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wYAAAAAAADTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1898,
					2,
					"left_delete",
					null,
					"AgAAANMGAAAAAAAA0wYAAAAAAAABAAAAINIGAAAAAAAA0gYAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA1AYAAAAAAADUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1899,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANIGAAAAAAAA0wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gYAAAAAAADSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1900,
					1,
					"insert",
					{
						"characters": " token:"
					},
					"BwAAANMGAAAAAAAA1AYAAAAAAAAAAAAA1AYAAAAAAADVBgAAAAAAAAAAAADVBgAAAAAAANYGAAAAAAAAAAAAANYGAAAAAAAA1wYAAAAAAAAAAAAA1wYAAAAAAADYBgAAAAAAAAAAAADYBgAAAAAAANkGAAAAAAAAAAAAANkGAAAAAAAA2gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wYAAAAAAADTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1901,
					1,
					"insert",
					{
						"characters": " tok"
					},
					"BAAAANoGAAAAAAAA2wYAAAAAAAAAAAAA2wYAAAAAAADcBgAAAAAAAAAAAADcBgAAAAAAAN0GAAAAAAAAAAAAAN0GAAAAAAAA3gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gYAAAAAAADaBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1908,
					1,
					"left_delete",
					null,
					"AQAAAO0GAAAAAAAA7QYAAAAAAAAfAAAAICAgICAgICAgbGV0IHRvaz0gbGV4ZXIudG9rZW47Cg",
					"AQAAAAAAAAABAAAA7QYAAAAAAAAMBwAAAAAAAAAAAAAAAAAA"
				],
				[
					1923,
					2,
					"right_delete",
					null,
					"AgAAADEHAAAAAAAAMQcAAAAAAAAFAAAAbGV4ZXIxBwAAAAAAADEHAAAAAAAAAQAAAC4",
					"AQAAAAAAAAABAAAAMQcAAAAAAAA2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					1932,
					3,
					"left_delete",
					null,
					"AwAAACgGAAAAAAAAKAYAAAAAAAADAAAAbG9jJwYAAAAAAAAnBgAAAAAAAAEAAAAgJgYAAAAAAAAmBgAAAAAAAAEAAAAs",
					"AQAAAAAAAAABAAAAKAYAAAAAAAArBgAAAAAAAAAAAAAAAPC/"
				],
				[
					1937,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAWCgAAIyEvdXNyL2Jpbi9lbnYgcWpzbQppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7CmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7CmltcG9ydCB7IENvbnNvbGUgfSBmcm9tICdjb25zb2xlJzsKaW1wb3J0IENMZXhlciBmcm9tICdsaWIvY2xleGVyLmpzJzsKaW1wb3J0IHsgZ2V0T3B0LCBlc2NhcGUsIGV4dGVuZEFycmF5IH0gZnJvbSAndXRpbCc7CgpleHRlbmRBcnJheSgpOwoKY29uc3QgTm9uV1MgPSB0ID0+IHQudHlwZSAhPSAnd2hpdGVzcGFjZSc7CmNvbnN0IFdTID0gdCA9PiB0LnR5cGUgPT0gJ3doaXRlc3BhY2UnOwoKZnVuY3Rpb24gcGFyc2UobGV4ZXIsIGZuID0gKHRvaywgYXJyKSA9PiB7fSwgLi4uYXJncykgewogIGxldCBpID0gMCwKICAgIHRvaywKICAgIGFyciA9IFsuLi5hcmdzXTsKCiAgd2hpbGUoKHRvayA9IGxleGVyLm5leHRUb2tlbigpKSkgewogICAgLy9jb25zb2xlLmxvZygncGFyc2UnLCB7IGk6IGkrKywgdG9rLCBmbjogZm4gKyAnJyB9KTsKICAgIGxldCB2ID0gZm4odG9rLCBhcnIpOwogICAgaWYodiA8IDApIGJyZWFrOwogICAgYXJyLnB1c2godG9rKTsKICAgIGlmKHYpIGJyZWFrOwogIH0KICByZXR1cm4gYXJyOwp9CgpmdW5jdGlvbiBtYWluKC4uLmFyZ3MpIHsKICBnbG9iYWxUaGlzLmNvbnNvbGUgPSBuZXcgQ29uc29sZShwcm9jZXNzLnN0ZGVyciwgewogICAgaW5zcGVjdE9wdGlvbnM6IHsKICAgICAgY29sb3JzOiB0cnVlLAogICAgICBtYXhTdHJpbmdMZW5ndGg6IDEwMCwKICAgICAgbWF4QXJyYXlMZW5ndGg6IEluZmluaXR5LAogICAgICBjb21wYWN0OiBmYWxzZQogICAgfQogIH0pOwoKICBsZXQgb3V0cHV0TmFtZSwKICAgIG91dHB1dCA9IHN0ZC5vdXQ7CiAgbGV0IHBhcmFtcyA9IGdldE9wdCgKICAgIHsKICAgICAgb3V0cHV0OiBbdHJ1ZSwgZmlsZSA9PiAob3V0cHV0ID0gc3RkLm9wZW4oKG91dHB1dE5hbWUgPSBmaWxlKSwgJ3crJykpLCAnbyddLAogICAgICAnQCc6ICdmaWxlcycKICAgIH0sCiAgICBhcmdzCiAgKTsKICBsZXQgZmlsZXMgPSBwYXJhbXNbJ0AnXTsKCiAgZm9yKGxldCBmaWxlIG9mIGZpbGVzKSB7CiAgICBjb25zb2xlLmxvZygnZmlsZScsIGZpbGUpOwoKICAgIGxldCBzdHIgPSBzdGQubG9hZEZpbGUoZmlsZSk7CiAgICBjb25zb2xlLmxvZygnc3RyJywgc3RyLnNwbGl0KCdcbicpWzBdKTsKCiAgICBsZXQgbGV4ZXIgPSBuZXcgQ0xleGVyKHN0ciwgZmlsZSk7CiAgLyogIGNvbnNvbGUubG9nKCdsZXhlcicsIGxleGVyKTsKICAgIGNvbnNvbGUubG9nKGBsZXhlci50b2tlbnNgLCBsZXhlci50b2tlbnMpOwogICAgY29uc29sZS5sb2coYGxleGVyLnJ1bGVzWydzdHJ1Y3QnXWAsIGxleGVyLnJ1bGVzWydzdHJ1Y3QnXSk7CiAgICBjb25zb2xlLmxvZyhgbGV4ZXIucnVsZXNbJ3R5cGVkZWYnXWAsIGxleGVyLnJ1bGVzWyd0eXBlZGVmJ10pOwogICAgY29uc29sZS5sb2coYGxleGVyLmdldFJ1bGUoJ3N0cnVjdCcpYCwgbGV4ZXIuZ2V0UnVsZSgnc3RydWN0JykpOyovCiAgICBjb25zdCB7IHJ1bGVzLCB0b2tlbnMgfSA9IGxleGVyOwogICAgCiAgICAvL2xldCBpZDsgd2hpbGUoKGlkID0gbGV4ZXIubmV4dCgpKSkKICAgIGZvcihsZXQgaWQgb2YgbGV4ZXIpIHsKICAgICAgaWYoaWQgPT0gcnVsZXNbJ3N0cnVjdCddIHx8IGlkID09IHJ1bGVzWyd0eXBlZGVmJ10pIHsKICAgICAgICAgIGNvbnN0IHsgIGxvYywgdG9rZW46IHRvayB9ID0gbGV4ZXI7CiAgCiAgICAgICAgaWYobG9jLmNvbHVtbiA9PSAxKSB7CiAgICAgICAgICBsZXQgc2VxLAogICAgICAgICAgICBsaW5lID0gbG9jLmxpbmUsCiAgICAgICAgICAgIHRleHQgPSAnJzsKICAgICAgICAgIHNlcSA9IHBhcnNlKGxleGVyLCAodG9rLCBhcnIpID0+IHRvay5sb2MubGluZSAhPSBsaW5lICYmIC0xLCB0b2spOwogICAgICAgICAgY29uc3QgbGFzdCA9IHNlcS5maWx0ZXIoTm9uV1MpLmF0KC0xKTsKICAgICAgICAgIGlmKGxhc3QudHlwZSA9PSAnbGJyYWNlJykgewogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2subG9jLmNvbHVtbiA9PSAxICYmIHRvay50eXBlID09ICdyYnJhY2UnLCAuLi5zZXEpOwogICAgICAgICAgICBzZXEgPSBwYXJzZShsZXhlciwgKHRvaywgYXJyKSA9PiB0b2sudHlwZSA9PSAnc2VtaScsIC4uLnNlcSk7CiAgICAgICAgICB9CiAgICAgICAgICBvdXRwdXQucHV0cyhzZXEucmVkdWNlKChzLCB0KSA9PiBzICsgdC5sZXhlbWUsICcnKS50cmltKCkgKyAnXG5cbicpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgb3V0cHV0LmZsdXNoKCk7CiAgICB9CiAgfQoKICBpZihvdXRwdXROYW1lKSBjb25zb2xlLmxvZyhvdXRwdXQudGVsbCgpICsgYCBieXRlcyB3cml0dGVuIHRvICcke291dHB1dE5hbWV9J2ApOwogIG91dHB1dC5jbG9zZSgpOwp9Cgp0cnkgewogIG1haW4oLi4uc2NyaXB0QXJncy5zbGljZSgxKSk7Cn0gY2F0Y2goZXJyb3IpIHsKICBjb25zb2xlLmxvZyhgRkFJTDogJHtlcnJvci5tZXNzYWdlfVxuJHtlcnJvci5zdGFja31gKTsKICBzdGQuZXhpdCgxKTsKfQoAAAAAAAAAAA8KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wYAAAAAAADnBgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-mmap.c",
			"settings":
			{
				"buffer_size": 6100,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqwoAAAAAAAC7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqwoAAAAAAAC7CgAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAqwoAAAAAAAC7CgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-misc.c",
			"settings":
			{
				"buffer_size": 62731,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					44,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAgdAAAAAAAACS0AAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/fs.js",
			"settings":
			{
				"buffer_size": 15518,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"insert",
					{
						"characters": ",l"
					},
					"AgAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACmAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					3,
					"left_delete",
					null,
					"AwAAAKUAAAAAAAAApQAAAAAAAAABAAAAIKQAAAAAAAAApAAAAAAAAAABAAAAIKMAAAAAAAAAowAAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"paste",
					null,
					"AQAAAKMAAAAAAAAAtAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOxMAAAAAAABDEwAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAOxMAAAAAAABDEwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/clexer.js",
			"settings":
			{
				"buffer_size": 2727,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABEKAAAAAAAAEgoAAAAAAAAAAAAAEgoAAAAAAAAUCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQoAAAAAAAARCgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					2,
					"left_delete",
					null,
					"AgAAABIKAAAAAAAAEgoAAAAAAAACAAAAICARCgAAAAAAABEKAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAFAoAAAAAAAAUCgAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "\n\nCLE"
					},
					"BQAAADAKAAAAAAAAMQoAAAAAAAAAAAAAMQoAAAAAAAAyCgAAAAAAAAAAAAAyCgAAAAAAADMKAAAAAAAAAAAAADMKAAAAAAAANAoAAAAAAAAAAAAANAoAAAAAAAA1CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAoAAAAAAAAwCgAAAAAAAP///////+9/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAADQKAAAAAAAANAoAAAAAAAABAAAARQ",
					"AQAAAAAAAAABAAAANQoAAAAAAAA1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "eer.pr"
					},
					"BgAAADQKAAAAAAAANQoAAAAAAAAAAAAANQoAAAAAAAA2CgAAAAAAAAAAAAA2CgAAAAAAADcKAAAAAAAAAAAAADcKAAAAAAAAOAoAAAAAAAAAAAAAOAoAAAAAAAA5CgAAAAAAAAAAAAA5CgAAAAAAADoKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAoAAAAAAAA0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					6,
					"left_delete",
					null,
					"BgAAADkKAAAAAAAAOQoAAAAAAAABAAAAcjgKAAAAAAAAOAoAAAAAAAABAAAAcDcKAAAAAAAANwoAAAAAAAABAAAALjYKAAAAAAAANgoAAAAAAAABAAAAcjUKAAAAAAAANQoAAAAAAAABAAAAZTQKAAAAAAAANAoAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAOgoAAAAAAAA6CgAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "xew"
					},
					"AwAAADQKAAAAAAAANQoAAAAAAAAAAAAANQoAAAAAAAA2CgAAAAAAAAAAAAA2CgAAAAAAADcKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAoAAAAAAAA0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					3,
					"left_delete",
					null,
					"AwAAADYKAAAAAAAANgoAAAAAAAABAAAAdzUKAAAAAAAANQoAAAAAAAABAAAAZTQKAAAAAAAANAoAAAAAAAABAAAAeA",
					"AQAAAAAAAAABAAAANwoAAAAAAAA3CgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "exer.prototype"
					},
					"DgAAADQKAAAAAAAANQoAAAAAAAAAAAAANQoAAAAAAAA2CgAAAAAAAAAAAAA2CgAAAAAAADcKAAAAAAAAAAAAADcKAAAAAAAAOAoAAAAAAAAAAAAAOAoAAAAAAAA5CgAAAAAAAAAAAAA5CgAAAAAAADoKAAAAAAAAAAAAADoKAAAAAAAAOwoAAAAAAAAAAAAAOwoAAAAAAAA8CgAAAAAAAAAAAAA8CgAAAAAAAD0KAAAAAAAAAAAAAD0KAAAAAAAAPgoAAAAAAAAAAAAAPgoAAAAAAAA/CgAAAAAAAAAAAAA/CgAAAAAAAEAKAAAAAAAAAAAAAEAKAAAAAAAAQQoAAAAAAAAAAAAAQQoAAAAAAABCCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAoAAAAAAAA0CgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAEIKAAAAAAAARAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgoAAAAAAABCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "Symbol.t"
					},
					"CAAAAEMKAAAAAAAARAoAAAAAAAAAAAAARAoAAAAAAABFCgAAAAAAAAAAAABFCgAAAAAAAEYKAAAAAAAAAAAAAEYKAAAAAAAARwoAAAAAAAAAAAAARwoAAAAAAABICgAAAAAAAAAAAABICgAAAAAAAEkKAAAAAAAAAAAAAEkKAAAAAAAASgoAAAAAAAAAAAAASgoAAAAAAABLCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwoAAAAAAABDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "oS"
					},
					"AgAAAEsKAAAAAAAATAoAAAAAAAAAAAAATAoAAAAAAABNCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwoAAAAAAABLCgAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "toStringTag",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "toStringTag"
					},
					"AgAAAEoKAAAAAAAASgoAAAAAAAADAAAAdG9TSgoAAAAAAABVCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQoAAAAAAABNCgAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAFYKAAAAAAAAVwoAAAAAAAAAAAAAVwoAAAAAAABYCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgoAAAAAAABWCgAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFgKAAAAAAAAWQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAoAAAAAAABYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAFkKAAAAAAAAWwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQoAAAAAAABZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "CLexer"
					},
					"BgAAAFoKAAAAAAAAWwoAAAAAAAAAAAAAWwoAAAAAAABcCgAAAAAAAAAAAABcCgAAAAAAAF0KAAAAAAAAAAAAAF0KAAAAAAAAXgoAAAAAAAAAAAAAXgoAAAAAAABfCgAAAAAAAAAAAABfCgAAAAAAAGAKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgoAAAAAAABaCgAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGEKAAAAAAAAYgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQoAAAAAAABhCgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"cut",
					null,
					"AQAAADIKAAAAAAAAMgoAAAAAAAAkAAAAQ0xleGVyLnByb3RvdHlwZVtTeW1ib2wudG9TdHJpbmdUYWdd",
					"AQAAAAAAAAABAAAAVgoAAAAAAAAyCgAAAAAAAAAAAAAAAAAA"
				],
				[
					48,
					1,
					"paste",
					null,
					"AQAAADIKAAAAAAAAVgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgoAAAAAAAAyCgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "\ndelete"
					},
					"BwAAADEKAAAAAAAAMgoAAAAAAAAAAAAAMgoAAAAAAAAzCgAAAAAAAAAAAAAzCgAAAAAAADQKAAAAAAAAAAAAADQKAAAAAAAANQoAAAAAAAAAAAAANQoAAAAAAAA2CgAAAAAAAAAAAAA2CgAAAAAAADcKAAAAAAAAAAAAADcKAAAAAAAAOAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQoAAAAAAAAxCgAAAAAAAAAAAAAAQHRA"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADgKAAAAAAAAOQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAoAAAAAAAA4CgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"paste",
					null,
					"AQAAADkKAAAAAAAAXQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQoAAAAAAAA5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAF0KAAAAAAAAXgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQoAAAAAAABdCgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"cut",
					null,
					"AQAAADIKAAAAAAAAMgoAAAAAAAAsAAAAZGVsZXRlIENMZXhlci5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXTs",
					"AQAAAAAAAAABAAAAXgoAAAAAAAAyCgAAAAAAAAAAAAAAAAAA"
				],
				[
					75,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAmAAAAaW1wb3J0IHsgTGV4ZXIsIFRva2VuIH0gZnJvbSAnbGV4ZXInOwo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					2,
					"paste",
					null,
					"AgAAAAAAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAABMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BwAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAwAAAAAAAAAAwAAABMZXhlciwgVG9rZW4wAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAANQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "util"
					},
					"BQAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAAA/AAAAAAAAAAUAAABsZXhlcj8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "define"
					},
					"BgAAAFEKAAAAAAAAUgoAAAAAAAAAAAAAUgoAAAAAAABTCgAAAAAAAAAAAABTCgAAAAAAAFQKAAAAAAAAAAAAAFQKAAAAAAAAVQoAAAAAAAAAAAAAVQoAAAAAAABWCgAAAAAAAAAAAABWCgAAAAAAAFcKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQoAAAAAAABRCgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFcKAAAAAAAAWQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwoAAAAAAABXCgAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "L"
					},
					"AQAAAFgKAAAAAAAAWQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAoAAAAAAABYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"left_delete",
					null,
					"AQAAAFgKAAAAAAAAWAoAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAAWQoAAAAAAABZCgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "CLex"
					},
					"BAAAAFgKAAAAAAAAWQoAAAAAAAAAAAAAWQoAAAAAAABaCgAAAAAAAAAAAABaCgAAAAAAAFsKAAAAAAAAAAAAAFsKAAAAAAAAXAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAoAAAAAAABYCgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert_completion",
					{
						"completion": "CLexer",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "CLexer"
					},
					"AgAAAFgKAAAAAAAAWAoAAAAAAAAEAAAAQ0xleFgKAAAAAAAAXgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAoAAAAAAABcCgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": ".p"
					},
					"AgAAAF4KAAAAAAAAXwoAAAAAAAAAAAAAXwoAAAAAAABgCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgoAAAAAAABeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAAF8KAAAAAAAAXwoAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAYAoAAAAAAABgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "prototype,"
					},
					"CgAAAF8KAAAAAAAAYAoAAAAAAAAAAAAAYAoAAAAAAABhCgAAAAAAAAAAAABhCgAAAAAAAGIKAAAAAAAAAAAAAGIKAAAAAAAAYwoAAAAAAAAAAAAAYwoAAAAAAABkCgAAAAAAAAAAAABkCgAAAAAAAGUKAAAAAAAAAAAAAGUKAAAAAAAAZgoAAAAAAAAAAAAAZgoAAAAAAABnCgAAAAAAAAAAAABnCgAAAAAAAGgKAAAAAAAAAAAAAGgKAAAAAAAAaQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwoAAAAAAABfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkKAAAAAAAAagoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQoAAAAAAABpCgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGoKAAAAAAAAbAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagoAAAAAAABqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGsKAAAAAAAAbAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawoAAAAAAABrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					2,
					"right_delete",
					null,
					"AgAAAGwKAAAAAAAAbAoAAAAAAAABAAAAfWwKAAAAAAAAbAoAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAbAoAAAAAAABsCgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"cut",
					null,
					"AQAAAGwKAAAAAAAAbAoAAAAAAAARAAAACkNMZXhlci5wcm90b3R5cGU",
					"AQAAAAAAAAABAAAAbAoAAAAAAAB9CgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					2,
					"left_delete",
					null,
					"AgAAAIEKAAAAAAAAgQoAAAAAAAABAAAAPYAKAAAAAAAAgAoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAggoAAAAAAACCCgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIAKAAAAAAAAgQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAoAAAAAAACACgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"left_delete",
					null,
					"AQAAAIAKAAAAAAAAgAoAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAgQoAAAAAAACBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAIAKAAAAAAAAgQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAoAAAAAAACACgAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": " })"
					},
					"AwAAAIoKAAAAAAAAiwoAAAAAAAAAAAAAiwoAAAAAAACMCgAAAAAAAAAAAACMCgAAAAAAAI0KAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigoAAAAAAACKCgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lexer.c",
			"settings":
			{
				"buffer_size": 11562,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					42,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAOshAAAAAAAA7CEAAAAAAAAAAAAA7CEAAAAAAADuIQAAAAAAAAAAAADuIQAAAAAAAO8hAAAAAAAAAAAAAO8hAAAAAAAA8SEAAAAAAAAAAAAA7CEAAAAAAADsIQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAA6yEAAAAAAADrIQAAAAAAAAAAAAAA8IVA"
				],
				[
					43,
					1,
					"paste",
					null,
					"AQAAAO8hAAAAAAAA/SEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7yEAAAAAAADvIQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAP0hAAAAAAAA/iEAAAAAAAAAAAAA/iEAAAAAAAAAIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SEAAAAAAAD9IQAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AgAAAP0hAAAAAAAA/iEAAAAAAAAAAAAA/yEAAAAAAAD/IQAAAAAAAAIAAAAgIA",
					"AQAAAAAAAAABAAAA/SEAAAAAAAD9IQAAAAAAAP///////+9/"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAAP0hAAAAAAAA/SEAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAA/iEAAAAAAAD+IQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAP0hAAAAAAAA/yEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/SEAAAAAAAD9IQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "&lex->loc"
					},
					"CQAAAP4hAAAAAAAA/yEAAAAAAAAAAAAA/yEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAEiAAAAAAAAAAAAAAEiAAAAAAAAAiIAAAAAAAAAAAAAAiIAAAAAAAADIgAAAAAAAAAAAAADIgAAAAAAAAQiAAAAAAAAAAAAAAQiAAAAAAAABSIAAAAAAAAAAAAABSIAAAAAAAAGIgAAAAAAAAAAAAAGIgAAAAAAAAciAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/iEAAAAAAAD+IQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAciAAAAAAAACCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAByIAAAAAAAAHIgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAAAciAAAAAAAAByIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAACCIAAAAAAAAIIgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAAciAAAAAAAACCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAByIAAAAAAAAHIgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAgiAAAAAAAACSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACCIAAAAAAAAIIgAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"paste",
					null,
					"AQAAAAkiAAAAAAAAFyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACSIAAAAAAAAJIgAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAAkiAAAAAAAACiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACSIAAAAAAAAJIgAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABUiAAAAAAAAFiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSIAAAAAAAAVIgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"left_delete",
					null,
					"AQAAABUiAAAAAAAAFSIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAFiIAAAAAAAAWIgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "dataa["
					},
					"BgAAABUiAAAAAAAAFiIAAAAAAAAAAAAAFiIAAAAAAAAXIgAAAAAAAAAAAAAXIgAAAAAAABgiAAAAAAAAAAAAABgiAAAAAAAAGSIAAAAAAAAAAAAAGSIAAAAAAAAaIgAAAAAAAAAAAAAaIgAAAAAAABsiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFSIAAAAAAAAVIgAAAAAAAAAAAAAAAPC/"
				],
				[
					72,
					2,
					"left_delete",
					null,
					"AgAAABoiAAAAAAAAGiIAAAAAAAABAAAAWxkiAAAAAAAAGSIAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAGyIAAAAAAAAbIgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "[lex>"
					},
					"BQAAABkiAAAAAAAAGiIAAAAAAAAAAAAAGiIAAAAAAAAbIgAAAAAAAAAAAAAbIgAAAAAAABwiAAAAAAAAAAAAABwiAAAAAAAAHSIAAAAAAAAAAAAAHSIAAAAAAAAeIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGSIAAAAAAAAZIgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"left_delete",
					null,
					"AQAAAB0iAAAAAAAAHSIAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAHiIAAAAAAAAeIgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "->input."
					},
					"CAAAAB0iAAAAAAAAHiIAAAAAAAAAAAAAHiIAAAAAAAAfIgAAAAAAAAAAAAAfIgAAAAAAACAiAAAAAAAAAAAAACAiAAAAAAAAISIAAAAAAAAAAAAAISIAAAAAAAAiIgAAAAAAAAAAAAAiIgAAAAAAACMiAAAAAAAAAAAAACMiAAAAAAAAJCIAAAAAAAAAAAAAJCIAAAAAAAAlIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSIAAAAAAAAdIgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "],"
					},
					"AgAAACgiAAAAAAAAKSIAAAAAAAAAAAAAKSIAAAAAAAAqIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKCIAAAAAAAAoIgAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAACoiAAAAAAAAKyIAAAAAAAAAAAAAKyIAAAAAAAAsIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKiIAAAAAAAAqIgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"paste",
					null,
					"AQAAACwiAAAAAAAAPSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALCIAAAAAAAAsIgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAD4iAAAAAAAAPyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPiIAAAAAAAA+IgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJ0iAAAAAAAAniIAAAAAAAAAAAAAniIAAAAAAACgIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnSIAAAAAAACdIgAAAAAAAP///////+9/"
				],
				[
					101,
					1,
					"left_delete",
					null,
					"AQAAAJ0iAAAAAAAAnSIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAniIAAAAAAACeIgAAAAAAAAAAAAAAAAAA"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAI8iAAAAAAAAkCIAAAAAAAAAAAAAkCIAAAAAAACSIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjyIAAAAAAACPIgAAAAAAAP///////+9/"
				],
				[
					212,
					1,
					"insert",
					{
						"characters": "keb"
					},
					"BAAAAO4hAAAAAAAA7yEAAAAAAAAAAAAAkSIAAAAAAACRIgAAAAAAAAIAAAAgIO8hAAAAAAAA8CEAAAAAAAAAAAAA8CEAAAAAAADxIQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7iEAAAAAAADuIQAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					4,
					"left_delete",
					null,
					"BAAAAPAhAAAAAAAA8CEAAAAAAAABAAAAYu8hAAAAAAAA7yEAAAAAAAABAAAAZe4hAAAAAAAA7iEAAAAAAAABAAAAa+0hAAAAAAAA7SEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA8SEAAAAAAADxIQAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "len="
					},
					"BAAAAO0hAAAAAAAA7iEAAAAAAAAAAAAA7iEAAAAAAADvIQAAAAAAAAAAAADvIQAAAAAAAPAhAAAAAAAAAAAAAPAhAAAAAAAA8SEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7SEAAAAAAADtIQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "(/("
					},
					"AwAAAEYiAAAAAAAARyIAAAAAAAAAAAAARyIAAAAAAABIIgAAAAAAAAAAAABIIgAAAAAAAEkiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARiIAAAAAAABGIgAAAAAAAAAAAAAAADJA"
				],
				[
					219,
					3,
					"left_delete",
					null,
					"AwAAAEgiAAAAAAAASCIAAAAAAAABAAAAKEciAAAAAAAARyIAAAAAAAABAAAAL0YiAAAAAAAARiIAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAASSIAAAAAAABJIgAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAEYiAAAAAAAARyIAAAAAAAAAAAAARyIAAAAAAABIIgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARiIAAAAAAABGIgAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"paste",
					null,
					"AQAAAEMiAAAAAAAAUSIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQyIAAAAAAABDIgAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFEiAAAAAAAAUiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUSIAAAAAAABRIgAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": " +="
					},
					"AwAAAFIiAAAAAAAAUyIAAAAAAAAAAAAAUyIAAAAAAABUIgAAAAAAAAAAAABUIgAAAAAAAFUiAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUiIAAAAAAABSIgAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFUiAAAAAAAAViIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVSIAAAAAAABVIgAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"paste",
					null,
					"AQAAAFYiAAAAAAAAZiIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAViIAAAAAAABWIgAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGYiAAAAAAAAZyIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZiIAAAAAAABmIgAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAGciAAAAAAAAaCIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZyIAAAAAAABnIgAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAuiIAAAAAAAC6IgAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "ret"
					},
					"BAAAAPMfAAAAAAAA9B8AAAAAAAAAAAAA9B8AAAAAAAD0HwAAAAAAAAEAAABp9B8AAAAAAAD1HwAAAAAAAAAAAAD1HwAAAAAAAPYfAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8x8AAAAAAAD0HwAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA9h8AAAAAAAD2HwAAAAAAAAAAAAAAAPC/"
				],
				[
					328,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAESIAAAAAAAARIgAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqLQAAI2luY2x1ZGUgImxleGVyLmgiCiNpbmNsdWRlICJkZWJ1Zy5oIgojaW5jbHVkZSAibG9jYXRpb24uaCIKI2luY2x1ZGUgPGxpYnJlZ2V4cC5oPgojaW5jbHVkZSA8Y3R5cGUuaD4KI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgoKLyoqCiAqIFxhZGR0b2dyb3VwIGxleGVyCiAqIEB7CiAqLwppbnQKbGV4ZXJfc3RhdGVfZmluZGIoTGV4ZXIqIGxleCwgY29uc3QgY2hhciogc3RhdGUsIHNpemVfdCBzbGVuKSB7CiAgaW50IHJldCA9IC0xOwogIGNoYXIqKiBzdGF0ZXA7CgogIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+c3RhdGVzLCBzdGF0ZXApIHsKICAgICsrcmV0OwoKICAgIGlmKHN0cmxlbigoKnN0YXRlcCkpID09IHNsZW4gJiYgIXN0cm5jbXAoKCpzdGF0ZXApLCBzdGF0ZSwgc2xlbikpCiAgICAgIHJldHVybiByZXQ7CiAgfQoKICByZXR1cm4gLTE7Cn0KCmludApsZXhlcl9zdGF0ZV9uZXcoTGV4ZXIqIGxleCwgY29uc3QgY2hhciogbmFtZSwgc2l6ZV90IGxlbikgewogIGNoYXIqIHN0YXRlOwogIGludCByZXQ7CgogIGlmKChyZXQgPSBsZXhlcl9zdGF0ZV9maW5kYihsZXgsIG5hbWUsIGxlbikpICE9IC0xKQogICAgcmV0dXJuIHJldDsKCiAgc3RhdGUgPSBzdHJfbmR1cChuYW1lLCBsZW4pOwogIHJldCA9IHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlcywgc2l6ZW9mKGNoYXIqKSk7CiAgdmVjdG9yX3B1c2goJmxleC0+c3RhdGVzLCBzdGF0ZSk7CiAgcmV0dXJuIHJldDsKfQoKaW50CmxleGVyX3N0YXRlX3B1c2goTGV4ZXIqIGxleCwgY29uc3QgY2hhciogc3RhdGUpIHsKICBpbnQzMl90IGlkOwojaWZkZWYgREVCVUdfT1VUUFVUXwogIHByaW50ZigibGV4ZXJfc3RhdGVfcHVzaCglenUpOiAlc1xuIiwgdmVjdG9yX3NpemUoJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSksIHN0YXRlKTsKI2VuZGlmCiAgaWYoKGlkID0gbGV4ZXJfc3RhdGVfZmluZGIobGV4LCBzdGF0ZSwgc3RybGVuKHN0YXRlKSkpID49IDApIHsKICAgIHZlY3Rvcl9wdXNoKCZsZXgtPnN0YXRlX3N0YWNrLCBsZXgtPnN0YXRlKTsKICAgIGxleC0+c3RhdGUgPSBpZDsKICB9CiAgYXNzZXJ0KGlkID49IDApOwogIHJldHVybiBpZDsKfQoKaW50CmxleGVyX3N0YXRlX3BvcChMZXhlciogbGV4KSB7CiAgaW50MzJfdCBpZDsKICBzaXplX3QgbiA9IHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCkpIC0gMTsKICBpZCA9IGxleC0+c3RhdGU7CiNpZmRlZiBERUJVR19PVVRQVVRfCiAgcHJpbnRmKCJsZXhlcl9zdGF0ZV9wb3AoJXp1KTogJXNcbiIsIG4sIGxleGVyX3N0YXRlX25hbWUobGV4LCBpZCkpOwojZW5kaWYKICBpZighdmVjdG9yX2VtcHR5KCZsZXgtPnN0YXRlX3N0YWNrKSkgewogICAgbGV4LT5zdGF0ZSA9ICooaW50MzJfdCopdmVjdG9yX2JhY2soJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSk7CiAgICB2ZWN0b3JfcG9wKCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCkpOwogIH0gZWxzZSB7CiAgICBsZXgtPnN0YXRlID0gLTE7CiAgfQogIHJldHVybiBpZDsKfQoKaW50CmxleGVyX3N0YXRlX3RvcChMZXhlciogbGV4LCBpbnQgaSkgewogIGludCBzejsKICBpZihpID09IDApCiAgICByZXR1cm4gbGV4LT5zdGF0ZTsKICBzeiA9IHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCkpOwogIGlmKGkgLSAxID49IHN6KQogICAgcmV0dXJuIC0xOwoKICBhc3NlcnQoc3ogPj0gaSk7CiAgcmV0dXJuICooaW50MzJfdCopdmVjdG9yX2F0KCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCksIHN6IC0gaSk7Cn0KCmNoYXIqCmxleGVyX3N0YXRlc19za2lwKGNoYXIqIGV4cHIpIHsKICBjaGFyKiByZSA9IGV4cHI7CgogIGlmKCpyZSA9PSAnPCcpIHsKICAgIHNpemVfdCBvZmZzZXQgPSBzdHJfY2hyKHJlLCAnPicpOwoKICAgIGlmKHJlW29mZnNldF0pCiAgICAgIHJlICs9IG9mZnNldCArIDE7CiAgfQogIHJldHVybiByZTsKfQoKdm9pZApsZXhlcl9zdGF0ZXNfZHVtcChMZXhlciogbGV4LCB1aW50NjRfdCBtYXNrLCBEeW5CdWYqIGRidWYpIHsKICBpbnQgc3RhdGUgPSAwOwogIGNoYXIqKiBzdGF0ZXA7CiAgc2l6ZV90IG4gPSBkYnVmLT5zaXplOwoKICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPnN0YXRlcywgc3RhdGVwKSB7CiAgICBpZihtYXNrICYgKDEgPDwgc3RhdGUpKSB7CgogICAgICBpZihkYnVmLT5zaXplID4gbikKICAgICAgICBkYnVmX3B1dGMoZGJ1ZiwgJywnKTsKICAgICAgZGJ1Zl9wdXRzdHIoZGJ1ZiwgKnN0YXRlcCk7CiAgICAgIHN0YXRlKys7CiAgICB9CiAgfQp9CgpjaGFyKgpsZXhlcl9ydWxlX3JlZ2V4KExleGVyUnVsZSogcnVsZSkgewogIHJldHVybiBsZXhlcl9zdGF0ZXNfc2tpcChydWxlLT5leHByKTsKfQoKQk9PTApsZXhlcl9ydWxlX2V4cGFuZChMZXhlciogbGV4LCBjaGFyKiBwLCBEeW5CdWYqIGRiKSB7CiAgc2l6ZV90IGxlbjsKCiAgZGJ1Zl96ZXJvKGRiKTsKCiAgZm9yKDsgKnA7IHArKykgewogICAgaWYoKnAgPT0gJ3snKSB7CiAgICAgIGlmKHBbbGVuID0gc3RyX2NocihwLCAnfScpXSkgewogICAgICAgIExleGVyUnVsZSogc3Vic3Q7CiAgICAgICAgaWYoKHN1YnN0ID0gbGV4ZXJfZmluZF9kZWZpbml0aW9uKGxleCwgcCArIDEsIGxlbiAtIDEpKSkgewogICAgICAgICAgbGV4ZXJfcnVsZV9leHBhbmQobGV4LCBzdWJzdC0+ZXhwciwgZGIpOwogICAgICAgICAgcCArPSBsZW47CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBpZigqcCA9PSAnXFwnKQogICAgICBkYnVmX3B1dGMoZGIsICpwKyspOwogICAgZGJ1Zl9wdXRjKGRiLCAqcCk7CiAgfQogIGRidWZfMChkYik7CgogIC8vIHByaW50ZigiZXhwYW5kICVzICVzXG4iLCBwLCBkYi0+YnVmKTsKCiAgcmV0dXJuIFRSVUU7Cn0KCnN0YXRpYyBCT09MCmxleGVyX3J1bGVfY29tcGlsZShMZXhlciogbGV4LCBMZXhlclJ1bGUqIHJ1bGUsIEpTQ29udGV4dCogY3R4KSB7CiAgRHluQnVmIGRidWY7CiAgQk9PTCByZXQ7CgogIGlmKHJ1bGUtPmJ5dGVjb2RlKQogICAgcmV0dXJuIFRSVUU7CgogIGpzX2RidWZfaW5pdChjdHgsICZkYnVmKTsKCiAgaWYobGV4ZXJfcnVsZV9leHBhbmQobGV4LCBsZXhlcl9ydWxlX3JlZ2V4KHJ1bGUpLCAmZGJ1ZikpIHsKICAgIHJ1bGUtPmV4cGFuc2lvbiA9IGpzX3N0cm5kdXAoY3R4LCAoY29uc3QgY2hhciopZGJ1Zi5idWYsIGRidWYuc2l6ZSk7CiAgICBydWxlLT5ieXRlY29kZSA9IHJlZ2V4cF9jb21waWxlKHJlZ2V4cF9mcm9tX2RidWYoJmRidWYsIExSRV9GTEFHX0dMT0JBTCB8IExSRV9GTEFHX01VTFRJTElORSB8IExSRV9GTEFHX1NUSUNLWSksIGN0eCk7CiAgICByZXQgPSBydWxlLT5ieXRlY29kZSAhPSAwOwoKICB9IGVsc2UgewogICAgSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIkVycm9yIGV4cGFuZGluZyBydWxlICclcyciLCBydWxlLT5uYW1lKTsKICAgIHJldCA9IEZBTFNFOwogIH0KCiAgZGJ1Zl9mcmVlKCZkYnVmKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgaW50CmxleGVyX3J1bGVfbWF0Y2goTGV4ZXIqIGxleCwgTGV4ZXJSdWxlKiBydWxlLCB1aW50OF90KiogY2FwdHVyZSwgSlNDb250ZXh0KiBjdHgpIHsKCiAgaWYocnVsZS0+Ynl0ZWNvZGUgPT0gMCkgewogICAgaWYoIWxleGVyX3J1bGVfY29tcGlsZShsZXgsIHJ1bGUsIGN0eCkpCiAgICAgIHJldHVybiBMRVhFUl9FUlJPUl9DT01QSUxFOwogIH0KCiAgLy8gZnByaW50ZihzdGRlcnIsICJsZXhlcl9ydWxlX21hdGNoICVzICVzICVzXG4iLCBydWxlLT5uYW1lLCBydWxlLT5leHByLCBydWxlLT5leHBhbnNpb24pOwoKICByZXR1cm4gbHJlX2V4ZWMoY2FwdHVyZSwgcnVsZS0+Ynl0ZWNvZGUsICh1aW50OF90KilsZXgtPmlucHV0LmRhdGEsIGxleC0+aW5wdXQucG9zLCBsZXgtPmlucHV0LnNpemUsIDAsIGN0eCk7Cn0KCmludApsZXhlcl9ydWxlX2FkZChMZXhlciogbGV4LCBjaGFyKiBuYW1lLCBjaGFyKiBleHByKSB7CiAgTGV4ZXJSdWxlIHJ1bGUgPSB7bmFtZSwgZXhwciwgMSwgMCwgMCwgMH0sICpwcmV2aW91czsKICBpbnQgcmV0OwoKICBpZigocHJldmlvdXMgPSBsZXhlcl9ydWxlX2ZpbmQobGV4LCBuYW1lKSkpIHsKICAgIHJldHVybiAtMTsKICB9CgogIGlmKHJ1bGUuZXhwclswXSA9PSAnPCcpIHsKICAgIGNoYXIqIHM7CiAgICBpbnQzMl90IGZsYWdzID0gMDsKCiAgICBmb3IocyA9ICZydWxlLmV4cHJbMV07ICpzICYmICpzICE9ICc+JzspIHsKICAgICAgc2l6ZV90IGxlbiA9IHN0cl9jaHJzKHMsICIsPiIsIDIpOwogICAgICBpbnQgaW5kZXg7CgogICAgICBpZihzW2xlbl0gPT0gJ1wwJykKICAgICAgICBicmVhazsKCiAgICAgIGlmKChpbmRleCA9IGxleGVyX3N0YXRlX2ZpbmRiKGxleCwgcywgbGVuKSkgPT0gLTEpCiAgICAgICAgaW5kZXggPSBsZXhlcl9zdGF0ZV9uZXcobGV4LCBzLCBsZW4pOwoKICAgICAgYXNzZXJ0KGluZGV4ICE9IC0xKTsKICAgICAgZmxhZ3MgfD0gMSA8PCBpbmRleDsKCiAgICAgIGlmKCoocyArPSBsZW4pID09ICcsJykKICAgICAgICBzKys7CiAgICB9CgogICAgaWYoKnMgPT0gJz4nKQogICAgICBydWxlLm1hc2sgPSBmbGFnczsKICB9CgogIC8vIGZwcmludGYoc3RkZXJyLCAibGV4ZXJfcnVsZV9hZGQgJXMgJXMgJTA4eFxuIiwgcnVsZS5uYW1lLCBydWxlLmV4cHIsIHJ1bGUubWFzayk7CiAgcmV0ID0gdmVjdG9yX3NpemUoJmxleC0+cnVsZXMsIHNpemVvZihMZXhlclJ1bGUpKTsKICB2ZWN0b3JfcHVzaCgmbGV4LT5ydWxlcywgcnVsZSk7CiAgcmV0dXJuIHJldDsKfQoKTGV4ZXJSdWxlKgpsZXhlcl9ydWxlX2ZpbmQoTGV4ZXIqIGxleCwgY29uc3QgY2hhciogbmFtZSkgewogIExleGVyUnVsZSogcnVsZTsKICBhc3NlcnQobmFtZSk7CiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgewogICAgYXNzZXJ0KHJ1bGUtPm5hbWUpOwogICAgaWYoIXN0cmNtcChydWxlLT5uYW1lLCBuYW1lKSkKICAgICAgcmV0dXJuIHJ1bGU7CiAgfQogIHJldHVybiAwOwp9Cgp2b2lkCmxleGVyX3J1bGVfZnJlZShMZXhlclJ1bGUqIHJ1bGUsIEpTQ29udGV4dCogY3R4KSB7CiAgaWYocnVsZS0+bmFtZSkKICAgIGpzX2ZyZWUoY3R4LCBydWxlLT5uYW1lKTsKICBqc19mcmVlKGN0eCwgcnVsZS0+ZXhwcik7CgogIGlmKHJ1bGUtPmJ5dGVjb2RlKQogICAganNfZnJlZShjdHgsIHJ1bGUtPmJ5dGVjb2RlKTsKfQoKdm9pZApsZXhlcl9ydWxlX2ZyZWVfcnQoTGV4ZXJSdWxlKiBydWxlLCBKU1J1bnRpbWUqIHJ0KSB7CiAgaWYocnVsZS0+bmFtZSkKICAgIGpzX2ZyZWVfcnQocnQsIHJ1bGUtPm5hbWUpOwogIGpzX2ZyZWVfcnQocnQsIHJ1bGUtPmV4cHIpOwoKICBpZihydWxlLT5ieXRlY29kZSkKICAgIG9yaWdfanNfZnJlZV9ydChydCwgcnVsZS0+Ynl0ZWNvZGUpOwp9Cgp2b2lkCmxleGVyX3J1bGVfZHVtcChMZXhlciogbGV4LCBMZXhlclJ1bGUqIHJ1bGUsIER5bkJ1ZiogZGJ1ZikgewogIC8qICBpZihydWxlLT5tYXNrICE9IDApIHsKICAgICAgZGJ1Zl9wdXRjKGRidWYsICc8Jyk7CiAgICAgIGxleGVyX3N0YXRlc19kdW1wKGxleCwgcnVsZS0+bWFzaywgZGJ1Zik7CiAgICAgIGRidWZfcHV0YyhkYnVmLCAnPicpOwogICAgfSovCiAgbGV4ZXJfcnVsZV9leHBhbmQobGV4LCBydWxlLT5leHByLCBkYnVmKTsKfQoKdm9pZApsZXhlcl9pbml0KExleGVyKiBsZXgsIGVudW0gbGV4ZXJfbW9kZSBtb2RlLCBKU0NvbnRleHQqIGN0eCkgewogIGNoYXIqIGluaXRpYWwgPSBqc19zdHJkdXAoY3R4LCAiSU5JVElBTCIpOwoKICBtZW1zZXQobGV4LCAwLCBzaXplb2YoTGV4ZXIpKTsKCiAgbGV4LT5yZWZfY291bnQgPSAxOwogIGxleC0+bW9kZSA9IG1vZGU7CiAgbGV4LT5zdGF0ZSA9IDA7CiAgbGV4LT5zZXEgPSAwOwoKICBsb2NhdGlvbl9pbml0KCZsZXgtPmxvYyk7CgogIHZlY3Rvcl9pbml0KCZsZXgtPmRlZmluZXMsIGN0eCk7CiAgdmVjdG9yX2luaXQoJmxleC0+cnVsZXMsIGN0eCk7CiAgdmVjdG9yX2luaXQoJmxleC0+c3RhdGVzLCBjdHgpOwogIHZlY3Rvcl9wdXNoKCZsZXgtPnN0YXRlcywgaW5pdGlhbCk7CiAgdmVjdG9yX2luaXQoJmxleC0+c3RhdGVfc3RhY2ssIGN0eCk7Cn0KCnZvaWQKbGV4ZXJfZGVmaW5lKExleGVyKiBsZXgsIGNoYXIqIG5hbWUsIGNoYXIqIGV4cHIpIHsKICBMZXhlclJ1bGUgZGVmaW5pdGlvbiA9IHtuYW1lLCBleHByLCBNQVNLX0FMTCwgMCwgMCwgMH07CiAgdmVjdG9yX3NpemUoJmxleC0+ZGVmaW5lcywgc2l6ZW9mKExleGVyUnVsZSkpOwogIHZlY3Rvcl9wdXNoKCZsZXgtPmRlZmluZXMsIGRlZmluaXRpb24pOwp9CgpMZXhlclJ1bGUqCmxleGVyX2ZpbmRfZGVmaW5pdGlvbihMZXhlciogbGV4LCBjb25zdCBjaGFyKiBuYW1lLCBzaXplX3QgbmFtZWxlbikgewogIExleGVyUnVsZSogZGVmaW5pdGlvbjsKICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPmRlZmluZXMsIGRlZmluaXRpb24pIHsKICAgIGlmKCFzdHJuY21wKGRlZmluaXRpb24tPm5hbWUsIG5hbWUsIG5hbWVsZW4pICYmIGRlZmluaXRpb24tPm5hbWVbbmFtZWxlbl0gPT0gJ1wwJykKICAgICAgcmV0dXJuIGRlZmluaXRpb247CiAgfQogIHJldHVybiAwOwp9CgpCT09MCmxleGVyX2NvbXBpbGVfcnVsZXMoTGV4ZXIqIGxleCwgSlNDb250ZXh0KiBjdHgpIHsKICBMZXhlclJ1bGUqIHJ1bGU7CgogIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+cnVsZXMsIHJ1bGUpIHsKICAgIGlmKCFsZXhlcl9ydWxlX2NvbXBpbGUobGV4LCBydWxlLCBjdHgpKQogICAgICByZXR1cm4gRkFMU0U7CiAgfQogIHJldHVybiBUUlVFOwp9CgppbnQKbGV4ZXJfcGVlayhMZXhlciogbGV4LCB1aW50NjRfdCBzdGF0ZSwgSlNDb250ZXh0KiBjdHgpIHsKICBMZXhlclJ1bGUqIHJ1bGU7CiAgdWludDhfdCogY2FwdHVyZVs1MTJdOwogIGludCBpID0gMCwgcmV0ID0gTEVYRVJfRVJST1JfTk9NQVRDSDsKICBzaXplX3QgbGVuID0gMDsKCiAgaWYoaW5wdXRfYnVmZmVyX2VvZigmbGV4LT5pbnB1dCkpCiAgICByZXR1cm4gTEVYRVJfRU9GOwoKICAvLyAgbGV4LT5zdGFydCA9IGxleC0+aW5wdXQucG9zOwoKICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPnJ1bGVzLCBydWxlKSB7CiAgICBpbnQgcmVzdWx0OwogICAgaWYoKHJ1bGUtPm1hc2sgJiAoMSA8PCBsZXgtPnN0YXRlKSkgPT0gMCkgewogICAgICBpKys7CiAgICAgIGNvbnRpbnVlOwogICAgfQogICAgcmVzdWx0ID0gbGV4ZXJfcnVsZV9tYXRjaChsZXgsIHJ1bGUsIGNhcHR1cmUsIGN0eCk7CiAgICBpZihyZXN1bHQgPT0gTEVYRVJfRVJST1JfQ09NUElMRSkgewogICAgICByZXQgPSByZXN1bHQ7CiAgICAgIGJyZWFrOwogICAgfSBlbHNlIGlmKHJlc3VsdCA8IDApIHsKICAgICAgSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIkVycm9yIG1hdGNoaW5nIHJlZ2V4IC8lcy8iLCBydWxlLT5leHByKTsKICAgICAgcmV0ID0gTEVYRVJfRVJST1JfRVhFQzsKICAgICAgYnJlYWs7CiAgICB9IGVsc2UgaWYocmVzdWx0ID4gMCAmJiAoY2FwdHVyZVsxXSAtIGNhcHR1cmVbMF0pID4gMCkgewogICAgICAvKnByaW50ZigiJXM6JSIgUFJJdTMyICI6JSIgUFJJdTMyICIgIyVpICUtMjBzIC0gLyVzLyBbJXp1XSAlLipzXG4iLAogICAgICAgICAgICAgbGV4LT5sb2MuZmlsZSwKICAgICAgICAgICAgIGxleC0+bG9jLmxpbmUgKyAxLAogICAgICAgICAgICAgbGV4LT5sb2MuY29sdW1uICsgMSwKICAgICAgICAgICAgIGksCiAgICAgICAgICAgICBydWxlLT5uYW1lLAogICAgICAgICAgICAgcnVsZS0+ZXhwciwKICAgICAgICAgICAgIGNhcHR1cmVbMV0gLSBjYXB0dXJlWzBdLAogICAgICAgICAgICAgY2FwdHVyZVsxXSAtIGNhcHR1cmVbMF0sCiAgICAgICAgICAgICBjYXB0dXJlWzBdKTsgKi8KICAgICAgaWYoKGxleC0+bW9kZSAmIExFWEVSX0xPTkdFU1QpID09IDAgfHwgcmV0IDwgMCB8fCAoc2l6ZV90KShjYXB0dXJlWzFdIC0gY2FwdHVyZVswXSkgPiBsZW4pIHsKICAgICAgICByZXQgPSBpOwogICAgICAgIGxlbiA9IGNhcHR1cmVbMV0gLSBjYXB0dXJlWzBdOwogICAgICAgIGlmKGxleC0+bW9kZSA9PSBMRVhFUl9GSVJTVCkKICAgICAgICAgIGJyZWFrOwogICAgICB9CiAgICB9CiAgICBpKys7CiAgfQogIGlmKHJldCA+PSAwKSB7CiAgICBsZXgtPmJ5dGVfbGVuZ3RoID0gbGVuOwogICAgbGV4LT50b2tlbl9pZCA9IHJldDsKICB9CgogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmlucHV0X3NraXAoSW5wdXRCdWZmZXIqIGlucHV0LCBzaXplX3QgZW5kLCBMb2NhdGlvbiogbG9jKSB7CiAgc2l6ZV90IG4gPSAwOwogIHdoaWxlKGlucHV0LT5wb3MgPCBlbmQpIHsKICAgIHNpemVfdCBwcmV2ID0gaW5wdXQtPnBvczsKICAgIGlmKGlucHV0X2J1ZmZlcl9nZXRjKGlucHV0KSA9PSAnXG4nKSB7CiAgICAgIGxvYy0+bGluZSsrOwogICAgICBsb2MtPmNvbHVtbiA9IDA7CiAgICB9IGVsc2UgewogICAgICBsb2MtPmNvbHVtbisrOwogICAgfQogICAgbG9jLT5jaGFyX29mZnNldCsrOwogICAgbG9jLT5ieXRlX29mZnNldCArPSBpbnB1dC0+cG9zIC0gcHJldjsKICAgIG4rKzsKICB9CiAgcmV0dXJuIG47Cn0KCnNpemVfdApsZXhlcl9za2lwKExleGVyKiBsZXgpIHsKICBzaXplX3QgbGVuOwogIGFzc2VydChsZXgtPmJ5dGVfbGVuZ3RoKTsKICBhc3NlcnQobGV4LT50b2tlbl9pZCAhPSAtMSk7CgogIGxlbiA9IGxvY2F0aW9uX2NvdW50KCZsZXgtPmxvYywgJmxleC0+aW5wdXQuZGF0YVtsZXgtPmlucHV0LnBvc10sIGxleC0+Ynl0ZV9sZW5ndGgpOwogIGxleC0+aW5wdXQucG9zICs9IGxleC0+Ynl0ZV9sZW5ndGg7CgogIC8vIGxlbiA9IGlucHV0X3NraXAoJmxleC0+aW5wdXQsIGxleC0+aW5wdXQucG9zICsgbGV4LT5ieXRlX2xlbmd0aCwgJmxleC0+bG9jKTsKCiAgbGV4LT5zZXErKzsKICBsZXgtPmJ5dGVfbGVuZ3RoID0gMDsKICBsZXgtPnRva2VuX2lkID0gLTE7CiAgcmV0dXJuIGxlbjsKfQoKc2l6ZV90CmxleGVyX2NoYXJsZW4oTGV4ZXIqIGxleCkgewogIGlmKGxleC0+Ynl0ZV9sZW5ndGggPT0gMCkKICAgIHJldHVybiAwOwogIGFzc2VydCgobGV4LT5pbnB1dC5zaXplIC0gbGV4LT5pbnB1dC5wb3MpID49IGxleC0+Ynl0ZV9sZW5ndGgpOwogIHJldHVybiB1dGY4X3N0cmxlbigmbGV4LT5pbnB1dC5kYXRhW2xleC0+aW5wdXQucG9zXSwgbGV4LT5ieXRlX2xlbmd0aCk7Cn0KCmNoYXIqCmxleGVyX2xleGVtZShMZXhlciogbGV4LCBzaXplX3QqIGxlbnApIHsKICAvLyBzaXplX3QgbGVuID0gbGV4LT5pbnB1dC5wb3MgLSBsZXgtPnN0YXJ0OwogIGNoYXIqIHMgPSAoY2hhciopbGV4LT5pbnB1dC5kYXRhICsgbGV4LT5pbnB1dC5wb3M7CiAgaWYobGVucCkKICAgICpsZW5wID0gbGV4LT5ieXRlX2xlbmd0aDsKICByZXR1cm4gczsKfQoKaW50CmxleGVyX25leHQoTGV4ZXIqIGxleCwgdWludDY0X3Qgc3RhdGUsIEpTQ29udGV4dCogY3R4KSB7CiAgaW50IHJldDsKCiAgaWYoKHJldCA9IGxleGVyX3BlZWsobGV4LCBzdGF0ZSwgY3R4KSkgPj0gMCkKICAgIGxleGVyX3NraXAobGV4KTsKCiAgcmV0dXJuIHJldDsKfQoKdm9pZApsZXhlcl9zZXRfaW5wdXQoTGV4ZXIqIGxleCwgSW5wdXRCdWZmZXIgaW5wdXQsIGludDMyX3QgZmlsZV9hdG9tKSB7CiAgbGV4LT5pbnB1dCA9IGlucHV0OwogIGxleC0+bG9jLmZpbGUgPSBmaWxlX2F0b207Cn0KCnZvaWQKbGV4ZXJfc2V0X2xvY2F0aW9uKExleGVyKiBsZXgsIGNvbnN0IExvY2F0aW9uKiBsb2MsIEpTQ29udGV4dCogY3R4KSB7CiAgLy8gbGV4LT5zdGFydCA9IGxvYy0+Y2hhcl9vZmZzZXQ7CiAgbGV4LT5ieXRlX2xlbmd0aCA9IDA7CiAgbGV4LT5pbnB1dC5wb3MgPSBsb2MtPmNoYXJfb2Zmc2V0OwogIGxvY2F0aW9uX3JlbGVhc2UoJmxleC0+bG9jLCBjdHgpOwogIGxvY2F0aW9uX2NvcHkoJmxleC0+bG9jLCBsb2MsIGN0eCk7Cn0KCnZvaWQKbGV4ZXJfcmVsZWFzZShMZXhlciogbGV4LCBKU0NvbnRleHQqIGN0eCkgewogIGlmKC0tbGV4LT5yZWZfY291bnQgPT0gMCkgewogICAgTGV4ZXJSdWxlKiBydWxlOwogICAgY2hhcioqIHN0YXRlOwoKICAgIGlmKCFjdHgpCiAgICAgIGN0eCA9IGxleC0+cnVsZXMub3BhcXVlOwoKICAgIGlucHV0X2J1ZmZlcl9mcmVlKCZsZXgtPmlucHV0LCBjdHgpOwoKICAgIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+ZGVmaW5lcywgcnVsZSkgeyBsZXhlcl9ydWxlX2ZyZWUocnVsZSwgY3R4KTsgfQogICAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgeyBsZXhlcl9ydWxlX2ZyZWUocnVsZSwgY3R4KTsgfQogICAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5zdGF0ZXMsIHN0YXRlKSB7IGZyZWUoKnN0YXRlKTsgfQoKICAgIHZlY3Rvcl9mcmVlKCZsZXgtPmRlZmluZXMpOwogICAgdmVjdG9yX2ZyZWUoJmxleC0+cnVsZXMpOwogICAgdmVjdG9yX2ZyZWUoJmxleC0+c3RhdGVzKTsKICAgIHZlY3Rvcl9mcmVlKCZsZXgtPnN0YXRlX3N0YWNrKTsKICB9Cn0KCnZvaWQKbGV4ZXJfZnJlZShMZXhlciogbGV4LCBKU0NvbnRleHQqIGN0eCkgewogIGxleGVyX3JlbGVhc2UobGV4LCBjdHgpOwogIGlmKGxleC0+cmVmX2NvdW50IDw9IDApCiAgICBqc19mcmVlKGN0eCwgbGV4KTsKfQoKdm9pZApsZXhlcl9yZWxlYXNlX3J0KExleGVyKiBsZXgsIEpTUnVudGltZSogcnQpIHsKICBpZigtLWxleC0+cmVmX2NvdW50ID09IDApIHsKICAgIGNoYXIqKiBzdGF0ZXA7CiAgICBMZXhlclJ1bGUqIHJ1bGU7CiAgICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPnN0YXRlcywgc3RhdGVwKSB7IGpzX2ZyZWVfcnQocnQsICpzdGF0ZXApOyB9CiAgICB2ZWN0b3JfZnJlZSgmbGV4LT5zdGF0ZXMpOwogICAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5ydWxlcywgcnVsZSkgeyBsZXhlcl9ydWxlX2ZyZWVfcnQocnVsZSwgcnQpOyB9CiAgICB2ZWN0b3JfZnJlZSgmbGV4LT5ydWxlcyk7CiAgICB2ZWN0b3JfZm9yZWFjaF90KCZsZXgtPmRlZmluZXMsIHJ1bGUpIHsgbGV4ZXJfcnVsZV9mcmVlX3J0KHJ1bGUsIHJ0KTsgfQogICAgdmVjdG9yX2ZyZWUoJmxleC0+ZGVmaW5lcyk7CiAgICB2ZWN0b3JfZnJlZSgmbGV4LT5zdGF0ZV9zdGFjayk7CiAgfQp9CnZvaWQKbGV4ZXJfZnJlZV9ydChMZXhlciogbGV4LCBKU1J1bnRpbWUqIHJ0KSB7CiAgbGV4ZXJfcmVsZWFzZV9ydChsZXgsIHJ0KTsKICBpZihsZXgtPnJlZl9jb3VudCA8PSAwKQogICAganNfZnJlZV9ydChydCwgbGV4KTsKfQoKdm9pZApsZXhlcl9kdW1wKExleGVyKiBsZXgsIER5bkJ1ZiogZGJ1ZikgewogIGRidWZfcHJpbnRmKGRidWYsICJMZXhlciB7XG4gIG1vZGU6ICV4LFxuICBzdGF0ZTogJXMiLCBsZXgtPm1vZGUsIGxleGVyX3N0YXRlX25hbWUobGV4LCBsZXgtPnN0YXRlKSk7CiAgZGJ1Zl9wdXRzdHIoZGJ1ZiwgIixcbiAgaW5wdXQ6ICIpOwogIGlucHV0X2J1ZmZlcl9kdW1wKCZsZXgtPmlucHV0LCBkYnVmKTsKICBkYnVmX3B1dHN0cihkYnVmLCAiLFxuICBsb2NhdGlvbjogIik7CiAgbG9jYXRpb25fcHJpbnQoJmxleC0+bG9jLCBkYnVmLCAwKTsKICBkYnVmX3B1dHN0cihkYnVmLCAiXG59Iik7Cn0KCi8qKgogKiBAfQogKi8KAAAAAAAAAAAqLQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARCsAAAAAAADmKQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-location.c",
			"settings":
			{
				"buffer_size": 13267,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					28,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BgAAAB0pAAAAAAAAHikAAAAAAAAAAAAAHikAAAAAAAAiKQAAAAAAAAAAAAAeKQAAAAAAAB4pAAAAAAAABAAAACAgICAeKQAAAAAAACQpAAAAAAAAAAAAACQpAAAAAAAAJSkAAAAAAAAAAAAAJSkAAAAAAAAmKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHSkAAAAAAAAdKQAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACYpAAAAAAAAKCkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJikAAAAAAAAmKQAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "--ref"
					},
					"BQAAACcpAAAAAAAAKCkAAAAAAAAAAAAAKCkAAAAAAAApKQAAAAAAAAAAAAApKQAAAAAAACopAAAAAAAAAAAAACopAAAAAAAAKykAAAAAAAAAAAAAKykAAAAAAAAsKQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJykAAAAAAAAnKQAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					3,
					"left_delete",
					null,
					"AwAAACspAAAAAAAAKykAAAAAAAABAAAAZiopAAAAAAAAKikAAAAAAAABAAAAZSkpAAAAAAAAKSkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAALCkAAAAAAAAsKQAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "loc->ref_count"
					},
					"DgAAACkpAAAAAAAAKikAAAAAAAAAAAAAKikAAAAAAAArKQAAAAAAAAAAAAArKQAAAAAAACwpAAAAAAAAAAAAACwpAAAAAAAALSkAAAAAAAAAAAAALSkAAAAAAAAuKQAAAAAAAAAAAAAuKQAAAAAAAC8pAAAAAAAAAAAAAC8pAAAAAAAAMCkAAAAAAAAAAAAAMCkAAAAAAAAxKQAAAAAAAAAAAAAxKQAAAAAAADIpAAAAAAAAAAAAADIpAAAAAAAAMykAAAAAAAAAAAAAMykAAAAAAAA0KQAAAAAAAAAAAAA0KQAAAAAAADUpAAAAAAAAAAAAADUpAAAAAAAANikAAAAAAAAAAAAANikAAAAAAAA3KQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKSkAAAAAAAApKQAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAD0pAAAAAAAAPykAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPSkAAAAAAAA9KQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": "void"
					},
					"BQAAAE8oAAAAAAAAUCgAAAAAAAAAAAAAUCgAAAAAAABQKAAAAAAAAAQAAABjaGFyUCgAAAAAAABRKAAAAAAAAAAAAABRKAAAAAAAAFIoAAAAAAAAAAAAAFIoAAAAAAAAUygAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATygAAAAAAABTKAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUygAAAAAAABTKAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "location.h",
			"settings":
			{
				"buffer_size": 1532,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "suze:t"
					},
					"BwAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAXAwAAAAAAAAQAAAB2b2lkFwMAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAAbAwAAAAAAABwDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgMAAAAAAAAaAwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					6,
					"left_delete",
					null,
					"BgAAABsDAAAAAAAAGwMAAAAAAAABAAAAdBoDAAAAAAAAGgMAAAAAAAABAAAAOhkDAAAAAAAAGQMAAAAAAAABAAAAZRgDAAAAAAAAGAMAAAAAAAABAAAAehcDAAAAAAAAFwMAAAAAAAABAAAAdRYDAAAAAAAAFgMAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAHAMAAAAAAAAcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "ize_t"
					},
					"BQAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAYAwAAAAAAAAAAAAAYAwAAAAAAABkDAAAAAAAAAAAAABkDAAAAAAAAGgMAAAAAAAAAAAAAGgMAAAAAAAAbAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgMAAAAAAAAWAwAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAABYDAAAAAAAAFwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgMAAAAAAAAWAwAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAABQDAAAAAAAAFAMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFQMAAAAAAAAVAwAAAAAAAAAAAAAAACJA"
				],
				[
					25,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD5BQAAI2lmbmRlZiBMT0NBVElPTl9ICiNkZWZpbmUgTE9DQVRJT05fSAoKI2luY2x1ZGUgInV0aWxzLmgiCiNpbmNsdWRlICJjaGFyLXV0aWxzLmgiCgovKioKICogXGRlZmdyb3VwIGxvY2F0aW9uIFNvdXJjZSB0ZXh0IGxvY2F0aW9uCiAqIEB7CiAqLwp0eXBlZGVmIHN0cnVjdCBzb3VyY2VfbG9jYXRpb24gewogIGludCByZWZfY291bnQ7CiAgaW50MzJfdCBmaWxlOwogIHVpbnQzMl90IGxpbmUsIGNvbHVtbjsKICBpbnQ2NF90IGNoYXJfb2Zmc2V0LCBieXRlX29mZnNldDsKICBjaGFyKiBzdHI7CiAgQk9PTCByZWFkX29ubHkgOiAxOwp9IExvY2F0aW9uOwoKdm9pZCBsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiosIER5bkJ1ZiosIEpTQ29udGV4dCopOwpjaGFyKiBsb2NhdGlvbl90b3N0cmluZyhjb25zdCBMb2NhdGlvbiosIEpTQ29udGV4dCopOwpjaGFyKiBsb2NhdGlvbl9maWxlKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0Kik7CkpTVmFsdWUgbG9jYXRpb25fdG92YWx1ZShjb25zdCBMb2NhdGlvbiosIEpTQ29udGV4dCopOwp2b2lkIGxvY2F0aW9uX2luaXQoTG9jYXRpb24qKTsKdm9pZCBsb2NhdGlvbl96ZXJvKExvY2F0aW9uKik7CnZvaWQgbG9jYXRpb25fYWRkKExvY2F0aW9uKiwgY29uc3QgTG9jYXRpb24qKTsKdm9pZCBsb2NhdGlvbl9zdWIoTG9jYXRpb24qLCBjb25zdCBMb2NhdGlvbiopOwpCT09MIGxvY2F0aW9uX3JlbGVhc2VfcnQoTG9jYXRpb24qLCBKU1J1bnRpbWUqKTsKTG9jYXRpb24qIGxvY2F0aW9uX2ZyZWVfcnQoTG9jYXRpb24qLCBKU1J1bnRpbWUqKTsKc2l6ZV90IGxvY2F0aW9uX2NvdW50KExvY2F0aW9uKiwgY29uc3QgY2hhciosIHNpemVfdCk7CkxvY2F0aW9uKiBsb2NhdGlvbl9jb3B5KExvY2F0aW9uKiwgY29uc3QgTG9jYXRpb24qLCBKU0NvbnRleHQqKTsKTG9jYXRpb24qIGxvY2F0aW9uX2Nsb25lKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0Kik7CkxvY2F0aW9uKiBsb2NhdGlvbl9uZXcoSlNDb250ZXh0Kik7CgpzdGF0aWMgaW5saW5lIEJPT0wKbG9jYXRpb25fcmVsZWFzZShMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBsb2NhdGlvbl9yZWxlYXNlX3J0KGxvYywgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKc3RhdGljIGlubGluZSBMb2NhdGlvbioKbG9jYXRpb25fZnJlZShMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBsb2NhdGlvbl9mcmVlX3J0KGxvYywgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKc3RhdGljIGlubGluZSBpbnQKbG9jYXRpb25faXNudWxsKGNvbnN0IExvY2F0aW9uKiBsb2MpIHsKICByZXR1cm4gbG9jLT5maWxlID09IC0xICYmICFsb2MtPmxpbmUgJiYgIWxvYy0+Y29sdW1uICYmICFsb2MtPmNoYXJfb2Zmc2V0Owp9CgpzdGF0aWMgaW5saW5lIExvY2F0aW9uKgpsb2NhdGlvbl9kdXAoTG9jYXRpb24qIGxvYykgewogIGxvYy0+cmVmX2NvdW50Kys7CiAgcmV0dXJuIGxvYzsKfQoKLyoqCiAqIEB9CiAqLwojZW5kaWYgLyogZGVmaW5lZChMT0NBVElPTl9IKSAqLwoAAAAAAAAAAPkFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAMAAAAAAAAqAwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "uint8_t"
					},
					"CAAAADwDAAAAAAAAPQMAAAAAAAAAAAAAPQMAAAAAAAA9AwAAAAAAAAQAAABjaGFyPQMAAAAAAAA+AwAAAAAAAAAAAAA+AwAAAAAAAD8DAAAAAAAAAAAAAD8DAAAAAAAAQAMAAAAAAAAAAAAAQAMAAAAAAABBAwAAAAAAAAAAAABBAwAAAAAAAEIDAAAAAAAAAAAAAEIDAAAAAAAAQwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAMAAAAAAABAAwAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD8BQAAI2lmbmRlZiBMT0NBVElPTl9ICiNkZWZpbmUgTE9DQVRJT05fSAoKI2luY2x1ZGUgInV0aWxzLmgiCiNpbmNsdWRlICJjaGFyLXV0aWxzLmgiCgovKioKICogXGRlZmdyb3VwIGxvY2F0aW9uIFNvdXJjZSB0ZXh0IGxvY2F0aW9uCiAqIEB7CiAqLwp0eXBlZGVmIHN0cnVjdCBzb3VyY2VfbG9jYXRpb24gewogIGludCByZWZfY291bnQ7CiAgaW50MzJfdCBmaWxlOwogIHVpbnQzMl90IGxpbmUsIGNvbHVtbjsKICBpbnQ2NF90IGNoYXJfb2Zmc2V0LCBieXRlX29mZnNldDsKICBjaGFyKiBzdHI7CiAgQk9PTCByZWFkX29ubHkgOiAxOwp9IExvY2F0aW9uOwoKdm9pZCBsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiosIER5bkJ1ZiosIEpTQ29udGV4dCopOwpjaGFyKiBsb2NhdGlvbl90b3N0cmluZyhjb25zdCBMb2NhdGlvbiosIEpTQ29udGV4dCopOwpjaGFyKiBsb2NhdGlvbl9maWxlKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0Kik7CkpTVmFsdWUgbG9jYXRpb25fdG92YWx1ZShjb25zdCBMb2NhdGlvbiosIEpTQ29udGV4dCopOwp2b2lkIGxvY2F0aW9uX2luaXQoTG9jYXRpb24qKTsKdm9pZCBsb2NhdGlvbl96ZXJvKExvY2F0aW9uKik7CnZvaWQgbG9jYXRpb25fYWRkKExvY2F0aW9uKiwgY29uc3QgTG9jYXRpb24qKTsKdm9pZCBsb2NhdGlvbl9zdWIoTG9jYXRpb24qLCBjb25zdCBMb2NhdGlvbiopOwpCT09MIGxvY2F0aW9uX3JlbGVhc2VfcnQoTG9jYXRpb24qLCBKU1J1bnRpbWUqKTsKTG9jYXRpb24qIGxvY2F0aW9uX2ZyZWVfcnQoTG9jYXRpb24qLCBKU1J1bnRpbWUqKTsKc2l6ZV90IGxvY2F0aW9uX2NvdW50KExvY2F0aW9uKiwgY29uc3QgdWludDhfdCosIHNpemVfdCk7CkxvY2F0aW9uKiBsb2NhdGlvbl9jb3B5KExvY2F0aW9uKiwgY29uc3QgTG9jYXRpb24qLCBKU0NvbnRleHQqKTsKTG9jYXRpb24qIGxvY2F0aW9uX2Nsb25lKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0Kik7CkxvY2F0aW9uKiBsb2NhdGlvbl9uZXcoSlNDb250ZXh0Kik7CgpzdGF0aWMgaW5saW5lIEJPT0wKbG9jYXRpb25fcmVsZWFzZShMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBsb2NhdGlvbl9yZWxlYXNlX3J0KGxvYywgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKc3RhdGljIGlubGluZSBMb2NhdGlvbioKbG9jYXRpb25fZnJlZShMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBsb2NhdGlvbl9mcmVlX3J0KGxvYywgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKc3RhdGljIGlubGluZSBpbnQKbG9jYXRpb25faXNudWxsKGNvbnN0IExvY2F0aW9uKiBsb2MpIHsKICByZXR1cm4gbG9jLT5maWxlID09IC0xICYmICFsb2MtPmxpbmUgJiYgIWxvYy0+Y29sdW1uICYmICFsb2MtPmNoYXJfb2Zmc2V0Owp9CgpzdGF0aWMgaW5saW5lIExvY2F0aW9uKgpsb2NhdGlvbl9kdXAoTG9jYXRpb24qIGxvYykgewogIGxvYy0+cmVmX2NvdW50Kys7CiAgcmV0dXJuIGxvYzsKfQoKLyoqCiAqIEB9CiAqLwojZW5kaWYgLyogZGVmaW5lZChMT0NBVElPTl9IKSAqLwoAAAAAAAAAAPwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQIAAAAAAAARAgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAD8BQAAI2lmbmRlZiBMT0NBVElPTl9ICiNkZWZpbmUgTE9DQVRJT05fSAoKI2luY2x1ZGUgInV0aWxzLmgiCiNpbmNsdWRlICJjaGFyLXV0aWxzLmgiCgovKioKICogXGRlZmdyb3VwIGxvY2F0aW9uIFNvdXJjZSB0ZXh0IGxvY2F0aW9uCiAqIEB7CiAqLwp0eXBlZGVmIHN0cnVjdCBzb3VyY2VfbG9jYXRpb24gewogIGludCByZWZfY291bnQ7CiAgaW50MzJfdCBmaWxlOwogIHVpbnQzMl90IGxpbmUsIGNvbHVtbjsKICBpbnQ2NF90IGNoYXJfb2Zmc2V0LCBieXRlX29mZnNldDsKICBjaGFyKiBzdHI7CiAgQk9PTCByZWFkX29ubHkgOiAxOwp9IExvY2F0aW9uOwoKdm9pZCBsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiosIER5bkJ1ZiosIEpTQ29udGV4dCopOwpjaGFyKiBsb2NhdGlvbl90b3N0cmluZyhjb25zdCBMb2NhdGlvbiosIEpTQ29udGV4dCopOwpjaGFyKiBsb2NhdGlvbl9maWxlKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0Kik7CkpTVmFsdWUgbG9jYXRpb25fdG92YWx1ZShjb25zdCBMb2NhdGlvbiosIEpTQ29udGV4dCopOwp2b2lkIGxvY2F0aW9uX2luaXQoTG9jYXRpb24qKTsKdm9pZCBsb2NhdGlvbl96ZXJvKExvY2F0aW9uKik7CnZvaWQgbG9jYXRpb25fYWRkKExvY2F0aW9uKiwgY29uc3QgTG9jYXRpb24qKTsKdm9pZCBsb2NhdGlvbl9zdWIoTG9jYXRpb24qLCBjb25zdCBMb2NhdGlvbiopOwpCT09MIGxvY2F0aW9uX3JlbGVhc2VfcnQoTG9jYXRpb24qLCBKU1J1bnRpbWUqKTsKTG9jYXRpb24qIGxvY2F0aW9uX2ZyZWVfcnQoTG9jYXRpb24qLCBKU1J1bnRpbWUqKTsKc2l6ZV90IGxvY2F0aW9uX2NvdW50KExvY2F0aW9uKiwgY29uc3QgdWludDhfdCosIHNpemVfdCk7CkxvY2F0aW9uKiBsb2NhdGlvbl9jb3B5KExvY2F0aW9uKiwgY29uc3QgTG9jYXRpb24qLCBKU0NvbnRleHQqKTsKTG9jYXRpb24qIGxvY2F0aW9uX2Nsb25lKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0Kik7CkxvY2F0aW9uKiBsb2NhdGlvbl9uZXcoSlNDb250ZXh0Kik7CgpzdGF0aWMgaW5saW5lIEJPT0wKbG9jYXRpb25fcmVsZWFzZShMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBsb2NhdGlvbl9yZWxlYXNlX3J0KGxvYywgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKc3RhdGljIGlubGluZSBMb2NhdGlvbioKbG9jYXRpb25fZnJlZShMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBsb2NhdGlvbl9mcmVlX3J0KGxvYywgSlNfR2V0UnVudGltZShjdHgpKTsKfQoKc3RhdGljIGlubGluZSBpbnQKbG9jYXRpb25faXNudWxsKGNvbnN0IExvY2F0aW9uKiBsb2MpIHsKICByZXR1cm4gbG9jLT5maWxlID09IC0xICYmICFsb2MtPmxpbmUgJiYgIWxvYy0+Y29sdW1uICYmICFsb2MtPmNoYXJfb2Zmc2V0Owp9CgpzdGF0aWMgaW5saW5lIExvY2F0aW9uKgpsb2NhdGlvbl9kdXAoTG9jYXRpb24qIGxvYykgewogIGxvYy0+cmVmX2NvdW50Kys7CiAgcmV0dXJuIGxvYzsKfQoKLyoqCiAqIEB9CiAqLwojZW5kaWYgLyogZGVmaW5lZChMT0NBVElPTl9IKSAqLwoAAAAAAAAAAPwFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQMAAAAAAAAxAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-xml.c",
			"settings":
			{
				"buffer_size": 23143,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					11,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAMs0AAAAAAAAzDQAAAAAAAAAAAAAzDQAAAAAAADMNAAAAAAAAA0AAAAoY29uc3QgY2hhciop",
					"AQAAAAAAAAABAAAAyzQAAAAAAADYNAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"left_delete",
					null,
					"AQAAAMs0AAAAAAAAyzQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAzDQAAAAAAADMNAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyzQAAAAAAADLNAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAyzQAAAAAAADLNAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "location.c",
			"settings":
			{
				"buffer_size": 3614,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					87,
					1,
					"insert",
					{
						"characters": "sai"
					},
					"BAAAAPYIAAAAAAAA9wgAAAAAAAAAAAAA9wgAAAAAAAD3CAAAAAAAAAQAAAB2b2lk9wgAAAAAAAD4CAAAAAAAAAAAAAD4CAAAAAAAAPkIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9ggAAAAAAAD6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					2,
					"left_delete",
					null,
					"AgAAAPgIAAAAAAAA+AgAAAAAAAABAAAAafcIAAAAAAAA9wgAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAA+QgAAAAAAAD5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "ize_t"
					},
					"BQAAAPcIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD5CAAAAAAAAAAAAAD5CAAAAAAAAPoIAAAAAAAAAAAAAPoIAAAAAAAA+wgAAAAAAAAAAAAA+wgAAAAAAAD8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wgAAAAAAAD3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert",
					{
						"characters": "nchrs"
					},
					"BQAAAD8JAAAAAAAAQAkAAAAAAAAAAAAAQAkAAAAAAABBCQAAAAAAAAAAAABBCQAAAAAAAEIJAAAAAAAAAAAAAEIJAAAAAAAAQwkAAAAAAAAAAAAAQwkAAAAAAABECQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwkAAAAAAAA/CQAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					2,
					"left_delete",
					null,
					"AgAAAEMJAAAAAAAAQwkAAAAAAAABAAAAc0IJAAAAAAAAQgkAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAARAkAAAAAAABECQAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "ars=0,"
					},
					"BgAAAEIJAAAAAAAAQwkAAAAAAAAAAAAAQwkAAAAAAABECQAAAAAAAAAAAABECQAAAAAAAEUJAAAAAAAAAAAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABHCQAAAAAAAAAAAABHCQAAAAAAAEgJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgkAAAAAAABCCQAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "\nbn"
					},
					"BAAAAEMKAAAAAAAARAoAAAAAAAAAAAAARAoAAAAAAABICgAAAAAAAAAAAABICgAAAAAAAEkKAAAAAAAAAAAAAEkKAAAAAAAASgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwoAAAAAAABDCgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					2,
					"left_delete",
					null,
					"AgAAAEkKAAAAAAAASQoAAAAAAAABAAAAbkgKAAAAAAAASAoAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAASgoAAAAAAABKCgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "nchars++;"
					},
					"CQAAAEgKAAAAAAAASQoAAAAAAAAAAAAASQoAAAAAAABKCgAAAAAAAAAAAABKCgAAAAAAAEsKAAAAAAAAAAAAAEsKAAAAAAAATAoAAAAAAAAAAAAATAoAAAAAAABNCgAAAAAAAAAAAABNCgAAAAAAAE4KAAAAAAAAAAAAAE4KAAAAAAAATwoAAAAAAAAAAAAATwoAAAAAAABQCgAAAAAAAAAAAABQCgAAAAAAAFEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAoAAAAAAABICgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"cut",
					null,
					"AQAAAEYKAAAAAAAARgoAAAAAAAALAAAAICBuY2hhcnMrKzs",
					"AQAAAAAAAAABAAAAUQoAAAAAAABGCgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "start"
					},
					"BwAAAD8JAAAAAAAAQAkAAAAAAAAAAAAAQAkAAAAAAABACQAAAAAAAAYAAABuY2hhcnM/CgAAAAAAAD8KAAAAAAAAAgAAACAgQAkAAAAAAABBCQAAAAAAAAAAAABBCQAAAAAAAEIJAAAAAAAAAAAAAEIJAAAAAAAAQwkAAAAAAAAAAAAAQwkAAAAAAABECQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwkAAAAAAABFCQAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "loc->char_offs"
					},
					"DwAAAEUJAAAAAAAARgkAAAAAAAAAAAAARgkAAAAAAABGCQAAAAAAAAEAAAAwRgkAAAAAAABHCQAAAAAAAAAAAABHCQAAAAAAAEgJAAAAAAAAAAAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABKCQAAAAAAAAAAAABKCQAAAAAAAEsJAAAAAAAAAAAAAEsJAAAAAAAATAkAAAAAAAAAAAAATAkAAAAAAABNCQAAAAAAAAAAAABNCQAAAAAAAE4JAAAAAAAAAAAAAE4JAAAAAAAATwkAAAAAAAAAAAAATwkAAAAAAABQCQAAAAAAAAAAAABQCQAAAAAAAFEJAAAAAAAAAAAAAFEJAAAAAAAAUgkAAAAAAAAAAAAAUgkAAAAAAABTCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQkAAAAAAABGCQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAAFMJAAAAAAAAVAkAAAAAAAAAAAAAVAkAAAAAAABVCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwkAAAAAAABTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAFEKAAAAAAAAUQoAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAUgoAAAAAAABSCgAAAAAAAAAAAAAAADtA"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "\nreturn"
					},
					"CAAAAFUKAAAAAAAAVgoAAAAAAAAAAAAAVgoAAAAAAABYCgAAAAAAAAAAAABYCgAAAAAAAFkKAAAAAAAAAAAAAFkKAAAAAAAAWgoAAAAAAAAAAAAAWgoAAAAAAABbCgAAAAAAAAAAAABbCgAAAAAAAFwKAAAAAAAAAAAAAFwKAAAAAAAAXQoAAAAAAAAAAAAAXQoAAAAAAABeCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQoAAAAAAABVCgAAAAAAAAAAAAAA4GBA"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": " loc->char_of"
					},
					"DQAAAF4KAAAAAAAAXwoAAAAAAAAAAAAAXwoAAAAAAABgCgAAAAAAAAAAAABgCgAAAAAAAGEKAAAAAAAAAAAAAGEKAAAAAAAAYgoAAAAAAAAAAAAAYgoAAAAAAABjCgAAAAAAAAAAAABjCgAAAAAAAGQKAAAAAAAAAAAAAGQKAAAAAAAAZQoAAAAAAAAAAAAAZQoAAAAAAABmCgAAAAAAAAAAAABmCgAAAAAAAGcKAAAAAAAAAAAAAGcKAAAAAAAAaAoAAAAAAAAAAAAAaAoAAAAAAABpCgAAAAAAAAAAAABpCgAAAAAAAGoKAAAAAAAAAAAAAGoKAAAAAAAAawoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgoAAAAAAABeCgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "fset-start;"
					},
					"CwAAAGsKAAAAAAAAbAoAAAAAAAAAAAAAbAoAAAAAAABtCgAAAAAAAAAAAABtCgAAAAAAAG4KAAAAAAAAAAAAAG4KAAAAAAAAbwoAAAAAAAAAAAAAbwoAAAAAAABwCgAAAAAAAAAAAABwCgAAAAAAAHEKAAAAAAAAAAAAAHEKAAAAAAAAcgoAAAAAAAAAAAAAcgoAAAAAAABzCgAAAAAAAAAAAABzCgAAAAAAAHQKAAAAAAAAAAAAAHQKAAAAAAAAdQoAAAAAAAAAAAAAdQoAAAAAAAB2CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawoAAAAAAABrCgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAJDgAAI2luY2x1ZGUgPHN0ZGRlZi5oPgojaW5jbHVkZSAibG9jYXRpb24uaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSAiZGVidWcuaCIKCi8qKgogKiBcYWRkdG9ncm91cCBsb2NhdGlvbgogKiBAewogKi8Kdm9pZApsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiogbG9jLCBEeW5CdWYqIGRidWYsIEpTQ29udGV4dCogY3R4KSB7CiAgaWYoY3R4ICYmIGxvYy0+ZmlsZSA+IC0xKSB7CiAgICBqc19hdG9tX2R1bXAoY3R4LCBsb2MtPmZpbGUsIGRidWYsIEZBTFNFKTsKICAgIGRidWZfcHV0YyhkYnVmLCAnOicpOwogIH0KICBpZihsb2MtPmNvbHVtbiAhPSBVSU5UMzJfTUFYKQogICAgZGJ1Zl9wcmludGYoZGJ1ZiwgIiUiIFBSSWQzMiAiOiUiIFBSSWQzMiwgbG9jLT5saW5lICsgMSwgbG9jLT5jb2x1bW4gKyAxKTsKICBlbHNlCiAgICBkYnVmX3ByaW50ZihkYnVmLCAiJSIgUFJJZDMyLCBsb2MtPmxpbmUgKyAxKTsKfQoKY2hhcioKbG9jYXRpb25fdG9zdHJpbmcoY29uc3QgTG9jYXRpb24qIGxvYywgSlNDb250ZXh0KiBjdHgpIHsKICBEeW5CdWYgZGJ1ZjsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CgogIGxvY2F0aW9uX3ByaW50KGxvYywgJmRidWYsIGN0eCk7CiAgZGJ1Zl8wKCZkYnVmKTsKCiAgcmV0dXJuIChjaGFyKilkYnVmLmJ1ZjsKfQoKY2hhcioKbG9jYXRpb25fZmlsZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIGNvbnN0IGNoYXIqIGZpbGU7CiAgY2hhciogcmV0ID0gMDsKCiAgaWYoKGZpbGUgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgbG9jLT5maWxlKSkpIHsKICAgIHJldCA9IGpzX3N0cmR1cChjdHgsIGZpbGUpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBmaWxlKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpsb2NhdGlvbl90b3ZhbHVlKGNvbnN0IExvY2F0aW9uKiBsb2MsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciogc3RyID0gbG9jYXRpb25fdG9zdHJpbmcobG9jLCBjdHgpOwogIEpTVmFsdWUgcmV0ID0gSlNfTmV3U3RyaW5nKGN0eCwgc3RyKTsKICBqc19mcmVlKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9CgpWSVNJQkxFIHZvaWQKbG9jYXRpb25faW5pdChMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5yZWZfY291bnQgPSAxOwogIGxvYy0+ZmlsZSA9IC0xOwogIGxvYy0+c3RyID0gMDsKICBsb2NhdGlvbl96ZXJvKGxvYyk7Cn0KCnZvaWQKbG9jYXRpb25femVybyhMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5saW5lID0gMDsKICBsb2MtPmNvbHVtbiA9IDA7CiAgbG9jLT5jaGFyX29mZnNldCA9IDA7CiAgbG9jLT5ieXRlX29mZnNldCA9IDA7Cn0KCnZvaWQKbG9jYXRpb25fYWRkKExvY2F0aW9uKiBsb2MsIGNvbnN0IExvY2F0aW9uKiBvdGhlcikgewogIGxvYy0+bGluZSArPSBvdGhlci0+bGluZTsKICBsb2MtPmNvbHVtbiArPSBvdGhlci0+Y29sdW1uOwogIGxvYy0+Y2hhcl9vZmZzZXQgKz0gb3RoZXItPmNoYXJfb2Zmc2V0OwogIGxvYy0+Ynl0ZV9vZmZzZXQgKz0gb3RoZXItPmJ5dGVfb2Zmc2V0Owp9Cgp2b2lkCmxvY2F0aW9uX3N1YihMb2NhdGlvbiogbG9jLCBjb25zdCBMb2NhdGlvbiogb3RoZXIpIHsKICBsb2MtPmxpbmUgLT0gb3RoZXItPmxpbmU7CiAgbG9jLT5jb2x1bW4gLT0gb3RoZXItPmNvbHVtbjsKICBsb2MtPmNoYXJfb2Zmc2V0IC09IG90aGVyLT5jaGFyX29mZnNldDsKICBsb2MtPmJ5dGVfb2Zmc2V0IC09IG90aGVyLT5ieXRlX29mZnNldDsKfQoKQk9PTApsb2NhdGlvbl9yZWxlYXNlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLWxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGlmKGxvYy0+ZmlsZSA+PSAwKQogICAgICBKU19GcmVlQXRvbVJUKHJ0LCBsb2MtPmZpbGUpOwoKICAgIGlmKGxvYy0+c3RyKQogICAgICBqc19mcmVlX3J0KHJ0LCAoY2hhciopbG9jLT5zdHIpOwogICAgbWVtc2V0KGxvYywgMCwgc2l6ZW9mKExvY2F0aW9uKSk7CiAgICBsb2MtPmZpbGUgPSAtMTsKICAgIHJldHVybiBUUlVFOwogIH0KICAvLyBwcmludGYoImxvY2F0aW9uX3JlbGVhc2VfcnQgJXAgcmVmX2NvdW50PSVkXG4iLCBsb2MsIGxvYy0+cmVmX2NvdW50KTsKICByZXR1cm4gRkFMU0U7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9mcmVlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBsb2NhdGlvbl9yZWxlYXNlX3J0KGxvYywgcnQpOwogIGlmKGxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGpzX2ZyZWVfcnQocnQsIGxvYyk7CiAgICBsb2MgPSAwOwogIH0KICByZXR1cm4gbG9jOwp9CgpzaXplX3QKbG9jYXRpb25fY291bnQoTG9jYXRpb24qIGxvYywgY29uc3QgY2hhciogeCwgc2l6ZV90IG4pIHsKICBzaXplX3Qgc3RhcnQ9bG9jLT5jaGFyX29mZnNldCxpOwoKICBmb3IoaSA9IDA7IGkgPCBuOykgewogICAgc2l6ZV90IGJ5dGVzID0gdXRmOF9jaGFybGVuKCZ4W2ldLCBuIC0gaSk7CgogICAgaWYoeFtpXSA9PSAnXG4nKSB7CiAgICAgIGxvYy0+bGluZSsrOwogICAgICBsb2MtPmNvbHVtbiA9IDA7CiAgICB9IGVsc2UgewogICAgICBsb2MtPmNvbHVtbisrOwogICAgfQoKICAgIGxvYy0+Y2hhcl9vZmZzZXQrKzsKICAgIGxvYy0+Ynl0ZV9vZmZzZXQgKz0gYnl0ZXM7CiAgICBpICs9IGJ5dGVzOwogIH0KICByZXR1cm4gbG9jLT5jaGFyX29mZnNldC1zdGFydDsKfQoKTG9jYXRpb24qCmxvY2F0aW9uX2NvcHkoTG9jYXRpb24qIGRzdCwgY29uc3QgTG9jYXRpb24qIHNyYywgSlNDb250ZXh0KiBjdHgpIHsKICBkc3QtPmZpbGUgPSBzcmMtPmZpbGUgPj0gMCA/IEpTX0R1cEF0b20oY3R4LCBzcmMtPmZpbGUpIDogc3JjLT5maWxlOwogIGRzdC0+bGluZSA9IHNyYy0+bGluZTsKICBkc3QtPmNvbHVtbiA9IHNyYy0+Y29sdW1uOwogIGRzdC0+Y2hhcl9vZmZzZXQgPSBzcmMtPmNoYXJfb2Zmc2V0OwogIGRzdC0+Ynl0ZV9vZmZzZXQgPSBzcmMtPmJ5dGVfb2Zmc2V0OwogIGRzdC0+c3RyID0gc3JjLT5zdHIgPyBqc19zdHJkdXAoY3R4LCBzcmMtPnN0cikgOiAwOwogIHJldHVybiBkc3Q7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9jbG9uZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIExvY2F0aW9uKiByZXQ7CgogIGlmKChyZXQgPSBsb2NhdGlvbl9uZXcoY3R4KSkpIHsKICAgIHJldC0+ZmlsZSA9IGxvYy0+ZmlsZSA+PSAwID8gSlNfRHVwQXRvbShjdHgsIGxvYy0+ZmlsZSkgOiAtMTsKICAgIHJldC0+bGluZSA9IGxvYy0+bGluZTsKICAgIHJldC0+Y29sdW1uID0gbG9jLT5jb2x1bW47CiAgICByZXQtPmNoYXJfb2Zmc2V0ID0gbG9jLT5jaGFyX29mZnNldDsKICAgIHJldC0+Ynl0ZV9vZmZzZXQgPSBsb2MtPmJ5dGVfb2Zmc2V0OwogICAgcmV0LT5zdHIgPSBsb2MtPnN0ciA/IGpzX3N0cmR1cChjdHgsIGxvYy0+c3RyKSA6IDA7CiAgfQogIHJldHVybiByZXQ7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9uZXcoSlNDb250ZXh0KiBjdHgpIHsKICBMb2NhdGlvbiogbG9jOwogIGlmKChsb2MgPSBqc19tYWxsb2MoY3R4LCBzaXplb2YoTG9jYXRpb24pKSkpCiAgICBsb2NhdGlvbl9pbml0KGxvYyk7CiAgcmV0dXJuIGxvYzsKfQoKLyoqCiAqIEB9CiAqLwoAAAAAAAAAAA4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QgAAAAAAAALCQAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAODgAAI2luY2x1ZGUgPHN0ZGRlZi5oPgojaW5jbHVkZSAibG9jYXRpb24uaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSAiZGVidWcuaCIKCi8qKgogKiBcYWRkdG9ncm91cCBsb2NhdGlvbgogKiBAewogKi8Kdm9pZApsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiogbG9jLCBEeW5CdWYqIGRidWYsIEpTQ29udGV4dCogY3R4KSB7CiAgaWYoY3R4ICYmIGxvYy0+ZmlsZSA+IC0xKSB7CiAgICBqc19hdG9tX2R1bXAoY3R4LCBsb2MtPmZpbGUsIGRidWYsIEZBTFNFKTsKICAgIGRidWZfcHV0YyhkYnVmLCAnOicpOwogIH0KICBpZihsb2MtPmNvbHVtbiAhPSBVSU5UMzJfTUFYKQogICAgZGJ1Zl9wcmludGYoZGJ1ZiwgIiUiIFBSSWQzMiAiOiUiIFBSSWQzMiwgbG9jLT5saW5lICsgMSwgbG9jLT5jb2x1bW4gKyAxKTsKICBlbHNlCiAgICBkYnVmX3ByaW50ZihkYnVmLCAiJSIgUFJJZDMyLCBsb2MtPmxpbmUgKyAxKTsKfQoKY2hhcioKbG9jYXRpb25fdG9zdHJpbmcoY29uc3QgTG9jYXRpb24qIGxvYywgSlNDb250ZXh0KiBjdHgpIHsKICBEeW5CdWYgZGJ1ZjsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CgogIGxvY2F0aW9uX3ByaW50KGxvYywgJmRidWYsIGN0eCk7CiAgZGJ1Zl8wKCZkYnVmKTsKCiAgcmV0dXJuIChjaGFyKilkYnVmLmJ1ZjsKfQoKY2hhcioKbG9jYXRpb25fZmlsZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIGNvbnN0IGNoYXIqIGZpbGU7CiAgY2hhciogcmV0ID0gMDsKCiAgaWYoKGZpbGUgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgbG9jLT5maWxlKSkpIHsKICAgIHJldCA9IGpzX3N0cmR1cChjdHgsIGZpbGUpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBmaWxlKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpsb2NhdGlvbl90b3ZhbHVlKGNvbnN0IExvY2F0aW9uKiBsb2MsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciogc3RyID0gbG9jYXRpb25fdG9zdHJpbmcobG9jLCBjdHgpOwogIEpTVmFsdWUgcmV0ID0gSlNfTmV3U3RyaW5nKGN0eCwgc3RyKTsKICBqc19mcmVlKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9CgpWSVNJQkxFIHZvaWQKbG9jYXRpb25faW5pdChMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5yZWZfY291bnQgPSAxOwogIGxvYy0+ZmlsZSA9IC0xOwogIGxvYy0+c3RyID0gMDsKICBsb2NhdGlvbl96ZXJvKGxvYyk7Cn0KCnZvaWQKbG9jYXRpb25femVybyhMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5saW5lID0gMDsKICBsb2MtPmNvbHVtbiA9IDA7CiAgbG9jLT5jaGFyX29mZnNldCA9IDA7CiAgbG9jLT5ieXRlX29mZnNldCA9IDA7Cn0KCnZvaWQKbG9jYXRpb25fYWRkKExvY2F0aW9uKiBsb2MsIGNvbnN0IExvY2F0aW9uKiBvdGhlcikgewogIGxvYy0+bGluZSArPSBvdGhlci0+bGluZTsKICBsb2MtPmNvbHVtbiArPSBvdGhlci0+Y29sdW1uOwogIGxvYy0+Y2hhcl9vZmZzZXQgKz0gb3RoZXItPmNoYXJfb2Zmc2V0OwogIGxvYy0+Ynl0ZV9vZmZzZXQgKz0gb3RoZXItPmJ5dGVfb2Zmc2V0Owp9Cgp2b2lkCmxvY2F0aW9uX3N1YihMb2NhdGlvbiogbG9jLCBjb25zdCBMb2NhdGlvbiogb3RoZXIpIHsKICBsb2MtPmxpbmUgLT0gb3RoZXItPmxpbmU7CiAgbG9jLT5jb2x1bW4gLT0gb3RoZXItPmNvbHVtbjsKICBsb2MtPmNoYXJfb2Zmc2V0IC09IG90aGVyLT5jaGFyX29mZnNldDsKICBsb2MtPmJ5dGVfb2Zmc2V0IC09IG90aGVyLT5ieXRlX29mZnNldDsKfQoKQk9PTApsb2NhdGlvbl9yZWxlYXNlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLWxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGlmKGxvYy0+ZmlsZSA+PSAwKQogICAgICBKU19GcmVlQXRvbVJUKHJ0LCBsb2MtPmZpbGUpOwoKICAgIGlmKGxvYy0+c3RyKQogICAgICBqc19mcmVlX3J0KHJ0LCAoY2hhciopbG9jLT5zdHIpOwogICAgbWVtc2V0KGxvYywgMCwgc2l6ZW9mKExvY2F0aW9uKSk7CiAgICBsb2MtPmZpbGUgPSAtMTsKICAgIHJldHVybiBUUlVFOwogIH0KICAvLyBwcmludGYoImxvY2F0aW9uX3JlbGVhc2VfcnQgJXAgcmVmX2NvdW50PSVkXG4iLCBsb2MsIGxvYy0+cmVmX2NvdW50KTsKICByZXR1cm4gRkFMU0U7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9mcmVlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBsb2NhdGlvbl9yZWxlYXNlX3J0KGxvYywgcnQpOwogIGlmKGxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGpzX2ZyZWVfcnQocnQsIGxvYyk7CiAgICBsb2MgPSAwOwogIH0KICByZXR1cm4gbG9jOwp9CgpzaXplX3QKbG9jYXRpb25fY291bnQoTG9jYXRpb24qIGxvYywgY29uc3QgY2hhciogeCwgc2l6ZV90IG4pIHsKICBzaXplX3Qgc3RhcnQgPSBsb2MtPmNoYXJfb2Zmc2V0LCBpOwoKICBmb3IoaSA9IDA7IGkgPCBuOykgewogICAgc2l6ZV90IGJ5dGVzID0gdXRmOF9jaGFybGVuKCZ4W2ldLCBuIC0gaSk7CgogICAgaWYoeFtpXSA9PSAnXG4nKSB7CiAgICAgIGxvYy0+bGluZSsrOwogICAgICBsb2MtPmNvbHVtbiA9IDA7CiAgICB9IGVsc2UgewogICAgICBsb2MtPmNvbHVtbisrOwogICAgfQoKICAgIGxvYy0+Y2hhcl9vZmZzZXQrKzsKICAgIGxvYy0+Ynl0ZV9vZmZzZXQgKz0gYnl0ZXM7CiAgICBpICs9IGJ5dGVzOwogIH0KICByZXR1cm4gbG9jLT5jaGFyX29mZnNldCAtIHN0YXJ0Owp9CgpMb2NhdGlvbioKbG9jYXRpb25fY29weShMb2NhdGlvbiogZHN0LCBjb25zdCBMb2NhdGlvbiogc3JjLCBKU0NvbnRleHQqIGN0eCkgewogIGRzdC0+ZmlsZSA9IHNyYy0+ZmlsZSA+PSAwID8gSlNfRHVwQXRvbShjdHgsIHNyYy0+ZmlsZSkgOiBzcmMtPmZpbGU7CiAgZHN0LT5saW5lID0gc3JjLT5saW5lOwogIGRzdC0+Y29sdW1uID0gc3JjLT5jb2x1bW47CiAgZHN0LT5jaGFyX29mZnNldCA9IHNyYy0+Y2hhcl9vZmZzZXQ7CiAgZHN0LT5ieXRlX29mZnNldCA9IHNyYy0+Ynl0ZV9vZmZzZXQ7CiAgZHN0LT5zdHIgPSBzcmMtPnN0ciA/IGpzX3N0cmR1cChjdHgsIHNyYy0+c3RyKSA6IDA7CiAgcmV0dXJuIGRzdDsKfQoKTG9jYXRpb24qCmxvY2F0aW9uX2Nsb25lKGNvbnN0IExvY2F0aW9uKiBsb2MsIEpTQ29udGV4dCogY3R4KSB7CiAgTG9jYXRpb24qIHJldDsKCiAgaWYoKHJldCA9IGxvY2F0aW9uX25ldyhjdHgpKSkgewogICAgcmV0LT5maWxlID0gbG9jLT5maWxlID49IDAgPyBKU19EdXBBdG9tKGN0eCwgbG9jLT5maWxlKSA6IC0xOwogICAgcmV0LT5saW5lID0gbG9jLT5saW5lOwogICAgcmV0LT5jb2x1bW4gPSBsb2MtPmNvbHVtbjsKICAgIHJldC0+Y2hhcl9vZmZzZXQgPSBsb2MtPmNoYXJfb2Zmc2V0OwogICAgcmV0LT5ieXRlX29mZnNldCA9IGxvYy0+Ynl0ZV9vZmZzZXQ7CiAgICByZXQtPnN0ciA9IGxvYy0+c3RyID8ganNfc3RyZHVwKGN0eCwgbG9jLT5zdHIpIDogMDsKICB9CiAgcmV0dXJuIHJldDsKfQoKTG9jYXRpb24qCmxvY2F0aW9uX25ldyhKU0NvbnRleHQqIGN0eCkgewogIExvY2F0aW9uKiBsb2M7CiAgaWYoKGxvYyA9IGpzX21hbGxvYyhjdHgsIHNpemVvZihMb2NhdGlvbikpKSkKICAgIGxvY2F0aW9uX2luaXQobG9jKTsKICByZXR1cm4gbG9jOwp9CgovKioKICogQH0KICovCgAAAAAAAAAADg4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QgAAAAAAAALCQAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"paste",
					null,
					"AgAAACEJAAAAAAAAKAkAAAAAAAAAAAAAKAkAAAAAAAAoCQAAAAAAAAQAAABjaGFy",
					"AQAAAAAAAAABAAAAIQkAAAAAAAAlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": "/("
					},
					"AgAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACZCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwkAAAAAAACXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					2,
					"left_delete",
					null,
					"AgAAAJgJAAAAAAAAmAkAAAAAAAABAAAAKJcJAAAAAAAAlwkAAAAAAAABAAAALw",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					1,
					"insert",
					{
						"characters": "(char"
					},
					"BQAAAJcJAAAAAAAAmAkAAAAAAAAAAAAAmAkAAAAAAACZCQAAAAAAAAAAAACZCQAAAAAAAJoJAAAAAAAAAAAAAJoJAAAAAAAAmwkAAAAAAAAAAAAAmwkAAAAAAACcCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwkAAAAAAACXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					3,
					"left_delete",
					null,
					"AwAAAJsJAAAAAAAAmwkAAAAAAAABAAAAcpoJAAAAAAAAmgkAAAAAAAABAAAAYZkJAAAAAAAAmQkAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAAnAkAAAAAAACcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": "ons"
					},
					"AwAAAJkJAAAAAAAAmgkAAAAAAAAAAAAAmgkAAAAAAACbCQAAAAAAAAAAAACbCQAAAAAAAJwJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwJAAAAAAAAnQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAkAAAAAAACcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"left_delete",
					null,
					"AQAAAJwJAAAAAAAAnAkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAnQkAAAAAAACdCQAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAJwJAAAAAAAAnQkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAkAAAAAAACcCQAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " void*)"
					},
					"BwAAAJ0JAAAAAAAAngkAAAAAAAAAAAAAngkAAAAAAACfCQAAAAAAAAAAAACfCQAAAAAAAKAJAAAAAAAAAAAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAACiCQAAAAAAAKMJAAAAAAAAAAAAAKMJAAAAAAAApAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQkAAAAAAACdCQAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeDgAAI2luY2x1ZGUgPHN0ZGRlZi5oPgojaW5jbHVkZSAibG9jYXRpb24uaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSAiZGVidWcuaCIKCi8qKgogKiBcYWRkdG9ncm91cCBsb2NhdGlvbgogKiBAewogKi8Kdm9pZApsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiogbG9jLCBEeW5CdWYqIGRidWYsIEpTQ29udGV4dCogY3R4KSB7CiAgaWYoY3R4ICYmIGxvYy0+ZmlsZSA+IC0xKSB7CiAgICBqc19hdG9tX2R1bXAoY3R4LCBsb2MtPmZpbGUsIGRidWYsIEZBTFNFKTsKICAgIGRidWZfcHV0YyhkYnVmLCAnOicpOwogIH0KICBpZihsb2MtPmNvbHVtbiAhPSBVSU5UMzJfTUFYKQogICAgZGJ1Zl9wcmludGYoZGJ1ZiwgIiUiIFBSSWQzMiAiOiUiIFBSSWQzMiwgbG9jLT5saW5lICsgMSwgbG9jLT5jb2x1bW4gKyAxKTsKICBlbHNlCiAgICBkYnVmX3ByaW50ZihkYnVmLCAiJSIgUFJJZDMyLCBsb2MtPmxpbmUgKyAxKTsKfQoKY2hhcioKbG9jYXRpb25fdG9zdHJpbmcoY29uc3QgTG9jYXRpb24qIGxvYywgSlNDb250ZXh0KiBjdHgpIHsKICBEeW5CdWYgZGJ1ZjsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CgogIGxvY2F0aW9uX3ByaW50KGxvYywgJmRidWYsIGN0eCk7CiAgZGJ1Zl8wKCZkYnVmKTsKCiAgcmV0dXJuIChjaGFyKilkYnVmLmJ1ZjsKfQoKY2hhcioKbG9jYXRpb25fZmlsZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIGNvbnN0IGNoYXIqIGZpbGU7CiAgY2hhciogcmV0ID0gMDsKCiAgaWYoKGZpbGUgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgbG9jLT5maWxlKSkpIHsKICAgIHJldCA9IGpzX3N0cmR1cChjdHgsIGZpbGUpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBmaWxlKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpsb2NhdGlvbl90b3ZhbHVlKGNvbnN0IExvY2F0aW9uKiBsb2MsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciogc3RyID0gbG9jYXRpb25fdG9zdHJpbmcobG9jLCBjdHgpOwogIEpTVmFsdWUgcmV0ID0gSlNfTmV3U3RyaW5nKGN0eCwgc3RyKTsKICBqc19mcmVlKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9CgpWSVNJQkxFIHZvaWQKbG9jYXRpb25faW5pdChMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5yZWZfY291bnQgPSAxOwogIGxvYy0+ZmlsZSA9IC0xOwogIGxvYy0+c3RyID0gMDsKICBsb2NhdGlvbl96ZXJvKGxvYyk7Cn0KCnZvaWQKbG9jYXRpb25femVybyhMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5saW5lID0gMDsKICBsb2MtPmNvbHVtbiA9IDA7CiAgbG9jLT5jaGFyX29mZnNldCA9IDA7CiAgbG9jLT5ieXRlX29mZnNldCA9IDA7Cn0KCnZvaWQKbG9jYXRpb25fYWRkKExvY2F0aW9uKiBsb2MsIGNvbnN0IExvY2F0aW9uKiBvdGhlcikgewogIGxvYy0+bGluZSArPSBvdGhlci0+bGluZTsKICBsb2MtPmNvbHVtbiArPSBvdGhlci0+Y29sdW1uOwogIGxvYy0+Y2hhcl9vZmZzZXQgKz0gb3RoZXItPmNoYXJfb2Zmc2V0OwogIGxvYy0+Ynl0ZV9vZmZzZXQgKz0gb3RoZXItPmJ5dGVfb2Zmc2V0Owp9Cgp2b2lkCmxvY2F0aW9uX3N1YihMb2NhdGlvbiogbG9jLCBjb25zdCBMb2NhdGlvbiogb3RoZXIpIHsKICBsb2MtPmxpbmUgLT0gb3RoZXItPmxpbmU7CiAgbG9jLT5jb2x1bW4gLT0gb3RoZXItPmNvbHVtbjsKICBsb2MtPmNoYXJfb2Zmc2V0IC09IG90aGVyLT5jaGFyX29mZnNldDsKICBsb2MtPmJ5dGVfb2Zmc2V0IC09IG90aGVyLT5ieXRlX29mZnNldDsKfQoKQk9PTApsb2NhdGlvbl9yZWxlYXNlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLWxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGlmKGxvYy0+ZmlsZSA+PSAwKQogICAgICBKU19GcmVlQXRvbVJUKHJ0LCBsb2MtPmZpbGUpOwoKICAgIGlmKGxvYy0+c3RyKQogICAgICBqc19mcmVlX3J0KHJ0LCAoY2hhciopbG9jLT5zdHIpOwogICAgbWVtc2V0KGxvYywgMCwgc2l6ZW9mKExvY2F0aW9uKSk7CiAgICBsb2MtPmZpbGUgPSAtMTsKICAgIHJldHVybiBUUlVFOwogIH0KICAvLyBwcmludGYoImxvY2F0aW9uX3JlbGVhc2VfcnQgJXAgcmVmX2NvdW50PSVkXG4iLCBsb2MsIGxvYy0+cmVmX2NvdW50KTsKICByZXR1cm4gRkFMU0U7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9mcmVlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBsb2NhdGlvbl9yZWxlYXNlX3J0KGxvYywgcnQpOwogIGlmKGxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGpzX2ZyZWVfcnQocnQsIGxvYyk7CiAgICBsb2MgPSAwOwogIH0KICByZXR1cm4gbG9jOwp9CgpzaXplX3QKbG9jYXRpb25fY291bnQoTG9jYXRpb24qIGxvYywgY29uc3QgdWludDhfdCogeCwgc2l6ZV90IG4pIHsKICBzaXplX3Qgc3RhcnQgPSBsb2MtPmNoYXJfb2Zmc2V0LCBpOwoKICBmb3IoaSA9IDA7IGkgPCBuOykgewogICAgc2l6ZV90IGJ5dGVzID0gdXRmOF9jaGFybGVuKChjb25zdCB2b2lkKikmeFtpXSwgbiAtIGkpOwoKICAgIGlmKHhbaV0gPT0gJ1xuJykgewogICAgICBsb2MtPmxpbmUrKzsKICAgICAgbG9jLT5jb2x1bW4gPSAwOwogICAgfSBlbHNlIHsKICAgICAgbG9jLT5jb2x1bW4rKzsKICAgIH0KCiAgICBsb2MtPmNoYXJfb2Zmc2V0Kys7CiAgICBsb2MtPmJ5dGVfb2Zmc2V0ICs9IGJ5dGVzOwogICAgaSArPSBieXRlczsKICB9CiAgcmV0dXJuIGxvYy0+Y2hhcl9vZmZzZXQgLSBzdGFydDsKfQoKTG9jYXRpb24qCmxvY2F0aW9uX2NvcHkoTG9jYXRpb24qIGRzdCwgY29uc3QgTG9jYXRpb24qIHNyYywgSlNDb250ZXh0KiBjdHgpIHsKICBkc3QtPmZpbGUgPSBzcmMtPmZpbGUgPj0gMCA/IEpTX0R1cEF0b20oY3R4LCBzcmMtPmZpbGUpIDogc3JjLT5maWxlOwogIGRzdC0+bGluZSA9IHNyYy0+bGluZTsKICBkc3QtPmNvbHVtbiA9IHNyYy0+Y29sdW1uOwogIGRzdC0+Y2hhcl9vZmZzZXQgPSBzcmMtPmNoYXJfb2Zmc2V0OwogIGRzdC0+Ynl0ZV9vZmZzZXQgPSBzcmMtPmJ5dGVfb2Zmc2V0OwogIGRzdC0+c3RyID0gc3JjLT5zdHIgPyBqc19zdHJkdXAoY3R4LCBzcmMtPnN0cikgOiAwOwogIHJldHVybiBkc3Q7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9jbG9uZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIExvY2F0aW9uKiByZXQ7CgogIGlmKChyZXQgPSBsb2NhdGlvbl9uZXcoY3R4KSkpIHsKICAgIHJldC0+ZmlsZSA9IGxvYy0+ZmlsZSA+PSAwID8gSlNfRHVwQXRvbShjdHgsIGxvYy0+ZmlsZSkgOiAtMTsKICAgIHJldC0+bGluZSA9IGxvYy0+bGluZTsKICAgIHJldC0+Y29sdW1uID0gbG9jLT5jb2x1bW47CiAgICByZXQtPmNoYXJfb2Zmc2V0ID0gbG9jLT5jaGFyX29mZnNldDsKICAgIHJldC0+Ynl0ZV9vZmZzZXQgPSBsb2MtPmJ5dGVfb2Zmc2V0OwogICAgcmV0LT5zdHIgPSBsb2MtPnN0ciA/IGpzX3N0cmR1cChjdHgsIGxvYy0+c3RyKSA6IDA7CiAgfQogIHJldHVybiByZXQ7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9uZXcoSlNDb250ZXh0KiBjdHgpIHsKICBMb2NhdGlvbiogbG9jOwogIGlmKChsb2MgPSBqc19tYWxsb2MoY3R4LCBzaXplb2YoTG9jYXRpb24pKSkpCiAgICBsb2NhdGlvbl9pbml0KGxvYyk7CiAgcmV0dXJuIGxvYzsKfQoKLyoqCiAqIEB9CiAqLwoAAAAAAAAAAB4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAkAAAAAAACkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					204,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAeDgAAI2luY2x1ZGUgPHN0ZGRlZi5oPgojaW5jbHVkZSAibG9jYXRpb24uaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSAiZGVidWcuaCIKCi8qKgogKiBcYWRkdG9ncm91cCBsb2NhdGlvbgogKiBAewogKi8Kdm9pZApsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiogbG9jLCBEeW5CdWYqIGRidWYsIEpTQ29udGV4dCogY3R4KSB7CiAgaWYoY3R4ICYmIGxvYy0+ZmlsZSA+IC0xKSB7CiAgICBqc19hdG9tX2R1bXAoY3R4LCBsb2MtPmZpbGUsIGRidWYsIEZBTFNFKTsKICAgIGRidWZfcHV0YyhkYnVmLCAnOicpOwogIH0KICBpZihsb2MtPmNvbHVtbiAhPSBVSU5UMzJfTUFYKQogICAgZGJ1Zl9wcmludGYoZGJ1ZiwgIiUiIFBSSWQzMiAiOiUiIFBSSWQzMiwgbG9jLT5saW5lICsgMSwgbG9jLT5jb2x1bW4gKyAxKTsKICBlbHNlCiAgICBkYnVmX3ByaW50ZihkYnVmLCAiJSIgUFJJZDMyLCBsb2MtPmxpbmUgKyAxKTsKfQoKY2hhcioKbG9jYXRpb25fdG9zdHJpbmcoY29uc3QgTG9jYXRpb24qIGxvYywgSlNDb250ZXh0KiBjdHgpIHsKICBEeW5CdWYgZGJ1ZjsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CgogIGxvY2F0aW9uX3ByaW50KGxvYywgJmRidWYsIGN0eCk7CiAgZGJ1Zl8wKCZkYnVmKTsKCiAgcmV0dXJuIChjaGFyKilkYnVmLmJ1ZjsKfQoKY2hhcioKbG9jYXRpb25fZmlsZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIGNvbnN0IGNoYXIqIGZpbGU7CiAgY2hhciogcmV0ID0gMDsKCiAgaWYoKGZpbGUgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgbG9jLT5maWxlKSkpIHsKICAgIHJldCA9IGpzX3N0cmR1cChjdHgsIGZpbGUpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBmaWxlKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpsb2NhdGlvbl90b3ZhbHVlKGNvbnN0IExvY2F0aW9uKiBsb2MsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciogc3RyID0gbG9jYXRpb25fdG9zdHJpbmcobG9jLCBjdHgpOwogIEpTVmFsdWUgcmV0ID0gSlNfTmV3U3RyaW5nKGN0eCwgc3RyKTsKICBqc19mcmVlKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9CgpWSVNJQkxFIHZvaWQKbG9jYXRpb25faW5pdChMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5yZWZfY291bnQgPSAxOwogIGxvYy0+ZmlsZSA9IC0xOwogIGxvYy0+c3RyID0gMDsKICBsb2NhdGlvbl96ZXJvKGxvYyk7Cn0KCnZvaWQKbG9jYXRpb25femVybyhMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5saW5lID0gMDsKICBsb2MtPmNvbHVtbiA9IDA7CiAgbG9jLT5jaGFyX29mZnNldCA9IDA7CiAgbG9jLT5ieXRlX29mZnNldCA9IDA7Cn0KCnZvaWQKbG9jYXRpb25fYWRkKExvY2F0aW9uKiBsb2MsIGNvbnN0IExvY2F0aW9uKiBvdGhlcikgewogIGxvYy0+bGluZSArPSBvdGhlci0+bGluZTsKICBsb2MtPmNvbHVtbiArPSBvdGhlci0+Y29sdW1uOwogIGxvYy0+Y2hhcl9vZmZzZXQgKz0gb3RoZXItPmNoYXJfb2Zmc2V0OwogIGxvYy0+Ynl0ZV9vZmZzZXQgKz0gb3RoZXItPmJ5dGVfb2Zmc2V0Owp9Cgp2b2lkCmxvY2F0aW9uX3N1YihMb2NhdGlvbiogbG9jLCBjb25zdCBMb2NhdGlvbiogb3RoZXIpIHsKICBsb2MtPmxpbmUgLT0gb3RoZXItPmxpbmU7CiAgbG9jLT5jb2x1bW4gLT0gb3RoZXItPmNvbHVtbjsKICBsb2MtPmNoYXJfb2Zmc2V0IC09IG90aGVyLT5jaGFyX29mZnNldDsKICBsb2MtPmJ5dGVfb2Zmc2V0IC09IG90aGVyLT5ieXRlX29mZnNldDsKfQoKQk9PTApsb2NhdGlvbl9yZWxlYXNlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBpZigtLWxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGlmKGxvYy0+ZmlsZSA+PSAwKQogICAgICBKU19GcmVlQXRvbVJUKHJ0LCBsb2MtPmZpbGUpOwoKICAgIGlmKGxvYy0+c3RyKQogICAgICBqc19mcmVlX3J0KHJ0LCAoY2hhciopbG9jLT5zdHIpOwogICAgbWVtc2V0KGxvYywgMCwgc2l6ZW9mKExvY2F0aW9uKSk7CiAgICBsb2MtPmZpbGUgPSAtMTsKICAgIHJldHVybiBUUlVFOwogIH0KICAvLyBwcmludGYoImxvY2F0aW9uX3JlbGVhc2VfcnQgJXAgcmVmX2NvdW50PSVkXG4iLCBsb2MsIGxvYy0+cmVmX2NvdW50KTsKICByZXR1cm4gRkFMU0U7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9mcmVlX3J0KExvY2F0aW9uKiBsb2MsIEpTUnVudGltZSogcnQpIHsKICBsb2NhdGlvbl9yZWxlYXNlX3J0KGxvYywgcnQpOwogIGlmKGxvYy0+cmVmX2NvdW50ID09IDApIHsKICAgIGpzX2ZyZWVfcnQocnQsIGxvYyk7CiAgICBsb2MgPSAwOwogIH0KICByZXR1cm4gbG9jOwp9CgpzaXplX3QKbG9jYXRpb25fY291bnQoTG9jYXRpb24qIGxvYywgY29uc3QgdWludDhfdCogeCwgc2l6ZV90IG4pIHsKICBzaXplX3Qgc3RhcnQgPSBsb2MtPmNoYXJfb2Zmc2V0LCBpOwoKICBmb3IoaSA9IDA7IGkgPCBuOykgewogICAgc2l6ZV90IGJ5dGVzID0gdXRmOF9jaGFybGVuKChjb25zdCB2b2lkKikmeFtpXSwgbiAtIGkpOwoKICAgIGlmKHhbaV0gPT0gJ1xuJykgewogICAgICBsb2MtPmxpbmUrKzsKICAgICAgbG9jLT5jb2x1bW4gPSAwOwogICAgfSBlbHNlIHsKICAgICAgbG9jLT5jb2x1bW4rKzsKICAgIH0KCiAgICBsb2MtPmNoYXJfb2Zmc2V0Kys7CiAgICBsb2MtPmJ5dGVfb2Zmc2V0ICs9IGJ5dGVzOwogICAgaSArPSBieXRlczsKICB9CiAgcmV0dXJuIGxvYy0+Y2hhcl9vZmZzZXQgLSBzdGFydDsKfQoKTG9jYXRpb24qCmxvY2F0aW9uX2NvcHkoTG9jYXRpb24qIGRzdCwgY29uc3QgTG9jYXRpb24qIHNyYywgSlNDb250ZXh0KiBjdHgpIHsKICBkc3QtPmZpbGUgPSBzcmMtPmZpbGUgPj0gMCA/IEpTX0R1cEF0b20oY3R4LCBzcmMtPmZpbGUpIDogc3JjLT5maWxlOwogIGRzdC0+bGluZSA9IHNyYy0+bGluZTsKICBkc3QtPmNvbHVtbiA9IHNyYy0+Y29sdW1uOwogIGRzdC0+Y2hhcl9vZmZzZXQgPSBzcmMtPmNoYXJfb2Zmc2V0OwogIGRzdC0+Ynl0ZV9vZmZzZXQgPSBzcmMtPmJ5dGVfb2Zmc2V0OwogIGRzdC0+c3RyID0gc3JjLT5zdHIgPyBqc19zdHJkdXAoY3R4LCBzcmMtPnN0cikgOiAwOwogIHJldHVybiBkc3Q7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9jbG9uZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIExvY2F0aW9uKiByZXQ7CgogIGlmKChyZXQgPSBsb2NhdGlvbl9uZXcoY3R4KSkpIHsKICAgIHJldC0+ZmlsZSA9IGxvYy0+ZmlsZSA+PSAwID8gSlNfRHVwQXRvbShjdHgsIGxvYy0+ZmlsZSkgOiAtMTsKICAgIHJldC0+bGluZSA9IGxvYy0+bGluZTsKICAgIHJldC0+Y29sdW1uID0gbG9jLT5jb2x1bW47CiAgICByZXQtPmNoYXJfb2Zmc2V0ID0gbG9jLT5jaGFyX29mZnNldDsKICAgIHJldC0+Ynl0ZV9vZmZzZXQgPSBsb2MtPmJ5dGVfb2Zmc2V0OwogICAgcmV0LT5zdHIgPSBsb2MtPnN0ciA/IGpzX3N0cmR1cChjdHgsIGxvYy0+c3RyKSA6IDA7CiAgfQogIHJldHVybiByZXQ7Cn0KCkxvY2F0aW9uKgpsb2NhdGlvbl9uZXcoSlNDb250ZXh0KiBjdHgpIHsKICBMb2NhdGlvbiogbG9jOwogIGlmKChsb2MgPSBqc19tYWxsb2MoY3R4LCBzaXplb2YoTG9jYXRpb24pKSkpCiAgICBsb2NhdGlvbl9pbml0KGxvYyk7CiAgcmV0dXJuIGxvYzsKfQoKLyoqCiAqIEB9CiAqLwoAAAAAAAAAAB4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QsAAAAAAADdCwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-location.h",
			"settings":
			{
				"buffer_size": 1485,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					15,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADNBQAAI2lmbmRlZiBRVUlDS0pTX0xPQ0FUSU9OX0gKI2RlZmluZSBRVUlDS0pTX0xPQ0FUSU9OX0gKCiNpbmNsdWRlICJsb2NhdGlvbi5oIgojaW5jbHVkZSAidXRpbHMuaCIKCi8qKgogKiBcZGVmZ3JvdXAgcXVpY2tqcy1sb2NhdGlvbiBRdWlja0pTIG1vZHVsZTogbG9jYXRpb24gLSBUZXh0IGxvY2F0aW9uIG9iamVjdAogKiBAewogKi8KZXh0ZXJuIHRocmVhZF9sb2NhbCBKU0NsYXNzSUQganNfbG9jYXRpb25fY2xhc3NfaWQ7CmV4dGVybiB0aHJlYWRfbG9jYWwgSlNWYWx1ZSBsb2NhdGlvbl9wcm90bywgbG9jYXRpb25fY3RvcjsKCkpTVmFsdWUganNfbG9jYXRpb25fd3JhcChKU0NvbnRleHQqLCBMb2NhdGlvbiogbG9jKTsKSlNWYWx1ZSBqc19sb2NhdGlvbl90b3N0cmluZyhKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKTsKQk9PTCBqc19pc19sb2NhdGlvbihKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3Qgb2JqKTsKTG9jYXRpb24qIGpzX2xvY2F0aW9uX2Zyb20oSlNDb250ZXh0KiwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsKTsKSlNWYWx1ZSBqc19sb2NhdGlvbl90b3ByaW1pdGl2ZShKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKTsKSlNWYWx1ZSBqc19sb2NhdGlvbl9jb25zdHJ1Y3RvcihKU0NvbnRleHQqLCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pOwp2b2lkIGpzX2xvY2F0aW9uX2ZpbmFsaXplcihKU1J1bnRpbWUqLCBKU1ZhbHVlQ29uc3QgdmFsKTsKaW50IGpzX2xvY2F0aW9uX2luaXQoSlNDb250ZXh0KiwgSlNNb2R1bGVEZWYqIG0pOwpKU01vZHVsZURlZioganNfaW5pdF9tb2R1bGVfbG9jYXRpb24oSlNDb250ZXh0KiwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpOwoKc3RhdGljIGlubGluZSBMb2NhdGlvbioKanNfbG9jYXRpb25fZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBMb2NhdGlvbiogbG9jOwogIGFzc2VydChqc19sb2NhdGlvbl9jbGFzc19pZCk7CiAgaWYoKGxvYyA9IEpTX0dldE9wYXF1ZSh2YWx1ZSwganNfbG9jYXRpb25fY2xhc3NfaWQpKSkKICAgIGlmKGxvYyA9PSAoTG9jYXRpb24qKS0xKQogICAgICBsb2MgPSAwOwogIHJldHVybiBsb2M7Cn0KCnN0YXRpYyBpbmxpbmUgTG9jYXRpb24qCmpzX2xvY2F0aW9uX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBMb2NhdGlvbiogbG9jOwogIGFzc2VydChqc19sb2NhdGlvbl9jbGFzc19pZCk7CiAgaWYoKGxvYyA9IEpTX0dldE9wYXF1ZTIoY3R4LCB2YWx1ZSwganNfbG9jYXRpb25fY2xhc3NfaWQpKSkKICAgIGlmKGxvYyA9PSAoTG9jYXRpb24qKS0xKQogICAgICBsb2MgPSAwOwogIHJldHVybiBsb2M7Cn0KCi8qKgogKiBAfQogKi8KCiNlbmRpZiAvKiBkZWZpbmVkKFFVSUNLSlNfTE9DQVRJT05fSCkgKi8KAAAAAAAAAADNBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQEAAAAAAABFAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "char-utils.h",
			"settings":
			{
				"buffer_size": 9039,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABPIwAAI2lmbmRlZiBDSEFSX1VUSUxTX0gKI2RlZmluZSBDSEFSX1VUSUxTX0gKCiNpbmNsdWRlIDxjdXRpbHMuaD4KI2luY2x1ZGUgPHN0cmluZy5oPgojaW5jbHVkZSAiZGVidWcuaCIKCi8qKgogKiBcZGVmZ3JvdXAgY2hhci11dGlscyBDaGFyYWN0ZXIgVXRpbGl0aWVzCiAqIEB7CiAqLwojZGVmaW5lIGlzX2NvbnRyb2xfY2hhcihjKSAoKGMpID09ICdcYScgfHwgKGMpID09ICdcYicgfHwgKGMpID09ICdcdCcgfHwgKGMpID09ICdcbicgfHwgKGMpID09ICdcdicgfHwgKGMpID09ICdcZicgfHwgKGMpID09ICdccicpCiNkZWZpbmUgaXNfYWxwaGFudW1lcmljX2NoYXIoYykgKCgoYykgPj0gJ0EnICYmIChjKSA8PSAnWicpIHx8ICgoYykgPj0gJ2EnICYmIChjKSA8PSAneicpKQojZGVmaW5lIGlzX2RpZ2l0X2NoYXIoYykgKChjKSA+PSAnMCcgJiYgKGMpIDw9ICc5JykKI2RlZmluZSBpc19uZXdsaW5lX2NoYXIoYykgKChjKSA9PSAnXG4nKQojZGVmaW5lIGlzX2lkZW50aWZpZXJfY2hhcihjKSAoaXNfYWxwaGFudW1lcmljX2NoYXIoYykgfHwgaXNfZGlnaXRfY2hhcihjKSB8fCAoYykgPT0gJyQnIHx8IChjKSA9PSAnXycpCiNkZWZpbmUgaXNfd2hpdGVzcGFjZV9jaGFyKGMpICgoYykgPT0gJyAnIHx8IChjKSA9PSAnXHQnIHx8IChjKSA9PSAnXHYnIHx8IChjKSA9PSAnXG4nIHx8IChjKSA9PSAnXHInKQoKI2RlZmluZSBzdHJfZXF1YWwocywgdCkgKCFzdHJjbXAoKHMpLCAodCkpKQoKc3RhdGljIGlubGluZSBpbnQKZXNjYXBlX2NoYXJfcHJlZChpbnQgYykgewogIHN0YXRpYyBjb25zdCB1bnNpZ25lZCBjaGFyIHRhYmxlWzI1Nl0gPSB7J3gnLCAneCcsICd4JywgJ3gnLCAneCcsICAneCcsICd4JywgJ3gnLCAweDYyLCAweDc0LCAweDZlLCAweDc2LCAweDY2LCAweDcyLCAneCcsICd4JywgJ3gnLCAneCcsICAneCcsICd4JywgJ3gnLCAneCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAneCcsICd4JywgJ3gnLCAneCcsICd4JywgICd4JywgJ3gnLCAneCcsICd4JywgICd4JywgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDB4MjcsIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDB4NWMsIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgICd4JywgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwLCAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgMCwgICAwLCAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDAsICAgIDB9OwoKICByZXR1cm4gdGFibGVbKHVuc2lnbmVkIGNoYXIpY107Cn0KCnN0YXRpYyBpbmxpbmUgaW50CnVuZXNjYXBlX2NoYXJfcHJlZChpbnQgYykgewogIHN3aXRjaChjKSB7CiAgICBjYXNlICdiJzogcmV0dXJuIDg7CiAgICBjYXNlICdmJzogcmV0dXJuIDEyOwogICAgY2FzZSAnbic6IHJldHVybiAxMDsKICAgIGNhc2UgJ3InOiByZXR1cm4gMTM7CiAgICBjYXNlICd0JzogcmV0dXJuIDk7CiAgICBjYXNlICd2JzogcmV0dXJuIDExOwogICAgY2FzZSAnXCcnOiByZXR1cm4gMzk7CiAgICBjYXNlICdcXCc6IHJldHVybiA5MjsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmlzX2VzY2FwZV9jaGFyKGludCBjKSB7CiAgcmV0dXJuIGlzX2NvbnRyb2xfY2hhcihjKSB8fCBjID09ICdcXCcgfHwgYyA9PSAnXCcnIHx8IGMgPT0gMHgxYiB8fCBjID09IDA7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmlzX2JhY2tzbGFzaF9jaGFyKGludCBjKSB7CiAgcmV0dXJuIGMgPT0gJ1xcJzsKfQoKLy8jZGVmaW5lIGlzX2RvdF9jaGFyKGMpICgoYykgPT0gJy4nKTAKLy8jZGVmaW5lIGlzX2JhY2tzbGFzaF9jaGFyKGMpICgoYykgPT0gJ1xcJykKCnN0YXRpYyBpbmxpbmUgaW50CmlzX2RvdF9jaGFyKGludCBjKSB7CiAgcmV0dXJuIGMgPT0gJy4nOwp9CgpzdGF0aWMgaW5saW5lIGludAppc19pZGVudGlmaWVyKGNvbnN0IGNoYXIqIHN0cikgewogIGlmKCEoKCpzdHIgPj0gJ0EnICYmICpzdHIgPD0gJ1onKSB8fCAoKnN0ciA+PSAnYScgJiYgKnN0ciA8PSAneicpIHx8ICpzdHIgPT0gJyQnIHx8ICpzdHIgPT0gJ18nKSkKICAgIHJldHVybiAwOwogIHdoaWxlKCorK3N0cikgewogICAgaWYoIWlzX2lkZW50aWZpZXJfY2hhcigqc3RyKSkKICAgICAgcmV0dXJuIDA7CiAgfQogIHJldHVybiAxOwp9CgpzdGF0aWMgaW5saW5lIGludAppc19pbnRlZ2VyKGNvbnN0IGNoYXIqIHN0cikgewogIGlmKCEoKnN0ciA+PSAnMScgJiYgKnN0ciA8PSAnOScpICYmICEoKnN0ciA9PSAnMCcgJiYgc3RyWzFdID09ICdcMCcpKQogICAgcmV0dXJuIDA7CiAgd2hpbGUoKisrc3RyKSB7CiAgICBpZighaXNfZGlnaXRfY2hhcigqc3RyKSkKICAgICAgcmV0dXJuIDA7CiAgfQogIHJldHVybiAxOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApieXRlX2NvdW50KGNvbnN0IHZvaWQqIHMsIHNpemVfdCBuLCBjaGFyIGMpIHsKICBjb25zdCB1aW50OF90KiB0OwogIHVpbnQ4X3QgY2ggPSAodWludDhfdCljOwogIHNpemVfdCBjb3VudDsKICBmb3IodCA9ICh1aW50OF90KilzLCBjb3VudCA9IDA7IG47ICsrdCwgLS1uKSB7CiAgICBpZigqdCA9PSBjaCkKICAgICAgKytjb3VudDsKICB9CiAgcmV0dXJuIGNvdW50Owp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApieXRlX2Nocihjb25zdCB2b2lkKiBzdHIsIHNpemVfdCBsZW4sIGNoYXIgYykgewogIGNvbnN0IGNoYXIqIHMgPSBtZW1jaHIoc3RyLCBjLCBsZW4pOwogIGlmKHMpCiAgICByZXR1cm4gcyAtIChjb25zdCBjaGFyKilzdHI7CiAgcmV0dXJuIGxlbjsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKYnl0ZV9yY2hyKGNvbnN0IHZvaWQqIGhheXN0YWNrLCBzaXplX3QgbGVuLCBjaGFyIG5lZWRsZSkgewogIGNvbnN0IGNoYXIgKnMsICp0OwogIGZvcihzID0gKGNvbnN0IGNoYXIqKWhheXN0YWNrLCB0ID0gcyArIGxlbjs7KSB7CiAgICAtLXQ7CiAgICBpZihzID4gdCkKICAgICAgYnJlYWs7CiAgICBpZigqdCA9PSBuZWVkbGUpCiAgICAgIHJldHVybiAoc2l6ZV90KSh0IC0gcyk7CiAgfQogIHJldHVybiBsZW47Cn0KCi8qc2l6ZV90CmJ5dGVfcmNocihjb25zdCB2b2lkKiBzdHIsIHNpemVfdCBsZW4sIGNoYXIgYykgewogIGNvbnN0IGNoYXIqIHMgPSBtZW1yY2hyKHN0ciwgYywgbGVuKTsKICBpZihzKQogICAgcmV0dXJuIHMgLSAoY29uc3QgY2hhciopc3RyOwogIHJldHVybiBsZW47Cn0qLwoKc3RhdGljIGlubGluZSBzaXplX3QKYnl0ZV9jaHJzKGNvbnN0IHZvaWQqIHN0ciwgc2l6ZV90IGxlbiwgY29uc3QgY2hhciBuZWVkbGVbXSwgc2l6ZV90IG5sKSB7CiAgY29uc3QgY2hhciAqcywgKnQ7CiAgZm9yKHMgPSBzdHIsIHQgPSBzdHIgKyBsZW47IHMgIT0gdDsgcysrKQogICAgaWYoYnl0ZV9jaHIobmVlZGxlLCBubCwgKnMpIDwgbmwpCiAgICAgIGJyZWFrOwogIHJldHVybiBzIC0gKGNvbnN0IGNoYXIqKXN0cjsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX2Nocihjb25zdCBjaGFyKiBpbiwgY2hhciBuZWVkbGUpIHsKICBjb25zdCBjaGFyKiB0ID0gaW47CiAgY29uc3QgY2hhciBjID0gbmVlZGxlOwogIGZvcig7OykgewogICAgaWYoISp0IHx8ICp0ID09IGMpIHsKICAgICAgYnJlYWs7CiAgICB9OwogICAgKyt0OwogIH0KICByZXR1cm4gKHNpemVfdCkodCAtIGluKTsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX2NocnMoY29uc3QgY2hhciogaW4sIGNvbnN0IGNoYXIgbmVlZGxlc1tdLCBzaXplX3Qgbm4pIHsKICBjb25zdCBjaGFyKiB0ID0gaW47CiAgc2l6ZV90IGk7CiAgZm9yKDs7KSB7CiAgICBpZighKnQpCiAgICAgIGJyZWFrOwogICAgZm9yKGkgPSAwOyBpIDwgbm47IGkrKykKICAgICAgaWYoKnQgPT0gbmVlZGxlc1tpXSkKICAgICAgICByZXR1cm4gKHNpemVfdCkodCAtIGluKTsKICAgICsrdDsKICB9CiAgcmV0dXJuIChzaXplX3QpKHQgLSBpbik7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnN0cl9yY2hyKGNvbnN0IGNoYXIqIHMsIGNoYXIgbmVlZGxlKSB7CiAgY29uc3QgY2hhciAqaW4gPSBzLCAqZm91bmQgPSAwOwogIGZvcig7OykgewogICAgaWYoISppbikKICAgICAgYnJlYWs7CiAgICBpZigqaW4gPT0gbmVlZGxlKQogICAgICBmb3VuZCA9IGluOwogICAgKytpbjsKICB9CiAgcmV0dXJuIChzaXplX3QpKChmb3VuZCA/IGZvdW5kIDogaW4pIC0gcyk7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CnN0cl9yY2hycyhjb25zdCBjaGFyKiBpbiwgY29uc3QgY2hhciBuZWVkbGVzW10sIHNpemVfdCBubikgewogIGNvbnN0IGNoYXIgKnMgPSBpbiwgKmZvdW5kID0gMDsKICBzaXplX3QgaTsKICBmb3IoOzspIHsKICAgIGlmKCEqcykKICAgICAgYnJlYWs7CiAgICBmb3IoaSA9IDA7IGkgPCBubjsgKytpKSB7CiAgICAgIGlmKCpzID09IG5lZWRsZXNbaV0pCiAgICAgICAgZm91bmQgPSBzOwogICAgfQogICAgKytzOwogIH0KICByZXR1cm4gKHNpemVfdCkoKGZvdW5kID8gZm91bmQgOiBzKSAtIGluKTsKfQoKc3RhdGljIGlubGluZSBpbnQKc3RyX2VuZGIoY29uc3QgY2hhciogYSwgY29uc3QgY2hhciogeCwgc2l6ZV90IG4pIHsKICBzaXplX3QgYWxlbiA9IHN0cmxlbihhKTsKICBhICs9IGFsZW4gLSBuOwogIHJldHVybiBhbGVuID49IG4gJiYgIW1lbWNtcChhLCB4LCBuKTsKfQoKLyogc3RyX2VuZHMgcmV0dXJucyAxIGlmIHRoZSBiIGlzIGEgc3VmZml4IG9mIGEsIDAgb3RoZXJ3aXNlICovCnN0YXRpYyBpbmxpbmUgaW50CnN0cl9lbmRzKGNvbnN0IGNoYXIqIGEsIGNvbnN0IGNoYXIqIGIpIHsKICByZXR1cm4gc3RyX2VuZGIoYSwgYiwgc3RybGVuKGIpKTsKfQoKc3RhdGljIGlubGluZSBpbnQKc3RyX3N0YXJ0Yihjb25zdCBjaGFyKiBhLCBjb25zdCBjaGFyKiB4LCBzaXplX3QgbGVuKSB7CiAgc2l6ZV90IGk7CiAgZm9yKGkgPSAwOzsgaSsrKSB7CiAgICBpZihpID09IGxlbikKICAgICAgcmV0dXJuIDE7CiAgICBpZihhW2ldICE9IHhbaV0pCiAgICAgIGJyZWFrOwogIH0KICByZXR1cm4gMDsKfQoKc3RhdGljIGlubGluZSBpbnQKc3RyX3N0YXJ0KGNvbnN0IGNoYXIqIGEsIGNvbnN0IGNoYXIqIGIpIHsKICByZXR1cm4gc3RyX3N0YXJ0YihhLCBiLCBzdHJsZW4oYikpOwp9CgojZGVmaW5lIHN0cl9jb250YWlucyhzLCBuZWVkbGUpICghIXN0cmNocigocyksIChuZWVkbGUpKSkKCmNoYXIqIHN0cl9lc2NhcGUoY29uc3QgY2hhciopOwoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX2NvdW50KGNvbnN0IGNoYXIqIHMsIGNoYXIgYykgewogIHNpemVfdCBpLCBjb3VudCA9IDA7CiAgZm9yKGkgPSAwOyBzW2ldOyBpKyspCiAgICBpZihzW2ldID09IGMpCiAgICAgICsrY291bnQ7CiAgcmV0dXJuIGNvdW50Owp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApzdHJfY29weShjaGFyKiBvdXQsIGNvbnN0IGNoYXIqIGluKSB7CiAgY2hhciogczsKICBmb3IocyA9IG91dDsgKCpzID0gKmluKTsgKytzKSArK2luOwogIHJldHVybiAoc2l6ZV90KShzIC0gb3V0KTsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKc3RyX2NvcHluKGNoYXIqIG91dCwgY29uc3QgY2hhciogaW4sIHNpemVfdCBuKSB7CiAgY2hhciogczsKICBmb3IocyA9IG91dDsgbi0tICYmICgqcyA9ICppbik7ICsrcykgKytpbjsKICAqcyA9ICdcMCc7CiAgcmV0dXJuIChzaXplX3QpKHMgLSBvdXQpOwp9CgpzdGF0aWMgaW5saW5lIGNoYXIqCnN0cl9uZHVwKGNvbnN0IGNoYXIqIHMsIHNpemVfdCBuKSB7CiAgY2hhciogciA9IG1hbGxvYyhuICsgMSk7CiAgaWYociA9PSBOVUxMKQogICAgcmV0dXJuIE5VTEw7CiAgbWVtY3B5KHIsIHMsIG4pOwogIHJbbl0gPSAnXDAnOwogIHJldHVybiByOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApwcmVkaWNhdGVfZmluZChjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4sIGludCAoKnByZWQpKGludDMyX3QpKSB7CiAgc2l6ZV90IHBvczsKICBmb3IocG9zID0gMDsgcG9zIDwgbGVuOyBwb3MrKykKICAgIGlmKHByZWQoc3RyW3Bvc10pKQogICAgICBicmVhazsKICByZXR1cm4gcG9zOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApsb29rdXBfZmluZChjb25zdCBjaGFyKiBzdHIsIHNpemVfdCBsZW4sIGNvbnN0IGNoYXIgdGFibGVbMjU2XSkgewogIHNpemVfdCBwb3M7CiAgZm9yKHBvcyA9IDA7IHBvcyA8IGxlbjsgcG9zKyspCiAgICBpZih0YWJsZVsodW5zaWduZWQgY2hhcilzdHJbcG9zXV0pCiAgICAgIGJyZWFrOwogIHJldHVybiBwb3M7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcgplc2NhcGVfY2hhcl9sZXR0ZXIoY2hhciBjKSB7CiAgc3dpdGNoKGMpIHsKICAgIGNhc2UgJ1wwJzogcmV0dXJuICcwJzsKICAgIGNhc2UgJ1xhJzogcmV0dXJuICdhJzsKICAgIGNhc2UgJ1xiJzogcmV0dXJuICdiJzsKICAgIGNhc2UgJ1x0JzogcmV0dXJuICd0JzsKICAgIGNhc2UgJ1xuJzogcmV0dXJuICduJzsKICAgIGNhc2UgJ1x2JzogcmV0dXJuICd2JzsKICAgIGNhc2UgJ1xmJzogcmV0dXJuICdmJzsKICAgIGNhc2UgJ1xyJzogcmV0dXJuICdyJzsKICAgIGNhc2UgJ1xcJzogcmV0dXJuICdcXCc7CiAgICBjYXNlICdcJyc6IHJldHVybiAnXCcnOwogIH0KICByZXR1cm4gMDsKfQoKI2RlZmluZSBGTVRfVUxPTkcgNDAgLyogZW5vdWdoIHNwYWNlIHRvIGhvbGQgMl4xMjggLSAxIGluIGRlY2ltYWwsIHBsdXMgXDAgKi8KI2RlZmluZSBGTVRfWExPTkcgMzMgLyogZW5vdWdoIHNwYWNlIHRvIGhvbGQgMl4xMjggLSAxIGluIGhleGFkZWNpbWFsLCBwbHVzIFwwICovCgpzaXplX3QgdG9rZW5fbGVuZ3RoKGNvbnN0IGNoYXIqLCBzaXplX3QsIGNoYXIgZGVsaW0pOwpzaXplX3QgZm10X3Vsb25nKGNoYXIqLCB1bnNpZ25lZCBsb25nKTsKc2l6ZV90IHNjYW5fdXNob3J0KGNvbnN0IGNoYXIqLCB1bnNpZ25lZCBzaG9ydCopOwpzaXplX3QgZm10X2xvbmdsb25nKGNoYXIqLCBpbnQ2NF90KTsKc2l6ZV90IGZtdF91bG9uZ2xvbmcoY2hhciosIHVpbnQ2NF90KTsKc2l6ZV90IGZtdF94bG9uZ2xvbmcoY2hhciosIHVpbnQ2NF90KTsKc2l6ZV90IHNjYW5fbG9uZ2xvbmcoY29uc3QgY2hhciosIGludDY0X3QqKTsKc2l6ZV90IHNjYW5fdWxvbmdsb25nKGNvbnN0IGNoYXIqLCB1aW50NjRfdCopOwpzaXplX3Qgc2Nhbl94bG9uZ2xvbmcoY29uc3QgY2hhciosIHVpbnQ2NF90Kik7CnNpemVfdCBzY2FuX3doaXRlbnNraXAoY29uc3QgY2hhciosIHNpemVfdCk7CnNpemVfdCBzY2FuX25vbndoaXRlbnNraXAoY29uc3QgY2hhciosIHNpemVfdCk7CgpzdGF0aWMgaW5saW5lIGludApzY2FuX2Zyb21oZXgodW5zaWduZWQgY2hhciBjKSB7CiAgYyAtPSAnMCc7CiAgaWYoYyA8PSA5KQogICAgcmV0dXJuIGM7CiAgYyAmPSB+MHgyMDsKICBjIC09ICdBJyAtICcwJzsKICBpZihjIDwgNikKICAgIHJldHVybiBjICsgMTA7CiAgcmV0dXJuIC0xOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdAp1dGY4X2NoYXJsZW4oY29uc3QgY2hhciogaW4sIHNpemVfdCBsZW4pIHsKICBjb25zdCB1aW50OF90KiBuZXh0OwogIGludCBjcCA9IHVuaWNvZGVfZnJvbV91dGY4KChjb25zdCB1aW50OF90KilpbiwgbGVuLCAmbmV4dCk7CiAgcmV0dXJuIG5leHQgLSAoY29uc3QgdWludDhfdCopaW47Cn0KCnNpemVfdCB1dGY4X3N0cmxlbihjb25zdCB2b2lkKiBpbiwgc2l6ZV90IGxlbik7CgovKioKICogQH0KICovCiNlbmRpZiAvKiBkZWZpbmVkKENIQVJfVVRJTFNfSCkgKi8KAAAAAAAAAABPIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARiIAAAAAAABGIgAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARiIAAAAAAABGIgAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAARiIAAAAAAABGIgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "buffer-utils.h",
			"settings":
			{
				"buffer_size": 9024,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAvB8AAAAAAADOHwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAvB8AAAAAAADOHwAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAvB8AAAAAAADOHwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "buffer-utils.c",
			"settings":
			{
				"buffer_size": 15439,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					44,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAhDoAAAAAAAC1OgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAhDoAAAAAAAC1OgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAhDoAAAAAAAC1OgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-lexer.c",
			"settings":
			{
				"buffer_size": 41853,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					527,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAJ2wAAAAAAAAnbAAAAAAAAAAAAAAAAPC/"
				],
				[
					534,
					1,
					"right_delete",
					null,
					"AQAAAMuNAAAAAAAAy40AAAAAAAAEAAAAZnJlZQ",
					"AQAAAAAAAAABAAAAy40AAAAAAADPjQAAAAAAAAAAAAAAAPC/"
				],
				[
					535,
					1,
					"insert",
					{
						"characters": "re"
					},
					"AgAAAMuNAAAAAAAAzI0AAAAAAAAAAAAAzI0AAAAAAADNjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAy40AAAAAAADLjQAAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"left_delete",
					null,
					"AQAAAMyNAAAAAAAAzI0AAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAzY0AAAAAAADNjQAAAAAAAAAAAAAAAPC/"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": "elease"
					},
					"BgAAAMyNAAAAAAAAzY0AAAAAAAAAAAAAzY0AAAAAAADOjQAAAAAAAAAAAADOjQAAAAAAAM+NAAAAAAAAAAAAAM+NAAAAAAAA0I0AAAAAAAAAAAAA0I0AAAAAAADRjQAAAAAAAAAAAADRjQAAAAAAANKNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzI0AAAAAAADMjQAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJuNAAAAAAAAnI0AAAAAAAAAAAAAnI0AAAAAAACejQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAm40AAAAAAACbjQAAAAAAAAAAAAAAAPC/"
				],
				[
					546,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAJuNAAAAAAAAnI0AAAAAAAAAAAAAnI0AAAAAAACdjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAm40AAAAAAACbjQAAAAAAAAAAAAAAADJA"
				],
				[
					547,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ2NAAAAAAAAn40AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnY0AAAAAAACdjQAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": "--lex->ref_c"
					},
					"DAAAAJ6NAAAAAAAAn40AAAAAAAAAAAAAn40AAAAAAACgjQAAAAAAAAAAAACgjQAAAAAAAKGNAAAAAAAAAAAAAKGNAAAAAAAAoo0AAAAAAAAAAAAAoo0AAAAAAACjjQAAAAAAAAAAAACjjQAAAAAAAKSNAAAAAAAAAAAAAKSNAAAAAAAApY0AAAAAAAAAAAAApY0AAAAAAACmjQAAAAAAAAAAAACmjQAAAAAAAKeNAAAAAAAAAAAAAKeNAAAAAAAAqI0AAAAAAAAAAAAAqI0AAAAAAACpjQAAAAAAAAAAAACpjQAAAAAAAKqNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAno0AAAAAAACejQAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "ount"
					},
					"BAAAAKqNAAAAAAAAq40AAAAAAAAAAAAAq40AAAAAAACsjQAAAAAAAAAAAACsjQAAAAAAAK2NAAAAAAAAAAAAAK2NAAAAAAAAro0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqo0AAAAAAACqjQAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAK6NAAAAAAAAr40AAAAAAAAAAAAAr40AAAAAAACwjQAAAAAAAAAAAACwjQAAAAAAALGNAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAro0AAAAAAACujQAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAALGNAAAAAAAAso0AAAAAAAAAAAAAso0AAAAAAACzjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsY0AAAAAAACxjQAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALSNAAAAAAAAtY0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtI0AAAAAAAC0jQAAAAAAAAAAAAAAAPC/"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": "\n\nif"
					},
					"BwAAAPyNAAAAAAAA/Y0AAAAAAAAAAAAA/Y0AAAAAAAABjgAAAAAAAAAAAAABjgAAAAAAAAKOAAAAAAAAAAAAAAKOAAAAAAAABo4AAAAAAAAAAAAA/Y0AAAAAAAD9jQAAAAAAAAQAAAAgICAgAo4AAAAAAAADjgAAAAAAAAAAAAADjgAAAAAAAASOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/I0AAAAAAAD8jQAAAAAAAAAAAAAAAPC/"
				],
				[
					560,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAASOAAAAAAAABo4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABI4AAAAAAAAEjgAAAAAAAAAAAAAAAPC/"
				],
				[
					561,
					1,
					"paste",
					null,
					"AQAAAAWOAAAAAAAAE44AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABY4AAAAAAAAFjgAAAAAAAAAAAAAAAPC/"
				],
				[
					562,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAABOOAAAAAAAAFI4AAAAAAAAAAAAAFI4AAAAAAAAVjgAAAAAAAAAAAAAVjgAAAAAAABaOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAE44AAAAAAAATjgAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAABaOAAAAAAAAF44AAAAAAAAAAAAAF44AAAAAAAAYjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFo4AAAAAAAAWjgAAAAAAAAAAAAAAAPC/"
				],
				[
					565,
					1,
					"insert",
					{
						"characters": "\njs_free_rt"
					},
					"DgAAABmOAAAAAAAAGo4AAAAAAAAAAAAAGo4AAAAAAAAejgAAAAAAAAAAAAAajgAAAAAAABqOAAAAAAAABAAAACAgICAajgAAAAAAACCOAAAAAAAAAAAAACCOAAAAAAAAIY4AAAAAAAAAAAAAIY4AAAAAAAAijgAAAAAAAAAAAAAijgAAAAAAACOOAAAAAAAAAAAAACOOAAAAAAAAJI4AAAAAAAAAAAAAJI4AAAAAAAAljgAAAAAAAAAAAAAljgAAAAAAACaOAAAAAAAAAAAAACaOAAAAAAAAJ44AAAAAAAAAAAAAJ44AAAAAAAAojgAAAAAAAAAAAAAojgAAAAAAACmOAAAAAAAAAAAAACmOAAAAAAAAKo4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGY4AAAAAAAAZjgAAAAAAAAAAAAAAAPC/"
				],
				[
					566,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACqOAAAAAAAALI4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKo4AAAAAAAAqjgAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "rt,"
					},
					"AwAAACuOAAAAAAAALI4AAAAAAAAAAAAALI4AAAAAAAAtjgAAAAAAAAAAAAAtjgAAAAAAAC6OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAK44AAAAAAAArjgAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": " lex"
					},
					"BAAAAC6OAAAAAAAAL44AAAAAAAAAAAAAL44AAAAAAAAwjgAAAAAAAAAAAAAwjgAAAAAAADGOAAAAAAAAAAAAADGOAAAAAAAAMo4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALo4AAAAAAAAujgAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADOOAAAAAAAANI4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM44AAAAAAAAzjgAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAB6owAAI2luY2x1ZGUgImRlZmluZXMuaCIKI2luY2x1ZGUgPHF1aWNranMuaD4KI2luY2x1ZGUgPGxpYnJlZ2V4cC5oPgojaW5jbHVkZSAicXVpY2tqcy1sZXhlci5oIgojaW5jbHVkZSAicXVpY2tqcy1sb2NhdGlvbi5oIgojaW5jbHVkZSAidmVjdG9yLmgiCiNpbmNsdWRlIDxzdHJpbmcuaD4KI2luY2x1ZGUgPGN0eXBlLmg+CiNpbmNsdWRlIDxzdGRpbnQuaD4KI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSAiZGVidWcuaCIKI2luY2x1ZGUgInRva2VuLmgiCgovKioKICogXGFkZHRvZ3JvdXAgcXVpY2tqcy1sZXhlcgogKiBAewogKi8KdHlwZWRlZiBzdHJ1Y3QgewogIEpTVmFsdWUgYWN0aW9uOwogIEJPT0wgc2tpcDsKfSBKU0xleGVyUnVsZTsKCnRocmVhZF9sb2NhbCBWSVNJQkxFIEpTQ2xhc3NJRCBqc190b2tlbl9jbGFzc19pZCA9IDAsIGpzX2xleGVyX2NsYXNzX2lkID0gMDsKdGhyZWFkX2xvY2FsIEpTVmFsdWUgdG9rZW5fcHJvdG8gPSB7e0pTX1RBR19VTkRFRklORUR9fSwgdG9rZW5fY3RvciA9IHt7SlNfVEFHX1VOREVGSU5FRH19Owp0aHJlYWRfbG9jYWwgSlNWYWx1ZSBsZXhlcl9wcm90byA9IHt7SlNfVEFHX1VOREVGSU5FRH19LCBsZXhlcl9jdG9yID0ge3tKU19UQUdfVU5ERUZJTkVEfX07CgpzdGF0aWMgSlNWYWx1ZQpvZmZzZXRfdG9hcnJheShPZmZzZXRMZW5ndGggb2Zmc19sZW4sIEpTQ29udGV4dCogY3R4KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAwLCBKU19OZXdJbnQ2NChjdHgsIG9mZnNfbGVuLm9mZnNldCkpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCAxLCBKU19OZXdJbnQ2NChjdHgsIG9mZnNfbGVuLm9mZnNldCArIG9mZnNfbGVuLmxlbmd0aCkpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBKU1ZhbHVlCmpzX2xleGVyX3J1bGVfbmV3KEpTQ29udGV4dCogY3R4LCBMZXhlciogbGV4LCBMZXhlclJ1bGUqIHJ1bGUpIHsKCiAgSlNWYWx1ZSByZXQsIHN0YXRlczsKICBEeW5CdWYgZGJ1ZjsKICBzaXplX3QgaSwgajsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CiAgbGV4ZXJfcnVsZV9kdW1wKGxleCwgcnVsZSwgJmRidWYpOwogIGRidWZfMCgmZGJ1Zik7CgogIGlmKHJ1bGUtPmV4cHJbMF0gPT0gJzwnKSB7CiAgICBhc3NlcnQoIXN0cm5jbXAocnVsZS0+ZXhwciwgKGNvbnN0IGNoYXIqKWRidWYuYnVmLCBzdHJfY2hyKHJ1bGUtPmV4cHIsICc+JykpKTsKICB9CgogIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAganNfc2V0X3Byb3BlcnR5aW50X3N0cmluZyhjdHgsIHJldCwgMCwgcnVsZS0+bmFtZSk7CiAganNfc2V0X3Byb3BlcnR5aW50X3N0cmluZyhjdHgsIHJldCwgMSwgbGV4ZXJfc3RhdGVzX3NraXAoKGNoYXIqKWRidWYuYnVmKSk7CgogIHN0YXRlcyA9IEpTX05ld0FycmF5KGN0eCk7CgogIGZvcihpID0gMCwgaiA9IDA7IGkgPCAzMjsgaSsrKSB7CiAgICBpZihydWxlLT5tYXNrICYgKDEgPDwgaSkpIHsKICAgICAgY2hhciogbmFtZSA9IGxleGVyX3N0YXRlX25hbWUobGV4LCBpKTsKCiAgICAgIGlmKG5hbWUpCiAgICAgICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBzdGF0ZXMsIGorKywgSlNfTmV3U3RyaW5nKGN0eCwgbmFtZSkpOwogICAgfQogIH0KICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgMiwgc3RhdGVzKTsKICAvLyBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgMywgSlNfTmV3SW50NjQoY3R4LCBydWxlLT5tYXNrKSk7CiAgZGJ1Zl9mcmVlKCZkYnVmKTsKICByZXR1cm4gcmV0Owp9CgplbnVtIHRva2VuX21ldGhvZHMgewogIFRPX1NUUklORyA9IDAsCn07CgplbnVtIHRva2VuX2dldHRlcnMgewogIFRPS0VOX1BST1BfQllURUxFTkdUSCA9IDAsCiAgVE9LRU5fUFJPUF9CWVRFT0ZGU0VULAogIFRPS0VOX1BST1BfQ0hBUkxFTkdUSCwKICBUT0tFTl9QUk9QX1NUQVJULAogIFRPS0VOX1BST1BfRU5ELAogIFRPS0VOX1BST1BfQllURVJBTkdFLAogIFRPS0VOX1BST1BfQ0hBUlJBTkdFLAogIFRPS0VOX1BST1BfTEVYRU1FLAogIFRPS0VOX1BST1BfTE9DLAogIFRPS0VOX1BST1BfSUQsCiAgVE9LRU5fUFJPUF9TRVEsCiAgVE9LRU5fUFJPUF9UWVBFLAogIFRPS0VOX1BST1BfUlVMRSwKfTsKClRva2VuKgpqc190b2tlbl9uZXcoSlNDb250ZXh0KiBjdHgsIGludCBpZCwgY29uc3QgY2hhciogbGV4ZW1lLCBMb2NhdGlvbiogbG9jLCB1aW50NjRfdCBieXRlX29mZnNldCkgewogIFRva2VuKiB0b2s7CgogIGlmKCEodG9rID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihUb2tlbikpKSkKICAgIHJldHVybiAwOwoKICB0b2stPmlkID0gaWQ7CiAgdG9rLT5sZXhlbWUgPSAodWludDhfdCopanNfc3RyZHVwKGN0eCwgbGV4ZW1lKTsKICB0b2stPmxvYyA9IGxvY2F0aW9uX2R1cChsb2MpOwogIC8vIHRvay0+bG9jX3ZhbCA9IEpTX1VOREVGSU5FRDsKICAvLyAgIHRvay0+Ynl0ZV9vZmZzZXQgPSBieXRlX29mZnNldDsKCiAgcmV0dXJuIHRvazsKfQoKSlNWYWx1ZQpqc190b2tlbl93cmFwKEpTQ29udGV4dCogY3R4LCBUb2tlbiogdG9rKSB7CiAgSlNWYWx1ZSBvYmogPSBKU19VTkRFRklORUQ7CgogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB0b2tlbl9wcm90bywganNfdG9rZW5fY2xhc3NfaWQpOwogIEpTX1NldE9wYXF1ZShvYmosIHRvayk7CiAgcmV0dXJuIG9iajsKfQoKSlNWYWx1ZQpqc190b2tlbl9jb25zdHJ1Y3RvcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG5ld190YXJnZXQsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgVG9rZW4qIHRvazsKICBKU1ZhbHVlIG9iaiA9IEpTX1VOREVGSU5FRDsKICBKU1ZhbHVlIHByb3RvOwoKICBpZighKHRvayA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoVG9rZW4pKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICAvKiB1c2luZyBuZXdfdGFyZ2V0IHRvIGdldCB0aGUgcHJvdG90eXBlIGlzIG5lY2Vzc2FyeSB3aGVuIHRoZQogICAgIGNsYXNzIGlzIGV4dGVuZGVkLiAqLwogIHByb3RvID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBuZXdfdGFyZ2V0LCAicHJvdG90eXBlIik7CiAgaWYoSlNfSXNFeGNlcHRpb24ocHJvdG8pKQogICAgZ290byBmYWlsOwogIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCBwcm90bywganNfdG9rZW5fY2xhc3NfaWQpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHByb3RvKTsKICBpZihKU19Jc0V4Y2VwdGlvbihvYmopKQogICAgZ290byBmYWlsOwoKICBKU19TZXRPcGFxdWUob2JqLCB0b2spOwoKICAvLyB0b2stPmxvY192YWwgPSBKU19VTkRFRklORUQ7CgogIGlmKGFyZ2MgPiAwKQogICAgSlNfVG9JbnQzMihjdHgsICZ0b2stPmlkLCBhcmd2WzBdKTsKICBpZihhcmdjID4gMSkKICAgIHRvay0+bGV4ZW1lID0gKHVpbnQ4X3QqKWpzX3Rvc3RyaW5nKGN0eCwgYXJndlsxXSk7CiAgaWYoYXJnYyA+IDIpIHsKICAgIExvY2F0aW9uKiBsb2M7CgogICAgaWYoKGxvYyA9IGpzX2xvY2F0aW9uX2RhdGEyKGN0eCwgYXJndlsyXSkpKQogICAgICB0b2stPmxvYyA9IGxvY2F0aW9uX2R1cChsb2MpOwogICAgZWxzZQogICAgICB0b2stPmxvYyA9IGpzX2xvY2F0aW9uX2Zyb20oY3R4LCBhcmd2WzJdKTsKICB9CiAgaWYoYXJnYyA+IDMpCiAgICBKU19Ub0ludDY0KGN0eCwgJnRvay0+bG9jLT5jaGFyX29mZnNldCwgYXJndlszXSk7CgogIHJldHVybiBvYmo7CmZhaWw6CiAganNfZnJlZShjdHgsIHRvayk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb2JqKTsKICByZXR1cm4gSlNfRVhDRVBUSU9OOwp9CgpKU1ZhbHVlCmpzX3Rva2VuX3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdKSB7CiAgVG9rZW4qIHRvazsKICBpZighKHRvayA9IGpzX3Rva2VuX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CiAgcmV0dXJuIEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKil0b2stPmxleGVtZSwgdG9rLT5ieXRlX2xlbmd0aCk7Cn0KCkpTVmFsdWUKanNfdG9rZW5fdG9wcmltaXRpdmUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBUb2tlbiogdG9rOwogIGNvbnN0IGNoYXIqIGhpbnQ7CiAgSlNWYWx1ZSByZXQ7CiAgaWYoISh0b2sgPSBqc190b2tlbl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwogIGhpbnQgPSBhcmdjID4gMCA/IEpTX1RvQ1N0cmluZyhjdHgsIGFyZ3ZbMF0pIDogMDsKCiAgaWYoaGludCAmJiAhc3RyY21wKGhpbnQsICJudW1iZXIiKSkKICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgdG9rLT5pZCk7CiAgZWxzZQogICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKXRvay0+bGV4ZW1lLCB0b2stPmJ5dGVfbGVuZ3RoKTsKCiAgaWYoaGludCkKICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIGhpbnQpOwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc190b2tlbl9pbnNwZWN0X2Z1bmNzWzFdID0gewogICAgSlNfUFJPUF9TVFJJTkdfREVGKCJbU3ltYm9sLnRvU3RyaW5nVGFnXSIsICJUb2tlbiIsIEpTX1BST1BfQ09ORklHVVJBQkxFKSwKfTsKCkpTVmFsdWUKanNfdG9rZW5faW5zcGVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIFRva2VuKiB0b2s7CiAgTGV4ZXJSdWxlKiBydWxlOwogIGludCBhcmdpID0gMDsKICBpbnQzMl90IGQgPSAwOwoKICBpZighKHRvayA9IGpzX3Rva2VuX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIGlmKGFyZ2kgPCBhcmdjICYmIEpTX0lzTnVtYmVyKGFyZ3ZbYXJnaV0pKQogICAgSlNfVG9JbnQzMihjdHgsICZkLCBhcmd2W2FyZ2krK10pOwoKICAvLyBwcmludGYoIiVzIGQ9JWlcbiIsIF9fZnVuY19fLCAoaW50KWQpOwoKICBKU1ZhbHVlIG9iaiA9IEpTX05ld09iamVjdFByb3RvQ2xhc3MoY3R4LCB0b2tlbl9wcm90bywganNfdG9rZW5fY2xhc3NfaWQpOwogIHJ1bGUgPSBsZXhlcl9ydWxlX2F0KHRvay0+bGV4ZXIsIHRvay0+aWQpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiaWQiLCBKU19OZXdVaW50MzIoY3R4LCB0b2stPmlkKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAic2VxIiwgSlNfTmV3VWludDMyKGN0eCwgdG9rLT5zZXEpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAidHlwZSIsIHJ1bGUgPyBKU19OZXdTdHJpbmcoY3R4LCBydWxlLT5uYW1lKSA6IEpTX05VTEwsIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImxleGVtZSIsIEpTX05ld1N0cmluZyhjdHgsIChjb25zdCBjaGFyKil0b2stPmxleGVtZSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CgogIGlmKHRvay0+bG9jKQogICAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImNoYXJPZmZzZXQiLCBKU19OZXdVaW50MzIoY3R4LCB0b2stPmxvYy0+Y2hhcl9vZmZzZXQpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiY2hhckxlbmd0aCIsIEpTX05ld1VpbnQzMihjdHgsIHRvay0+Y2hhcl9sZW5ndGgpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwoKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAiY2hhclJhbmdlIiwgb2Zmc2V0X3RvYXJyYXkodG9rZW5fY2hhcl9yYW5nZSh0b2spLCBjdHgpLCAwKTsKCiAgaWYodG9rLT5sb2MpCiAgICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAibG9jIiwganNfbG9jYXRpb25fd3JhcChjdHgsIHRvay0+bG9jKSwgMCk7CiAgcmV0dXJuIG9iajsKfQoKSlNWYWx1ZQpqc190b2tlbl9nZXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IG1hZ2ljKSB7CiAgVG9rZW4qIHRvazsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoISh0b2sgPSBqc190b2tlbl9kYXRhKHRoaXNfdmFsKSkpCiAgICByZXR1cm4gcmV0OwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgVE9LRU5fUFJPUF9CWVRFTEVOR1RIOiB7CiAgICAgIHJldCA9IEpTX05ld0ludDY0KGN0eCwgdG9rLT5ieXRlX2xlbmd0aCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX0NIQVJMRU5HVEg6IHsKICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCB0b2stPmNoYXJfbGVuZ3RoKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICAgIC8qICAgICAgY2FzZSBUT0tFTl9QUk9QX0JZVEVPRkZTRVQ6IHsKICAgICAgICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCB0b2stPmJ5dGVfb2Zmc2V0KTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgY2FzZSBUT0tFTl9QUk9QX1NUQVJUOiB7CiAgICAgICAgICAgIHJldCA9IEpTX05ld0ludDY0KGN0eCwgdG9rLT5sb2MuY2hhcl9vZmZzZXQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNhc2UgVE9LRU5fUFJPUF9FTkQ6IHsKICAgICAgICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCB0b2stPmxvYy5jaGFyX29mZnNldCArIHRvay0+Y2hhcl9sZW5ndGgpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICovCiAgICBjYXNlIFRPS0VOX1BST1BfQllURVJBTkdFOiB7CiAgICAgIExvY2F0aW9uKiBsb2M7CiAgICAgIGlmKChsb2MgPSB0b2stPmxvYykpCiAgICAgICAgcmV0ID0gb2Zmc2V0X3RvYXJyYXkodG9rZW5fYnl0ZV9yYW5nZSh0b2spLCBjdHgpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVE9LRU5fUFJPUF9DSEFSUkFOR0U6IHsKICAgICAgTG9jYXRpb24qIGxvYzsKICAgICAgaWYoKGxvYyA9IHRvay0+bG9jKSkKICAgICAgICByZXQgPSBvZmZzZXRfdG9hcnJheSh0b2tlbl9jaGFyX3JhbmdlKHRvayksIGN0eCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX0xFWEVNRTogewogICAgICByZXQgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopdG9rLT5sZXhlbWUsIHRvay0+Ynl0ZV9sZW5ndGgpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVE9LRU5fUFJPUF9MT0M6IHsKICAgICAgTG9jYXRpb24qIGxvYzsKCiAgICAgIGlmKChsb2MgPSBsb2NhdGlvbl9kdXAodG9rLT5sb2MpKSkKICAgICAgICByZXQgPSBqc19sb2NhdGlvbl93cmFwKGN0eCwgbG9jKTsKCiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX0lEOiB7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgdG9rLT5pZCk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX1NFUTogewogICAgICByZXQgPSBKU19OZXdVaW50MzIoY3R4LCB0b2stPnNlcSk7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBUT0tFTl9QUk9QX1JVTEU6IHsKICAgICAgTGV4ZXJSdWxlKiBydWxlID0gbGV4ZXJfcnVsZV9hdCh0b2stPmxleGVyLCB0b2stPmlkKTsKICAgICAgcmV0ID0gcnVsZSA/IGpzX2xleGVyX3J1bGVfbmV3KGN0eCwgdG9rLT5sZXhlciwgcnVsZSkgOiBKU19OVUxMOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgVE9LRU5fUFJPUF9UWVBFOiB7CiAgICAgIExleGVyUnVsZSogcnVsZSA9IGxleGVyX3J1bGVfYXQodG9rLT5sZXhlciwgdG9rLT5pZCk7CiAgICAgIHJldCA9IHJ1bGUgPyBKU19OZXdTdHJpbmcoY3R4LCBydWxlLT5uYW1lKSA6IEpTX05VTEw7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gcmV0Owp9Cgp2b2lkCmpzX3Rva2VuX2ZpbmFsaXplcihKU1J1bnRpbWUqIHJ0LCBKU1ZhbHVlIHZhbCkgewogIFRva2VuKiB0b2s7CiAgaWYoKHRvayA9IGpzX3Rva2VuX2RhdGEodmFsKSkpIHsKICAgIHRva2VuX2ZyZWVfcnQodG9rLCBydCk7CiAgICBKU19TZXRPcGFxdWUodmFsLCAwKTsKICB9CiAgLy8gSlNfRnJlZVZhbHVlUlQocnQsIHZhbCk7Cn0KCnN0YXRpYyBKU0NsYXNzRGVmIGpzX3Rva2VuX2NsYXNzID0gewogICAgLmNsYXNzX25hbWUgPSAiVG9rZW4iLAogICAgLmZpbmFsaXplciA9IGpzX3Rva2VuX2ZpbmFsaXplciwKfTsKCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc190b2tlbl9wcm90b19mdW5jc1tdID0gewogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImNoYXJMZW5ndGgiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfQ0hBUkxFTkdUSCksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiYnl0ZUxlbmd0aCIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9CWVRFTEVOR1RIKSwKICAgIC8qICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJieXRlT2Zmc2V0IiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0JZVEVPRkZTRVQpLAogICAgICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzdGFydCIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9TVEFSVCksCiAgICAgICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImVuZCIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9FTkQpLCovCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiY2hhclJhbmdlIiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0NIQVJSQU5HRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiYnl0ZVJhbmdlIiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0JZVEVSQU5HRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibG9jIiwganNfdG9rZW5fZ2V0LCBOVUxMLCBUT0tFTl9QUk9QX0xPQyksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiaWQiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfSUQpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInNlcSIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9TRVEpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInR5cGUiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfVFlQRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigicnVsZSIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9SVUxFKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJsZXhlbWUiLCBqc190b2tlbl9nZXQsIE5VTEwsIFRPS0VOX1BST1BfTEVYRU1FKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJ2YWx1ZSIsIGpzX3Rva2VuX2dldCwgTlVMTCwgVE9LRU5fUFJPUF9MRVhFTUUpLAogICAgLy8gSlNfQ0ZVTkNfREVGKCJ0b1N0cmluZyIsIDAsIGpzX3Rva2VuX3Rvc3RyaW5nKSwKICAgIC8vIEpTX0NGVU5DX0RFRigiW1N5bWJvbC50b1ByaW1pdGl2ZV0iLCAxLCBqc190b2tlbl90b3ByaW1pdGl2ZSksCiAgICBKU19BTElBU19ERUYoInBvc2l0aW9uIiwgImxvYyIpLAogICAgSlNfQUxJQVNfREVGKCJsZW5ndGgiLCAiY2hhckxlbmd0aCIpLAogICAgSlNfQUxJQVNfREVGKCJyYW5nZSIsICJjaGFyUmFuZ2UiKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiVG9rZW4iLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksCn07CnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc190b2tlbl9zdGF0aWNfZnVuY3NbXSA9IHsKICAgIEpTX1BST1BfSU5UMzJfREVGKCJFT0YiLCBMRVhFUl9FT0YsIEpTX1BST1BfRU5VTUVSQUJMRSksCn07CgpzdGF0aWMgSlNWYWx1ZQpsZXhlcl9jb250aW51ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljLCBKU1ZhbHVlKiBkYXRhKSB7CiAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBkYXRhWzBdLCAwLCBKU19OZXdCb29sKGN0eCwgVFJVRSkpOwogIHJldHVybiBKU19VTkRFRklORUQ7Cn0KCnN0YXRpYyBpbnQzMl90CmxleGVyX3RvX3N0YXRlKExleGVyKiBsZXgsIEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpbnQzMl90IG51bTsKICBpZihKU19Jc051bWJlcih2YWx1ZSkpIHsKICAgIEpTX1RvSW50MzIoY3R4LCAmbnVtLCB2YWx1ZSk7CiAgfSBlbHNlIHsKICAgIGNvbnN0IGNoYXIqIHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIHZhbHVlKTsKICAgIG51bSA9IGxleGVyX3N0YXRlX2ZpbmQobGV4LCBzdHIpOwogIH0KICBpZihudW0gPj0gMCAmJiAoc2l6ZV90KW51bSA8IGxleGVyX251bV9zdGF0ZXMobGV4KSkKICAgIHJldHVybiBudW07CiAgcmV0dXJuIC0xOwp9CgpzdGF0aWMgQk9PTApsZXhlcl9oYW5kbGUoTGV4ZXIqIGxleCwgSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgSlNWYWx1ZUNvbnN0IGhhbmRsZXIpIHsKICBKU1ZhbHVlIGRhdGFbMV0gPSB7SlNfTmV3QXJyYXkoY3R4KX07CiAgSlNWYWx1ZSBhcmdzW10gPSB7SlNfRHVwVmFsdWUoY3R4LCB0aGlzX3ZhbCksIEpTX05ld0NGdW5jdGlvbkRhdGEoY3R4LCBsZXhlcl9jb250aW51ZSwgMCwgMCwgMSwgZGF0YSl9OwogIEpTVmFsdWUgZG9fcmVzdW1lID0gSlNfRkFMU0U7CgogIC8qICAgcmV0ID0gKi8gSlNfQ2FsbChjdHgsIGhhbmRsZXIsIHRoaXNfdmFsLCAyLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzFdKTsKCiAgZG9fcmVzdW1lID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBkYXRhWzBdLCAwKTsKCiAgaWYoSlNfSXNCb29sKGRvX3Jlc3VtZSkpCiAgICBpZihKU19Ub0Jvb2woY3R4LCBkb19yZXN1bWUpKQogICAgICByZXR1cm4gVFJVRTsKCiAgcmV0dXJuIEZBTFNFOwp9CgpzdGF0aWMgaW50CmxleGVyX2xleChMZXhlciogbGV4LCBKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIGludCBpZCA9IC0xOwogIGludDY0X3Qgc2tpcCA9IDA7CiAgSlNWYWx1ZSBjYWxsYmFjayA9IEpTX1VOREVGSU5FRDsKCiAgaWYoYXJnYyA+PSAxICYmIChza2lwID0gbGV4ZXJfdG9fc3RhdGUobGV4LCBjdHgsIGFyZ3ZbMF0pKSkge30KCiAgY2FsbGJhY2sgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHRoaXNfdmFsLCAiY2FsbGJhY2siKTsKCiAgaWYobGV4LT5ieXRlX2xlbmd0aCkKICAgIGxleGVyX3NraXAobGV4KTsKCiAgZm9yKDs7KSB7CiAgICBpZigoaWQgPSBsZXhlcl9wZWVrKGxleCwgc2tpcCA9PSAtMSA/IDAgOiBza2lwLCBjdHgpKSA+PSAwKSB7CiAgICAgIExleGVyUnVsZSogcnVsZSA9IGxleGVyX3J1bGVfYXQobGV4LCBpZCk7CgogICAgICAvLyBwcmludGYoInN0YXRlICVpIHJ1bGUgJXNcbiIsIGxleC0+c3RhdGUsIHJ1bGUtPm5hbWUpOwoKICAgICAgSlNMZXhlclJ1bGUqIGpzcnVsZSA9IHJ1bGUtPm9wYXF1ZTsKICAgICAgaWYoKHJ1bGUtPm1hc2sgJiBza2lwKSkgewogICAgICAgIGxleGVyX3NraXAobGV4KTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZihqc3J1bGUpIHsKICAgICAgICBCT09MIHNraXAgPSBGQUxTRTsKICAgICAgICBpZihKU19Jc0Z1bmN0aW9uKGN0eCwganNydWxlLT5hY3Rpb24pKSB7CiAgICAgICAgICBKU1ZhbHVlIGRhdGFbXSA9IHtKU19OZXdBcnJheShjdHgpfTsKICAgICAgICAgIEpTVmFsdWUgYXJnc1tdID0ge3RoaXNfdmFsLCBKU19OZXdDRnVuY3Rpb25EYXRhKGN0eCwgbGV4ZXJfY29udGludWUsIDAsIDAsIGNvdW50b2YoZGF0YSksIGRhdGEpfTsKICAgICAgICAgIEpTVmFsdWUgZG9fc2tpcDsKICAgICAgICAgIC8qcmV0ID0qL0pTX0NhbGwoY3R4LCBqc3J1bGUtPmFjdGlvbiwgdGhpc192YWwsIDIsIGFyZ3MpOwogICAgICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1sxXSk7CgogICAgICAgICAgZG9fc2tpcCA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgZGF0YVswXSwgMCk7CgogICAgICAgICAgaWYoSlNfSXNCb29sKGRvX3NraXApKQogICAgICAgICAgICBza2lwID0gSlNfVG9Cb29sKGN0eCwgZG9fc2tpcCk7CgogICAgICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgZGF0YVswXSk7CiAgICAgICAgfQogICAgICAgIGlmKHNraXAgfHwganNydWxlLT5za2lwKSB7CiAgICAgICAgICBsZXhlcl9za2lwKGxleCk7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmKEpTX0lzRnVuY3Rpb24oY3R4LCBjYWxsYmFjaykpIHsKICAgICAgICBsZXhlcl9oYW5kbGUobGV4LCBjdHgsIHRoaXNfdmFsLCBjYWxsYmFjayk7CiAgICAgIH0KCiAgICB9IGVsc2UgaWYoaWQgPT0gTEVYRVJfRVJST1JfTk9NQVRDSCkgewogICAgICBKU1ZhbHVlIGhhbmRsZXIgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHRoaXNfdmFsLCAiaGFuZGxlciIpOwogICAgICBpZihKU19Jc0Z1bmN0aW9uKGN0eCwgaGFuZGxlcikpIHsKCiAgICAgICAgaWYobGV4ZXJfaGFuZGxlKGxleCwgY3R4LCB0aGlzX3ZhbCwgaGFuZGxlcikgPT0gVFJVRSkKICAgICAgICAgIGNvbnRpbnVlOwoKICAgICAgICBpZCA9IExFWEVSX0VSUk9SX05PTUFUQ0g7CiAgICAgIH0KICAgIH0KICAgIGJyZWFrOwogIH0KICByZXR1cm4gaWQ7Cn0KCnN0YXRpYyBCT09MCmxleGVyX2VzY2FwZV9wcmVkKGludCBjKSB7CiAgc3dpdGNoKGMpIHsKICAgIGNhc2UgJyonOgogICAgY2FzZSAnPyc6CiAgICBjYXNlICcrJzoKICAgIGNhc2UgJ1snOgogICAgY2FzZSAnXSc6CiAgICBjYXNlICcoJzoKICAgIGNhc2UgJyknOgogICAgY2FzZSAnLic6CiAgICBjYXNlICdeJzoKICAgIGNhc2UgJyQnOgogICAgY2FzZSAnfCc6CiAgICBjYXNlICdccic6CiAgICBjYXNlICdcbic6CiAgICBjYXNlICdcdCc6CiAgICBjYXNlICdcdic6CiAgICBjYXNlICdcZic6CiAgICBjYXNlICdcXCc6IHJldHVybiBUUlVFOwogIH0KICByZXR1cm4gRkFMU0U7Cn0Kc3RhdGljIEJPT0wKbGV4ZXJfdW5lc2NhcGVfcHJlZChpbnQgYykgewogIHN3aXRjaChjKSB7CiAgICBjYXNlICdyJzogcmV0dXJuICdccic7CiAgICBjYXNlICduJzogcmV0dXJuICdcbic7CiAgICBjYXNlICd0JzogcmV0dXJuICdcdCc7CiAgICBjYXNlICd2JzogcmV0dXJuICdcdic7CiAgICBjYXNlICdmJzogcmV0dXJuICdcZic7CiAgICBjYXNlICcvJzoKICAgICAgcmV0dXJuICcvJzsKICAgICAgLy8gY2FzZSAnXFwnOiByZXR1cm4gJ1xcJzsKICB9CiAgcmV0dXJuIDA7Cn0KCnN0YXRpYyBjaGFyKgpsZXhlcl9jdXJyZW50X2xpbmUoTGV4ZXIqIGxleCwgSlNDb250ZXh0KiBjdHgpIHsKICBzaXplX3Qgc3RhcnQsIHNpemU7CiAgc3RhcnQgPSBsZXgtPmlucHV0LnBvczsKICAvLyBlbmQgPSBzdGFydCArIGxleC0+Ynl0ZV9sZW5ndGg7CiAgd2hpbGUoc3RhcnQgPiAwICYmIGxleC0+aW5wdXQuZGF0YVtzdGFydCAtIDFdICE9ICdcbicpIHN0YXJ0LS07CiAgc2l6ZSA9IGJ5dGVfY2hyKChjb25zdCBjaGFyKikmbGV4LT5pbnB1dC5kYXRhW3N0YXJ0XSwgbGV4LT5pbnB1dC5zaXplIC0gc3RhcnQsICdcbicpOwogIC8vIHdoaWxlKGVuZCA8IGxleC0+aW5wdXQuc2l6ZSAmJiBsZXgtPmlucHV0LmRhdGFbZW5kXSAhPSAnXG4nKSBlbmQrKzsKICByZXR1cm4ganNfc3RybmR1cChjdHgsIChjb25zdCBjaGFyKikmbGV4LT5pbnB1dC5kYXRhW3N0YXJ0XSwgc2l6ZSk7Cn0KCnN0YXRpYyBjaGFyKgpsZXhlcl9sZXhlbWVfcyhMZXhlciogbGV4LCBKU0NvbnRleHQqIGN0eCkgewogIHNpemVfdCBsZW47CiAgY2hhciogczsKCiAgcyA9IGxleGVyX2xleGVtZShsZXgsICZsZW4pOwoKICByZXR1cm4ganNfc3RybmR1cChjdHgsIHMsIGxlbik7Cn0KCnN0YXRpYyBUb2tlbioKbGV4ZXJfdG9rZW4oTGV4ZXIqIGxleCwgaW50MzJfdCBpZCwgSlNDb250ZXh0KiBjdHgpIHsKICBzaXplX3QgbGVuOwogIGNvbnN0IGNoYXIqIGxleGVtZTsKICBUb2tlbiogdG9rOwoKICBpZighKGxleGVtZSA9IGxleGVyX2xleGVtZShsZXgsICZsZW4pKSkKICAgIHJldHVybiAwOwoKICBpZighKHRvayA9IHRva2VuX2NyZWF0ZShpZCwgbG9jYXRpb25fY2xvbmUoJmxleC0+bG9jLCBjdHgpLCBsZXhlbWUsIGxlbiwgY3R4KSkpCiAgICByZXR1cm4gMDsKCiAgdG9rLT5sZXhlciA9IGxleGVyX2R1cChsZXgpOwogIHRvay0+c2VxID0gbGV4LT5zZXE7CgogIHJldHVybiB0b2s7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfbmV3KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgcHJvdG8sIEpTVmFsdWVDb25zdCB2aW5wdXQsIEpTVmFsdWVDb25zdCB2bW9kZSkgewogIExleGVyKiBsZXg7CiAgaW50MzJfdCBtb2RlID0gMDsKICBKU1ZhbHVlIG9iaiA9IEpTX1VOREVGSU5FRDsKICBpZighKGxleCA9IGpzX21hbGxvY3ooY3R4LCBzaXplb2YoTGV4ZXIpKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBpZihKU19Jc051bWJlcih2bW9kZSkpCiAgICBKU19Ub0ludDMyKGN0eCwgJm1vZGUsIHZtb2RlKTsKICBsZXhlcl9pbml0KGxleCwgbW9kZSwgY3R4KTsKCiAgb2JqID0gSlNfTmV3T2JqZWN0UHJvdG9DbGFzcyhjdHgsIHByb3RvLCBqc19sZXhlcl9jbGFzc19pZCk7CgogIGlmKEpTX0lzRXhjZXB0aW9uKG9iaikpCiAgICBnb3RvIGZhaWw7CiAgSlNfU2V0T3BhcXVlKG9iaiwgbGV4KTsKCiAgbGV4LT5pbnB1dCA9IGpzX2lucHV0X2NoYXJzKGN0eCwgdmlucHV0KTsKCiAgcmV0dXJuIG9iajsKZmFpbDoKICBqc19mcmVlKGN0eCwgbGV4KTsKICBKU19GcmVlVmFsdWUoY3R4LCBvYmopOwogIHJldHVybiBKU19FWENFUFRJT047Cn0KCkpTVmFsdWUKanNfbGV4ZXJfd3JhcChKU0NvbnRleHQqIGN0eCwgTGV4ZXIqIGxleCkgewogIEpTVmFsdWUgb2JqOwoKICBvYmogPSBKU19OZXdPYmplY3RQcm90b0NsYXNzKGN0eCwgbGV4ZXJfcHJvdG8sIGpzX2xleGVyX2NsYXNzX2lkKTsKICBKU19TZXRPcGFxdWUob2JqLCBsZXgpOwogIHJldHVybiBvYmo7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfYWRkX3J1bGUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBtYWdpYykgewogIExleGVyKiBsZXg7CiAgY2hhciogbmFtZTsKICBpbnQ2NF90IG1hc2sgPSAtMSwgc2tpcCA9IDA7CiAgUmVnRXhwIGV4cHI7CiAgSlNMZXhlclJ1bGUqIGpzcnVsZSA9IDA7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgbmFtZSA9IChtYWdpYyB8fCBKU19Jc1N0cmluZyhhcmd2WzBdKSkgPyBqc190b3N0cmluZyhjdHgsIGFyZ3ZbMF0pIDogMDsKICBleHByID0gcmVnZXhwX2Zyb21fYXJndihhcmdjIC0gMSwgJmFyZ3ZbMV0sIGN0eCk7CgogIGlmKGFyZ2MgPj0gMyAmJiBKU19Jc051bWJlcihhcmd2WzJdKSkKICAgIEpTX1RvSW50NjQoY3R4LCAmbWFzaywgYXJndlsyXSk7CgogIEpTVmFsdWUgc2tpcHYgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHRoaXNfdmFsLCAic2tpcCIpOwogIGlmKEpTX0lzTnVtYmVyKHNraXB2KSkKICAgIEpTX1RvSW50NjQoY3R4LCAmc2tpcCwgc2tpcHYpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHNraXB2KTsKCiAgaWYoYXJnYyA+IDMgfHwgSlNfSXNGdW5jdGlvbihjdHgsIGFyZ3ZbYXJnYyAtIDFdKSkgewogICAganNydWxlID0ganNfbWFsbG9jKGN0eCwgc2l6ZW9mKEpTTGV4ZXJSdWxlKSk7CgogICAganNydWxlLT5hY3Rpb24gPSBKU19EdXBWYWx1ZShjdHgsIGFyZ3ZbYXJnYyAtIDFdKTsKICAgIGpzcnVsZS0+c2tpcCA9ICEhKG1hc2sgJiBza2lwKTsKICB9CgogIGlmKG1hZ2ljKSB7CiAgICBpbnQgaW5kZXg7CiAgICBMZXhlclJ1bGUqIHJ1bGU7CgogICAgaWYoKGluZGV4ID0gbGV4ZXJfcnVsZV9hZGQobGV4LCBuYW1lLCBleHByLnNvdXJjZSkpID09IC0xKQogICAgICByZXR1cm4gSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIkxleGVyIHJ1bGUgJyVzJyBub3QgdW5pcXVlIiwgbmFtZSk7CgogICAgcnVsZSA9IGxleGVyX3J1bGVfYXQobGV4LCBpbmRleCk7CiAgICBydWxlLT5vcGFxdWUgPSBqc3J1bGU7CgogICAgcmV0dXJuIEpTX05ld0ludDMyKGN0eCwgaW5kZXgpOwogIH0gZWxzZSB7CiAgICBsZXhlcl9kZWZpbmUobGV4LCBuYW1lLCBleHByLnNvdXJjZSk7CiAgfQoKICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpKU1ZhbHVlCmpzX2xleGVyX2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgbmV3X3RhcmdldCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHByb3RvLCByZXQ7CiAgTGV4ZXIqIGxleDsKICBpbnQ2NF90IG1hc2sgPSBNQVNLX0FMTDsKICAvKiB1c2luZyBuZXdfdGFyZ2V0IHRvIGdldCB0aGUgcHJvdG90eXBlIGlzIG5lY2Vzc2FyeSB3aGVuIHRoZQogICAgICBjbGFzcyBpcyBleHRlbmRlZC4gKi8KICBwcm90byA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgbmV3X3RhcmdldCwgInByb3RvdHlwZSIpOwogIGlmKEpTX0lzRXhjZXB0aW9uKHByb3RvKSkKICAgIHByb3RvID0gbGV4ZXJfcHJvdG87IC8vIEpTX0R1cFZhbHVlKGN0eCwgbGV4ZXJfcHJvdG8pOwoKICByZXQgPSBqc19sZXhlcl9uZXcoY3R4LCBwcm90bywgYXJnYyA+IDAgPyBhcmd2WzBdIDogSlNfVU5ERUZJTkVELCBhcmdjID4gMSA/IGFyZ3ZbMV0gOiBKU19VTkRFRklORUQpOwoKICBpZigobGV4ID0gSlNfR2V0T3BhcXVlKHJldCwganNfbGV4ZXJfY2xhc3NfaWQpKSkgewogICAgaW50IGkgPSAyOwoKICAgIGlmKGxleC0+bG9jLmZpbGUgPT0gLTEgJiYgaSA8IGFyZ2MgJiYgSlNfSXNTdHJpbmcoYXJndltpXSkpCiAgICAgIGxleC0+bG9jLmZpbGUgPSBKU19WYWx1ZVRvQXRvbShjdHgsIGFyZ3ZbaSsrXSk7CgogICAgaWYoaSA8IGFyZ2MgJiYgSlNfSXNOdW1iZXIoYXJndltpXSkpIHsKICAgICAgdWludDMyX3QgbW9kZSA9IDA7CiAgICAgIEpTX1RvVWludDMyKGN0eCwgJm1vZGUsIGFyZ3ZbaSsrXSk7CiAgICAgIGxleC0+bW9kZSB8PSBtb2RlOwogICAgfQogICAgaWYoaSA8IGFyZ2MgJiYgSlNfSXNOdW1iZXIoYXJndltpXSkpCiAgICAgIEpTX1RvSW50NjQoY3R4LCAmbWFzaywgYXJndltpKytdKTsKICB9CiAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsICJtYXNrIiwgSlNfTmV3SW50NjQoY3R4LCBtYXNrKSk7CgogIHJldHVybiByZXQ7Cn0KCmVudW0gewogIE1FVEhPRF9TRVRfSU5QVVQgPSAwLAogIE1FVEhPRF9TS0lQLAogIE1FVEhPRF9CQUNLLAogIE1FVEhPRF9QRUVLQywKICBNRVRIT0RfR0VUQywKICBNRVRIT0RfU0tJUEMsCiAgTUVUSE9EX0dFVF9SQU5HRSwKICBNRVRIT0RfQ1VSUkVOVF9MSU5FLAogIE1FVEhPRF9UT0tFTl9DTEFTUywKICBNRVRIT0RfR0VUX1JVTEUsCiAgTUVUSE9EX1NLSVBVTlRJTCwKICBNRVRIT0RfRVJST1IsCiAgTUVUSE9EX1BVU0hfU1RBVEUsCiAgTUVUSE9EX1BPUF9TVEFURSwKICBNRVRIT0RfVE9QX1NUQVRFLAp9OwoKSlNWYWx1ZQpqc19sZXhlcl9tZXRob2QoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIGludCBtYWdpYykgewogIExleGVyKiBsZXg7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIE1FVEhPRF9TRVRfSU5QVVQ6IHsKICAgICAgTGV4ZXIqIG90aGVyOwogICAgICBJbnB1dEJ1ZmZlciBpbnB1dDsKICAgICAgTG9jYXRpb24gbG9jID0gezAsIDAsIDAsIC0xLCAwfTsKCiAgICAgIGlmKChvdGhlciA9IEpTX0dldE9wYXF1ZShhcmd2WzBdLCBqc19sZXhlcl9jbGFzc19pZCkpKSB7CiAgICAgICAgaW5wdXQgPSBpbnB1dF9idWZmZXJfY2xvbmUoJm90aGVyLT5pbnB1dCwgY3R4KTsKICAgICAgICBsb2MgPSBvdGhlci0+bG9jOwogICAgICAgIC8vIGxleC0+c3RhcnQgPSBvdGhlci0+c3RhcnQ7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaW5wdXQgPSBqc19pbnB1dF9jaGFycyhjdHgsIGFyZ3ZbMF0pOwogICAgICB9CgogICAgICBpbnB1dF9idWZmZXJfZnJlZSgmbGV4LT5pbnB1dCwgY3R4KTsKICAgICAgbGV4LT5pbnB1dCA9IGlucHV0OwogICAgICBsb2NhdGlvbl9yZWxlYXNlX3J0KCZsZXgtPmxvYywgSlNfR2V0UnVudGltZShjdHgpKTsKICAgICAgbGV4LT5sb2MgPSBsb2M7CgogICAgICBpZihhcmdjID4gMSAmJiBKU19Jc1N0cmluZyhhcmd2WzFdKSkgewogICAgICAgIGlmKGxleC0+bG9jLmZpbGUgPiAtMSkKICAgICAgICAgIEpTX0ZyZWVBdG9tKGN0eCwgbGV4LT5sb2MuZmlsZSk7CiAgICAgICAgbGV4LT5sb2MuZmlsZSA9IEpTX1ZhbHVlVG9BdG9tKGN0eCwgYXJndlsxXSk7CiAgICAgIH0KCiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX1NLSVA6IHsKICAgICAgcmV0ID0gSlNfTmV3VWludDMyKGN0eCwgbGV4ZXJfc2tpcChsZXgpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfQkFDSzogewogICAgICBpbnQgaTsKICAgICAgZm9yKGkgPSAwOyBpIDwgYXJnYzsgaSsrKSB7CiAgICAgICAgVG9rZW4qIHRvazsKICAgICAgICBMb2NhdGlvbiogbG9jOwogICAgICAgIGlmKChsb2MgPSBqc19sb2NhdGlvbl9kYXRhMihjdHgsIGFyZ3ZbaV0pKSkgewogICAgICAgICAgbGV4ZXJfc2V0X2xvY2F0aW9uKGxleCwgbG9jLCBjdHgpOwogICAgICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBsZXhlcl9wZWVrKGxleCwgMSA8PCBsZXgtPnN0YXRlLCBjdHgpKTsKICAgICAgICB9IGVsc2UgaWYoKHRvayA9IGpzX3Rva2VuX2RhdGEoYXJndltpXSkpKSB7CiAgICAgICAgICBsZXhlcl9zZXRfbG9jYXRpb24obGV4LCB0b2stPmxvYywgY3R4KTsKICAgICAgICAgIGxleC0+Ynl0ZV9sZW5ndGggPSB0b2stPmJ5dGVfbGVuZ3RoOwogICAgICAgICAgbGV4LT5zZXEgPSB0b2stPnNlcTsKICAgICAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgdG9rLT5pZCk7CiAgICAgICAgfSBlbHNlIGlmKEpTX0lzU3RyaW5nKGFyZ3ZbaV0pKSB7CiAgICAgICAgICBzaXplX3QgbGVuOwogICAgICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgJmxlbiwgYXJndltpXSk7CiAgICAgICAgICBpZihsZXgtPmlucHV0LnBvcyA+PSBsZW4gJiYgIW1lbWNtcCgmbGV4LT5pbnB1dC5kYXRhW2xleC0+aW5wdXQucG9zIC0gbGVuXSwgc3RyLCBsZW4pKSB7CiAgICAgICAgICAgIExvY2F0aW9uIGRpZmY7CiAgICAgICAgICAgIGxvY2F0aW9uX3plcm8oJmRpZmYpOwogICAgICAgICAgICBsb2NhdGlvbl9jb3VudCgmZGlmZiwgKGNvbnN0IGNoYXIqKSZsZXgtPmlucHV0LmRhdGFbbGV4LT5pbnB1dC5wb3MgLSBsZW5dLCBsZW4pOwogICAgICAgICAgICBsb2NhdGlvbl9zdWIoJmxleC0+bG9jLCAmZGlmZik7CiAgICAgICAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgbGV4ZXJfcGVlayhsZXgsIDEgPDwgbGV4LT5zdGF0ZSwgY3R4KSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBjaGFyKiBidWYgPSBieXRlX2VzY2FwZSgoY29uc3QgY2hhciopJmxleC0+aW5wdXQuZGF0YVtsZXgtPmlucHV0LnBvcyAtIGxlbl0sIGxlbik7CiAgICAgICAgICAgIHJldCA9IEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJMZXhlci5wcm90b3R5cGUuYmFjaygnJXMnKSBgJXNgIC4uLiIsIHN0ciwgYnVmKTsKICAgICAgICAgICAgZnJlZShidWYpOwogICAgICAgICAgfQogICAgICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfUEVFS0M6IHsKICAgICAgaWYoIWlucHV0X2J1ZmZlcl9lb2YoJmxleC0+aW5wdXQpKSB7CiAgICAgICAgc2l6ZV90IGxlbjsKICAgICAgICBjb25zdCB1aW50OF90KiBidWYgPSBpbnB1dF9idWZmZXJfcGVlaygmbGV4LT5pbnB1dCwgJmxlbik7CiAgICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKWJ1ZiwgbGVuKTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9HRVRDOiB7CiAgICAgIGlmKCFpbnB1dF9idWZmZXJfZW9mKCZsZXgtPmlucHV0KSkgewogICAgICAgIHNpemVfdCBsZW47CiAgICAgICAgY29uc3QgdWludDhfdCogYnVmID0gaW5wdXRfYnVmZmVyX2dldCgmbGV4LT5pbnB1dCwgJmxlbik7CiAgICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKWJ1ZiwgbGVuKTsKICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9TS0lQQzogewogICAgICBpZighaW5wdXRfYnVmZmVyX2VvZigmbGV4LT5pbnB1dCkpIHsKICAgICAgICBpbnQzMl90IG50aW1lcyA9IDE7CiAgICAgICAgY29uc3QgdWludDhfdCogcCA9IDA7CiAgICAgICAgc2l6ZV90IG47CiAgICAgICAgaWYoYXJnYyA+IDApCiAgICAgICAgICBKU19Ub0ludDMyKGN0eCwgJm50aW1lcywgYXJndlswXSk7CiAgICAgICAgd2hpbGUobnRpbWVzLS0gPiAwKSB7IHAgPSBpbnB1dF9idWZmZXJfZ2V0KCZsZXgtPmlucHV0LCAmbik7IH0KICAgICAgICBpZihwKQogICAgICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKXAsIG4pOwogICAgICB9CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX1NLSVBVTlRJTDogewogICAgICBpZighaW5wdXRfYnVmZmVyX2VvZigmbGV4LT5pbnB1dCkpIHsKICAgICAgICBKU1ZhbHVlQ29uc3QgcHJlZDsKICAgICAgICBpZighSlNfSXNGdW5jdGlvbihjdHgsIGFyZ3ZbMF0pKQogICAgICAgICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDEgaXMgbm90IGEgZnVuY3Rpb24iKTsKICAgICAgICBwcmVkID0gYXJndlswXTsKICAgICAgICB3aGlsZShsZXgtPmlucHV0LnBvcyA8IGxleC0+aW5wdXQuc2l6ZSkgewogICAgICAgICAgc2l6ZV90IG47CiAgICAgICAgICBjb25zdCB1aW50OF90KiBwID0gaW5wdXRfYnVmZmVyX3BlZWsoJmxleC0+aW5wdXQsICZuKTsKICAgICAgICAgIEpTVmFsdWUgc3RyID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKXAsIG4pOwogICAgICAgICAgSlNWYWx1ZSByZXQgPSBKU19DYWxsKGN0eCwgcHJlZCwgdGhpc192YWwsIDEsICZzdHIpOwogICAgICAgICAgQk9PTCBiID0gSlNfVG9Cb29sKGN0eCwgcmV0KTsKICAgICAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHJldCk7CiAgICAgICAgICBpZihiKSB7CiAgICAgICAgICAgIHJldCA9IHN0cjsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogICAgICAgICAgaW5wdXRfYnVmZmVyX2dldGMoJmxleC0+aW5wdXQpOwogICAgICAgICAgLy8gbGV4LT5zdGFydCA9IGxleC0+aW5wdXQucG9zOwogICAgICAgIH0KICAgICAgfQogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9HRVRfUkFOR0U6IHsKICAgICAgc2l6ZV90IHN0YXJ0LCBlbmQ7CiAgICAgIHN0YXJ0ID0gbGV4LT5pbnB1dC5wb3M7CiAgICAgIGVuZCA9IHN0YXJ0ICsgbGV4LT5ieXRlX2xlbmd0aDsKICAgICAgaWYoYXJnYyA+IDApIHsKICAgICAgICBqc192YWx1ZV90b3NpemUoY3R4LCAmc3RhcnQsIGFyZ3ZbMF0pOwogICAgICAgIGlmKGFyZ2MgPiAxKQogICAgICAgICAganNfdmFsdWVfdG9zaXplKGN0eCwgJmVuZCwgYXJndlsxXSk7CiAgICAgIH0KICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKSZsZXgtPmlucHV0LmRhdGFbc3RhcnRdLCBlbmQgLSBzdGFydCk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX0NVUlJFTlRfTElORTogewogICAgICByZXQgPSBKU19OZXdTdHJpbmcoY3R4LCBsZXhlcl9jdXJyZW50X2xpbmUobGV4LCBjdHgpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfVE9LRU5fQ0xBU1M6IHsKICAgICAgVG9rZW4qIHRvazsKICAgICAgTGV4ZXJSdWxlKiBydWxlOwogICAgICBpbnQzMl90IGlkID0gLTE7CgogICAgICBpZigodG9rID0gSlNfR2V0T3BhcXVlKGFyZ3ZbMF0sIGpzX3Rva2VuX2NsYXNzX2lkKSkpCiAgICAgICAgaWQgPSB0b2stPmlkOwogICAgICBlbHNlCiAgICAgICAgSlNfVG9JbnQzMihjdHgsICZpZCwgYXJndlswXSk7CgogICAgICBpZigocnVsZSA9IGxleGVyX3J1bGVfYXQobGV4LCBpZCkpKQogICAgICAgIHJldCA9IEpTX05ld1N0cmluZyhjdHgsIHJ1bGUtPm5hbWUpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIE1FVEhPRF9HRVRfUlVMRTogewogICAgICBMZXhlclJ1bGUqIHJ1bGU7CgogICAgICBpZihKU19Jc1N0cmluZyhhcmd2WzBdKSkgewogICAgICAgIHNpemVfdCBsZW47CiAgICAgICAgY29uc3QgY2hhciogbmFtZSA9IEpTX1RvQ1N0cmluZ0xlbihjdHgsICZsZW4sIGFyZ3ZbMF0pOwogICAgICAgIGlmKCEocnVsZSA9IGxleGVyX3J1bGVfZmluZChsZXgsIG5hbWUpKSkKICAgICAgICAgIHJ1bGUgPSBsZXhlcl9maW5kX2RlZmluaXRpb24obGV4LCBuYW1lLCBsZW4pOwogICAgICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbmFtZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaW50MzJfdCBpZCA9IC0xOwogICAgICAgIEpTX1RvSW50MzIoY3R4LCAmaWQsIGFyZ3ZbMF0pOwogICAgICAgIHJ1bGUgPSBsZXhlcl9ydWxlX2F0KGxleCwgaWQpOwogICAgICB9CgogICAgICBpZihydWxlKQogICAgICAgIHJldCA9IGpzX2xleGVyX3J1bGVfbmV3KGN0eCwgbGV4LCBydWxlKTsKCiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgTUVUSE9EX0VSUk9SOiB7CiAgICAgIGNvbnN0IGNoYXIqIG1lc3NhZ2UgPSBKU19Ub0NTdHJpbmcoY3R4LCBhcmd2WzBdKTsKICAgICAgY2hhciogbG9jYXRpb24gPSBsb2NhdGlvbl90b3N0cmluZygmbGV4LT5sb2MsIGN0eCk7CgogICAgICByZXQgPSBKU19UaHJvd1N5bnRheEVycm9yKGN0eCwgIiVzIGF0ICVzIiwgbWVzc2FnZSwgbG9jYXRpb24pOwoKICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBtZXNzYWdlKTsKICAgICAganNfZnJlZShjdHgsIGxvY2F0aW9uKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfUFVTSF9TVEFURTogewogICAgICBjb25zdCBjaGFyKiBzdGF0ZSA9IEpTX1RvQ1N0cmluZyhjdHgsIGFyZ3ZbMF0pOwogICAgICBpbnQgaWQ7CgogICAgICBpZCA9IGxleGVyX3N0YXRlX3B1c2gobGV4LCBzdGF0ZSk7CiAgICAgIC8vIHByaW50ZigiWyV6dV0gcHVzaFN0YXRlKCclcycpXG4iLCBsZXhlcl9zdGF0ZV9kZXB0aChsZXgpLCBzdGF0ZSk7CiAgICAgIHJldCA9IEpTX05ld0ludDMyKGN0eCwgaWQpOwogICAgICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0YXRlKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfUE9QX1NUQVRFOiB7CiAgICAgIGludCBpZDsKICAgICAgaWYobGV4ZXJfc3RhdGVfZGVwdGgobGV4KSA+IDApIHsKICAgICAgICBpZCA9IGxleGVyX3N0YXRlX3BvcChsZXgpOwogICAgICAgIC8vIHByaW50ZigiWyV6dV0gcG9wU3RhdGUoKSA9ICclcydcbiIsIGxleGVyX3N0YXRlX2RlcHRoKGxleCksCiAgICAgICAgLy8gbGV4ZXJfc3RhdGVfbmFtZShsZXgsIGlkKSk7CiAgICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBpZCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0ID0gSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgImxleGVyICglcykgZGVwdGggJXp1IiwgbGV4ZXJfc3RhdGVfdG9wbmFtZShsZXgpLCBsZXhlcl9zdGF0ZV9kZXB0aChsZXgpKTsKICAgICAgfQoKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBNRVRIT0RfVE9QX1NUQVRFOiB7CiAgICAgIGludDMyX3QgaW5kZXggPSAwLCBpZDsKICAgICAgaWYoYXJnYyA+IDAgJiYgSlNfSXNOdW1iZXIoYXJndlswXSkpCiAgICAgICAgSlNfVG9JbnQzMihjdHgsICZpbmRleCwgYXJndlswXSk7CgogICAgICBpZigoaWQgPSBpbmRleCA+IDAgPyBsZXhlcl9zdGF0ZV90b3AobGV4LCBpbmRleCkgOiBsZXgtPnN0YXRlKSA+PSAwKQogICAgICAgIHJldCA9IEpTX05ld1N0cmluZyhjdHgsIGxleGVyX3N0YXRlX25hbWUobGV4LCBpZCkpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgcmV0dXJuIHJldDsKfQoKZW51bSB7CiAgUFJPUF9TSVpFID0gMCwKICBQUk9QX1BPUywKICAvLyBQUk9QX1NUQVJULAogIFBST1BfRU9GLAogIFBST1BfRklMRU5BTUUsCiAgUFJPUF9MT0MsCiAgUFJPUF9SVUxFTkFNRVMsCiAgUFJPUF9SVUxFUywKICBQUk9QX01PREUsCiAgUFJPUF9CWVRFX0xFTkdUSCwKICBQUk9QX0NIQVJfTEVOR1RILAogIFBST1BfU1RBVEUsCiAgUFJPUF9TVEFURVMsCiAgUFJPUF9TVEFURV9ERVBUSCwKICBQUk9QX1NUQVRFX1NUQUNLLAogIFBST1BfU09VUkNFLAogIFBST1BfTEVYRU1FLAogIFBST1BfVE9LRU4sCn07CgpKU1ZhbHVlCmpzX2xleGVyX2dldChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBMZXhlciogbGV4OwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZighKGxleCA9IGpzX2xleGVyX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIHN3aXRjaChtYWdpYykgewogICAgY2FzZSBQUk9QX1BPUzogewogICAgICByZXQgPSBKU19OZXdJbnQ2NChjdHgsIGxleC0+aW5wdXQucG9zKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX1NJWkU6IHsKICAgICAgcmV0ID0gSlNfTmV3SW50NjQoY3R4LCBsZXgtPmlucHV0LnNpemUpOwogICAgICBicmVhazsKICAgIH0KCiAgICAgIC8qICAgIGNhc2UgUFJPUF9TVEFSVDogewogICAgICAgICAgICByZXQgPSBKU19OZXdJbnQ2NChjdHgsIGxleC0+c3RhcnQpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0qLwoKICAgIGNhc2UgUFJPUF9FT0Y6IHsKICAgICAgcmV0ID0gSlNfTmV3Qm9vbChjdHgsIGlucHV0X2J1ZmZlcl9lb2YoJmxleC0+aW5wdXQpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX0ZJTEVOQU1FOiB7CiAgICAgIHJldCA9IGxleC0+bG9jLmZpbGUgPiAtMSA/IEpTX0F0b21Ub1ZhbHVlKGN0eCwgbGV4LT5sb2MuZmlsZSkgOiBKU19VTkRFRklORUQ7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9MT0M6IHsKICAgICAgTG9jYXRpb24qIGxvYzsKCiAgICAgIGlmKChsb2MgPSBsb2NhdGlvbl9uZXcoY3R4KSkpIHsKICAgICAgICBsb2NhdGlvbl9jb3B5KGxvYywgJmxleC0+bG9jLCBjdHgpOwogICAgICAgIHJldCA9IGpzX2xvY2F0aW9uX3dyYXAoY3R4LCBsb2MpOwogICAgICB9CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9SVUxFTkFNRVM6IHsKICAgICAgTGV4ZXJSdWxlKiBydWxlOwogICAgICB1aW50MzJfdCBpID0gMDsKICAgICAgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKCiAgICAgIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+cnVsZXMsIHJ1bGUpIHsgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGkrKywgSlNfTmV3U3RyaW5nKGN0eCwgcnVsZS0+bmFtZSkpOyB9CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9SVUxFUzogewogICAgICBMZXhlclJ1bGUqIHJ1bGU7CiAgICAgIHVpbnQzMl90IGkgPSAwOwogICAgICByZXQgPSBKU19OZXdPYmplY3QoY3R4KTsKCiAgICAgIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+cnVsZXMsIHJ1bGUpIHsKICAgICAgICAvLyBwcmludGYoInJ1bGUgIyUiIFBSSXUzMiAiICclcycgJyVzJ1xuIiwgaSwgcnVsZS0+bmFtZSwgcnVsZS0+ZXhwcik7CiAgICAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsIHJ1bGUtPm5hbWUsIEpTX05ld1VpbnQzMihjdHgsIGkpKTsKICAgICAgICBpKys7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX01PREU6IHsKICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBsZXgtPm1vZGUpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfQllURV9MRU5HVEg6IHsKICAgICAgcmV0ID0gSlNfTmV3VWludDMyKGN0eCwgbGV4LT5ieXRlX2xlbmd0aCk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9DSEFSX0xFTkdUSDogewogICAgICByZXQgPSBKU19OZXdVaW50MzIoY3R4LCBsZXhlcl9jaGFybGVuKGxleCkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfU1RBVEU6IHsKICAgICAgcmV0ID0gSlNfTmV3SW50MzIoY3R4LCBsZXgtPnN0YXRlKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX1NUQVRFUzogewogICAgICBzaXplX3QgaSA9IDA7CiAgICAgIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgICAgIGZvcig7OykgewogICAgICAgIGNoYXIqIG5hbWU7CiAgICAgICAgaWYoKG5hbWUgPSBsZXhlcl9zdGF0ZV9uYW1lKGxleCwgaSkpID09IDApCiAgICAgICAgICBicmVhazsKICAgICAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSsrLCBKU19OZXdTdHJpbmcoY3R4LCBuYW1lKSk7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX1NUQVRFX0RFUFRIOiB7CiAgICAgIHJldCA9IEpTX05ld1VpbnQzMihjdHgsIGxleGVyX3N0YXRlX2RlcHRoKGxleCkpOwogICAgICBicmVhazsKICAgIH0KCiAgICBjYXNlIFBST1BfU1RBVEVfU1RBQ0s6IHsKICAgICAgc2l6ZV90IGkgPSAwLCBuID0gdmVjdG9yX3NpemUoJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSk7CiAgICAgIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgICAgIGZvcig7IGkgPCBuOyBpKyspIHsKICAgICAgICBpbnQzMl90IHN0YXRlID0gKihpbnQzMl90Kil2ZWN0b3JfYXQoJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSwgaSk7CiAgICAgICAgY2hhciogbmFtZTsKICAgICAgICBpZigobmFtZSA9IGxleGVyX3N0YXRlX25hbWUobGV4LCBzdGF0ZSkpID09IDApCiAgICAgICAgICBicmVhazsKICAgICAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSwgSlNfTmV3U3RyaW5nKGN0eCwgbmFtZSkpOwogICAgICB9CiAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdTdHJpbmcoY3R4LCBsZXhlcl9zdGF0ZV9uYW1lKGxleCwgbGV4LT5zdGF0ZSkpKTsKICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX1NPVVJDRTogewogICAgICByZXQgPSBKU19OZXdTdHJpbmdMZW4oY3R4LCAoY29uc3QgY2hhciopbGV4LT5pbnB1dC5kYXRhLCBsZXgtPmlucHV0LnNpemUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUFJPUF9MRVhFTUU6IHsKICAgICAgcmV0ID0gSlNfTmV3U3RyaW5nTGVuKGN0eCwgKGNvbnN0IGNoYXIqKWxleC0+aW5wdXQuZGF0YSArIGxleC0+aW5wdXQucG9zLCBsZXgtPmJ5dGVfbGVuZ3RoKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFBST1BfVE9LRU46IHsKICAgICAgVG9rZW4qIHRvazsKCiAgICAgIGlmKCh0b2sgPSBsZXhlcl90b2tlbihsZXgsIGxleC0+dG9rZW5faWQsIGN0eCkpKQogICAgICAgIHJldCA9IGpzX3Rva2VuX3dyYXAoY3R4LCB0b2spOwoKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfc2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIEpTVmFsdWVDb25zdCB2YWx1ZSwgaW50IG1hZ2ljKSB7CiAgTGV4ZXIqIGxleDsKCiAgaWYoIShsZXggPSBqc19sZXhlcl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgUFJPUF9QT1M6IHsKICAgICAgVG9rZW4qIHRvazsKICAgICAgaWYoKHRvayA9IGpzX3Rva2VuX2RhdGEodmFsdWUpKSkgewogICAgICAgIGxleC0+aW5wdXQucG9zID0gdG9rLT5sb2MtPmNoYXJfb2Zmc2V0OwoKICAgICAgICBsb2NhdGlvbl9yZWxlYXNlKCZsZXgtPmxvYywgY3R4KTsKICAgICAgICBsb2NhdGlvbl9jb3B5KCZsZXgtPmxvYywgdG9rLT5sb2MsIGN0eCk7CiAgICAgICAgLy8gICAgICAgIGxleC0+bG9jID0gdG9rLT5sb2M7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX0JZVEVfTEVOR1RIOiB7CiAgICAgIFRva2VuKiB0b2s7CiAgICAgIGlmKEpTX0lzTnVtYmVyKHZhbHVlKSkgewogICAgICAgIGpzX3ZhbHVlX3Rvc2l6ZShjdHgsICZsZXgtPmJ5dGVfbGVuZ3RoLCB2YWx1ZSk7CiAgICAgIH0gZWxzZSBpZigodG9rID0ganNfdG9rZW5fZGF0YSh2YWx1ZSkpKSB7CiAgICAgICAgbGV4LT5ieXRlX2xlbmd0aCA9IHRvay0+Ynl0ZV9sZW5ndGg7CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CgogICAgY2FzZSBQUk9QX0ZJTEVOQU1FOiB7CiAgICAgIGlmKGxleC0+bG9jLmZpbGUgPiAtMSkKICAgICAgICBKU19GcmVlQXRvbShjdHgsIGxleC0+bG9jLmZpbGUpOwogICAgICBsZXgtPmxvYy5maWxlID0gSlNfVmFsdWVUb0F0b20oY3R4LCB2YWx1ZSk7CiAgICAgIGJyZWFrOwogICAgfQoKICAgIGNhc2UgUFJPUF9NT0RFOiB7CiAgICAgIGludDMyX3QgbTsKICAgICAgSlNfVG9JbnQzMihjdHgsICZtLCB2YWx1ZSk7CiAgICAgIGxleC0+bW9kZSA9IG07CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gSlNfVU5ERUZJTkVEOwp9CgpKU1ZhbHVlCmpzX2xleGVyX3Rva2VucyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsKSB7CiAgTGV4ZXIqIGxleDsKICBMZXhlclJ1bGUqIHJ1bGU7CiAgaW50IGkgPSAwOwogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZighKGxleCA9IGpzX2xleGVyX2RhdGEyKGN0eCwgdGhpc192YWwpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CgogIHZlY3Rvcl9mb3JlYWNoX3QoJmxleC0+cnVsZXMsIHJ1bGUpIHsKICAgIGNvbnN0IGNoYXIqIG5hbWUgPSBydWxlLT5uYW1lOwoKICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpKyssIEpTX05ld1N0cmluZyhjdHgsIG5hbWUpKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19sZXhlcl9zdGF0ZXMoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCkgewogIExleGVyKiBsZXg7CiAgY2hhcioqIGNvbmQ7CiAgdWludDMyX3QgaSA9IDA7CiAgSlNWYWx1ZSByZXQgPSBKU19VTkRFRklORUQ7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgcmV0ID0gSlNfTmV3QXJyYXkoY3R4KTsKCiAgdmVjdG9yX2ZvcmVhY2hfdCgmbGV4LT5zdGF0ZXMsIGNvbmQpIHsgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGkrKywgSlNfTmV3U3RyaW5nKGN0eCwgKmNvbmQpKTsgfQoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2xleGVyX3N0YXRlc3RhY2soSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCkgewogIExleGVyKiBsZXg7CiAgaW50MzJfdCogc3RhY2s7CiAgc2l6ZV90IHNpemU7CiAgSlNWYWx1ZSBjdG9yLCBidWYsIHJldCA9IEpTX1VOREVGSU5FRDsKCiAgaWYoIShsZXggPSBqc19sZXhlcl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBzaXplID0gdmVjdG9yX3NpemUoJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSkgKyAxOwogIHN0YWNrID0ganNfbWFsbG9jX3J0KEpTX0dldFJ1bnRpbWUoY3R4KSwgc2l6ZW9mKGludDMyX3QpICogc2l6ZSk7CgogIG1lbWNweShzdGFjaywgdmVjdG9yX2JlZ2luKCZsZXgtPnN0YXRlX3N0YWNrKSwgc2l6ZW9mKGludDMyX3QpICogKHNpemUgLSAxKSk7CgogIHN0YWNrW3NpemUgLSAxXSA9IGxleC0+c3RhdGU7CgogIGJ1ZiA9IEpTX05ld0FycmF5QnVmZmVyKGN0eCwgKHZvaWQqKXN0YWNrLCBzaXplb2YoaW50MzJfdCkgKiBzaXplLCAoSlNGcmVlQXJyYXlCdWZmZXJEYXRhRnVuYyopJmpzX2ZyZWVfcnQsIHN0YWNrLCBGQUxTRSk7CgogIGN0b3IgPSBqc19nbG9iYWxfZ2V0X3N0cihjdHgsICJJbnQzMkFycmF5Iik7CgogIHJldCA9IEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIDEsICZidWYpOwoKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICBKU19GcmVlVmFsdWUoY3R4LCBidWYpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2xleGVyX2VzY2FwZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IG1hZ2ljKSB7CiAgSW5wdXRCdWZmZXIgaW5wdXQgPSBqc19pbnB1dF9jaGFycyhjdHgsIGFyZ3ZbMF0pOwogIER5bkJ1ZiBvdXRwdXQ7CiAganNfZGJ1Zl9pbml0KGN0eCwgJm91dHB1dCk7CiAgbWFnaWMgPyBkYnVmX3B1dF91bmVzY2FwZWRfcHJlZCgmb3V0cHV0LCAoY29uc3QgY2hhciopaW5wdXQuZGF0YSwgaW5wdXQuc2l6ZSwgbGV4ZXJfdW5lc2NhcGVfcHJlZCkKICAgICAgICA6IGRidWZfcHV0X2VzY2FwZWRfcHJlZCgmb3V0cHV0LCAoY29uc3QgY2hhciopaW5wdXQuZGF0YSwgaW5wdXQuc2l6ZSwgbGV4ZXJfZXNjYXBlX3ByZWQpOwogIHJldHVybiBkYnVmX3Rvc3RyaW5nX2ZyZWUoJm91dHB1dCwgY3R4KTsKfQoKSlNWYWx1ZQpqc19sZXhlcl90b3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIEpTVmFsdWUgcmV0ID0gSlNfVU5ERUZJTkVEOwoKICBpZihqc19pc19yZWdleHAoY3R4LCBhcmd2WzBdKSB8fCBKU19Jc1N0cmluZyhhcmd2WzBdKSkgewogICAgUmVnRXhwIHJlOwogICAgcmUgPSByZWdleHBfZnJvbV9hcmd2KGFyZ2MsIGFyZ3YsIGN0eCk7CiAgICByZXQgPSBKU19OZXdTdHJpbmcoY3R4LCByZS5zb3VyY2UpOwogIH0gZWxzZSB7CiAgICBJbnB1dEJ1ZmZlciBpbnB1dDsKICAgIGlucHV0ID0ganNfaW5wdXRfY2hhcnMoY3R4LCBhcmd2WzBdKTsKICAgIHJldCA9IEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKilpbnB1dC5kYXRhLCBpbnB1dC5zaXplKTsKICAgIGlucHV0X2J1ZmZlcl9mcmVlKCZpbnB1dCwgY3R4KTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19sZXhlcl9sZXgoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKICBMZXhlciogbGV4OwogIGludCBpZCwgc3RhdGUgPSAtMTsKCiAgaWYoIShsZXggPSBqc19sZXhlcl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICBpZihhcmdjID4gMCAmJiBKU19Jc1N0cmluZyhhcmd2WzBdKSkgewogICAgY29uc3QgY2hhciogbmFtZSA9IEpTX1RvQ1N0cmluZyhjdHgsIGFyZ3ZbMF0pOwogICAgc3RhdGUgPSBsZXhlcl9zdGF0ZV9wdXNoKGxleCwgbmFtZSk7CiAgICBKU19GcmVlQ1N0cmluZyhjdHgsIG5hbWUpOwogIH0KCiAgaWQgPSBsZXhlcl9sZXgobGV4LCBjdHgsIHRoaXNfdmFsLCBhcmdjLCBhcmd2KTsKCiAgaWYoc3RhdGUgPiAtMSkKICAgIGxleGVyX3N0YXRlX3BvcChsZXgpOwoKICBzd2l0Y2goaWQpIHsKICAgIGNhc2UgTEVYRVJfRVJST1JfTk9NQVRDSDogewogICAgICBjaGFyKiBsZXhlbWUgPSBsZXhlcl9sZXhlbWVfcyhsZXgsIGN0eCk7CiAgICAgIGNoYXIqIGZpbGUgPSBsb2NhdGlvbl9maWxlKCZsZXgtPmxvYywgY3R4KTsKCiAgICAgIHJldCA9IEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiJXM6JSIgUFJJdTMyICI6JSIgUFJJdTMyICI6IE5vIG1hdGNoaW5nIHRva2VuICglZDogJXMpICclcydcbiUuKnNcbiUqcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV4LT5sb2MubGluZSArIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXgtPmxvYy5jb2x1bW4gKyAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV4ZXJfc3RhdGVfdG9wKGxleCwgMCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXhlcl9zdGF0ZV9uYW1lKGxleCwgbGV4ZXJfc3RhdGVfdG9wKGxleCwgMCkpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV4ZW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGludCkoYnl0ZV9jaHIoKGNvbnN0IGNoYXIqKSZsZXgtPmlucHV0LmRhdGFbbGV4LT5pbnB1dC5wb3NdLCBsZXgtPmlucHV0LnNpemUgLSBsZXgtPmlucHV0LnBvcywgJ1xuJykgKyBsZXgtPmxvYy5jb2x1bW4pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJmxleC0+aW5wdXQuZGF0YVtsZXgtPmlucHV0LnBvcyAtIGxleC0+bG9jLmNvbHVtbl0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXgtPmxvYy5jb2x1bW4gKyAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIl4iKTsKICAgICAgaWYoZmlsZSkKICAgICAgICBqc19mcmVlKGN0eCwgZmlsZSk7CiAgICAgIGpzX2ZyZWUoY3R4LCBsZXhlbWUpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgTEVYRVJfRU9GOiB7CiAgICAgIHJldCA9IEpTX05VTEw7CiAgICAgIGJyZWFrOwogICAgfQogICAgZGVmYXVsdDogewogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIGlkKTsKICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICByZXR1cm4gcmV0Owp9CgplbnVtIHsKICBZSUVMRF9JRCA9IDAsCiAgWUlFTERfT0JKID0gMSwKICBZSUVMRF9ET05FX1ZBTFVFID0gMiwKfTsKCkpTVmFsdWUKanNfbGV4ZXJfbmV4dGZuKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbWFnaWMpIHsKICBKU1ZhbHVlIHJldCwgdmFsdWUgPSBKU19VTkRFRklORUQ7CiAgTGV4ZXIqIGxleDsKCiAgaWYoIShsZXggPSBqc19sZXhlcl9kYXRhMihjdHgsIHRoaXNfdmFsKSkpCiAgICByZXR1cm4gSlNfRVhDRVBUSU9OOwoKICByZXQgPSBqc19sZXhlcl9sZXgoY3R4LCB0aGlzX3ZhbCwgYXJnYywgYXJndik7CgogIGlmKEpTX0lzTnVtYmVyKHJldCkpIHsKICAgIGludDMyX3QgaWQ7CgogICAgSlNfVG9JbnQzMihjdHgsICZpZCwgcmV0KTsKCiAgICBpZihtYWdpYyAmIFlJRUxEX09CSikgewogICAgICBUb2tlbiogdG9rID0gbGV4ZXJfdG9rZW4obGV4LCBpZCwgY3R4KTsKICAgICAgdmFsdWUgPSBqc190b2tlbl93cmFwKGN0eCwgdG9rKTsKICAgIH0gZWxzZSB7CiAgICAgIHZhbHVlID0gSlNfTmV3SW50MzIoY3R4LCBpZCk7CiAgICB9CiAgfQoKICBpZihtYWdpYyAmIFlJRUxEX0RPTkVfVkFMVUUpIHsKICAgIEpTVmFsdWUgcmV0ID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHJldCwgInZhbHVlIiwgdmFsdWUpOwogICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCByZXQsICJkb25lIiwgSlNfTmV3Qm9vbChjdHgsIEpTX0lzVW5kZWZpbmVkKHZhbHVlKSkpOwogICAgcmV0dXJuIHJldDsKICB9CgogIHJldHVybiB2YWx1ZTsKfQoKSlNWYWx1ZQpqc19sZXhlcl9uZXh0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBCT09MKiBwZG9uZSwgaW50IG1hZ2ljKSB7CiAgSlNWYWx1ZSByZXQgPSBqc19sZXhlcl9uZXh0Zm4oY3R4LCB0aGlzX3ZhbCwgYXJnYywgYXJndiwgbWFnaWMpOwoKICAqcGRvbmUgPSBKU19Jc1VuZGVmaW5lZChyZXQpOwoKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2xleGVyX2NhbGwoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBmdW5jX29iaiwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwgaW50IGZsYWdzKSB7CiAgTGV4ZXIqIGxleDsKICBpbnQzMl90IHJlc3VsdDsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKICBKU1ZhbHVlQ29uc3QgYXJnID0gYXJnYyA+IDAgPyBhcmd2WzBdIDogSlNfVU5ERUZJTkVEOwoKICBpZighKGxleCA9IEpTX0dldE9wYXF1ZTIoY3R4LCBmdW5jX29iaiwganNfbGV4ZXJfY2xhc3NfaWQpKSkKICAgIHJldHVybiBKU19FWENFUFRJT047CgogIGlmKGFyZ2MgPiAwICYmIEpTX0lzTnVtYmVyKGFyZ3ZbMF0pKSB7CiAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIGZ1bmNfb2JqLCAibWFzayIsIEpTX0R1cFZhbHVlKGN0eCwgYXJndlswXSkpOwogIH0KCiAgaWYoYXJnYyA+IDEgJiYgSlNfSXNOdW1iZXIoYXJndlsxXSkpIHsKICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgZnVuY19vYmosICJza2lwIiwgSlNfRHVwVmFsdWUoY3R4LCBhcmd2WzFdKSk7CiAgfQoKICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBmdW5jX29iaik7Cn0KCkpTVmFsdWUKanNfbGV4ZXJfaXRlcmF0b3IoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwgaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10pIHsKICBKU1ZhbHVlIG5leHQsIHJldCA9IEpTX05ld09iamVjdChjdHgpOwoKICBuZXh0ID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIChKU0NGdW5jdGlvbiopJmpzX2xleGVyX25leHRmbiwgIm5leHQiLCAwLCBKU19DRlVOQ19nZW5lcmljX21hZ2ljLCBZSUVMRF9JRCB8IFlJRUxEX0RPTkVfVkFMVUUpOwoKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHJldCwgIm5leHQiLCBqc19mdW5jdGlvbl9iaW5kX3RoaXMoY3R4LCBuZXh0LCB0aGlzX3ZhbCkpOwogIHJldHVybiByZXQ7CgogIHJldHVybiBKU19EdXBWYWx1ZShjdHgsIHRoaXNfdmFsKTsKfQoKc3RhdGljIEpTVmFsdWUKanNfbGV4ZXJfaW5zcGVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgYXJnYywgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIExleGVyKiBsZXg7CgogIGlmKCEobGV4ID0ganNfbGV4ZXJfZGF0YTIoY3R4LCB0aGlzX3ZhbCkpKQogICAgcmV0dXJuIEpTX0VYQ0VQVElPTjsKCiAgSlNWYWx1ZSBvYmogPSBKU19OZXdPYmplY3RDbGFzcyhjdHgsIGpzX2xleGVyX2NsYXNzX2lkKTsKCiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImJ5dGVsZW4iLCBKU19OZXdVaW50MzIoY3R4LCBsZXgtPmJ5dGVfbGVuZ3RoKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAidG9raWQiLCBKU19OZXdJbnQzMihjdHgsIGxleC0+dG9rZW5faWQpLCBKU19QUk9QX0VOVU1FUkFCTEUpOwogIEpTX0RlZmluZVByb3BlcnR5VmFsdWVTdHIoY3R4LCBvYmosICJzdGF0ZSIsIEpTX05ld0ludDMyKGN0eCwgbGV4LT5zdGF0ZSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImVvZiIsIEpTX05ld0Jvb2woY3R4LCBpbnB1dF9idWZmZXJfZW9mKCZsZXgtPmlucHV0KSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgLy8gSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgImxvYyIsIGpzX2xvY2F0aW9uX25ldyhjdHgsICZsZXgtPmxvYyksIEpTX1BST1BfRU5VTUVSQUJMRSk7CiAgSlNfRGVmaW5lUHJvcGVydHlWYWx1ZVN0cihjdHgsIG9iaiwgInBvcyIsIEpTX05ld1VpbnQzMihjdHgsIGxleC0+aW5wdXQucG9zKSwgSlNfUFJPUF9FTlVNRVJBQkxFKTsKICBKU19EZWZpbmVQcm9wZXJ0eVZhbHVlU3RyKGN0eCwgb2JqLCAic2l6ZSIsIEpTX05ld1VpbnQzMihjdHgsIGxleC0+aW5wdXQuc2l6ZSksIEpTX1BST1BfRU5VTUVSQUJMRSk7CgogIHJldHVybiBvYmo7Cn0KCnZvaWQKanNfbGV4ZXJfZmluYWxpemVyKEpTUnVudGltZSogcnQsIEpTVmFsdWUgdmFsKSB7CiAgTGV4ZXIqIGxleDsKCiAgaWYoKGxleCA9IEpTX0dldE9wYXF1ZSh2YWwsIGpzX2xleGVyX2NsYXNzX2lkKSkpIHsKICBpZigtLWxleC0+cmVmX2NvdW50ID09IDApIAogICAgbG9jYXRpb25fcmVsZWFzZV9ydCgmbGV4LT5sb2MsIHJ0KTsKICAgIGxleGVyX3JlbGVhc2VfcnQobGV4LCBydCk7CgogICAgaWYobGV4LT5yZWZfY291bnQgPT0gMCkKICAgICAganNfZnJlZV9ydChydCwgbGV4KTsKICB9CiAgLy8gSlNfRnJlZVZhbHVlUlQocnQsIHZhbCk7Cn0KCnN0YXRpYyBKU0NsYXNzRGVmIGpzX2xleGVyX2NsYXNzID0gey5jbGFzc19uYW1lID0gIkxleGVyIiwgLmZpbmFsaXplciA9IGpzX2xleGVyX2ZpbmFsaXplciwgLmNhbGwgPSBqc19sZXhlcl9jYWxsfTsKCnN0YXRpYyBjb25zdCBKU0NGdW5jdGlvbkxpc3RFbnRyeSBqc19sZXhlcl9wcm90b19mdW5jc1tdID0gewogICAgLy8gSlNfSVRFUkFUT1JfTkVYVF9ERUYoIm5leHQiLCAwLCBqc19sZXhlcl9uZXh0LCBZSUVMRF9PQkopLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJuZXh0IiwgMCwganNfbGV4ZXJfbmV4dGZuLCBZSUVMRF9JRCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoIm5leHRUb2tlbiIsIDAsIGpzX2xleGVyX25leHRmbiwgWUlFTERfT0JKKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzaXplIiwganNfbGV4ZXJfZ2V0LCBqc19sZXhlcl9zZXQsIFBST1BfU0laRSksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigicG9zIiwganNfbGV4ZXJfZ2V0LCBqc19sZXhlcl9zZXQsIFBST1BfUE9TKSwKICAgIC8vIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzdGFydCIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9TVEFSVCksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibG9jIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX0xPQyksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiZW9mIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX0VPRiksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibW9kZSIsIGpzX2xleGVyX2dldCwganNfbGV4ZXJfc2V0LCBQUk9QX01PREUpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImJ5dGVMZW5ndGgiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfQllURV9MRU5HVEgpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoImNoYXJMZW5ndGgiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfQ0hBUl9MRU5HVEgpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInN0YXRlIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX1NUQVRFKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzdGF0ZXMiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfU1RBVEVTKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzdGF0ZURlcHRoIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX1NUQVRFX0RFUFRIKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzdGF0ZVN0YWNrIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX1NUQVRFX1NUQUNLKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJzb3VyY2UiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfU09VUkNFKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJsZXhlbWUiLCBqc19sZXhlcl9nZXQsIDAsIFBST1BfTEVYRU1FKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJ0b2tlbiIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9UT0tFTiksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigiZmlsZU5hbWUiLCBqc19sZXhlcl9nZXQsIGpzX2xleGVyX3NldCwgUFJPUF9GSUxFTkFNRSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInNldElucHV0IiwgMSwganNfbGV4ZXJfbWV0aG9kLCBNRVRIT0RfU0VUX0lOUFVUKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigic2tpcCIsIDAsIGpzX2xleGVyX21ldGhvZCwgTUVUSE9EX1NLSVApLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJza2lwVW50aWwiLCAxLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9TS0lQVU5USUwpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJ0b2tlbkNsYXNzIiwgMSwganNfbGV4ZXJfbWV0aG9kLCBNRVRIT0RfVE9LRU5fQ0xBU1MpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJkZWZpbmUiLCAyLCBqc19sZXhlcl9hZGRfcnVsZSwgMCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImFkZFJ1bGUiLCAyLCBqc19sZXhlcl9hZGRfcnVsZSwgMSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImdldFJ1bGUiLCAxLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9HRVRfUlVMRSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInB1c2hTdGF0ZSIsIDEsIGpzX2xleGVyX21ldGhvZCwgTUVUSE9EX1BVU0hfU1RBVEUpLAogICAgSlNfQUxJQVNfREVGKCJiZWdpbiIsICJwdXNoU3RhdGUiKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigicG9wU3RhdGUiLCAwLCBqc19sZXhlcl9tZXRob2QsIE1FVEhPRF9QT1BfU1RBVEUpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJ0b3BTdGF0ZSIsIDAsIGpzX2xleGVyX21ldGhvZCwgTUVUSE9EX1RPUF9TVEFURSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImN1cnJlbnRMaW5lIiwgMCwganNfbGV4ZXJfbWV0aG9kLCBNRVRIT0RfQ1VSUkVOVF9MSU5FKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiYmFjayIsIDAsIGpzX2xleGVyX21ldGhvZCwgTUVUSE9EX0JBQ0spLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInJ1bGVOYW1lcyIsIGpzX2xleGVyX2dldCwgMCwgUFJPUF9SVUxFTkFNRVMpLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoInJ1bGVzIiwganNfbGV4ZXJfZ2V0LCAwLCBQUk9QX1JVTEVTKSwKICAgIEpTX0NGVU5DX0RFRigibGV4IiwgMCwganNfbGV4ZXJfbGV4KSwKICAgIEpTX0NGVU5DX0RFRigiaW5zcGVjdCIsIDAsIGpzX2xleGVyX2luc3BlY3QpLAogICAgSlNfQ0dFVFNFVF9ERUYoInRva2VucyIsIGpzX2xleGVyX3Rva2VucywgMCksCiAgICBKU19DR0VUU0VUX0RFRigic3RhdGVzIiwganNfbGV4ZXJfc3RhdGVzLCAwKSwKICAgIC8vIEpTX0NHRVRTRVRfREVGKCJzdGF0ZVN0YWNrIiwganNfbGV4ZXJfc3RhdGVzdGFjaywgMCksCiAgICAvLyBKU19BTElBU19ERUYoInBvc2l0aW9uIiwgImxvYyIpLAogICAgSlNfQ0ZVTkNfREVGKCJbU3ltYm9sLml0ZXJhdG9yXSIsIDAsIGpzX2xleGVyX2l0ZXJhdG9yKSwKICAgIEpTX1BST1BfU1RSSU5HX0RFRigiW1N5bWJvbC50b1N0cmluZ1RhZ10iLCAiTGV4ZXIiLCBKU19QUk9QX0NPTkZJR1VSQUJMRSksCn07CgpzdGF0aWMgY29uc3QgSlNDRnVuY3Rpb25MaXN0RW50cnkganNfbGV4ZXJfc3RhdGljX2Z1bmNzW10gPSB7CiAgICBKU19DRlVOQ19NQUdJQ19ERUYoImVzY2FwZSIsIDEsIGpzX2xleGVyX2VzY2FwZSwgMCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInVuZXNjYXBlIiwgMSwganNfbGV4ZXJfZXNjYXBlLCAxKSwKICAgIEpTX0NGVU5DX0RFRigidG9TdHJpbmciLCAxLCBqc19sZXhlcl90b3N0cmluZyksCiAgICBKU19QUk9QX0lOVDMyX0RFRigiRklSU1QiLCBMRVhFUl9GSVJTVCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJMT05HRVNUIiwgTEVYRVJfTE9OR0VTVCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJMQVNUIiwgTEVYRVJfTEFTVCwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKICAgIEpTX1BST1BfSU5UMzJfREVGKCJZSUVMRF9JRCIsIFlJRUxEX0lELCBKU19QUk9QX0VOVU1FUkFCTEUpLAogICAgSlNfUFJPUF9JTlQzMl9ERUYoIllJRUxEX09CSiIsIFlJRUxEX09CSiwgSlNfUFJPUF9FTlVNRVJBQkxFKSwKfTsKCmludApqc19sZXhlcl9pbml0KEpTQ29udGV4dCogY3R4LCBKU01vZHVsZURlZiogbSkgewoKICBqc19sb2NhdGlvbl9pbml0KGN0eCwgbSk7CgogIEpTX05ld0NsYXNzSUQoJmpzX3Rva2VuX2NsYXNzX2lkKTsKICBKU19OZXdDbGFzcyhKU19HZXRSdW50aW1lKGN0eCksIGpzX3Rva2VuX2NsYXNzX2lkLCAmanNfdG9rZW5fY2xhc3MpOwoKICB0b2tlbl9wcm90byA9IEpTX05ld09iamVjdChjdHgpOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgdG9rZW5fcHJvdG8sIGpzX3Rva2VuX3Byb3RvX2Z1bmNzLCBjb3VudG9mKGpzX3Rva2VuX3Byb3RvX2Z1bmNzKSk7CiAgSlNfU2V0Q2xhc3NQcm90byhjdHgsIGpzX3Rva2VuX2NsYXNzX2lkLCB0b2tlbl9wcm90byk7CgogIHRva2VuX2N0b3IgPSBKU19OZXdDRnVuY3Rpb24yKGN0eCwganNfdG9rZW5fY29uc3RydWN0b3IsICJUb2tlbiIsIDEsIEpTX0NGVU5DX2NvbnN0cnVjdG9yLCAwKTsKCiAgSlNfU2V0Q29uc3RydWN0b3IoY3R4LCB0b2tlbl9jdG9yLCB0b2tlbl9wcm90byk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCB0b2tlbl9jdG9yLCBqc190b2tlbl9zdGF0aWNfZnVuY3MsIGNvdW50b2YoanNfdG9rZW5fc3RhdGljX2Z1bmNzKSk7CgogIGpzX3NldF9pbnNwZWN0X21ldGhvZChjdHgsIHRva2VuX3Byb3RvLCBqc190b2tlbl9pbnNwZWN0KTsKCiAgSlNfTmV3Q2xhc3NJRCgmanNfbGV4ZXJfY2xhc3NfaWQpOwogIEpTX05ld0NsYXNzKEpTX0dldFJ1bnRpbWUoY3R4KSwganNfbGV4ZXJfY2xhc3NfaWQsICZqc19sZXhlcl9jbGFzcyk7CgogIGxleGVyX3Byb3RvID0gSlNfTmV3T2JqZWN0KGN0eCk7CiAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LCBsZXhlcl9wcm90bywganNfbGV4ZXJfcHJvdG9fZnVuY3MsIGNvdW50b2YoanNfbGV4ZXJfcHJvdG9fZnVuY3MpKTsKICBKU19TZXRDbGFzc1Byb3RvKGN0eCwganNfbGV4ZXJfY2xhc3NfaWQsIGxleGVyX3Byb3RvKTsKCiAganNfc2V0X2luc3BlY3RfbWV0aG9kKGN0eCwgbGV4ZXJfcHJvdG8sIGpzX2xleGVyX2luc3BlY3QpOwoKICBsZXhlcl9jdG9yID0gSlNfTmV3Q0Z1bmN0aW9uMihjdHgsIGpzX2xleGVyX2NvbnN0cnVjdG9yLCAiTGV4ZXIiLCAxLCBKU19DRlVOQ19jb25zdHJ1Y3RvciwgMCk7CgogIEpTX1NldENvbnN0cnVjdG9yKGN0eCwgbGV4ZXJfY3RvciwgbGV4ZXJfcHJvdG8pOwogIEpTX1NldFByb3BlcnR5RnVuY3Rpb25MaXN0KGN0eCwgbGV4ZXJfY3RvciwganNfbGV4ZXJfc3RhdGljX2Z1bmNzLCBjb3VudG9mKGpzX2xleGVyX3N0YXRpY19mdW5jcykpOwoKICBpZihtKSB7CiAgICBKU19TZXRNb2R1bGVFeHBvcnQoY3R4LCBtLCAiVG9rZW4iLCB0b2tlbl9jdG9yKTsKICAgIEpTX1NldE1vZHVsZUV4cG9ydChjdHgsIG0sICJMZXhlciIsIGxleGVyX2N0b3IpOwogIH0KCiAgcmV0dXJuIDA7Cn0KCiNpZmRlZiBKU19TSEFSRURfTElCUkFSWQojZGVmaW5lIEpTX0lOSVRfTU9EVUxFIGpzX2luaXRfbW9kdWxlCiNlbHNlCiNkZWZpbmUgSlNfSU5JVF9NT0RVTEUganNfaW5pdF9tb2R1bGVfbGV4ZXIKI2VuZGlmCgpWSVNJQkxFIEpTTW9kdWxlRGVmKgpKU19JTklUX01PRFVMRShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlX25hbWUpIHsKICBKU01vZHVsZURlZiogbTsKICBpZighKG0gPSBKU19OZXdDTW9kdWxlKGN0eCwgbW9kdWxlX25hbWUsICZqc19sZXhlcl9pbml0KSkpCiAgICByZXR1cm4gbTsKCiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkxvY2F0aW9uIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIlRva2VuIik7CiAgSlNfQWRkTW9kdWxlRXhwb3J0KGN0eCwgbSwgIkxleGVyIik7CiAgcmV0dXJuIG07Cn0KCi8qKgogKiBAfQogKi8KAAAAAAAAAAB9owAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANI4AAAAAAAA0jgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "token.c",
			"settings":
			{
				"buffer_size": 953,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": "g"
					},
					"AgAAAIYCAAAAAAAAhwIAAAAAAAAAAAAAhwIAAAAAAACHAgAAAAAAAAgAAABMb2NhdGlvbg",
					"AQAAAAAAAAABAAAAhgIAAAAAAACOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACyAwAAI2luY2x1ZGUgImxleGVyLmgiCiNpbmNsdWRlICJkZWJ1Zy5oIgojaW5jbHVkZSAidG9rZW4uaCIKClRva2VuKgp0b2tlbl9uZXcoSlNDb250ZXh0KiBjdHgpIHsKICBUb2tlbiogdG9rOwoKICBpZigodG9rID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihUb2tlbikpKSkgewogICAgdG9rLT5yZWZfY291bnQgPSAxOwogIH0KCiAgcmV0dXJuIHRvazsKfQoKQk9PTAp0b2tlbl9yZWxlYXNlX3J0KFRva2VuKiB0b2ssIEpTUnVudGltZSogcnQpIHsKICBpZigtLXRvay0+cmVmX2NvdW50ID09IDApIHsKICAgIGxvY2F0aW9uX3JlbGVhc2VfcnQodG9rLT5sb2MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHRvay0+bGV4ZW1lKTsKICAgIHRvay0+bGV4ZW1lID0gMDsKICAgIHJldHVybiBUUlVFOwogIH0KICAvLyBwcmludGYoInRva2VuX3JlbGVhc2VfcnQgJXAgcmVmX2NvdW50PSVkXG4iLCB0b2ssIHRvay0+cmVmX2NvdW50KTsKICByZXR1cm4gRkFMU0U7Cn0KCnZvaWQKdG9rZW5fZnJlZV9ydChUb2tlbiogdG9rLCBKU1J1bnRpbWUqIHJ0KSB7CiAgdG9rZW5fcmVsZWFzZV9ydCh0b2ssIHJ0KTsKICBpZih0b2stPnJlZl9jb3VudCA9PSAwKQogICAganNfZnJlZV9ydChydCwgdG9rKTsKfQoKVG9rZW4qCnRva2VuX2NyZWF0ZShpbnQgaWQsIGcqIGxvYywgY29uc3QgY2hhciogbGV4ZW1lLCBzaXplX3QgbGVuLCBKU0NvbnRleHQqIGN0eCkgewogIFRva2VuKiB0b2s7CgogIGlmKCh0b2sgPSB0b2tlbl9uZXcoY3R4KSkpIHsKICAgIHRvay0+aWQgPSBpZDsKICAgIHRvay0+bG9jID0gbG9jOwoKICAgIHRvay0+Ynl0ZV9sZW5ndGggPSBsZW47CgogICAgdG9rLT5sZXhlbWUgPSAodWludDhfdCopanNfc3RybmR1cChjdHgsIGxleGVtZSwgbGVuKTsKICAgIHRvay0+Y2hhcl9sZW5ndGggPSB1dGY4X3N0cmxlbihsZXhlbWUsIGxlbik7CiAgfQoKICByZXR1cm4gdG9rOwp9CgAAAAAAAAAAuQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AIAAAAAAAD+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC5AwAAI2luY2x1ZGUgImxleGVyLmgiCiNpbmNsdWRlICJkZWJ1Zy5oIgojaW5jbHVkZSAidG9rZW4uaCIKClRva2VuKgp0b2tlbl9uZXcoSlNDb250ZXh0KiBjdHgpIHsKICBUb2tlbiogdG9rOwoKICBpZigodG9rID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihUb2tlbikpKSkgewogICAgdG9rLT5yZWZfY291bnQgPSAxOwogIH0KCiAgcmV0dXJuIHRvazsKfQoKQk9PTAp0b2tlbl9yZWxlYXNlX3J0KFRva2VuKiB0b2ssIEpTUnVudGltZSogcnQpIHsKICBpZigtLXRvay0+cmVmX2NvdW50ID09IDApIHsKICAgIGxvY2F0aW9uX3JlbGVhc2VfcnQodG9rLT5sb2MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHRvay0+bGV4ZW1lKTsKICAgIHRvay0+bGV4ZW1lID0gMDsKICAgIHJldHVybiBUUlVFOwogIH0KICAvLyBwcmludGYoInRva2VuX3JlbGVhc2VfcnQgJXAgcmVmX2NvdW50PSVkXG4iLCB0b2ssIHRvay0+cmVmX2NvdW50KTsKICByZXR1cm4gRkFMU0U7Cn0KCnZvaWQKdG9rZW5fZnJlZV9ydChUb2tlbiogdG9rLCBKU1J1bnRpbWUqIHJ0KSB7CiAgdG9rZW5fcmVsZWFzZV9ydCh0b2ssIHJ0KTsKICBpZih0b2stPnJlZl9jb3VudCA9PSAwKQogICAganNfZnJlZV9ydChydCwgdG9rKTsKfQoKVG9rZW4qCnRva2VuX2NyZWF0ZShpbnQgaWQsIExvY2F0aW9uKiBsb2MsIGNvbnN0IGNoYXIqIGxleGVtZSwgc2l6ZV90IGxlbiwgSlNDb250ZXh0KiBjdHgpIHsKICBUb2tlbiogdG9rOwoKICBpZigodG9rID0gdG9rZW5fbmV3KGN0eCkpKSB7CiAgICB0b2stPmlkID0gaWQ7CiAgICB0b2stPmxvYyA9IGxvYzsKCiAgICB0b2stPmJ5dGVfbGVuZ3RoID0gbGVuOwoKICAgIHRvay0+bGV4ZW1lID0gKHVpbnQ4X3QqKWpzX3N0cm5kdXAoY3R4LCBsZXhlbWUsIGxlbik7CiAgICB0b2stPmNoYXJfbGVuZ3RoID0gdXRmOF9zdHJsZW4obGV4ZW1lLCBsZW4pOwogIH0KCiAgcmV0dXJuIHRvazsKfQoAAAAAAAAAALkDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AIAAAAAAAD+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC5AwAAI2luY2x1ZGUgImxleGVyLmgiCiNpbmNsdWRlICJkZWJ1Zy5oIgojaW5jbHVkZSAidG9rZW4uaCIKClRva2VuKgp0b2tlbl9uZXcoSlNDb250ZXh0KiBjdHgpIHsKICBUb2tlbiogdG9rOwoKICBpZigodG9rID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihUb2tlbikpKSkgewogICAgdG9rLT5yZWZfY291bnQgPSAxOwogIH0KCiAgcmV0dXJuIHRvazsKfQoKQk9PTAp0b2tlbl9yZWxlYXNlX3J0KFRva2VuKiB0b2ssIEpTUnVudGltZSogcnQpIHsKICBpZigtLXRvay0+cmVmX2NvdW50ID09IDApIHsKICAgIGxvY2F0aW9uX3JlbGVhc2VfcnQodG9rLT5sb2MsIHJ0KTsKICAgIGpzX2ZyZWVfcnQocnQsIHRvay0+bGV4ZW1lKTsKICAgIHRvay0+bGV4ZW1lID0gMDsKICAgIHJldHVybiBUUlVFOwogIH0KICAvLyBwcmludGYoInRva2VuX3JlbGVhc2VfcnQgJXAgcmVmX2NvdW50PSVkXG4iLCB0b2ssIHRvay0+cmVmX2NvdW50KTsKICByZXR1cm4gRkFMU0U7Cn0KCnZvaWQKdG9rZW5fZnJlZV9ydChUb2tlbiogdG9rLCBKU1J1bnRpbWUqIHJ0KSB7CiAgdG9rZW5fcmVsZWFzZV9ydCh0b2ssIHJ0KTsKICBpZih0b2stPnJlZl9jb3VudCA9PSAwKQogICAganNfZnJlZV9ydChydCwgdG9rKTsKfQoKVG9rZW4qCnRva2VuX2NyZWF0ZShpbnQgaWQsIExvY2F0aW9uKiBsb2MsIGNvbnN0IGNoYXIqIGxleGVtZSwgc2l6ZV90IGxlbiwgSlNDb250ZXh0KiBjdHgpIHsKICBUb2tlbiogdG9rOwoKICBpZigodG9rID0gdG9rZW5fbmV3KGN0eCkpKSB7CiAgICB0b2stPmlkID0gaWQ7CiAgICB0b2stPmxvYyA9IGxvYzsKCiAgICB0b2stPmJ5dGVfbGVuZ3RoID0gbGVuOwoKICAgIHRvay0+bGV4ZW1lID0gKHVpbnQ4X3QqKWpzX3N0cm5kdXAoY3R4LCBsZXhlbWUsIGxlbik7CiAgICB0b2stPmNoYXJfbGVuZ3RoID0gdXRmOF9zdHJsZW4obGV4ZW1lLCBsZW4pOwogIH0KCiAgcmV0dXJuIHRvazsKfQoAAAAAAAAAALkDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AIAAAAAAAD+AgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "token.h",
			"settings":
			{
				"buffer_size": 1248,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					39,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADgBAAAI2lmbmRlZiBUT0tFTl9ICiNkZWZpbmUgVE9LRU5fSAoKI2luY2x1ZGUgPHF1aWNranMuaD4KCnN0cnVjdCBsZXhpY2FsX3NjYW5uZXI7CgovKioKICogXGRlZmdyb3VwIHRva2VuCiAqIEB7CiAqLwp0eXBlZGVmIHN0cnVjdCB7CiAgaW50IHJlZl9jb3VudCwgaWQ7CiAgdWludDhfdCogbGV4ZW1lOwogIHVpbnQzMl90IGJ5dGVfbGVuZ3RoLCBjaGFyX2xlbmd0aDsKICBzdHJ1Y3QgbGV4aWNhbF9zY2FubmVyKiBsZXhlcjsKICBMb2NhdGlvbiogbG9jOwogIHVpbnQ2NF90IHNlcTsKfSBUb2tlbjsKClRva2VuKiB0b2tlbl9uZXcoSlNDb250ZXh0Kik7ClRva2VuKiB0b2tlbl9jcmVhdGUoaW50LCBMb2NhdGlvbiosIGNvbnN0IGNoYXIqLCBzaXplX3QgbGVuLCBKU0NvbnRleHQqIGN0eCk7CkJPT0wgdG9rZW5fcmVsZWFzZV9ydChUb2tlbiosIEpTUnVudGltZSopOwp2b2lkIHRva2VuX2ZyZWVfcnQoVG9rZW4qLCBKU1J1bnRpbWUqKTsKCnN0YXRpYyBpbmxpbmUgQk9PTAp0b2tlbl9yZWxlYXNlKFRva2VuKiB0b2ssIEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIHRva2VuX3JlbGVhc2VfcnQodG9rLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQKdG9rZW5fZnJlZShUb2tlbiogdG9rLCBKU0NvbnRleHQqIGN0eCkgewogIHRva2VuX2ZyZWVfcnQodG9rLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9CgpzdGF0aWMgaW5saW5lIExvY2F0aW9uKgp0b2tlbl9zZXRfbG9jYXRpb24oVG9rZW4qIHRvaywgTG9jYXRpb24qIGxvYykgewogIHJldHVybiB0b2stPmxvYyA9IGxvY2F0aW9uX2R1cChsb2MpOwp9CgpzdGF0aWMgaW5saW5lIE9mZnNldExlbmd0aAp0b2tlbl9jaGFyX3JhbmdlKFRva2VuKiB0b2spIHsKICBPZmZzZXRMZW5ndGggcmV0ID0ge3Rvay0+bG9jID8gdG9rLT5sb2MtPmNoYXJfb2Zmc2V0IDogLTEsIHRvay0+Y2hhcl9sZW5ndGh9OwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgT2Zmc2V0TGVuZ3RoCnRva2VuX2J5dGVfcmFuZ2UoVG9rZW4qIHRvaykgewogIE9mZnNldExlbmd0aCByZXQgPSB7dG9rLT5sb2MgPyB0b2stPmxvYy0+Ynl0ZV9vZmZzZXQgOiAtMSwgdG9rLT5ieXRlX2xlbmd0aH07CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIGlubGluZSBUb2tlbioKdG9rZW5fZHVwKFRva2VuKiB0b2spIHsKICArK3Rvay0+cmVmX2NvdW50OwogIHJldHVybiB0b2s7Cn0KLyoqCiAqIEB9CiAqLwoKI2VuZGlmIC8qIGRlZmluZWQoVE9LRU5fSCkgKi8KAAAAAAAAAADgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAEAAAAAAABAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADgBAAAI2lmbmRlZiBUT0tFTl9ICiNkZWZpbmUgVE9LRU5fSAoKI2luY2x1ZGUgPHF1aWNranMuaD4KCnN0cnVjdCBsZXhpY2FsX3NjYW5uZXI7CgovKioKICogXGRlZmdyb3VwIHRva2VuCiAqIEB7CiAqLwp0eXBlZGVmIHN0cnVjdCB7CiAgaW50IHJlZl9jb3VudCwgaWQ7CiAgdWludDhfdCogbGV4ZW1lOwogIHVpbnQzMl90IGJ5dGVfbGVuZ3RoLCBjaGFyX2xlbmd0aDsKICBzdHJ1Y3QgbGV4aWNhbF9zY2FubmVyKiBsZXhlcjsKICBMb2NhdGlvbiogbG9jOwogIHVpbnQ2NF90IHNlcTsKfSBUb2tlbjsKClRva2VuKiB0b2tlbl9uZXcoSlNDb250ZXh0Kik7ClRva2VuKiB0b2tlbl9jcmVhdGUoaW50LCBMb2NhdGlvbiosIGNvbnN0IGNoYXIqLCBzaXplX3QgbGVuLCBKU0NvbnRleHQqIGN0eCk7CkJPT0wgdG9rZW5fcmVsZWFzZV9ydChUb2tlbiosIEpTUnVudGltZSopOwp2b2lkIHRva2VuX2ZyZWVfcnQoVG9rZW4qLCBKU1J1bnRpbWUqKTsKCnN0YXRpYyBpbmxpbmUgQk9PTAp0b2tlbl9yZWxlYXNlKFRva2VuKiB0b2ssIEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIHRva2VuX3JlbGVhc2VfcnQodG9rLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQKdG9rZW5fZnJlZShUb2tlbiogdG9rLCBKU0NvbnRleHQqIGN0eCkgewogIHRva2VuX2ZyZWVfcnQodG9rLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9CgpzdGF0aWMgaW5saW5lIExvY2F0aW9uKgp0b2tlbl9zZXRfbG9jYXRpb24oVG9rZW4qIHRvaywgTG9jYXRpb24qIGxvYykgewogIHJldHVybiB0b2stPmxvYyA9IGxvY2F0aW9uX2R1cChsb2MpOwp9CgpzdGF0aWMgaW5saW5lIE9mZnNldExlbmd0aAp0b2tlbl9jaGFyX3JhbmdlKFRva2VuKiB0b2spIHsKICBPZmZzZXRMZW5ndGggcmV0ID0ge3Rvay0+bG9jID8gdG9rLT5sb2MtPmNoYXJfb2Zmc2V0IDogLTEsIHRvay0+Y2hhcl9sZW5ndGh9OwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgT2Zmc2V0TGVuZ3RoCnRva2VuX2J5dGVfcmFuZ2UoVG9rZW4qIHRvaykgewogIE9mZnNldExlbmd0aCByZXQgPSB7dG9rLT5sb2MgPyB0b2stPmxvYy0+Ynl0ZV9vZmZzZXQgOiAtMSwgdG9rLT5ieXRlX2xlbmd0aH07CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIGlubGluZSBUb2tlbioKdG9rZW5fZHVwKFRva2VuKiB0b2spIHsKICArK3Rvay0+cmVmX2NvdW50OwogIHJldHVybiB0b2s7Cn0KLyoqCiAqIEB9CiAqLwoKI2VuZGlmIC8qIGRlZmluZWQoVE9LRU5fSCkgKi8KAAAAAAAAAADgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAEAAAAAAABAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADgBAAAI2lmbmRlZiBUT0tFTl9ICiNkZWZpbmUgVE9LRU5fSAoKI2luY2x1ZGUgPHF1aWNranMuaD4KCnN0cnVjdCBsZXhpY2FsX3NjYW5uZXI7CgovKioKICogXGRlZmdyb3VwIHRva2VuCiAqIEB7CiAqLwp0eXBlZGVmIHN0cnVjdCB7CiAgaW50IHJlZl9jb3VudCwgaWQ7CiAgdWludDhfdCogbGV4ZW1lOwogIHVpbnQzMl90IGJ5dGVfbGVuZ3RoLCBjaGFyX2xlbmd0aDsKICBzdHJ1Y3QgbGV4aWNhbF9zY2FubmVyKiBsZXhlcjsKICBMb2NhdGlvbiogbG9jOwogIHVpbnQ2NF90IHNlcTsKfSBUb2tlbjsKClRva2VuKiB0b2tlbl9uZXcoSlNDb250ZXh0Kik7ClRva2VuKiB0b2tlbl9jcmVhdGUoaW50LCBMb2NhdGlvbiosIGNvbnN0IGNoYXIqLCBzaXplX3QgbGVuLCBKU0NvbnRleHQqIGN0eCk7CkJPT0wgdG9rZW5fcmVsZWFzZV9ydChUb2tlbiosIEpTUnVudGltZSopOwp2b2lkIHRva2VuX2ZyZWVfcnQoVG9rZW4qLCBKU1J1bnRpbWUqKTsKCnN0YXRpYyBpbmxpbmUgQk9PTAp0b2tlbl9yZWxlYXNlKFRva2VuKiB0b2ssIEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIHRva2VuX3JlbGVhc2VfcnQodG9rLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQKdG9rZW5fZnJlZShUb2tlbiogdG9rLCBKU0NvbnRleHQqIGN0eCkgewogIHRva2VuX2ZyZWVfcnQodG9rLCBKU19HZXRSdW50aW1lKGN0eCkpOwp9CgpzdGF0aWMgaW5saW5lIExvY2F0aW9uKgp0b2tlbl9zZXRfbG9jYXRpb24oVG9rZW4qIHRvaywgTG9jYXRpb24qIGxvYykgewogIHJldHVybiB0b2stPmxvYyA9IGxvY2F0aW9uX2R1cChsb2MpOwp9CgpzdGF0aWMgaW5saW5lIE9mZnNldExlbmd0aAp0b2tlbl9jaGFyX3JhbmdlKFRva2VuKiB0b2spIHsKICBPZmZzZXRMZW5ndGggcmV0ID0ge3Rvay0+bG9jID8gdG9rLT5sb2MtPmNoYXJfb2Zmc2V0IDogLTEsIHRvay0+Y2hhcl9sZW5ndGh9OwogIHJldHVybiByZXQ7Cn0KCnN0YXRpYyBpbmxpbmUgT2Zmc2V0TGVuZ3RoCnRva2VuX2J5dGVfcmFuZ2UoVG9rZW4qIHRvaykgewogIE9mZnNldExlbmd0aCByZXQgPSB7dG9rLT5sb2MgPyB0b2stPmxvYy0+Ynl0ZV9vZmZzZXQgOiAtMSwgdG9rLT5ieXRlX2xlbmd0aH07CiAgcmV0dXJuIHJldDsKfQoKc3RhdGljIGlubGluZSBUb2tlbioKdG9rZW5fZHVwKFRva2VuKiB0b2spIHsKICArK3Rvay0+cmVmX2NvdW50OwogIHJldHVybiB0b2s7Cn0KLyoqCiAqIEB9CiAqLwoKI2VuZGlmIC8qIGRlZmluZWQoVE9LRU5fSCkgKi8KAAAAAAAAAADgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAEAAAAAAABAAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lexer.h",
			"settings":
			{
				"buffer_size": 3114,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					36,
					1,
					"cut",
					null,
					"AQAAAL4CAAAAAAAAvgIAAAAAAAAlAAAAICBMb2NhdGlvbiBsb2M7CiAgSW5wdXRCdWZmZXIgaW5wdXQ7Cg",
					"AQAAAAAAAAABAAAAvgIAAAAAAADjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"paste",
					null,
					"AQAAAFgCAAAAAAAAfQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAIAAAAAAABYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAXDAAAI2lmbmRlZiBMRVhFUl9ICiNkZWZpbmUgTEVYRVJfSAoKI2luY2x1ZGUgImxvY2F0aW9uLmgiCiNpbmNsdWRlICJ2ZWN0b3IuaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSA8c3RyaW5nLmg+CgovKioKICogXGRlZmdyb3VwIGxleGVyIExleGljYWwgc2Nhbm5lciwgcmVnZXggYmFzZWQKICogQHsKICovCnR5cGVkZWYgc3RydWN0IGxleGljYWxfcnVsZSB7CiAgY2hhciogbmFtZTsKICBjaGFyKiBleHByOwogIHVpbnQ2NF90IG1hc2s7CiAgdWludDhfdCogYnl0ZWNvZGU7CiAgdm9pZCogb3BhcXVlOwogIGNoYXIqIGV4cGFuc2lvbjsKfSBMZXhlclJ1bGU7CgpzdGF0aWMgY29uc3QgdWludDY0X3QgTUFTS19BTEwgPSB+KHVpbnQ2NF90KTA7CgplbnVtIGxleGVyX21vZGUgewogIExFWEVSX0ZJUlNUID0gMCwKICBMRVhFUl9MQVNUID0gMSwKICBMRVhFUl9MT05HRVNUID0gMiwKfTsKCmVudW0gewogIExFWEVSX0VPRiA9IC0xLAogIExFWEVSX0VSUk9SX05PTUFUQ0ggPSAtMiwKICBMRVhFUl9FUlJPUl9DT01QSUxFID0gLTMsCiAgTEVYRVJfRVJST1JfRVhFQyA9IC00LAp9OwoKdHlwZWRlZiBzdHJ1Y3QgbGV4aWNhbF9zY2FubmVyIHsKICBMb2NhdGlvbiBsb2M7CiAgSW5wdXRCdWZmZXIgaW5wdXQ7CiAgaW50IHJlZl9jb3VudDsKICBlbnVtIGxleGVyX21vZGUgbW9kZTsKICBzaXplX3QgLypzdGFydCwgKi8gYnl0ZV9sZW5ndGg7CiAgaW50MzJfdCB0b2tlbl9pZCwgc3RhdGU7CiAgVmVjdG9yIGRlZmluZXM7CiAgVmVjdG9yIHJ1bGVzOwogIFZlY3RvciBzdGF0ZXM7CiAgVmVjdG9yIHN0YXRlX3N0YWNrOwogIHVpbnQ2NF90IHNlcTsKfSBMZXhlcjsKCmludCBsZXhlcl9zdGF0ZV9maW5kYihMZXhlciosIGNvbnN0IGNoYXIqLCBzaXplX3Qgc2xlbik7CmludCBsZXhlcl9zdGF0ZV9uZXcoTGV4ZXIqLCBjb25zdCBjaGFyKiwgc2l6ZV90IGxlbik7CmludCBsZXhlcl9zdGF0ZV9wdXNoKExleGVyKiwgY29uc3QgY2hhciopOwppbnQgbGV4ZXJfc3RhdGVfcG9wKExleGVyKik7CmludCBsZXhlcl9zdGF0ZV90b3AoTGV4ZXIqLCBpbnQpOwpjaGFyKiBsZXhlcl9zdGF0ZXNfc2tpcChjaGFyKik7CnZvaWQgbGV4ZXJfc3RhdGVzX2R1bXAoTGV4ZXIqLCB1aW50NjRfdCwgRHluQnVmKiBkYnVmKTsKY2hhciogbGV4ZXJfcnVsZV9yZWdleChMZXhlclJ1bGUqKTsKQk9PTCBsZXhlcl9ydWxlX2V4cGFuZChMZXhlciosIGNoYXIqLCBEeW5CdWYqIGRiKTsKaW50IGxleGVyX3J1bGVfYWRkKExleGVyKiwgY2hhciosIGNoYXIqIGV4cHIpOwpMZXhlclJ1bGUqIGxleGVyX3J1bGVfZmluZChMZXhlciosIGNvbnN0IGNoYXIqKTsKdm9pZCBsZXhlcl9ydWxlX2ZyZWUoTGV4ZXJSdWxlKiwgSlNDb250ZXh0Kik7CnZvaWQgbGV4ZXJfcnVsZV9mcmVlX3J0KExleGVyUnVsZSosIEpTUnVudGltZSopOwp2b2lkIGxleGVyX3J1bGVfZHVtcChMZXhlciosIExleGVyUnVsZSosIER5bkJ1ZiogZGJ1Zik7CnZvaWQgbGV4ZXJfaW5pdChMZXhlciosIGVudW0gbGV4ZXJfbW9kZSwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGxleGVyX3NldF9pbnB1dChMZXhlciosIElucHV0QnVmZmVyLCBpbnQzMl90IGZpbGVfYXRvbSk7CnZvaWQgbGV4ZXJfZGVmaW5lKExleGVyKiwgY2hhciosIGNoYXIqIGV4cHIpOwpMZXhlclJ1bGUqIGxleGVyX2ZpbmRfZGVmaW5pdGlvbihMZXhlciosIGNvbnN0IGNoYXIqLCBzaXplX3QgbmFtZWxlbik7CkJPT0wgbGV4ZXJfY29tcGlsZV9ydWxlcyhMZXhlciosIEpTQ29udGV4dCopOwppbnQgbGV4ZXJfcGVlayhMZXhlciosIHVpbnQ2NF90LCBKU0NvbnRleHQqIGN0eCk7CnNpemVfdCBsZXhlcl9za2lwKExleGVyKik7CnNpemVfdCBsZXhlcl9jaGFybGVuKExleGVyKik7CmNoYXIqIGxleGVyX2xleGVtZShMZXhlciosIHNpemVfdCopOwppbnQgbGV4ZXJfbmV4dChMZXhlciosIHVpbnQ2NF90LCBKU0NvbnRleHQqIGN0eCk7CnZvaWQgbGV4ZXJfc2V0X2xvY2F0aW9uKExleGVyKiwgY29uc3QgTG9jYXRpb24qLCBKU0NvbnRleHQqIGN0eCk7CnZvaWQgbGV4ZXJfcmVsZWFzZShMZXhlciosIEpTQ29udGV4dCopOwp2b2lkIGxleGVyX2ZyZWUoTGV4ZXIqLCBKU0NvbnRleHQqKTsKdm9pZCBsZXhlcl9yZWxlYXNlX3J0KExleGVyKiwgSlNSdW50aW1lKik7CnZvaWQgbGV4ZXJfZnJlZV9ydChMZXhlciosIEpTUnVudGltZSopOwoKdm9pZCBsZXhlcl9kdW1wKExleGVyKiwgRHluQnVmKik7CgpzdGF0aWMgaW5saW5lIExleGVyKgpsZXhlcl9kdXAoTGV4ZXIqIGxleCkgewogICsrbGV4LT5yZWZfY291bnQ7CiAgcmV0dXJuIGxleDsKfQoKc3RhdGljIGlubGluZSBMZXhlclJ1bGUqCmxleGVyX3J1bGVfYXQoTGV4ZXIqIGxleCwgaW50IGlkKSB7CiAgcmV0dXJuIHZlY3Rvcl9hdCgmbGV4LT5ydWxlcywgc2l6ZW9mKExleGVyUnVsZSksIGlkKTsKfQoKc3RhdGljIGlubGluZSBpbnQKbGV4ZXJfc3RhdGVfZmluZChMZXhlciogbGV4LCBjb25zdCBjaGFyKiBzdGF0ZSkgewogIHJldHVybiBsZXhlcl9zdGF0ZV9maW5kYihsZXgsIHN0YXRlLCBzdHJsZW4oc3RhdGUpKTsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKbGV4ZXJfc3RhdGVfZGVwdGgoTGV4ZXIqIGxleCkgewogIHJldHVybiB2ZWN0b3Jfc2l6ZSgmbGV4LT5zdGF0ZV9zdGFjaywgc2l6ZW9mKGludDMyX3QpKTsKfQoKc3RhdGljIGlubGluZSBjaGFyKgpsZXhlcl9zdGF0ZV9uYW1lKExleGVyKiBsZXgsIGludCBzdGF0ZSkgewogIGNoYXIqKiBuYW1lX3A7CgogIG5hbWVfcCA9IHZlY3Rvcl9hdCgmbGV4LT5zdGF0ZXMsIHNpemVvZihjaGFyKiksIHN0YXRlKTsKCiAgcmV0dXJuIG5hbWVfcCA/ICpuYW1lX3AgOiAwOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApsZXhlcl9udW1fc3RhdGVzKExleGVyKiBsZXgpIHsKICByZXR1cm4gdmVjdG9yX3NpemUoJmxleC0+c3RhdGVzLCBzaXplb2YoY2hhciopKTsKfQoKc3RhdGljIGlubGluZSBjaGFyKgpsZXhlcl9zdGF0ZV90b3BuYW1lKExleGVyKiBsZXgpIHsKICByZXR1cm4gbGV4ZXJfc3RhdGVfbmFtZShsZXgsIGxleGVyX3N0YXRlX3RvcChsZXgsIDApKTsKfQoKLyoqCiAqIEB9CiAqLwojZW5kaWYgLyogZGVmaW5lZChMRVhFUl9IKSAqLwoAAAAAAAAAABcMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQIAAAAAAAB9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"cut",
					null,
					"AQAAAH0CAAAAAAAAfQIAAAAAAAAQAAAAICBpbnQgcmVmX2NvdW50Ow",
					"AQAAAAAAAAABAAAAfQIAAAAAAACNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"paste",
					null,
					"AQAAAFgCAAAAAAAAaAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAIAAAAAAABYAgAAAAAAAAAAAAAAAAAA"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGgCAAAAAAAAaQIAAAAAAAAAAAAAaQIAAAAAAABrAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAIAAAAAAABoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFoCAAAAAAAAWwIAAAAAAAAAAAAAWwIAAAAAAABdAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgIAAAAAAABaAgAAAAAAAAAAAAAAADJA"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "union"
					},
					"BQAAAFoCAAAAAAAAWwIAAAAAAAAAAAAAWwIAAAAAAABcAgAAAAAAAAAAAABcAgAAAAAAAF0CAAAAAAAAAAAAAF0CAAAAAAAAXgIAAAAAAAAAAAAAXgIAAAAAAABfAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgIAAAAAAABaAgAAAAAAAAAAAAAAADJA"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8CAAAAAAAAYAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwIAAAAAAABfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGACAAAAAAAAYgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAIAAAAAAABgAgAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"right_delete",
					null,
					"AQAAAGECAAAAAAAAYQIAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAYQIAAAAAAABhAgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": "\n};"
					},
					"BgAAAIQCAAAAAAAAhQIAAAAAAAAAAAAAhQIAAAAAAACJAgAAAAAAAAAAAACJAgAAAAAAAIoCAAAAAAAAAAAAAIUCAAAAAAAAhQIAAAAAAAAEAAAAICAgIIUCAAAAAAAAhwIAAAAAAAAAAAAAiAIAAAAAAACJAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAIAAAAAAACEAgAAAAAAAP///////+9/"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAJ4CAAAAAAAAngIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAnwIAAAAAAACfAgAAAAAAAAAAAAAAADJA"
				],
				[
					74,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAoDAAAI2lmbmRlZiBMRVhFUl9ICiNkZWZpbmUgTEVYRVJfSAoKI2luY2x1ZGUgImxvY2F0aW9uLmgiCiNpbmNsdWRlICJ2ZWN0b3IuaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSA8c3RyaW5nLmg+CgovKioKICogXGRlZmdyb3VwIGxleGVyIExleGljYWwgc2Nhbm5lciwgcmVnZXggYmFzZWQKICogQHsKICovCnR5cGVkZWYgc3RydWN0IGxleGljYWxfcnVsZSB7CiAgY2hhciogbmFtZTsKICBjaGFyKiBleHByOwogIHVpbnQ2NF90IG1hc2s7CiAgdWludDhfdCogYnl0ZWNvZGU7CiAgdm9pZCogb3BhcXVlOwogIGNoYXIqIGV4cGFuc2lvbjsKfSBMZXhlclJ1bGU7CgpzdGF0aWMgY29uc3QgdWludDY0X3QgTUFTS19BTEwgPSB+KHVpbnQ2NF90KTA7CgplbnVtIGxleGVyX21vZGUgewogIExFWEVSX0ZJUlNUID0gMCwKICBMRVhFUl9MQVNUID0gMSwKICBMRVhFUl9MT05HRVNUID0gMiwKfTsKCmVudW0gewogIExFWEVSX0VPRiA9IC0xLAogIExFWEVSX0VSUk9SX05PTUFUQ0ggPSAtMiwKICBMRVhFUl9FUlJPUl9DT01QSUxFID0gLTMsCiAgTEVYRVJfRVJST1JfRVhFQyA9IC00LAp9OwoKdHlwZWRlZiBzdHJ1Y3QgbGV4aWNhbF9zY2FubmVyIHsKICB1bmlvbiB7CiAgaW50IHJlZl9jb3VudDsKICAgIExvY2F0aW9uIGxvYzsKICB9OwogIElucHV0QnVmZmVyIGlucHV0OwogIGVudW0gbGV4ZXJfbW9kZSBtb2RlOwogIHNpemVfdCAvKnN0YXJ0LCAqLyBieXRlX2xlbmd0aDsKICBpbnQzMl90IHRva2VuX2lkLCBzdGF0ZTsKICBWZWN0b3IgZGVmaW5lczsKICBWZWN0b3IgcnVsZXM7CiAgVmVjdG9yIHN0YXRlczsKICBWZWN0b3Igc3RhdGVfc3RhY2s7CiAgdWludDY0X3Qgc2VxOwp9IExleGVyOwoKaW50IGxleGVyX3N0YXRlX2ZpbmRiKExleGVyKiwgY29uc3QgY2hhciosIHNpemVfdCBzbGVuKTsKaW50IGxleGVyX3N0YXRlX25ldyhMZXhlciosIGNvbnN0IGNoYXIqLCBzaXplX3QgbGVuKTsKaW50IGxleGVyX3N0YXRlX3B1c2goTGV4ZXIqLCBjb25zdCBjaGFyKik7CmludCBsZXhlcl9zdGF0ZV9wb3AoTGV4ZXIqKTsKaW50IGxleGVyX3N0YXRlX3RvcChMZXhlciosIGludCk7CmNoYXIqIGxleGVyX3N0YXRlc19za2lwKGNoYXIqKTsKdm9pZCBsZXhlcl9zdGF0ZXNfZHVtcChMZXhlciosIHVpbnQ2NF90LCBEeW5CdWYqIGRidWYpOwpjaGFyKiBsZXhlcl9ydWxlX3JlZ2V4KExleGVyUnVsZSopOwpCT09MIGxleGVyX3J1bGVfZXhwYW5kKExleGVyKiwgY2hhciosIER5bkJ1ZiogZGIpOwppbnQgbGV4ZXJfcnVsZV9hZGQoTGV4ZXIqLCBjaGFyKiwgY2hhciogZXhwcik7CkxleGVyUnVsZSogbGV4ZXJfcnVsZV9maW5kKExleGVyKiwgY29uc3QgY2hhciopOwp2b2lkIGxleGVyX3J1bGVfZnJlZShMZXhlclJ1bGUqLCBKU0NvbnRleHQqKTsKdm9pZCBsZXhlcl9ydWxlX2ZyZWVfcnQoTGV4ZXJSdWxlKiwgSlNSdW50aW1lKik7CnZvaWQgbGV4ZXJfcnVsZV9kdW1wKExleGVyKiwgTGV4ZXJSdWxlKiwgRHluQnVmKiBkYnVmKTsKdm9pZCBsZXhlcl9pbml0KExleGVyKiwgZW51bSBsZXhlcl9tb2RlLCBKU0NvbnRleHQqIGN0eCk7CnZvaWQgbGV4ZXJfc2V0X2lucHV0KExleGVyKiwgSW5wdXRCdWZmZXIsIGludDMyX3QgZmlsZV9hdG9tKTsKdm9pZCBsZXhlcl9kZWZpbmUoTGV4ZXIqLCBjaGFyKiwgY2hhciogZXhwcik7CkxleGVyUnVsZSogbGV4ZXJfZmluZF9kZWZpbml0aW9uKExleGVyKiwgY29uc3QgY2hhciosIHNpemVfdCBuYW1lbGVuKTsKQk9PTCBsZXhlcl9jb21waWxlX3J1bGVzKExleGVyKiwgSlNDb250ZXh0Kik7CmludCBsZXhlcl9wZWVrKExleGVyKiwgdWludDY0X3QsIEpTQ29udGV4dCogY3R4KTsKc2l6ZV90IGxleGVyX3NraXAoTGV4ZXIqKTsKc2l6ZV90IGxleGVyX2NoYXJsZW4oTGV4ZXIqKTsKY2hhciogbGV4ZXJfbGV4ZW1lKExleGVyKiwgc2l6ZV90Kik7CmludCBsZXhlcl9uZXh0KExleGVyKiwgdWludDY0X3QsIEpTQ29udGV4dCogY3R4KTsKdm9pZCBsZXhlcl9zZXRfbG9jYXRpb24oTGV4ZXIqLCBjb25zdCBMb2NhdGlvbiosIEpTQ29udGV4dCogY3R4KTsKdm9pZCBsZXhlcl9yZWxlYXNlKExleGVyKiwgSlNDb250ZXh0Kik7CnZvaWQgbGV4ZXJfZnJlZShMZXhlciosIEpTQ29udGV4dCopOwp2b2lkIGxleGVyX3JlbGVhc2VfcnQoTGV4ZXIqLCBKU1J1bnRpbWUqKTsKdm9pZCBsZXhlcl9mcmVlX3J0KExleGVyKiwgSlNSdW50aW1lKik7Cgp2b2lkIGxleGVyX2R1bXAoTGV4ZXIqLCBEeW5CdWYqKTsKCnN0YXRpYyBpbmxpbmUgTGV4ZXIqCmxleGVyX2R1cChMZXhlciogbGV4KSB7CiAgKytsZXgtPnJlZl9jb3VudDsKICByZXR1cm4gbGV4Owp9CgpzdGF0aWMgaW5saW5lIExleGVyUnVsZSoKbGV4ZXJfcnVsZV9hdChMZXhlciogbGV4LCBpbnQgaWQpIHsKICByZXR1cm4gdmVjdG9yX2F0KCZsZXgtPnJ1bGVzLCBzaXplb2YoTGV4ZXJSdWxlKSwgaWQpOwp9CgpzdGF0aWMgaW5saW5lIGludApsZXhlcl9zdGF0ZV9maW5kKExleGVyKiBsZXgsIGNvbnN0IGNoYXIqIHN0YXRlKSB7CiAgcmV0dXJuIGxleGVyX3N0YXRlX2ZpbmRiKGxleCwgc3RhdGUsIHN0cmxlbihzdGF0ZSkpOwp9CgpzdGF0aWMgaW5saW5lIHNpemVfdApsZXhlcl9zdGF0ZV9kZXB0aChMZXhlciogbGV4KSB7CiAgcmV0dXJuIHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlX3N0YWNrLCBzaXplb2YoaW50MzJfdCkpOwp9CgpzdGF0aWMgaW5saW5lIGNoYXIqCmxleGVyX3N0YXRlX25hbWUoTGV4ZXIqIGxleCwgaW50IHN0YXRlKSB7CiAgY2hhcioqIG5hbWVfcDsKCiAgbmFtZV9wID0gdmVjdG9yX2F0KCZsZXgtPnN0YXRlcywgc2l6ZW9mKGNoYXIqKSwgc3RhdGUpOwoKICByZXR1cm4gbmFtZV9wID8gKm5hbWVfcCA6IDA7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmxleGVyX251bV9zdGF0ZXMoTGV4ZXIqIGxleCkgewogIHJldHVybiB2ZWN0b3Jfc2l6ZSgmbGV4LT5zdGF0ZXMsIHNpemVvZihjaGFyKikpOwp9CgpzdGF0aWMgaW5saW5lIGNoYXIqCmxleGVyX3N0YXRlX3RvcG5hbWUoTGV4ZXIqIGxleCkgewogIHJldHVybiBsZXhlcl9zdGF0ZV9uYW1lKGxleCwgbGV4ZXJfc3RhdGVfdG9wKGxleCwgMCkpOwp9CgovKioKICogQH0KICovCiNlbmRpZiAvKiBkZWZpbmVkKExFWEVSX0gpICovCgAAAAAAAAAAKgwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngIAAAAAAACeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqDAAAI2lmbmRlZiBMRVhFUl9ICiNkZWZpbmUgTEVYRVJfSAoKI2luY2x1ZGUgImxvY2F0aW9uLmgiCiNpbmNsdWRlICJ2ZWN0b3IuaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSA8c3RyaW5nLmg+CgovKioKICogXGRlZmdyb3VwIGxleGVyIExleGljYWwgc2Nhbm5lciwgcmVnZXggYmFzZWQKICogQHsKICovCnR5cGVkZWYgc3RydWN0IGxleGljYWxfcnVsZSB7CiAgY2hhciogbmFtZTsKICBjaGFyKiBleHByOwogIHVpbnQ2NF90IG1hc2s7CiAgdWludDhfdCogYnl0ZWNvZGU7CiAgdm9pZCogb3BhcXVlOwogIGNoYXIqIGV4cGFuc2lvbjsKfSBMZXhlclJ1bGU7CgpzdGF0aWMgY29uc3QgdWludDY0X3QgTUFTS19BTEwgPSB+KHVpbnQ2NF90KTA7CgplbnVtIGxleGVyX21vZGUgewogIExFWEVSX0ZJUlNUID0gMCwKICBMRVhFUl9MQVNUID0gMSwKICBMRVhFUl9MT05HRVNUID0gMiwKfTsKCmVudW0gewogIExFWEVSX0VPRiA9IC0xLAogIExFWEVSX0VSUk9SX05PTUFUQ0ggPSAtMiwKICBMRVhFUl9FUlJPUl9DT01QSUxFID0gLTMsCiAgTEVYRVJfRVJST1JfRVhFQyA9IC00LAp9OwoKdHlwZWRlZiBzdHJ1Y3QgbGV4aWNhbF9zY2FubmVyIHsKICB1bmlvbiB7CiAgICBpbnQgcmVmX2NvdW50OwogICAgTG9jYXRpb24gbG9jOwogIH07CiAgSW5wdXRCdWZmZXIgaW5wdXQ7CiAgZW51bSBsZXhlcl9tb2RlIG1vZGU7CiAgc2l6ZV90IC8qc3RhcnQsICovIGJ5dGVfbGVuZ3RoOwogIGludDMyX3QgdG9rZW5faWQsIHN0YXRlOwogIFZlY3RvciBkZWZpbmVzOwogIFZlY3RvciBydWxlczsKICBWZWN0b3Igc3RhdGVzOwogIFZlY3RvciBzdGF0ZV9zdGFjazsKICB1aW50NjRfdCBzZXE7Cn0gTGV4ZXI7CgppbnQgbGV4ZXJfc3RhdGVfZmluZGIoTGV4ZXIqLCBjb25zdCBjaGFyKiwgc2l6ZV90IHNsZW4pOwppbnQgbGV4ZXJfc3RhdGVfbmV3KExleGVyKiwgY29uc3QgY2hhciosIHNpemVfdCBsZW4pOwppbnQgbGV4ZXJfc3RhdGVfcHVzaChMZXhlciosIGNvbnN0IGNoYXIqKTsKaW50IGxleGVyX3N0YXRlX3BvcChMZXhlciopOwppbnQgbGV4ZXJfc3RhdGVfdG9wKExleGVyKiwgaW50KTsKY2hhciogbGV4ZXJfc3RhdGVzX3NraXAoY2hhciopOwp2b2lkIGxleGVyX3N0YXRlc19kdW1wKExleGVyKiwgdWludDY0X3QsIER5bkJ1ZiogZGJ1Zik7CmNoYXIqIGxleGVyX3J1bGVfcmVnZXgoTGV4ZXJSdWxlKik7CkJPT0wgbGV4ZXJfcnVsZV9leHBhbmQoTGV4ZXIqLCBjaGFyKiwgRHluQnVmKiBkYik7CmludCBsZXhlcl9ydWxlX2FkZChMZXhlciosIGNoYXIqLCBjaGFyKiBleHByKTsKTGV4ZXJSdWxlKiBsZXhlcl9ydWxlX2ZpbmQoTGV4ZXIqLCBjb25zdCBjaGFyKik7CnZvaWQgbGV4ZXJfcnVsZV9mcmVlKExleGVyUnVsZSosIEpTQ29udGV4dCopOwp2b2lkIGxleGVyX3J1bGVfZnJlZV9ydChMZXhlclJ1bGUqLCBKU1J1bnRpbWUqKTsKdm9pZCBsZXhlcl9ydWxlX2R1bXAoTGV4ZXIqLCBMZXhlclJ1bGUqLCBEeW5CdWYqIGRidWYpOwp2b2lkIGxleGVyX2luaXQoTGV4ZXIqLCBlbnVtIGxleGVyX21vZGUsIEpTQ29udGV4dCogY3R4KTsKdm9pZCBsZXhlcl9zZXRfaW5wdXQoTGV4ZXIqLCBJbnB1dEJ1ZmZlciwgaW50MzJfdCBmaWxlX2F0b20pOwp2b2lkIGxleGVyX2RlZmluZShMZXhlciosIGNoYXIqLCBjaGFyKiBleHByKTsKTGV4ZXJSdWxlKiBsZXhlcl9maW5kX2RlZmluaXRpb24oTGV4ZXIqLCBjb25zdCBjaGFyKiwgc2l6ZV90IG5hbWVsZW4pOwpCT09MIGxleGVyX2NvbXBpbGVfcnVsZXMoTGV4ZXIqLCBKU0NvbnRleHQqKTsKaW50IGxleGVyX3BlZWsoTGV4ZXIqLCB1aW50NjRfdCwgSlNDb250ZXh0KiBjdHgpOwpzaXplX3QgbGV4ZXJfc2tpcChMZXhlciopOwpzaXplX3QgbGV4ZXJfY2hhcmxlbihMZXhlciopOwpjaGFyKiBsZXhlcl9sZXhlbWUoTGV4ZXIqLCBzaXplX3QqKTsKaW50IGxleGVyX25leHQoTGV4ZXIqLCB1aW50NjRfdCwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGxleGVyX3NldF9sb2NhdGlvbihMZXhlciosIGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGxleGVyX3JlbGVhc2UoTGV4ZXIqLCBKU0NvbnRleHQqKTsKdm9pZCBsZXhlcl9mcmVlKExleGVyKiwgSlNDb250ZXh0Kik7CnZvaWQgbGV4ZXJfcmVsZWFzZV9ydChMZXhlciosIEpTUnVudGltZSopOwp2b2lkIGxleGVyX2ZyZWVfcnQoTGV4ZXIqLCBKU1J1bnRpbWUqKTsKCnZvaWQgbGV4ZXJfZHVtcChMZXhlciosIER5bkJ1ZiopOwoKc3RhdGljIGlubGluZSBMZXhlcioKbGV4ZXJfZHVwKExleGVyKiBsZXgpIHsKICArK2xleC0+cmVmX2NvdW50OwogIHJldHVybiBsZXg7Cn0KCnN0YXRpYyBpbmxpbmUgTGV4ZXJSdWxlKgpsZXhlcl9ydWxlX2F0KExleGVyKiBsZXgsIGludCBpZCkgewogIHJldHVybiB2ZWN0b3JfYXQoJmxleC0+cnVsZXMsIHNpemVvZihMZXhlclJ1bGUpLCBpZCk7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmxleGVyX3N0YXRlX2ZpbmQoTGV4ZXIqIGxleCwgY29uc3QgY2hhciogc3RhdGUpIHsKICByZXR1cm4gbGV4ZXJfc3RhdGVfZmluZGIobGV4LCBzdGF0ZSwgc3RybGVuKHN0YXRlKSk7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmxleGVyX3N0YXRlX2RlcHRoKExleGVyKiBsZXgpIHsKICByZXR1cm4gdmVjdG9yX3NpemUoJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSk7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcioKbGV4ZXJfc3RhdGVfbmFtZShMZXhlciogbGV4LCBpbnQgc3RhdGUpIHsKICBjaGFyKiogbmFtZV9wOwoKICBuYW1lX3AgPSB2ZWN0b3JfYXQoJmxleC0+c3RhdGVzLCBzaXplb2YoY2hhciopLCBzdGF0ZSk7CgogIHJldHVybiBuYW1lX3AgPyAqbmFtZV9wIDogMDsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKbGV4ZXJfbnVtX3N0YXRlcyhMZXhlciogbGV4KSB7CiAgcmV0dXJuIHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlcywgc2l6ZW9mKGNoYXIqKSk7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcioKbGV4ZXJfc3RhdGVfdG9wbmFtZShMZXhlciogbGV4KSB7CiAgcmV0dXJuIGxleGVyX3N0YXRlX25hbWUobGV4LCBsZXhlcl9zdGF0ZV90b3AobGV4LCAwKSk7Cn0KCi8qKgogKiBAfQogKi8KI2VuZGlmIC8qIGRlZmluZWQoTEVYRVJfSCkgKi8KAAAAAAAAAAAqDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngIAAAAAAACeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqDAAAI2lmbmRlZiBMRVhFUl9ICiNkZWZpbmUgTEVYRVJfSAoKI2luY2x1ZGUgImxvY2F0aW9uLmgiCiNpbmNsdWRlICJ2ZWN0b3IuaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgojaW5jbHVkZSA8c3RyaW5nLmg+CgovKioKICogXGRlZmdyb3VwIGxleGVyIExleGljYWwgc2Nhbm5lciwgcmVnZXggYmFzZWQKICogQHsKICovCnR5cGVkZWYgc3RydWN0IGxleGljYWxfcnVsZSB7CiAgY2hhciogbmFtZTsKICBjaGFyKiBleHByOwogIHVpbnQ2NF90IG1hc2s7CiAgdWludDhfdCogYnl0ZWNvZGU7CiAgdm9pZCogb3BhcXVlOwogIGNoYXIqIGV4cGFuc2lvbjsKfSBMZXhlclJ1bGU7CgpzdGF0aWMgY29uc3QgdWludDY0X3QgTUFTS19BTEwgPSB+KHVpbnQ2NF90KTA7CgplbnVtIGxleGVyX21vZGUgewogIExFWEVSX0ZJUlNUID0gMCwKICBMRVhFUl9MQVNUID0gMSwKICBMRVhFUl9MT05HRVNUID0gMiwKfTsKCmVudW0gewogIExFWEVSX0VPRiA9IC0xLAogIExFWEVSX0VSUk9SX05PTUFUQ0ggPSAtMiwKICBMRVhFUl9FUlJPUl9DT01QSUxFID0gLTMsCiAgTEVYRVJfRVJST1JfRVhFQyA9IC00LAp9OwoKdHlwZWRlZiBzdHJ1Y3QgbGV4aWNhbF9zY2FubmVyIHsKICB1bmlvbiB7CiAgICBpbnQgcmVmX2NvdW50OwogICAgTG9jYXRpb24gbG9jOwogIH07CiAgSW5wdXRCdWZmZXIgaW5wdXQ7CiAgZW51bSBsZXhlcl9tb2RlIG1vZGU7CiAgc2l6ZV90IC8qc3RhcnQsICovIGJ5dGVfbGVuZ3RoOwogIGludDMyX3QgdG9rZW5faWQsIHN0YXRlOwogIFZlY3RvciBkZWZpbmVzOwogIFZlY3RvciBydWxlczsKICBWZWN0b3Igc3RhdGVzOwogIFZlY3RvciBzdGF0ZV9zdGFjazsKICB1aW50NjRfdCBzZXE7Cn0gTGV4ZXI7CgppbnQgbGV4ZXJfc3RhdGVfZmluZGIoTGV4ZXIqLCBjb25zdCBjaGFyKiwgc2l6ZV90IHNsZW4pOwppbnQgbGV4ZXJfc3RhdGVfbmV3KExleGVyKiwgY29uc3QgY2hhciosIHNpemVfdCBsZW4pOwppbnQgbGV4ZXJfc3RhdGVfcHVzaChMZXhlciosIGNvbnN0IGNoYXIqKTsKaW50IGxleGVyX3N0YXRlX3BvcChMZXhlciopOwppbnQgbGV4ZXJfc3RhdGVfdG9wKExleGVyKiwgaW50KTsKY2hhciogbGV4ZXJfc3RhdGVzX3NraXAoY2hhciopOwp2b2lkIGxleGVyX3N0YXRlc19kdW1wKExleGVyKiwgdWludDY0X3QsIER5bkJ1ZiogZGJ1Zik7CmNoYXIqIGxleGVyX3J1bGVfcmVnZXgoTGV4ZXJSdWxlKik7CkJPT0wgbGV4ZXJfcnVsZV9leHBhbmQoTGV4ZXIqLCBjaGFyKiwgRHluQnVmKiBkYik7CmludCBsZXhlcl9ydWxlX2FkZChMZXhlciosIGNoYXIqLCBjaGFyKiBleHByKTsKTGV4ZXJSdWxlKiBsZXhlcl9ydWxlX2ZpbmQoTGV4ZXIqLCBjb25zdCBjaGFyKik7CnZvaWQgbGV4ZXJfcnVsZV9mcmVlKExleGVyUnVsZSosIEpTQ29udGV4dCopOwp2b2lkIGxleGVyX3J1bGVfZnJlZV9ydChMZXhlclJ1bGUqLCBKU1J1bnRpbWUqKTsKdm9pZCBsZXhlcl9ydWxlX2R1bXAoTGV4ZXIqLCBMZXhlclJ1bGUqLCBEeW5CdWYqIGRidWYpOwp2b2lkIGxleGVyX2luaXQoTGV4ZXIqLCBlbnVtIGxleGVyX21vZGUsIEpTQ29udGV4dCogY3R4KTsKdm9pZCBsZXhlcl9zZXRfaW5wdXQoTGV4ZXIqLCBJbnB1dEJ1ZmZlciwgaW50MzJfdCBmaWxlX2F0b20pOwp2b2lkIGxleGVyX2RlZmluZShMZXhlciosIGNoYXIqLCBjaGFyKiBleHByKTsKTGV4ZXJSdWxlKiBsZXhlcl9maW5kX2RlZmluaXRpb24oTGV4ZXIqLCBjb25zdCBjaGFyKiwgc2l6ZV90IG5hbWVsZW4pOwpCT09MIGxleGVyX2NvbXBpbGVfcnVsZXMoTGV4ZXIqLCBKU0NvbnRleHQqKTsKaW50IGxleGVyX3BlZWsoTGV4ZXIqLCB1aW50NjRfdCwgSlNDb250ZXh0KiBjdHgpOwpzaXplX3QgbGV4ZXJfc2tpcChMZXhlciopOwpzaXplX3QgbGV4ZXJfY2hhcmxlbihMZXhlciopOwpjaGFyKiBsZXhlcl9sZXhlbWUoTGV4ZXIqLCBzaXplX3QqKTsKaW50IGxleGVyX25leHQoTGV4ZXIqLCB1aW50NjRfdCwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGxleGVyX3NldF9sb2NhdGlvbihMZXhlciosIGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGxleGVyX3JlbGVhc2UoTGV4ZXIqLCBKU0NvbnRleHQqKTsKdm9pZCBsZXhlcl9mcmVlKExleGVyKiwgSlNDb250ZXh0Kik7CnZvaWQgbGV4ZXJfcmVsZWFzZV9ydChMZXhlciosIEpTUnVudGltZSopOwp2b2lkIGxleGVyX2ZyZWVfcnQoTGV4ZXIqLCBKU1J1bnRpbWUqKTsKCnZvaWQgbGV4ZXJfZHVtcChMZXhlciosIER5bkJ1ZiopOwoKc3RhdGljIGlubGluZSBMZXhlcioKbGV4ZXJfZHVwKExleGVyKiBsZXgpIHsKICArK2xleC0+cmVmX2NvdW50OwogIHJldHVybiBsZXg7Cn0KCnN0YXRpYyBpbmxpbmUgTGV4ZXJSdWxlKgpsZXhlcl9ydWxlX2F0KExleGVyKiBsZXgsIGludCBpZCkgewogIHJldHVybiB2ZWN0b3JfYXQoJmxleC0+cnVsZXMsIHNpemVvZihMZXhlclJ1bGUpLCBpZCk7Cn0KCnN0YXRpYyBpbmxpbmUgaW50CmxleGVyX3N0YXRlX2ZpbmQoTGV4ZXIqIGxleCwgY29uc3QgY2hhciogc3RhdGUpIHsKICByZXR1cm4gbGV4ZXJfc3RhdGVfZmluZGIobGV4LCBzdGF0ZSwgc3RybGVuKHN0YXRlKSk7Cn0KCnN0YXRpYyBpbmxpbmUgc2l6ZV90CmxleGVyX3N0YXRlX2RlcHRoKExleGVyKiBsZXgpIHsKICByZXR1cm4gdmVjdG9yX3NpemUoJmxleC0+c3RhdGVfc3RhY2ssIHNpemVvZihpbnQzMl90KSk7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcioKbGV4ZXJfc3RhdGVfbmFtZShMZXhlciogbGV4LCBpbnQgc3RhdGUpIHsKICBjaGFyKiogbmFtZV9wOwoKICBuYW1lX3AgPSB2ZWN0b3JfYXQoJmxleC0+c3RhdGVzLCBzaXplb2YoY2hhciopLCBzdGF0ZSk7CgogIHJldHVybiBuYW1lX3AgPyAqbmFtZV9wIDogMDsKfQoKc3RhdGljIGlubGluZSBzaXplX3QKbGV4ZXJfbnVtX3N0YXRlcyhMZXhlciogbGV4KSB7CiAgcmV0dXJuIHZlY3Rvcl9zaXplKCZsZXgtPnN0YXRlcywgc2l6ZW9mKGNoYXIqKSk7Cn0KCnN0YXRpYyBpbmxpbmUgY2hhcioKbGV4ZXJfc3RhdGVfdG9wbmFtZShMZXhlciogbGV4KSB7CiAgcmV0dXJuIGxleGVyX3N0YXRlX25hbWUobGV4LCBsZXhlcl9zdGF0ZV90b3AobGV4LCAwKSk7Cn0KCi8qKgogKiBAfQogKi8KI2VuZGlmIC8qIGRlZmluZWQoTEVYRVJfSCkgKi8KAAAAAAAAAAAqDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngIAAAAAAACeAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "quickjs-lexer.h",
			"settings":
			{
				"buffer_size": 984,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADYAwAAI2lmbmRlZiBRVUlDS0pTX0xFWEVSX0gKI2RlZmluZSBRVUlDS0pTX0xFWEVSX0gKCiNpbmNsdWRlICJsZXhlci5oIgojaW5jbHVkZSAidG9rZW4uaCIKCi8qKgogKiBcZGVmZ3JvdXAgcXVpY2tqcy1sZXhlciBRdWlja0pTIG1vZHVsZTogbGV4ZXIgLSBMZXhpY2FsIHNjYW5uZXIsIHJlZ2V4IGJhc2VkCiAqIEB7CiAqLwoKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU0NsYXNzSUQganNfdG9rZW5fY2xhc3NfaWQsIGpzX2xleGVyX2NsYXNzX2lkOwoKSlNWYWx1ZSBqc19sZXhlcl9uZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBwcm90bywgSlNWYWx1ZUNvbnN0IGluLCBKU1ZhbHVlQ29uc3QgbW9kZSk7CkpTVmFsdWUganNfbGV4ZXJfd3JhcChKU0NvbnRleHQqIGN0eCwgTGV4ZXIqIGxleCk7CkpTVmFsdWUganNfdG9rZW5fd3JhcChKU0NvbnRleHQqIGN0eCwgVG9rZW4qIHRvayk7CgpzdGF0aWMgaW5saW5lIFRva2VuKgpqc190b2tlbl9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3Rva2VuX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBUb2tlbioKanNfdG9rZW5fZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX3Rva2VuX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBMZXhlcioKanNfbGV4ZXJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19sZXhlcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgTGV4ZXIqCmpzX2xleGVyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19sZXhlcl9jbGFzc19pZCk7Cn0KCi8qKgogKiBAfQogKi8KCiNlbmRpZiAvKiBkZWZpbmVkKFFVSUNLSlNfTEVYRVJfSCkgKi8KAAAAAAAAAADYAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					2,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADYAwAAI2lmbmRlZiBRVUlDS0pTX0xFWEVSX0gKI2RlZmluZSBRVUlDS0pTX0xFWEVSX0gKCiNpbmNsdWRlICJsZXhlci5oIgojaW5jbHVkZSAidG9rZW4uaCIKCi8qKgogKiBcZGVmZ3JvdXAgcXVpY2tqcy1sZXhlciBRdWlja0pTIG1vZHVsZTogbGV4ZXIgLSBMZXhpY2FsIHNjYW5uZXIsIHJlZ2V4IGJhc2VkCiAqIEB7CiAqLwoKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU0NsYXNzSUQganNfdG9rZW5fY2xhc3NfaWQsIGpzX2xleGVyX2NsYXNzX2lkOwoKSlNWYWx1ZSBqc19sZXhlcl9uZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBwcm90bywgSlNWYWx1ZUNvbnN0IGluLCBKU1ZhbHVlQ29uc3QgbW9kZSk7CkpTVmFsdWUganNfbGV4ZXJfd3JhcChKU0NvbnRleHQqIGN0eCwgTGV4ZXIqIGxleCk7CkpTVmFsdWUganNfdG9rZW5fd3JhcChKU0NvbnRleHQqIGN0eCwgVG9rZW4qIHRvayk7CgpzdGF0aWMgaW5saW5lIFRva2VuKgpqc190b2tlbl9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3Rva2VuX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBUb2tlbioKanNfdG9rZW5fZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX3Rva2VuX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBMZXhlcioKanNfbGV4ZXJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19sZXhlcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgTGV4ZXIqCmpzX2xleGVyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19sZXhlcl9jbGFzc19pZCk7Cn0KCi8qKgogKiBAfQogKi8KCiNlbmRpZiAvKiBkZWZpbmVkKFFVSUNLSlNfTEVYRVJfSCkgKi8KAAAAAAAAAADYAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					3,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADYAwAAI2lmbmRlZiBRVUlDS0pTX0xFWEVSX0gKI2RlZmluZSBRVUlDS0pTX0xFWEVSX0gKCiNpbmNsdWRlICJsZXhlci5oIgojaW5jbHVkZSAidG9rZW4uaCIKCi8qKgogKiBcZGVmZ3JvdXAgcXVpY2tqcy1sZXhlciBRdWlja0pTIG1vZHVsZTogbGV4ZXIgLSBMZXhpY2FsIHNjYW5uZXIsIHJlZ2V4IGJhc2VkCiAqIEB7CiAqLwoKZXh0ZXJuIHRocmVhZF9sb2NhbCBKU0NsYXNzSUQganNfdG9rZW5fY2xhc3NfaWQsIGpzX2xleGVyX2NsYXNzX2lkOwoKSlNWYWx1ZSBqc19sZXhlcl9uZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBwcm90bywgSlNWYWx1ZUNvbnN0IGluLCBKU1ZhbHVlQ29uc3QgbW9kZSk7CkpTVmFsdWUganNfbGV4ZXJfd3JhcChKU0NvbnRleHQqIGN0eCwgTGV4ZXIqIGxleCk7CkpTVmFsdWUganNfdG9rZW5fd3JhcChKU0NvbnRleHQqIGN0eCwgVG9rZW4qIHRvayk7CgpzdGF0aWMgaW5saW5lIFRva2VuKgpqc190b2tlbl9kYXRhKEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUodmFsdWUsIGpzX3Rva2VuX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBUb2tlbioKanNfdG9rZW5fZGF0YTIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19HZXRPcGFxdWUyKGN0eCwgdmFsdWUsIGpzX3Rva2VuX2NsYXNzX2lkKTsKfQoKc3RhdGljIGlubGluZSBMZXhlcioKanNfbGV4ZXJfZGF0YShKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlKHZhbHVlLCBqc19sZXhlcl9jbGFzc19pZCk7Cn0KCnN0YXRpYyBpbmxpbmUgTGV4ZXIqCmpzX2xleGVyX2RhdGEyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfR2V0T3BhcXVlMihjdHgsIHZhbHVlLCBqc19sZXhlcl9jbGFzc19pZCk7Cn0KCi8qKgogKiBAfQogKi8KCiNlbmRpZiAvKiBkZWZpbmVkKFFVSUNLSlNfTEVYRVJfSCkgKi8KAAAAAAAAAADYAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/doc",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/err",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/doc/latex/unionVector.tex",
		"/home/roman/.config/sublime-text/Packages/User/Themes/[ Argonaut ].tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/usr/include/archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stream.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/streams.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/usr/lib/gcc/x86_64-linux-gnu/11/include/stdatomic.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/flexbox-intrinsic-sizing-horiz-1-ref.json",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/usr/i686-w64-mingw32/include/io.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/Makefile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/readlink.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/perf_hooks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/bnflexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stack.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/usr/include/zlib.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Niji.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/wasmedge-quickjs/example_js/es6_module_demo/c.",
		"/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"js_transform_controller_funcs",
			"js_transform_controller",
			"js_transform_callback",
			"js_resolve_functions_free",
			"js_resolve_functions_free_rt",
			"js_transform_method",
			"js_readable_controller_funcs",
			"transform_close",
			"writable_",
			"'token",
			"IsKeyword.*export",
			"'from'",
			"TokIs",
			"function IsKeyword",
			"IsKeyword",
			"'from'",
			"'some'",
			"IsKey",
			"function Export",
			"'impexp'",
			"removeExports",
			"lexer_token\\(",
			"lexer_token(",
			"lexer_token\\(",
			"lexer_rule_match",
			"input_buffer_peekc",
			"misc_proclink",
			"ileName",
			"FUNC_GETFD:",
			"FUNC_GETFD",
			"'tok'",
			"parse\\(",
			"lexer_token",
			"Token",
			"tok\\.(loc)",
			"tok\\.type",
			"class_id",
			"JSArrayBuffer",
			"struct JSString",
			"js_misc_duparraybuffer",
			"js_misc_slice",
			"OffsetLength",
			"offset_le",
			"slice",
			"show",
			" show\\(",
			"slice\\(",
			"splitAt",
			"printStatus",
			"show\\(",
			"this.show\\(",
			"this.show",
			"show_banner",
			"cmdStart",
			"put_banner",
			"for help",
			"type ",
			"618",
			"path_normalize",
			"jsm_lookup_package",
			"path_isdot",
			"setsid",
			"vfork",
			"FORK",
			"fork",
			"\\.flush",
			"std.puts",
			" update\\(",
			" help",
			"console.log",
			"atexit",
			"readlinePrintPrompt",
			"rompt",
			"setReadHandler",
			"js_misc_watch",
			"HAVE_FNMATCH",
			"check_func",
			"out",
			"STACK=",
			"fields.(.*) ??= (.*);",
			"PrintUserscriptBanner",
			"removeComments",
			"'impexp'",
			"showToken",
			"lexer",
			"out",
			"[^0-9A-Za-z_]out[^0-9A-Za-z_]",
			"PrintUserscriptBanner",
			"'str'",
			"PrintUserscriptBanner",
			"main",
			"realloc_func",
			"str_",
			"module_list",
			"vector_clear",
			"vector_push",
			"module_list",
			"vector_push",
			"\"\n                        \"",
			"interactive",
			"REPL",
			"\"import",
			"\"import ",
			"module_exports_get",
			"jsm_module_load\\(",
			"jsm_module_load",
			"js_value_mkptr",
			"js_value_int",
			"{return",
			"JS_VALUE_GET_INT",
			"JS_MKPTR",
			"js_value_ptr",
			"module_list",
			"vector_realloc",
			"realloc",
			"dbuf_init2",
			"vector_js_realloc",
			"main",
			"jsm_init_modules",
			"jsm_builtin_modules",
			"ModuleImportFunction",
			"ModuleSearchFunction",
			"jsm_eval_file",
			"jsm_script_push",
			"stack =",
			"\\\\ \"",
			"debug_module_loader",
			"debug_module"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"transform_terminate",
			"transform_",
			"\\1",
			"type",
			"js_misc_duparraybuffer",
			"out.puts",
			"putline",
			"\\1: \\2,",
			"",
			"{ return",
			"\\\\\"",
			"\\1if(debug_module_loader) \\2",
			"",
			"BuiltinModule",
			"Text.store",
			"Tokens",
			"tokenModifiers",
			"xml_debug",
			"\\1",
			"xml_debug",
			"WRITABLE_GET_WRITER",
			"WRITABLE_CLOSE",
			"struct stream_reader",
			"readable_cancel",
			"READABLE_CANCEL",
			"readable_unlock",
			"writable_get_writer",
			"writable_\\1lock",
			"READABLE_",
			"writ",
			"FUNC_CLOSE",
			"js_reader_method",
			"js_writer_method",
			"js_stream_method",
			"STREAM_LOCKED",
			"->reader",
			"\"StreamReader",
			"Reader",
			"METHOD_",
			"array",
			"funcs.array",
			"js_resolve_functions",
			"js_resolvefunctions",
			"funcs[1]",
			"funcs[0]",
			"js_resolvingfunctions_free",
			"js_resolvingfunctions_ree",
			"length",
			"Chunk",
			"loc",
			"prevLength",
			"prevOffset",
			"compact(\\1)",
			"js_location_create",
			"lexer_token(",
			"token_lex(",
			"LOCATION_PROP_CHAROFFSET",
			"loc->",
			"\\1_release",
			"token",
			"ALLOC_PTR",
			"ALLOC_BLOCK(p)",
			"ALLOC_BLOCK_SIZE",
			"",
			"const char* str\\1",
			"void* p,",
			"size_t size)",
			"JSRuntime* rt,",
			"JSContext\\* ctx,",
			";",
			" &(((struct alloc_block*)p)[-1]);",
			"add_to_list",
			"",
			"DEFINES_H",
			"int",
			"log",
			"out",
			"array_",
			"[%p]",
			"pthread_self()",
			"js_token_data2(ctx,",
			"js_lexer_data2(ctx,",
			"\\1//console",
			"inspectSymbol",
			"parent",
			"gettersetter",
			"ELEMENT_NODE",
			"parent",
			"attributes",
			"Node.prototype.",
			"\\1static \\2 = \\3;",
			"const raw = Node.raw(this);",
			"\\1.set\\(\\2\\)",
			"\\1.get\\(this\\)",
			"ownerElement.get\\(this\\)",
			"rawNode.get\\(this\\)",
			"inspectSymbol",
			"CSV",
			"\\1//",
			"args->c",
			"args->",
			"\\1//\\2",
			"METHOD_VALUES",
			"pr->",
			"property",
			"size[0]",
			"s->",
			"(sock)->",
			", s,",
			"(sock).",
			", *s,",
			"s->",
			"obj",
			"js_socket_data(",
			"obj",
			"loc",
			"YIELD_",
			"if",
			"\\1//\\2",
			"",
			"\\1//\\2",
			"js_pointer_free_func",
			"BITFIELD_SET",
			"fd",
			"misc.IN_",
			"fd",
			"wd",
			"JSValueConst\\1"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1227,
						"regions":
						{
						},
						"selection":
						[
							[
								13,
								13
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
							"function_name_status_row": 0,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									985,
									996
								],
								[
									1098,
									1115
								],
								[
									1314,
									1324
								],
								[
									1744,
									1763
								],
								[
									1989,
									2001
								],
								[
									2265,
									2278
								],
								[
									2467,
									2478
								],
								[
									3043,
									3056
								],
								[
									3318,
									3331
								],
								[
									3969,
									3987
								],
								[
									4298,
									4310
								],
								[
									4499,
									4513
								],
								[
									4989,
									5003
								],
								[
									5474,
									5490
								],
								[
									6204,
									6217
								],
								[
									6350,
									6365
								],
								[
									6465,
									6484
								],
								[
									6672,
									6685
								],
								[
									7005,
									7026
								],
								[
									7869,
									7883
								],
								[
									8776,
									8792
								],
								[
									9382,
									9395
								],
								[
									9725,
									9744
								],
								[
									10532,
									10552
								],
								[
									11386,
									11409
								],
								[
									12452,
									12468
								],
								[
									13240,
									13258
								],
								[
									13865,
									13880
								],
								[
									14363,
									14385
								],
								[
									14930,
									14949
								],
								[
									15273,
									15294
								],
								[
									16811,
									16821
								],
								[
									17192,
									17211
								],
								[
									17441,
									17453
								],
								[
									17947,
									17959
								],
								[
									18152,
									18164
								],
								[
									18592,
									18605
								],
								[
									18873,
									18885
								],
								[
									19076,
									19090
								],
								[
									19331,
									19344
								],
								[
									19477,
									19492
								],
								[
									19592,
									19611
								],
								[
									19852,
									19865
								],
								[
									20158,
									20179
								],
								[
									21020,
									21034
								],
								[
									21290,
									21306
								],
								[
									22156,
									22169
								],
								[
									22607,
									22626
								],
								[
									23451,
									23471
								],
								[
									23769,
									23792
								],
								[
									24892,
									24908
								],
								[
									25107,
									25127
								],
								[
									25343,
									25361
								],
								[
									26031,
									26046
								],
								[
									26538,
									26560
								],
								[
									26929,
									26950
								],
								[
									28006,
									28019
								],
								[
									28375,
									28399
								],
								[
									29646,
									29662
								],
								[
									30160,
									30183
								],
								[
									30899,
									30919
								],
								[
									31265,
									31287
								],
								[
									32701,
									32715
								],
								[
									36708,
									36722
								]
							],
							"symlist":
							[
								"  chunk_unref",
								"  chunk_arraybuffer",
								"  reader_new",
								"  reader_release_lock",
								"  reader_clear",
								"  reader_cancel",
								"  reader_read",
								"  reader_signal",
								"  reader_update",
								"  reader_passthrough",
								"  readable_new",
								"  readable_close",
								"  readable_abort",
								"  readable_enqueue",
								"  readable_lock",
								"  readable_unlock",
								"  readable_get_reader",
								"  readable_free",
								"  js_reader_constructor",
								"  js_reader_wrap",
								"  js_reader_method",
								"  js_reader_get",
								"  js_reader_finalizer",
								"  js_readable_callback",
								"  js_readable_constructor",
								"  js_readable_wrap",
								"  js_readable_method",
								"  js_readable_get",
								"  js_readable_controller",
								"  js_readable_desired",
								"  js_readable_finalizer",
								"  writer_new",
								"  writer_release_lock",
								"  writer_write",
								"  writer_close",
								"  writer_abort",
								"  writer_signal",
								"  writable_new",
								"  writable_abort",
								"  writable_lock",
								"  writable_unlock",
								"  writable_get_writer",
								"  writable_free",
								"  js_writer_constructor",
								"  js_writer_wrap",
								"  js_writer_method",
								"  js_writer_get",
								"  js_writer_finalizer",
								"  js_writable_callback",
								"  js_writable_constructor",
								"  js_writable_wrap",
								"  js_writable_iterator",
								"  js_writable_method",
								"  js_writable_get",
								"  js_writable_controller",
								"  js_writable_finalizer",
								"  transform_new",
								"  js_transform_constructor",
								"  js_transform_get",
								"  js_transform_controller",
								"  js_transform_desired",
								"  js_transform_finalizer",
								"  js_stream_init",
								"JS_INIT_MODULE"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646334376.24,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42936,
						"regions":
						{
						},
						"selection":
						[
							[
								7345,
								7345
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 264,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646275739.71,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3816.0,
						"zoom_level": 1.0
					},
					"stack_index": 26,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "quickjs-internal.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37631,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646275741.72,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 25,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "resolve-imports.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42454,
						"regions":
						{
						},
						"selection":
						[
							[
								10123,
								10123
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 359,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646285186.74,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5508.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "lib/streams.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1955,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646285191.71,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "tests/test_stream.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1935,
						"regions":
						{
						},
						"selection":
						[
							[
								1510,
								1511
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 58,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646285665.36,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 816.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "quickjs-stream.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37262,
						"regions":
						{
						},
						"selection":
						[
							[
								1721,
								1721
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 49,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646335163.81,
							"tabs_extra_last_activated_sheet_index": 5,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 714.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "quickjs-stringdecoder.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7535,
						"regions":
						{
						},
						"selection":
						[
							[
								3408,
								3430
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 138,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646287636.48,
							"tabs_extra_last_activated_sheet_index": 6,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1929.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "quickjs-stream.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5879,
						"regions":
						{
						},
						"selection":
						[
							[
								1629,
								1644
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 71,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646289912.51,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 907.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "js-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 904,
						"regions":
						{
						},
						"selection":
						[
							[
								467,
								467
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 21,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646287954.37,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "js-utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3154,
						"regions":
						{
						},
						"selection":
						[
							[
								1681,
								1696
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 69,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646287947.04,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 681.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "queue.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1322,
						"regions":
						{
						},
						"selection":
						[
							[
								891,
								902
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 50,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646287843.74,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 357.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "queue.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2744,
						"regions":
						{
						},
						"selection":
						[
							[
								307,
								317
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 21,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646287852.39,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2223.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "quickjs-sockets.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4606,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646286406.67,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "extract-structs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2575,
						"regions":
						{
						},
						"selection":
						[
							[
								1767,
								1767
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 68,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646276572.85,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 768.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "quickjs-mmap.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6100,
						"regions":
						{
						},
						"selection":
						[
							[
								2731,
								2747
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 111,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646275282.19,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1878.0,
						"zoom_level": 1.0
					},
					"stack_index": 27,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "quickjs-misc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 62731,
						"regions":
						{
						},
						"selection":
						[
							[
								53377,
								53394
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1944,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646275282.03,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 32580.0,
						"zoom_level": 1.0
					},
					"stack_index": 28,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "lib/fs.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15518,
						"regions":
						{
						},
						"selection":
						[
							[
								4923,
								4931
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 246,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646275805.62,
							"tabs_extra_last_activated_sheet_index": 7,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3765.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "lib/clexer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2727,
						"regions":
						{
						},
						"selection":
						[
							[
								2701,
								2701
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 118,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646275803.86,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1584.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "lexer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11562,
						"regions":
						{
						},
						"selection":
						[
							[
								11076,
								10726
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 480,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646277007.07,
							"tabs_extra_last_activated_sheet_index": 9,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7675.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "quickjs-location.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13267,
						"regions":
						{
						},
						"selection":
						[
							[
								10323,
								10323
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 360,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646277104.73,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5703.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "location.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1532,
						"regions":
						{
						},
						"selection":
						[
							[
								1092,
								1092
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 36,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646277136.32,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 69.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "quickjs-xml.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23143,
						"regions":
						{
						},
						"selection":
						[
							[
								13515,
								13515
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 508,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646276802.77,
							"tabs_extra_last_activated_sheet_index": 11,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8219.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "location.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3614,
						"regions":
						{
						},
						"selection":
						[
							[
								3037,
								3037
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 138,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646276985.88,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1225.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 24,
					"file": "quickjs-location.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1485,
						"regions":
						{
						},
						"selection":
						[
							[
								309,
								325
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 13,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646276882.43,
							"tabs_extra_last_activated_sheet_index": 13,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 25,
					"file": "char-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9039,
						"regions":
						{
						},
						"selection":
						[
							[
								8774,
								8774
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 331,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646274767.81,
							"tabs_extra_last_activated_sheet_index": 10,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5210.0,
						"zoom_level": 1.0
					},
					"stack_index": 29,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 26,
					"file": "buffer-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9024,
						"regions":
						{
						},
						"selection":
						[
							[
								8124,
								8142
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 314,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646274608.32,
							"tabs_extra_last_activated_sheet_index": 8,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4921.0,
						"zoom_level": 1.0
					},
					"stack_index": 31,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 27,
					"file": "buffer-utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15439,
						"regions":
						{
						},
						"selection":
						[
							[
								14980,
								15029
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 646,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646274609.29,
							"tabs_extra_last_activated_sheet_index": -1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10480.0,
						"zoom_level": 1.0
					},
					"stack_index": 30,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 28,
					"file": "quickjs-lexer.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 41853,
						"regions":
						{
						},
						"selection":
						[
							[
								36404,
								36404
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1355,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646283035.06,
							"tabs_extra_last_activated_sheet_index": 18,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 21598.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 29,
					"file": "token.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 953,
						"regions":
						{
						},
						"selection":
						[
							[
								764,
								766
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 39,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646275876.11,
							"tabs_extra_last_activated_sheet_index": 16,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 24,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 30,
					"file": "token.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1248,
						"regions":
						{
						},
						"selection":
						[
							[
								320,
								320
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 21,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646276020.05,
							"tabs_extra_last_activated_sheet_index": 17,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 31,
					"file": "lexer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3114,
						"regions":
						{
						},
						"selection":
						[
							[
								670,
								670
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 41,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646276730.7,
							"tabs_extra_last_activated_sheet_index": 18,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 32,
					"file": "quickjs-lexer.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 984,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C++/C.sublime-syntax",
							"tab_size": 2,
							"tabs_extra_last_activated": 1646277019.89,
							"tabs_extra_last_activated_sheet_index": 22,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.7072713066,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989780224)":
	{
		"height": 0.0
	},
	"output.Protocol(139713493134064)":
	{
		"height": 0.0
	},
	"output.Protocol(140020109919472)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752673856)":
	{
		"height": 0.0
	},
	"output.Protocol(140156677514432)":
	{
		"height": 0.0
	},
	"output.Protocol(140190208797904)":
	{
		"height": 0.0
	},
	"output.Protocol(140329701419328)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873537696)":
	{
		"height": 0.0
	},
	"output.Protocol(140569677099648)":
	{
		"height": 0.0
	},
	"output.Protocol(140589364043584)":
	{
		"height": 0.0
	},
	"output.Protocol(140614610715648)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"extract-str",
				"extract-structs.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"path.c",
				"path.c"
			],
			[
				"path.h",
				"path.h"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"list-exp",
				"list-exports.js"
			],
			[
				"token.c",
				"token.c"
			],
			[
				"quickjs-le",
				"quickjs-lexer.c"
			],
			[
				"jsutil",
				"js-utils.c"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.h"
			],
			[
				"quickjs-location",
				"quickjs-location.h"
			],
			[
				"quickjs-loca",
				"quickjs-location.c"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"char-ut",
				"char-utils.h"
			],
			[
				"buff",
				"buffer-utils.h"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"location",
				"location.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"CMakeLi",
				"CMakeLists.txt"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"js-u",
				"js-utils.h"
			],
			[
				"defines.h",
				"defines.h"
			],
			[
				"queue.c",
				"queue.c"
			],
			[
				"extend",
				"lib/extendArray.js"
			],
			[
				"quickjs-sockets",
				"quickjs-sockets.c"
			],
			[
				"lexer",
				"quickjs-lexer.c"
			],
			[
				"buffer-ut",
				"buffer-utils.h"
			],
			[
				"ringbuf",
				"ringbuffer.h"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"quickjs-lexer.c",
				"quickjs-lexer.c"
			],
			[
				"quickjs-loc",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"buffer",
				"buffer-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"xpath.j",
				"lib/xpath.js"
			],
			[
				"predicate.h",
				"predicate.h"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"list.h",
				"~/Projects/plot-cv/quickjs/list.h"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"queue",
				"queue.c"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"test_wa",
				"tests/test_watch.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"tree-wa",
				"quickjs-tree-walker.c"
			],
			[
				"quick",
				"quickjs-xml.c"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"",
				"tests/test_xml.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"doxy",
				"Doxyfile"
			],
			[
				"Doxyfile",
				"Doxyfile"
			],
			[
				"interna",
				"quickjs-internal.h"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"child",
				"child-process.c"
			],
			[
				"qsort_r",
				"qsort_r.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
