{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"JS_Set",
				"JS_SetPropertyStr"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"JS_Get",
				"JS_GetPropertyUint32"
			],
			[
				"JS_GetP",
				"JS_GetPropertyUint32"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"js_sys",
				"js_syscallerror_get"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_",
				"js_sockaddr_class_id"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_New",
				"JS_NewStringLen"
			],
			[
				"JS_",
				"JS_GetPropertyUint32"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"get",
				"getOwnPropertyNames"
			],
			[
				"JS_Thr",
				"JS_ThrowInternalError"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "   Ⓜ  _ISOC99_SOURCE … — macro object\n   Ⓜ  INFINITY … — macro object\n—Ⓕ– atomic_add_int ( ) { … } — function\n—Ⓕ– time_us ( ) { … } — function\n—Ⓕ– time_us ( ) { … } — function\n—Ⓕ– regexp_flags_fromstring ( ) { … } — function\n—Ⓕ– regexp_flags_tostring ( ) { … } — function\n—Ⓕ– regexp_from_argv ( ) { … } — function\n—Ⓕ– regexp_from_dbuf ( ) { … } — function\n—Ⓕ– regexp_compile ( ) { … } — function\n—Ⓕ– regexp_to_value ( ) { … } — function\n—Ⓕ– js_array_length ( ) { … } — function\n—Ⓕ– js_array_clear ( ) { … } — function\n—Ⓕ– js_array_to_argv ( ) { … } — function\n—Ⓕ– js_array_copys ( ) { … } — function\n—Ⓕ– js_strv_copys ( ) { … } — function\n—Ⓕ– js_atom_dump ( ) { … } — function\n—Ⓕ– js_atom_tobinary ( ) { … } — function\n—Ⓕ– js_atom_to_cstringlen ( ) { … } — function\n—Ⓕ– js_atom_toint32 ( ) { … } — function\n—Ⓕ– js_atom_toint64 ( ) { … } — function\n—Ⓕ– js_atom_is_index ( ) { … } — function\n—Ⓕ– js_atom_is_length ( ) { … } — function\n—Ⓕ– js_function_name ( ) { … } — function\n—Ⓕ– js_global_get ( ) { … } — function\n—Ⓕ– js_global_prototype ( ) { … } — function\n—Ⓕ– js_iterator_method ( ) { … } — function\n—Ⓕ– js_iterator_new ( ) { … } — function\n—Ⓕ– js_iterator_next ( ) { … } — function\n—Ⓕ– js_object_constructor ( ) { … } — function\n—Ⓕ– js_object_classname ( ) { … } — function\n—Ⓕ– js_object_equals ( ) { … } — function\n—Ⓕ– js_object_is ( ) { … } — function\n—Ⓕ– js_object_construct ( ) { … } — function\n—Ⓕ– js_object_error ( ) { … } — function\n—Ⓕ– js_object_stack ( ) { … } — function\n—Ⓕ– js_has_propertystr ( ) { … } — function\n—Ⓕ– js_get_propertystr_bool ( ) { … } — function\n—Ⓕ– js_get_propertystr_cstring ( ) { … } — function\n—Ⓕ– js_get_propertystr_cstringlen ( ) { … } — function\n—Ⓕ– js_get_propertyint_cstring ( ) { … } — function\n—Ⓕ– js_get_propertyint_int32 ( ) { … } — function\n—Ⓕ– js_get_propertystr_string ( ) { … } — function\n—Ⓕ– js_get_propertystr_stringlen ( ) { … } — function\n—Ⓕ– js_get_propertystr_int32 ( ) { … } — function\n—Ⓕ– js_get_propertystr_uint64 ( ) { … } — function\n—Ⓕ– js_set_propertyint_string ( ) { … } — function\n—Ⓕ– js_set_propertyint_int ( ) { … } — function\n—Ⓕ– js_set_propertystr_string ( ) { … } — function\n—Ⓕ– js_set_propertystr_stringlen ( ) { … } — function\n—Ⓕ– js_get_propertydescriptor ( ) { … } — function\n—Ⓕ– js_class_id ( ) { … } — function\n—Ⓕ– js_class_newid ( ) { … } — function\n—Ⓕ– js_class_get ( ) { … } — function\n—Ⓕ– js_class_atom ( ) { … } — function\n—Ⓕ– js_class_name ( ) { … } — function\n—Ⓕ– js_object_tostring ( ) { … } — function\n—Ⓕ– js_function_tostring ( ) { … } — function\n—Ⓕ– js_function_isnative ( ) { … } — function\n—Ⓕ– js_is_input ( ) { … } — function\n—Ⓕ– js_propenum_cmp ( ) { … } — function\n—Ⓕ– js_propertyenums_free ( ) { … } — function\n—Ⓕ– js_strv_free_n ( ) { … } — function\n—Ⓕ– js_strv_free ( ) { … } — function\n—Ⓕ– js_strv_free_rt ( ) { … } — function\n—Ⓕ– js_strv_to_array ( ) { … } — function\n—Ⓕ– js_strv_length ( ) { … } — function\n—Ⓕ– js_strv_dup ( ) { … } — function\n—Ⓕ– js_intv_to_array ( ) { … } — function\n—Ⓕ– js_symbol_static_atom ( ) { … } — function\n—Ⓕ– js_symbol_static_value ( ) { … } — function\n—Ⓕ– js_symbol_ctor ( ) { … } — function\n—Ⓕ– js_symbol_invoke_static ( ) { … } — function\n—Ⓕ– js_symbol_for ( ) { … } — function\n—Ⓕ– js_symbol_for_atom ( ) { … } — function\n—Ⓕ– js_symbol_to_string ( ) { … } — function\n—Ⓕ– js_symbol_to_cstring ( ) { … } — function\n—Ⓕ– js_values_dup ( ) { … } — function\n—Ⓕ– js_values_free ( ) { … } — function\n—Ⓕ– js_values_toarray ( ) { … } — function\n—Ⓕ– js_value_type_name ( ) { … } — function\n—Ⓕ– js_value_typestr ( ) { … } — function\n—Ⓕ– js_value_has_ref_count ( ) { … } — function\n—Ⓒ– value_mask { … } ; — type\n—Ⓕ– js_value_type ( ) { … } — function\n—Ⓕ– js_value_type_get ( ) { … } — function\n—Ⓕ– js_value_type_flag ( ) { … } — function\n—Ⓕ– js_value_free ( ) { … } — function\n—Ⓕ– js_value_clone ( ) { … } — function\n—Ⓕ– js_value_fwrite ( ) { … } — function\n—Ⓕ– js_value_dump ( ) { … } — function\n—Ⓕ– js_value_equals ( ) { … } — function\n—Ⓕ– js_value_from_char ( ) { … } — function\n—Ⓕ– js_value_print ( ) { … } — function\n—Ⓕ– js_value_tosize ( ) { … } — function\n—Ⓕ– js_value_free_rt ( ) { … } — function\n—Ⓕ– js_cstring_ptr ( ) { … } — function\n—Ⓕ– js_cstring_dup ( ) { … } — function\n—Ⓕ– js_cstring_value ( ) { … } — function\n—Ⓕ– js_cstring_dump ( ) { … } — function\n—Ⓕ– js_map_new ( ) { … } — function\n—Ⓕ– module_name ( ) { … } — function\n—Ⓕ– module_namestr ( ) { … } — function\n—Ⓕ– module_func ( ) { … } — function\n—Ⓕ– module_ns ( ) { … } — function\n—Ⓕ– module_exports ( ) { … } — function\n—Ⓕ– js_modules_list ( ) { … } — function\n—Ⓕ– js_modules_array ( ) { … } — function\n—Ⓕ– js_modules_entries ( ) { … } — function\n—Ⓕ– js_modules_map ( ) { … } — function\n—Ⓕ– js_modules_object ( ) { … } — function\n—Ⓕ– module_object ( ) { … } — function\n—Ⓕ– module_entry ( ) { … } — function\n—Ⓕ– js_module_search ( ) { … } — function\n—Ⓕ– js_module_search_ext ( ) { … } — function\n—Ⓕ– js_module_normalize ( ) { … } — function\n—Ⓕ– js_module_def ( ) { … } — function\n—Ⓕ– js_module_find ( ) { … } — function\n—Ⓕ– js_import_directive ( ) { … } — function\n—Ⓕ– js_import_eval ( ) { … } — function\n—Ⓕ– js_module_import_default ( ) { … } — function\n—Ⓕ– js_module_import_namespace ( ) { … } — function\n—Ⓕ– js_module_import ( ) { … } — function\n—Ⓕ– js_module_loader_so ( ) { … } — function\n—Ⓕ– js_is_arraybuffer ( ) { … } — function\n—Ⓕ– js_is_sharedarraybuffer ( ) { … } — function\n—Ⓕ– js_is_map ( ) { … } — function\n—Ⓕ– js_is_set ( ) { … } — function\n—Ⓕ– js_is_generator ( ) { … } — function\n—Ⓕ– js_is_regexp ( ) { … } — function\n—Ⓕ– js_is_promise ( ) { … } — function\n—Ⓕ– js_is_dataview ( ) { … } — function\n—Ⓕ– js_is_iterable ( ) { … } — function\n—Ⓕ– js_is_iterator ( ) { … } — function\n—Ⓕ– js_typedarray_prototype ( ) { … } — function\n—Ⓕ– js_typedarray_constructor ( ) { … } — function\n—Ⓕ– js_invoke ( ) { … } — function\n—Ⓕ– js_symbol_operatorset_value ( ) { … } — function\n—Ⓕ– js_symbol_operatorset_atom ( ) { … } — function\n—Ⓕ– js_operators_create ( ) { … } — function\n—Ⓕ– js_number_new ( ) { … } — function\n—Ⓕ– js_date_new ( ) { … } — function\n—Ⓕ– js_date_from_ms ( ) { … } — function\n—Ⓕ– js_date_from_time_ns ( ) { … } — function\n—Ⓕ– js_date_from_timespec ( ) { … } — function\n—Ⓕ– js_date_gettime ( ) { … } — function\n—Ⓕ– js_date_time ( ) { … } — function\n—Ⓒ– timespec { … } ; — type\n—Ⓕ– js_date_timespec ( ) { … } — function\n—Ⓕ– js_arraybuffer_freevalue ( ) { … } — function\n—Ⓕ– js_arraybuffer_fromvalue ( ) { … } — function\n—Ⓕ– js_arraybuffer_bytelength ( ) { … } — function\n—Ⓕ– js_eval_module ( ) { … } — function\n—Ⓕ– js_eval_binary ( ) { … } — function\n—Ⓕ– js_eval_buf ( ) { … } — function\n—Ⓕ– js_eval_str ( ) { … } — function\n—Ⓕ– js_time_ms ( ) { … } — function\n—Ⓕ– js_interrupt_handler ( ) { … } — function\n—Ⓕ– js_timer_unlink ( ) { … } — function\n—Ⓕ– js_timer_free ( ) { … } — function\n—Ⓕ– js_call_handler ( ) { … } — function\n—Ⓕ– js_sab_alloc ( ) { … } — function\n—Ⓕ– js_sab_free ( ) { … } — function\n—Ⓕ– js_sab_dup ( ) { … } — function\n—Ⓕ– js_new_message_pipe ( ) { … } — function\n—Ⓕ– js_dup_message_pipe ( ) { … } — function\n—Ⓕ– js_free_message ( ) { … } — function\n—Ⓕ– js_free_message_pipe ( ) { … } — function",
			"settings":
			{
				"buffer_size": 7119,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					779,
					3,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
						"symkeys":
						[
							[
								30,
								44
							],
							[
								346,
								354
							],
							[
								615,
								629
							],
							[
								772,
								779
							],
							[
								990,
								997
							],
							[
								1117,
								1140
							],
							[
								1548,
								1569
							],
							[
								1954,
								1970
							],
							[
								2620,
								2636
							],
							[
								2805,
								2819
							],
							[
								3427,
								3442
							],
							[
								3884,
								3899
							],
							[
								4170,
								4184
							],
							[
								4557,
								4573
							],
							[
								4933,
								4947
							],
							[
								5282,
								5295
							],
							[
								5617,
								5629
							],
							[
								6078,
								6094
							],
							[
								6260,
								6281
							],
							[
								6472,
								6487
							],
							[
								6652,
								6667
							],
							[
								6880,
								6896
							],
							[
								7472,
								7489
							],
							[
								7664,
								7680
							],
							[
								8595,
								8608
							],
							[
								8820,
								8839
							],
							[
								9047,
								9065
							],
							[
								9532,
								9547
							],
							[
								9727,
								9743
							],
							[
								10155,
								10176
							],
							[
								10352,
								10371
							],
							[
								11082,
								11098
							],
							[
								12237,
								12249
							],
							[
								12460,
								12479
							],
							[
								12617,
								12632
							],
							[
								12922,
								12937
							],
							[
								13110,
								13128
							],
							[
								13336,
								13359
							],
							[
								13614,
								13640
							],
							[
								13935,
								13964
							],
							[
								14372,
								14398
							],
							[
								14688,
								14712
							],
							[
								14918,
								14943
							],
							[
								15225,
								15253
							],
							[
								15647,
								15671
							],
							[
								15956,
								15981
							],
							[
								16263,
								16288
							],
							[
								16535,
								16557
							],
							[
								16760,
								16785
							],
							[
								17038,
								17066
							],
							[
								17376,
								17401
							],
							[
								17908,
								17919
							],
							[
								18003,
								18017
							],
							[
								18089,
								18101
							],
							[
								18228,
								18241
							],
							[
								18424,
								18437
							],
							[
								18576,
								18594
							],
							[
								18785,
								18805
							],
							[
								18991,
								19011
							],
							[
								19204,
								19215
							],
							[
								19354,
								19369
							],
							[
								19721,
								19742
							],
							[
								19904,
								19918
							],
							[
								20078,
								20090
							],
							[
								20247,
								20262
							],
							[
								20425,
								20441
							],
							[
								20660,
								20674
							],
							[
								20754,
								20765
							],
							[
								21006,
								21022
							],
							[
								21238,
								21259
							],
							[
								21439,
								21461
							],
							[
								21673,
								21687
							],
							[
								21756,
								21779
							],
							[
								22020,
								22033
							],
							[
								22244,
								22262
							],
							[
								22441,
								22460
							],
							[
								22763,
								22783
							],
							[
								22976,
								22989
							],
							[
								23391,
								23405
							],
							[
								23566,
								23583
							],
							[
								23808,
								23826
							],
							[
								24344,
								24360
							],
							[
								24486,
								24508
							],
							[
								24594,
								24604
							],
							[
								24605,
								24618
							],
							[
								24888,
								24905
							],
							[
								25154,
								25172
							],
							[
								26026,
								26039
							],
							[
								26295,
								26309
							],
							[
								28207,
								28222
							],
							[
								28493,
								28506
							],
							[
								29259,
								29274
							],
							[
								30699,
								30717
							],
							[
								30864,
								30878
							],
							[
								31080,
								31095
							],
							[
								31244,
								31260
							],
							[
								31475,
								31489
							],
							[
								31629,
								31643
							],
							[
								31896,
								31912
							],
							[
								32084,
								32099
							],
							[
								32313,
								32323
							],
							[
								32517,
								32528
							],
							[
								32634,
								32648
							],
							[
								32843,
								32854
							],
							[
								32950,
								32959
							],
							[
								33056,
								33070
							],
							[
								33533,
								33548
							],
							[
								33609,
								33625
							],
							[
								34147,
								34165
							],
							[
								34936,
								34950
							],
							[
								35159,
								35176
							],
							[
								35692,
								35705
							],
							[
								35810,
								35822
							],
							[
								36107,
								36123
							],
							[
								36491,
								36511
							],
							[
								37196,
								37215
							],
							[
								38192,
								38205
							],
							[
								38537,
								38551
							],
							[
								39038,
								39057
							],
							[
								40120,
								40134
							],
							[
								40405,
								40429
							],
							[
								40850,
								40876
							],
							[
								41263,
								41279
							],
							[
								42168,
								42187
							],
							[
								43525,
								43542
							],
							[
								44063,
								44086
							],
							[
								44320,
								44329
							],
							[
								44550,
								44559
							],
							[
								44781,
								44796
							],
							[
								44980,
								44992
							],
							[
								45170,
								45183
							],
							[
								45378,
								45392
							],
							[
								45574,
								45588
							],
							[
								45970,
								45984
							],
							[
								46186,
								46209
							],
							[
								46424,
								46449
							],
							[
								46678,
								46687
							],
							[
								46987,
								47014
							],
							[
								47096,
								47122
							],
							[
								47312,
								47331
							],
							[
								47607,
								47620
							],
							[
								47754,
								47765
							],
							[
								47955,
								47970
							],
							[
								48129,
								48149
							],
							[
								48260,
								48281
							],
							[
								48396,
								48411
							],
							[
								48701,
								48713
							],
							[
								48909,
								48917
							],
							[
								48918,
								48934
							],
							[
								49119,
								49143
							],
							[
								49282,
								49306
							],
							[
								49675,
								49700
							],
							[
								49958,
								49972
							],
							[
								50487,
								50501
							],
							[
								51137,
								51148
							],
							[
								51801,
								51812
							],
							[
								52089,
								52099
							],
							[
								52238,
								52258
							],
							[
								52343,
								52358
							],
							[
								52489,
								52502
							],
							[
								52597,
								52612
							],
							[
								52871,
								52883
							],
							[
								53050,
								53061
							],
							[
								53313,
								53323
							],
							[
								53494,
								53513
							],
							[
								53903,
								53922
							],
							[
								54008,
								54023
							],
							[
								54200,
								54220
							]
						],
						"symlist":
						[
							" Ⓜ  _ISOC99_SOURCE … — macro object",
							" Ⓜ  INFINITY … — macro object",
							"—Ⓕ– atomic_add_int ( ) { … } — function",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– regexp_flags_fromstring ( ) { … } — function",
							"—Ⓕ– regexp_flags_tostring ( ) { … } — function",
							"—Ⓕ– regexp_from_argv ( ) { … } — function",
							"—Ⓕ– regexp_from_dbuf ( ) { … } — function",
							"—Ⓕ– regexp_compile ( ) { … } — function",
							"—Ⓕ– regexp_to_value ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_clear ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_array_copys ( ) { … } — function",
							"—Ⓕ– js_strv_copys ( ) { … } — function",
							"—Ⓕ– js_atom_dump ( ) { … } — function",
							"—Ⓕ– js_atom_tobinary ( ) { … } — function",
							"—Ⓕ– js_atom_to_cstringlen ( ) { … } — function",
							"—Ⓕ– js_atom_toint32 ( ) { … } — function",
							"—Ⓕ– js_atom_toint64 ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_method ( ) { … } — function",
							"—Ⓕ– js_iterator_new ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_object_equals ( ) { … } — function",
							"—Ⓕ– js_object_is ( ) { … } — function",
							"—Ⓕ– js_object_construct ( ) { … } — function",
							"—Ⓕ– js_object_error ( ) { … } — function",
							"—Ⓕ– js_object_stack ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertyint_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertyint_int32 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int32 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint64 ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_string ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_int ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertydescriptor ( ) { … } — function",
							"—Ⓕ– js_class_id ( ) { … } — function",
							"—Ⓕ– js_class_newid ( ) { … } — function",
							"—Ⓕ– js_class_get ( ) { … } — function",
							"—Ⓕ– js_class_atom ( ) { … } — function",
							"—Ⓕ– js_class_name ( ) { … } — function",
							"—Ⓕ– js_object_tostring ( ) { … } — function",
							"—Ⓕ– js_function_tostring ( ) { … } — function",
							"—Ⓕ– js_function_isnative ( ) { … } — function",
							"—Ⓕ– js_is_input ( ) { … } — function",
							"—Ⓕ– js_propenum_cmp ( ) { … } — function",
							"—Ⓕ– js_propertyenums_free ( ) { … } — function",
							"—Ⓕ– js_strv_free_n ( ) { … } — function",
							"—Ⓕ– js_strv_free ( ) { … } — function",
							"—Ⓕ– js_strv_free_rt ( ) { … } — function",
							"—Ⓕ– js_strv_to_array ( ) { … } — function",
							"—Ⓕ– js_strv_length ( ) { … } — function",
							"—Ⓕ– js_strv_dup ( ) { … } — function",
							"—Ⓕ– js_intv_to_array ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_symbol_invoke_static ( ) { … } — function",
							"—Ⓕ– js_symbol_for ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_to_string ( ) { … } — function",
							"—Ⓕ– js_symbol_to_cstring ( ) { … } — function",
							"—Ⓕ– js_values_dup ( ) { … } — function",
							"—Ⓕ– js_values_free ( ) { … } — function",
							"—Ⓕ– js_values_toarray ( ) { … } — function",
							"—Ⓕ– js_value_type_name ( ) { … } — function",
							"—Ⓕ– js_value_typestr ( ) { … } — function",
							"—Ⓕ– js_value_has_ref_count ( ) { … } — function",
							"—Ⓒ– value_mask { … } ; — type",
							"—Ⓕ– js_value_type ( ) { … } — function",
							"—Ⓕ– js_value_type_get ( ) { … } — function",
							"—Ⓕ– js_value_type_flag ( ) { … } — function",
							"—Ⓕ– js_value_free ( ) { … } — function",
							"—Ⓕ– js_value_clone ( ) { … } — function",
							"—Ⓕ– js_value_fwrite ( ) { … } — function",
							"—Ⓕ– js_value_dump ( ) { … } — function",
							"—Ⓕ– js_value_equals ( ) { … } — function",
							"—Ⓕ– js_value_from_char ( ) { … } — function",
							"—Ⓕ– js_value_print ( ) { … } — function",
							"—Ⓕ– js_value_tosize ( ) { … } — function",
							"—Ⓕ– js_value_free_rt ( ) { … } — function",
							"—Ⓕ– js_cstring_ptr ( ) { … } — function",
							"—Ⓕ– js_cstring_dup ( ) { … } — function",
							"—Ⓕ– js_cstring_value ( ) { … } — function",
							"—Ⓕ– js_cstring_dump ( ) { … } — function",
							"—Ⓕ– js_map_new ( ) { … } — function",
							"—Ⓕ– module_name ( ) { … } — function",
							"—Ⓕ– module_namestr ( ) { … } — function",
							"—Ⓕ– module_func ( ) { … } — function",
							"—Ⓕ– module_ns ( ) { … } — function",
							"—Ⓕ– module_exports ( ) { … } — function",
							"—Ⓕ– js_modules_list ( ) { … } — function",
							"—Ⓕ– js_modules_array ( ) { … } — function",
							"—Ⓕ– js_modules_entries ( ) { … } — function",
							"—Ⓕ– js_modules_map ( ) { … } — function",
							"—Ⓕ– js_modules_object ( ) { … } — function",
							"—Ⓕ– module_object ( ) { … } — function",
							"—Ⓕ– module_entry ( ) { … } — function",
							"—Ⓕ– js_module_search ( ) { … } — function",
							"—Ⓕ– js_module_search_ext ( ) { … } — function",
							"—Ⓕ– js_module_normalize ( ) { … } — function",
							"—Ⓕ– js_module_def ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_import_directive ( ) { … } — function",
							"—Ⓕ– js_import_eval ( ) { … } — function",
							"—Ⓕ– js_module_import_default ( ) { … } — function",
							"—Ⓕ– js_module_import_namespace ( ) { … } — function",
							"—Ⓕ– js_module_import ( ) { … } — function",
							"—Ⓕ– js_module_loader_so ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_sharedarraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_map ( ) { … } — function",
							"—Ⓕ– js_is_set ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_regexp ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_typedarray_prototype ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_value ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_atom ( ) { … } — function",
							"—Ⓕ– js_operators_create ( ) { … } — function",
							"—Ⓕ– js_number_new ( ) { … } — function",
							"—Ⓕ– js_date_new ( ) { … } — function",
							"—Ⓕ– js_date_from_ms ( ) { … } — function",
							"—Ⓕ– js_date_from_time_ns ( ) { … } — function",
							"—Ⓕ– js_date_from_timespec ( ) { … } — function",
							"—Ⓕ– js_date_gettime ( ) { … } — function",
							"—Ⓕ– js_date_time ( ) { … } — function",
							"—Ⓒ– timespec { … } ; — type",
							"—Ⓕ– js_date_timespec ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_freevalue ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_fromvalue ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_bytelength ( ) { … } — function",
							"—Ⓕ– js_eval_module ( ) { … } — function",
							"—Ⓕ– js_eval_binary ( ) { … } — function",
							"—Ⓕ– js_eval_buf ( ) { … } — function",
							"—Ⓕ– js_eval_str ( ) { … } — function",
							"—Ⓕ– js_time_ms ( ) { … } — function",
							"—Ⓕ– js_interrupt_handler ( ) { … } — function",
							"—Ⓕ– js_timer_unlink ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_call_handler ( ) { … } — function",
							"—Ⓕ– js_sab_alloc ( ) { … } — function",
							"—Ⓕ– js_sab_free ( ) { … } — function",
							"—Ⓕ– js_sab_dup ( ) { … } — function",
							"—Ⓕ– js_new_message_pipe ( ) { … } — function",
							"—Ⓕ– js_dup_message_pipe ( ) { … } — function",
							"—Ⓕ– js_free_message ( ) { … } — function",
							"—Ⓕ– js_free_message_pipe ( ) { … } — function"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					780,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
						"symkeys":
						[
							[
								30,
								44
							],
							[
								346,
								354
							],
							[
								615,
								629
							],
							[
								772,
								779
							],
							[
								990,
								997
							],
							[
								1117,
								1140
							],
							[
								1548,
								1569
							],
							[
								1954,
								1970
							],
							[
								2620,
								2636
							],
							[
								2805,
								2819
							],
							[
								3427,
								3442
							],
							[
								3884,
								3899
							],
							[
								4170,
								4184
							],
							[
								4557,
								4573
							],
							[
								4933,
								4947
							],
							[
								5282,
								5295
							],
							[
								5617,
								5629
							],
							[
								6078,
								6094
							],
							[
								6260,
								6281
							],
							[
								6472,
								6487
							],
							[
								6652,
								6667
							],
							[
								6880,
								6896
							],
							[
								7472,
								7489
							],
							[
								7664,
								7680
							],
							[
								8595,
								8608
							],
							[
								8820,
								8839
							],
							[
								9047,
								9065
							],
							[
								9532,
								9547
							],
							[
								9727,
								9743
							],
							[
								10155,
								10176
							],
							[
								10352,
								10371
							],
							[
								11082,
								11098
							],
							[
								12237,
								12249
							],
							[
								12460,
								12479
							],
							[
								12617,
								12632
							],
							[
								12922,
								12937
							],
							[
								13110,
								13128
							],
							[
								13336,
								13359
							],
							[
								13614,
								13640
							],
							[
								13935,
								13964
							],
							[
								14372,
								14398
							],
							[
								14688,
								14712
							],
							[
								14918,
								14943
							],
							[
								15225,
								15253
							],
							[
								15647,
								15671
							],
							[
								15956,
								15981
							],
							[
								16263,
								16288
							],
							[
								16535,
								16557
							],
							[
								16760,
								16785
							],
							[
								17038,
								17066
							],
							[
								17376,
								17401
							],
							[
								17908,
								17919
							],
							[
								18003,
								18017
							],
							[
								18089,
								18101
							],
							[
								18228,
								18241
							],
							[
								18424,
								18437
							],
							[
								18576,
								18594
							],
							[
								18785,
								18805
							],
							[
								18991,
								19011
							],
							[
								19204,
								19215
							],
							[
								19354,
								19369
							],
							[
								19721,
								19742
							],
							[
								19904,
								19918
							],
							[
								20078,
								20090
							],
							[
								20247,
								20262
							],
							[
								20425,
								20441
							],
							[
								20660,
								20674
							],
							[
								20754,
								20765
							],
							[
								21006,
								21022
							],
							[
								21238,
								21259
							],
							[
								21439,
								21461
							],
							[
								21673,
								21687
							],
							[
								21756,
								21779
							],
							[
								22020,
								22033
							],
							[
								22244,
								22262
							],
							[
								22441,
								22460
							],
							[
								22763,
								22783
							],
							[
								22976,
								22989
							],
							[
								23391,
								23405
							],
							[
								23566,
								23583
							],
							[
								23808,
								23826
							],
							[
								24344,
								24360
							],
							[
								24486,
								24508
							],
							[
								24594,
								24604
							],
							[
								24605,
								24618
							],
							[
								24888,
								24905
							],
							[
								25154,
								25172
							],
							[
								26026,
								26039
							],
							[
								26295,
								26309
							],
							[
								28207,
								28222
							],
							[
								28493,
								28506
							],
							[
								29259,
								29274
							],
							[
								30699,
								30717
							],
							[
								30864,
								30878
							],
							[
								31080,
								31095
							],
							[
								31244,
								31260
							],
							[
								31475,
								31489
							],
							[
								31629,
								31643
							],
							[
								31896,
								31912
							],
							[
								32084,
								32099
							],
							[
								32313,
								32323
							],
							[
								32517,
								32528
							],
							[
								32634,
								32648
							],
							[
								32843,
								32854
							],
							[
								32950,
								32959
							],
							[
								33056,
								33070
							],
							[
								33533,
								33548
							],
							[
								33609,
								33625
							],
							[
								34147,
								34165
							],
							[
								34936,
								34950
							],
							[
								35159,
								35176
							],
							[
								35692,
								35705
							],
							[
								35810,
								35822
							],
							[
								36107,
								36123
							],
							[
								36491,
								36511
							],
							[
								37196,
								37215
							],
							[
								38192,
								38205
							],
							[
								38537,
								38551
							],
							[
								39038,
								39057
							],
							[
								40125,
								40139
							],
							[
								40410,
								40434
							],
							[
								40855,
								40881
							],
							[
								41268,
								41284
							],
							[
								42173,
								42192
							],
							[
								43530,
								43547
							],
							[
								44068,
								44091
							],
							[
								44325,
								44334
							],
							[
								44555,
								44564
							],
							[
								44786,
								44801
							],
							[
								44985,
								44997
							],
							[
								45175,
								45188
							],
							[
								45383,
								45397
							],
							[
								45579,
								45593
							],
							[
								45975,
								45989
							],
							[
								46191,
								46214
							],
							[
								46429,
								46454
							],
							[
								46683,
								46692
							],
							[
								46992,
								47019
							],
							[
								47101,
								47127
							],
							[
								47317,
								47336
							],
							[
								47612,
								47625
							],
							[
								47759,
								47770
							],
							[
								47960,
								47975
							],
							[
								48134,
								48154
							],
							[
								48265,
								48286
							],
							[
								48401,
								48416
							],
							[
								48706,
								48718
							],
							[
								48914,
								48922
							],
							[
								48923,
								48939
							],
							[
								49124,
								49148
							],
							[
								49287,
								49311
							],
							[
								49680,
								49705
							],
							[
								49963,
								49977
							],
							[
								50492,
								50506
							],
							[
								51142,
								51153
							],
							[
								51806,
								51817
							],
							[
								52094,
								52104
							],
							[
								52243,
								52263
							],
							[
								52348,
								52363
							],
							[
								52494,
								52507
							],
							[
								52602,
								52617
							],
							[
								52876,
								52888
							],
							[
								53055,
								53066
							],
							[
								53318,
								53328
							],
							[
								53499,
								53518
							],
							[
								53908,
								53927
							],
							[
								54013,
								54028
							],
							[
								54205,
								54225
							]
						],
						"symlist":
						[
							" Ⓜ  _ISOC99_SOURCE … — macro object",
							" Ⓜ  INFINITY … — macro object",
							"—Ⓕ– atomic_add_int ( ) { … } — function",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– regexp_flags_fromstring ( ) { … } — function",
							"—Ⓕ– regexp_flags_tostring ( ) { … } — function",
							"—Ⓕ– regexp_from_argv ( ) { … } — function",
							"—Ⓕ– regexp_from_dbuf ( ) { … } — function",
							"—Ⓕ– regexp_compile ( ) { … } — function",
							"—Ⓕ– regexp_to_value ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_clear ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_array_copys ( ) { … } — function",
							"—Ⓕ– js_strv_copys ( ) { … } — function",
							"—Ⓕ– js_atom_dump ( ) { … } — function",
							"—Ⓕ– js_atom_tobinary ( ) { … } — function",
							"—Ⓕ– js_atom_to_cstringlen ( ) { … } — function",
							"—Ⓕ– js_atom_toint32 ( ) { … } — function",
							"—Ⓕ– js_atom_toint64 ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_method ( ) { … } — function",
							"—Ⓕ– js_iterator_new ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_object_equals ( ) { … } — function",
							"—Ⓕ– js_object_is ( ) { … } — function",
							"—Ⓕ– js_object_construct ( ) { … } — function",
							"—Ⓕ– js_object_error ( ) { … } — function",
							"—Ⓕ– js_object_stack ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertyint_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertyint_int32 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int32 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint64 ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_string ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_int ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertydescriptor ( ) { … } — function",
							"—Ⓕ– js_class_id ( ) { … } — function",
							"—Ⓕ– js_class_newid ( ) { … } — function",
							"—Ⓕ– js_class_get ( ) { … } — function",
							"—Ⓕ– js_class_atom ( ) { … } — function",
							"—Ⓕ– js_class_name ( ) { … } — function",
							"—Ⓕ– js_object_tostring ( ) { … } — function",
							"—Ⓕ– js_function_tostring ( ) { … } — function",
							"—Ⓕ– js_function_isnative ( ) { … } — function",
							"—Ⓕ– js_is_input ( ) { … } — function",
							"—Ⓕ– js_propenum_cmp ( ) { … } — function",
							"—Ⓕ– js_propertyenums_free ( ) { … } — function",
							"—Ⓕ– js_strv_free_n ( ) { … } — function",
							"—Ⓕ– js_strv_free ( ) { … } — function",
							"—Ⓕ– js_strv_free_rt ( ) { … } — function",
							"—Ⓕ– js_strv_to_array ( ) { … } — function",
							"—Ⓕ– js_strv_length ( ) { … } — function",
							"—Ⓕ– js_strv_dup ( ) { … } — function",
							"—Ⓕ– js_intv_to_array ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_symbol_invoke_static ( ) { … } — function",
							"—Ⓕ– js_symbol_for ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_to_string ( ) { … } — function",
							"—Ⓕ– js_symbol_to_cstring ( ) { … } — function",
							"—Ⓕ– js_values_dup ( ) { … } — function",
							"—Ⓕ– js_values_free ( ) { … } — function",
							"—Ⓕ– js_values_toarray ( ) { … } — function",
							"—Ⓕ– js_value_type_name ( ) { … } — function",
							"—Ⓕ– js_value_typestr ( ) { … } — function",
							"—Ⓕ– js_value_has_ref_count ( ) { … } — function",
							"—Ⓒ– value_mask { … } ; — type",
							"—Ⓕ– js_value_type ( ) { … } — function",
							"—Ⓕ– js_value_type_get ( ) { … } — function",
							"—Ⓕ– js_value_type_flag ( ) { … } — function",
							"—Ⓕ– js_value_free ( ) { … } — function",
							"—Ⓕ– js_value_clone ( ) { … } — function",
							"—Ⓕ– js_value_fwrite ( ) { … } — function",
							"—Ⓕ– js_value_dump ( ) { … } — function",
							"—Ⓕ– js_value_equals ( ) { … } — function",
							"—Ⓕ– js_value_from_char ( ) { … } — function",
							"—Ⓕ– js_value_print ( ) { … } — function",
							"—Ⓕ– js_value_tosize ( ) { … } — function",
							"—Ⓕ– js_value_free_rt ( ) { … } — function",
							"—Ⓕ– js_cstring_ptr ( ) { … } — function",
							"—Ⓕ– js_cstring_dup ( ) { … } — function",
							"—Ⓕ– js_cstring_value ( ) { … } — function",
							"—Ⓕ– js_cstring_dump ( ) { … } — function",
							"—Ⓕ– js_map_new ( ) { … } — function",
							"—Ⓕ– module_name ( ) { … } — function",
							"—Ⓕ– module_namestr ( ) { … } — function",
							"—Ⓕ– module_func ( ) { … } — function",
							"—Ⓕ– module_ns ( ) { … } — function",
							"—Ⓕ– module_exports ( ) { … } — function",
							"—Ⓕ– js_modules_list ( ) { … } — function",
							"—Ⓕ– js_modules_array ( ) { … } — function",
							"—Ⓕ– js_modules_entries ( ) { … } — function",
							"—Ⓕ– js_modules_map ( ) { … } — function",
							"—Ⓕ– js_modules_object ( ) { … } — function",
							"—Ⓕ– module_object ( ) { … } — function",
							"—Ⓕ– module_entry ( ) { … } — function",
							"—Ⓕ– js_module_search ( ) { … } — function",
							"—Ⓕ– js_module_search_ext ( ) { … } — function",
							"—Ⓕ– js_module_normalize ( ) { … } — function",
							"—Ⓕ– js_module_def ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_import_directive ( ) { … } — function",
							"—Ⓕ– js_import_eval ( ) { … } — function",
							"—Ⓕ– js_module_import_default ( ) { … } — function",
							"—Ⓕ– js_module_import_namespace ( ) { … } — function",
							"—Ⓕ– js_module_import ( ) { … } — function",
							"—Ⓕ– js_module_loader_so ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_sharedarraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_map ( ) { … } — function",
							"—Ⓕ– js_is_set ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_regexp ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_typedarray_prototype ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_value ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_atom ( ) { … } — function",
							"—Ⓕ– js_operators_create ( ) { … } — function",
							"—Ⓕ– js_number_new ( ) { … } — function",
							"—Ⓕ– js_date_new ( ) { … } — function",
							"—Ⓕ– js_date_from_ms ( ) { … } — function",
							"—Ⓕ– js_date_from_time_ns ( ) { … } — function",
							"—Ⓕ– js_date_from_timespec ( ) { … } — function",
							"—Ⓕ– js_date_gettime ( ) { … } — function",
							"—Ⓕ– js_date_time ( ) { … } — function",
							"—Ⓒ– timespec { … } ; — type",
							"—Ⓕ– js_date_timespec ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_freevalue ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_fromvalue ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_bytelength ( ) { … } — function",
							"—Ⓕ– js_eval_module ( ) { … } — function",
							"—Ⓕ– js_eval_binary ( ) { … } — function",
							"—Ⓕ– js_eval_buf ( ) { … } — function",
							"—Ⓕ– js_eval_str ( ) { … } — function",
							"—Ⓕ– js_time_ms ( ) { … } — function",
							"—Ⓕ– js_interrupt_handler ( ) { … } — function",
							"—Ⓕ– js_timer_unlink ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_call_handler ( ) { … } — function",
							"—Ⓕ– js_sab_alloc ( ) { … } — function",
							"—Ⓕ– js_sab_free ( ) { … } — function",
							"—Ⓕ– js_sab_dup ( ) { … } — function",
							"—Ⓕ– js_new_message_pipe ( ) { … } — function",
							"—Ⓕ– js_dup_message_pipe ( ) { … } — function",
							"—Ⓕ– js_free_message ( ) { … } — function",
							"—Ⓕ– js_free_message_pipe ( ) { … } — function"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				],
				[
					781,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
						"symkeys":
						[
							[
								30,
								44
							],
							[
								346,
								354
							],
							[
								615,
								629
							],
							[
								772,
								779
							],
							[
								990,
								997
							],
							[
								1117,
								1140
							],
							[
								1548,
								1569
							],
							[
								1954,
								1970
							],
							[
								2620,
								2636
							],
							[
								2805,
								2819
							],
							[
								3427,
								3442
							],
							[
								3884,
								3899
							],
							[
								4170,
								4184
							],
							[
								4557,
								4573
							],
							[
								4933,
								4947
							],
							[
								5282,
								5295
							],
							[
								5617,
								5629
							],
							[
								6078,
								6094
							],
							[
								6260,
								6281
							],
							[
								6472,
								6487
							],
							[
								6652,
								6667
							],
							[
								6880,
								6896
							],
							[
								7472,
								7489
							],
							[
								7664,
								7680
							],
							[
								8595,
								8608
							],
							[
								8820,
								8839
							],
							[
								9047,
								9065
							],
							[
								9532,
								9547
							],
							[
								9727,
								9743
							],
							[
								10155,
								10176
							],
							[
								10352,
								10371
							],
							[
								11082,
								11098
							],
							[
								12237,
								12249
							],
							[
								12460,
								12479
							],
							[
								12617,
								12632
							],
							[
								12922,
								12937
							],
							[
								13110,
								13128
							],
							[
								13336,
								13359
							],
							[
								13614,
								13640
							],
							[
								13935,
								13964
							],
							[
								14372,
								14398
							],
							[
								14688,
								14712
							],
							[
								14918,
								14943
							],
							[
								15225,
								15253
							],
							[
								15647,
								15671
							],
							[
								15956,
								15981
							],
							[
								16263,
								16288
							],
							[
								16535,
								16557
							],
							[
								16760,
								16785
							],
							[
								17038,
								17066
							],
							[
								17376,
								17401
							],
							[
								17908,
								17919
							],
							[
								18003,
								18017
							],
							[
								18089,
								18101
							],
							[
								18228,
								18241
							],
							[
								18424,
								18437
							],
							[
								18576,
								18594
							],
							[
								18785,
								18805
							],
							[
								18991,
								19011
							],
							[
								19204,
								19215
							],
							[
								19354,
								19369
							],
							[
								19721,
								19742
							],
							[
								19904,
								19918
							],
							[
								20078,
								20090
							],
							[
								20247,
								20262
							],
							[
								20425,
								20441
							],
							[
								20660,
								20674
							],
							[
								20754,
								20765
							],
							[
								21006,
								21022
							],
							[
								21238,
								21259
							],
							[
								21439,
								21461
							],
							[
								21673,
								21687
							],
							[
								21756,
								21779
							],
							[
								22020,
								22033
							],
							[
								22244,
								22262
							],
							[
								22441,
								22460
							],
							[
								22763,
								22783
							],
							[
								22976,
								22989
							],
							[
								23391,
								23405
							],
							[
								23566,
								23583
							],
							[
								23808,
								23826
							],
							[
								24344,
								24360
							],
							[
								24486,
								24508
							],
							[
								24594,
								24604
							],
							[
								24605,
								24618
							],
							[
								24888,
								24905
							],
							[
								25154,
								25172
							],
							[
								26026,
								26039
							],
							[
								26295,
								26309
							],
							[
								28207,
								28222
							],
							[
								28493,
								28506
							],
							[
								29259,
								29274
							],
							[
								30699,
								30717
							],
							[
								30864,
								30878
							],
							[
								31080,
								31095
							],
							[
								31244,
								31260
							],
							[
								31475,
								31489
							],
							[
								31629,
								31643
							],
							[
								31896,
								31912
							],
							[
								32084,
								32099
							],
							[
								32313,
								32323
							],
							[
								32517,
								32528
							],
							[
								32634,
								32648
							],
							[
								32843,
								32854
							],
							[
								32950,
								32959
							],
							[
								33056,
								33070
							],
							[
								33533,
								33548
							],
							[
								33609,
								33625
							],
							[
								34147,
								34165
							],
							[
								34936,
								34950
							],
							[
								35159,
								35176
							],
							[
								35692,
								35705
							],
							[
								35810,
								35822
							],
							[
								36107,
								36123
							],
							[
								36491,
								36511
							],
							[
								37196,
								37215
							],
							[
								38192,
								38205
							],
							[
								38537,
								38551
							],
							[
								39038,
								39057
							],
							[
								40144,
								40158
							],
							[
								40429,
								40453
							],
							[
								40874,
								40900
							],
							[
								41287,
								41303
							],
							[
								42192,
								42211
							],
							[
								43549,
								43566
							],
							[
								44087,
								44110
							],
							[
								44344,
								44353
							],
							[
								44574,
								44583
							],
							[
								44805,
								44820
							],
							[
								45004,
								45016
							],
							[
								45194,
								45207
							],
							[
								45402,
								45416
							],
							[
								45598,
								45612
							],
							[
								45994,
								46008
							],
							[
								46210,
								46233
							],
							[
								46448,
								46473
							],
							[
								46702,
								46711
							],
							[
								47011,
								47038
							],
							[
								47120,
								47146
							],
							[
								47336,
								47355
							],
							[
								47631,
								47644
							],
							[
								47778,
								47789
							],
							[
								47979,
								47994
							],
							[
								48153,
								48173
							],
							[
								48284,
								48305
							],
							[
								48420,
								48435
							],
							[
								48725,
								48737
							],
							[
								48933,
								48941
							],
							[
								48942,
								48958
							],
							[
								49143,
								49167
							],
							[
								49306,
								49330
							],
							[
								49699,
								49724
							],
							[
								49982,
								49996
							],
							[
								50511,
								50525
							],
							[
								51161,
								51172
							],
							[
								51825,
								51836
							],
							[
								52113,
								52123
							],
							[
								52262,
								52282
							],
							[
								52367,
								52382
							],
							[
								52513,
								52526
							],
							[
								52621,
								52636
							],
							[
								52895,
								52907
							],
							[
								53074,
								53085
							],
							[
								53337,
								53347
							],
							[
								53518,
								53537
							],
							[
								53927,
								53946
							],
							[
								54032,
								54047
							],
							[
								54224,
								54244
							]
						],
						"symlist":
						[
							" Ⓜ  _ISOC99_SOURCE … — macro object",
							" Ⓜ  INFINITY … — macro object",
							"—Ⓕ– atomic_add_int ( ) { … } — function",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– regexp_flags_fromstring ( ) { … } — function",
							"—Ⓕ– regexp_flags_tostring ( ) { … } — function",
							"—Ⓕ– regexp_from_argv ( ) { … } — function",
							"—Ⓕ– regexp_from_dbuf ( ) { … } — function",
							"—Ⓕ– regexp_compile ( ) { … } — function",
							"—Ⓕ– regexp_to_value ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_clear ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_array_copys ( ) { … } — function",
							"—Ⓕ– js_strv_copys ( ) { … } — function",
							"—Ⓕ– js_atom_dump ( ) { … } — function",
							"—Ⓕ– js_atom_tobinary ( ) { … } — function",
							"—Ⓕ– js_atom_to_cstringlen ( ) { … } — function",
							"—Ⓕ– js_atom_toint32 ( ) { … } — function",
							"—Ⓕ– js_atom_toint64 ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_method ( ) { … } — function",
							"—Ⓕ– js_iterator_new ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_object_equals ( ) { … } — function",
							"—Ⓕ– js_object_is ( ) { … } — function",
							"—Ⓕ– js_object_construct ( ) { … } — function",
							"—Ⓕ– js_object_error ( ) { … } — function",
							"—Ⓕ– js_object_stack ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertyint_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertyint_int32 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int32 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint64 ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_string ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_int ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertydescriptor ( ) { … } — function",
							"—Ⓕ– js_class_id ( ) { … } — function",
							"—Ⓕ– js_class_newid ( ) { … } — function",
							"—Ⓕ– js_class_get ( ) { … } — function",
							"—Ⓕ– js_class_atom ( ) { … } — function",
							"—Ⓕ– js_class_name ( ) { … } — function",
							"—Ⓕ– js_object_tostring ( ) { … } — function",
							"—Ⓕ– js_function_tostring ( ) { … } — function",
							"—Ⓕ– js_function_isnative ( ) { … } — function",
							"—Ⓕ– js_is_input ( ) { … } — function",
							"—Ⓕ– js_propenum_cmp ( ) { … } — function",
							"—Ⓕ– js_propertyenums_free ( ) { … } — function",
							"—Ⓕ– js_strv_free_n ( ) { … } — function",
							"—Ⓕ– js_strv_free ( ) { … } — function",
							"—Ⓕ– js_strv_free_rt ( ) { … } — function",
							"—Ⓕ– js_strv_to_array ( ) { … } — function",
							"—Ⓕ– js_strv_length ( ) { … } — function",
							"—Ⓕ– js_strv_dup ( ) { … } — function",
							"—Ⓕ– js_intv_to_array ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_symbol_invoke_static ( ) { … } — function",
							"—Ⓕ– js_symbol_for ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_to_string ( ) { … } — function",
							"—Ⓕ– js_symbol_to_cstring ( ) { … } — function",
							"—Ⓕ– js_values_dup ( ) { … } — function",
							"—Ⓕ– js_values_free ( ) { … } — function",
							"—Ⓕ– js_values_toarray ( ) { … } — function",
							"—Ⓕ– js_value_type_name ( ) { … } — function",
							"—Ⓕ– js_value_typestr ( ) { … } — function",
							"—Ⓕ– js_value_has_ref_count ( ) { … } — function",
							"—Ⓒ– value_mask { … } ; — type",
							"—Ⓕ– js_value_type ( ) { … } — function",
							"—Ⓕ– js_value_type_get ( ) { … } — function",
							"—Ⓕ– js_value_type_flag ( ) { … } — function",
							"—Ⓕ– js_value_free ( ) { … } — function",
							"—Ⓕ– js_value_clone ( ) { … } — function",
							"—Ⓕ– js_value_fwrite ( ) { … } — function",
							"—Ⓕ– js_value_dump ( ) { … } — function",
							"—Ⓕ– js_value_equals ( ) { … } — function",
							"—Ⓕ– js_value_from_char ( ) { … } — function",
							"—Ⓕ– js_value_print ( ) { … } — function",
							"—Ⓕ– js_value_tosize ( ) { … } — function",
							"—Ⓕ– js_value_free_rt ( ) { … } — function",
							"—Ⓕ– js_cstring_ptr ( ) { … } — function",
							"—Ⓕ– js_cstring_dup ( ) { … } — function",
							"—Ⓕ– js_cstring_value ( ) { … } — function",
							"—Ⓕ– js_cstring_dump ( ) { … } — function",
							"—Ⓕ– js_map_new ( ) { … } — function",
							"—Ⓕ– module_name ( ) { … } — function",
							"—Ⓕ– module_namestr ( ) { … } — function",
							"—Ⓕ– module_func ( ) { … } — function",
							"—Ⓕ– module_ns ( ) { … } — function",
							"—Ⓕ– module_exports ( ) { … } — function",
							"—Ⓕ– js_modules_list ( ) { … } — function",
							"—Ⓕ– js_modules_array ( ) { … } — function",
							"—Ⓕ– js_modules_entries ( ) { … } — function",
							"—Ⓕ– js_modules_map ( ) { … } — function",
							"—Ⓕ– js_modules_object ( ) { … } — function",
							"—Ⓕ– module_object ( ) { … } — function",
							"—Ⓕ– module_entry ( ) { … } — function",
							"—Ⓕ– js_module_search ( ) { … } — function",
							"—Ⓕ– js_module_search_ext ( ) { … } — function",
							"—Ⓕ– js_module_normalize ( ) { … } — function",
							"—Ⓕ– js_module_def ( ) { … } — function",
							"—Ⓕ– js_module_find ( ) { … } — function",
							"—Ⓕ– js_import_directive ( ) { … } — function",
							"—Ⓕ– js_import_eval ( ) { … } — function",
							"—Ⓕ– js_module_import_default ( ) { … } — function",
							"—Ⓕ– js_module_import_namespace ( ) { … } — function",
							"—Ⓕ– js_module_import ( ) { … } — function",
							"—Ⓕ– js_module_loader_so ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_sharedarraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_map ( ) { … } — function",
							"—Ⓕ– js_is_set ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_regexp ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_is_dataview ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_typedarray_prototype ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_value ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_atom ( ) { … } — function",
							"—Ⓕ– js_operators_create ( ) { … } — function",
							"—Ⓕ– js_number_new ( ) { … } — function",
							"—Ⓕ– js_date_new ( ) { … } — function",
							"—Ⓕ– js_date_from_ms ( ) { … } — function",
							"—Ⓕ– js_date_from_time_ns ( ) { … } — function",
							"—Ⓕ– js_date_from_timespec ( ) { … } — function",
							"—Ⓕ– js_date_gettime ( ) { … } — function",
							"—Ⓕ– js_date_time ( ) { … } — function",
							"—Ⓒ– timespec { … } ; — type",
							"—Ⓕ– js_date_timespec ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_freevalue ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_fromvalue ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_bytelength ( ) { … } — function",
							"—Ⓕ– js_eval_module ( ) { … } — function",
							"—Ⓕ– js_eval_binary ( ) { … } — function",
							"—Ⓕ– js_eval_buf ( ) { … } — function",
							"—Ⓕ– js_eval_str ( ) { … } — function",
							"—Ⓕ– js_time_ms ( ) { … } — function",
							"—Ⓕ– js_interrupt_handler ( ) { … } — function",
							"—Ⓕ– js_timer_unlink ( ) { … } — function",
							"—Ⓕ– js_timer_free ( ) { … } — function",
							"—Ⓕ– js_call_handler ( ) { … } — function",
							"—Ⓕ– js_sab_alloc ( ) { … } — function",
							"—Ⓕ– js_sab_free ( ) { … } — function",
							"—Ⓕ– js_sab_dup ( ) { … } — function",
							"—Ⓕ– js_new_message_pipe ( ) { … } — function",
							"—Ⓕ– js_dup_message_pipe ( ) { … } — function",
							"—Ⓕ– js_free_message ( ) { … } — function",
							"—Ⓕ– js_free_message_pipe ( ) { … } — function"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "utils.c",
			"settings":
			{
				"buffer_size": 54807,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3476,
					1,
					"cut",
					null,
					"AQAAABycAAAAAAAAHJwAAAAAAAA0AAAAIGlmKGhhc19wcm9wKQogICAgICBkYnVmX3B1dG0oZGIsICIuIiwgaW1wLnByb3AsIDApOw",
					"AQAAAAAAAAABAAAAHJwAAAAAAABQnAAAAAAAAAAAAAAAAPC/"
				],
				[
					3477,
					1,
					"insert",
					{
						"characters": "}"
					},
					"AQAAABycAAAAAAAAHZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHJwAAAAAAAAcnAAAAAAAAAAAAAAAAPC/"
				],
				[
					3478,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAB2cAAAAAAAAHpwAAAAAAAAAAAAAHpwAAAAAAAAhnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHZwAAAAAAAAdnAAAAAAAAAAAAAAAAPC/"
				],
				[
					3479,
					1,
					"paste",
					null,
					"AQAAACGcAAAAAAAAVZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIZwAAAAAAAAhnAAAAAAAAAAAAAAAAPC/"
				],
				[
					3480,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BwAAAFWcAAAAAAAAVpwAAAAAAAAAAAAAVpwAAAAAAABcnAAAAAAAAAAAAABWnAAAAAAAAFacAAAAAAAABgAAACAgICAgIFacAAAAAAAAWpwAAAAAAAAAAAAAWpwAAAAAAABbnAAAAAAAAAAAAABbnAAAAAAAAF+cAAAAAAAAAAAAAFacAAAAAAAAVpwAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAVZwAAAAAAABVnAAAAAAAAAAAAAAAAPC/"
				],
				[
					3491,
					1,
					"insert",
					{
						"characters": "\".\","
					},
					"BQAAALqbAAAAAAAAu5sAAAAAAAAAAAAAWJwAAAAAAABYnAAAAAAAAAQAAAAgICAgu5sAAAAAAAC8mwAAAAAAAAAAAAC8mwAAAAAAAL2bAAAAAAAAAAAAAL2bAAAAAAAAvpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAupsAAAAAAAC6mwAAAAAAAAAAAAAAAPC/"
				],
				[
					3492,
					1,
					"insert",
					{
						"characters": " ium"
					},
					"BAAAAL6bAAAAAAAAv5sAAAAAAAAAAAAAv5sAAAAAAADAmwAAAAAAAAAAAADAmwAAAAAAAMGbAAAAAAAAAAAAAMGbAAAAAAAAwpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvpsAAAAAAAC+mwAAAAAAAAAAAAAAAPC/"
				],
				[
					3493,
					2,
					"left_delete",
					null,
					"AgAAAMGbAAAAAAAAwZsAAAAAAAABAAAAbcCbAAAAAAAAwJsAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAwpsAAAAAAADCmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3494,
					1,
					"insert",
					{
						"characters": "mp.prop,"
					},
					"CAAAAMCbAAAAAAAAwZsAAAAAAAAAAAAAwZsAAAAAAADCmwAAAAAAAAAAAADCmwAAAAAAAMObAAAAAAAAAAAAAMObAAAAAAAAxJsAAAAAAAAAAAAAxJsAAAAAAADFmwAAAAAAAAAAAADFmwAAAAAAAMabAAAAAAAAAAAAAMabAAAAAAAAx5sAAAAAAAAAAAAAx5sAAAAAAADImwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwJsAAAAAAADAmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3495,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAMibAAAAAAAAyZsAAAAAAAAAAAAAyZsAAAAAAADKmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyJsAAAAAAADImwAAAAAAAAAAAAAAAPC/"
				],
				[
					3496,
					1,
					"right_delete",
					null,
					"AQAAAMqbAAAAAAAAypsAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAypsAAAAAAADKmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3501,
					1,
					"insert",
					{
						"characters": "imp.prop"
					},
					"CAAAALqbAAAAAAAAu5sAAAAAAAAAAAAAu5sAAAAAAAC8mwAAAAAAAAAAAAC8mwAAAAAAAL2bAAAAAAAAAAAAAL2bAAAAAAAAvpsAAAAAAAAAAAAAvpsAAAAAAAC/mwAAAAAAAAAAAAC/mwAAAAAAAMCbAAAAAAAAAAAAAMCbAAAAAAAAwZsAAAAAAAAAAAAAwZsAAAAAAADCmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAupsAAAAAAAC6mwAAAAAAAAAAAAAAAPC/"
				],
				[
					3502,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAMKbAAAAAAAAw5sAAAAAAAAAAAAAw5sAAAAAAADEmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwpsAAAAAAADCmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3503,
					1,
					"left_delete",
					null,
					"AQAAAMObAAAAAAAAw5sAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAxJsAAAAAAADEmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3504,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAMObAAAAAAAAxJsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAw5sAAAAAAADDmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3505,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMSbAAAAAAAAxZsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxJsAAAAAAADEmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3506,
					1,
					"left_delete",
					null,
					"AQAAAMSbAAAAAAAAxJsAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAxZsAAAAAAADFmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3507,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAMSbAAAAAAAAxZsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxJsAAAAAAADEmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3508,
					1,
					"insert",
					{
						"characters": " *imp.prop"
					},
					"CgAAAMWbAAAAAAAAxpsAAAAAAAAAAAAAxpsAAAAAAADHmwAAAAAAAAAAAADHmwAAAAAAAMibAAAAAAAAAAAAAMibAAAAAAAAyZsAAAAAAAAAAAAAyZsAAAAAAADKmwAAAAAAAAAAAADKmwAAAAAAAMubAAAAAAAAAAAAAMubAAAAAAAAzJsAAAAAAAAAAAAAzJsAAAAAAADNmwAAAAAAAAAAAADNmwAAAAAAAM6bAAAAAAAAAAAAAM6bAAAAAAAAz5sAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxZsAAAAAAADFmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3509,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAM+bAAAAAAAA0JsAAAAAAAAAAAAA0JsAAAAAAADRmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz5sAAAAAAADPmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3510,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANGbAAAAAAAA0psAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0ZsAAAAAAADRmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3512,
					1,
					"insert",
					{
						"characters": " :"
					},
					"AgAAANWbAAAAAAAA1psAAAAAAAAAAAAA1psAAAAAAADXmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1ZsAAAAAAADVmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3513,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAANebAAAAAAAA2JsAAAAAAAAAAAAA2JsAAAAAAADZmwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA15sAAAAAAADXmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3528,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEicAAAAAAAASZwAAAAAAAAAAAAASZwAAAAAAABMnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASJwAAAAAAABInAAAAAAAAAAAAAAAvJBA"
				],
				[
					3532,
					2,
					"left_delete",
					null,
					"AwAAAE2cAAAAAAAATZwAAAAAAAA5AAAAICAgIGlmKGhhc19wcm9wKQogICAgICBkYnVmX3B1dG0oZGIsICIuIiwgaW1wLnByb3AsIDApOwoKSZwAAAAAAABJnAAAAAAAAAMAAAAgICBJnAAAAAAAAEmcAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAATZwAAAAAAACGnAAAAAAAAAAAAAAAAAAA"
				],
				[
					3546,
					1,
					"cut",
					null,
					"AQAAAEqcAAAAAAAASpwAAAAAAAAYAAAAICAgIGRidWZfcHV0YyhkYiwgJyknKTsK",
					"AQAAAAAAAAABAAAASpwAAAAAAABinAAAAAAAAAAAAAAAAAAA"
				],
				[
					3549,
					1,
					"paste",
					null,
					"AQAAAEScAAAAAAAAXJwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARJwAAAAAAABEnAAAAAAAAAAAAAAAAAAA"
				],
				[
					3553,
					4,
					"left_delete",
					null,
					"BAAAAF+cAAAAAAAAX5wAAAAAAAABAAAAfV6cAAAAAAAAXpwAAAAAAAABAAAAIFycAAAAAAAAXJwAAAAAAAACAAAAICBbnAAAAAAAAFucAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAYJwAAAAAAABgnAAAAAAAAAAAAAAA4GlA"
				],
				[
					3555,
					1,
					"left_delete",
					null,
					"AQAAAFucAAAAAAAAW5wAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAXJwAAAAAAABcnAAAAAAAAAAAAAAA4GlA"
				],
				[
					3582,
					1,
					"insert",
					{
						"characters": " ||"
					},
					"AwAAAG2bAAAAAAAAbpsAAAAAAAAAAAAAbpsAAAAAAABvmwAAAAAAAAAAAABvmwAAAAAAAHCbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbZsAAAAAAABtmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3583,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHCbAAAAAAAAcZsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcJsAAAAAAABwmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3591,
					1,
					"cut",
					null,
					"AQAAAMWYAAAAAAAAxZgAAAAAAAArAAAAICBCT09MIGhhc19wcm9wID0gaW1wLnByb3AgJiYgaW1wLnByb3BbMF07Cg",
					"AQAAAAAAAAABAAAAxZgAAAAAAADwmAAAAAAAAAAAAAAAAPC/"
				],
				[
					3592,
					2,
					"paste",
					null,
					"AgAAAMWYAAAAAAAA8JgAAAAAAAAAAAAA8JgAAAAAAAAbmQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxZgAAAAAAADFmAAAAAAAAAAAAAAAAPC/"
				],
				[
					3597,
					5,
					"left_delete",
					null,
					"BQAAAPuYAAAAAAAA+5gAAAAAAAAEAAAAcHJvcPqYAAAAAAAA+pgAAAAAAAABAAAAX/mYAAAAAAAA+ZgAAAAAAAABAAAAc/iYAAAAAAAA+JgAAAAAAAABAAAAYfeYAAAAAAAA95gAAAAAAAABAAAAaA",
					"AQAAAAAAAAABAAAA+5gAAAAAAAD/mAAAAAAAAAAAAAAAAPC/"
				],
				[
					3598,
					1,
					"insert",
					{
						"characters": "is_ns"
					},
					"BQAAAPeYAAAAAAAA+JgAAAAAAAAAAAAA+JgAAAAAAAD5mAAAAAAAAAAAAAD5mAAAAAAAAPqYAAAAAAAAAAAAAPqYAAAAAAAA+5gAAAAAAAAAAAAA+5gAAAAAAAD8mAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA95gAAAAAAAD3mAAAAAAAAAAAAAAAAPC/"
				],
				[
					3600,
					1,
					"insert",
					{
						"characters": "imp.spec"
					},
					"CAAAAP+YAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAABmQAAAAAAAAAAAAABmQAAAAAAAAKZAAAAAAAAAAAAAAKZAAAAAAAAA5kAAAAAAAAAAAAAA5kAAAAAAAAEmQAAAAAAAAAAAAAEmQAAAAAAAAWZAAAAAAAAAAAAAAWZAAAAAAAABpkAAAAAAAAAAAAABpkAAAAAAAAHmQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/5gAAAAAAAD/mAAAAAAAAAAAAAAAAPC/"
				],
				[
					3601,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAAeZAAAAAAAACJkAAAAAAAAAAAAACJkAAAAAAAAJmQAAAAAAAAAAAAAJmQAAAAAAAAqZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAB5kAAAAAAAAHmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3602,
					1,
					"insert",
					{
						"characters": " u"
					},
					"AgAAAAqZAAAAAAAAC5kAAAAAAAAAAAAAC5kAAAAAAAAMmQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACpkAAAAAAAAKmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3603,
					1,
					"left_delete",
					null,
					"AQAAAAuZAAAAAAAAC5kAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAADJkAAAAAAAAMmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3604,
					1,
					"insert",
					{
						"characters": "uno,"
					},
					"BAAAAAuZAAAAAAAADJkAAAAAAAAAAAAADJkAAAAAAAANmQAAAAAAAAAAAAANmQAAAAAAAA6ZAAAAAAAAAAAAAA6ZAAAAAAAAD5kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC5kAAAAAAAALmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3605,
					4,
					"left_delete",
					null,
					"BAAAAA6ZAAAAAAAADpkAAAAAAAABAAAALA2ZAAAAAAAADZkAAAAAAAABAAAAbwyZAAAAAAAADJkAAAAAAAABAAAAbguZAAAAAAAAC5kAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAD5kAAAAAAAAPmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3606,
					1,
					"insert",
					{
						"characters": "uno"
					},
					"AwAAAAuZAAAAAAAADJkAAAAAAAAAAAAADJkAAAAAAAANmQAAAAAAAAAAAAANmQAAAAAAAA6ZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC5kAAAAAAAALmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3607,
					3,
					"left_delete",
					null,
					"AwAAAA2ZAAAAAAAADZkAAAAAAAABAAAAbwyZAAAAAAAADJkAAAAAAAABAAAAbguZAAAAAAAAC5kAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAADpkAAAAAAAAOmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3608,
					1,
					"insert",
					{
						"characters": "imp.spec[0"
					},
					"CgAAAAuZAAAAAAAADJkAAAAAAAAAAAAADJkAAAAAAAANmQAAAAAAAAAAAAANmQAAAAAAAA6ZAAAAAAAAAAAAAA6ZAAAAAAAAD5kAAAAAAAAAAAAAD5kAAAAAAAAQmQAAAAAAAAAAAAAQmQAAAAAAABGZAAAAAAAAAAAAABGZAAAAAAAAEpkAAAAAAAAAAAAAEpkAAAAAAAATmQAAAAAAAAAAAAATmQAAAAAAABSZAAAAAAAAAAAAABSZAAAAAAAAFZkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAC5kAAAAAAAALmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3609,
					1,
					"insert",
					{
						"characters": "]"
					},
					"AQAAABWZAAAAAAAAFpkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFZkAAAAAAAAVmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3610,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABaZAAAAAAAAF5kAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFpkAAAAAAAAWmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3611,
					1,
					"left_delete",
					null,
					"AQAAABaZAAAAAAAAFpkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAF5kAAAAAAAAXmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3612,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAABaZAAAAAAAAF5kAAAAAAAAAAAAAF5kAAAAAAAAYmQAAAAAAAAAAAAAYmQAAAAAAABmZAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFpkAAAAAAAAWmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3613,
					1,
					"insert",
					{
						"characters": " '*'"
					},
					"BAAAABmZAAAAAAAAGpkAAAAAAAAAAAAAGpkAAAAAAAAbmQAAAAAAAAAAAAAbmQAAAAAAAByZAAAAAAAAAAAAAByZAAAAAAAAHZkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGZkAAAAAAAAZmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3616,
					1,
					"left_delete",
					null,
					"AQAAAB2ZAAAAAAAAHZkAAAAAAAAXAAAAaW1wLnByb3AgJiYgaW1wLnByb3BbMF0",
					"AQAAAAAAAAABAAAAHZkAAAAAAAA0mQAAAAAAAAAAAAAAAPC/"
				],
				[
					3627,
					1,
					"paste",
					null,
					"AgAAAM6ZAAAAAAAA05kAAAAAAAAAAAAA05kAAAAAAADTmQAAAAAAABIAAABpbXAuc3BlY1swXSA9PSAnKic",
					"AQAAAAAAAAABAAAAzpkAAAAAAADgmQAAAAAAAAAAAAAAAPC/"
				],
				[
					3633,
					1,
					"paste",
					null,
					"AQAAAJObAAAAAAAAmJsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk5sAAAAAAACTmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3659,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAIebAAAAAAAAiJsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh5sAAAAAAACHmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3665,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAJqbAAAAAAAAm5sAAAAAAAAAAAAAm5sAAAAAAACcmwAAAAAAAAAAAACcmwAAAAAAAJ2bAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmpsAAAAAAACamwAAAAAAAAAAAAAAAPC/"
				],
				[
					3666,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJ2bAAAAAAAAnpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnZsAAAAAAACdmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3667,
					1,
					"insert",
					{
						"characters": "var"
					},
					"AwAAAJ6bAAAAAAAAn5sAAAAAAAAAAAAAn5sAAAAAAACgmwAAAAAAAAAAAACgmwAAAAAAAKGbAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnpsAAAAAAACemwAAAAAAAAAAAAAAAPC/"
				],
				[
					3668,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAKGbAAAAAAAAo5sAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoZsAAAAAAAChmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3669,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAKKbAAAAAAAAo5sAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAopsAAAAAAACimwAAAAAAAAAAAAAAAPC/"
				],
				[
					3671,
					1,
					"insert",
					{
						"characters": " !="
					},
					"AwAAAKSbAAAAAAAApZsAAAAAAAAAAAAApZsAAAAAAACmmwAAAAAAAAAAAACmmwAAAAAAAKebAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApJsAAAAAAACkmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3672,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKebAAAAAAAAqJsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAp5sAAAAAAACnmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3673,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAKibAAAAAAAAqpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqJsAAAAAAAComwAAAAAAAAAAAAAAAPC/"
				],
				[
					3674,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAKmbAAAAAAAAqpsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqZsAAAAAAACpmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3676,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAKubAAAAAAAArJsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAq5sAAAAAAACrmwAAAAAAAAAAAAAAAPC/"
				],
				[
					3678,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC11QAAI3VuZGVmIF9JU09DOTlfU09VUkNFCiNkZWZpbmUgX0lTT0M5OV9TT1VSQ0UgMQoKI2luY2x1ZGUgInV0aWxzLmgiCiNpbmNsdWRlICJsaXN0LmgiCiNpbmNsdWRlICJjdXRpbHMuaCIKI2luY2x1ZGUgInZlY3Rvci5oIgojaW5jbHVkZSAibGlicmVnZXhwLmgiCiNpbmNsdWRlICJxdWlja2pzLWludGVybmFsLmgiCiNpbmNsdWRlICJidWZmZXItdXRpbHMuaCIKI2luY2x1ZGUgPHRpbWUuaD4KI2luY2x1ZGUgPG1hdGguaD4KI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNsdWRlIDxzaWduYWwuaD4KI2luY2x1ZGUgPHN5cy9zdGF0Lmg+CiNpbmNsdWRlIDxkbGZjbi5oPgoKI2lmbmRlZiBJTkZJTklUWQojZGVmaW5lIElORklOSVRZIF9fYnVpbHRpbl9pbmYoKQojZW5kaWYKClZJU0lCTEUgY29uc3QgY2hhcioganNfZGVmYXVsdF9tb2R1bGVfcGF0aCA9ICIuIgojaWZkZWYgQ09ORklHX1BSRUZJWAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiOiIgQ09ORklHX1BSRUZJWCAiL2xpYi9xdWlja2pzIgojZW5kaWYKICAgIDsKCiNpZmRlZiBVU0VfV09SS0VSCiNpbmNsdWRlIDxwdGhyZWFkLmg+CiNpbmNsdWRlIDxzdGRhdG9taWMuaD4KCnN0YXRpYyBpbnQKYXRvbWljX2FkZF9pbnQoaW50KiBwdHIsIGludCB2KSB7CiAgcmV0dXJuIGF0b21pY19mZXRjaF9hZGQoKF9BdG9taWModWludDMyX3QpKilwdHIsIHYpICsgdjsKfQojZW5kaWYKCiNpZiBkZWZpbmVkKF9fbGludXhfXykgfHwgZGVmaW5lZChfX0FQUExFX18pCnVpbnQ2NF90CnRpbWVfdXModm9pZCkgewogIHN0cnVjdCB0aW1lc3BlYyB0czsKICBjbG9ja19nZXR0aW1lKENMT0NLX01PTk9UT05JQywgJnRzKTsKICByZXR1cm4gKHVpbnQ2NF90KXRzLnR2X3NlYyAqIDEwMDAwMDAgKyAodHMudHZfbnNlYyAvIDEwMDApOwp9CiNlbHNlCi8qIG1vcmUgcG9ydGFibGUsIGJ1dCBkb2VzIG5vdCB3b3JrIGlmIHRoZSBkYXRlIGlzIHVwZGF0ZWQgKi8KdWludDY0X3QKdGltZV91cyh2b2lkKSB7CiAgc3RydWN0IHRpbWV2YWwgdHY7CiAgZ2V0dGltZW9mZGF5KCZ0diwgMCk7CiAgcmV0dXJuIChpbnQ2NF90KXR2LnR2X3NlYyAqIDEwMDAwMDAgKyB0di50dl91c2VjOwp9CiNlbmRpZgoKaW50CnJlZ2V4cF9mbGFnc19mcm9tc3RyaW5nKGNvbnN0IGNoYXIqIHMpIHsKICBpbnQgZmxhZ3MgPSAwOwoKICBpZihzdHJfY29udGFpbnMocywgJ2cnKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX0dMT0JBTDsKICBpZihzdHJfY29udGFpbnMocywgJ2knKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX0lHTk9SRUNBU0U7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICdtJykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19NVUxUSUxJTkU7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICdzJykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19ET1RBTEw7CiAgaWYoc3RyX2NvbnRhaW5zKHMsICd1JykpCiAgICBmbGFncyB8PSBMUkVfRkxBR19VVEYxNjsKICBpZihzdHJfY29udGFpbnMocywgJ3knKSkKICAgIGZsYWdzIHw9IExSRV9GTEFHX1NUSUNLWTsKCiAgcmV0dXJuIGZsYWdzOwp9CgppbnQKcmVnZXhwX2ZsYWdzX3Rvc3RyaW5nKGludCBmbGFncywgY2hhciogYnVmKSB7CiAgY2hhciogb3V0ID0gYnVmOwoKICBpZihmbGFncyAmIExSRV9GTEFHX0dMT0JBTCkKICAgICpvdXQrKyA9ICdnJzsKICBpZihmbGFncyAmIExSRV9GTEFHX0lHTk9SRUNBU0UpCiAgICAqb3V0KysgPSAnaSc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19NVUxUSUxJTkUpCiAgICAqb3V0KysgPSAnbSc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19ET1RBTEwpCiAgICAqb3V0KysgPSAncyc7CiAgaWYoZmxhZ3MgJiBMUkVfRkxBR19VVEYxNikKICAgICpvdXQrKyA9ICd1JzsKICBpZihmbGFncyAmIExSRV9GTEFHX1NUSUNLWSkKICAgICpvdXQrKyA9ICd5JzsKCiAgKm91dCA9ICdcMCc7CiAgcmV0dXJuIG91dCAtIGJ1ZjsKfQoKUmVnRXhwCnJlZ2V4cF9mcm9tX2FyZ3YoaW50IGFyZ2MsIEpTVmFsdWVDb25zdCBhcmd2W10sIEpTQ29udGV4dCogY3R4KSB7CiAgUmVnRXhwIHJlID0gezAsIDAsIDB9OwogIGNvbnN0IGNoYXIqIGZsYWdzdHI7CiAgYXNzZXJ0KGFyZ2MgPiAwKTsKICBpZihqc19pc19yZWdleHAoY3R4LCBhcmd2WzBdKSkgewogICAgcmUuc291cmNlID0ganNfZ2V0X3Byb3BlcnR5c3RyX3N0cmluZ2xlbihjdHgsIGFyZ3ZbMF0sICJzb3VyY2UiLCAmcmUubGVuKTsKICAgIHJlLmZsYWdzID0gcmVnZXhwX2ZsYWdzX2Zyb21zdHJpbmcoCiAgICAgICAgKGZsYWdzdHIgPSBqc19nZXRfcHJvcGVydHlzdHJfY3N0cmluZyhjdHgsIGFyZ3ZbMF0sICJmbGFncyIpKSk7CiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBmbGFnc3RyKTsKICB9IGVsc2UgewogICAgcmUuc291cmNlID0ganNfdG9zdHJpbmdsZW4oY3R4LCAmcmUubGVuLCBhcmd2WzBdKTsKICAgIGlmKGFyZ2MgPiAxICYmIEpTX0lzU3RyaW5nKGFyZ3ZbMV0pKSB7CiAgICAgIHJlLmZsYWdzID0KICAgICAgICAgIHJlZ2V4cF9mbGFnc19mcm9tc3RyaW5nKChmbGFnc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlsxXSkpKTsKICAgICAganNfY3N0cmluZ19mcmVlKGN0eCwgZmxhZ3N0cik7CiAgICB9CiAgfQogIHJldHVybiByZTsKfQoKUmVnRXhwCnJlZ2V4cF9mcm9tX2RidWYoRHluQnVmKiBkYnVmLCBpbnQgZmxhZ3MpIHsKICBSZWdFeHAgcmUgPSB7KGNoYXIqKWRidWYtPmJ1ZiwgZGJ1Zi0+c2l6ZSwgZmxhZ3N9OwogIGRidWYtPmJ1ZiA9IDA7CiAgZGJ1Zi0+YWxsb2NhdGVkX3NpemUgPSAwOwogIGRidWYtPnNpemUgPSAwOwogIHJldHVybiByZTsKfQoKdWludDhfdCoKcmVnZXhwX2NvbXBpbGUoUmVnRXhwIHJlLCBKU0NvbnRleHQqIGN0eCkgewogIGNoYXIgZXJyb3JfbXNnWzY0XTsKICBpbnQgbGVuID0gMDsKICB1aW50OF90KiBieXRlY29kZTsKICBpZighKGJ5dGVjb2RlID0gbHJlX2NvbXBpbGUoJmxlbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfbXNnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplb2YoZXJyb3JfbXNnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmUuc291cmNlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZS5sZW4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlLmZsYWdzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdHgpKSkKICAgIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIkVycm9yIGNvbXBpbGluZyByZWdleCAvJS4qcy86ICVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAoaW50KXJlLmxlbiwKICAgICAgICAgICAgICAgICAgICAgICAgICByZS5zb3VyY2UsCiAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JfbXNnKTsKCiAgcmV0dXJuIGJ5dGVjb2RlOwp9CgpKU1ZhbHVlCnJlZ2V4cF90b192YWx1ZShSZWdFeHAgcmUsIEpTQ29udGV4dCogY3R4KSB7CiAgY2hhciBmbGFnc3RyWzMyXSA9IHswfTsKICBzaXplX3QgZmxhZ2xlbiA9IHJlZ2V4cF9mbGFnc190b3N0cmluZyhyZS5mbGFncywgZmxhZ3N0cik7CiAgSlNWYWx1ZUNvbnN0IGFyZ3NbMl0gPSB7SlNfTmV3U3RyaW5nTGVuKGN0eCwgcmUuc291cmNlLCByZS5sZW4pLAogICAgICAgICAgICAgICAgICAgICAgICAgIEpTX05ld1N0cmluZ0xlbihjdHgsIGZsYWdzdHIsIGZsYWdsZW4pfTsKICBKU1ZhbHVlIHJlZ2V4LCBjdG9yID0ganNfZ2xvYmFsX2dldChjdHgsICJSZWdFeHAiKTsKICByZWdleCA9IEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIDIsIGFyZ3MpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMV0pOwogIHJldHVybiByZWdleDsKfQoKaW50NjRfdApqc19hcnJheV9sZW5ndGgoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhcnJheSkgewogIGludDY0X3QgbGVuID0gLTE7CiAgaWYoSlNfSXNBcnJheShjdHgsIGFycmF5KSB8fCBqc19pc190eXBlZGFycmF5KGFycmF5KSkgewogICAgSlNWYWx1ZSBsZW5ndGggPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGFycmF5LCAibGVuZ3RoIik7CiAgICBKU19Ub0ludDY0KGN0eCwgJmxlbiwgbGVuZ3RoKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGxlbmd0aCk7CiAgfQogIHJldHVybiBsZW47Cn0KCnZvaWQKanNfYXJyYXlfY2xlYXIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhcnJheSkgewogIGludDY0X3QgbGVuID0ganNfYXJyYXlfbGVuZ3RoKGN0eCwgYXJyYXkpOwogIEpTVmFsdWUgcmV0OwogIEpTQXRvbSBzcGxpY2UgPSBKU19OZXdBdG9tKGN0eCwgInNwbGljZSIpOwogIEpTVmFsdWVDb25zdCBhcmdzWzJdID0ge0pTX05ld0ludDY0KGN0eCwgMCksIEpTX05ld0ludDY0KGN0eCwgbGVuKX07CgogIHJldCA9IEpTX0ludm9rZShjdHgsIGFycmF5LCBzcGxpY2UsIDIsIGFyZ3MpOwogIEpTX0ZyZWVBdG9tKGN0eCwgc3BsaWNlKTsKICBKU19GcmVlVmFsdWUoY3R4LCByZXQpOwoKICBhc3NlcnQoanNfYXJyYXlfbGVuZ3RoKGN0eCwgYXJyYXkpID09IDApOwp9CgpjaGFyKioKanNfYXJyYXlfdG9fYXJndihKU0NvbnRleHQqIGN0eCwgaW50KiBhcmdjcCwgSlNWYWx1ZUNvbnN0IGFycmF5KSB7CiAgaW50IGksIGxlbiA9IGpzX2FycmF5X2xlbmd0aChjdHgsIGFycmF5KTsKICBjaGFyKiogcmV0ID0ganNfbWFsbG9jeihjdHgsIHNpemVvZihjaGFyKikgKiAobGVuICsgMSkpOwogIGZvcihpID0gMDsgaSA8IGxlbjsgaSsrKSB7CiAgICBKU1ZhbHVlIGl0ZW0gPSBKU19HZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGFycmF5LCBpKTsKICAgIHJldFtpXSA9IGpzX3Rvc3RyaW5nKGN0eCwgaXRlbSk7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBpdGVtKTsKICB9CiAgaWYoYXJnY3ApCiAgICAqYXJnY3AgPSBsZW47CiAgcmV0dXJuIHJldDsKfQoKaW50CmpzX2FycmF5X2NvcHlzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYXJyYXksIGludCBuLCBjaGFyKiogc3RyYSkgewogIGludCBpLCBsZW4gPSBNSU5fTlVNKG4sIGpzX2FycmF5X2xlbmd0aChjdHgsIGFycmF5KSk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKICAgIEpTVmFsdWUgaXRlbSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgYXJyYXksIGkpOwogICAgaWYoc3RyYVtpXSkKICAgICAganNfZnJlZShjdHgsIHN0cmFbaV0pOwogICAgc3RyYVtpXSA9IGpzX3Rvc3RyaW5nKGN0eCwgaXRlbSk7CiAgICBKU19GcmVlVmFsdWUoY3R4LCBpdGVtKTsKICB9CiAgcmV0dXJuIGk7Cn0KCmludApqc19zdHJ2X2NvcHlzKAogICAgSlNDb250ZXh0KiBjdHgsIGludCBhcmdjLCBKU1ZhbHVlQ29uc3QgYXJndltdLCBpbnQgbiwgY2hhcioqIHN0cmEpIHsKICBpbnQgaSwgbGVuID0gTUlOX05VTShuLCBhcmdjKTsKICBmb3IoaSA9IDA7IGkgPCBsZW47IGkrKykgewogICAgaWYoIUpTX0lzTnVsbChhcmd2W2ldKSAmJiAhSlNfSXNVbmRlZmluZWQoYXJndltpXSkpCiAgICAgIHN0cmFbaV0gPSBqc190b3N0cmluZyhjdHgsIGFyZ3ZbaV0pOwogICAgZWxzZQogICAgICBzdHJhW2ldID0gMDsKICB9CiAgZm9yKDsgaSA8IG47IGkrKykgc3RyYVtpXSA9IDA7CgogIHJldHVybiBpOwp9Cgp2b2lkCmpzX2F0b21fZHVtcChKU0NvbnRleHQqIGN0eCwgSlNBdG9tIGF0b20sIER5bkJ1ZiogZGIsIEJPT0wgY29sb3IpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgQk9PTCBpc19pbnQ7CiAgc3RyID0gSlNfQXRvbVRvQ1N0cmluZyhjdHgsIGF0b20pOwogIGlzX2ludCA9IGpzX2F0b21faXNpbnQoYXRvbSkgfHwgaXNfaW50ZWdlcihzdHIpOwogIGlmKGNvbG9yKQogICAgZGJ1Zl9wdXRzdHIoZGIsIGlzX2ludCA/ICJceDFiWzMzbSIgOiAiXHgxYlsxOzMwbSIpOwoKICBkYnVmX3B1dHN0cihkYiwgc3RyKTsKICBpZihjb2xvcikKICAgIGRidWZfcHV0c3RyKGRiLCAiXHgxYlsxOzM2bSIpOwoKICBpZighaXNfaW50KQogICAgZGJ1Zl9wcmludGYoZGIsICIoMHgleCkiLCBqc19hdG9tX3RvYmluYXJ5KGF0b20pKTsKCiAgaWYoY29sb3IpCiAgICBkYnVmX3B1dHN0cihkYiwgIlx4MWJbbSIpOwp9Cgp1bnNpZ25lZCBpbnQKanNfYXRvbV90b2JpbmFyeShKU0F0b20gYXRvbSkgewogIHNzaXplX3QgcmV0OwogIGlmKGpzX2F0b21faXNpbnQoYXRvbSkpIHsKICAgIHJldCA9IGpzX2F0b21fdG9pbnQoYXRvbSk7CiAgICByZXQgPSAtcmV0OwogIH0gZWxzZSB7CiAgICByZXQgPSBhdG9tOwogIH0KICByZXR1cm4gcmV0Owp9Cgpjb25zdCBjaGFyKgpqc19hdG9tX3RvX2NzdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsIHNpemVfdCogbGVuLCBKU0F0b20gYXRvbSkgewogIEpTVmFsdWUgdjsKICBjb25zdCBjaGFyKiBzOwogIHYgPSBKU19BdG9tVG9WYWx1ZShjdHgsIGF0b20pOwogIHMgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCBsZW4sIHYpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHYpOwogIHJldHVybiBzOwp9CgppbnQzMl90CmpzX2F0b21fdG9pbnQzMihKU0NvbnRleHQqIGN0eCwgSlNBdG9tIGF0b20pIHsKICBpZighanNfYXRvbV9pc2ludChhdG9tKSkgewogICAgaW50NjRfdCBpID0gSU5UNjRfTUlOOwogICAganNfYXRvbV90b2ludDY0KGN0eCwgJmksIGF0b20pOwogICAgcmV0dXJuIGk7CiAgfQogIHJldHVybiAtYXRvbTsKfQoKaW50CmpzX2F0b21fdG9pbnQ2NChKU0NvbnRleHQqIGN0eCwgaW50NjRfdCogaSwgSlNBdG9tIGF0b20pIHsKICBpbnQgcmV0OwogIEpTVmFsdWUgdmFsdWU7CiAgKmkgPSBJTlQ2NF9NQVg7CiAgdmFsdWUgPSBKU19BdG9tVG9WYWx1ZShjdHgsIGF0b20pOwogIHJldCA9ICFKU19Ub0ludDY0KGN0eCwgaSwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2F0b21faXNfaW5kZXgoSlNDb250ZXh0KiBjdHgsIGludDY0X3QqIHB2YWwsIEpTQXRvbSBhdG9tKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBCT09MIHJldCA9IEZBTFNFOwogIGludDY0X3QgaW5kZXg7CgogIGlmKGF0b20gJiAoMVUgPDwgMzEpKSB7CiAgICAqcHZhbCA9IGF0b20gJiAofigxVSA8PCAzMSkpOwogICAgcmV0dXJuIFRSVUU7CiAgfQoKICB2YWx1ZSA9IEpTX0F0b21Ub1ZhbHVlKGN0eCwgYXRvbSk7CgogIGlmKEpTX0lzTnVtYmVyKHZhbHVlKSkgewogICAgSlNfVG9JbnQ2NChjdHgsICZpbmRleCwgdmFsdWUpOwogICAgcmV0ID0gVFJVRTsKICB9IGVsc2UgaWYoSlNfSXNTdHJpbmcodmFsdWUpKSB7CiAgICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgdmFsdWUpOwogICAgaWYoc1swXSA9PSAnLScgJiYgaXNfZGlnaXRfY2hhcihzW3NbMF0gPT0gJy0nXSkpIHsKICAgICAgaW5kZXggPSBhdG9pKHMpOwogICAgICByZXQgPSBUUlVFOwogICAgfQogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzKTsKICB9CgogIGlmKHJldCA9PSBUUlVFKQogICAgKnB2YWwgPSBpbmRleDsKCiAgcmV0dXJuIHJldDsKfQoKQk9PTApqc19hdG9tX2lzX2xlbmd0aChKU0NvbnRleHQqIGN0eCwgSlNBdG9tIGF0b20pIHsKICBjb25zdCBjaGFyKiBzdHIgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgYXRvbSk7CiAgQk9PTCByZXQgPSAhc3RyY21wKHN0ciwgImxlbmd0aCIpOwogIEpTX0ZyZWVDU3RyaW5nKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9Cgpjb25zdCBjaGFyKgpqc19mdW5jdGlvbl9uYW1lKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU0F0b20gYXRvbTsKICBKU1ZhbHVlIHN0ciwgbmFtZSwgYXJnc1syXSwgaWR4OwogIGNvbnN0IGNoYXIqIHMgPSAwOwogIGludDMyX3QgaSA9IC0xOwogIHN0ciA9IGpzX3ZhbHVlX3Rvc3RyaW5nKGN0eCwgIkZ1bmN0aW9uIiwgdmFsdWUpOwogIGF0b20gPSBKU19OZXdBdG9tKGN0eCwgImluZGV4T2YiKTsKICBhcmdzWzBdID0gSlNfTmV3U3RyaW5nKGN0eCwgImZ1bmN0aW9uICIpOwogIGlkeCA9IEpTX0ludm9rZShjdHgsIHN0ciwgYXRvbSwgMSwgYXJncyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgYXJnc1swXSk7CiAgSlNfVG9JbnQzMihjdHgsICZpLCBpZHgpOwogIGlmKGkgIT0gMCkgewogICAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIHN0cik7CiAgICByZXR1cm4gMDsKICB9CiAgYXJnc1swXSA9IEpTX05ld1N0cmluZyhjdHgsICIoIik7CiAgaWR4ID0gSlNfSW52b2tlKGN0eCwgc3RyLCBhdG9tLCAxLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIGF0b20gPSBKU19OZXdBdG9tKGN0eCwgInN1YnN0cmluZyIpOwogIGFyZ3NbMF0gPSBKU19OZXdVaW50MzIoY3R4LCA5KTsKICBhcmdzWzFdID0gaWR4OwogIG5hbWUgPSBKU19JbnZva2UoY3R4LCBzdHIsIGF0b20sIDIsIGFyZ3MpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMF0pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGFyZ3NbMV0pOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHN0cik7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICBzID0gSlNfVG9DU3RyaW5nKGN0eCwgbmFtZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgbmFtZSk7CiAgcmV0dXJuIHM7Cn0KCkpTVmFsdWUKanNfZ2xvYmFsX2dldChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcHJvcCkgewogIEpTVmFsdWUgZ2xvYmFsX29iaiwgcmV0OwogIGdsb2JhbF9vYmogPSBKU19HZXRHbG9iYWxPYmplY3QoY3R4KTsKICByZXQgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGdsb2JhbF9vYmosIHByb3ApOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGdsb2JhbF9vYmopOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfZ2xvYmFsX3Byb3RvdHlwZShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogY2xhc3NfbmFtZSkgewogIEpTVmFsdWUgY3RvciwgcmV0OwogIGN0b3IgPSBqc19nbG9iYWxfZ2V0KGN0eCwgY2xhc3NfbmFtZSk7CiAgcmV0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBjdG9yLCAicHJvdG90eXBlIik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgY3Rvcik7CiAgcmV0dXJuIHJldDsKfQoKSlNWYWx1ZQpqc19pdGVyYXRvcl9tZXRob2QoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmopIHsKICBKU0F0b20gYXRvbTsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKICBhdG9tID0ganNfc3ltYm9sX3N0YXRpY19hdG9tKGN0eCwgIml0ZXJhdG9yIik7CiAgaWYoSlNfSGFzUHJvcGVydHkoY3R4LCBvYmosIGF0b20pKQogICAgcmV0ID0gSlNfR2V0UHJvcGVydHkoY3R4LCBvYmosIGF0b20pOwoKICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIGlmKCFKU19Jc0Z1bmN0aW9uKGN0eCwgcmV0KSkgewogICAgYXRvbSA9IGpzX3N5bWJvbF9zdGF0aWNfYXRvbShjdHgsICJhc3luY0l0ZXJhdG9yIik7CiAgICBpZihKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSkpCiAgICAgIHJldCA9IEpTX0dldFByb3BlcnR5KGN0eCwgb2JqLCBhdG9tKTsKCiAgICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIH0KICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2l0ZXJhdG9yX25ldyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaikgewogIEpTVmFsdWUgZm4sIHJldDsKICBmbiA9IGpzX2l0ZXJhdG9yX21ldGhvZChjdHgsIG9iaik7CiAgcmV0ID0gSlNfQ2FsbChjdHgsIGZuLCBvYmosIDAsIDApOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGZuKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX2l0ZXJhdG9yX25leHQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIEJPT0wqIGRvbmVfcCkgewogIEpTVmFsdWUgZm4sIHJlc3VsdCwgZG9uZSwgdmFsdWU7CiAgZm4gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgIm5leHQiKTsKICByZXN1bHQgPSBKU19DYWxsKGN0eCwgZm4sIG9iaiwgMCwgMCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZm4pOwogIGRvbmUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHJlc3VsdCwgImRvbmUiKTsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgcmVzdWx0LCAidmFsdWUiKTsKICBKU19GcmVlVmFsdWUoY3R4LCByZXN1bHQpOwogICpkb25lX3AgPSBKU19Ub0Jvb2woY3R4LCBkb25lKTsKICBKU19GcmVlVmFsdWUoY3R4LCBkb25lKTsKICByZXR1cm4gdmFsdWU7Cn0KCkpTVmFsdWUKanNfb2JqZWN0X2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU1ZhbHVlIGN0b3IgPSBKU19VTkRFRklORUQ7CiAgaWYoSlNfSXNPYmplY3QodmFsdWUpKQogICAgY3RvciA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgdmFsdWUsICJjb25zdHJ1Y3RvciIpOwogIHJldHVybiBjdG9yOwp9CgpjaGFyKgpqc19vYmplY3RfY2xhc3NuYW1lKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU1ZhbHVlIHByb3RvLCBjdG9yOwogIGNvbnN0IGNoYXIqIHN0cjsKICBjaGFyKiBuYW1lID0gMDsKICBpbnQgbmFtZWxlbjsKICBjdG9yID0ganNfb2JqZWN0X2NvbnN0cnVjdG9yKGN0eCwgdmFsdWUpOwogIGlmKCFKU19Jc0Z1bmN0aW9uKGN0eCwgY3RvcikpIHsKICAgIHByb3RvID0gSlNfR2V0UHJvdG90eXBlKGN0eCwgdmFsdWUpOwogICAgY3RvciA9IGpzX29iamVjdF9jb25zdHJ1Y3RvcihjdHgsIHByb3RvKTsKICB9CiAgaWYoKHN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIGN0b3IpKSkgewogICAgaWYoIXN0cm5jbXAoc3RyLCAiZnVuY3Rpb24gIiwgOSkpIHsKICAgICAgbmFtZWxlbiA9IGJ5dGVfY2hyKHN0ciArIDksIHN0cmxlbihzdHIpIC0gOSwgJygnKTsKICAgICAgbmFtZSA9IGpzX3N0cm5kdXAoY3R4LCBzdHIgKyA5LCBuYW1lbGVuKTsKICAgIH0KICB9CiAgaWYoIW5hbWUpIHsKICAgIGlmKHN0cikKICAgICAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyKTsKICAgIGlmKChzdHIgPSBKU19Ub0NTdHJpbmcoY3R4LCBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIGN0b3IsICJuYW1lIikpKSkKICAgICAgbmFtZSA9IGpzX3N0cmR1cChjdHgsIHN0cik7CiAgfQogIGlmKHN0cikKICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cik7CiAgcmV0dXJuIG5hbWU7Cn0KCkJPT0wKanNfb2JqZWN0X2VxdWFscyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGEsIEpTVmFsdWVDb25zdCBiKSB7CiAgSlNQcm9wZXJ0eUVudW0gKmF0b21zX2EsICphdG9tc19iOwogIHVpbnQzMl90IGksIG5hdG9tc19hLCBuYXRvbXNfYjsKICBpbnQzMl90IHRhLCB0YjsKICB0YSA9IGpzX3ZhbHVlX3R5cGUoY3R4LCBhKTsKICB0YiA9IGpzX3ZhbHVlX3R5cGUoY3R4LCBiKTsKICBhc3NlcnQodGEgPT0gVFlQRV9PQkpFQ1QpOwogIGFzc2VydCh0YiA9PSBUWVBFX09CSkVDVCk7CiAgaWYoSlNfR2V0T3duUHJvcGVydHlOYW1lcyhjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmYXRvbXNfYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICZuYXRvbXNfYSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19HUE5fU1RSSU5HX01BU0sgfCBKU19HUE5fU1lNQk9MX01BU0sgfAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0dQTl9FTlVNX09OTFkpKQogICAgcmV0dXJuIEZBTFNFOwoKICBpZihKU19HZXRPd25Qcm9wZXJ0eU5hbWVzKGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICZhdG9tc19iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5hdG9tc19iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0dQTl9TVFJJTkdfTUFTSyB8IEpTX0dQTl9TWU1CT0xfTUFTSyB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfR1BOX0VOVU1fT05MWSkpCiAgICByZXR1cm4gRkFMU0U7CgogIGlmKG5hdG9tc19hICE9IG5hdG9tc19iKQogICAgcmV0dXJuIEZBTFNFOwoKICBxc29ydF9yKCZhdG9tc19hLCBuYXRvbXNfYSwgc2l6ZW9mKEpTUHJvcGVydHlFbnVtKSwgJmpzX3Byb3BlbnVtX2NtcCwgY3R4KTsKICBxc29ydF9yKCZhdG9tc19iLCBuYXRvbXNfYiwgc2l6ZW9mKEpTUHJvcGVydHlFbnVtKSwgJmpzX3Byb3BlbnVtX2NtcCwgY3R4KTsKICBmb3IoaSA9IDA7IGkgPCBuYXRvbXNfYTsgaSsrKQogICAgaWYoYXRvbXNfYVtpXS5hdG9tICE9IGF0b21zX2JbaV0uYXRvbSkKICAgICAgcmV0dXJuIEZBTFNFOwogIHJldHVybiBUUlVFOwp9CgppbnQKanNfb2JqZWN0X2lzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUsIGNvbnN0IGNoYXIqIGNtcCkgewogIGludCByZXQ7CiAgY29uc3QgY2hhciogc3RyOwogIHN0ciA9IGpzX29iamVjdF90b3N0cmluZyhjdHgsIHZhbHVlKTsKICByZXQgPSBzdHJjbXAoc3RyLCBjbXApID09IDA7CiAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX29iamVjdF9jb25zdHJ1Y3QoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBjdG9yKSB7CiAgSlNWYWx1ZUNvbnN0IGFyZ3NbXSA9IHtKU19VTkRFRklORUR9OwogIHJldHVybiBKU19DYWxsQ29uc3RydWN0b3IoY3R4LCBjdG9yLCAwLCBhcmdzKTsKfQoKSlNWYWx1ZQpqc19vYmplY3RfZXJyb3IoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG1lc3NhZ2UpIHsKICBKU1ZhbHVlQ29uc3QgY3RvciA9IGpzX2dsb2JhbF9nZXQoY3R4LCAiRXJyb3IiKTsKICBKU1ZhbHVlQ29uc3QgYXJnc1tdID0ge0pTX05ld1N0cmluZyhjdHgsIG1lc3NhZ2UpfTsKICBKU1ZhbHVlIHJldDsKICByZXQgPSBKU19DYWxsQ29uc3RydWN0b3IoY3R4LCBjdG9yLCAxLCBhcmdzKTsKICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmdzWzBdKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX29iamVjdF9zdGFjayhKU0NvbnRleHQqIGN0eCkgewogIEpTVmFsdWUgZXJyb3IgPSBqc19vYmplY3RfZXJyb3IoY3R4LCAiIik7CiAgSlNWYWx1ZSBzdGFjayA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgZXJyb3IsICJzdGFjayIpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGVycm9yKTsKICByZXR1cm4gc3RhY2s7Cn0KCkJPT0wKanNfaGFzX3Byb3BlcnR5c3RyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpIHsKICBKU0F0b20gYXRvbTsKICBCT09MIHJldCA9IEZBTFNFOwogIGF0b20gPSBKU19OZXdBdG9tKGN0eCwgc3RyKTsKICByZXQgPSBKU19IYXNQcm9wZXJ0eShjdHgsIG9iaiwgYXRvbSk7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2dldF9wcm9wZXJ0eXN0cl9ib29sKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBzdHIpIHsKICBCT09MIHJldCA9IEZBTFNFOwogIEpTVmFsdWUgdmFsdWU7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgc3RyKTsKICBpZighSlNfSXNFeGNlcHRpb24odmFsdWUpKQogICAgcmV0ID0gSlNfVG9Cb29sKGN0eCwgdmFsdWUpOwoKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKY29uc3QgY2hhcioKanNfZ2V0X3Byb3BlcnR5c3RyX2NzdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApIHsKICBKU1ZhbHVlIHZhbHVlOwogIGNvbnN0IGNoYXIqIHJldDsKICB2YWx1ZSA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgb2JqLCBwcm9wKTsKICBpZihKU19Jc1VuZGVmaW5lZCh2YWx1ZSkgfHwgSlNfSXNFeGNlcHRpb24odmFsdWUpKQogICAgcmV0dXJuIDA7CgogIHJldCA9IEpTX1RvQ1N0cmluZyhjdHgsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKY29uc3QgY2hhcioKanNfZ2V0X3Byb3BlcnR5c3RyX2NzdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCBvYmosCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIqIHByb3AsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemVfdCogbGVucCkgewogIEpTVmFsdWUgdmFsdWU7CiAgY29uc3QgY2hhciogcmV0OwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvYmosIHByb3ApOwogIGlmKEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICByZXR1cm4gMDsKCiAgcmV0ID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgbGVucCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9Cgpjb25zdCBjaGFyKgpqc19nZXRfcHJvcGVydHlpbnRfY3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgdWludDMyX3QgcHJvcCkgewogIEpTVmFsdWUgdmFsdWU7CiAgY2hhciogcmV0OwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIHByb3ApOwogIC8qIGlmKEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICAgcmV0dXJuIDA7Ki8KCiAgcmV0ID0ganNfdG9zdHJpbmcoY3R4LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCmludDMyX3QKanNfZ2V0X3Byb3BlcnR5aW50X2ludDMyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCB1aW50MzJfdCBwcm9wKSB7CiAgaW50MzJfdCByZXQ7CiAgSlNWYWx1ZSB2YWx1ZSA9IEpTX0dldFByb3BlcnR5VWludDMyKGN0eCwgb2JqLCBwcm9wKTsKICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9CgpjaGFyKgpqc19nZXRfcHJvcGVydHlzdHJfc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBjaGFyKiByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwoKICByZXQgPSBqc190b3N0cmluZyhjdHgsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKY2hhcioKanNfZ2V0X3Byb3BlcnR5c3RyX3N0cmluZ2xlbihKU0NvbnRleHQqIGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU1ZhbHVlQ29uc3Qgb2JqLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIqIHByb3AsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZV90KiBsZW5wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICBjaGFyKiByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwoKICByZXQgPSBqc190b3N0cmluZ2xlbihjdHgsIGxlbnAsIHZhbHVlKTsKICBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZSk7CiAgcmV0dXJuIHJldDsKfQoKaW50MzJfdApqc19nZXRfcHJvcGVydHlzdHJfaW50MzIoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBvYmosIGNvbnN0IGNoYXIqIHByb3ApIHsKICBKU1ZhbHVlIHZhbHVlOwogIGludDMyX3QgcmV0OwogIHZhbHVlID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvYmosIHByb3ApOwogIGlmKEpTX0lzVW5kZWZpbmVkKHZhbHVlKSB8fCBKU19Jc0V4Y2VwdGlvbih2YWx1ZSkpCiAgICByZXR1cm4gMDsKICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcmV0Owp9Cgp1aW50NjRfdApqc19nZXRfcHJvcGVydHlzdHJfdWludDY0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqLCBjb25zdCBjaGFyKiBwcm9wKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICB1aW50NjRfdCByZXQ7CiAgdmFsdWUgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCk7CiAgaWYoSlNfSXNVbmRlZmluZWQodmFsdWUpIHx8IEpTX0lzRXhjZXB0aW9uKHZhbHVlKSkKICAgIHJldHVybiAwOwogIEpTX1RvSW5kZXgoY3R4LCAmcmV0LCB2YWx1ZSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdmFsdWUpOwogIHJldHVybiByZXQ7Cn0KCnZvaWQKanNfc2V0X3Byb3BlcnR5aW50X3N0cmluZyhKU0NvbnRleHQqIGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICBKU1ZhbHVlQ29uc3Qgb2JqLAogICAgICAgICAgICAgICAgICAgICAgICAgIHVpbnQzMl90IGksCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciogc3RyKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX05ld1N0cmluZyhjdHgsIHN0cik7CiAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIGksIHZhbHVlKTsKfQoKdm9pZApqc19zZXRfcHJvcGVydHlpbnRfaW50KEpTQ29udGV4dCogY3R4LAogICAgICAgICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCBvYmosCiAgICAgICAgICAgICAgICAgICAgICAgdWludDMyX3QgaSwKICAgICAgICAgICAgICAgICAgICAgICBpbnQzMl90IHZhbHVlKSB7CiAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCBvYmosIGksIEpTX05ld0ludDMyKGN0eCwgdmFsdWUpKTsKfQoKdm9pZApqc19zZXRfcHJvcGVydHlzdHJfc3RyaW5nKEpTQ29udGV4dCogY3R4LAogICAgICAgICAgICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCBvYmosCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciogcHJvcCwKICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyKiBzdHIpIHsKICBKU1ZhbHVlIHZhbHVlOwogIHZhbHVlID0gSlNfTmV3U3RyaW5nKGN0eCwgc3RyKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCwgdmFsdWUpOwp9Cgp2b2lkCmpzX3NldF9wcm9wZXJ0eXN0cl9zdHJpbmdsZW4oSlNDb250ZXh0KiBjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNWYWx1ZUNvbnN0IG9iaiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGFyKiBwcm9wLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIqIHN0ciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplX3QgbGVuKSB7CiAgSlNWYWx1ZSB2YWx1ZTsKICB2YWx1ZSA9IEpTX05ld1N0cmluZ0xlbihjdHgsIHN0ciwgbGVuKTsKICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgcHJvcCwgdmFsdWUpOwp9CgppbnQKanNfZ2V0X3Byb3BlcnR5ZGVzY3JpcHRvcihKU0NvbnRleHQqIGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICBKU1Byb3BlcnR5RGVzY3JpcHRvciogZGVzYywKICAgICAgICAgICAgICAgICAgICAgICAgICBKU1ZhbHVlQ29uc3QgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSlNBdG9tIHByb3ApIHsKICBKU1ZhbHVlIG9iaiwgcHJvdG87CiAgb2JqID0gSlNfRHVwVmFsdWUoY3R4LCB2YWx1ZSk7CiAgZG8gewogICAgaWYoSlNfR2V0T3duUHJvcGVydHkoY3R4LCBkZXNjLCBvYmosIHByb3ApID09IFRSVUUpCiAgICAgIHJldHVybiBUUlVFOwogICAgcHJvdG8gPSBKU19HZXRQcm90b3R5cGUoY3R4LCBvYmopOwogICAgaWYoSlNfVkFMVUVfR0VUX09CSihwcm90bykgPT0gSlNfVkFMVUVfR0VUX09CSihvYmopKQogICAgICBicmVhazsKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIG9iaik7CiAgICBvYmogPSBwcm90bzsKICB9IHdoaWxlKEpTX0lzT2JqZWN0KG9iaikpOwogIHJldHVybiBGQUxTRTsKfQoKSlNDbGFzc0lECmpzX2NsYXNzX2lkKEpTQ29udGV4dCogY3R4LCBpbnQgaWQpIHsKICByZXR1cm4gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX2lkOwp9CgpKU0NsYXNzSUQKanNfY2xhc3NfbmV3aWQodm9pZCkgewogIEpTQ2xhc3NJRCBpZDsKICBKU19OZXdDbGFzc0lEKCZpZCk7CiAgcmV0dXJuIGlkOwp9CgpKU0NsYXNzKgpqc19jbGFzc19nZXQoSlNDb250ZXh0KiBjdHgsIEpTQ2xhc3NJRCBpZCkgewogIEpTQ2xhc3MqIHJldCA9ICZjdHgtPnJ0LT5jbGFzc19hcnJheVtpZF07CiAgcmV0dXJuIHJldC0+Y2xhc3NfaWQgPT0gaWQgPyByZXQgOiAwOwp9CgpKU0F0b20KanNfY2xhc3NfYXRvbShKU0NvbnRleHQqIGN0eCwgSlNDbGFzc0lEIGlkKSB7CiAgSlNBdG9tIGF0b20gPSAwOwogIGlmKGlkID4gMCAmJiBpZCA8IChKU0NsYXNzSUQpY3R4LT5ydC0+Y2xhc3NfY291bnQpCiAgICBhdG9tID0gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX25hbWU7CiAgcmV0dXJuIGF0b207Cn0KCmNvbnN0IGNoYXIqCmpzX2NsYXNzX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTQ2xhc3NJRCBpZCkgewogIEpTQXRvbSBhdG9tID0gY3R4LT5ydC0+Y2xhc3NfYXJyYXlbaWRdLmNsYXNzX25hbWU7CiAgcmV0dXJuIEpTX0F0b21Ub0NTdHJpbmcoY3R4LCBhdG9tKTsKfQoKY29uc3QgY2hhcioKanNfb2JqZWN0X3Rvc3RyaW5nKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU1ZhbHVlIHN0ciA9IGpzX3ZhbHVlX3Rvc3RyaW5nKGN0eCwgIk9iamVjdCIsIHZhbHVlKTsKICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgc3RyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogIHJldHVybiBzOwp9Cgpjb25zdCBjaGFyKgpqc19mdW5jdGlvbl90b3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgSlNWYWx1ZSBzdHIgPSBqc192YWx1ZV90b3N0cmluZyhjdHgsICJGdW5jdGlvbiIsIHZhbHVlKTsKICBjb25zdCBjaGFyKiBzID0gSlNfVG9DU3RyaW5nKGN0eCwgc3RyKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzdHIpOwogIHJldHVybiBzOwp9CgpCT09MCmpzX2Z1bmN0aW9uX2lzbmF0aXZlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBjb25zdCBjaGFyKiBmbiA9IGpzX2Z1bmN0aW9uX3Rvc3RyaW5nKGN0eCwgdmFsdWUpOwogIEJPT0wgcmV0ID0gISFzdHJzdHIoZm4sICJcbiAgICBbbmF0aXZlIGNvZGVdXG4iKTsKICBKU19GcmVlQ1N0cmluZyhjdHgsIGZuKTsKICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2lzX2lucHV0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNTdHJpbmcodmFsdWUpIHx8CiAgICAgICAgIGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfQVJSQVlfQlVGRkVSKTsKfQoKaW50CmpzX3Byb3BlbnVtX2NtcChjb25zdCB2b2lkKiBhLCBjb25zdCB2b2lkKiBiLCB2b2lkKiBwdHIpIHsKICBKU0NvbnRleHQqIGN0eCA9IHB0cjsKICBjb25zdCBjaGFyICpzdHJhLCAqc3RyYjsKICBpbnQgcmV0OwogIHN0cmEgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgKChjb25zdCBKU1Byb3BlcnR5RW51bSopYSktPmF0b20pOwogIHN0cmIgPSBKU19BdG9tVG9DU3RyaW5nKGN0eCwgKChjb25zdCBKU1Byb3BlcnR5RW51bSopYiktPmF0b20pOwogIHJldCA9IHN0cnZlcnNjbXAoc3RyYSwgc3RyYik7CiAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYSk7CiAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYik7CiAgcmV0dXJuIHJldDsKfQoKdm9pZApqc19wcm9wZXJ0eWVudW1zX2ZyZWUoSlNDb250ZXh0KiBjdHgsIEpTUHJvcGVydHlFbnVtKiBwcm9wcywgc2l6ZV90IGxlbikgewogIHVpbnQzMl90IGk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIEpTX0ZyZWVBdG9tKGN0eCwgcHJvcHNbaV0uYXRvbSk7CiAgLy8ganNfZnJlZShjdHgsIHByb3BzKTsKfQoKdm9pZApqc19zdHJ2X2ZyZWVfbihKU0NvbnRleHQqIGN0eCwgaW50IG4sIGNoYXIqIGFyZ3ZbXSkgewogIGludCBpOwogIGZvcihpID0gMDsgaSA8IG47IGkrKykgewogICAgaWYoYXJndltpXSkgewogICAgICBqc19mcmVlKGN0eCwgYXJndltpXSk7CiAgICAgIGFyZ3ZbaV0gPSAwOwogICAgfQogIH0KfQoKdm9pZApqc19zdHJ2X2ZyZWUoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgc2l6ZV90IGk7CiAgaWYoc3RydiA9PSAwKQogICAgcmV0dXJuOwoKICBmb3IoaSA9IDA7IHN0cnZbaV07IGkrKykgeyBqc19mcmVlKGN0eCwgc3RydltpXSk7IH0KICBqc19mcmVlKGN0eCwgc3Rydik7Cn0KCnZvaWQKanNfc3Rydl9mcmVlX3J0KEpTUnVudGltZSogcnQsIGNoYXIqKiBzdHJ2KSB7CiAgc2l6ZV90IGk7CiAgaWYoc3RydiA9PSAwKQogICAgcmV0dXJuOwoKICBmb3IoaSA9IDA7IHN0cnZbaV07IGkrKykgeyBqc19mcmVlX3J0KHJ0LCBzdHJ2W2ldKTsgfQogIGpzX2ZyZWVfcnQocnQsIHN0cnYpOwp9CgpKU1ZhbHVlCmpzX3N0cnZfdG9fYXJyYXkoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIGlmKHN0cnYpIHsKICAgIHNpemVfdCBpOwogICAgZm9yKGkgPSAwOyBzdHJ2W2ldOyBpKyspCiAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdTdHJpbmcoY3R4LCBzdHJ2W2ldKSk7CiAgfQogIHJldHVybiByZXQ7Cn0KCnNpemVfdApqc19zdHJ2X2xlbmd0aChjaGFyKiogc3RydikgewogIHNpemVfdCBpOwogIGZvcihpID0gMDsgc3RydltpXTsgaSsrKSB7fQogIHJldHVybiBpOwp9CgpjaGFyKioKanNfc3Rydl9kdXAoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KSB7CiAgY2hhcioqIHJldDsKICBzaXplX3QgaSwgbGVuID0ganNfc3Rydl9sZW5ndGgoc3Rydik7CiAgcmV0ID0ganNfbWFsbG9jKGN0eCwgKGxlbiArIDEpICogc2l6ZW9mKGNoYXIqKSk7CiAgZm9yKGkgPSAwOyBpIDwgbGVuOyBpKyspIHsgcmV0W2ldID0ganNfc3RyZHVwKGN0eCwgc3RydltpXSk7IH0KICByZXRbaV0gPSAwOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfaW50dl90b19hcnJheShKU0NvbnRleHQqIGN0eCwgaW50KiBpbnR2KSB7CiAgSlNWYWx1ZSByZXQgPSBKU19OZXdBcnJheShjdHgpOwogIGlmKGludHYpIHsKICAgIHNpemVfdCBpOwogICAgZm9yKGkgPSAwOyBpbnR2W2ldOyBpKyspCiAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpLCBKU19OZXdJbnQzMihjdHgsIGludHZbaV0pKTsKICB9CiAgcmV0dXJuIHJldDsKfQoKSlNBdG9tCmpzX3N5bWJvbF9zdGF0aWNfYXRvbShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSkgewogIEpTVmFsdWUgc3ltID0ganNfc3ltYm9sX3N0YXRpY192YWx1ZShjdHgsIG5hbWUpOwogIEpTQXRvbSByZXQgPSBKU19WYWx1ZVRvQXRvbShjdHgsIHN5bSk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgc3ltKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9zdGF0aWNfdmFsdWUoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUpIHsKICBKU1ZhbHVlIHN5bWJvbF9jdG9yLCByZXQ7CiAgc3ltYm9sX2N0b3IgPSBqc19zeW1ib2xfY3RvcihjdHgpOwogIHJldCA9IEpTX0dldFByb3BlcnR5U3RyKGN0eCwgc3ltYm9sX2N0b3IsIG5hbWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHN5bWJvbF9jdG9yKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9jdG9yKEpTQ29udGV4dCogY3R4KSB7CiAgcmV0dXJuIGpzX2dsb2JhbF9nZXQoY3R4LCAiU3ltYm9sIik7Cn0KCkpTVmFsdWUKanNfc3ltYm9sX2ludm9rZV9zdGF0aWMoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUsIEpTVmFsdWVDb25zdCBhcmcpIHsKICBKU1ZhbHVlIHJldDsKICBKU0F0b20gbWV0aG9kX25hbWUgPSBKU19OZXdBdG9tKGN0eCwgbmFtZSk7CiAgcmV0ID0gSlNfSW52b2tlKGN0eCwganNfc3ltYm9sX2N0b3IoY3R4KSwgbWV0aG9kX25hbWUsIDEsICZhcmcpOwogIEpTX0ZyZWVBdG9tKGN0eCwgbWV0aG9kX25hbWUpOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfc3ltYm9sX2ZvcihKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogc3ltX2ZvcikgewogIEpTVmFsdWUga2V5LCBzeW07CiAgSlNBdG9tIGF0b207CiAga2V5ID0gSlNfTmV3U3RyaW5nKGN0eCwgc3ltX2Zvcik7CiAgc3ltID0ganNfc3ltYm9sX2ludm9rZV9zdGF0aWMoY3R4LCAiZm9yIiwga2V5KTsKICBKU19GcmVlVmFsdWUoY3R4LCBrZXkpOwogIHJldHVybiBzeW07Cn0KCkpTQXRvbQpqc19zeW1ib2xfZm9yX2F0b20oSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN5bV9mb3IpIHsKICBKU1ZhbHVlIHN5bSA9IGpzX3N5bWJvbF9mb3IoY3R4LCBzeW1fZm9yKTsKICBKU0F0b20gYXRvbSA9IEpTX1ZhbHVlVG9BdG9tKGN0eCwgc3ltKTsKICBKU19GcmVlVmFsdWUoY3R4LCBzeW0pOwogIHJldHVybiBhdG9tOwp9CgpKU1ZhbHVlCmpzX3N5bWJvbF90b19zdHJpbmcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBzeW0pIHsKICBKU1ZhbHVlIHZhbHVlLCBzdHI7CiAgSlNBdG9tIGF0b207CiAgdmFsdWUgPSBqc19zeW1ib2xfaW52b2tlX3N0YXRpYyhjdHgsICJrZXlGb3IiLCBzeW0pOwogIGlmKCFKU19Jc1VuZGVmaW5lZCh2YWx1ZSkpCiAgICByZXR1cm4gdmFsdWU7CgogIGF0b20gPSBKU19WYWx1ZVRvQXRvbShjdHgsIHN5bSk7CiAgc3RyID0gSlNfQXRvbVRvU3RyaW5nKGN0eCwgYXRvbSk7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gc3RyOwp9Cgpjb25zdCBjaGFyKgpqc19zeW1ib2xfdG9fY3N0cmluZyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHN5bSkgewogIEpTVmFsdWUgdmFsdWUgPSBqc19zeW1ib2xfdG9fc3RyaW5nKGN0eCwgc3ltKTsKICBjb25zdCBjaGFyKiBzdHI7CiAgc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gc3RyOwp9CgpKU1ZhbHVlKgpqc192YWx1ZXNfZHVwKEpTQ29udGV4dCogY3R4LCBpbnQgbnZhbHVlcywgSlNWYWx1ZUNvbnN0KiB2YWx1ZXMpIHsKICBKU1ZhbHVlKiByZXQgPSBqc19tYWxsb2N6X3J0KGN0eC0+cnQsIHNpemVvZihKU1ZhbHVlKSAqIG52YWx1ZXMpOwogIGludCBpOwogIGZvcihpID0gMDsgaSA8IG52YWx1ZXM7IGkrKykgcmV0W2ldID0gSlNfRHVwVmFsdWVSVChjdHgtPnJ0LCB2YWx1ZXNbaV0pOwogIHJldHVybiByZXQ7Cn0KLyoKdm9pZApqc192YWx1ZXNfZnJlZShKU0NvbnRleHQqIGN0eCwgaW50IG52YWx1ZXMsIEpTVmFsdWVDb25zdCogdmFsdWVzKSB7CiAgaW50IGk7CiAgZm9yKGkgPSAwOyBpIDwgbnZhbHVlczsgaSsrKSBKU19GcmVlVmFsdWUoY3R4LCB2YWx1ZXNbaV0pOwogIGpzX2ZyZWUoY3R4LCB2YWx1ZXMpOwp9CiovCnZvaWQKanNfdmFsdWVzX2ZyZWUoSlNSdW50aW1lKiBydCwgaW50IG52YWx1ZXMsIEpTVmFsdWVDb25zdCogdmFsdWVzKSB7CiAgaW50IGk7CiAgZm9yKGkgPSAwOyBpIDwgbnZhbHVlczsgaSsrKSBKU19GcmVlVmFsdWVSVChydCwgdmFsdWVzW2ldKTsKICBqc19mcmVlX3J0KHJ0LCB2YWx1ZXMpOwp9CgpKU1ZhbHVlCmpzX3ZhbHVlc190b2FycmF5KEpTQ29udGV4dCogY3R4LCBpbnQgbnZhbHVlcywgSlNWYWx1ZUNvbnN0KiB2YWx1ZXMpIHsKICBpbnQgaTsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgZm9yKGkgPSAwOyBpIDwgbnZhbHVlczsgaSsrKQogICAgSlNfU2V0UHJvcGVydHlVaW50MzIoY3R4LCByZXQsIGksIEpTX0R1cFZhbHVlKGN0eCwgdmFsdWVzW2ldKSk7CiAgcmV0dXJuIHJldDsKfQoKY29uc3QgY2hhcioKanNfdmFsdWVfdHlwZV9uYW1lKGludDMyX3QgdHlwZSkgewogIGludDMyX3QgZmxhZyA9IGpzX3ZhbHVlX3R5cGUyZmxhZyh0eXBlKTsKICBjb25zdCBjaGFyKiBjb25zdCB0eXBlc1tdID0gewogICAgICAiVU5ERUZJTkVEIiwgICAgICIwIiwKICAgICAgIkJPT0wiLCAgICAgICAgICAiSU5UIiwKICAgICAgIk9CSkVDVCIsICAgICAgICAiU1RSSU5HIiwKICAgICAgIlNZTUJPTCIsICAgICAgICAiQklHX0ZMT0FUIiwKICAgICAgIkJJR19JTlQiLCAgICAgICAiQklHX0RFQ0lNQUwiLAogICAgICAiRkxPQVQ2NCIsICAgICAgICJOQU4iLAogICAgICAiRlVOQ1RJT04iLCAgICAgICJBUlJBWSIsCiAgICAgICJNT0RVTEUiLCAgICAgICAgIkZVTkNUSU9OX0JZVEVDT0RFIiwKICAgICAgIlVOSU5JVElBTElaRUQiLCAiQ0FUQ0hfT0ZGU0VUIiwKICAgICAgIkVYQ0VQVElPTiIsCiAgfTsKICBpZihmbGFnID49IDAgJiYgZmxhZyA8IGNvdW50b2YodHlwZXMpKQogICAgcmV0dXJuIHR5cGVzW2ZsYWddOwogIHJldHVybiAwOwp9Cgpjb25zdCBjaGFyKgpqc192YWx1ZV90eXBlc3RyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpbnQzMl90IHR5cGUgPSBqc192YWx1ZV90eXBlKGN0eCwgdmFsdWUpOwogIHJldHVybiBqc192YWx1ZV90eXBlX25hbWUodHlwZSk7Cn0KCkJPT0wKanNfdmFsdWVfaGFzX3JlZl9jb3VudChKU1ZhbHVlIHYpIHsKICByZXR1cm4gKCh1bnNpZ25lZClqc192YWx1ZV90YWcodikgPj0gKHVuc2lnbmVkKUpTX1RBR19GSVJTVCk7Cn0KCmVudW0gdmFsdWVfbWFzawpqc192YWx1ZV90eXBlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBpbnQzMl90IGZsYWc7CiAgdWludDMyX3QgdHlwZSA9IDA7CiAgaWYoKGZsYWcgPSBqc192YWx1ZV90eXBlX2dldChjdHgsIHZhbHVlKSkgPT0gLTEpCiAgICByZXR1cm4gMDsKCiAgaWYoZmxhZyA9PSBGTEFHX0FSUkFZIC8qfHwgZmxhZyA9PSBGTEFHX0ZVTkNUSU9OKi8pCiAgICB0eXBlIHw9IFRZUEVfT0JKRUNUOwoKICB0eXBlIHw9IDEgPDwgZmxhZzsKCiAgcmV0dXJuIHR5cGU7Cn0KCmludDMyX3QKanNfdmFsdWVfdHlwZV9nZXQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGlmKEpTX0lzQXJyYXkoY3R4LCB2YWx1ZSkpCiAgICByZXR1cm4gRkxBR19BUlJBWTsKCiAgaWYoSlNfSXNGdW5jdGlvbihjdHgsIHZhbHVlKSkKICAgIHJldHVybiBGTEFHX0ZVTkNUSU9OOwoKICBpZihKU19WQUxVRV9JU19OQU4odmFsdWUpKQogICAgcmV0dXJuIEZMQUdfTkFOOwoKICByZXR1cm4ganNfdmFsdWVfdHlwZV9mbGFnKHZhbHVlKTsKfQoKaW50MzJfdApqc192YWx1ZV90eXBlX2ZsYWcoSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgc3dpdGNoKEpTX1ZBTFVFX0dFVF9UQUcodmFsdWUpKSB7CiAgICBjYXNlIEpTX1RBR19CSUdfREVDSU1BTDogcmV0dXJuIEZMQUdfQklHX0RFQ0lNQUw7CiAgICBjYXNlIEpTX1RBR19CSUdfSU5UOiByZXR1cm4gRkxBR19CSUdfSU5UOwogICAgY2FzZSBKU19UQUdfQklHX0ZMT0FUOiByZXR1cm4gRkxBR19CSUdfRkxPQVQ7CiAgICBjYXNlIEpTX1RBR19TWU1CT0w6IHJldHVybiBGTEFHX1NZTUJPTDsKICAgIGNhc2UgSlNfVEFHX1NUUklORzogcmV0dXJuIEZMQUdfU1RSSU5HOwogICAgY2FzZSBKU19UQUdfTU9EVUxFOiByZXR1cm4gRkxBR19NT0RVTEU7CiAgICBjYXNlIEpTX1RBR19GVU5DVElPTl9CWVRFQ09ERTogcmV0dXJuIEZMQUdfRlVOQ1RJT05fQllURUNPREU7CiAgICBjYXNlIEpTX1RBR19PQkpFQ1Q6IHJldHVybiBGTEFHX09CSkVDVDsKICAgIGNhc2UgSlNfVEFHX0lOVDogcmV0dXJuIEZMQUdfSU5UOwogICAgY2FzZSBKU19UQUdfQk9PTDogcmV0dXJuIEZMQUdfQk9PTDsKICAgIGNhc2UgSlNfVEFHX05VTEw6IHJldHVybiBGTEFHX05VTEw7CiAgICBjYXNlIEpTX1RBR19VTkRFRklORUQ6IHJldHVybiBGTEFHX1VOREVGSU5FRDsKICAgIGNhc2UgSlNfVEFHX1VOSU5JVElBTElaRUQ6IHJldHVybiBGTEFHX1VOSU5JVElBTElaRUQ7CiAgICBjYXNlIEpTX1RBR19DQVRDSF9PRkZTRVQ6IHJldHVybiBGTEFHX0NBVENIX09GRlNFVDsKICAgIGNhc2UgSlNfVEFHX0VYQ0VQVElPTjogcmV0dXJuIEZMQUdfRVhDRVBUSU9OOwogICAgY2FzZSBKU19UQUdfRkxPQVQ2NDogcmV0dXJuIEZMQUdfRkxPQVQ2NDsKICB9CiAgcmV0dXJuIC0xOwp9Cgp2b2lkCmpzX3ZhbHVlX2ZyZWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgdikgewogIGlmKGpzX3ZhbHVlX2hhc19yZWZfY291bnQodikpIHsKICAgIEpTUmVmQ291bnRIZWFkZXIqIHAgPSAoSlNSZWZDb3VudEhlYWRlciopanNfdmFsdWVfcHRyKHYpOwogICAgaWYocC0+cmVmX2NvdW50ID4gMCkgewogICAgICAtLXAtPnJlZl9jb3VudDsKICAgICAgaWYocC0+cmVmX2NvdW50ID09IDApCiAgICAgICAgX19KU19GcmVlVmFsdWUoY3R4LCB2KTsKICAgIH0KICB9Cn0KCkpTVmFsdWUKanNfdmFsdWVfY2xvbmUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGVudW0gdmFsdWVfbWFzayB0eXBlID0gMSA8PCBqc192YWx1ZV90eXBlX2dldChjdHgsIHZhbHVlKTsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKICBzd2l0Y2godHlwZSkgewogICAgLypjYXNlIFRZUEVfU1RSSU5HOiB7CiAgICAgc2l6ZV90IGxlbjsKICAgICBjb25zdCBjaGFyKiBzdHI7CiAgICAgc3RyID0gSlNfVG9DU3RyaW5nTGVuKGN0eCwgJmxlbiwgdmFsdWUpOwogICAgIHJldCA9IEpTX05ld1N0cmluZ0xlbihjdHgsIHN0ciwgbGVuKTsKICAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHIpOwogICAgIGJyZWFrOwogICAgIH0qLwogICAgY2FzZSBUWVBFX0lOVDogewogICAgICByZXQgPSBKU19OZXdJbnQzMihjdHgsIEpTX1ZBTFVFX0dFVF9JTlQodmFsdWUpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFRZUEVfRkxPQVQ2NDogewogICAgICByZXQgPSBKU19OZXdGbG9hdDY0KGN0eCwgSlNfVkFMVUVfR0VUX0ZMT0FUNjQodmFsdWUpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFRZUEVfQk9PTDogewogICAgICByZXQgPSBKU19OZXdCb29sKGN0eCwgSlNfVkFMVUVfR0VUX0JPT0wodmFsdWUpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFRZUEVfRlVOQ1RJT046CiAgICBjYXNlIFRZUEVfQVJSQVk6CiAgICBjYXNlIFRZUEVfT0JKRUNUOiB7CiAgICAgIEpTUHJvcGVydHlFbnVtKiB0YWJfYXRvbTsKICAgICAgdWludDMyX3QgdGFiX2F0b21fbGVuOwogICAgICByZXQgPSBKU19Jc0FycmF5KGN0eCwgdmFsdWUpID8gSlNfTmV3QXJyYXkoY3R4KSA6IEpTX05ld09iamVjdChjdHgpOwogICAgICBpZighSlNfR2V0T3duUHJvcGVydHlOYW1lcyhjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICZ0YWJfYXRvbSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJnRhYl9hdG9tX2xlbiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpTX0dQTl9TVFJJTkdfTUFTSyB8IEpTX0dQTl9TWU1CT0xfTUFTSyB8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU19HUE5fRU5VTV9PTkxZKSkgewogICAgICAgIHVpbnQzMl90IGk7CiAgICAgICAgZm9yKGkgPSAwOyBpIDwgdGFiX2F0b21fbGVuOyBpKyspIHsKICAgICAgICAgIEpTVmFsdWUgcHJvcDsKICAgICAgICAgIHByb3AgPSBKU19HZXRQcm9wZXJ0eShjdHgsIHZhbHVlLCB0YWJfYXRvbVtpXS5hdG9tKTsKICAgICAgICAgIEpTX1NldFByb3BlcnR5KGN0eCwgcmV0LCB0YWJfYXRvbVtpXS5hdG9tLCBqc192YWx1ZV9jbG9uZShjdHgsIHByb3ApKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIFRZUEVfVU5ERUZJTkVEOgogICAgY2FzZSBUWVBFX05VTEw6CiAgICBjYXNlIFRZUEVfU1RSSU5HOgogICAgY2FzZSBUWVBFX1NZTUJPTDoKICAgIGNhc2UgVFlQRV9CSUdfREVDSU1BTDoKICAgIGNhc2UgVFlQRV9CSUdfSU5UOgogICAgY2FzZSBUWVBFX0JJR19GTE9BVDogewogICAgICByZXQgPSBKU19EdXBWYWx1ZShjdHgsIHZhbHVlKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBkZWZhdWx0OiB7CiAgICAgIHJldCA9IEpTX1Rocm93VHlwZUVycm9yKGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIk5vIHN1Y2ggdHlwZTogJXMgKDB4JTA4eClcbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzX3ZhbHVlX3R5cGVfbmFtZSh0eXBlKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSk7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICByZXR1cm4gcmV0Owp9Cgp2b2lkCmpzX3ZhbHVlX2Z3cml0ZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbCwgRklMRSogZikgewogIER5bkJ1ZiBkYnVmID0gezB9OwogIHNpemVfdCBuOwogIGpzX2RidWZfaW5pdChjdHgsICZkYnVmKTsKICBqc192YWx1ZV9kdW1wKGN0eCwgdmFsLCAmZGJ1Zik7CiAgZGJ1Zl9wdXRjKCZkYnVmLCAnXG4nKTsKICBuID0gZGJ1Zi5zaXplOwogIGRidWZfMCgmZGJ1Zik7CiAgZndyaXRlKGRidWYuYnVmLCAxLCBuLCBmKTsKICBmZmx1c2goZik7CiAgZGJ1Zl9mcmVlKCZkYnVmKTsKfQoKdm9pZApqc192YWx1ZV9kdW1wKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUsIER5bkJ1ZiogZGIpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgc2l6ZV90IGxlbjsKICBpZihKU19Jc09iamVjdCh2YWx1ZSkpIHsKICAgIGNvbnN0IGNoYXIqIHN0ciA9IGpzX29iamVjdF90b3N0cmluZyhjdHgsIHZhbHVlKTsKICAgIGRidWZfcHV0c3RyKGRiLCBzdHIpOwogICAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyKTsKICAgIGlmKGRiLT5zaXplICYmIGRiLT5idWZbZGItPnNpemUgLSAxXSA9PSAnXG4nKQogICAgICBkYi0+c2l6ZS0tOwogIH0gZWxzZSB7CiAgICBpbnQgaXNfc3RyaW5nID0gSlNfSXNTdHJpbmcodmFsdWUpOwoKICAgIGlmKGlzX3N0cmluZykKICAgICAgZGJ1Zl9wdXRjKGRiLCAnIicpOwoKICAgIHN0ciA9IEpTX1RvQ1N0cmluZ0xlbihjdHgsICZsZW4sIHZhbHVlKTsKICAgIGRidWZfYXBwZW5kKGRiLCAoY29uc3QgdWludDhfdCopc3RyLCBsZW4pOwoKICAgIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cik7CgogICAgaWYoaXNfc3RyaW5nKQogICAgICBkYnVmX3B1dGMoZGIsICciJyk7CiAgICBlbHNlIGlmKEpTX0lzQmlnRmxvYXQodmFsdWUpKQogICAgICBkYnVmX3B1dGMoZGIsICdsJyk7CiAgICBlbHNlIGlmKEpTX0lzQmlnRGVjaW1hbCh2YWx1ZSkpCiAgICAgIGRidWZfcHV0YyhkYiwgJ20nKTsKICAgIGVsc2UgaWYoSlNfSXNCaWdJbnQoY3R4LCB2YWx1ZSkpCiAgICAgIGRidWZfcHV0YyhkYiwgJ24nKTsKICB9Cn0KCkJPT0wKanNfdmFsdWVfZXF1YWxzKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYSwgSlNWYWx1ZUNvbnN0IGIpIHsKICBpbnQzMl90IHRhLCB0YjsKICBCT09MIHJldCA9IEZBTFNFOwogIHRhID0ganNfdmFsdWVfdHlwZShjdHgsIGEpOwogIHRiID0ganNfdmFsdWVfdHlwZShjdHgsIGIpOwoKICBpZih0YSAhPSB0YikgewogICAgcmV0ID0gRkFMU0U7CiAgfSBlbHNlIGlmKHRhICYgdGIgJiAoVFlQRV9OVUxMIHwgVFlQRV9VTkRFRklORUQgfCBUWVBFX05BTikpIHsKICAgIHJldCA9IFRSVUU7CiAgfSBlbHNlIGlmKHRhICYgdGIgJiAoVFlQRV9CSUdfSU5UIHwgVFlQRV9CSUdfRkxPQVQgfCBUWVBFX0JJR19ERUNJTUFMKSkgewogICAgY29uc3QgY2hhciAqYXN0ciwgKmJzdHI7CgogICAgYXN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIGEpOwogICAgYnN0ciA9IEpTX1RvQ1N0cmluZyhjdHgsIGIpOwoKICAgIHJldCA9ICFzdHJjbXAoYXN0ciwgYnN0cik7CgogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBhc3RyKTsKICAgIEpTX0ZyZWVDU3RyaW5nKGN0eCwgYnN0cik7CgogIH0gZWxzZSBpZih0YSAmIFRZUEVfSU5UKSB7CiAgICBpbnQzMl90IGludGEsIGludGI7CgogICAgaW50YSA9IEpTX1ZBTFVFX0dFVF9JTlQoYSk7CiAgICBpbnRiID0gSlNfVkFMVUVfR0VUX0lOVChiKTsKICAgIHJldCA9IGludGEgPT0gaW50YjsKICB9IGVsc2UgaWYodGEgJiBUWVBFX0JPT0wpIHsKICAgIEJPT0wgYm9vbGEsIGJvb2xiOwoKICAgIGJvb2xhID0gISFKU19WQUxVRV9HRVRfQk9PTChhKTsKICAgIGJvb2xiID0gISFKU19WQUxVRV9HRVRfQk9PTChiKTsKICAgIHJldCA9IGJvb2xhID09IGJvb2xiOwoKICB9IGVsc2UgaWYodGEgJiBUWVBFX0ZMT0FUNjQpIHsKICAgIGRvdWJsZSBmbHRhLCBmbHRiOwoKICAgIGZsdGEgPSBKU19WQUxVRV9HRVRfRkxPQVQ2NChhKTsKICAgIGZsdGIgPSBKU19WQUxVRV9HRVRfRkxPQVQ2NChiKTsKICAgIHJldCA9IGZsdGEgPT0gZmx0YjsKCiAgfSBlbHNlIGlmKHRhICYgVFlQRV9PQkpFQ1QpIHsKICAgIHJldCA9IGpzX29iamVjdF9lcXVhbHMoY3R4LCBhLCBiKTsKICAgIC8qdm9pZCAqb2JqYSwgKm9iamI7CgogICAgb2JqYSA9IEpTX1ZBTFVFX0dFVF9PQkooYSk7CiAgICBvYmpiID0gSlNfVkFMVUVfR0VUX09CSihiKTsKCiAgICByZXQgPSBvYmphID09IG9iamI7Ki8KICB9IGVsc2UgaWYodGEgJiBUWVBFX1NUUklORykgewogICAgY29uc3QgY2hhciAqc3RyYSwgKnN0cmI7CgogICAgc3RyYSA9IEpTX1RvQ1N0cmluZyhjdHgsIGEpOwogICAgc3RyYiA9IEpTX1RvQ1N0cmluZyhjdHgsIGIpOwoKICAgIHJldCA9ICFzdHJjbXAoc3RyYSwgc3RyYik7CgogICAganNfY3N0cmluZ19mcmVlKGN0eCwgc3RyYSk7CiAgICBqc19jc3RyaW5nX2ZyZWUoY3R4LCBzdHJiKTsKICB9CgogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfdmFsdWVfZnJvbV9jaGFyKEpTQ29udGV4dCogY3R4LCBpbnQgYykgewogIHVpbnQ4X3QgYnVmWzE2XTsKICBzaXplX3QgbGVuID0gdW5pY29kZV90b191dGY4KGJ1ZiwgYyk7CiAgcmV0dXJuIEpTX05ld1N0cmluZ0xlbihjdHgsIChjb25zdCBjaGFyKilidWYsIGxlbik7Cn0KCnZvaWQKanNfdmFsdWVfcHJpbnQoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIER5bkJ1ZiBkYnVmOwogIGpzX2RidWZfaW5pdChjdHgsICZkYnVmKTsKICBqc192YWx1ZV9kdW1wKGN0eCwgdmFsdWUsICZkYnVmKTsKICBkYnVmXzAoJmRidWYpOwogIGZwdXRzKChjb25zdCBjaGFyKilkYnVmLmJ1Ziwgc3Rkb3V0KTsKICBkYnVmX2ZyZWUoJmRidWYpOwp9CgppbnQKanNfdmFsdWVfdG9zaXplKEpTQ29udGV4dCogY3R4LCBzaXplX3QqIHN6LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICB1aW50NjRfdCB1NjQgPSAwOwogIGludCByOwogIHIgPSBKU19Ub0luZGV4KGN0eCwgJnU2NCwgdmFsdWUpOwogICpzeiA9IHU2NDsKICByZXR1cm4gcjsKfQoKdm9pZApqc192YWx1ZV9mcmVlX3J0KEpTUnVudGltZSogcnQsIEpTVmFsdWUgdikgewogIGlmKGpzX3ZhbHVlX2hhc19yZWZfY291bnQodikpIHsKICAgIEpTUmVmQ291bnRIZWFkZXIqIHAgPSAoSlNSZWZDb3VudEhlYWRlciopanNfdmFsdWVfcHRyKHYpOwogICAgLS1wLT5yZWZfY291bnQ7CiAgICBpZihwLT5yZWZfY291bnQgPT0gMCkKICAgICAgX19KU19GcmVlVmFsdWVSVChydCwgdik7CiAgfQp9CgpjaGFyKgpqc19jc3RyaW5nX3B0cihKU1ZhbHVlQ29uc3QgdikgewogIEpTU3RyaW5nKiBwOwoKICBpZihKU19Jc1N0cmluZyh2KSkgewogICAgcCA9IEpTX1ZBTFVFX0dFVF9QVFIodik7CiAgICByZXR1cm4gKGNoYXIqKXAtPnUuc3RyODsKICB9CiAgcmV0dXJuIDA7Cn0KY2hhcioKanNfY3N0cmluZ19kdXAoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN0cikgewogIEpTU3RyaW5nKiBwOwogIGlmKCFzdHIpCiAgICByZXR1cm4gMDsKICAvKiBwdXJwb3NlbHkgcmVtb3ZpbmcgY29uc3RuZXNzICovCiAgcCA9IChKU1N0cmluZyopKHZvaWQqKShzdHIgLSBvZmZzZXRvZihKU1N0cmluZywgdSkpOwogIEpTX0R1cFZhbHVlKGN0eCwgSlNfTUtQVFIoSlNfVEFHX1NUUklORywgcCkpOwogIHJldHVybiAoY2hhciopc3RyOwp9CgpKU1ZhbHVlQ29uc3QKanNfY3N0cmluZ192YWx1ZShjb25zdCBjaGFyKiBwdHIpIHsKICBKU1N0cmluZyogcDsKICBpZighcHRyKQogICAgcmV0dXJuIEpTX1VOREVGSU5FRDsKCiAgcCA9IChKU1N0cmluZyopKHZvaWQqKShwdHIgLSBvZmZzZXRvZihKU1N0cmluZywgdSkpOwogIHJldHVybiBKU19NS1BUUihKU19UQUdfU1RSSU5HLCBwKTsKfQoKdm9pZApqc19jc3RyaW5nX2R1bXAoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSwgRHluQnVmKiBkYikgewogIGNvbnN0IGNoYXIqIHN0cjsKICBzaXplX3QgbGVuOwoKICBzdHIgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCAmbGVuLCB2YWx1ZSk7CiAgZGJ1Zl9hcHBlbmQoZGIsIChjb25zdCB1aW50OF90KilzdHIsIGxlbik7CgogIGpzX2NzdHJpbmdfZnJlZShjdHgsIHN0cik7Cn0KCkpTVmFsdWUKanNfbWFwX25ldyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGVudHJpZXMpIHsKICBKU1ZhbHVlIG1hcCwgY3RvciA9IGpzX2dsb2JhbF9nZXQoY3R4LCAiTWFwIik7CiAgbWFwID0gSlNfQ2FsbENvbnN0cnVjdG9yKGN0eCwgY3RvciwgMSwgJmVudHJpZXMpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGN0b3IpOwogIHJldHVybiBtYXA7Cn0KCkpTVmFsdWUKbW9kdWxlX25hbWUoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtb2R1bGUpIHsKICByZXR1cm4gSlNfQXRvbVRvVmFsdWUoY3R4LCBtb2R1bGUtPm1vZHVsZV9uYW1lKTsKfQoKY29uc3QgY2hhcioKbW9kdWxlX25hbWVzdHIoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBtb2R1bGUpIHsKICBjb25zdCBjaGFyICpzdHIsICpuYW1lID0gSlNfQXRvbVRvQ1N0cmluZyhjdHgsIG1vZHVsZS0+bW9kdWxlX25hbWUpOwogIHN0ciA9IGpzX3N0cmR1cChjdHgsIG5hbWUpOwogIEpTX0ZyZWVDU3RyaW5nKGN0eCwgbmFtZSk7CiAgcmV0dXJuIHN0cjsKfQoKSlNWYWx1ZQptb2R1bGVfZnVuYyhKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG1vZHVsZSkgewogIHJldHVybiBKU19EdXBWYWx1ZShjdHgsIG1vZHVsZS0+ZnVuY19vYmopOwp9CgpKU1ZhbHVlCm1vZHVsZV9ucyhKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG1vZHVsZSkgewogIHJldHVybiBKU19EdXBWYWx1ZShjdHgsIG1vZHVsZS0+bW9kdWxlX25zKTsKfQoKSlNWYWx1ZQptb2R1bGVfZXhwb3J0cyhKU0NvbnRleHQqIGN0eCwgSlNNb2R1bGVEZWYqIG1vZHVsZSkgewogIEpTVmFsdWUgZXhwb3J0cyA9IEpTX05ld09iamVjdChjdHgpOwogIHNpemVfdCBpOwogIGZvcihpID0gMDsgaSA8IG1vZHVsZS0+ZXhwb3J0X2VudHJpZXNfY291bnQ7IGkrKykgewogICAgSlNFeHBvcnRFbnRyeSogZW50cnkgPSAmbW9kdWxlLT5leHBvcnRfZW50cmllc1tpXTsKICAgIEpTVmFyUmVmKiByZWYgPSBlbnRyeS0+dS5sb2NhbC52YXJfcmVmOwogICAgaWYocmVmKSB7CiAgICAgIEpTVmFsdWUgZXhwb3J0ID0KICAgICAgICAgIEpTX0R1cFZhbHVlKGN0eCwgcmVmLT5wdmFsdWUgPyAqcmVmLT5wdmFsdWUgOiByZWYtPnZhbHVlKTsKICAgICAgSlNfU2V0UHJvcGVydHkoY3R4LCBleHBvcnRzLCBlbnRyeS0+ZXhwb3J0X25hbWUsIGV4cG9ydCk7CiAgICB9CiAgfQogIHJldHVybiBleHBvcnRzOwp9CgpzdHJ1Y3QgbGlzdF9oZWFkKgpqc19tb2R1bGVzX2xpc3QoSlNDb250ZXh0KiBjdHgpIHsKICByZXR1cm4gJmN0eC0+bG9hZGVkX21vZHVsZXM7Cn0KCkpTVmFsdWUKanNfbW9kdWxlc19hcnJheShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBzdHJ1Y3QgbGlzdF9oZWFkKiBlbDsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgdWludDMyX3QgaSA9IDA7CiAgbGlzdF9mb3JfZWFjaChlbCwgJmN0eC0+bG9hZGVkX21vZHVsZXMpIHsKICAgIEpTTW9kdWxlRGVmKiBkZWYgPSBsaXN0X2VudHJ5KGVsLCBKU01vZHVsZURlZiwgbGluayk7CiAgICBjb25zdCBjaGFyKiBzdHIgPSBtb2R1bGVfbmFtZXN0cihjdHgsIGRlZik7CiAgICBKU1ZhbHVlIGVudHJ5ID0gbWFnaWMgPyBtb2R1bGVfZW50cnkoY3R4LCBkZWYpIDogbW9kdWxlX29iamVjdChjdHgsIGRlZik7CiAgICBpZihzdHJbMF0gIT0gJzwnKQogICAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIHJldCwgaSsrLCBlbnRyeSk7CiAgICBlbHNlCiAgICAgIEpTX0ZyZWVWYWx1ZShjdHgsIGVudHJ5KTsKICAgIGpzX2ZyZWUoY3R4LCBzdHIpOwogIH0KICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX21vZHVsZXNfZW50cmllcyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBzdHJ1Y3QgbGlzdF9oZWFkKiBlbDsKICBKU1ZhbHVlIHJldCA9IEpTX05ld0FycmF5KGN0eCk7CiAgdWludDMyX3QgaSA9IDA7CiAgbGlzdF9mb3JfZWFjaChlbCwgJmN0eC0+bG9hZGVkX21vZHVsZXMpIHsKICAgIEpTTW9kdWxlRGVmKiBkZWYgPSBsaXN0X2VudHJ5KGVsLCBKU01vZHVsZURlZiwgbGluayk7CiAgICBjb25zdCBjaGFyKiBuYW1lID0gbW9kdWxlX25hbWVzdHIoY3R4LCBkZWYpOwogICAgSlNWYWx1ZSBlbnRyeSA9IEpTX05ld0FycmF5KGN0eCk7CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAwLCBKU19OZXdTdHJpbmcoY3R4LCAvKmJhc2VuYW1lKi8gKG5hbWUpKSk7CiAgICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyeSwKICAgICAgICAgICAgICAgICAgICAgICAgIDEsCiAgICAgICAgICAgICAgICAgICAgICAgICBtYWdpYyA/IG1vZHVsZV9lbnRyeShjdHgsIGRlZikKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbW9kdWxlX29iamVjdChjdHgsIGRlZikpOwogICAgaWYobmFtZVswXSAhPSAnPCcpCiAgICAgIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgcmV0LCBpKyssIGVudHJ5KTsKICAgIGVsc2UKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgZW50cnkpOwogICAganNfZnJlZShjdHgsIG5hbWUpOwogIH0KICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX21vZHVsZXNfbWFwKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdGhpc192YWwsIGludCBtYWdpYykgewogIEpTVmFsdWUgbWFwLCBlbnRyaWVzID0ganNfbW9kdWxlc19lbnRyaWVzKGN0eCwgdGhpc192YWwsIG1hZ2ljKTsKICBtYXAgPSBqc19tYXBfbmV3KGN0eCwgZW50cmllcyk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgZW50cmllcyk7CiAgcmV0dXJuIG1hcDsKfQoKSlNWYWx1ZQpqc19tb2R1bGVzX29iamVjdChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHRoaXNfdmFsLCBpbnQgbWFnaWMpIHsKICBzdHJ1Y3QgbGlzdF9oZWFkKiBpdDsKICBKU1ZhbHVlIG9iaiA9IEpTX05ld09iamVjdChjdHgpOwogIGxpc3RfZm9yX2VhY2goaXQsICZjdHgtPmxvYWRlZF9tb2R1bGVzKSB7CiAgICBKU01vZHVsZURlZiogZGVmID0gbGlzdF9lbnRyeShpdCwgSlNNb2R1bGVEZWYsIGxpbmspOwogICAgY29uc3QgY2hhciogbmFtZSA9IG1vZHVsZV9uYW1lc3RyKGN0eCwgZGVmKTsKICAgIEpTVmFsdWUgZW50cnkgPSBtYWdpYyA/IG1vZHVsZV9lbnRyeShjdHgsIGRlZikgOiBtb2R1bGVfb2JqZWN0KGN0eCwgZGVmKTsKICAgIGlmKG5hbWVbMF0gIT0gJzwnKQogICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgYmFzZW5hbWUobmFtZSksIGVudHJ5KTsKICAgIGVsc2UKICAgICAgSlNfRnJlZVZhbHVlKGN0eCwgZW50cnkpOwogICAganNfZnJlZShjdHgsIG5hbWUpOwogIH0KICByZXR1cm4gb2JqOwp9CgpKU1ZhbHVlCm1vZHVsZV9vYmplY3QoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBkZWYpIHsKICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBKU19NS1BUUihKU19UQUdfTU9EVUxFLCBkZWYpKTsKfQoKSlNWYWx1ZQptb2R1bGVfZW50cnkoSlNDb250ZXh0KiBjdHgsIEpTTW9kdWxlRGVmKiBkZWYpIHsKICBKU1ZhbHVlIGVudHJ5ID0gSlNfTmV3QXJyYXkoY3R4KTsKICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAwLCBtb2R1bGVfbnMoY3R4LCBkZWYpKTsKICBKU19TZXRQcm9wZXJ0eVVpbnQzMihjdHgsIGVudHJ5LCAxLCBtb2R1bGVfZXhwb3J0cyhjdHgsIGRlZikpOwogIEpTX1NldFByb3BlcnR5VWludDMyKGN0eCwgZW50cnksIDIsIG1vZHVsZV9mdW5jKGN0eCwgZGVmKSk7CiAgcmV0dXJuIGVudHJ5Owp9CgpjaGFyKgpqc19tb2R1bGVfc2VhcmNoKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBtb2R1bGUpIHsKICBjaGFyKiBwYXRoID0gMDsKICBzaXplX3QgbGVuOwoKICB3aGlsZSghc3RybmNtcChtb2R1bGUsICIuLyIsIDIpKSBtb2R1bGUgPSB0cmltX2RvdHNsYXNoKG1vZHVsZSk7CiAgbGVuID0gc3RybGVuKG1vZHVsZSk7CgogIGlmKCFzdHJfY29udGFpbnMobW9kdWxlLCAnLycpIHx8IHN0cl9lbmRzKG1vZHVsZSwgIi5zbyIpKQogICAgcGF0aCA9IGpzX21vZHVsZV9zZWFyY2hfZXh0KGN0eCwgbW9kdWxlLCAiLnNvIik7CgogIGlmKCFwYXRoKQogICAgcGF0aCA9IGpzX21vZHVsZV9zZWFyY2hfZXh0KGN0eCwgbW9kdWxlLCAiLmpzIik7CgogIHJldHVybiBwYXRoOwp9CgpjaGFyKgpqc19tb2R1bGVfc2VhcmNoX2V4dChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSwgY29uc3QgY2hhciogZXh0KSB7CiAgY29uc3QgY2hhciAqcGF0aCwgKnAsICpxOwogIGNoYXIqIGZpbGUgPSAwOwogIHNpemVfdCBpLCBqOwogIHN0cnVjdCBzdGF0IHN0OwoKICBpZigocGF0aCA9IGdldGVudigiUVVJQ0tKU19NT0RVTEVfUEFUSCIpKSA9PSAwKQogICAgcGF0aCA9IGpzX2RlZmF1bHRfbW9kdWxlX3BhdGg7CgogIGZvcihwID0gcGF0aDsgKnA7IHAgPSBxKSB7CiAgICBpZigocSA9IHN0cmNocihwLCAnOicpKSA9PSAwKQogICAgICBxID0gcCArIHN0cmxlbihwKTsKICAgIGkgPSBxIC0gcDsKICAgIGZpbGUgPSBqc19tYWxsb2MoY3R4LCBpICsgMSArIHN0cmxlbihuYW1lKSArIDMgKyAxKTsKICAgIHN0cm5jcHkoZmlsZSwgcCwgaSk7CiAgICBmaWxlW2ldID0gJy8nOwogICAgc3RyY3B5KCZmaWxlW2kgKyAxXSwgbmFtZSk7CiAgICBqID0gc3RybGVuKG5hbWUpOwogICAgaWYoIShqID49IDMgJiYgIXN0cmNtcCgmbmFtZVtqIC0gM10sIGV4dCkpKQogICAgICBzdHJjcHkoJmZpbGVbaSArIDEgKyBqXSwgZXh0KTsKICAgIGlmKCFzdGF0KGZpbGUsICZzdCkpCiAgICAgIHJldHVybiBmaWxlOwogICAganNfZnJlZShjdHgsIGZpbGUpOwogICAgaWYoKnEgPT0gJzonKQogICAgICArK3E7CiAgfQogIHJldHVybiAwOwp9CgpjaGFyKgpqc19tb2R1bGVfbm9ybWFsaXplKEpTQ29udGV4dCogY3R4LAogICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYXIqIHBhdGgsCiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhciogbmFtZSwKICAgICAgICAgICAgICAgICAgICB2b2lkKiBvcGFxdWUpIHsKICBzaXplX3QgcDsKICBjb25zdCBjaGFyKiByOwogIER5bkJ1ZiBmaWxlID0gezAsIDAsIDB9OwogIHNpemVfdCBuOwogIGlmKG5hbWVbMF0gIT0gJy4nKQogICAgcmV0dXJuIGpzX3N0cmR1cChjdHgsIG5hbWUpOwogIGpzX2RidWZfaW5pdChjdHgsICZmaWxlKTsKICBuID0gcGF0aFsocCA9IHN0cl9yY2hyKHBhdGgsICcvJykpXSA/IHAgOiAwOwogIGRidWZfcHV0KCZmaWxlLCBwYXRoLCBuKTsKICBkYnVmXzAoJmZpbGUpOwogIGZvcihyID0gbmFtZTs7KSB7CiAgICBpZihyWzBdID09ICcuJyAmJiByWzFdID09ICcvJykgewogICAgICByICs9IDI7CiAgICB9IGVsc2UgaWYoclswXSA9PSAnLicgJiYgclsxXSA9PSAnLicgJiYgclsyXSA9PSAnLycpIHsKICAgICAgaWYoZmlsZS5zaXplID09IDApCiAgICAgICAgYnJlYWs7CiAgICAgIGlmKChwID0gYnl0ZV9yY2hyKGZpbGUuYnVmLCBmaWxlLnNpemUsICcvJykpIDwgZmlsZS5zaXplKQogICAgICAgIHArKzsKICAgICAgZWxzZQogICAgICAgIHAgPSAwOwogICAgICBpZighc3RyY21wKCZmaWxlLmJ1ZltwXSwgIi4iKSB8fCAhc3RyY21wKCZmaWxlLmJ1ZltwXSwgIi4uIikpCiAgICAgICAgYnJlYWs7CiAgICAgIGlmKHAgPiAwKQogICAgICAgIHAtLTsKICAgICAgZmlsZS5zaXplID0gcDsKICAgICAgciArPSAzOwogICAgfSBlbHNlIHsKICAgICAgYnJlYWs7CiAgICB9CiAgfQogIGlmKGZpbGUuc2l6ZSA9PSAwKQogICAgZGJ1Zl9wdXRjKCZmaWxlLCAnLicpOwogIGRidWZfcHV0YygmZmlsZSwgJy8nKTsKICBkYnVmX3B1dHN0cigmZmlsZSwgcik7CiAgZGJ1Zl8wKCZmaWxlKTsKICByZXR1cm4gZmlsZS5idWY7Cn0KCkpTTW9kdWxlRGVmKgpqc19tb2R1bGVfZGVmKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBKU01vZHVsZURlZiogZGVmID0gMDsKICBpZihKU19Jc1N0cmluZyh2YWx1ZSkpIHsKICAgIGNvbnN0IGNoYXIqIG5hbWUgPSBKU19Ub0NTdHJpbmcoY3R4LCB2YWx1ZSk7CiAgICBkZWYgPSBqc19tb2R1bGVfZmluZChjdHgsIG5hbWUpOwogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBuYW1lKTsKICB9IGVsc2UgaWYoSlNfVkFMVUVfR0VUX1RBRyh2YWx1ZSkgPT0gSlNfVEFHX01PRFVMRSkgewogICAgZGVmID0gSlNfVkFMVUVfR0VUX1BUUih2YWx1ZSk7CiAgfQogIHJldHVybiBkZWY7Cn0KCkpTTW9kdWxlRGVmKgpqc19tb2R1bGVfZmluZChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbmFtZSkgewogIHN0cnVjdCBsaXN0X2hlYWQqIGVsOwogIHNpemVfdCBuYW1lbGVuID0gc3RybGVuKG5hbWUpOwogIGxpc3RfZm9yX2VhY2goZWwsICZjdHgtPmxvYWRlZF9tb2R1bGVzKSB7CiAgICBKU01vZHVsZURlZiogbW9kID0gbGlzdF9lbnRyeShlbCwgSlNNb2R1bGVEZWYsIGxpbmspOwogICAgY29uc3QgY2hhciAqbiwgKnN0ciA9IG1vZHVsZV9uYW1lc3RyKGN0eCwgbW9kKTsKICAgIHNpemVfdCBsZW47CiAgICBuID0gYmFzZW5hbWUoc3RyKTsKICAgIGxlbiA9IHN0cl9yY2hyKG4sICcuJyk7CiAgICBpZighc3RyY21wKHN0ciwgbmFtZSkgfHwgIXN0cmNtcChuLCBuYW1lKSB8fAogICAgICAgKGxlbiA9PSBuYW1lbGVuICYmICFzdHJuY21wKG4sIG5hbWUsIGxlbikpKQogICAgICByZXR1cm4gbW9kOwogICAganNfZnJlZShjdHgsIHN0cik7CiAgfQogIHJldHVybiAwOwp9CgpzdGF0aWMgdm9pZApqc19pbXBvcnRfZGlyZWN0aXZlKEpTQ29udGV4dCogY3R4LCBJbXBvcnREaXJlY3RpdmUgaW1wLCBEeW5CdWYqIGRiKSB7CiAgQk9PTCBoYXNfcHJvcCA9IGltcC5wcm9wICYmIGltcC5wcm9wWzBdOwogIEJPT0wgaXNfbnMgPSBpbXAuc3BlYyAmJiBpbXAuc3BlY1swXSA9PSAnKic7CiAgY2hhciogdmFyOwogIGNvbnN0IGNoYXIqIGJhc2UgPSBiYXNlbmFtZShpbXAucGF0aCk7CiAgc2l6ZV90IGJsZW4gPSBzdHJfY2hyKGJhc2UsICcuJyk7CiAgZGJ1Zl9wdXRzdHIoZGIsICJpbXBvcnQgIik7CiAgaWYoaW1wLnNwZWMpIHsKICAgIGRidWZfcHV0c3RyKGRiLCBpbXAuc3BlYyk7CiAgICBpZihpc19ucykgewogICAgICBpZighaW1wLm5zKQogICAgICAgIGltcC5ucyA9IGpzX3N0cm5kdXAoY3R4LCBiYXNlLCBibGVuKTsKICAgICAgZGJ1Zl9wdXRzdHIoZGIsICIgYXMgIik7CiAgICB9CiAgfQogIGlmKGltcC5zcGVjID09IDAgfHwgc3RyX2VxdWFsKGltcC5zcGVjLCAiZGVmYXVsdCIpKSB7CiAgICBpZighaW1wLm5zKQogICAgICBpbXAubnMgPSBqc19zdHJuZHVwKGN0eCwgYmFzZSwgYmxlbik7CiAgfQogIGlmKGltcC5ucykKICAgIGRidWZfcHV0bShkYiwgaW1wLm5zLCAwKTsKICBpZihpbXAucGF0aCkKICAgIGRidWZfcHV0bShkYiwgIiBmcm9tICciLCBpbXAucGF0aCwgIiciLCAwKTsKICBpZighKHZhciA9IGltcC52YXIpKQogICAgaWYoISh2YXIgPSBpbXAubnMpKQogICAgICB2YXIgPSBpbXAuc3BlYzsKICBkYnVmX3B1dHN0cihkYiwgIjtcbiIpOwoKICBpZigoaGFzX3Byb3AgfHwgaXNfbnMpICYmIHZhclswXSAhPSAnKicpIHsKICAgIGRidWZfcHV0bShkYiwgImdsb2JhbFRoaXMuIiwgdmFyLCAiID0gIiwgaW1wLm5zID8gaW1wLm5zIDogaW1wLnNwZWMsIGltcC5wcm9wICYmICppbXAucHJvcCA/ICIuIiA6IDAsIGltcC5wcm9wLCAwKTsKICB9IGVsc2UgewogICAgZGJ1Zl9wdXRtKGRiLCAiT2JqZWN0LmFzc2lnbihnbG9iYWxUaGlzLCAiLCBpbXAubnMgPyBpbXAubnMgOiBpbXAuc3BlYywgMCk7CiAgICBkYnVmX3B1dGMoZGIsICcpJyk7CiAgfQogIGRidWZfcHV0bShkYiwgIjsiLCAwKTsKICBkYnVmXzAoZGIpOwp9CgpKU1ZhbHVlCmpzX2ltcG9ydF9ldmFsKEpTQ29udGV4dCogY3R4LCBJbXBvcnREaXJlY3RpdmUgaW1wKSB7CiAgRHluQnVmIGJ1ZjsKICBqc19kYnVmX2luaXQoY3R4LCAmYnVmKTsKICBqc19pbXBvcnRfZGlyZWN0aXZlKGN0eCwgaW1wLCAmYnVmKTsKICBwcmludGYoImpzX2ltcG9ydF9ldmFsOiAnJS4qcydcbiIsIGJ1Zi5zaXplLCBidWYuYnVmKTsKICByZXR1cm4ganNfZXZhbF9idWYoY3R4LCBidWYuYnVmLCBidWYuc2l6ZSwgIjxpbnB1dD4iLCBKU19FVkFMX1RZUEVfTU9EVUxFKTsKfQoKSlNNb2R1bGVEZWYqCmpzX21vZHVsZV9pbXBvcnRfZGVmYXVsdChKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcGF0aCwgY29uc3QgY2hhciogdmFyKSB7CiAganNfaW1wb3J0X2V2YWwoY3R4LAogICAgICAgICAgICAgICAgIChJbXBvcnREaXJlY3RpdmUpewogICAgICAgICAgICAgICAgICAgICAucGF0aCA9IHBhdGgsCiAgICAgICAgICAgICAgICAgICAgIC5zcGVjID0gImRlZmF1bHQiLAogICAgICAgICAgICAgICAgICAgICAubnMgPSAwLAogICAgICAgICAgICAgICAgICAgICAucHJvcCA9ICJkZWZhdWx0IiwKICAgICAgICAgICAgICAgICAgICAgLnZhciA9IDAsCiAgICAgICAgICAgICAgICAgfSk7CiAgLy8gcHJpbnRmKCJqc19pbXBvcnRfZXZhbDogJyUuKnMnXG4iLCBidWYuc2l6ZSwgYnVmLmJ1Zik7CiAgcmV0dXJuIGpzX21vZHVsZV9maW5kKGN0eCwgcGF0aCk7Cn0KCkpTTW9kdWxlRGVmKgpqc19tb2R1bGVfaW1wb3J0X25hbWVzcGFjZShKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogcGF0aCwgY29uc3QgY2hhciogbnMpIHsKICBqc19pbXBvcnRfZXZhbChjdHgsCiAgICAgICAgICAgICAgICAgKEltcG9ydERpcmVjdGl2ZSl7CiAgICAgICAgICAgICAgICAgICAgIC5wYXRoID0gcGF0aCwKICAgICAgICAgICAgICAgICAgICAgLnNwZWMgPSAiKiIsCiAgICAgICAgICAgICAgICAgICAgIC5ucyA9IG5zLAogICAgICAgICAgICAgICAgICAgICAucHJvcCA9IDAsCiAgICAgICAgICAgICAgICAgICAgIC52YXIgPSAwLAogICAgICAgICAgICAgICAgIH0pOwogIC8vIGpzX21vZHVsZV9pbXBvcnQoY3R4LCBwYXRoLCBucywgMCwgMCk7CgogIHJldHVybiBqc19tb2R1bGVfZmluZChjdHgsIHBhdGgpOwp9CgpKU1ZhbHVlCmpzX21vZHVsZV9pbXBvcnQoSlNDb250ZXh0KiBjdHgsCiAgICAgICAgICAgICAgICAgY29uc3QgY2hhciogcGF0aCwKICAgICAgICAgICAgICAgICBjb25zdCBjaGFyKiBucywKICAgICAgICAgICAgICAgICBjb25zdCBjaGFyKiB2YXIsCiAgICAgICAgICAgICAgICAgY29uc3QgY2hhciogcHJvcCkgewogIER5bkJ1ZiBidWY7CiAgY29uc3QgY2hhciogbmFtZTsKICBzaXplX3QgbGVuLCBuc2xlbjsKICBuYW1lID0gYmFzZW5hbWUocGF0aCk7CiAgbGVuID0gMDsKICB3aGlsZShuYW1lW2xlbl0gJiYgaXNfaWRlbnRpZmllcl9jaGFyKG5hbWVbbGVuXSkpICsrbGVuOwogIG5zbGVuID0gbnMgPyBzdHJsZW4obnMpIDogbGVuOwogIG5zID0gbnMgPyBqc19zdHJkdXAoY3R4LCBucykgOiBqc19zdHJuZHVwKGN0eCwgbmFtZSwgbGVuKTsKICBqc19kYnVmX2luaXQoY3R4LCAmYnVmKTsKICBkYnVmX3ByaW50ZigmYnVmLAogICAgICAgICAgICAgICJpbXBvcnQgJXMlcyBmcm9tICclcyc7IGdsb2JhbFRoaXMuJXMgPSAlcyIsCiAgICAgICAgICAgICAgbnMgPyAiKiBhcyAiIDogIiIsCiAgICAgICAgICAgICAgbnMsCiAgICAgICAgICAgICAgcGF0aCwKICAgICAgICAgICAgICB2YXIgPyB2YXIgOiBucywKICAgICAgICAgICAgICBucyk7CgogIGlmKHByb3AgJiYgKnByb3ApIHsKICAgIGRidWZfcHV0YygmYnVmLCAnLicpOwogICAgZGJ1Zl9wdXRzdHIoJmJ1ZiwgcHJvcCk7CiAgfQogIGRidWZfcHV0YygmYnVmLCAnOycpOwogIGRidWZfMCgmYnVmKTsKICBwcmludGYoImpzX21vZHVsZV9pbXBvcnQ6ICclcydcbiIsIGJ1Zi5idWYpOwogIHJldHVybiBqc19ldmFsX2J1ZihjdHgsIGJ1Zi5idWYsIGJ1Zi5zaXplLCAiPGlucHV0PiIsIEpTX0VWQUxfVFlQRV9NT0RVTEUpOwp9CgpKU01vZHVsZURlZioKanNfbW9kdWxlX2xvYWRlcl9zbyhKU0NvbnRleHQqIGN0eCwgY29uc3QgY2hhciogbW9kdWxlKSB7CiAgSlNNb2R1bGVEZWYqIGRlZjsKICBKU01vZHVsZUxvYWRlckZ1bmMqIGluaXQ7CiAgdm9pZCogaGQ7CiAgY2hhciogZmlsZTsKICBzdGF0aWMgY29uc3QgY2hhciogZXJyb3JzWzNdID0geyJkbG9wZW4oKSBmYWlsZWQiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImpzX2luaXRfbW9kdWxlIG5vdCBmb3VuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiaW5pdGlhbGl6YXRpb24gZXJyb3IifTsKICBpZighc3RyY2hyKG1vZHVsZSwgJy8nKSkgewogICAgaWYoIShmaWxlID0ganNfbWFsbG9jKGN0eCwgc3RybGVuKG1vZHVsZSkgKyAyICsgMSkpKQogICAgICByZXR1cm4gMDsKICAgIHN0cmNweShmaWxlLCAiLi8iKTsKICAgIHN0cmNweShmaWxlICsgMiwgbW9kdWxlKTsKICB9IGVsc2UgewogICAgZmlsZSA9IChjaGFyKiltb2R1bGU7CiAgfQogIGhkID0gZGxvcGVuKGZpbGUsIFJUTERfTk9XIHwgUlRMRF9MT0NBTCk7CiAgaWYoZmlsZSAhPSBtb2R1bGUpCiAgICBqc19mcmVlKGN0eCwgZmlsZSk7CiAgaWYoaGQpIHsKICAgIGlmKChpbml0ID0gZGxzeW0oaGQsICJqc19pbml0X21vZHVsZSIpKSkgewogICAgICBpZighKGRlZiA9IGluaXQoY3R4LCBtb2R1bGUsIDApKSkgewogICAgICAgIEpTX1Rocm93UmVmZXJlbmNlRXJyb3IoY3R4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgImNvdWxkIG5vdCBsb2FkIG1vZHVsZSBmaWxlICclcyc6ICVzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yc1syXSk7CiAgICAgICAgZ290byBmYWlsOwogICAgICB9CiAgICB9IGVsc2UgewogICAgICBKU19UaHJvd1JlZmVyZW5jZUVycm9yKGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAiY291bGQgbm90IGxvYWQgbW9kdWxlIGZpbGUgJyVzJzogJXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yc1sxXSk7CiAgICAgIGdvdG8gZmFpbDsKICAgIH0KICB9IGVsc2UgewogICAgSlNfVGhyb3dSZWZlcmVuY2VFcnJvcihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICJjb3VsZCBub3QgbG9hZCBtb2R1bGUgZmlsZSAnJXMnOiAlczogJXMiLAogICAgICAgICAgICAgICAgICAgICAgICAgICBtb2R1bGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yc1swXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgZGxlcnJvcigpKTsKICAgIGdvdG8gZmFpbDsKICB9CiAgcmV0dXJuIGRlZjsKZmFpbDoKICBpZihoZCkKICAgIGRsY2xvc2UoaGQpOwogIHJldHVybiAwOwp9CgpCT09MCmpzX2lzX2FycmF5YnVmZmVyKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICBCT09MIHJldCA9IEZBTFNFOwogIGlmKCFKU19Jc09iamVjdCh2YWx1ZSkpCiAgICByZXR1cm4gcmV0OwogIGlmKCFyZXQpCiAgICByZXQgfD0ganNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19BUlJBWV9CVUZGRVIpOwogIGlmKCFyZXQpCiAgICByZXQgfD0ganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IEFycmF5QnVmZmVyXSIpOwogIC8qICBpZighcmV0KSB7CiAgICAgIEpTT2JqZWN0KiBvYmo7CiAgICAgIGlmKChvYmogPSBqc192YWx1ZV9vYmoodmFsdWUpKSAmJiBvYmotPmNsYXNzX2lkKSB7CiAgICAgICAgSlNWYWx1ZSBjdG9yID0ganNfZ2xvYmFsX2dldChjdHgsICJBcnJheUJ1ZmZlciIpOwogICAgICAgIHJldCA9IEpTX0lzSW5zdGFuY2VPZihjdHgsIHZhbHVlLCBjdG9yKTsKICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBjdG9yKTsKICAgICAgfQogICAgfSovCiAgcmV0dXJuIHJldDsKfQoKQk9PTApqc19pc19zaGFyZWRhcnJheWJ1ZmZlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzT2JqZWN0KHZhbHVlKSAmJiAoanNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19TSEFSRURfQVJSQVlfQlVGRkVSKS8qIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IFNoYXJlZEFycmF5QnVmZmVyXSIpKi8pOwp9CgpCT09MCmpzX2lzX21hcChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzT2JqZWN0KHZhbHVlKSAmJgogICAgICAgICAoanNfdmFsdWVfaXNjbGFzcygKICAgICAgICAgICAgIGN0eCwKICAgICAgICAgICAgIHZhbHVlLAogICAgICAgICAgICAgSlNfQ0xBU1NfTUFQKSAvKnx8IGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBNYXBdIikqLyk7Cn0KCkJPT0wKanNfaXNfc2V0KEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmCiAgICAgICAgIChqc192YWx1ZV9pc2NsYXNzKAogICAgICAgICAgICAgY3R4LAogICAgICAgICAgICAgdmFsdWUsCiAgICAgICAgICAgICBKU19DTEFTU19TRVQpIC8qIHx8IGpzX29iamVjdF9pcyhjdHgsIHZhbHVlLCAiW29iamVjdCBTZXRdIikqLyk7Cn0KCkJPT0wKanNfaXNfZ2VuZXJhdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX0dFTkVSQVRPUikgLyp8fCBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgR2VuZXJhdG9yXSIpKi8pOwp9CgpCT09MCmpzX2lzX3JlZ2V4cChKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IHZhbHVlKSB7CiAgcmV0dXJuIEpTX0lzT2JqZWN0KHZhbHVlKSAmJiAoanNfdmFsdWVfaXNjbGFzcyhjdHgsIHZhbHVlLCBKU19DTEFTU19SRUdFWFApIC8qfHwganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IFJlZ0V4cF0iKSovKTsKfQoKQk9PTApqc19pc19wcm9taXNlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgdmFsdWUpIHsKICByZXR1cm4gSlNfSXNPYmplY3QodmFsdWUpICYmCiAgICAgICAgIChqc192YWx1ZV9pc2NsYXNzKGN0eCwgdmFsdWUsIEpTX0NMQVNTX1BST01JU0UpIHx8CiAgICAgICAgICBqc19vYmplY3RfaXMoY3R4LCB2YWx1ZSwgIltvYmplY3QgUHJvbWlzZV0iKSk7Cn0KCkJPT0wKanNfaXNfZGF0YXZpZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIHJldHVybiBKU19Jc09iamVjdCh2YWx1ZSkgJiYgKGpzX3ZhbHVlX2lzY2xhc3MoY3R4LCB2YWx1ZSwgSlNfQ0xBU1NfREFUQVZJRVcpIC8qfHwganNfb2JqZWN0X2lzKGN0eCwgdmFsdWUsICJbb2JqZWN0IERhdGFWaWV3XSIpKi8pOwp9CgpCT09MCmpzX2lzX2l0ZXJhYmxlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKSB7CiAgSlNBdG9tIGF0b207CiAgQk9PTCByZXQgPSBGQUxTRTsKICBhdG9tID0ganNfc3ltYm9sX3N0YXRpY19hdG9tKGN0eCwgIml0ZXJhdG9yIik7CiAgaWYoSlNfSGFzUHJvcGVydHkoY3R4LCBvYmosIGF0b20pKQogICAgcmV0ID0gVFJVRTsKCiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICBpZighcmV0KSB7CiAgICBhdG9tID0ganNfc3ltYm9sX3N0YXRpY19hdG9tKGN0eCwgImFzeW5jSXRlcmF0b3IiKTsKICAgIGlmKEpTX0hhc1Byb3BlcnR5KGN0eCwgb2JqLCBhdG9tKSkKICAgICAgcmV0ID0gVFJVRTsKCiAgICBKU19GcmVlQXRvbShjdHgsIGF0b20pOwogIH0KICByZXR1cm4gcmV0Owp9CgpCT09MCmpzX2lzX2l0ZXJhdG9yKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3Qgb2JqKSB7CiAgaWYoSlNfSXNPYmplY3Qob2JqKSkgewogICAgSlNWYWx1ZSBuZXh0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBvYmosICJuZXh0Iik7CgogICAgaWYoSlNfSXNGdW5jdGlvbihjdHgsIG5leHQpKQogICAgICByZXR1cm4gVFJVRTsKICB9CiAgcmV0dXJuIEZBTFNFOwp9CgpKU1ZhbHVlCmpzX3R5cGVkYXJyYXlfcHJvdG90eXBlKEpTQ29udGV4dCogY3R4KSB7CiAgSlNWYWx1ZSB1OGFycl9wcm90byA9IGpzX2dsb2JhbF9wcm90b3R5cGUoY3R4LCAiVWludDhBcnJheSIpOwogIEpTVmFsdWUgdHlwZWRhcnJfcHJvdG8gPSBKU19HZXRQcm90b3R5cGUoY3R4LCB1OGFycl9wcm90byk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdThhcnJfcHJvdG8pOwogIHJldHVybiB0eXBlZGFycl9wcm90bzsKfQoKSlNWYWx1ZQpqc190eXBlZGFycmF5X2NvbnN0cnVjdG9yKEpTQ29udGV4dCogY3R4KSB7CiAgSlNWYWx1ZSB0eXBlZGFycl9wcm90byA9IGpzX3R5cGVkYXJyYXlfcHJvdG90eXBlKGN0eCk7CiAgSlNWYWx1ZSB0eXBlZGFycl9jdG9yID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB0eXBlZGFycl9wcm90bywgImNvbnN0cnVjdG9yIik7CiAgSlNfRnJlZVZhbHVlKGN0eCwgdHlwZWRhcnJfcHJvdG8pOwogIHJldHVybiB0eXBlZGFycl9jdG9yOwp9CgpKU1ZhbHVlCmpzX2ludm9rZShKU0NvbnRleHQqIGN0eCwKICAgICAgICAgIEpTVmFsdWVDb25zdCB0aGlzX29iaiwKICAgICAgICAgIGNvbnN0IGNoYXIqIG1ldGhvZCwKICAgICAgICAgIGludCBhcmdjLAogICAgICAgICAgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSkgewogIEpTQXRvbSBhdG9tOwogIEpTVmFsdWUgcmV0OwogIGF0b20gPSBKU19OZXdBdG9tKGN0eCwgbWV0aG9kKTsKICByZXQgPSBKU19JbnZva2UoY3R4LCB0aGlzX29iaiwgYXRvbSwgYXJnYywgYXJndik7CiAgSlNfRnJlZUF0b20oY3R4LCBhdG9tKTsKICByZXR1cm4gcmV0Owp9CgpKU1ZhbHVlCmpzX3N5bWJvbF9vcGVyYXRvcnNldF92YWx1ZShKU0NvbnRleHQqIGN0eCkgewogIHJldHVybiBqc19zeW1ib2xfc3RhdGljX3ZhbHVlKGN0eCwgIm9wZXJhdG9yU2V0Iik7Cn0KCkpTQXRvbQpqc19zeW1ib2xfb3BlcmF0b3JzZXRfYXRvbShKU0NvbnRleHQqIGN0eCkgewogIEpTVmFsdWUgb3BlcmF0b3Jfc2V0ID0ganNfc3ltYm9sX29wZXJhdG9yc2V0X3ZhbHVlKGN0eCk7CiAgSlNBdG9tIGF0b20gPSBKU19WYWx1ZVRvQXRvbShjdHgsIG9wZXJhdG9yX3NldCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgb3BlcmF0b3Jfc2V0KTsKICByZXR1cm4gYXRvbTsKfQoKSlNWYWx1ZQpqc19vcGVyYXRvcnNfY3JlYXRlKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlKiB0aGlzX29iaikgewogIEpTVmFsdWUgb3BlcmF0b3JzID0ganNfZ2xvYmFsX2dldChjdHgsICJPcGVyYXRvcnMiKTsKICBKU1ZhbHVlIGNyZWF0ZV9mdW4gPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIG9wZXJhdG9ycywgImNyZWF0ZSIpOwogIGlmKHRoaXNfb2JqKQogICAgKnRoaXNfb2JqID0gb3BlcmF0b3JzOwogIGVsc2UKICAgIEpTX0ZyZWVWYWx1ZShjdHgsIG9wZXJhdG9ycyk7CiAgcmV0dXJuIGNyZWF0ZV9mdW47Cn0KCkpTVmFsdWUKanNfbnVtYmVyX25ldyhKU0NvbnRleHQqIGN0eCwgaW50MzJfdCBuKSB7CiAgaWYobiA9PSBJTlQzMl9NQVgpCiAgICByZXR1cm4gSlNfTmV3RmxvYXQ2NChjdHgsIElORklOSVRZKTsKCiAgcmV0dXJuIEpTX05ld0ludDMyKGN0eCwgbik7Cn0KCkpTVmFsdWUKanNfZGF0ZV9uZXcoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCBhcmcpIHsKICBKU1ZhbHVlIGN0b3IgPSBqc19nbG9iYWxfZ2V0KGN0eCwgIkRhdGUiKTsKICBKU1ZhbHVlIHJldCA9IEpTX0NhbGxDb25zdHJ1Y3RvcihjdHgsIGN0b3IsIDEsICZhcmcpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIGN0b3IpOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfZGF0ZV9mcm9tX21zKEpTQ29udGV4dCogY3R4LCBpbnQ2NF90IG1zKSB7CiAgSlNWYWx1ZSBhcmcgPSBKU19OZXdJbnQ2NChjdHgsIG1zKTsKICBKU1ZhbHVlIHJldCA9IGpzX2RhdGVfbmV3KGN0eCwgYXJnKTsKICBKU19GcmVlVmFsdWUoY3R4LCBhcmcpOwogIHJldHVybiByZXQ7Cn0KCkpTVmFsdWUKanNfZGF0ZV9mcm9tX3RpbWVfbnMoSlNDb250ZXh0KiBjdHgsIHRpbWVfdCB0LCBsb25nIG5zKSB7CiAgcmV0dXJuIGpzX2RhdGVfZnJvbV9tcyhjdHgsIHQgKiAxMDAwdWxsICsgbnMgLyAxMDAwMDAwdWxsKTsKfQoKSlNWYWx1ZQpqc19kYXRlX2Zyb21fdGltZXNwZWMoSlNDb250ZXh0KiBjdHgsIGNvbnN0IHN0cnVjdCB0aW1lc3BlYyB0cykgewogIHJldHVybiBqc19kYXRlX2Zyb21fdGltZV9ucyhjdHgsIHRzLnR2X3NlYywgdHMudHZfbnNlYyk7Cn0KCmludDY0X3QKanNfZGF0ZV9nZXR0aW1lKEpTQ29udGV4dCogY3R4LCBKU1ZhbHVlQ29uc3QgYXJnKSB7CiAgaW50NjRfdCByID0gLTE7CiAgSlNBdG9tIG1ldGhvZCA9IEpTX05ld0F0b20oY3R4LCAiZ2V0VGltZSIpOwogIEpTVmFsdWUgdmFsdWUgPSBKU19JbnZva2UoY3R4LCBhcmcsIG1ldGhvZCwgMCwgMCk7CiAgSlNfRnJlZUF0b20oY3R4LCBtZXRob2QpOwogIGlmKEpTX0lzTnVtYmVyKHZhbHVlKSkKICAgIEpTX1RvSW50NjQoY3R4LCAmciwgdmFsdWUpOwogIEpTX0ZyZWVWYWx1ZShjdHgsIHZhbHVlKTsKICByZXR1cm4gcjsKfQoKaW50NjRfdApqc19kYXRlX3RpbWUoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWUgYXJnKSB7CiAgaW50NjRfdCByID0gLTE7CiAgaWYoSlNfSXNPYmplY3QoYXJnKSkKICAgIHIgPSBqc19kYXRlX2dldHRpbWUoY3R4LCBhcmcpOwogIGVsc2UgaWYoIWpzX2lzX251bGxpc2goY3R4LCBhcmcpKQogICAgSlNfVG9JbnQ2NChjdHgsICZyLCBhcmcpOwogIHJldHVybiByOwp9CgpzdHJ1Y3QgdGltZXNwZWMKanNfZGF0ZV90aW1lc3BlYyhKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZSBhcmcpIHsKICBzdHJ1Y3QgdGltZXNwZWMgdHM7CiAgaW50NjRfdCByID0ganNfZGF0ZV90aW1lKGN0eCwgYXJnKTsKICB0cy50dl9zZWMgPSByIC8gMTAwMHVsbDsKICB0cy50dl9uc2VjID0gKHIgLSB0cy50dl9zZWMpICogMTAwMDAwMHVsbDsKICByZXR1cm4gdHM7Cn0KCnZvaWQKanNfYXJyYXlidWZmZXJfZnJlZXZhbHVlKEpTUnVudGltZSogcnQsIHZvaWQqIG9wYXF1ZSwgdm9pZCogcHRyKSB7CiAgSlNWYWx1ZSogdmFscHRyID0gb3BhcXVlOwogIEpTX0ZyZWVWYWx1ZVJUKHJ0LCAqdmFscHRyKTsKICBqc19mcmVlX3J0KHJ0LCBvcGFxdWUpOwp9CgpKU1ZhbHVlCmpzX2FycmF5YnVmZmVyX2Zyb212YWx1ZShKU0NvbnRleHQqIGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZvaWQqIHgsCiAgICAgICAgICAgICAgICAgICAgICAgICBzaXplX3QgbiwKICAgICAgICAgICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCB2YWwpIHsKICBKU1ZhbHVlKiB2YWxwdHI7CiAgaWYoISh2YWxwdHIgPSBqc19tYWxsb2MoY3R4LCBzaXplb2YoSlNWYWx1ZSkpKSkKICAgIHJldHVybiBKU19UaHJvd091dE9mTWVtb3J5KGN0eCk7CiAgKnZhbHB0ciA9IEpTX0R1cFZhbHVlKGN0eCwgdmFsKTsKICByZXR1cm4gSlNfTmV3QXJyYXlCdWZmZXIoY3R4LCB4LCBuLCBqc19hcnJheWJ1ZmZlcl9mcmVldmFsdWUsIHZhbHB0ciwgRkFMU0UpOwp9CgppbnQ2NF90CmpzX2FycmF5YnVmZmVyX2J5dGVsZW5ndGgoSlNDb250ZXh0KiBjdHgsIEpTVmFsdWVDb25zdCB2YWx1ZSkgewogIGludDY0X3QgbGVuID0gLTE7CiAgaWYoanNfaXNfYXJyYXlidWZmZXIoY3R4LCB2YWx1ZSkpIHsKICAgIEpTVmFsdWUgbGVuZ3RoID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCB2YWx1ZSwgImJ5dGVMZW5ndGgiKTsKICAgIEpTX1RvSW50NjQoY3R4LCAmbGVuLCBsZW5ndGgpOwogICAgSlNfRnJlZVZhbHVlKGN0eCwgbGVuZ3RoKTsKICB9CiAgcmV0dXJuIGxlbjsKfQoKSlNWYWx1ZQpqc19ldmFsX21vZHVsZShKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IG9iaiwgQk9PTCBsb2FkX29ubHkpIHsKICBKU1ZhbHVlIHJldCA9IEpTX1VOREVGSU5FRDsKICBpbnQgdGFnID0gSlNfVkFMVUVfR0VUX1RBRyhvYmopOwogIGlmKHRhZyA9PSBKU19UQUdfTU9EVUxFKSB7CiAgICBpZighbG9hZF9vbmx5ICYmIEpTX1Jlc29sdmVNb2R1bGUoY3R4LCBvYmopIDwgMCkgewogICAgICBKU19GcmVlVmFsdWUoY3R4LCBvYmopOwogICAgICByZXR1cm4gSlNfVGhyb3dJbnRlcm5hbEVycm9yKGN0eCwgIkZhaWxlZCByZXNvbHZpbmcgbW9kdWxlIik7CiAgICB9CiAgICBqc19tb2R1bGVfc2V0X2ltcG9ydF9tZXRhKGN0eCwgb2JqLCBGQUxTRSwgIWxvYWRfb25seSk7CiAgICByZXR1cm4gbG9hZF9vbmx5ID8gSlNfRHVwVmFsdWUoY3R4LCBvYmopIDogSlNfRXZhbEZ1bmN0aW9uKGN0eCwgb2JqKTsKICB9CiAgcmV0dXJuIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsICJpbnZhbGlkIHRhZyAlaSIsIHRhZyk7Cn0KCkpTVmFsdWUKanNfZXZhbF9iaW5hcnkoSlNDb250ZXh0KiBjdHgsCiAgICAgICAgICAgICAgIGNvbnN0IHVpbnQ4X3QqIGJ1ZiwKICAgICAgICAgICAgICAgc2l6ZV90IGJ1Zl9sZW4sCiAgICAgICAgICAgICAgIEJPT0wgbG9hZF9vbmx5KSB7CiAgSlNWYWx1ZSBvYmogPSBKU19SZWFkT2JqZWN0KGN0eCwgYnVmLCBidWZfbGVuLCBKU19SRUFEX09CSl9CWVRFQ09ERSk7CiAgaWYoSlNfSXNFeGNlcHRpb24ob2JqKSkKICAgIHJldHVybiBvYmo7CiAgLy8gcHJpbnRmKCJqc19ldmFsX2JpbmFyeSBvYmo9JXNcbiIsIGpzX3ZhbHVlX3R5cGVzdHIoY3R4LCBvYmopKTsKICBpZighbG9hZF9vbmx5KSB7CiAgICBKU1ZhbHVlIHRtcCA9IGpzX2V2YWxfbW9kdWxlKGN0eCwgb2JqLCBsb2FkX29ubHkpOwogICAgaW50IHRhZyA9IEpTX1ZBTFVFX0dFVF9UQUcodG1wKTsKICAgIC8vIHByaW50ZigianNfZXZhbF9iaW5hcnkgdG1wPSVzXG4iLCBqc192YWx1ZV90eXBlc3RyKGN0eCwgdG1wKSk7CiAgICBpZighSlNfSXNFeGNlcHRpb24odG1wKSAmJiAhSlNfSXNVbmRlZmluZWQodG1wKSkKICAgICAgaWYodGFnID49IEpTX1RBR19GSVJTVCAmJiB0YWcgPD0gSlNfVEFHX0ZMT0FUNjQpCiAgICAgICAgcmV0dXJuIHRtcDsKICB9CiAgcmV0dXJuIG9iajsKfQoKSlNWYWx1ZQpqc19ldmFsX2J1ZigKICAgIEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBidWYsIGludCBsZW4sIGNvbnN0IGNoYXIqIGZpbGUsIGludCBmbGFncykgewogIEpTVmFsdWUgdmFsID0gSlNfVU5ERUZJTkVEOwogIGlmKGZsYWdzICYgSlNfRVZBTF9UWVBFX01PRFVMRSkgewogICAgLyogZm9yIHRoZSBtb2R1bGVzLCB3ZSBjb21waWxlIHRoZW4gcnVuIHRvIGJlIGFibGUgdG8gc2V0IGltcG9ydC5tZXRhICovCiAgICB2YWwgPSBKU19FdmFsKGN0eCwgYnVmLCBsZW4sIGZpbGUsIGZsYWdzIHwgSlNfRVZBTF9GTEFHX0NPTVBJTEVfT05MWSk7CiAgICBpZihKU19Jc0V4Y2VwdGlvbih2YWwpKSB7CiAgICAgIGlmKEpTX0lzTnVsbChKU19HZXRSdW50aW1lKGN0eCktPmN1cnJlbnRfZXhjZXB0aW9uKSkKICAgICAgICBKU19HZXRFeGNlcHRpb24oY3R4KTsKICAgICAgcmV0dXJuIEpTX1VOREVGSU5FRDsKICAgIH0KICAgIGpzX21vZHVsZV9zZXRfaW1wb3J0X21ldGEoY3R4LCB2YWwsIEZBTFNFLCBUUlVFKTsKICAgIC8qdmFsID0qL0pTX0V2YWxGdW5jdGlvbihjdHgsIHZhbCk7CiAgfSBlbHNlIHsKICAgIHZhbCA9IEpTX0V2YWwoY3R4LCBidWYsIGxlbiwgZmlsZSwgZmxhZ3MgJiAofihKU19FVkFMX1RZUEVfTU9EVUxFKSkpOwogIH0KICByZXR1cm4gdmFsOwp9CgppbnQKanNfZXZhbF9zdHIoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIHN0ciwgY29uc3QgY2hhciogZmlsZSwgaW50IGZsYWdzKSB7CiAgSlNWYWx1ZSB2YWwgPSBqc19ldmFsX2J1ZihjdHgsIHN0ciwgc3RybGVuKHN0ciksIGZpbGUsIGZsYWdzKTsKICBpbnQzMl90IHJldCA9IC0xOwogIGlmKEpTX0lzTnVtYmVyKHZhbCkpCiAgICBKU19Ub0ludDMyKGN0eCwgJnJldCwgdmFsKTsKICByZXR1cm4gcmV0Owp9Cgp0aHJlYWRfbG9jYWwgdWludDY0X3QganNfcGVuZGluZ19zaWduYWxzID0gMDsKCmludDY0X3QKanNfdGltZV9tcyh2b2lkKSB7CiAgc3RydWN0IHRpbWVzcGVjIHRzOwogIGNsb2NrX2dldHRpbWUoQ0xPQ0tfTU9OT1RPTklDLCAmdHMpOwogIHJldHVybiAodWludDY0X3QpdHMudHZfc2VjICogMTAwMCArICh0cy50dl9uc2VjIC8gMTAwMDAwMCk7Cn0KCmludApqc19pbnRlcnJ1cHRfaGFuZGxlcihKU1J1bnRpbWUqIHJ0LCB2b2lkKiBvcGFxdWUpIHsKICByZXR1cm4gKGpzX3BlbmRpbmdfc2lnbmFscyA+PiBTSUdJTlQpICYgMTsKfQoKdm9pZApqc190aW1lcl91bmxpbmsoSlNSdW50aW1lKiBydCwgSlNPU1RpbWVyKiB0aCkgewogIGlmKHRoLT5saW5rLnByZXYpIHsKICAgIGxpc3RfZGVsKCZ0aC0+bGluayk7CiAgICB0aC0+bGluay5wcmV2ID0gdGgtPmxpbmsubmV4dCA9IDA7CiAgfQp9Cgp2b2lkCmpzX3RpbWVyX2ZyZWUoSlNSdW50aW1lKiBydCwgSlNPU1RpbWVyKiB0aCkgewogIEpTX0ZyZWVWYWx1ZVJUKHJ0LCB0aC0+ZnVuYyk7CiAganNfZnJlZV9ydChydCwgdGgpOwp9Cgp2b2lkCmpzX2NhbGxfaGFuZGxlcihKU0NvbnRleHQqIGN0eCwgSlNWYWx1ZUNvbnN0IGZ1bmMpIHsKICBKU1ZhbHVlIHJldCwgZnVuYzE7CiAgZnVuYzEgPSBKU19EdXBWYWx1ZShjdHgsIGZ1bmMpOwogIHJldCA9IEpTX0NhbGwoY3R4LCBmdW5jMSwgSlNfVU5ERUZJTkVELCAwLCAwKTsKICBKU19GcmVlVmFsdWUoY3R4LCBmdW5jMSk7CiAgaWYoSlNfSXNFeGNlcHRpb24ocmV0KSkKICAgIGpzX3N0ZF9kdW1wX2Vycm9yKGN0eCk7CiAgSlNfRnJlZVZhbHVlKGN0eCwgcmV0KTsKfQp2b2lkKgpqc19zYWJfYWxsb2Modm9pZCogb3BhcXVlLCBzaXplX3Qgc2l6ZSkgewogIEpTU0FCSGVhZGVyKiBzYWI7CiAgc2FiID0gbWFsbG9jKHNpemVvZihKU1NBQkhlYWRlcikgKyBzaXplKTsKICBpZighc2FiKQogICAgcmV0dXJuIDA7CiAgc2FiLT5yZWZfY291bnQgPSAxOwogIHJldHVybiBzYWItPmJ1ZjsKfQp2b2lkCmpzX3NhYl9mcmVlKHZvaWQqIG9wYXF1ZSwgdm9pZCogcHRyKSB7CiAgSlNTQUJIZWFkZXIqIHNhYjsKICBpbnQgcmVmX2NvdW50OwogIHNhYiA9IChKU1NBQkhlYWRlciopKCh1aW50OF90KilwdHIgLSBzaXplb2YoSlNTQUJIZWFkZXIpKTsKICByZWZfY291bnQgPSBhdG9taWNfYWRkX2ludCgmc2FiLT5yZWZfY291bnQsIC0xKTsKICBhc3NlcnQocmVmX2NvdW50ID49IDApOwogIGlmKHJlZl9jb3VudCA9PSAwKSB7CiAgICBmcmVlKHNhYik7CiAgfQp9CnZvaWQKanNfc2FiX2R1cCh2b2lkKiBvcGFxdWUsIHZvaWQqIHB0cikgewogIEpTU0FCSGVhZGVyKiBzYWI7CiAgc2FiID0gKEpTU0FCSGVhZGVyKikoKHVpbnQ4X3QqKXB0ciAtIHNpemVvZihKU1NBQkhlYWRlcikpOwogIGF0b21pY19hZGRfaW50KCZzYWItPnJlZl9jb3VudCwgMSk7Cn0KCkpTV29ya2VyTWVzc2FnZVBpcGUqCmpzX25ld19tZXNzYWdlX3BpcGUodm9pZCkgewogIEpTV29ya2VyTWVzc2FnZVBpcGUqIHBzOwogIGludCBwaXBlX2Zkc1syXTsKCiAgaWYocGlwZShwaXBlX2ZkcykgPCAwKQogICAgcmV0dXJuIDA7CgogIHBzID0gbWFsbG9jKHNpemVvZigqcHMpKTsKICBpZighcHMpIHsKICAgIGNsb3NlKHBpcGVfZmRzWzBdKTsKICAgIGNsb3NlKHBpcGVfZmRzWzFdKTsKICAgIHJldHVybiAwOwogIH0KICBwcy0+cmVmX2NvdW50ID0gMTsKICBpbml0X2xpc3RfaGVhZCgmcHMtPm1zZ19xdWV1ZSk7CiAgcHRocmVhZF9tdXRleF9pbml0KCZwcy0+bXV0ZXgsIDApOwogIHBzLT5yZWFkX2ZkID0gcGlwZV9mZHNbMF07CiAgcHMtPndyaXRlX2ZkID0gcGlwZV9mZHNbMV07CiAgcmV0dXJuIHBzOwp9CgpKU1dvcmtlck1lc3NhZ2VQaXBlKgpqc19kdXBfbWVzc2FnZV9waXBlKEpTV29ya2VyTWVzc2FnZVBpcGUqIHBzKSB7CiAgYXRvbWljX2FkZF9pbnQoJnBzLT5yZWZfY291bnQsIDEpOwogIHJldHVybiBwczsKfQoKdm9pZApqc19mcmVlX21lc3NhZ2UoSlNXb3JrZXJNZXNzYWdlKiBtc2cpIHsKICBzaXplX3QgaTsKCiAgZm9yKGkgPSAwOyBpIDwgbXNnLT5zYWJfdGFiX2xlbjsgaSsrKSB7IGpzX3NhYl9mcmVlKDAsIG1zZy0+c2FiX3RhYltpXSk7IH0KICBmcmVlKG1zZy0+c2FiX3RhYik7CiAgZnJlZShtc2ctPmRhdGEpOwogIGZyZWUobXNnKTsKfQoKdm9pZApqc19mcmVlX21lc3NhZ2VfcGlwZShKU1dvcmtlck1lc3NhZ2VQaXBlKiBwcykgewogIHN0cnVjdCBsaXN0X2hlYWQgKmVsLCAqZWwxOwogIEpTV29ya2VyTWVzc2FnZSogbXNnOwogIGludCByZWZfY291bnQ7CgogIGlmKCFwcykKICAgIHJldHVybjsKCiAgcmVmX2NvdW50ID0gYXRvbWljX2FkZF9pbnQoJnBzLT5yZWZfY291bnQsIC0xKTsKICBhc3NlcnQocmVmX2NvdW50ID49IDApOwogIGlmKHJlZl9jb3VudCA9PSAwKSB7CiAgICBsaXN0X2Zvcl9lYWNoX3NhZmUoZWwsIGVsMSwgJnBzLT5tc2dfcXVldWUpIHsKICAgICAgbXNnID0gbGlzdF9lbnRyeShlbCwgSlNXb3JrZXJNZXNzYWdlLCBsaW5rKTsKICAgICAganNfZnJlZV9tZXNzYWdlKG1zZyk7CiAgICB9CiAgICBwdGhyZWFkX211dGV4X2Rlc3Ryb3koJnBzLT5tdXRleCk7CiAgICBjbG9zZShwcy0+cmVhZF9mZCk7CiAgICBjbG9zZShwcy0+d3JpdGVfZmQpOwogICAgZnJlZShwcyk7CiAgfQp9CgAAAAAAAAAAF9YAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArJsAAAAAAACsmwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "char-utils.h",
			"settings":
			{
				"buffer_size": 7758,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"paste",
					null,
					"AQAAADMaAAAAAAAAYRoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMxoAAAAAAAAzGgAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "str"
					},
					"BAAAAE0aAAAAAAAAThoAAAAAAAAAAAAAThoAAAAAAABOGgAAAAAAAAgAAABzdHJfZGlmZk4aAAAAAAAATxoAAAAAAAAAAAAATxoAAAAAAABQGgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRoAAAAAAABVGgAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					3,
					"left_delete",
					null,
					"AwAAAE8aAAAAAAAATxoAAAAAAAABAAAAck4aAAAAAAAAThoAAAAAAAABAAAAdE0aAAAAAAAATRoAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAUBoAAAAAAABQGgAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "strcmp"
					},
					"BgAAAE0aAAAAAAAAThoAAAAAAAAAAAAAThoAAAAAAABPGgAAAAAAAAAAAABPGgAAAAAAAFAaAAAAAAAAAAAAAFAaAAAAAAAAURoAAAAAAAAAAAAAURoAAAAAAABSGgAAAAAAAAAAAABSGgAAAAAAAFMaAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATRoAAAAAAABNGgAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"cut",
					null,
					"AQAAADMaAAAAAAAAMxoAAAAAAAAsAAAAI2RlZmluZSBzdHJfZXF1YWwocywgdCkgKCFzdHJjbXAoKHMpLCAodCkpKQo",
					"AQAAAAAAAAABAAAAMxoAAAAAAABfGgAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACQDAAAAAAAAJQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAMAAAAAAAAkAwAAAAAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"paste",
					null,
					"AQAAACUDAAAAAAAAUQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQMAAAAAAAAlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFEDAAAAAAAAUgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQMAAAAAAABRAwAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUgMAAAAAAABSAwAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAUgMAAAAAAABSAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "qjsm.c",
			"settings":
			{
				"buffer_size": 28085,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					420,
					1,
					"left_delete",
					null,
					"AQAAADA4AAAAAAAAMDgAAAAAAAAkAAAAICBKU19GcmVlQ1N0cmluZyhjdHgsIGltcC5wYXRoKTsKICAg",
					"AQAAAAAAAAABAAAAMDgAAAAAAABUOAAAAAAAAAAAAAAAADtA"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACs4AAAAAAAALDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKzgAAAAAAAArOAAAAAAAAAAAAAAAAEJA"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAACw4AAAAAAAALTgAAAAAAAAAAAAALTgAAAAAAAAuOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALDgAAAAAAAAsOAAAAAAAAAAAAAAAAPC/"
				],
				[
					427,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC44AAAAAAAAMDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALjgAAAAAAAAuOAAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAC44AAAAAAAALjgAAAAAAAABAAAAKC44AAAAAAAALjgAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAALzgAAAAAAAAvOAAAAAAAAAAAAAAAAPC/"
				],
				[
					429,
					2,
					"left_delete",
					null,
					"AgAAAC04AAAAAAAALTgAAAAAAAABAAAAZiw4AAAAAAAALDgAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAALjgAAAAAAAAuOAAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "fo"
					},
					"AgAAACw4AAAAAAAALTgAAAAAAAAAAAAALTgAAAAAAAAuOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALDgAAAAAAAAsOAAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					2,
					"left_delete",
					null,
					"AgAAAC04AAAAAAAALTgAAAAAAAABAAAAbyw4AAAAAAAALDgAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAALjgAAAAAAAAuOAAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAACw4AAAAAAAALTgAAAAAAAAAAAAALTgAAAAAAAAuOAAAAAAAAAAAAAAuOAAAAAAAAC84AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALDgAAAAAAAAsOAAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC84AAAAAAAAMTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALzgAAAAAAAAvOAAAAAAAAAAAAAAAAPC/"
				],
				[
					436,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAADA4AAAAAAAAMTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMDgAAAAAAAAwOAAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADE4AAAAAAAAMjgAAAAAAAAAAAAAMjgAAAAAAAAzOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMTgAAAAAAAAxOAAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAADM4AAAAAAAANDgAAAAAAAAAAAAANDgAAAAAAAA1OAAAAAAAAAAAAAA1OAAAAAAAADY4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMzgAAAAAAAAzOAAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAADY4AAAAAAAANzgAAAAAAAAAAAAANzgAAAAAAAA4OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANjgAAAAAAAA2OAAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADg4AAAAAAAAOTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAODgAAAAAAAA4OAAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					2,
					"left_delete",
					null,
					"AgAAADg4AAAAAAAAODgAAAAAAAABAAAAIDc4AAAAAAAANzgAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAOTgAAAAAAAA5OAAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAADc4AAAAAAAAODgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANzgAAAAAAAA3OAAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"insert",
					{
						"characters": " <"
					},
					"AgAAADg4AAAAAAAAOTgAAAAAAAAAAAAAOTgAAAAAAAA6OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAODgAAAAAAAA4OAAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": " countof"
					},
					"CAAAADo4AAAAAAAAOzgAAAAAAAAAAAAAOzgAAAAAAAA8OAAAAAAAAAAAAAA8OAAAAAAAAD04AAAAAAAAAAAAAD04AAAAAAAAPjgAAAAAAAAAAAAAPjgAAAAAAAA/OAAAAAAAAAAAAAA/OAAAAAAAAEA4AAAAAAAAAAAAAEA4AAAAAAAAQTgAAAAAAAAAAAAAQTgAAAAAAABCOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOjgAAAAAAAA6OAAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEI4AAAAAAAARDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQjgAAAAAAABCOAAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": "imp.args"
					},
					"CAAAAEM4AAAAAAAARDgAAAAAAAAAAAAARDgAAAAAAABFOAAAAAAAAAAAAABFOAAAAAAAAEY4AAAAAAAAAAAAAEY4AAAAAAAARzgAAAAAAAAAAAAARzgAAAAAAABIOAAAAAAAAAAAAABIOAAAAAAAAEk4AAAAAAAAAAAAAEk4AAAAAAAASjgAAAAAAAAAAAAASjgAAAAAAABLOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQzgAAAAAAABDOAAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEw4AAAAAAAATTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATDgAAAAAAABMOAAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " I++"
					},
					"BAAAAE04AAAAAAAATjgAAAAAAAAAAAAATjgAAAAAAABPOAAAAAAAAAAAAABPOAAAAAAAAFA4AAAAAAAAAAAAAFA4AAAAAAAAUTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATTgAAAAAAABNOAAAAAAAAAAAAAAAAPC/"
				],
				[
					450,
					3,
					"left_delete",
					null,
					"AwAAAFA4AAAAAAAAUDgAAAAAAAABAAAAK084AAAAAAAATzgAAAAAAAABAAAAK044AAAAAAAATjgAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAUTgAAAAAAABROAAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAE44AAAAAAAATzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATjgAAAAAAABOOAAAAAAAAAAAAAAAAPC/"
				],
				[
					452,
					1,
					"left_delete",
					null,
					"AQAAAE44AAAAAAAATjgAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAATzgAAAAAAABPOAAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					1,
					"insert",
					{
						"characters": "n++"
					},
					"AwAAAE44AAAAAAAATzgAAAAAAAAAAAAATzgAAAAAAABQOAAAAAAAAAAAAABQOAAAAAAAAFE4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATjgAAAAAAABOOAAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFI4AAAAAAAAUzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUjgAAAAAAABSOAAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFM4AAAAAAAAVTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUzgAAAAAAABTOAAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAFQ4AAAAAAAAVTgAAAAAAAAAAAAAVTgAAAAAAABWOAAAAAAAAAAAAABVOAAAAAAAAFc4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVDgAAAAAAABUOAAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "js_Fre"
					},
					"BgAAAFc4AAAAAAAAWDgAAAAAAAAAAAAAWDgAAAAAAABZOAAAAAAAAAAAAABZOAAAAAAAAFo4AAAAAAAAAAAAAFo4AAAAAAAAWzgAAAAAAAAAAAAAWzgAAAAAAABcOAAAAAAAAAAAAABcOAAAAAAAAF04AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzgAAAAAAABXOAAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					3,
					"left_delete",
					null,
					"AwAAAFw4AAAAAAAAXDgAAAAAAAABAAAAZVs4AAAAAAAAWzgAAAAAAAABAAAAclo4AAAAAAAAWjgAAAAAAAABAAAARg",
					"AQAAAAAAAAABAAAAXTgAAAAAAABdOAAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert",
					{
						"characters": "free"
					},
					"BAAAAFo4AAAAAAAAWzgAAAAAAAAAAAAAWzgAAAAAAABcOAAAAAAAAAAAAABcOAAAAAAAAF04AAAAAAAAAAAAAF04AAAAAAAAXjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWjgAAAAAAABaOAAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAF44AAAAAAAAYDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXjgAAAAAAABeOAAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAF84AAAAAAAAYDgAAAAAAAAAAAAAYDgAAAAAAABhOAAAAAAAAAAAAABhOAAAAAAAAGI4AAAAAAAAAAAAAGI4AAAAAAAAYzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXzgAAAAAAABfOAAAAAAAAAAAAAAAAPC/"
				],
				[
					463,
					1,
					"insert",
					{
						"characters": " imp.args"
					},
					"CQAAAGM4AAAAAAAAZDgAAAAAAAAAAAAAZDgAAAAAAABlOAAAAAAAAAAAAABlOAAAAAAAAGY4AAAAAAAAAAAAAGY4AAAAAAAAZzgAAAAAAAAAAAAAZzgAAAAAAABoOAAAAAAAAAAAAABoOAAAAAAAAGk4AAAAAAAAAAAAAGk4AAAAAAAAajgAAAAAAAAAAAAAajgAAAAAAABrOAAAAAAAAAAAAABrOAAAAAAAAGw4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYzgAAAAAAABjOAAAAAAAAAAAAAAAAPC/"
				],
				[
					464,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAGw4AAAAAAAAbjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbDgAAAAAAABsOAAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAG04AAAAAAAAbjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbTgAAAAAAABtOAAAAAAAAAAAAAAAAPC/"
				],
				[
					466,
					1,
					"left_delete",
					null,
					"AQAAAG04AAAAAAAAbTgAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAbjgAAAAAAABuOAAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAG04AAAAAAAAbjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbTgAAAAAAABtOAAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHA4AAAAAAAAcTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcDgAAAAAAABwOAAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAHE4AAAAAAAAcjgAAAAAAAAAAAAAcjgAAAAAAAB0OAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcTgAAAAAAABxOAAAAAAAAAAAAAAAAPC/"
				],
				[
					477,
					1,
					"cut",
					null,
					"AQAAAGQ4AAAAAAAAZDgAAAAAAAALAAAAaW1wLmFyZ3Nbbl0",
					"AQAAAAAAAAABAAAAbzgAAAAAAABkOAAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"paste",
					null,
					"AQAAAGQ4AAAAAAAAbzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZDgAAAAAAABkOAAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAAFc4AAAAAAAAWDgAAAAAAAAAAAAAWDgAAAAAAABaOAAAAAAAAAAAAAB1OAAAAAAAAHU4AAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAVzgAAAAAAABXOAAAAAAAAAAAAAAAADJA"
				],
				[
					482,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAFc4AAAAAAAAWDgAAAAAAAAAAAAAWDgAAAAAAABZOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzgAAAAAAABXOAAAAAAAAAAAAAAAADJA"
				],
				[
					483,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFk4AAAAAAAAWzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWTgAAAAAAABZOAAAAAAAAAAAAAAAAPC/"
				],
				[
					484,
					1,
					"paste",
					null,
					"AQAAAFo4AAAAAAAAZTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWjgAAAAAAABaOAAAAAAAAAAAAAAAAPC/"
				],
				[
					487,
					1,
					"left_delete",
					null,
					"AQAAAIM4AAAAAAAAgzgAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAhDgAAAAAAACEOAAAAAAAAAAAAAAAAAAA"
				],
				[
					489,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAgzgAAAAAAACDOAAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAgzgAAAAAAACDOAAAAAAAAAAAAAAAAPC/"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": "$"
					},
					"AQAAACs4AAAAAAAALDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKzgAAAAAAAArOAAAAAAAAAAAAAAAAPC/"
				],
				[
					499,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACw4AAAAAAAALTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALDgAAAAAAAAsOAAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					2,
					"left_delete",
					null,
					"AwAAACw4AAAAAAAALDgAAAAAAAABAAAACis4AAAAAAAAKzgAAAAAAAABAAAAJCs4AAAAAAAAMTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALTgAAAAAAAAtOAAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADE4AAAAAAAAMjgAAAAAAAAAAAAAMjgAAAAAAAA4OAAAAAAAAAAAAAArOAAAAAAAACs4AAAAAAAABgAAACAgICAgIA",
					"AQAAAAAAAAABAAAAMTgAAAAAAAAxOAAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"insert",
					{
						"characters": "str_"
					},
					"BAAAADI4AAAAAAAAMzgAAAAAAAAAAAAAMzgAAAAAAAA0OAAAAAAAAAAAAAA0OAAAAAAAADU4AAAAAAAAAAAAADU4AAAAAAAANjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMjgAAAAAAAAyOAAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					4,
					"left_delete",
					null,
					"BAAAADU4AAAAAAAANTgAAAAAAAABAAAAXzQ4AAAAAAAANDgAAAAAAAABAAAAcjM4AAAAAAAAMzgAAAAAAAABAAAAdDI4AAAAAAAAMjgAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAANjgAAAAAAAA2OAAAAAAAAAAAAAAAAPC/"
				],
				[
					505,
					1,
					"insert",
					{
						"characters": "js_t"
					},
					"BAAAADI4AAAAAAAAMzgAAAAAAAAAAAAAMzgAAAAAAAA0OAAAAAAAAAAAAAA0OAAAAAAAADU4AAAAAAAAAAAAADU4AAAAAAAANjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMjgAAAAAAAAyOAAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"left_delete",
					null,
					"AQAAADU4AAAAAAAANTgAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAANjgAAAAAAAA2OAAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": "strv_free_n"
					},
					"CwAAADU4AAAAAAAANjgAAAAAAAAAAAAANjgAAAAAAAA3OAAAAAAAAAAAAAA3OAAAAAAAADg4AAAAAAAAAAAAADg4AAAAAAAAOTgAAAAAAAAAAAAAOTgAAAAAAAA6OAAAAAAAAAAAAAA6OAAAAAAAADs4AAAAAAAAAAAAADs4AAAAAAAAPDgAAAAAAAAAAAAAPDgAAAAAAAA9OAAAAAAAAAAAAAA9OAAAAAAAAD44AAAAAAAAAAAAAD44AAAAAAAAPzgAAAAAAAAAAAAAPzgAAAAAAABAOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANTgAAAAAAAA1OAAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEA4AAAAAAAAQjgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQDgAAAAAAABAOAAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAEE4AAAAAAAAQjgAAAAAAAAAAAAAQjgAAAAAAABDOAAAAAAAAAAAAABDOAAAAAAAAEQ4AAAAAAAAAAAAAEQ4AAAAAAAARTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQTgAAAAAAABBOAAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAAEU4AAAAAAAARjgAAAAAAAAAAAAARjgAAAAAAABHOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARTgAAAAAAABFOAAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"left_delete",
					null,
					"AQAAAEY4AAAAAAAARjgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAARzgAAAAAAABHOAAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": "im"
					},
					"AgAAAEY4AAAAAAAARzgAAAAAAAAAAAAARzgAAAAAAABIOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARjgAAAAAAABGOAAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					2,
					"left_delete",
					null,
					"AgAAAEc4AAAAAAAARzgAAAAAAAABAAAAbUY4AAAAAAAARjgAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAASDgAAAAAAABIOAAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"insert",
					{
						"characters": "countof"
					},
					"BwAAAEY4AAAAAAAARzgAAAAAAAAAAAAARzgAAAAAAABIOAAAAAAAAAAAAABIOAAAAAAAAEk4AAAAAAAAAAAAAEk4AAAAAAAASjgAAAAAAAAAAAAASjgAAAAAAABLOAAAAAAAAAAAAABLOAAAAAAAAEw4AAAAAAAAAAAAAEw4AAAAAAAATTgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARjgAAAAAAABGOAAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE04AAAAAAAATzgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATTgAAAAAAABNOAAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": "imp.args"
					},
					"CAAAAE44AAAAAAAATzgAAAAAAAAAAAAATzgAAAAAAABQOAAAAAAAAAAAAABQOAAAAAAAAFE4AAAAAAAAAAAAAFE4AAAAAAAAUjgAAAAAAAAAAAAAUjgAAAAAAABTOAAAAAAAAAAAAABTOAAAAAAAAFQ4AAAAAAAAAAAAAFQ4AAAAAAAAVTgAAAAAAAAAAAAAVTgAAAAAAABWOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATjgAAAAAAABOOAAAAAAAAAAAAAAAAPC/"
				],
				[
					518,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFc4AAAAAAAAWDgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVzgAAAAAAABXOAAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": "  imp.arg"
					},
					"CQAAAFg4AAAAAAAAWTgAAAAAAAAAAAAAWTgAAAAAAABaOAAAAAAAAAAAAABaOAAAAAAAAFs4AAAAAAAAAAAAAFs4AAAAAAAAXDgAAAAAAAAAAAAAXDgAAAAAAABdOAAAAAAAAAAAAABdOAAAAAAAAF44AAAAAAAAAAAAAF44AAAAAAAAXzgAAAAAAAAAAAAAXzgAAAAAAABgOAAAAAAAAAAAAABgOAAAAAAAAGE4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWDgAAAAAAABYOAAAAAAAAAAAAAAAAPC/"
				],
				[
					521,
					1,
					"left_delete",
					null,
					"AQAAAGE4AAAAAAAAYTgAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAYjgAAAAAAABiOAAAAAAAAAAAAAAAAPC/"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": "s);"
					},
					"AwAAAGE4AAAAAAAAYjgAAAAAAAAAAAAAYjgAAAAAAABjOAAAAAAAAAAAAABjOAAAAAAAAGQ4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYTgAAAAAAABhOAAAAAAAAAAAAAAAAPC/"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGQ4AAAAAAAAZTgAAAAAAAAAAAAAZTgAAAAAAABrOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZDgAAAAAAABkOAAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAN84AAAAAAAA4TgAAAAAAAAAAAAAazgAAAAAAABtOAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAazgAAAAAAADfOAAAAAAAAAAAAAAAAPC/"
				],
				[
					539,
					1,
					"insert",
					{
						"characters": "=cuz"
					},
					"BAAAABc3AAAAAAAAGDcAAAAAAAAAAAAAGDcAAAAAAAAZNwAAAAAAAAAAAAAZNwAAAAAAABo3AAAAAAAAAAAAABo3AAAAAAAAGzcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFzcAAAAAAAAXNwAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					2,
					"left_delete",
					null,
					"AgAAABo3AAAAAAAAGjcAAAAAAAABAAAAehk3AAAAAAAAGTcAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAGzcAAAAAAAAbNwAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": "ountof"
					},
					"BgAAABk3AAAAAAAAGjcAAAAAAAAAAAAAGjcAAAAAAAAbNwAAAAAAAAAAAAAbNwAAAAAAABw3AAAAAAAAAAAAABw3AAAAAAAAHTcAAAAAAAAAAAAAHTcAAAAAAAAeNwAAAAAAAAAAAAAeNwAAAAAAAB83AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGTcAAAAAAAAZNwAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAB83AAAAAAAAITcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHzcAAAAAAAAfNwAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert",
					{
						"characters": "imp.args"
					},
					"CAAAACA3AAAAAAAAITcAAAAAAAAAAAAAITcAAAAAAAAiNwAAAAAAAAAAAAAiNwAAAAAAACM3AAAAAAAAAAAAACM3AAAAAAAAJDcAAAAAAAAAAAAAJDcAAAAAAAAlNwAAAAAAAAAAAAAlNwAAAAAAACY3AAAAAAAAAAAAACY3AAAAAAAAJzcAAAAAAAAAAAAAJzcAAAAAAAAoNwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIDcAAAAAAAAgNwAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": "r,"
					},
					"AgAAABY3AAAAAAAAFzcAAAAAAAAAAAAAFzcAAAAAAAAYNwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFjcAAAAAAAAWNwAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAADM3AAAAAAAANDcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMzcAAAAAAAAzNwAAAAAAAAAAAAAAAEtA"
				],
				[
					552,
					1,
					"right_delete",
					null,
					"AQAAADQ3AAAAAAAANDcAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAANDcAAAAAAAA0NwAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AgAAAKk3AAAAAAAAqjcAAAAAAAAAAAAAqjcAAAAAAACqNwAAAAAAAAEAAABu",
					"AQAAAAAAAAABAAAAqTcAAAAAAACqNwAAAAAAAAAAAAAAAPC/"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AgAAAJg3AAAAAAAAmTcAAAAAAAAAAAAAmTcAAAAAAACZNwAAAAAAAAEAAABu",
					"AQAAAAAAAAABAAAAmDcAAAAAAACZNwAAAAAAAAAAAAAAAPC/"
				],
				[
					577,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AgAAAFU3AAAAAAAAVjcAAAAAAAAAAAAAVjcAAAAAAABWNwAAAAAAABwAAAAgc2l6ZW9mKGltcCkgLyBzaXplb2YoY2hhciop",
					"AQAAAAAAAAABAAAAVTcAAAAAAABxNwAAAAAAAAAAAAAAAPC/"
				],
				[
					582,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AgAAAD44AAAAAAAAPzgAAAAAAAAAAAAAPzgAAAAAAAA/OAAAAAAAABIAAAAgY291bnRvZihpbXAuYXJncyk",
					"AQAAAAAAAAABAAAAPjgAAAAAAABQOAAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACxbQAAI2luY2x1ZGUgPHN0ZGxpYi5oPgojaW5jbHVkZSA8c3RkaW8uaD4KI2luY2x1ZGUgPHN0ZGFyZy5oPgojaW5jbHVkZSA8aW50dHlwZXMuaD4KI2luY2x1ZGUgPHN0cmluZy5oPgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDx1bmlzdGQuaD4KI2luY2x1ZGUgPGVycm5vLmg+CiNpbmNsdWRlIDxmY250bC5oPgojaW5jbHVkZSA8ZGxmY24uaD4KI2luY2x1ZGUgPHRpbWUuaD4KI2luY2x1ZGUgPHNpZ25hbC5oPgojaW5jbHVkZSA8c3lzL3BvbGwuaD4KI2lmIGRlZmluZWQoX19BUFBMRV9fKQojaW5jbHVkZSA8bWFsbG9jL21hbGxvYy5oPgojZWxpZiBkZWZpbmVkKF9fbGludXhfXykKI2luY2x1ZGUgPG1hbGxvYy5oPgojZW5kaWYKCiNpZiAxIC8vIGRlZiBIQVZFX1FVSUNLSlNfQ09ORklHX0gKI2luY2x1ZGUgInF1aWNranMtY29uZmlnLmgiCiNlbmRpZgoKI2lmZGVmIFVTRV9XT1JLRVIKI2luY2x1ZGUgPHB0aHJlYWQuaD4KI2luY2x1ZGUgPHN0ZGF0b21pYy5oPgoKc3RhdGljIGludAphdG9taWNfYWRkX2ludChpbnQqIHB0ciwgaW50IHYpIHsKICByZXR1cm4gYXRvbWljX2ZldGNoX2FkZCgoX0F0b21pYyh1aW50MzJfdCkqKXB0ciwgdikgKyB2Owp9CiNlbmRpZgoKI2luY2x1ZGUgImxpc3QuaCIKI2luY2x1ZGUgImN1dGlscy5oIgojaW5jbHVkZSAidXRpbHMuaCIKI2luY2x1ZGUgInZlY3Rvci5oIgojaW5jbHVkZSAicXVpY2tqcy1saWJjLmgiCiNpbmNsdWRlICJxdWlja2pzLWludGVybmFsLmgiCiNpbmNsdWRlICJidWZmZXItdXRpbHMuaCIKCnR5cGVkZWYgc3RydWN0IHBvbGxoYW5kbGVyIHsKICBzdHJ1Y3QgcG9sbGZkIHBmOwogIHZvaWQgKCpoYW5kbGVyKSh2b2lkKiBvcGFxdWUsIHN0cnVjdCBwb2xsZmQqKTsKICB2b2lkKiBvcGFxdWU7CiAgc3RydWN0IGxpc3RfaGVhZCBsaW5rOwp9IHBvbGxoYW5kbGVyX3Q7Cgp0aHJlYWRfbG9jYWwgdWludDY0X3QganNtX3BlbmRpbmdfc2lnbmFscyA9IDA7CnN0cnVjdCBsaXN0X2hlYWQgcG9sbGhhbmRsZXJzOwoKdm9pZCBqc19zdGRfc2V0X21vZHVsZV9sb2FkZXJfZnVuYyhKU01vZHVsZUxvYWRlckZ1bmMqIGZ1bmMpOwoKI2lmZGVmIEhBVkVfTUFMTE9DX1VTQUJMRV9TSVpFCiNpZm5kZWYgSEFWRV9NQUxMT0NfVVNBQkxFX1NJWkVfREVGSU5JVElPTgpleHRlcm4gc2l6ZV90IG1hbGxvY191c2FibGVfc2l6ZSgpOwojZW5kaWYKI2VuZGlmCgojZGVmaW5lIHRyaW1fZG90c2xhc2goc3RyKSAoIXN0cm5jbXAoKHN0ciksICIuLyIsIDIpID8gKHN0cikgKyAyIDogKHN0cikpCgojZGVmaW5lIGpzbV9kZWNsYXJlX21vZHVsZShuYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIGV4dGVybiBjb25zdCB1aW50OF90IHFqc2NfIyNuYW1lW107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIGV4dGVybiBjb25zdCB1aW50MzJfdCBxanNjXyMjbmFtZSMjX3NpemU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIEpTTW9kdWxlRGVmKiBqc19pbml0X21vZHVsZV8jI25hbWUoSlNDb250ZXh0KiwgY29uc3QgY2hhciopOwoKanNtX2RlY2xhcmVfbW9kdWxlKGNvbnNvbGUpOwpqc21fZGVjbGFyZV9tb2R1bGUoZXZlbnRzKTsKanNtX2RlY2xhcmVfbW9kdWxlKGZzKTsKanNtX2RlY2xhcmVfbW9kdWxlKHBlcmZfaG9va3MpOwpqc21fZGVjbGFyZV9tb2R1bGUocHJvY2Vzcyk7CmpzbV9kZWNsYXJlX21vZHVsZShyZXBsKTsKanNtX2RlY2xhcmVfbW9kdWxlKHJlcXVpcmUpOwpqc21fZGVjbGFyZV9tb2R1bGUodHR5KTsKanNtX2RlY2xhcmVfbW9kdWxlKHV0aWwpOwoKI2lmZGVmIENPTkZJR19CSUdOVU0KanNtX2RlY2xhcmVfbW9kdWxlKHFqc2NhbGMpOwpzdGF0aWMgaW50IGJpZ251bV9leHQgPSAxOwojZW5kaWYKCnZvaWQganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyhKU0NvbnRleHQqICgqZnVuYykoSlNSdW50aW1lKiBydCkpOwp2b2lkIGpzX3N0ZF9kdW1wX2Vycm9yKEpTQ29udGV4dCogY3R4KTsKCnN0YXRpYyBCT09MIGRlYnVnX21vZHVsZV9sb2FkZXIgPSBGQUxTRTsKc3RhdGljIFZlY3RvciBtb2R1bGVfZGVidWcgPSBWRUNUT1JfSU5JVCgpOwpzdGF0aWMgVmVjdG9yIG1vZHVsZV9saXN0ID0gVkVDVE9SX0lOSVQoKTsKc3RhdGljIFZlY3RvciBidWlsdGlucyA9IFZFQ1RPUl9JTklUKCk7CgpKU1ZhbHVlIHBhY2thZ2VfanNvbjsKCnN0YXRpYyBKU1ZhbHVlCmpzbV9sb2FkX3BhY2thZ2UoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGZpbGUpIHsKICBpZihKU19Jc1VuZGVmaW5lZChwYWNrYWdlX2pzb24pKSB7CiAgICB1aW50OF90KiBidWY7CiAgICBzaXplX3QgbGVuOwogICAgaWYoZmlsZSA9PSAwKQogICAgICBmaWxlID0gInBhY2thZ2UuanNvbiI7CiAgICBpZighKGJ1ZiA9IGpzX2xvYWRfZmlsZShjdHgsICZsZW4sIGZpbGUpKSkKICAgICAgcGFja2FnZV9qc29uID0gSlNfTlVMTDsKICAgIGVsc2UKICAgICAgcGFja2FnZV9qc29uID0gSlNfUGFyc2VKU09OKGN0eCwgYnVmLCBsZW4sIGZpbGUpOwogIH0KICByZXR1cm4gSlNfRHVwVmFsdWUoY3R4LCBwYWNrYWdlX2pzb24pOwp9CgpKU01vZHVsZURlZioKanNtX21vZHVsZV9sb2FkZXIoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIG5hbWUsIHZvaWQqIG9wYXF1ZSkgewogIGNoYXIgKm1vZHVsZSwgKmZpbGUgPSAwOwogIEpTTW9kdWxlRGVmKiByZXQgPSAwOwogIG1vZHVsZSA9IGpzX3N0cmR1cChjdHgsIHRyaW1fZG90c2xhc2gobmFtZSkpOwogIGZvcig7OykgewogICAgaWYoIXN0cmNocihtb2R1bGUsICcvJykgJiYgKHJldCA9IGpzX21vZHVsZV9maW5kKGN0eCwgbW9kdWxlKSkpIHsKICAgICAgZ290byBlbmQ7CiAgICB9CiAgICBpZihkZWJ1Z19tb2R1bGVfbG9hZGVyKSB7CiAgICAgIGlmKGZpbGUpCiAgICAgICAgcHJpbnRmKCJqc21fbW9kdWxlX2xvYWRlclsleF0gXHgxYls0ODs1OzIyMG0oMilceDFiWzBtICUtMjBzICclcydcbiIsCiAgICAgICAgICAgICAgIHB0aHJlYWRfc2VsZigpLAogICAgICAgICAgICAgICB0cmltX2RvdHNsYXNoKG5hbWUpLAogICAgICAgICAgICAgICBmaWxlKTsKICAgICAgLyogIGVsc2UgIHByaW50ZigianNtX21vZHVsZV9sb2FkZXJbJXhdIFx4MWJbNDg7NTsxMjRtKDEpXHgxYlswbSAlLTIwcyAtPgogICAgICAgKiAlc1xuIiwgcHRocmVhZF9zZWxmKCksIHRyaW1fZG90c2xhc2gobmFtZSksIHRyaW1fZG90c2xhc2gobW9kdWxlKSk7Ki8KICAgIH0KICAgIGlmKCFoYXNfc3VmZml4KG5hbWUsICIuc28iKSAmJiAhZmlsZSkgewogICAgICBKU1ZhbHVlIHBhY2thZ2UgPSBqc21fbG9hZF9wYWNrYWdlKGN0eCwgMCk7CiAgICAgIGlmKCFKU19Jc051bGwocGFja2FnZSkpIHsKICAgICAgICBKU1ZhbHVlIGFsaWFzZXMgPSBKU19HZXRQcm9wZXJ0eVN0cihjdHgsIHBhY2thZ2UsICJfbW9kdWxlQWxpYXNlcyIpOwogICAgICAgIEpTVmFsdWUgdGFyZ2V0ID0gSlNfVU5ERUZJTkVEOwogICAgICAgIGlmKCFKU19Jc1VuZGVmaW5lZChhbGlhc2VzKSkgewogICAgICAgICAgdGFyZ2V0ID0gSlNfR2V0UHJvcGVydHlTdHIoY3R4LCBhbGlhc2VzLCBtb2R1bGUpOwogICAgICAgIH0KICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBhbGlhc2VzKTsKICAgICAgICBKU19GcmVlVmFsdWUoY3R4LCBwYWNrYWdlKTsKICAgICAgICBpZighSlNfSXNVbmRlZmluZWQodGFyZ2V0KSkgewogICAgICAgICAgY29uc3QgY2hhciogc3RyID0gSlNfVG9DU3RyaW5nKGN0eCwgdGFyZ2V0KTsKICAgICAgICAgIGlmKHN0cikgewogICAgICAgICAgICBqc19mcmVlKGN0eCwgbW9kdWxlKTsKICAgICAgICAgICAgbW9kdWxlID0ganNfc3RyZHVwKGN0eCwgc3RyKTsKICAgICAgICAgICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBzdHIpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmKCFmaWxlKSB7CiAgICAgIGlmKHN0cmNocigiLi8iLCBtb2R1bGVbMF0pKQogICAgICAgIGZpbGUgPSBqc19zdHJkdXAoY3R4LCBtb2R1bGUpOwogICAgICBlbHNlIGlmKCEoZmlsZSA9IGpzX21vZHVsZV9zZWFyY2goY3R4LCBtb2R1bGUpKSkKICAgICAgICBicmVhazsKICAgICAgY29udGludWU7CiAgICB9CiAgICBicmVhazsKICB9CiAgaWYoZmlsZSkgewogICAgaWYoZGVidWdfbW9kdWxlX2xvYWRlcikKICAgICAgaWYoc3RyY21wKHRyaW1fZG90c2xhc2gobmFtZSksIHRyaW1fZG90c2xhc2goZmlsZSkpKQogICAgICAgIHByaW50ZigianNtX21vZHVsZV9sb2FkZXJbJXhdIFx4MWJbNDg7NTsyOG0oMylceDFiWzBtICUtMjBzIC0+ICVzXG4iLAogICAgICAgICAgICAgICBwdGhyZWFkX3NlbGYoKSwKICAgICAgICAgICAgICAgbW9kdWxlLAogICAgICAgICAgICAgICBmaWxlKTsKICAgIHJldCA9IGhhc19zdWZmaXgoZmlsZSwgIi5zbyIpID8ganNfbW9kdWxlX2xvYWRlcl9zbyhjdHgsIGZpbGUpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGpzX21vZHVsZV9sb2FkZXIoY3R4LCBmaWxlLCBvcGFxdWUpOwogIH0KZW5kOgogIGlmKHZlY3Rvcl9maW5kcygmbW9kdWxlX2RlYnVnLCAiaW1wb3J0IikgIT0gLTEpIHsKICAgIGZwcmludGYoc3RkZXJyLAogICAgICAgICAgICAoIWZpbGUgfHwgc3RyY21wKG1vZHVsZSwgZmlsZSkpID8gIiEhISBJTVBPUlQgJXMgLT4gJXNcbiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICIhISEgSU1QT1JUICVzXG4iLAogICAgICAgICAgICBtb2R1bGUsCiAgICAgICAgICAgIGZpbGUpOwogIH0KICBpZighcmV0KQogICAgcHJpbnRmKCJqc21fbW9kdWxlX2xvYWRlcihcIiVzXCIpID0gJXBcbiIsIG5hbWUsIHJldCk7CiAgaWYobW9kdWxlKQogICAganNfZnJlZShjdHgsIG1vZHVsZSk7CiAgaWYoZmlsZSkKICAgIGpzX2ZyZWUoY3R4LCBmaWxlKTsKICByZXR1cm4gcmV0Owp9CgpzdGF0aWMgSlNWYWx1ZQpqc21fZXZhbF9maWxlKEpTQ29udGV4dCogY3R4LCBjb25zdCBjaGFyKiBmaWxlLCBpbnQgbW9kdWxlKSB7CiAgdWludDhfdCogYnVmOwogIHNpemVfdCBsZW47CiAgaW50IGZsYWdzOwogIGlmKCEoYnVmID0ganNfbG9hZF9maWxlKGN0eCwgJmxlbiwgZmlsZSkpKSB7CiAgICBmcHJpbnRmKHN0ZGVyciwgIkZhaWxlZCBsb2FkaW5nICclcyc6ICVzXG4iLCBmaWxlLCBzdHJlcnJvcihlcnJubykpOwogICAgcmV0dXJuIEpTX1Rocm93SW50ZXJuYWxFcnJvcihjdHgsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJGYWlsZWQgbG9hZGluZyAnJXMnOiAlcyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmVycm9yKGVycm5vKSk7CiAgfQogIGlmKG1vZHVsZSA8IDApCiAgICBtb2R1bGUgPQogICAgICAgIChoYXNfc3VmZml4KGZpbGUsICIubWpzIikgfHwgSlNfRGV0ZWN0TW9kdWxlKChjb25zdCBjaGFyKilidWYsIGxlbikpOwogIGZsYWdzID0gbW9kdWxlID8gSlNfRVZBTF9UWVBFX01PRFVMRSA6IEpTX0VWQUxfVFlQRV9HTE9CQUw7CiAgcmV0dXJuIGpzX2V2YWxfYnVmKGN0eCwgYnVmLCBsZW4sIGZpbGUsIGZsYWdzKTsKfQoKc3RhdGljIGludApqc21fbG9hZF9zY3JpcHQoSlNDb250ZXh0KiBjdHgsIGNvbnN0IGNoYXIqIGZpbGUsIEJPT0wgbW9kdWxlKSB7CiAgSlNWYWx1ZSB2YWw7CiAgaW50MzJfdCByZXQgPSAwOwogIHZhbCA9IGpzbV9ldmFsX2ZpbGUoY3R4LCBmaWxlLCBtb2R1bGUpOwogIGlmKEpTX0lzRXhjZXB0aW9uKHZhbCkpIHsKICAgIGpzX3ZhbHVlX2Z3cml0ZShjdHgsIHZhbCwgc3RkZXJyKTsKICAgIHJldHVybiAtMTsKICB9CiAgaWYoSlNfSXNOdW1iZXIodmFsKSkKICAgIEpTX1RvSW50MzIoY3R4LCAmcmV0LCB2YWwpOwogIGlmKEpTX1ZBTFVFX0dFVF9UQUcodmFsKSAhPSBKU19UQUdfTU9EVUxFICYmCiAgICAgSlNfVkFMVUVfR0VUX1RBRyh2YWwpICE9IEpTX1RBR19FWENFUFRJT04pCiAgICBKU19GcmVlVmFsdWUoY3R4LCB2YWwpOwogIHJldHVybiByZXQ7Cn0KCi8qIGFsc28gdXNlZCB0byBpbml0aWFsaXplIHRoZSB3b3JrZXIgY29udGV4dCAqLwpzdGF0aWMgSlNDb250ZXh0Kgpqc21fY29udGV4dF9uZXcoSlNSdW50aW1lKiBydCkgewogIEpTQ29udGV4dCogY3R4OwogIGN0eCA9IEpTX05ld0NvbnRleHQocnQpOwogIGlmKCFjdHgpCiAgICByZXR1cm4gMDsKI2lmZGVmIENPTkZJR19CSUdOVU0KICBpZihiaWdudW1fZXh0KSB7CiAgICBKU19BZGRJbnRyaW5zaWNCaWdGbG9hdChjdHgpOwogICAgSlNfQWRkSW50cmluc2ljQmlnRGVjaW1hbChjdHgpOwogICAgSlNfQWRkSW50cmluc2ljT3BlcmF0b3JzKGN0eCk7CiAgICBKU19FbmFibGVCaWdudW1FeHQoY3R4LCBUUlVFKTsKICB9CiNlbmRpZgoKI2RlZmluZSBqc21fbW9kdWxlX25hdGl2ZShuYW1lKSBqc19pbml0X21vZHVsZV8jI25hbWUoY3R4LCAjbmFtZSk7CgogIGpzbV9tb2R1bGVfbmF0aXZlKHN0ZCk7CiAganNtX21vZHVsZV9uYXRpdmUob3MpOwogIGpzbV9tb2R1bGVfbmF0aXZlKGNoaWxkX3Byb2Nlc3MpOwogIGpzbV9tb2R1bGVfbmF0aXZlKGRlZXApOwogIGpzbV9tb2R1bGVfbmF0aXZlKGluc3BlY3QpOwogIGpzbV9tb2R1bGVfbmF0aXZlKGxleGVyKTsKICBqc21fbW9kdWxlX25hdGl2ZShtaXNjKTsKICBqc21fbW9kdWxlX25hdGl2ZShtbWFwKTsKICBqc21fbW9kdWxlX25hdGl2ZShwYXRoKTsKICBqc21fbW9kdWxlX25hdGl2ZShwb2ludGVyKTsKICBqc21fbW9kdWxlX25hdGl2ZShwcmVkaWNhdGUpOwogIGpzbV9tb2R1bGVfbmF0aXZlKHJlcGVhdGVyKTsKICBqc21fbW9kdWxlX25hdGl2ZSh0cmVlX3dhbGtlcik7CiAganNtX21vZHVsZV9uYXRpdmUoeG1sKTsKICByZXR1cm4gY3R4Owp9CgojaWYgZGVmaW5lZChfX0FQUExFX18pCiNkZWZpbmUgTUFMTE9DX09WRVJIRUFEIDAKI2Vsc2UKI2RlZmluZSBNQUxMT0NfT1ZFUkhFQUQgOAojZW5kaWYKCnN0cnVjdCB0cmFjZV9tYWxsb2NfZGF0YSB7CiAgdWludDhfdCogYmFzZTsKfTsKCnN0YXRpYyB2b2lkCmR1bXBfdmVjdG9yKGNvbnN0IFZlY3RvciogdmVjLCBzaXplX3Qgc3RhcnQpIHsKICBzaXplX3QgaSwgbGVuID0gdmVjdG9yX3NpemUodmVjLCBzaXplb2YoY2hhciopKTsKICBmb3IoaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHsKICAgIGNvbnN0IGNoYXIqIHN0ciA9ICooY2hhcioqKXZlY3Rvcl9hdCh2ZWMsIHNpemVvZihjaGFyKiksIGkpOwogICAgZnB1dHMoaSA+IHN0YXJ0ID8gIicsXG4gICciIDogIltcbiAgJyIsIHN0ZG91dCk7CiAgICBmcHV0cyhzdHIsIHN0ZG91dCk7CiAgICBpZihpICsgMSA9PSBsZW4pCiAgICAgIHB1dHMoIidcbl0iKTsKICB9Cn0KCnN0YXRpYyBpbmxpbmUgdW5zaWduZWQgbG9uZyBsb25nCmpzbV90cmFjZV9tYWxsb2NfcHRyX29mZnNldCh1aW50OF90KiBwdHIsIHN0cnVjdCB0cmFjZV9tYWxsb2NfZGF0YSogZHApIHsKICByZXR1cm4gcHRyIC0gZHAtPmJhc2U7Cn0KCi8qIGRlZmF1bHQgbWVtb3J5IGFsbG9jYXRpb24gZnVuY3Rpb25zIHdpdGggbWVtb3J5IGxpbWl0YXRpb24gKi8Kc3RhdGljIGlubGluZSBzaXplX3QKanNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZSh2b2lkKiBwdHIpIHsKI2lmIGRlZmluZWQoX19BUFBMRV9fKQogIHJldHVybiBtYWxsb2Nfc2l6ZShwdHIpOwojZWxpZiBkZWZpbmVkKF9XSU4zMikKICByZXR1cm4gX21zaXplKHB0cik7CiNlbGlmIGRlZmluZWQoRU1TQ1JJUFRFTikgfHwgZGVmaW5lZChfX2RpZXRsaWJjX18pIHx8IGRlZmluZWQoX19NU1lTX18pIHx8ICAgICBcCiAgICBkZWZpbmVkKERPTlRfSEFWRV9NQUxMT0NfVVNBQkxFX1NJWkUpCiAgcmV0dXJuIDA7CiNlbGlmIGRlZmluZWQoX19saW51eF9fKSB8fCBkZWZpbmVkKEhBVkVfTUFMTE9DX1VTQUJMRV9TSVpFKQogIHJldHVybiBtYWxsb2NfdXNhYmxlX3NpemUocHRyKTsKI2Vsc2UKICAvKiBjaGFuZ2UgdGhpcyB0byBgcmV0dXJuIDA7YCBpZiBjb21waWxhdGlvbiBmYWlscyAqLwogIHJldHVybiBtYWxsb2NfdXNhYmxlX3NpemUocHRyKTsKI2VuZGlmCn0KCnN0YXRpYyB2b2lkCiNpZmRlZiBfV0lOMzIKICAgIC8qIG1pbmd3IHByaW50ZiBpcyB1c2VkICovCiAgICBfX2F0dHJpYnV0ZV9fKChmb3JtYXQoZ251X3ByaW50ZiwgMiwgMykpKQojZWxzZQogICAgX19hdHRyaWJ1dGVfXygoZm9ybWF0KHByaW50ZiwgMiwgMykpKQojZW5kaWYKICAgIGpzbV90cmFjZV9tYWxsb2NfcHJpbnRmKEpTTWFsbG9jU3RhdGUqIHMsIGNvbnN0IGNoYXIqIGZtdCwgLi4uKSB7CiAgdmFfbGlzdCBhcDsKICBpbnQgYzsKCiAgdmFfc3RhcnQoYXAsIGZtdCk7CiAgd2hpbGUoKGMgPSAqZm10KyspICE9ICdcMCcpIHsKICAgIGlmKGMgPT0gJyUnKSB7CiAgICAgIC8qIG9ubHkgaGFuZGxlICVwIGFuZCAlemQgKi8KICAgICAgaWYoKmZtdCA9PSAncCcpIHsKICAgICAgICB1aW50OF90KiBwdHIgPSB2YV9hcmcoYXAsIHZvaWQqKTsKICAgICAgICBpZihwdHIgPT0gMCkgewogICAgICAgICAgcHJpbnRmKCIwIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHByaW50ZigiSCUrMDZsbGQuJXpkIiwKICAgICAgICAgICAgICAgICBqc21fdHJhY2VfbWFsbG9jX3B0cl9vZmZzZXQocHRyLCBzLT5vcGFxdWUpLAogICAgICAgICAgICAgICAgIGpzbV90cmFjZV9tYWxsb2NfdXNhYmxlX3NpemUocHRyKSk7CiAgICAgICAgfQogICAgICAgIGZtdCsrOwogICAgICAgIGNvbnRpbnVlOwogICAgICB9CiAgICAgIGlmKGZtdFswXSA9PSAneicgJiYgZm10WzFdID09ICdkJykgewogICAgICAgIHNpemVfdCBzeiA9IHZhX2FyZyhhcCwgc2l6ZV90KTsKICAgICAgICBwcmludGYoIiV6ZCIsIHN6KTsKICAgICAgICBmbXQgKz0gMjsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgfQogICAgcHV0YyhjLCBzdGRvdXQpOwogIH0KICB2YV9lbmQoYXApOwp9CgpzdGF0aWMgdm9pZApqc21fdHJhY2VfbWFsbG9jX2luaXQoc3RydWN0IHRyYWNlX21hbGxvY19kYXRhKiBzKSB7CiAgZnJlZShzLT5iYXNlID0gbWFsbG9jKDgpKTsKfQoKc3RhdGljIHZvaWQqCmpzbV90cmFjZV9tYWxsb2MoSlNNYWxsb2NTdGF0ZSogcywgc2l6ZV90IHNpemUpIHsKICB2b2lkKiBwdHI7CgogIC8qIERvIG5vdCBhbGxvY2F0ZSB6ZXJvIGJ5dGVzOiBiZWhhdmlvciBpcyBwbGF0Zm9ybSBkZXBlbmRlbnQgKi8KICBhc3NlcnQoc2l6ZSAhPSAwKTsKCiAgaWYodW5saWtlbHkocy0+bWFsbG9jX3NpemUgKyBzaXplID4gcy0+bWFsbG9jX2xpbWl0KSkKICAgIHJldHVybiAwOwogIHB0ciA9IG1hbGxvYyhzaXplKTsKICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiQSAlemQgLT4gJXBcbiIsIHNpemUsIHB0cik7CiAgaWYocHRyKSB7CiAgICBzLT5tYWxsb2NfY291bnQrKzsKICAgIHMtPm1hbGxvY19zaXplICs9IGpzbV90cmFjZV9tYWxsb2NfdXNhYmxlX3NpemUocHRyKSArIE1BTExPQ19PVkVSSEVBRDsKICB9CiAgcmV0dXJuIHB0cjsKfQoKc3RhdGljIHZvaWQKanNtX3RyYWNlX2ZyZWUoSlNNYWxsb2NTdGF0ZSogcywgdm9pZCogcHRyKSB7CiAgaWYoIXB0cikKICAgIHJldHVybjsKCiAganNtX3RyYWNlX21hbGxvY19wcmludGYocywgIkYgJXBcbiIsIHB0cik7CiAgcy0+bWFsbG9jX2NvdW50LS07CiAgcy0+bWFsbG9jX3NpemUgLT0ganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZShwdHIpICsgTUFMTE9DX09WRVJIRUFEOwogIGZyZWUocHRyKTsKfQoKc3RhdGljIHZvaWQqCmpzbV90cmFjZV9yZWFsbG9jKEpTTWFsbG9jU3RhdGUqIHMsIHZvaWQqIHB0ciwgc2l6ZV90IHNpemUpIHsKICBzaXplX3Qgb2xkX3NpemU7CgogIGlmKCFwdHIpIHsKICAgIGlmKHNpemUgPT0gMCkKICAgICAgcmV0dXJuIDA7CiAgICByZXR1cm4ganNtX3RyYWNlX21hbGxvYyhzLCBzaXplKTsKICB9CiAgb2xkX3NpemUgPSBqc21fdHJhY2VfbWFsbG9jX3VzYWJsZV9zaXplKHB0cik7CiAgaWYoc2l6ZSA9PSAwKSB7CiAgICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiUiAlemQgJXBcbiIsIHNpemUsIHB0cik7CiAgICBzLT5tYWxsb2NfY291bnQtLTsKICAgIHMtPm1hbGxvY19zaXplIC09IG9sZF9zaXplICsgTUFMTE9DX09WRVJIRUFEOwogICAgZnJlZShwdHIpOwogICAgcmV0dXJuIDA7CiAgfQogIGlmKHMtPm1hbGxvY19zaXplICsgc2l6ZSAtIG9sZF9zaXplID4gcy0+bWFsbG9jX2xpbWl0KQogICAgcmV0dXJuIDA7CgogIGpzbV90cmFjZV9tYWxsb2NfcHJpbnRmKHMsICJSICV6ZCAlcCIsIHNpemUsIHB0cik7CgogIHB0ciA9IHJlYWxsb2MocHRyLCBzaXplKTsKICBqc21fdHJhY2VfbWFsbG9jX3ByaW50ZihzLCAiIC0+ICVwXG4iLCBwdHIpOwogIGlmKHB0cikgewogICAgcy0+bWFsbG9jX3NpemUgKz0ganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZShwdHIpIC0gb2xkX3NpemU7CiAgfQogIHJldHVybiBwdHI7Cn0KCnN0YXRpYyBjb25zdCBKU01hbGxvY0Z1bmN0aW9ucyB0cmFjZV9tZiA9IHsKICAgIGpzbV90cmFjZV9tYWxsb2MsCiAgICBqc21fdHJhY2VfZnJlZSwKICAgIGpzbV90cmFjZV9yZWFsbG9jLAojaWYgZGVmaW5lZChfX0FQUExFX18pCiAgICBtYWxsb2Nfc2l6ZSwKI2VsaWYgZGVmaW5lZChfV0lOMzIpCiAgICAoc2l6ZV90KCopKGNvbnN0IHZvaWQqKSlfbXNpemUsCiNlbGlmIGRlZmluZWQoRU1TQ1JJUFRFTikgfHwgZGVmaW5lZChfX2RpZXRsaWJjX18pIHx8IGRlZmluZWQoX19NU1lTX18pIHx8ICAgICBcCiAgICBkZWZpbmVkKERPTlRfSEFWRV9NQUxMT0NfVVNBQkxFX1NJWkVfREVGSU5JVElPTikKICAgIDAsCiNlbGlmIGRlZmluZWQoX19saW51eF9fKSB8fCBkZWZpbmVkKEhBVkVfTUFMTE9DX1VTQUJMRV9TSVpFKQogICAgKHNpemVfdCgqKShjb25zdCB2b2lkKikpbWFsbG9jX3VzYWJsZV9zaXplLAojZWxzZQogICAgLyogY2hhbmdlIHRoaXMgdG8gYDAsYCBpZiBjb21waWxhdGlvbiBmYWlscyAqLwogICAgbWFsbG9jX3VzYWJsZV9zaXplLAojZW5kaWYKfTsKCiNkZWZpbmUgUFJPR19OQU1FICJxanNtIgoKdm9pZApqc21faGVscCh2b2lkKSB7CiAgcHJpbnRmKAogICAgICAiUXVpY2tKUyB2ZXJzaW9uICIgQ09ORklHX1ZFUlNJT04gIlxuIgogICAgICAidXNhZ2U6ICIgUFJPR19OQU1FICIgW29wdGlvbnNdIFtmaWxlIFthcmdzXV1cbiIKICAgICAgIi1oICAtLWhlbHAgICAgICAgICBsaXN0IG9wdGlvbnNcbiIKICAgICAgIi1lICAtLWV2YWwgRVhQUiAgICBldmFsdWF0ZSBFWFBSXG4iCiAgICAgICItaSAgLS1pbnRlcmFjdGl2ZSAgZ28gdG8gaW50ZXJhY3RpdmUgbW9kZVxuIgogICAgICAiLW0gIC0tbW9kdWxlIE5BTUUgIGxvYWQgYW4gRVM2IG1vZHVsZVxuIgogICAgICAiLUkgIC0taW5jbHVkZSBmaWxlIGluY2x1ZGUgYW4gYWRkaXRpb25hbCBmaWxlXG4iCiAgICAgICIgICAgLS1zdGQgICAgICAgICAgbWFrZSAnc3RkJyBhbmQgJ29zJyBhdmFpbGFibGUgdG8gdGhlIGxvYWRlZCBzY3JpcHRcbiIKI2lmZGVmIENPTkZJR19CSUdOVU0KICAgICAgIiAgICAtLW5vLWJpZ251bSAgICBkaXNhYmxlIHRoZSBiaWdudW0gZXh0ZW5zaW9ucyAoQmlnRmxvYXQsICIKICAgICAgIkJpZ0RlY2ltYWwpXG4iCiAgICAgICIgICAgLS1xanNjYWxjICAgICAgbG9hZCB0aGUgUUpTQ2FsYyBydW50aW1lIChkZWZhdWx0IGlmIGludm9rZWQgYXMgIgogICAgICAicWpzY2FsYylcbiIKI2VuZGlmCiAgICAgICItVCAgLS10cmFjZSAgICAgICAgdHJhY2UgbWVtb3J5IGFsbG9jYXRpb25cbiIKICAgICAgIi1kICAtLWR1bXAgICAgICAgICBkdW1wIHRoZSBtZW1vcnkgdXNhZ2Ugc3RhdHNcbiIKICAgICAgIiAgICAtLW1lbW9yeS1saW1pdCBuICAgICAgIGxpbWl0IHRoZSBtZW1vcnkgdXNhZ2UgdG8gJ24nIGJ5dGVzXG4iCiAgICAgICIgICAgLS1zdGFjay1zaXplIG4gICAgICAgICBsaW1pdCB0aGUgc3RhY2sgc2l6ZSB0byAnbicgYnl0ZXNcbiIKICAgICAgIiAgICAtLXVuaGFuZGxlZC1yZWplY3Rpb24gIGR1bXAgdW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uc1xuIgogICAgICAiLXEgIC0tcXVpdCAgICAgICAgIGp1c3QgaW5zdGFudGlhdGUgdGhlIGludGVycHJldGVyIGFuZCBxdWl0XG4iKTsKICBleGl0KDEpOwp9CgpzdGF0aWMgSlNWYWx1ZQpqc21fZXZhbF9zY3JpcHQoSlNDb250ZXh0KiBjdHgsCiAgICAgICAgICAgICAgICBKU1ZhbHVlQ29uc3QgdGhpc192YWwsCiAgICAgICAgICAgICAgICBpbnQgYXJnYywKICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCBhcmd2W10sCiAgICAgICAgICAgICAgICBpbnQgbWFnaWMpIHsKICBjb25zdCBjaGFyKiBzdHI7CiAgc2l6ZV90IGxlbjsKICBKU1ZhbHVlIHJldDsKICBpbnQzMl90IG1vZHVsZTsKICBzdHIgPSBKU19Ub0NTdHJpbmdMZW4oY3R4LCAmbGVuLCBhcmd2WzBdKTsKICBpZihhcmdjID4gMSkKICAgIEpTX1RvSW50MzIoY3R4LCAmbW9kdWxlLCBhcmd2WzFdKTsKICBlbHNlCiAgICBtb2R1bGUgPSBzdHJfZW5kcyhzdHIsICIubWpzIik7CiAgc3dpdGNoKG1hZ2ljKSB7CiAgICBjYXNlIDA6IHsKICAgICAgcmV0ID0ganNtX2V2YWxfZmlsZShjdHgsIHN0ciwgbW9kdWxlKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIDE6IHsKICAgICAgcmV0ID0ganNfZXZhbF9idWYoY3R4LCBzdHIsIGxlbiwgIjxpbnB1dD4iLCBtb2R1bGUpOwogICAgICBicmVhazsKICAgIH0KICB9CiAgaWYoSlNfSXNFeGNlcHRpb24ocmV0KSkgewogICAgaWYoSlNfSXNOdWxsKEpTX0dldFJ1bnRpbWUoY3R4KS0+Y3VycmVudF9leGNlcHRpb24pKSB7CiAgICAgIEpTX0dldEV4Y2VwdGlvbihjdHgpOwogICAgICByZXQgPSBKU19VTkRFRklORUQ7CiAgICB9CiAgfQogIGlmKEpTX1ZBTFVFX0dFVF9UQUcocmV0KSA9PSBKU19UQUdfTU9EVUxFKSB7CiAgICBKU01vZHVsZURlZiogZGVmID0gSlNfVkFMVUVfR0VUX1BUUihyZXQpOwogICAgSlNWYWx1ZSBvYmogPSBKU19OZXdPYmplY3QoY3R4KTsKICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgb2JqLCAibmFtZSIsIG1vZHVsZV9uYW1lKGN0eCwgZGVmKSk7CiAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIG9iaiwgImV4cG9ydHMiLCBtb2R1bGVfZXhwb3J0cyhjdHgsIGRlZikpOwogICAgcmV0ID0gb2JqOwogIH0KICBKU19GcmVlQ1N0cmluZyhjdHgsIHN0cik7CiAgcmV0dXJuIHJldDsKfQoKZW51bSB7CiAgRklORF9NT0RVTEUsCiAgTE9BRF9NT0RVTEUsCiAgUkVTT0xWRV9NT0RVTEUsCiAgR0VUX01PRFVMRV9OQU1FLAogIEdFVF9NT0RVTEVfT0JKRUNULAogIEdFVF9NT0RVTEVfRVhQT1JUUywKICBHRVRfTU9EVUxFX05BTUVTUEFDRSwKICBHRVRfTU9EVUxFX0ZVTkNUSU9OLAogIEdFVF9NT0RVTEVfRVhDRVBUSU9OLAogIEdFVF9NT0RVTEVfTUVUQV9PQkoKfTsKCnN0YXRpYyBKU1ZhbHVlCmpzbV9tb2R1bGVfZnVuYyhKU0NvbnRleHQqIGN0eCwKICAgICAgICAgICAgICAgIEpTVmFsdWVDb25zdCB0aGlzX3ZhbCwKICAgICAgICAgICAgICAgIGludCBhcmdjLAogICAgICAgICAgICAgICAgSlNWYWx1ZUNvbnN0IGFyZ3ZbXSwKICAgICAgICAgICAgICAgIGludCBtYWdpYykgewogIEpTVmFsdWUgdmFsID0gSlNfRVhDRVBUSU9OOwogIEpTTW9kdWxlRGVmKiBkZWYgPSAwOwogIGNvbnN0IGNoYXIqIG5hbWUgPSAwOwoKICBpZihtYWdpYyA+PSBHRVRfTU9EVUxFX05BTUUpIHsKICAgIGlmKCEoZGVmID0ganNfbW9kdWxlX2RlZihjdHgsIGFyZ3ZbMF0pKSkKICAgICAgcmV0dXJuIEpTX1Rocm93VHlwZUVycm9yKGN0eCwgImFyZ3VtZW50IDEgZXhwZWN0aW5nIG1vZHVsZSIpOwogIH0gZWxzZSB7CiAgICBuYW1lID0gSlNfVG9DU3RyaW5nKGN0eCwgYXJndlswXSk7CiAgfQoKICBzd2l0Y2gobWFnaWMpIHsKICAgIGNhc2UgRklORF9NT0RVTEU6IHsKICAgICAgZGVmID0ganNfbW9kdWxlX2ZpbmQoY3R4LCBuYW1lKTsKICAgICAgdmFsID0gSlNfRHVwVmFsdWUoY3R4LCBKU19NS1BUUihKU19UQUdfTU9EVUxFLCBkZWYpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIExPQURfTU9EVUxFOiB7CiAgICAgIEltcG9ydERpcmVjdGl2ZSBpbXA7CiAgICAgIG1lbXNldCgmaW1wLCAwLCBzaXplb2YoaW1wKSk7CiAgICAgIGludCByLG49Y291bnRvZihpbXAuYXJncyk7CiAgICAgIHIgPSBqc19zdHJ2X2NvcHlzKGN0eCwgYXJnYywgYXJndixuLCBpbXAuYXJncyk7CiAgICAgIHByaW50ZigiTE9BRF9NT0RVTEUgcj0laSBhcmdjPSVpXG4iLCByLCBhcmdjKTsKCiAgICAgIEpTVmFsdWUgdmFsID0ganNfaW1wb3J0X2V2YWwoY3R4LCBpbXApOwoKICAgICAgaWYoKGRlZiA9IGpzX21vZHVsZV9maW5kKGN0eCwgaW1wLnBhdGgpKSkKICAgICAgICB2YWwgPSBKU19NS1BUUihKU19UQUdfTU9EVUxFLCBkZWYpOwoKICAgICAganNfc3Rydl9mcmVlX24oY3R4LG4sICBpbXAuYXJncyk7CiAgICAgIC8qCiAgICAgIGZvcihuID0gMDsgbiA8IGNvdW50b2YoaW1wLmFyZ3MpOyBuKyspIHsKICAgICAgICBpZihpbXAuYXJnc1tuXSkKICAgICAgICAgIGpzX2ZyZWUoY3R4LCBpbXAuYXJnc1tuXSk7CiAgICAgIH0qLwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgUkVTT0xWRV9NT0RVTEU6IHsKICAgICAgdmFsID0KICAgICAgICAgIEpTX05ld0ludDMyKGN0eCwgSlNfUmVzb2x2ZU1vZHVsZShjdHgsIEpTX01LUFRSKEpTX1RBR19NT0RVTEUsIGRlZikpKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfTkFNRTogewogICAgICB2YWwgPSBtb2R1bGVfbmFtZShjdHgsIGRlZik7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBHRVRfTU9EVUxFX09CSkVDVDogewogICAgICB2YWwgPSBKU19OZXdPYmplY3QoY3R4KTsKICAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCB2YWwsICJuYW1lIiwgbW9kdWxlX25hbWUoY3R4LCBkZWYpKTsKICAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LCB2YWwsICJyZXNvbHZlZCIsIEpTX05ld0Jvb2woY3R4LCBkZWYtPnJlc29sdmVkKSk7CiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsLAogICAgICAgICAgICAgICAgICAgICAgICAiZnVuY19jcmVhdGVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgSlNfTmV3Qm9vbChjdHgsIGRlZi0+ZnVuY19jcmVhdGVkKSk7CiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgdmFsLAogICAgICAgICAgICAgICAgICAgICAgICAiaW5zdGFudGlhdGVkIiwKICAgICAgICAgICAgICAgICAgICAgICAgSlNfTmV3Qm9vbChjdHgsIGRlZi0+aW5zdGFudGlhdGVkKSk7CiAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgdmFsLCAiZXZhbHVhdGVkIiwgSlNfTmV3Qm9vbChjdHgsIGRlZi0+ZXZhbHVhdGVkKSk7CiAgICAgIGlmKGRlZi0+ZXZhbF9oYXNfZXhjZXB0aW9uKQogICAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwKICAgICAgICAgICAgICAgICAgICAgICAgICB2YWwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgImV4Y2VwdGlvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfRHVwVmFsdWUoY3R4LCBkZWYtPmV2YWxfZXhjZXB0aW9uKSk7CiAgICAgIGlmKCFKU19Jc1VuZGVmaW5lZChkZWYtPm1vZHVsZV9ucykpCiAgICAgICAgSlNfU2V0UHJvcGVydHlTdHIoY3R4LAogICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAibmFtZXNwYWNlIiwKICAgICAgICAgICAgICAgICAgICAgICAgICBKU19EdXBWYWx1ZShjdHgsIGRlZi0+bW9kdWxlX25zKSk7CiAgICAgIGlmKCFKU19Jc1VuZGVmaW5lZChkZWYtPmZ1bmNfb2JqKSkKICAgICAgICBKU19TZXRQcm9wZXJ0eVN0cihjdHgsIHZhbCwgImZ1bmMiLCBKU19EdXBWYWx1ZShjdHgsIGRlZi0+ZnVuY19vYmopKTsKICAgICAgaWYoIUpTX0lzVW5kZWZpbmVkKGRlZi0+bWV0YV9vYmopKQogICAgICAgIEpTX1NldFByb3BlcnR5U3RyKGN0eCwgdmFsLCAibWV0YSIsIEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5tZXRhX29iaikpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgR0VUX01PRFVMRV9FWFBPUlRTOiB7CiAgICAgIHZhbCA9IG1vZHVsZV9leHBvcnRzKGN0eCwgZGVmKTsKICAgICAgYnJlYWs7CiAgICB9CiAgICBjYXNlIEdFVF9NT0RVTEVfTkFNRVNQQUNFOiB7CiAgICAgIHZhbCA9IEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5tb2R1bGVfbnMpOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgR0VUX01PRFVMRV9GVU5DVElPTjogewogICAgICBpZihUUlVFIHx8IGRlZi0+ZnVuY19jcmVhdGVkKQogICAgICAgIHZhbCA9IEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5mdW5jX29iaik7CiAgICAgIGVsc2UKICAgICAgICB2YWwgPSBKU19OVUxMOwogICAgICBicmVhazsKICAgIH0KICAgIGNhc2UgR0VUX01PRFVMRV9FWENFUFRJT046IHsKICAgICAgaWYoZGVmLT5ldmFsX2hhc19leGNlcHRpb24pCiAgICAgICAgdmFsID0gSlNfRHVwVmFsdWUoY3R4LCBkZWYtPmV2YWxfZXhjZXB0aW9uKTsKICAgICAgZWxzZQogICAgICAgIHZhbCA9IEpTX05VTEw7CiAgICAgIGJyZWFrOwogICAgfQogICAgY2FzZSBHRVRfTU9EVUxFX01FVEFfT0JKOiB7CiAgICAgIHZhbCA9IEpTX0R1cFZhbHVlKGN0eCwgZGVmLT5tZXRhX29iaik7CiAgICAgIGJyZWFrOwogICAgfQogIH0KICBpZihuYW1lKQogICAgSlNfRnJlZUNTdHJpbmcoY3R4LCBuYW1lKTsKCiAgcmV0dXJuIHZhbDsKfQoKc3RhdGljIGNvbnN0IEpTQ0Z1bmN0aW9uTGlzdEVudHJ5IGpzbV9nbG9iYWxfZnVuY3NbXSA9IHsKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZXZhbEZpbGUiLCAxLCBqc21fZXZhbF9zY3JpcHQsIDApLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJldmFsU2NyaXB0IiwgMSwganNtX2V2YWxfc2NyaXB0LCAxKSwKICAgIEpTX0NHRVRTRVRfTUFHSUNfREVGKCJtb2R1bGVMaXN0IiwganNfbW9kdWxlc19hcnJheSwgMCwgMCksCiAgICBKU19DR0VUU0VUX01BR0lDX0RFRigibW9kdWxlT2JqZWN0IiwganNfbW9kdWxlc19vYmplY3QsIDAsIDApLAogICAgSlNfQ0dFVFNFVF9NQUdJQ19ERUYoIm1vZHVsZU1hcCIsIGpzX21vZHVsZXNfbWFwLCAwLCAwKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZmluZE1vZHVsZSIsIDEsIGpzbV9tb2R1bGVfZnVuYywgRklORF9NT0RVTEUpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKCJsb2FkTW9kdWxlIiwgMSwganNtX21vZHVsZV9mdW5jLCBMT0FEX01PRFVMRSksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoInJlc29sdmVNb2R1bGUiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIFJFU09MVkVfTU9EVUxFKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigiZ2V0TW9kdWxlTmFtZSIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9OQU1FKSwKICAgIEpTX0NGVU5DX01BR0lDX0RFRigKICAgICAgICAiZ2V0TW9kdWxlT2JqZWN0IiwgMSwganNtX21vZHVsZV9mdW5jLCBHRVRfTU9EVUxFX09CSkVDVCksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoCiAgICAgICAgImdldE1vZHVsZUV4cG9ydHMiLCAxLCBqc21fbW9kdWxlX2Z1bmMsIEdFVF9NT0RVTEVfRVhQT1JUUyksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoCiAgICAgICAgImdldE1vZHVsZU5hbWVzcGFjZSIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9OQU1FU1BBQ0UpLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKAogICAgICAgICJnZXRNb2R1bGVGdW5jdGlvbiIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9GVU5DVElPTiksCiAgICBKU19DRlVOQ19NQUdJQ19ERUYoCiAgICAgICAgImdldE1vZHVsZUV4Y2VwdGlvbiIsIDEsIGpzbV9tb2R1bGVfZnVuYywgR0VUX01PRFVMRV9FWENFUFRJT04pLAogICAgSlNfQ0ZVTkNfTUFHSUNfREVGKAogICAgICAgICJnZXRNb2R1bGVNZXRhT2JqZWN0IiwgMSwganNtX21vZHVsZV9mdW5jLCBHRVRfTU9EVUxFX01FVEFfT0JKKSwKfTsKCmludAptYWluKGludCBhcmdjLCBjaGFyKiogYXJndikgewogIEpTUnVudGltZSogcnQ7CiAgSlNDb250ZXh0KiBjdHg7CiAgc3RydWN0IHRyYWNlX21hbGxvY19kYXRhIHRyYWNlX2RhdGEgPSB7MH07CiAgaW50IG9wdGluZDsKICBjaGFyKiBleHByID0gMDsKICBpbnQgaW50ZXJhY3RpdmUgPSAwOwogIGludCBkdW1wX21lbW9yeSA9IDA7CiAgaW50IHRyYWNlX21lbW9yeSA9IDA7CiAgaW50IGVtcHR5X3J1biA9IDA7CiAgaW50IG1vZHVsZSA9IDE7CiAgaW50IGxvYWRfc3RkID0gMTsKICBpbnQgZHVtcF91bmhhbmRsZWRfcHJvbWlzZV9yZWplY3Rpb24gPSAwOwogIHNpemVfdCBtZW1vcnlfbGltaXQgPSAwOwogIGNoYXIqIGluY2x1ZGVfbGlzdFszMl07CiAgaW50IGksIGluY2x1ZGVfY291bnQgPSAwOwojaWZkZWYgQ09ORklHX0JJR05VTQogIGludCBsb2FkX2pzY2FsYzsKI2VuZGlmCiAgc2l6ZV90IHN0YWNrX3NpemUgPSAwOwogIGNvbnN0IGNoYXIqIGV4ZW5hbWU7CgogIHBhY2thZ2VfanNvbiA9IEpTX1VOREVGSU5FRDsKCiAgaW5pdF9saXN0X2hlYWQoJnBvbGxoYW5kbGVycyk7CgogIHsKICAgIGNvbnN0IGNoYXIqIHA7CiAgICBleGVuYW1lID0gYXJndlswXTsKICAgIHAgPSBzdHJyY2hyKGV4ZW5hbWUsICcvJyk7CiAgICBpZihwKQogICAgICBleGVuYW1lID0gcCArIDE7CiAgICAvKiBsb2FkIGpzY2FsYyBydW50aW1lIGlmIGludm9rZWQgYXMgJ3Fqc2NhbGMnICovCiAgICBsb2FkX2pzY2FsYyA9ICFzdHJjbXAoZXhlbmFtZSwgInFqc2NhbGMiKTsKICB9CgogIC8qIGNhbm5vdCB1c2UgZ2V0b3B0IGJlY2F1c2Ugd2Ugd2FudCB0byBwYXNzIHRoZSBjb21tYW5kIGxpbmUgdG8KICAgICB0aGUgc2NyaXB0ICovCiAgb3B0aW5kID0gMTsKICB3aGlsZShvcHRpbmQgPCBhcmdjICYmICphcmd2W29wdGluZF0gPT0gJy0nKSB7CiAgICBjaGFyKiBhcmcgPSBhcmd2W29wdGluZF0gKyAxOwogICAgY29uc3QgY2hhciogbG9uZ29wdCA9ICIiOwogICAgY29uc3QgY2hhciogb3B0YXJnOwoKICAgIC8qIGEgc2luZ2xlIC0gaXMgbm90IGFuIG9wdGlvbiwgaXQgYWxzbyBzdG9wcyBhcmd1bWVudCBzY2FubmluZyAqLwogICAgaWYoISphcmcpCiAgICAgIGJyZWFrOwoKICAgIGlmKGFyZ1sxXSkgewogICAgICBvcHRhcmcgPSAmYXJnWzFdOwogICAgfSBlbHNlIHsKICAgICAgb3B0YXJnID0gYXJndlsrK29wdGluZF07CiAgICB9CgogICAgaWYoKmFyZyA9PSAnLScpIHsKICAgICAgbG9uZ29wdCA9IGFyZyArIDE7CiAgICAgIGFyZyArPSBzdHJsZW4oYXJnKTsKICAgICAgLyogLS0gc3RvcHMgYXJndW1lbnQgc2Nhbm5pbmcgKi8KICAgICAgaWYoISpsb25nb3B0KQogICAgICAgIGJyZWFrOwogICAgfQogICAgZm9yKDsgKmFyZyB8fCAqbG9uZ29wdDsgbG9uZ29wdCA9ICIiKSB7CiAgICAgIGNoYXIgb3B0ID0gKmFyZzsKICAgICAgaWYob3B0KQogICAgICAgIGFyZysrOwogICAgICBpZihvcHQgPT0gJ2gnIHx8IG9wdCA9PSAnPycgfHwgIXN0cmNtcChsb25nb3B0LCAiaGVscCIpKSB7CiAgICAgICAganNtX2hlbHAoKTsKICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZihvcHQgPT0gJ2UnIHx8ICFzdHJjbXAobG9uZ29wdCwgImV2YWwiKSkgewogICAgICAgIGlmKCphcmcpIHsKICAgICAgICAgIGV4cHIgPSBhcmc7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgICAgaWYob3B0aW5kIDwgYXJnYykgewogICAgICAgICAgZXhwciA9IGFyZ3Zbb3B0aW5kKytdOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICAgIGZwcmludGYoc3RkZXJyLCAiJXM6IG1pc3NpbmcgZXhwcmVzc2lvbiBmb3IgLWVcbiIsIGV4ZW5hbWUpOwogICAgICAgIGV4aXQoMik7CiAgICAgIH0KICAgICAgaWYob3B0ID09ICdJJyB8fCAhc3RyY21wKGxvbmdvcHQsICJpbmNsdWRlIikpIHsKICAgICAgICBpZihvcHRpbmQgPj0gYXJnYykgewogICAgICAgICAgZnByaW50ZihzdGRlcnIsICJleHBlY3RpbmcgZmlsZW5hbWUiKTsKICAgICAgICAgIGV4aXQoMSk7CiAgICAgICAgfQogICAgICAgIGlmKGluY2x1ZGVfY291bnQgPj0gY291bnRvZihpbmNsdWRlX2xpc3QpKSB7CiAgICAgICAgICBmcHJpbnRmKHN0ZGVyciwgInRvbyBtYW55IGluY2x1ZGVkIGZpbGVzIik7CiAgICAgICAgICBleGl0KDEpOwogICAgICAgIH0KICAgICAgICBpbmNsdWRlX2xpc3RbaW5jbHVkZV9jb3VudCsrXSA9IG9wdGFyZzsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZihvcHQgPT0gJ2knIHx8ICFzdHJjbXAobG9uZ29wdCwgImludGVyYWN0aXZlIikpIHsKICAgICAgICBpbnRlcmFjdGl2ZSsrOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmKG9wdCA9PSAnbScgfHwgIXN0cmNtcChsb25nb3B0LCAibW9kdWxlIikpIHsKICAgICAgICBjb25zdCBjaGFyKiBtb2R1bGVzID0gYXJndltvcHRpbmRdOwogICAgICAgIHNpemVfdCBpLCBsZW47CgogICAgICAgIGZvcihpID0gMDsgbW9kdWxlc1tpXTsgaSArPSBsZW4pIHsKICAgICAgICAgIGxlbiA9IHN0cl9jaHIoJm1vZHVsZXNbaV0sICcsJyk7CiAgICAgICAgICB2ZWN0b3JfcHV0cHRyKCZtb2R1bGVfbGlzdCwgc3RyX25kdXAoJm1vZHVsZXNbaV0sIGxlbikpOwoKICAgICAgICAgIGlmKG1vZHVsZXNbaSArIGxlbl0gPT0gJywnKQogICAgICAgICAgICBsZW4rKzsKICAgICAgICB9CgogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmKG9wdCA9PSAnZCcgfHwgIXN0cmNtcChsb25nb3B0LCAiZHVtcCIpKSB7CiAgICAgICAgZHVtcF9tZW1vcnkrKzsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZihvcHQgPT0gJ1QnIHx8ICFzdHJjbXAobG9uZ29wdCwgInRyYWNlIikpIHsKICAgICAgICB0cmFjZV9tZW1vcnkrKzsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZighc3RyY21wKGxvbmdvcHQsICJzdGQiKSkgewogICAgICAgIGxvYWRfc3RkID0gMTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZighc3RyY21wKGxvbmdvcHQsICJ1bmhhbmRsZWQtcmVqZWN0aW9uIikpIHsKICAgICAgICBkdW1wX3VuaGFuZGxlZF9wcm9taXNlX3JlamVjdGlvbiA9IDE7CiAgICAgICAgYnJlYWs7CiAgICAgIH0KI2lmZGVmIENPTkZJR19CSUdOVU0KICAgICAgaWYoIXN0cmNtcChsb25nb3B0LCAibm8tYmlnbnVtIikpIHsKICAgICAgICBiaWdudW1fZXh0ID0gMDsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZighc3RyY21wKGxvbmdvcHQsICJiaWdudW0iKSkgewogICAgICAgIGJpZ251bV9leHQgPSAxOwogICAgICAgIGJyZWFrOwogICAgICB9CiAgICAgIGlmKCFzdHJjbXAobG9uZ29wdCwgInFqc2NhbGMiKSkgewogICAgICAgIGxvYWRfanNjYWxjID0gMTsKICAgICAgICBicmVhazsKICAgICAgfQojZW5kaWYKICAgICAgaWYob3B0ID09ICdxJyB8fCAhc3RyY21wKGxvbmdvcHQsICJxdWl0IikpIHsKICAgICAgICBlbXB0eV9ydW4rKzsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZighc3RyY21wKGxvbmdvcHQsICJtZW1vcnktbGltaXQiKSkgewogICAgICAgIGlmKG9wdGluZCA+PSBhcmdjKSB7CiAgICAgICAgICBmcHJpbnRmKHN0ZGVyciwgImV4cGVjdGluZyBtZW1vcnkgbGltaXQiKTsKICAgICAgICAgIGV4aXQoMSk7CiAgICAgICAgfQogICAgICAgIG1lbW9yeV9saW1pdCA9IChzaXplX3Qpc3RydG9kKGFyZ3Zbb3B0aW5kKytdLCAwKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZighc3RyY21wKGxvbmdvcHQsICJzdGFjay1zaXplIikpIHsKICAgICAgICBpZihvcHRpbmQgPj0gYXJnYykgewogICAgICAgICAgZnByaW50ZihzdGRlcnIsICJleHBlY3Rpbmcgc3RhY2sgc2l6ZSIpOwogICAgICAgICAgZXhpdCgxKTsKICAgICAgICB9CiAgICAgICAgc3RhY2tfc2l6ZSA9IChzaXplX3Qpc3RydG9kKGFyZ3Zbb3B0aW5kKytdLCAwKTsKICAgICAgICBicmVhazsKICAgICAgfQogICAgICBpZihvcHQpIHsKICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIiVzOiB1bmtub3duIG9wdGlvbiAnLSVjJ1xuIiwgZXhlbmFtZSwgb3B0KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBmcHJpbnRmKHN0ZGVyciwgIiVzOiB1bmtub3duIG9wdGlvbiAnLS0lcydcbiIsIGV4ZW5hbWUsIGxvbmdvcHQpOwogICAgICB9CiAgICAgIGpzbV9oZWxwKCk7CiAgICB9CiAgICBvcHRpbmQrKzsKICB9CgogIHsKICAgIGNvbnN0IGNoYXIqIG1vZHVsZXM7CgogICAgaWYoKG1vZHVsZXMgPSBnZXRlbnYoIkRFQlVHIikpKSB7CiAgICAgIHNpemVfdCBpLCBsZW47CiAgICAgIGZvcihpID0gMDsgbW9kdWxlc1tpXTsgaSArPSBsZW4pIHsKICAgICAgICBsZW4gPSBzdHJfY2hyKCZtb2R1bGVzW2ldLCAnLCcpOwogICAgICAgIHZlY3Rvcl9wdXRwdHIoJm1vZHVsZV9kZWJ1Zywgc3RyX25kdXAoJm1vZHVsZXNbaV0sIGxlbikpOwoKICAgICAgICBpZihtb2R1bGVzW2kgKyBsZW5dID09ICcsJykKICAgICAgICAgIGxlbisrOwogICAgICB9CgogICAgICBpZih2ZWN0b3JfZmluZHMoJm1vZHVsZV9kZWJ1ZywgIm1vZHVsZXMiKSAhPSAtMSkKICAgICAgICBkZWJ1Z19tb2R1bGVfbG9hZGVyID0gVFJVRTsKICAgIH0KICB9CgogIGlmKGxvYWRfanNjYWxjKQogICAgYmlnbnVtX2V4dCA9IDE7CgogIGlmKHRyYWNlX21lbW9yeSkgewogICAganNtX3RyYWNlX21hbGxvY19pbml0KCZ0cmFjZV9kYXRhKTsKICAgIHJ0ID0gSlNfTmV3UnVudGltZTIoJnRyYWNlX21mLCAmdHJhY2VfZGF0YSk7CiAgfSBlbHNlIHsKICAgIHJ0ID0gSlNfTmV3UnVudGltZSgpOwogIH0KICBpZighcnQpIHsKICAgIGZwcmludGYoc3RkZXJyLCAiJXM6IGNhbm5vdCBhbGxvY2F0ZSBKUyBydW50aW1lXG4iLCBleGVuYW1lKTsKICAgIGV4aXQoMik7CiAgfQoKICBKU19TZXRNb2R1bGVMb2FkZXJGdW5jKHJ0LCAwLCBqc21fbW9kdWxlX2xvYWRlciwgMCk7CgogIGlmKG1lbW9yeV9saW1pdCAhPSAwKQogICAgSlNfU2V0TWVtb3J5TGltaXQocnQsIG1lbW9yeV9saW1pdCk7CiAgLy8gaWYgKHN0YWNrX3NpemUgIT0gMCkKICBKU19TZXRNYXhTdGFja1NpemUocnQsIHN0YWNrX3NpemUgIT0gMCA/IHN0YWNrX3NpemUgOiAyNTYgKiAxMDQ4NTc2KTsKCiAganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyhqc21fY29udGV4dF9uZXcpOwoKICBqc19zdGRfaW5pdF9oYW5kbGVycyhydCk7CiAgY3R4ID0ganNtX2NvbnRleHRfbmV3KHJ0KTsKICBpZighY3R4KSB7CiAgICBmcHJpbnRmKHN0ZGVyciwgIiVzOiBjYW5ub3QgYWxsb2NhdGUgSlMgY29udGV4dFxuIiwgZXhlbmFtZSk7CiAgICBleGl0KDIpOwogIH0KCiAgLyogbG9hZGVyIGZvciBFUzYgbW9kdWxlcyAqLwogIEpTX1NldE1vZHVsZUxvYWRlckZ1bmMocnQsIGpzX21vZHVsZV9ub3JtYWxpemUsIGpzbV9tb2R1bGVfbG9hZGVyLCAwKTsKCiAgaWYoZHVtcF91bmhhbmRsZWRfcHJvbWlzZV9yZWplY3Rpb24pIHsKICAgIEpTX1NldEhvc3RQcm9taXNlUmVqZWN0aW9uVHJhY2tlcihydCwganNfc3RkX3Byb21pc2VfcmVqZWN0aW9uX3RyYWNrZXIsIDApOwogIH0KCiAgaWYoIWVtcHR5X3J1bikgewojaWZkZWYgQ09ORklHX0JJR05VTQogICAgaWYobG9hZF9qc2NhbGMpIHsKICAgICAganNfZXZhbF9iaW5hcnkoY3R4LCBxanNjX3Fqc2NhbGMsIHFqc2NfcWpzY2FsY19zaXplLCAwKTsKICAgIH0KI2VuZGlmCiAgICBqc19zdGRfYWRkX2hlbHBlcnMoY3R4LCBhcmdjIC0gb3B0aW5kLCBhcmd2ICsgb3B0aW5kKTsKCiAgICBpbnQgbnVtX25hdGl2ZSwgbnVtX2NvbXBpbGVkOwoKI2RlZmluZSBqc21fYnVpbHRpbl9uYXRpdmUobmFtZSkgdmVjdG9yX3B1dHB0cigmYnVpbHRpbnMsICNuYW1lKQoKICAgIGpzbV9idWlsdGluX25hdGl2ZShzdGQpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKG9zKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZShjaGlsZF9wcm9jZXNzKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZShkZWVwKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZShpbnNwZWN0KTsKICAgIGpzbV9idWlsdGluX25hdGl2ZShsZXhlcik7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUobWlzYyk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUobW1hcCk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUocGF0aCk7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUocG9pbnRlcik7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUocHJlZGljYXRlKTsKICAgIGpzbV9idWlsdGluX25hdGl2ZShyZXBlYXRlcik7CiAgICBqc21fYnVpbHRpbl9uYXRpdmUodHJlZV93YWxrZXIpOwogICAganNtX2J1aWx0aW5fbmF0aXZlKHhtbCk7CiAgICBudW1fbmF0aXZlID0gdmVjdG9yX3NpemUoJmJ1aWx0aW5zLCBzaXplb2YoY2hhciopKTsKCiAgICAvLyBwcmludGYoIm5hdGl2ZSBidWlsdGluczogIik7IGR1bXBfdmVjdG9yKCZidWlsdGlucywgMCk7CgojZGVmaW5lIGpzbV9idWlsdGluX2NvbXBpbGVkKG5hbWUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXAogIGpzX2V2YWxfYmluYXJ5KGN0eCwgcWpzY18jI25hbWUsIHFqc2NfIyNuYW1lIyNfc2l6ZSwgMCk7ICAgICAgICAgICAgICAgICAgICAgXAogIHZlY3Rvcl9wdXRwdHIoJmJ1aWx0aW5zLCAjbmFtZSkKCiAgICBqc21fYnVpbHRpbl9jb21waWxlZChjb25zb2xlKTsKICAgIGpzbV9idWlsdGluX2NvbXBpbGVkKGV2ZW50cyk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChmcyk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChwZXJmX2hvb2tzKTsKICAgIGpzbV9idWlsdGluX2NvbXBpbGVkKHByb2Nlc3MpOwogICAgLy8ganNtX2J1aWx0aW5fY29tcGlsZWQocmVwbCk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZChyZXF1aXJlKTsKICAgIGpzbV9idWlsdGluX2NvbXBpbGVkKHR0eSk7CiAgICBqc21fYnVpbHRpbl9jb21waWxlZCh1dGlsKTsKCiAgICBudW1fY29tcGlsZWQgPSB2ZWN0b3Jfc2l6ZSgmYnVpbHRpbnMsIHNpemVvZihjaGFyKikpIC0gbnVtX25hdGl2ZTsKCiAgICB7CiAgICAgIGNvbnN0IGNoYXIqIHN0ciA9CiAgICAgICAgICAiaW1wb3J0IHByb2Nlc3MgZnJvbSAncHJvY2Vzcyc7XG5nbG9iYWxUaGlzLnByb2Nlc3MgPSBwcm9jZXNzO1xuIjsKICAgICAganNfZXZhbF9zdHIoY3R4LCBzdHIsICI8aW5wdXQ+IiwgSlNfRVZBTF9UWVBFX01PRFVMRSk7CiAgICB9CgogICAgSlNfU2V0UHJvcGVydHlGdW5jdGlvbkxpc3QoY3R4LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNfR2V0R2xvYmFsT2JqZWN0KGN0eCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc21fZ2xvYmFsX2Z1bmNzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRvZihqc21fZ2xvYmFsX2Z1bmNzKSk7CiAgICBpZihsb2FkX3N0ZCkgewogICAgICBjb25zdCBjaGFyKiBzdHIgPSAiaW1wb3J0ICogYXMgc3RkIGZyb20gJ3N0ZCc7XG5pbXBvcnQgKiBhcyBvcyBmcm9tICIKICAgICAgICAgICAgICAgICAgICAgICAgIidvcyc7XG5nbG9iYWxUaGlzLnN0ZCA9ICIKICAgICAgICAgICAgICAgICAgICAgICAgInN0ZDtcbmdsb2JhbFRoaXMub3MgIgogICAgICAgICAgICAgICAgICAgICAgICAiPSBvcztcbmdsb2JhbFRoaXMuc2V0VGltZW91dCA9ICIKICAgICAgICAgICAgICAgICAgICAgICAgIm9zLnNldFRpbWVvdXQ7XG5nbG9iYWxUaGlzLmNsZWFyVGltZW91dCA9ICIKICAgICAgICAgICAgICAgICAgICAgICAgIm9zLmNsZWFyVGltZW91dDtcbiI7CiAgICAgIGpzX2V2YWxfc3RyKGN0eCwgc3RyLCAiPGlucHV0PiIsIEpTX0VWQUxfVFlQRV9NT0RVTEUpOwogICAgfQoKICAgIC8vIGpzbV9saXN0X21vZHVsZXMoY3R4KTsKCiAgICB7CiAgICAgIGNoYXIqKiBuYW1lOwogICAgICBKU01vZHVsZURlZiogbTsKICAgICAgdmVjdG9yX2ZvcmVhY2hfdCgmbW9kdWxlX2xpc3QsIG5hbWUpIHsKICAgICAgICBpZighKG0gPSBqc19tb2R1bGVfaW1wb3J0X25hbWVzcGFjZShjdHgsICpuYW1lLCAwKSkpIHsKICAgICAgICAgIGZwcmludGYoc3RkZXJyLCAiZXJyb3IgbG9hZGluZyBtb2R1bGUgJyVzJ1xuIiwgKm5hbWUpOwogICAgICAgICAgZXhpdCgxKTsKICAgICAgICB9CiAgICAgICAgZnJlZSgqbmFtZSk7CiAgICAgIH0KICAgICAgdmVjdG9yX2ZyZWUoJm1vZHVsZV9saXN0KTsKICAgIH0KCiAgICBmb3IoaSA9IDA7IGkgPCBpbmNsdWRlX2NvdW50OyBpKyspIHsKICAgICAgaWYoanNtX2xvYWRfc2NyaXB0KGN0eCwgaW5jbHVkZV9saXN0W2ldLCBtb2R1bGUpID09IC0xKQogICAgICAgIGdvdG8gZmFpbDsKICAgIH0KCiAgICBpZihleHByKSB7CiAgICAgIGlmKGpzX2V2YWxfc3RyKGN0eCwgZXhwciwgIjxjbWRsaW5lPiIsIDApID09IC0xKQogICAgICAgIGdvdG8gZmFpbDsKICAgIH0gZWxzZSBpZihvcHRpbmQgPj0gYXJnYykgewogICAgICAvKiBpbnRlcmFjdGl2ZSBtb2RlICovCiAgICAgIGludGVyYWN0aXZlID0gMTsKICAgIH0gZWxzZSB7CiAgICAgIGNvbnN0IGNoYXIqIGZpbGVuYW1lOwogICAgICBmaWxlbmFtZSA9IGFyZ3Zbb3B0aW5kXTsKICAgICAgaWYoanNtX2xvYWRfc2NyaXB0KGN0eCwgZmlsZW5hbWUsIG1vZHVsZSkgPT0gLTEpIHsKICAgICAgICBqc192YWx1ZV9md3JpdGUoY3R4LCBKU19HZXRFeGNlcHRpb24oY3R4KSwgc3RkZXJyKTsKICAgICAgICBnb3RvIGZhaWw7CiAgICAgIH0KICAgIH0KICAgIGlmKGludGVyYWN0aXZlKSB7CiAgICAgIGNvbnN0IGNoYXIqIHN0ciA9ICJpbXBvcnQgUkVQTCBmcm9tICdyZXBsJzsgZ2xvYmFsVGhpcy5yZXBsID0gbmV3ICIKICAgICAgICAgICAgICAgICAgICAgICAgIlJFUEwoJ3Fqc20nKS5ydW5TeW5jKCk7XG4iOwogICAgICBqc19ldmFsX2JpbmFyeShjdHgsIHFqc2NfcmVwbCwgcWpzY19yZXBsX3NpemUsIDApOwogICAgICBqc19ldmFsX3N0cihjdHgsIHN0ciwgIjxpbnB1dD4iLCBKU19FVkFMX1RZUEVfTU9EVUxFKTsKICAgIH0KCiAgICBqc19zdGRfbG9vcChjdHgpOwogIH0KCiAgewoKICAgIEpTVmFsdWUgZXhjZXB0aW9uID0gSlNfR2V0RXhjZXB0aW9uKGN0eCk7CgogICAgaWYoIUpTX0lzTnVsbChleGNlcHRpb24pKSB7CiAgICAgIGpzX3N0ZF9kdW1wX2Vycm9yKGN0eCk7CiAgICB9CiAgfQoKICBpZihkdW1wX21lbW9yeSkgewogICAgSlNNZW1vcnlVc2FnZSBzdGF0czsKICAgIEpTX0NvbXB1dGVNZW1vcnlVc2FnZShydCwgJnN0YXRzKTsKICAgIEpTX0R1bXBNZW1vcnlVc2FnZShzdGRvdXQsICZzdGF0cywgcnQpOwogIH0KICBqc19zdGRfZnJlZV9oYW5kbGVycyhydCk7CiAgSlNfRnJlZUNvbnRleHQoY3R4KTsKICBKU19GcmVlUnVudGltZShydCk7CgogIGlmKGVtcHR5X3J1biAmJiBkdW1wX21lbW9yeSkgewogICAgY2xvY2tfdCB0WzVdOwogICAgZG91YmxlIGJlc3RbNV07CiAgICBpbnQgaSwgajsKICAgIGZvcihpID0gMDsgaSA8IDEwMDsgaSsrKSB7CiAgICAgIHRbMF0gPSBjbG9jaygpOwogICAgICBydCA9IEpTX05ld1J1bnRpbWUoKTsKICAgICAgdFsxXSA9IGNsb2NrKCk7CiAgICAgIGN0eCA9IEpTX05ld0NvbnRleHQocnQpOwogICAgICB0WzJdID0gY2xvY2soKTsKICAgICAgSlNfRnJlZUNvbnRleHQoY3R4KTsKICAgICAgdFszXSA9IGNsb2NrKCk7CiAgICAgIEpTX0ZyZWVSdW50aW1lKHJ0KTsKICAgICAgdFs0XSA9IGNsb2NrKCk7CiAgICAgIGZvcihqID0gNDsgaiA+IDA7IGotLSkgewogICAgICAgIGRvdWJsZSBtcyA9IDEwMDAuMCAqICh0W2pdIC0gdFtqIC0gMV0pIC8gQ0xPQ0tTX1BFUl9TRUM7CiAgICAgICAgaWYoaSA9PSAwIHx8IGJlc3Rbal0gPiBtcykKICAgICAgICAgIGJlc3Rbal0gPSBtczsKICAgICAgfQogICAgfQogICAgcHJpbnRmKCJcbkluc3RhbnRpYXRpb24gdGltZXMgKG1zKTogJS4zZiA9ICUuM2YrJS4zZislLjNmKyUuM2ZcbiIsCiAgICAgICAgICAgYmVzdFsxXSArIGJlc3RbMl0gKyBiZXN0WzNdICsgYmVzdFs0XSwKICAgICAgICAgICBiZXN0WzFdLAogICAgICAgICAgIGJlc3RbMl0sCiAgICAgICAgICAgYmVzdFszXSwKICAgICAgICAgICBiZXN0WzRdKTsKICB9CiAgcmV0dXJuIDA7CmZhaWw6CiAganNfc3RkX2ZyZWVfaGFuZGxlcnMocnQpOwogIEpTX0ZyZWVDb250ZXh0KGN0eCk7CiAgSlNfRnJlZVJ1bnRpbWUocnQpOwogIHJldHVybiAxOwp9CgAAAAAAAAAAtW0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4zcAAAAAAADjNwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "utils.h",
			"settings":
			{
				"buffer_size": 31190,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					342,
					1,
					"cut",
					null,
					"AQAAAP1mAAAAAAAA/WYAAAAAAAAwAAAAdm9pZCBqc19zdHJ2X2ZyZWUoSlNDb250ZXh0KiBjdHgsIGNoYXIqKiBzdHJ2KTsK",
					"AQAAAAAAAAABAAAA/WYAAAAAAAAtZwAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					2,
					"paste",
					null,
					"AgAAAP1mAAAAAAAALWcAAAAAAAAAAAAALWcAAAAAAABdZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/WYAAAAAAAD9ZgAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "argv"
					},
					"BQAAAAVnAAAAAAAABmcAAAAAAAAAAAAABmcAAAAAAAAGZwAAAAAAAAQAAABzdHJ2BmcAAAAAAAAHZwAAAAAAAAAAAAAHZwAAAAAAAAhnAAAAAAAAAAAAAAhnAAAAAAAACWcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACWcAAAAAAAAFZwAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": "iin"
					},
					"AwAAAB9nAAAAAAAAIGcAAAAAAAAAAAAAIGcAAAAAAAAhZwAAAAAAAAAAAAAhZwAAAAAAACJnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAH2cAAAAAAAAfZwAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					2,
					"left_delete",
					null,
					"AgAAACFnAAAAAAAAIWcAAAAAAAABAAAAbiBnAAAAAAAAIGcAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAImcAAAAAAAAiZwAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "nt"
					},
					"AgAAACBnAAAAAAAAIWcAAAAAAAAAAAAAIWcAAAAAAAAiZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIGcAAAAAAAAgZwAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " n,"
					},
					"AwAAACJnAAAAAAAAI2cAAAAAAAAAAAAAI2cAAAAAAAAkZwAAAAAAAAAAAAAkZwAAAAAAACVnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAImcAAAAAAAAiZwAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACVnAAAAAAAAJmcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJWcAAAAAAAAlZwAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"left_delete",
					null,
					"AQAAADJnAAAAAAAAMmcAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAM2cAAAAAAAAzZwAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADJnAAAAAAAAM2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMmcAAAAAAAAyZwAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADNnAAAAAAAANWcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM2cAAAAAAAAzZwAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAADRnAAAAAAAANWcAAAAAAAAAAAAANWcAAAAAAAA2ZwAAAAAAAAAAAAA1ZwAAAAAAADdnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANGcAAAAAAAA0ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAADdnAAAAAAAAOGcAAAAAAAAAAAAAOGcAAAAAAAA5ZwAAAAAAAAAAAAA5ZwAAAAAAADpnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAN2cAAAAAAAA3ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADpnAAAAAAAAPGcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOmcAAAAAAAA6ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAADtnAAAAAAAAPGcAAAAAAAAAAAAAPGcAAAAAAAA9ZwAAAAAAAAAAAAA9ZwAAAAAAAD5nAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO2cAAAAAAAA7ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAD5nAAAAAAAAP2cAAAAAAAAAAAAAP2cAAAAAAABAZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPmcAAAAAAAA+ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAEBnAAAAAAAAQWcAAAAAAAAAAAAAQWcAAAAAAABCZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQGcAAAAAAABAZwAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": " 0;"
					},
					"AwAAAEJnAAAAAAAAQ2cAAAAAAAAAAAAAQ2cAAAAAAABEZwAAAAAAAAAAAABEZwAAAAAAAEVnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQmcAAAAAAABCZwAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": " i"
					},
					"AgAAAEVnAAAAAAAARmcAAAAAAAAAAAAARmcAAAAAAABHZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARWcAAAAAAABFZwAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": " <"
					},
					"AgAAAEdnAAAAAAAASGcAAAAAAAAAAAAASGcAAAAAAABJZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAR2cAAAAAAABHZwAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": " n;"
					},
					"AwAAAElnAAAAAAAASmcAAAAAAAAAAAAASmcAAAAAAABLZwAAAAAAAAAAAABLZwAAAAAAAExnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASWcAAAAAAABJZwAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": " i++"
					},
					"BAAAAExnAAAAAAAATWcAAAAAAAAAAAAATWcAAAAAAABOZwAAAAAAAAAAAABOZwAAAAAAAE9nAAAAAAAAAAAAAE9nAAAAAAAAUGcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATGcAAAAAAABMZwAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AwAAADdnAAAAAAAAOGcAAAAAAAAAAAAAOGcAAAAAAAA6ZwAAAAAAAAAAAAA1ZwAAAAAAADVnAAAAAAAAAgAAACAg",
					"AQAAAAAAAAABAAAAN2cAAAAAAAA3ZwAAAAAAAAAAAAAAADJA"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "uin"
					},
					"AwAAADVnAAAAAAAANmcAAAAAAAAAAAAANmcAAAAAAAA3ZwAAAAAAAAAAAAA3ZwAAAAAAADhnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANWcAAAAAAAA1ZwAAAAAAAAAAAAAAADJA"
				],
				[
					379,
					3,
					"left_delete",
					null,
					"AwAAADdnAAAAAAAAN2cAAAAAAAABAAAAbjZnAAAAAAAANmcAAAAAAAABAAAAaTVnAAAAAAAANWcAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAOGcAAAAAAAA4ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAADVnAAAAAAAANmcAAAAAAAAAAAAANmcAAAAAAAA3ZwAAAAAAAAAAAAA3ZwAAAAAAADhnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANWcAAAAAAAA1ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"insert",
					{
						"characters": " i;"
					},
					"AwAAADhnAAAAAAAAOWcAAAAAAAAAAAAAOWcAAAAAAAA6ZwAAAAAAAAAAAAA6ZwAAAAAAADtnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOGcAAAAAAAA4ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					2,
					"left_delete",
					null,
					"AgAAAERnAAAAAAAARGcAAAAAAAABAAAAdENnAAAAAAAAQ2cAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAARWcAAAAAAABFZwAAAAAAAAAAAAAAAPC/"
				],
				[
					389,
					1,
					"left_delete",
					null,
					"AQAAAEJnAAAAAAAAQmcAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAQ2cAAAAAAABDZwAAAAAAAAAAAAAAAPC/"
				],
				[
					391,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BgAAAFVnAAAAAAAAVmcAAAAAAAAAAAAAVmcAAAAAAABYZwAAAAAAAAAAAABWZwAAAAAAAFZnAAAAAAAAAgAAACAgVmcAAAAAAABaZwAAAAAAAAAAAABaZwAAAAAAAFtnAAAAAAAAAAAAAFtnAAAAAAAAXGcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVWcAAAAAAABVZwAAAAAAAP///////+9/"
				],
				[
					392,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAFxnAAAAAAAAXmcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXGcAAAAAAABcZwAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"insert",
					{
						"characters": "strv"
					},
					"BAAAAF1nAAAAAAAAXmcAAAAAAAAAAAAAXmcAAAAAAABfZwAAAAAAAAAAAABfZwAAAAAAAGBnAAAAAAAAAAAAAGBnAAAAAAAAYWcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXWcAAAAAAABdZwAAAAAAAAAAAAAAAPC/"
				],
				[
					394,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAGFnAAAAAAAAY2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYWcAAAAAAABhZwAAAAAAAAAAAAAAAPC/"
				],
				[
					395,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAGJnAAAAAAAAY2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYmcAAAAAAABiZwAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					3,
					"left_delete",
					null,
					"AwAAAC1nAAAAAAAALWcAAAAAAAAEAAAAc3RydixnAAAAAAAALGcAAAAAAAABAAAAICtnAAAAAAAAK2cAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAALWcAAAAAAAAxZwAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "argv"
					},
					"BAAAACtnAAAAAAAALGcAAAAAAAAAAAAALGcAAAAAAAAtZwAAAAAAAAAAAAAtZwAAAAAAAC5nAAAAAAAAAAAAAC5nAAAAAAAAL2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAK2cAAAAAAAArZwAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAC9nAAAAAAAAMWcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAL2cAAAAAAAAvZwAAAAAAAAAAAAAAAPC/"
				],
				[
					411,
					1,
					"paste",
					null,
					"AgAAAF1nAAAAAAAAYWcAAAAAAAAAAAAAYWcAAAAAAABhZwAAAAAAAAQAAABzdHJ2",
					"AQAAAAAAAAABAAAAXWcAAAAAAABhZwAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": "\njs_free"
					},
					"CwAAAGVnAAAAAAAAZmcAAAAAAAAAAAAAZmcAAAAAAABqZwAAAAAAAAAAAABmZwAAAAAAAGZnAAAAAAAABAAAACAgICBmZwAAAAAAAGxnAAAAAAAAAAAAAGxnAAAAAAAAbWcAAAAAAAAAAAAAbWcAAAAAAABuZwAAAAAAAAAAAABuZwAAAAAAAG9nAAAAAAAAAAAAAG9nAAAAAAAAcGcAAAAAAAAAAAAAcGcAAAAAAABxZwAAAAAAAAAAAABxZwAAAAAAAHJnAAAAAAAAAAAAAHJnAAAAAAAAc2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZWcAAAAAAABlZwAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHNnAAAAAAAAdWcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAc2cAAAAAAABzZwAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAHRnAAAAAAAAdWcAAAAAAAAAAAAAdWcAAAAAAAB2ZwAAAAAAAAAAAAB2ZwAAAAAAAHdnAAAAAAAAAAAAAHdnAAAAAAAAeGcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdGcAAAAAAAB0ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					418,
					1,
					"insert",
					{
						"characters": " argv"
					},
					"BQAAAHhnAAAAAAAAeWcAAAAAAAAAAAAAeWcAAAAAAAB6ZwAAAAAAAAAAAAB6ZwAAAAAAAHtnAAAAAAAAAAAAAHtnAAAAAAAAfGcAAAAAAAAAAAAAfGcAAAAAAAB9ZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeGcAAAAAAAB4ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAH1nAAAAAAAAf2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfWcAAAAAAAB9ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAH5nAAAAAAAAf2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfmcAAAAAAAB+ZwAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIFnAAAAAAAAgmcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgWcAAAAAAACBZwAAAAAAAAAAAAAAAPC/"
				],
				[
					423,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAIJnAAAAAAAAg2cAAAAAAAAAAAAAg2cAAAAAAACJZwAAAAAAAAAAAACDZwAAAAAAAINnAAAAAAAABgAAACAgICAgIINnAAAAAAAAh2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgmcAAAAAAACCZwAAAAAAAAAAAAAAAPC/"
				],
				[
					426,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGVnAAAAAAAAZmcAAAAAAAAAAAAAhGcAAAAAAACEZwAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAZWcAAAAAAABlZwAAAAAAAP///////+9/"
				],
				[
					427,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAGZnAAAAAAAAZ2cAAAAAAAAAAAAAhWcAAAAAAACLZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZmcAAAAAAABmZwAAAAAAAAAAAAAAAPC/"
				],
				[
					428,
					1,
					"left_delete",
					null,
					"AQAAAGZnAAAAAAAAZmcAAAAAAAABAAAAew",
					"AQAAAAAAAAABAAAAZ2cAAAAAAABnZwAAAAAAAAAAAAAAAPC/"
				],
				[
					431,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFVnAAAAAAAAV2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVWcAAAAAAABVZwAAAAAAAP///////+9/"
				],
				[
					432,
					1,
					"right_delete",
					null,
					"AQAAAFZnAAAAAAAAVmcAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAVmcAAAAAAABWZwAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGdnAAAAAAAAaGcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZ2cAAAAAAABnZwAAAAAAAAAAAAAAQG1A"
				],
				[
					435,
					1,
					"wrap_block",
					{
						"begin": "{",
						"end": "}"
					},
					"AgAAAGhnAAAAAAAAaWcAAAAAAAAAAAAAh2cAAAAAAACNZwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaGcAAAAAAABoZwAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "\nargv"
					},
					"BgAAAIZnAAAAAAAAh2cAAAAAAAAAAAAAh2cAAAAAAACNZwAAAAAAAAAAAACNZwAAAAAAAI5nAAAAAAAAAAAAAI5nAAAAAAAAj2cAAAAAAAAAAAAAj2cAAAAAAACQZwAAAAAAAAAAAACQZwAAAAAAAJFnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhmcAAAAAAACGZwAAAAAAAP///////+9/"
				],
				[
					439,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJFnAAAAAAAAk2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkWcAAAAAAACRZwAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAJJnAAAAAAAAk2cAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkmcAAAAAAACSZwAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "=0;"
					},
					"AwAAAJRnAAAAAAAAlWcAAAAAAAAAAAAAlWcAAAAAAACWZwAAAAAAAAAAAACWZwAAAAAAAJdnAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlGcAAAAAAACUZwAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"left_delete",
					null,
					"AQAAAKNnAAAAAAAAo2cAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAApGcAAAAAAACkZwAAAAAAAAAAAAAAAGJA"
				],
				[
					447,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAo2cAAAAAAACjZwAAAAAAAAAAAAAAAPC/"
				],
				[
					451,
					1,
					"cut",
					null,
					"AQAAAP1mAAAAAAAA/WYAAAAAAACrAAAAdm9pZApqc19hcmd2X2ZyZWUoSlNDb250ZXh0KiBjdHgsIGludCBuLCBjaGFyKiBhcmd2W10pIHsKICBpbnQgaTsKICBmb3IoaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgIGlmKGFyZ3ZbaV0pIHsKICAgICAganNfZnJlZShjdHgsIGFyZ3ZbaV0pOwogICAgICBhcmd2W2ldID0gMDsKICAgIH0KICB9Cn0K",
					"AQAAAAAAAAABAAAA/WYAAAAAAACoZwAAAAAAAAAAAAAAAAAA"
				],
				[
					456,
					1,
					"paste",
					null,
					"AQAAAP1mAAAAAAAAQWcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/WYAAAAAAAD9ZgAAAAAAAAAAAAAAAAAA"
				],
				[
					457,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEFnAAAAAAAAQmcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQWcAAAAAAABBZwAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"left_delete",
					null,
					"AQAAAEFnAAAAAAAAQWcAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAQmcAAAAAAABCZwAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAQWcAAAAAAABBZwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/fd_set.js",
			"settings":
			{
				"buffer_size": 1139,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " const"
					},
					"BgAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " FD_SIZE"
					},
					"CAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAABMAAAAAAAAAEwAAAAAAAAABAAAARRIAAAAAAAAAEgAAAAAAAAABAAAAWhEAAAAAAAAAEQAAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "ETSIZE"
					},
					"BgAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAABcAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": " 102r4;"
					},
					"BwAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQAAAAAAAAAZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					4,
					"left_delete",
					null,
					"BAAAAB8AAAAAAAAAHwAAAAAAAAABAAAAOx4AAAAAAAAAHgAAAAAAAAABAAAANB0AAAAAAAAAHQAAAAAAAAABAAAAchwAAAAAAAAAHAAAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "24;"
					},
					"AwAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAANBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgdG9TdHJpbmcoKSB7CiAgICByZXR1cm4gYFsgJHt0aGlzLmFycmF5LmpvaW4oJywgJyl9IF1gOwogIH0KICBbU3ltYm9sLmluc3BlY3RdKCkgewogICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9TRVQoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gfD0gMSA8PCAoZmQgJiAweDcpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfQ0xSKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICY9IH4oMSA8PCAoZmQgJiAweDcpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0lTU0VUKGZkLCBzZXQpIHsKICByZXR1cm4gISEobmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmICgxIDw8IChmZCAmIDB4NykpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1pFUk8oZmQsIHNldCkgewogIGNvbnN0IGEgPSBuZXcgVWludDhBcnJheShzZXQpOwogIGNvbnN0IG4gPSBhLmxlbmd0aDsKICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSBhW2ldID0gMDsKfQoKZXhwb3J0IGRlZmF1bHQgZmRfc2V0OwoAAAAAAAAAADYEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAcHFA"
				],
				[
					31,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA2BAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpOwogIH0KfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1NFVChmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSB8PSAxIDw8IChmZCAmIDB4Nyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9DTFIoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJj0gfigxIDw8IChmZCAmIDB4NykpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfSVNTRVQoZmQsIHNldCkgewogIHJldHVybiAhIShuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICYgKDEgPDwgKGZkICYgMHg3KSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfWkVSTyhmZCwgc2V0KSB7CiAgY29uc3QgYSA9IG5ldyBVaW50OEFycmF5KHNldCk7CiAgY29uc3QgbiA9IGEubGVuZ3RoOwogIGZvcihsZXQgaSA9IDA7IGkgPCBuOyBpKyspIGFbaV0gPSAwOwp9CgpleHBvcnQgZGVmYXVsdCBmZF9zZXQ7CgAAAAAAAAAAOgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA6BAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQoKICBbU3ltYm9sLmluc3BlY3RdKCkgewogICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9TRVQoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gfD0gMSA8PCAoZmQgJiAweDcpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfQ0xSKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICY9IH4oMSA8PCAoZmQgJiAweDcpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0lTU0VUKGZkLCBzZXQpIHsKICByZXR1cm4gISEobmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmICgxIDw8IChmZCAmIDB4NykpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1pFUk8oZmQsIHNldCkgewogIGNvbnN0IGEgPSBuZXcgVWludDhBcnJheShzZXQpOwogIGNvbnN0IG4gPSBhLmxlbmd0aDsKICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSBhW2ldID0gMDsKfQoKZXhwb3J0IGRlZmF1bHQgZmRfc2V0OwoAAAAAAAAAAD4EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA+BAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQovKgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpOwogIH0qLwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmPSB+KDEgPDwgKGZkICYgMHg3KSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9JU1NFVChmZCwgc2V0KSB7CiAgcmV0dXJuICEhKG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJiAoMSA8PCAoZmQgJiAweDcpKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9aRVJPKGZkLCBzZXQpIHsKICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkoc2V0KTsKICBjb25zdCBuID0gYS5sZW5ndGg7CiAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgYVtpXSA9IDA7Cn0KCmV4cG9ydCBkZWZhdWx0IGZkX3NldDsKAAAAAAAAAABiBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABiBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgdG9TdHJpbmcoKSB7CiAgICBpZih0aGlzLmFycmF5Lmxlbmd0aD09MClyZXR1cm4gYFtdYDsKICAgIHJldHVybiBgWyAke3RoaXMuYXJyYXkuam9pbignLCAnKX0gXWA7CiAgfQoKICBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICdmZF9zZXQnOwovKgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gdGhpcy50b1N0cmluZygpOwogIH0qLwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmPSB+KDEgPDwgKGZkICYgMHg3KSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9JU1NFVChmZCwgc2V0KSB7CiAgcmV0dXJuICEhKG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJiAoMSA8PCAoZmQgJiAweDcpKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9aRVJPKGZkLCBzZXQpIHsKICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkoc2V0KTsKICBjb25zdCBuID0gYS5sZW5ndGg7CiAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgYVtpXSA9IDA7Cn0KCmV4cG9ydCBkZWZhdWx0IGZkX3NldDsKAAAAAAAAAAAqBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAqBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCiAgLyp0b1N0cmluZygpIHsKICAgIGlmKHRoaXMuYXJyYXkubGVuZ3RoPT0wKXJldHVybiBgW11gOwogICAgcmV0dXJuIGBbICR7dGhpcy5hcnJheS5qb2luKCcsICcpfSBdYDsKICB9Ki8KCiAgW1N5bWJvbC50b1N0cmluZ1RhZ10gPSAnZmRfc2V0JzsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1NFVChmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSB8PSAxIDw8IChmZCAmIDB4Nyk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9DTFIoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJj0gfigxIDw8IChmZCAmIDB4NykpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfSVNTRVQoZmQsIHNldCkgewogIHJldHVybiAhIShuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICYgKDEgPDwgKGZkICYgMHg3KSkpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfWkVSTyhmZCwgc2V0KSB7CiAgY29uc3QgYSA9IG5ldyBVaW50OEFycmF5KHNldCk7CiAgY29uc3QgbiA9IGEubGVuZ3RoOwogIGZvcihsZXQgaSA9IDA7IGkgPCBuOyBpKyspIGFbaV0gPSAwOwp9CgpleHBvcnQgZGVmYXVsdCBmZF9zZXQ7CgAAAAAAAAAAhQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAACFBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CiAgCi8qICB0b1N0cmluZygpIHsKICAgIGlmKHRoaXMuYXJyYXkubGVuZ3RoPT0wKXJldHVybiBgW11gOwogICAgcmV0dXJuIGBbICR7dGhpcy5hcnJheS5qb2luKCcsICcpfSBdYDsKICB9CiovCiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkgeyByZXR1cm4gJ2ZkX3NldCc7IH0KCgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gaW5zcGVjdCh0aGlzLmFycmF5LCB7Y29sb3I6IHRydWV9KTsKICB9Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9TRVQoZmQsIHNldCkgewogIG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gfD0gMSA8PCAoZmQgJiAweDcpOwp9CgpleHBvcnQgZnVuY3Rpb24gRkRfQ0xSKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdICY9IH4oMSA8PCAoZmQgJiAweDcpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0lTU0VUKGZkLCBzZXQpIHsKICByZXR1cm4gISEobmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmICgxIDw8IChmZCAmIDB4NykpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX1pFUk8oZmQsIHNldCkgewogIGNvbnN0IGEgPSBuZXcgVWludDhBcnJheShzZXQpOwogIGNvbnN0IG4gPSBhLmxlbmd0aDsKICBmb3IobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSBhW2ldID0gMDsKfQoKZXhwb3J0IGRlZmF1bHQgZmRfc2V0OwoAAAAAAAAAAG4EAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABuBAAAZXhwb3J0IGNvbnN0IEZEX1NFVFNJWkUgPSAxMDI0OwoKZXhwb3J0IGNsYXNzIGZkX3NldCBleHRlbmRzIEFycmF5QnVmZmVyIHsKICBjb25zdHJ1Y3RvcigpIHsKICAgIHN1cGVyKEZEX1NFVFNJWkUgLyA4KTsKICB9CiAgZ2V0IHNpemUoKSB7CiAgICByZXR1cm4gdGhpcy5ieXRlTGVuZ3RoICogODsKICB9CiAgZ2V0IG1heGZkKCkgewogICAgY29uc3QgYSA9IHRoaXMuYXJyYXk7CiAgICByZXR1cm4gYVthLmxlbmd0aCAtIDFdOwogIH0KICBnZXQgYXJyYXkoKSB7CiAgICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkodGhpcyk7CiAgICBjb25zdCBuID0gYS5ieXRlTGVuZ3RoOwogICAgY29uc3QgciA9IFtdOwogICAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgZm9yIChsZXQgaiA9IDA7IGogPCA4OyBqKyspIGlmKGFbaV0gJiAoMSA8PCBqKSkgci5wdXNoKGkgKiA4ICsgaik7CiAgICByZXR1cm4gcjsKICB9CgogIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHsKICAgIHJldHVybiAnZmRfc2V0JzsKICB9CgogIFtTeW1ib2wuaW5zcGVjdF0oKSB7CiAgICByZXR1cm4gYFx4MWJbMTszMW1mZF9zZXRceDFiWzBtIGAgKyBpbnNwZWN0KHRoaXMuYXJyYXksIHsgY29sb3I6IHRydWUgfSk7CiAgfQp9CgpleHBvcnQgZnVuY3Rpb24gRkRfU0VUKGZkLCBzZXQpIHsKICBuZXcgVWludDhBcnJheShzZXQsIGZkID4+IDMsIDEpWzBdIHw9IDEgPDwgKGZkICYgMHg3KTsKfQoKZXhwb3J0IGZ1bmN0aW9uIEZEX0NMUihmZCwgc2V0KSB7CiAgbmV3IFVpbnQ4QXJyYXkoc2V0LCBmZCA+PiAzLCAxKVswXSAmPSB+KDEgPDwgKGZkICYgMHg3KSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9JU1NFVChmZCwgc2V0KSB7CiAgcmV0dXJuICEhKG5ldyBVaW50OEFycmF5KHNldCwgZmQgPj4gMywgMSlbMF0gJiAoMSA8PCAoZmQgJiAweDcpKSk7Cn0KCmV4cG9ydCBmdW5jdGlvbiBGRF9aRVJPKGZkLCBzZXQpIHsKICBjb25zdCBhID0gbmV3IFVpbnQ4QXJyYXkoc2V0KTsKICBjb25zdCBuID0gYS5sZW5ndGg7CiAgZm9yKGxldCBpID0gMDsgaSA8IG47IGkrKykgYVtpXSA9IDA7Cn0KCmV4cG9ydCBkZWZhdWx0IHsgRkRfU0VUU0laRSwgZmRfc2V0LCBGRF9TRVQsIEZEX0NMUiwgRkRfSVNTRVQsIEZEX1pFUk8gfTsKAAAAAAAAAABzBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.clang-format",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fd_set.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/test-socklen_t.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-socklen_t.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.prettierrc",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/bc-fd_set.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-fdset.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_location.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/usr/include/x86_64-linux-gnu/bits/syscall.h",
		"/usr/include/x86_64-linux-gnu/sys/syscall.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.c",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_inspect.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_blob.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_qjsm.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/Findpigpio.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/pigpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pigpio/README",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stringdecoder.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/README.md",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.h",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/pigpio/pigpiod_if2.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/pigpio/pigpio.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/test-gpio.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-predicate.c"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"^js_strv",
			"js_strv",
			"argv_free",
			"js_is_nullis",
			"528",
			"\"jsm*_module_lo",
			"\"js_module_lo",
			"\"js_module",
			"FD_SETSIZE",
			"struct ",
			"import_",
			"array_to",
			"LOAD_MOD",
			"path;",
			"\"js_eval",
			"import_def",
			"import",
			"imp->",
			"dbuf_",
			"putstr",
			"va_start",
			"^dbuf_",
			", Dyn",
			"LOAD_MODULE",
			"\"loadMod",
			"^js_module",
			"js_module",
			"module_import",
			"import_name",
			"LIB_MOD",
			"syscallerr",
			"syscaller",
			"syscallerr",
			"evalbin",
			"JS_CONSTANT",
			"lookupModule",
			"compile_mo",
			"JS_CGETSET_MAGIC_DEF",
			"cxt,",
			"JS_DupValue.*TAG_MODULE",
			"modules_obj",
			"js_modules_entries",
			"$",
			"\"moduleList",
			"\"module",
			"basename",
			"_const",
			"_constructor",
			"if((def = js_module_get(ctx, argv[0])))",
			"GET_MODULE_NAME",
			"namestr",
			"module_name",
			"[^a-z0-9_]module_(ns|name|func|exports)",
			"module_(ns|name|func|exports)",
			"this_val",
			"this_vakl",
			"JS_DefineProp",
			"^js_module",
			"filename",
			"JSValue\\)",
			"^static ",
			"module_loader_so",
			"JSModuleDef",
			"#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\\n*",
			"js_eval_file",
			"jsm*_eval_buf",
			"jsm_eval",
			", ",
			"[^a-z0-9_]module_[a-z]+",
			"[^a-z0-9]module_[a-z]+",
			"module_[a-z]+",
			"module_name",
			"filename",
			"module_",
			"filename",
			"module_[a-z0-9_]+",
			"module_[a-z0-9_]\\+",
			"module_[a-z0-9_]*;",
			"module_[a-z]*",
			"module_name",
			"jsm_module_loader_path",
			"jsm_normalize_module",
			"jsm_module_loader_so",
			"module_loader",
			"^js_module",
			"jsm_module_loader",
			"jsm_module_loader_path",
			"sab_",
			"JSSABHeader",
			"jsm_eval_file",
			"jsm_eval_buf",
			".jsm_[a-z0-9_]*\\(",
			".jsm_",
			" jsm_",
			"jsm_",
			"jsm*_load_file",
			"jsm_load_script",
			"load_script",
			"jsm_load_script",
			"eval_script",
			"js_eval_script",
			"jsm_eval",
			"jsm_find_module",
			"js_default_module_path",
			"extern",
			"ext",
			"extern",
			"extern ",
			"jsm_eval_file",
			"js_eval_file",
			"jsm_eval_file",
			"jsm_load_module",
			"jsm_load_script",
			"jsm_eval_str",
			"jsm_module_list",
			"default_module",
			"jsm_default_module",
			"jsm_find_module",
			"jsm_module_get",
			"jsm_module_list",
			"jsm*_module_find",
			"js_module_exports",
			"JSValue\\)",
			"js_module_search",
			"module_expo",
			"js_module_sea",
			"jsm_module_find",
			"module_find"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"imp.",
			"ctx,",
			"",
			"JSValueConst)",
			"",
			"jsm_module_loader",
			"js_module_loader_so",
			"js_eval_file",
			"js_eval_buf",
			"js_load_script",
			"jsm_eval_script",
			"js_eval_file",
			"js_load_module",
			"js_eval_str",
			"js_module_get",
			"JSValueConst)",
			"js_module_search",
			"jsm_module_find",
			"js_module_find",
			"js_load_",
			"js_load_module",
			"js_eval_buf",
			"js_load_script",
			"js_std_dump_error",
			"js_module_exports",
			"fdset",
			" ",
			"js_input_buffer",
			"\\1(\\2, sock",
			"\\1(",
			"",
			"JS_CGETSET_MAGIC_DEF",
			"off.",
			"} else if(",
			"port",
			".buf",
			"'",
			"",
			"socket_send",
			"0x00",
			" 0x00,",
			"0x78,",
			"0x78",
			" 0x00,",
			"0x78",
			"JS_CGETSET_MAGIC_DEF",
			"socket_syscalls_size",
			"js_syscallerror_get, js_syscallerror_set,",
			"js_socket_get, js_socket_set, ",
			"e",
			"js_syscallerror_proto_funcs",
			"s.fd",
			"js_socket_proto_funcs",
			"\"",
			"SYSCALLERROR_VALUEOF",
			"s, ",
			"JS_SOCKETCALL",
			"JS_SOCKETCALL_RETURN",
			"js_socket_data2(ctx",
			"sa->family",
			"QUICKJS_SYSCALLERROR_H",
			"data2",
			"js_syscallerror_data2",
			"QUICKJS_MISC_H",
			"js_sockets_defines",
			"js_sockaddr_data2",
			"js_sockaddr_data",
			"SockAddr",
			"struct sockaddr*",
			"sockets_init",
			"argv[i]",
			"pigpio",
			"CHAR_UTILS",
			"${util_SOURCES}",
			"ol.",
			"range_from",
			".range.length",
			".range.offset",
			"input_buffer_length(in)",
			"input_buffer_data(in)",
			"blob",
			"location->vec",
			"location",
			"Location",
			"r->data\\1",
			" this.fs.",
			"stringdecoder",
			"js_stringdecoder_set",
			"js_stringdecoder_get",
			"stringdecoder",
			"\\1if(gpio->debug) fprintf",
			"struct gpio",
			"struct GPIO",
			"struct GPIO*",
			"ctx->rt",
			"",
			": ",
			"\"",
			"ret = \\1;",
			"->errnum",
			"(",
			"error",
			"JS_NewInt32",
			"",
			",",
			"left, right",
			"predicate_nextarg(ctx, &args)",
			"predicate_nextarg(ctx, &args),predicate_nextarg(ctx, &args))",
			"predicate_argument_shift(ctx, &args)",
			"js_arguments_shift(&args)",
			"",
			"ret = PRECEDENCE_",
			"args",
			"",
			"dbuf",
			": left",
			"pred",
			"args->",
			"r",
			"predicate_value",
			"",
			"'x'",
			"0",
			"\\1this.last_cmd",
			"\\1this.cmd",
			"level",
			"cmd",
			"  "
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7119,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									30,
									44
								],
								[
									346,
									354
								],
								[
									615,
									629
								],
								[
									772,
									779
								],
								[
									990,
									997
								],
								[
									1117,
									1140
								],
								[
									1548,
									1569
								],
								[
									1954,
									1970
								],
								[
									2620,
									2636
								],
								[
									2805,
									2819
								],
								[
									3427,
									3442
								],
								[
									3884,
									3899
								],
								[
									4170,
									4184
								],
								[
									4557,
									4573
								],
								[
									4933,
									4947
								],
								[
									5282,
									5295
								],
								[
									5617,
									5629
								],
								[
									6078,
									6094
								],
								[
									6260,
									6281
								],
								[
									6472,
									6487
								],
								[
									6652,
									6667
								],
								[
									6880,
									6896
								],
								[
									7472,
									7489
								],
								[
									7664,
									7680
								],
								[
									8595,
									8608
								],
								[
									8820,
									8839
								],
								[
									9047,
									9065
								],
								[
									9532,
									9547
								],
								[
									9727,
									9743
								],
								[
									10155,
									10176
								],
								[
									10352,
									10371
								],
								[
									11082,
									11098
								],
								[
									12237,
									12249
								],
								[
									12460,
									12479
								],
								[
									12617,
									12632
								],
								[
									12922,
									12937
								],
								[
									13110,
									13128
								],
								[
									13336,
									13359
								],
								[
									13614,
									13640
								],
								[
									13935,
									13964
								],
								[
									14372,
									14398
								],
								[
									14688,
									14712
								],
								[
									14918,
									14943
								],
								[
									15225,
									15253
								],
								[
									15647,
									15671
								],
								[
									15956,
									15981
								],
								[
									16263,
									16288
								],
								[
									16535,
									16557
								],
								[
									16760,
									16785
								],
								[
									17038,
									17066
								],
								[
									17376,
									17401
								],
								[
									17908,
									17919
								],
								[
									18003,
									18017
								],
								[
									18089,
									18101
								],
								[
									18228,
									18241
								],
								[
									18424,
									18437
								],
								[
									18576,
									18594
								],
								[
									18785,
									18805
								],
								[
									18991,
									19011
								],
								[
									19204,
									19215
								],
								[
									19354,
									19369
								],
								[
									19721,
									19742
								],
								[
									19904,
									19918
								],
								[
									20078,
									20090
								],
								[
									20247,
									20262
								],
								[
									20425,
									20441
								],
								[
									20660,
									20674
								],
								[
									20754,
									20765
								],
								[
									21006,
									21022
								],
								[
									21238,
									21259
								],
								[
									21439,
									21461
								],
								[
									21673,
									21687
								],
								[
									21756,
									21779
								],
								[
									22020,
									22033
								],
								[
									22244,
									22262
								],
								[
									22441,
									22460
								],
								[
									22763,
									22783
								],
								[
									22976,
									22989
								],
								[
									23391,
									23405
								],
								[
									23566,
									23583
								],
								[
									23808,
									23826
								],
								[
									24344,
									24360
								],
								[
									24486,
									24508
								],
								[
									24594,
									24604
								],
								[
									24605,
									24618
								],
								[
									24888,
									24905
								],
								[
									25154,
									25172
								],
								[
									26026,
									26039
								],
								[
									26295,
									26309
								],
								[
									28207,
									28222
								],
								[
									28493,
									28506
								],
								[
									29259,
									29274
								],
								[
									30699,
									30717
								],
								[
									30864,
									30878
								],
								[
									31080,
									31095
								],
								[
									31244,
									31260
								],
								[
									31475,
									31489
								],
								[
									31629,
									31643
								],
								[
									31896,
									31912
								],
								[
									32084,
									32099
								],
								[
									32313,
									32323
								],
								[
									32517,
									32528
								],
								[
									32634,
									32648
								],
								[
									32843,
									32854
								],
								[
									32950,
									32959
								],
								[
									33056,
									33070
								],
								[
									33533,
									33548
								],
								[
									33609,
									33625
								],
								[
									34147,
									34165
								],
								[
									34936,
									34950
								],
								[
									35159,
									35176
								],
								[
									35692,
									35705
								],
								[
									35810,
									35822
								],
								[
									36107,
									36123
								],
								[
									36491,
									36511
								],
								[
									37196,
									37215
								],
								[
									38192,
									38205
								],
								[
									38537,
									38551
								],
								[
									39038,
									39057
								],
								[
									40144,
									40158
								],
								[
									40429,
									40453
								],
								[
									40874,
									40900
								],
								[
									41287,
									41303
								],
								[
									42192,
									42211
								],
								[
									43549,
									43566
								],
								[
									44087,
									44110
								],
								[
									44344,
									44353
								],
								[
									44574,
									44583
								],
								[
									44805,
									44820
								],
								[
									45004,
									45016
								],
								[
									45194,
									45207
								],
								[
									45402,
									45416
								],
								[
									45598,
									45612
								],
								[
									45994,
									46008
								],
								[
									46210,
									46233
								],
								[
									46448,
									46473
								],
								[
									46702,
									46711
								],
								[
									47011,
									47038
								],
								[
									47120,
									47146
								],
								[
									47336,
									47355
								],
								[
									47631,
									47644
								],
								[
									47778,
									47789
								],
								[
									47979,
									47994
								],
								[
									48153,
									48173
								],
								[
									48284,
									48305
								],
								[
									48420,
									48435
								],
								[
									48725,
									48737
								],
								[
									48933,
									48941
								],
								[
									48942,
									48958
								],
								[
									49143,
									49167
								],
								[
									49306,
									49330
								],
								[
									49699,
									49724
								],
								[
									49982,
									49996
								],
								[
									50511,
									50525
								],
								[
									51161,
									51172
								],
								[
									51825,
									51836
								],
								[
									52113,
									52123
								],
								[
									52262,
									52282
								],
								[
									52367,
									52382
								],
								[
									52513,
									52526
								],
								[
									52621,
									52636
								],
								[
									52895,
									52907
								],
								[
									53074,
									53085
								],
								[
									53337,
									53347
								],
								[
									53518,
									53537
								],
								[
									53927,
									53946
								],
								[
									54032,
									54047
								],
								[
									54224,
									54244
								]
							],
							"symlist":
							[
								"\tⓂ  _ISOC99_SOURCE … — macro object",
								"\tⓂ  INFINITY … — macro object",
								"—Ⓕ– atomic_add_int ( ) { … } — function",
								"—Ⓕ– time_us ( ) { … } — function",
								"—Ⓕ– time_us ( ) { … } — function",
								"—Ⓕ– regexp_flags_fromstring ( ) { … } — function",
								"—Ⓕ– regexp_flags_tostring ( ) { … } — function",
								"—Ⓕ– regexp_from_argv ( ) { … } — function",
								"—Ⓕ– regexp_from_dbuf ( ) { … } — function",
								"—Ⓕ– regexp_compile ( ) { … } — function",
								"—Ⓕ– regexp_to_value ( ) { … } — function",
								"—Ⓕ– js_array_length ( ) { … } — function",
								"—Ⓕ– js_array_clear ( ) { … } — function",
								"—Ⓕ– js_array_to_argv ( ) { … } — function",
								"—Ⓕ– js_array_copys ( ) { … } — function",
								"—Ⓕ– js_strv_copys ( ) { … } — function",
								"—Ⓕ– js_atom_dump ( ) { … } — function",
								"—Ⓕ– js_atom_tobinary ( ) { … } — function",
								"—Ⓕ– js_atom_to_cstringlen ( ) { … } — function",
								"—Ⓕ– js_atom_toint32 ( ) { … } — function",
								"—Ⓕ– js_atom_toint64 ( ) { … } — function",
								"—Ⓕ– js_atom_is_index ( ) { … } — function",
								"—Ⓕ– js_atom_is_length ( ) { … } — function",
								"—Ⓕ– js_function_name ( ) { … } — function",
								"—Ⓕ– js_global_get ( ) { … } — function",
								"—Ⓕ– js_global_prototype ( ) { … } — function",
								"—Ⓕ– js_iterator_method ( ) { … } — function",
								"—Ⓕ– js_iterator_new ( ) { … } — function",
								"—Ⓕ– js_iterator_next ( ) { … } — function",
								"—Ⓕ– js_object_constructor ( ) { … } — function",
								"—Ⓕ– js_object_classname ( ) { … } — function",
								"—Ⓕ– js_object_equals ( ) { … } — function",
								"—Ⓕ– js_object_is ( ) { … } — function",
								"—Ⓕ– js_object_construct ( ) { … } — function",
								"—Ⓕ– js_object_error ( ) { … } — function",
								"—Ⓕ– js_object_stack ( ) { … } — function",
								"—Ⓕ– js_has_propertystr ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_cstring ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_cstringlen ( ) { … } — function",
								"—Ⓕ– js_get_propertyint_cstring ( ) { … } — function",
								"—Ⓕ– js_get_propertyint_int32 ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_string ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_stringlen ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_int32 ( ) { … } — function",
								"—Ⓕ– js_get_propertystr_uint64 ( ) { … } — function",
								"—Ⓕ– js_set_propertyint_string ( ) { … } — function",
								"—Ⓕ– js_set_propertyint_int ( ) { … } — function",
								"—Ⓕ– js_set_propertystr_string ( ) { … } — function",
								"—Ⓕ– js_set_propertystr_stringlen ( ) { … } — function",
								"—Ⓕ– js_get_propertydescriptor ( ) { … } — function",
								"—Ⓕ– js_class_id ( ) { … } — function",
								"—Ⓕ– js_class_newid ( ) { … } — function",
								"—Ⓕ– js_class_get ( ) { … } — function",
								"—Ⓕ– js_class_atom ( ) { … } — function",
								"—Ⓕ– js_class_name ( ) { … } — function",
								"—Ⓕ– js_object_tostring ( ) { … } — function",
								"—Ⓕ– js_function_tostring ( ) { … } — function",
								"—Ⓕ– js_function_isnative ( ) { … } — function",
								"—Ⓕ– js_is_input ( ) { … } — function",
								"—Ⓕ– js_propenum_cmp ( ) { … } — function",
								"—Ⓕ– js_propertyenums_free ( ) { … } — function",
								"—Ⓕ– js_strv_free_n ( ) { … } — function",
								"—Ⓕ– js_strv_free ( ) { … } — function",
								"—Ⓕ– js_strv_free_rt ( ) { … } — function",
								"—Ⓕ– js_strv_to_array ( ) { … } — function",
								"—Ⓕ– js_strv_length ( ) { … } — function",
								"—Ⓕ– js_strv_dup ( ) { … } — function",
								"—Ⓕ– js_intv_to_array ( ) { … } — function",
								"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
								"—Ⓕ– js_symbol_static_value ( ) { … } — function",
								"—Ⓕ– js_symbol_ctor ( ) { … } — function",
								"—Ⓕ– js_symbol_invoke_static ( ) { … } — function",
								"—Ⓕ– js_symbol_for ( ) { … } — function",
								"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
								"—Ⓕ– js_symbol_to_string ( ) { … } — function",
								"—Ⓕ– js_symbol_to_cstring ( ) { … } — function",
								"—Ⓕ– js_values_dup ( ) { … } — function",
								"—Ⓕ– js_values_free ( ) { … } — function",
								"—Ⓕ– js_values_toarray ( ) { … } — function",
								"—Ⓕ– js_value_type_name ( ) { … } — function",
								"—Ⓕ– js_value_typestr ( ) { … } — function",
								"—Ⓕ– js_value_has_ref_count ( ) { … } — function",
								"—Ⓒ– value_mask { … } ; — type",
								"—Ⓕ– js_value_type ( ) { … } — function",
								"—Ⓕ– js_value_type_get ( ) { … } — function",
								"—Ⓕ– js_value_type_flag ( ) { … } — function",
								"—Ⓕ– js_value_free ( ) { … } — function",
								"—Ⓕ– js_value_clone ( ) { … } — function",
								"—Ⓕ– js_value_fwrite ( ) { … } — function",
								"—Ⓕ– js_value_dump ( ) { … } — function",
								"—Ⓕ– js_value_equals ( ) { … } — function",
								"—Ⓕ– js_value_from_char ( ) { … } — function",
								"—Ⓕ– js_value_print ( ) { … } — function",
								"—Ⓕ– js_value_tosize ( ) { … } — function",
								"—Ⓕ– js_value_free_rt ( ) { … } — function",
								"—Ⓕ– js_cstring_ptr ( ) { … } — function",
								"—Ⓕ– js_cstring_dup ( ) { … } — function",
								"—Ⓕ– js_cstring_value ( ) { … } — function",
								"—Ⓕ– js_cstring_dump ( ) { … } — function",
								"—Ⓕ– js_map_new ( ) { … } — function",
								"—Ⓕ– module_name ( ) { … } — function",
								"—Ⓕ– module_namestr ( ) { … } — function",
								"—Ⓕ– module_func ( ) { … } — function",
								"—Ⓕ– module_ns ( ) { … } — function",
								"—Ⓕ– module_exports ( ) { … } — function",
								"—Ⓕ– js_modules_list ( ) { … } — function",
								"—Ⓕ– js_modules_array ( ) { … } — function",
								"—Ⓕ– js_modules_entries ( ) { … } — function",
								"—Ⓕ– js_modules_map ( ) { … } — function",
								"—Ⓕ– js_modules_object ( ) { … } — function",
								"—Ⓕ– module_object ( ) { … } — function",
								"—Ⓕ– module_entry ( ) { … } — function",
								"—Ⓕ– js_module_search ( ) { … } — function",
								"—Ⓕ– js_module_search_ext ( ) { … } — function",
								"—Ⓕ– js_module_normalize ( ) { … } — function",
								"—Ⓕ– js_module_def ( ) { … } — function",
								"—Ⓕ– js_module_find ( ) { … } — function",
								"—Ⓕ– js_import_directive ( ) { … } — function",
								"—Ⓕ– js_import_eval ( ) { … } — function",
								"—Ⓕ– js_module_import_default ( ) { … } — function",
								"—Ⓕ– js_module_import_namespace ( ) { … } — function",
								"—Ⓕ– js_module_import ( ) { … } — function",
								"—Ⓕ– js_module_loader_so ( ) { … } — function",
								"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
								"—Ⓕ– js_is_sharedarraybuffer ( ) { … } — function",
								"—Ⓕ– js_is_map ( ) { … } — function",
								"—Ⓕ– js_is_set ( ) { … } — function",
								"—Ⓕ– js_is_generator ( ) { … } — function",
								"—Ⓕ– js_is_regexp ( ) { … } — function",
								"—Ⓕ– js_is_promise ( ) { … } — function",
								"—Ⓕ– js_is_dataview ( ) { … } — function",
								"—Ⓕ– js_is_iterable ( ) { … } — function",
								"—Ⓕ– js_is_iterator ( ) { … } — function",
								"—Ⓕ– js_typedarray_prototype ( ) { … } — function",
								"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
								"—Ⓕ– js_invoke ( ) { … } — function",
								"—Ⓕ– js_symbol_operatorset_value ( ) { … } — function",
								"—Ⓕ– js_symbol_operatorset_atom ( ) { … } — function",
								"—Ⓕ– js_operators_create ( ) { … } — function",
								"—Ⓕ– js_number_new ( ) { … } — function",
								"—Ⓕ– js_date_new ( ) { … } — function",
								"—Ⓕ– js_date_from_ms ( ) { … } — function",
								"—Ⓕ– js_date_from_time_ns ( ) { … } — function",
								"—Ⓕ– js_date_from_timespec ( ) { … } — function",
								"—Ⓕ– js_date_gettime ( ) { … } — function",
								"—Ⓕ– js_date_time ( ) { … } — function",
								"—Ⓒ– timespec { … } ; — type",
								"—Ⓕ– js_date_timespec ( ) { … } — function",
								"—Ⓕ– js_arraybuffer_freevalue ( ) { … } — function",
								"—Ⓕ– js_arraybuffer_fromvalue ( ) { … } — function",
								"—Ⓕ– js_arraybuffer_bytelength ( ) { … } — function",
								"—Ⓕ– js_eval_module ( ) { … } — function",
								"—Ⓕ– js_eval_binary ( ) { … } — function",
								"—Ⓕ– js_eval_buf ( ) { … } — function",
								"—Ⓕ– js_eval_str ( ) { … } — function",
								"—Ⓕ– js_time_ms ( ) { … } — function",
								"—Ⓕ– js_interrupt_handler ( ) { … } — function",
								"—Ⓕ– js_timer_unlink ( ) { … } — function",
								"—Ⓕ– js_timer_free ( ) { … } — function",
								"—Ⓕ– js_call_handler ( ) { … } — function",
								"—Ⓕ– js_sab_alloc ( ) { … } — function",
								"—Ⓕ– js_sab_free ( ) { … } — function",
								"—Ⓕ– js_sab_dup ( ) { … } — function",
								"—Ⓕ– js_new_message_pipe ( ) { … } — function",
								"—Ⓕ– js_dup_message_pipe ( ) { … } — function",
								"—Ⓕ– js_free_message ( ) { … } — function",
								"—Ⓕ– js_free_message_pipe ( ) { … } — function"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 3,
							"tabs_extra_last_activated": 1631928387.66,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1683.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "utils.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 54807,
						"regions":
						{
						},
						"selection":
						[
							[
								39852,
								39852
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631931163.29,
							"tabs_extra_last_activated_sheet_index": 0,
							"tabs_extra_moving":
							[
								4,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 26639.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "char-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7758,
						"regions":
						{
						},
						"selection":
						[
							[
								850,
								850
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631927803.67,
							"tabs_extra_last_activated_sheet_index": 1,
							"tabs_extra_moving":
							[
								4,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "qjsm.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 28085,
						"regions":
						{
						},
						"selection":
						[
							[
								14400,
								14400
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631928378.41,
							"tabs_extra_last_activated_sheet_index": 2,
							"tabs_extra_moving":
							[
								4,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9214.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 31190,
						"regions":
						{
						},
						"selection":
						[
							[
								28674,
								28679
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631928376.88,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 15096.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "lib/fd_set.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1139,
						"regions":
						{
							"col_DD0000FF":
							{
								"flags": 16,
								"regions":
								[
									[
										556,
										566
									]
								],
								"scope": "col_DD0000FF"
							},
							"col_DD0000FF_icon":
							{
								"flags": 16,
								"icon": "Packages/User/Color Highlight.cache/col_DD0000FF_circle.png",
								"regions":
								[
									[
										544,
										544
									]
								],
								"scope": "col_gutter"
							}
						},
						"selection":
						[
							[
								92,
								92
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1631927629.35,
							"tabs_extra_last_activated_sheet_index": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.8,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 68.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"test_loca",
				"tests/test_location.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				".clang-fo",
				".clang-format"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"buff",
				"buffer-utils.c"
			],
			[
				"buffer-util",
				"buffer-utils.c"
			],
			[
				"buffer-utils.c",
				"buffer-utils.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quickjs-so",
				"quickjs-sockets.c"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"quickjs-insp",
				"quickjs-inspect.c"
			],
			[
				"test_soc",
				"tests/test_sockets.js"
			],
			[
				"",
				"CMakeLists.txt"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"test_qjsm",
				"tests/test_qjsm.js"
			],
			[
				"buffer-tu",
				"buffer-utils.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"repl.",
				"lib/repl.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"quickjs-blo",
				"quickjs-blob.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"test_mis",
				"tests/test_misc.js"
			],
			[
				"test_blob",
				"tests/test_blob.js"
			],
			[
				"test_string",
				"tests/test_stringdecoder.js"
			],
			[
				"test_str",
				"tests/test_stringdecoder.js"
			],
			[
				"quickjs-blb",
				"quickjs-blob.h"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"ringbuffer.h",
				"ringbuffer.h"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjsmo",
				"cmake/QuickJSModule.cmake"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			],
			[
				"builtin_dum",
				"src/builtin/builtin_dump.c"
			],
			[
				"h_main",
				"src/sh/sh_main.c"
			],
			[
				"parse_cha",
				"src/parse/parse_chartable.c"
			],
			[
				"debug.h",
				"src/debug.h"
			],
			[
				"exec_c",
				"src/exec/exec_command.c"
			],
			[
				"eval.h",
				"src/eval.h"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"filesys",
				"lib/filesystem.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
