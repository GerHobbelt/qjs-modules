{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"js_sys",
				"js_syscallerror_data"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"JS_New",
				"JS_NewInt32"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "  Ⓜ  _GNU_SOURCE … — macro object\n—Ⓜ– max ( ) … — macro \n—Ⓜ– min ( ) … — macro \n—Ⓒ– pcg_state_setseq_64 { … } ; — type\n  Ⓣ  pcg32_random_t ; — typedef\n—Ⓕ– pcg32_random_r ( ) { … } — \n—Ⓕ– pcg32_random ( ) { … } — \n—Ⓕ– pcg32_init_state ( ) { … } — \n—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — \n—Ⓕ– get_error ( ) { … } — \n—Ⓕ– find_error ( ) { … } — \n—Ⓕ– js_bytecode_free_func ( ) { … } — \n—Ⓕ– js_string_free_func ( ) { … } — \n—Ⓕ– js_arraybuffer_free_func ( ) { … } — \n—Ⓒ– OffsetLength { … } ; — type\n  Ⓣ  OffsetLength ; — typedef\n—Ⓕ– get_offset_length ( ) { … } — \n  Ⓣ  SyscallError ; — typedef\n—Ⓕ– js_syscallerror_data ( ) { … } — \n—Ⓕ– js_syscallerror_constructor ( ) { … } — \n—Ⓕ– js_syscallerror_new ( ) { … } — \n—Ⓕ– js_syscallerror_throw ( ) { … } — \n—Ⓕ– js_syscallerror_dump ( ) { … } — \n—Ⓕ– js_syscallerror_method ( ) { … } — \n—Ⓕ– js_syscallerror_inspect ( ) { … } — \n—Ⓕ– js_syscallerror_get ( ) { … } — \n—Ⓕ– js_syscallerror_finalizer ( ) { … } — \n—Ⓕ– js_misc_tostring ( ) { … } — \n—Ⓕ– js_misc_topointer ( ) { … } — \n—Ⓕ– js_misc_toarraybuffer ( ) { … } — \n—Ⓕ– js_misc_duparraybuffer ( ) { … } — \n—Ⓕ– js_misc_resizearraybuffer ( ) { … } — \n—Ⓕ– js_misc_concatarraybuffer ( ) { … } — \n—Ⓕ– js_misc_getperformancecounter ( ) { … } — \n—Ⓕ– js_misc_proclink ( ) { … } — \n—Ⓕ– js_misc_procread ( ) { … } — \n—Ⓕ– js_misc_getprototypechain ( ) { … } — \n—Ⓕ– js_misc_hrtime ( ) { … } — \n—Ⓕ– js_misc_fnmatch ( ) { … } — \n—Ⓕ– js_misc_uname ( ) { … } — \n—Ⓕ– js_misc_btoa ( ) { … } — \n—Ⓕ– js_misc_atob ( ) { … } — \n—Ⓕ– js_misc_compile_file ( ) { … } — \n—Ⓕ– js_misc_write_object ( ) { … } — \n—Ⓕ– js_misc_read_object ( ) { … } — \n—Ⓕ– js_misc_getx ( ) { … } — \n—Ⓕ– js_misc_valuetype ( ) { … } — \n—Ⓕ– js_misc_evalbinary ( ) { … } — \n—Ⓕ– js_misc_opcode_array ( ) { … } — \n—Ⓕ– js_misc_opcode_object ( ) { … } — \n—Ⓕ– js_misc_opcodes ( ) { … } — \n—Ⓕ– js_misc_get_bytecode ( ) { … } — \n—Ⓕ– js_misc_atom ( ) { … } — \n—Ⓕ– js_misc_classid ( ) { … } — \n—Ⓕ– js_misc_bitfield_to_array ( ) { … } — \n—Ⓕ– js_misc_array_to_bitfield ( ) { … } — \n—Ⓕ– js_misc_random ( ) { … } — \n—Ⓕ– js_misc_init ( ) { … } — \n  Ⓜ  JS_INIT_MODULE … — macro object\n  Ⓜ  JS_INIT_MODULE … — macro object",
			"settings":
			{
				"buffer_size": 2150,
				"line_ending": "Unix",
				"name": "𝌆 Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					245,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								262,
								265
							],
							[
								304,
								307
							],
							[
								690,
								709
							],
							[
								737,
								751
							],
							[
								863,
								877
							],
							[
								1186,
								1198
							],
							[
								1262,
								1278
							],
							[
								1346,
								1379
							],
							[
								3921,
								3930
							],
							[
								4044,
								4054
							],
							[
								4229,
								4250
							],
							[
								4331,
								4350
							],
							[
								4482,
								4506
							],
							[
								4645,
								4657
							],
							[
								4698,
								4710
							],
							[
								4733,
								4750
							],
							[
								5733,
								5745
							],
							[
								5762,
								5782
							],
							[
								5929,
								5956
							],
							[
								7269,
								7288
							],
							[
								8191,
								8212
							],
							[
								8358,
								8378
							],
							[
								8884,
								8906
							],
							[
								9389,
								9412
							],
							[
								10335,
								10354
							],
							[
								11951,
								11976
							],
							[
								12316,
								12332
							],
							[
								12982,
								12999
							],
							[
								13531,
								13552
							],
							[
								14070,
								14092
							],
							[
								14761,
								14786
							],
							[
								15556,
								15581
							],
							[
								16255,
								16284
							],
							[
								16523,
								16539
							],
							[
								17463,
								17479
							],
							[
								18569,
								18594
							],
							[
								19010,
								19024
							],
							[
								19832,
								19847
							],
							[
								20318,
								20331
							],
							[
								20925,
								20937
							],
							[
								21344,
								21356
							],
							[
								21772,
								21792
							],
							[
								22521,
								22541
							],
							[
								22880,
								22899
							],
							[
								23119,
								23131
							],
							[
								25035,
								25052
							],
							[
								25650,
								25668
							],
							[
								26760,
								26780
							],
							[
								27241,
								27262
							],
							[
								27736,
								27751
							],
							[
								28319,
								28339
							],
							[
								28791,
								28803
							],
							[
								29509,
								29524
							],
							[
								31027,
								31052
							],
							[
								31591,
								31616
							],
							[
								32794,
								32808
							],
							[
								37332,
								37344
							],
							[
								38374,
								38388
							],
							[
								38418,
								38432
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓜ– max ( ) … — macro function",
							"—Ⓜ– min ( ) … — macro function",
							"—Ⓒ– pcg_state_setseq_64 { … } ; — type",
							" Ⓣ  pcg32_random_t ; — typedef",
							"—Ⓕ– pcg32_random_r ( ) { … } — function",
							"—Ⓕ– pcg32_random ( ) { … } — function",
							"—Ⓕ– pcg32_init_state ( ) { … } — function",
							"—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — function",
							"—Ⓕ– get_error ( ) { … } — function",
							"—Ⓕ– find_error ( ) { … } — function",
							"—Ⓕ– js_bytecode_free_func ( ) { … } — function",
							"—Ⓕ– js_string_free_func ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_free_func ( ) { … } — function",
							"—Ⓒ– OffsetLength { … } ; — type",
							" Ⓣ  OffsetLength ; — typedef",
							"—Ⓕ– get_offset_length ( ) { … } — function",
							" Ⓣ  SyscallError ; — typedef",
							"—Ⓕ– js_syscallerror_data ( ) { … } — function",
							"—Ⓕ– js_syscallerror_constructor ( ) { … } — function",
							"—Ⓕ– js_syscallerror_new ( ) { … } — function",
							"—Ⓕ– js_syscallerror_throw ( ) { … } — function",
							"—Ⓕ– js_syscallerror_dump ( ) { … } — function",
							"—Ⓕ– js_syscallerror_method ( ) { … } — function",
							"—Ⓕ– js_syscallerror_inspect ( ) { … } — function",
							"—Ⓕ– js_syscallerror_get ( ) { … } — function",
							"—Ⓕ– js_syscallerror_finalizer ( ) { … } — function",
							"—Ⓕ– js_misc_tostring ( ) { … } — function",
							"—Ⓕ– js_misc_topointer ( ) { … } — function",
							"—Ⓕ– js_misc_toarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_duparraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_resizearraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_concatarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_getperformancecounter ( ) { … } — function",
							"—Ⓕ– js_misc_proclink ( ) { … } — function",
							"—Ⓕ– js_misc_procread ( ) { … } — function",
							"—Ⓕ– js_misc_getprototypechain ( ) { … } — function",
							"—Ⓕ– js_misc_hrtime ( ) { … } — function",
							"—Ⓕ– js_misc_fnmatch ( ) { … } — function",
							"—Ⓕ– js_misc_uname ( ) { … } — function",
							"—Ⓕ– js_misc_btoa ( ) { … } — function",
							"—Ⓕ– js_misc_atob ( ) { … } — function",
							"—Ⓕ– js_misc_compile_file ( ) { … } — function",
							"—Ⓕ– js_misc_write_object ( ) { … } — function",
							"—Ⓕ– js_misc_read_object ( ) { … } — function",
							"—Ⓕ– js_misc_getx ( ) { … } — function",
							"—Ⓕ– js_misc_valuetype ( ) { … } — function",
							"—Ⓕ– js_misc_evalbinary ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_array ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_object ( ) { … } — function",
							"—Ⓕ– js_misc_opcodes ( ) { … } — function",
							"—Ⓕ– js_misc_get_bytecode ( ) { … } — function",
							"—Ⓕ– js_misc_atom ( ) { … } — function",
							"—Ⓕ– js_misc_classid ( ) { … } — function",
							"—Ⓕ– js_misc_bitfield_to_array ( ) { … } — function",
							"—Ⓕ– js_misc_array_to_bitfield ( ) { … } — function",
							"—Ⓕ– js_misc_random ( ) { … } — function",
							"—Ⓕ– js_misc_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAGYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAGYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					246,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								262,
								265
							],
							[
								304,
								307
							],
							[
								690,
								709
							],
							[
								737,
								751
							],
							[
								863,
								877
							],
							[
								1186,
								1198
							],
							[
								1262,
								1278
							],
							[
								1346,
								1379
							],
							[
								3921,
								3930
							],
							[
								4044,
								4054
							],
							[
								4229,
								4250
							],
							[
								4331,
								4350
							],
							[
								4482,
								4506
							],
							[
								4645,
								4657
							],
							[
								4698,
								4710
							],
							[
								4733,
								4750
							],
							[
								5733,
								5745
							],
							[
								5762,
								5782
							],
							[
								5929,
								5956
							],
							[
								7269,
								7288
							],
							[
								8191,
								8212
							],
							[
								8358,
								8378
							],
							[
								8884,
								8906
							],
							[
								9389,
								9412
							],
							[
								10335,
								10354
							],
							[
								11951,
								11976
							],
							[
								12316,
								12332
							],
							[
								12982,
								12999
							],
							[
								13531,
								13552
							],
							[
								14070,
								14092
							],
							[
								14761,
								14786
							],
							[
								15556,
								15581
							],
							[
								16255,
								16284
							],
							[
								16523,
								16539
							],
							[
								17463,
								17479
							],
							[
								18569,
								18594
							],
							[
								19010,
								19024
							],
							[
								19832,
								19847
							],
							[
								20318,
								20331
							],
							[
								20925,
								20937
							],
							[
								21344,
								21356
							],
							[
								21772,
								21792
							],
							[
								22521,
								22541
							],
							[
								22880,
								22899
							],
							[
								23119,
								23131
							],
							[
								25035,
								25052
							],
							[
								25650,
								25668
							],
							[
								26760,
								26780
							],
							[
								27241,
								27262
							],
							[
								27736,
								27751
							],
							[
								28319,
								28339
							],
							[
								28791,
								28803
							],
							[
								29509,
								29524
							],
							[
								31027,
								31052
							],
							[
								31591,
								31616
							],
							[
								32794,
								32808
							],
							[
								37332,
								37344
							],
							[
								38374,
								38388
							],
							[
								38418,
								38432
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓜ– max ( ) … — macro function",
							"—Ⓜ– min ( ) … — macro function",
							"—Ⓒ– pcg_state_setseq_64 { … } ; — type",
							" Ⓣ  pcg32_random_t ; — typedef",
							"—Ⓕ– pcg32_random_r ( ) { … } — function",
							"—Ⓕ– pcg32_random ( ) { … } — function",
							"—Ⓕ– pcg32_init_state ( ) { … } — function",
							"—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — function",
							"—Ⓕ– get_error ( ) { … } — function",
							"—Ⓕ– find_error ( ) { … } — function",
							"—Ⓕ– js_bytecode_free_func ( ) { … } — function",
							"—Ⓕ– js_string_free_func ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_free_func ( ) { … } — function",
							"—Ⓒ– OffsetLength { … } ; — type",
							" Ⓣ  OffsetLength ; — typedef",
							"—Ⓕ– get_offset_length ( ) { … } — function",
							" Ⓣ  SyscallError ; — typedef",
							"—Ⓕ– js_syscallerror_data ( ) { … } — function",
							"—Ⓕ– js_syscallerror_constructor ( ) { … } — function",
							"—Ⓕ– js_syscallerror_new ( ) { … } — function",
							"—Ⓕ– js_syscallerror_throw ( ) { … } — function",
							"—Ⓕ– js_syscallerror_dump ( ) { … } — function",
							"—Ⓕ– js_syscallerror_method ( ) { … } — function",
							"—Ⓕ– js_syscallerror_inspect ( ) { … } — function",
							"—Ⓕ– js_syscallerror_get ( ) { … } — function",
							"—Ⓕ– js_syscallerror_finalizer ( ) { … } — function",
							"—Ⓕ– js_misc_tostring ( ) { … } — function",
							"—Ⓕ– js_misc_topointer ( ) { … } — function",
							"—Ⓕ– js_misc_toarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_duparraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_resizearraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_concatarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_getperformancecounter ( ) { … } — function",
							"—Ⓕ– js_misc_proclink ( ) { … } — function",
							"—Ⓕ– js_misc_procread ( ) { … } — function",
							"—Ⓕ– js_misc_getprototypechain ( ) { … } — function",
							"—Ⓕ– js_misc_hrtime ( ) { … } — function",
							"—Ⓕ– js_misc_fnmatch ( ) { … } — function",
							"—Ⓕ– js_misc_uname ( ) { … } — function",
							"—Ⓕ– js_misc_btoa ( ) { … } — function",
							"—Ⓕ– js_misc_atob ( ) { … } — function",
							"—Ⓕ– js_misc_compile_file ( ) { … } — function",
							"—Ⓕ– js_misc_write_object ( ) { … } — function",
							"—Ⓕ– js_misc_read_object ( ) { … } — function",
							"—Ⓕ– js_misc_getx ( ) { … } — function",
							"—Ⓕ– js_misc_valuetype ( ) { … } — function",
							"—Ⓕ– js_misc_evalbinary ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_array ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_object ( ) { … } — function",
							"—Ⓕ– js_misc_opcodes ( ) { … } — function",
							"—Ⓕ– js_misc_get_bytecode ( ) { … } — function",
							"—Ⓕ– js_misc_atom ( ) { … } — function",
							"—Ⓕ– js_misc_classid ( ) { … } — function",
							"—Ⓕ– js_misc_bitfield_to_array ( ) { … } — function",
							"—Ⓕ– js_misc_array_to_bitfield ( ) { … } — function",
							"—Ⓕ– js_misc_random ( ) { … } — function",
							"—Ⓕ– js_misc_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAGYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					247,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								262,
								265
							],
							[
								304,
								307
							],
							[
								690,
								709
							],
							[
								737,
								751
							],
							[
								863,
								877
							],
							[
								1186,
								1198
							],
							[
								1262,
								1278
							],
							[
								1346,
								1379
							],
							[
								3921,
								3930
							],
							[
								4044,
								4054
							],
							[
								4229,
								4250
							],
							[
								4331,
								4350
							],
							[
								4482,
								4506
							],
							[
								4645,
								4657
							],
							[
								4698,
								4710
							],
							[
								4733,
								4750
							],
							[
								5733,
								5745
							],
							[
								5762,
								5782
							],
							[
								5929,
								5956
							],
							[
								7269,
								7288
							],
							[
								8191,
								8212
							],
							[
								8358,
								8378
							],
							[
								8884,
								8906
							],
							[
								9389,
								9412
							],
							[
								10335,
								10354
							],
							[
								11951,
								11976
							],
							[
								12316,
								12332
							],
							[
								12982,
								12999
							],
							[
								13531,
								13552
							],
							[
								14070,
								14092
							],
							[
								14761,
								14786
							],
							[
								15556,
								15581
							],
							[
								16255,
								16284
							],
							[
								16523,
								16539
							],
							[
								17463,
								17479
							],
							[
								18569,
								18594
							],
							[
								19010,
								19024
							],
							[
								19832,
								19847
							],
							[
								20318,
								20331
							],
							[
								20925,
								20937
							],
							[
								21344,
								21356
							],
							[
								21772,
								21792
							],
							[
								22521,
								22541
							],
							[
								22880,
								22899
							],
							[
								23119,
								23131
							],
							[
								25035,
								25052
							],
							[
								25650,
								25668
							],
							[
								26760,
								26780
							],
							[
								27241,
								27262
							],
							[
								27736,
								27751
							],
							[
								28319,
								28339
							],
							[
								28791,
								28803
							],
							[
								29509,
								29524
							],
							[
								31027,
								31052
							],
							[
								31591,
								31616
							],
							[
								32794,
								32808
							],
							[
								37332,
								37344
							],
							[
								38374,
								38388
							],
							[
								38418,
								38432
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓜ– max ( ) … — macro function",
							"—Ⓜ– min ( ) … — macro function",
							"—Ⓒ– pcg_state_setseq_64 { … } ; — type",
							" Ⓣ  pcg32_random_t ; — typedef",
							"—Ⓕ– pcg32_random_r ( ) { … } — function",
							"—Ⓕ– pcg32_random ( ) { … } — function",
							"—Ⓕ– pcg32_init_state ( ) { … } — function",
							"—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — function",
							"—Ⓕ– get_error ( ) { … } — function",
							"—Ⓕ– find_error ( ) { … } — function",
							"—Ⓕ– js_bytecode_free_func ( ) { … } — function",
							"—Ⓕ– js_string_free_func ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_free_func ( ) { … } — function",
							"—Ⓒ– OffsetLength { … } ; — type",
							" Ⓣ  OffsetLength ; — typedef",
							"—Ⓕ– get_offset_length ( ) { … } — function",
							" Ⓣ  SyscallError ; — typedef",
							"—Ⓕ– js_syscallerror_data ( ) { … } — function",
							"—Ⓕ– js_syscallerror_constructor ( ) { … } — function",
							"—Ⓕ– js_syscallerror_new ( ) { … } — function",
							"—Ⓕ– js_syscallerror_throw ( ) { … } — function",
							"—Ⓕ– js_syscallerror_dump ( ) { … } — function",
							"—Ⓕ– js_syscallerror_method ( ) { … } — function",
							"—Ⓕ– js_syscallerror_inspect ( ) { … } — function",
							"—Ⓕ– js_syscallerror_get ( ) { … } — function",
							"—Ⓕ– js_syscallerror_finalizer ( ) { … } — function",
							"—Ⓕ– js_misc_tostring ( ) { … } — function",
							"—Ⓕ– js_misc_topointer ( ) { … } — function",
							"—Ⓕ– js_misc_toarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_duparraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_resizearraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_concatarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_getperformancecounter ( ) { … } — function",
							"—Ⓕ– js_misc_proclink ( ) { … } — function",
							"—Ⓕ– js_misc_procread ( ) { … } — function",
							"—Ⓕ– js_misc_getprototypechain ( ) { … } — function",
							"—Ⓕ– js_misc_hrtime ( ) { … } — function",
							"—Ⓕ– js_misc_fnmatch ( ) { … } — function",
							"—Ⓕ– js_misc_uname ( ) { … } — function",
							"—Ⓕ– js_misc_btoa ( ) { … } — function",
							"—Ⓕ– js_misc_atob ( ) { … } — function",
							"—Ⓕ– js_misc_compile_file ( ) { … } — function",
							"—Ⓕ– js_misc_write_object ( ) { … } — function",
							"—Ⓕ– js_misc_read_object ( ) { … } — function",
							"—Ⓕ– js_misc_getx ( ) { … } — function",
							"—Ⓕ– js_misc_valuetype ( ) { … } — function",
							"—Ⓕ– js_misc_evalbinary ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_array ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_object ( ) { … } — function",
							"—Ⓕ– js_misc_opcodes ( ) { … } — function",
							"—Ⓕ– js_misc_get_bytecode ( ) { … } — function",
							"—Ⓕ– js_misc_atom ( ) { … } — function",
							"—Ⓕ– js_misc_classid ( ) { … } — function",
							"—Ⓕ– js_misc_bitfield_to_array ( ) { … } — function",
							"—Ⓕ– js_misc_array_to_bitfield ( ) { … } — function",
							"—Ⓕ– js_misc_random ( ) { … } — function",
							"—Ⓕ– js_misc_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAGYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					248,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
						"symkeys":
						[
							[
								930,
								950
							],
							[
								995,
								1011
							],
							[
								1065,
								1084
							],
							[
								1119,
								1135
							],
							[
								1191,
								1207
							],
							[
								1270,
								1304
							],
							[
								1327,
								1359
							],
							[
								1382,
								1425
							],
							[
								1666,
								1678
							],
							[
								3501,
								3520
							],
							[
								3618,
								3634
							],
							[
								3696,
								3714
							],
							[
								3778,
								3797
							],
							[
								3862,
								3871
							],
							[
								3926,
								3943
							],
							[
								4006,
								4023
							],
							[
								4086,
								4100
							],
							[
								4160,
								4175
							],
							[
								4236,
								4251
							],
							[
								4312,
								4320
							],
							[
								4374,
								4386
							],
							[
								4444,
								4454
							],
							[
								4510,
								4521
							],
							[
								4578,
								4586
							],
							[
								4640,
								4662
							],
							[
								4730,
								4745
							],
							[
								4806,
								4828
							],
							[
								4896,
								4912
							],
							[
								4974,
								4990
							],
							[
								5052,
								5064
							],
							[
								5122,
								5134
							],
							[
								5192,
								5205
							],
							[
								5264,
								5282
							],
							[
								5340,
								5358
							],
							[
								5422,
								5444
							],
							[
								5512,
								5539
							],
							[
								5612,
								5629
							],
							[
								5686,
								5703
							],
							[
								5760,
								5777
							],
							[
								5824,
								5840
							],
							[
								5923,
								5939
							],
							[
								6011,
								6027
							],
							[
								6099,
								6116
							],
							[
								6173,
								6193
							],
							[
								6252,
								6272
							],
							[
								6431,
								6450
							],
							[
								6526,
								6533
							],
							[
								6562,
								6582
							],
							[
								6652,
								6667
							],
							[
								6728,
								6754
							],
							[
								6832,
								6853
							],
							[
								6931,
								6957
							],
							[
								7003,
								7028
							],
							[
								7093,
								7135
							],
							[
								7269,
								7309
							],
							[
								10190,
								10233
							],
							[
								10614,
								10649
							],
							[
								10805,
								10823
							],
							[
								10853,
								10858
							],
							[
								10948,
								10975
							],
							[
								11094,
								11115
							],
							[
								11144,
								11160
							],
							[
								11253,
								11274
							],
							[
								11298,
								11308
							],
							[
								11347,
								11377
							],
							[
								11666,
								11700
							],
							[
								11970,
								11987
							],
							[
								11988,
								11997
							],
							[
								12051,
								12068
							],
							[
								12069,
								12078
							],
							[
								12140,
								12157
							],
							[
								12158,
								12181
							],
							[
								12239,
								12263
							],
							[
								14890,
								14918
							],
							[
								15492,
								15505
							],
							[
								15821,
								15833
							],
							[
								16096,
								16109
							],
							[
								16214,
								16228
							],
							[
								17115,
								17143
							],
							[
								17259,
								17272
							],
							[
								17384,
								17410
							],
							[
								18078,
								18140
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function getConstructorChain(obj)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAKcEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAACnBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					249,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
						"symkeys":
						[
							[
								930,
								950
							],
							[
								995,
								1011
							],
							[
								1065,
								1084
							],
							[
								1119,
								1135
							],
							[
								1191,
								1207
							],
							[
								1270,
								1304
							],
							[
								1327,
								1359
							],
							[
								1382,
								1425
							],
							[
								1666,
								1678
							],
							[
								3501,
								3520
							],
							[
								3618,
								3634
							],
							[
								3696,
								3714
							],
							[
								3778,
								3797
							],
							[
								3862,
								3871
							],
							[
								3926,
								3943
							],
							[
								4006,
								4023
							],
							[
								4086,
								4100
							],
							[
								4160,
								4175
							],
							[
								4236,
								4251
							],
							[
								4312,
								4320
							],
							[
								4374,
								4386
							],
							[
								4444,
								4454
							],
							[
								4510,
								4521
							],
							[
								4578,
								4586
							],
							[
								4640,
								4662
							],
							[
								4730,
								4745
							],
							[
								4806,
								4828
							],
							[
								4896,
								4912
							],
							[
								4974,
								4990
							],
							[
								5052,
								5064
							],
							[
								5122,
								5134
							],
							[
								5192,
								5205
							],
							[
								5264,
								5282
							],
							[
								5340,
								5358
							],
							[
								5422,
								5444
							],
							[
								5512,
								5539
							],
							[
								5612,
								5629
							],
							[
								5686,
								5703
							],
							[
								5760,
								5777
							],
							[
								5824,
								5840
							],
							[
								5923,
								5939
							],
							[
								6011,
								6027
							],
							[
								6099,
								6116
							],
							[
								6173,
								6193
							],
							[
								6252,
								6272
							],
							[
								6431,
								6450
							],
							[
								6526,
								6533
							],
							[
								6562,
								6582
							],
							[
								6652,
								6667
							],
							[
								6728,
								6754
							],
							[
								6832,
								6853
							],
							[
								6931,
								6957
							],
							[
								7003,
								7028
							],
							[
								7093,
								7135
							],
							[
								7269,
								7309
							],
							[
								10190,
								10233
							],
							[
								10614,
								10649
							],
							[
								10805,
								10823
							],
							[
								10853,
								10858
							],
							[
								10948,
								10975
							],
							[
								11094,
								11115
							],
							[
								11144,
								11160
							],
							[
								11253,
								11274
							],
							[
								11298,
								11308
							],
							[
								11347,
								11377
							],
							[
								11666,
								11700
							],
							[
								11970,
								11987
							],
							[
								11988,
								11997
							],
							[
								12051,
								12068
							],
							[
								12069,
								12078
							],
							[
								12140,
								12157
							],
							[
								12158,
								12181
							],
							[
								12239,
								12263
							],
							[
								14890,
								14918
							],
							[
								15492,
								15505
							],
							[
								15821,
								15833
							],
							[
								16096,
								16109
							],
							[
								16214,
								16228
							],
							[
								17115,
								17143
							],
							[
								17259,
								17272
							],
							[
								17384,
								17410
							],
							[
								18078,
								18140
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function getConstructorChain(obj)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAACnBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApwQAACAgdXRpbCgpCkFzeW5jRnVuY3Rpb24gPSB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSAqKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQoqKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdCh2KQogIGhhc0J1aWx0SW4obywgbSkKICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBhc3NlcnQoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkKICBzZXRJbnRlcnZhbChjYWxsYmFjaywgbXMpCiAgc3RhcnQoKQogIGNsZWFySW50ZXJ2YWwoaWQpCiAgbWVtb2l6ZShmbikKICB3YWl0Rm9yKG1zKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgZ2V0Q29uc3RydWN0b3JDaGFpbihvYmopCiAgZ2V0QW5zaVN0eWxlcygpCiAgcmFuZEludCguLi5hcmdzKQAAAAAAAAAApwQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					250,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					251,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
						"symkeys":
						[
							[
								930,
								950
							],
							[
								995,
								1011
							],
							[
								1065,
								1084
							],
							[
								1119,
								1135
							],
							[
								1191,
								1207
							],
							[
								1270,
								1304
							],
							[
								1327,
								1359
							],
							[
								1382,
								1425
							],
							[
								1666,
								1678
							],
							[
								3501,
								3520
							],
							[
								3618,
								3634
							],
							[
								3696,
								3714
							],
							[
								3778,
								3797
							],
							[
								3862,
								3871
							],
							[
								3926,
								3943
							],
							[
								4006,
								4023
							],
							[
								4086,
								4100
							],
							[
								4160,
								4175
							],
							[
								4236,
								4251
							],
							[
								4312,
								4320
							],
							[
								4374,
								4386
							],
							[
								4444,
								4454
							],
							[
								4510,
								4521
							],
							[
								4578,
								4586
							],
							[
								4640,
								4662
							],
							[
								4730,
								4745
							],
							[
								4806,
								4828
							],
							[
								4896,
								4912
							],
							[
								4974,
								4990
							],
							[
								5052,
								5064
							],
							[
								5122,
								5134
							],
							[
								5192,
								5205
							],
							[
								5264,
								5282
							],
							[
								5340,
								5358
							],
							[
								5422,
								5444
							],
							[
								5512,
								5539
							],
							[
								5612,
								5629
							],
							[
								5686,
								5703
							],
							[
								5760,
								5777
							],
							[
								5824,
								5840
							],
							[
								5923,
								5939
							],
							[
								6011,
								6027
							],
							[
								6099,
								6116
							],
							[
								6173,
								6193
							],
							[
								6252,
								6272
							],
							[
								6431,
								6450
							],
							[
								6526,
								6533
							],
							[
								6562,
								6582
							],
							[
								6652,
								6667
							],
							[
								6728,
								6754
							],
							[
								6832,
								6853
							],
							[
								6931,
								6957
							],
							[
								7003,
								7028
							],
							[
								7093,
								7135
							],
							[
								7269,
								7309
							],
							[
								10190,
								10233
							],
							[
								10614,
								10649
							],
							[
								10805,
								10823
							],
							[
								10853,
								10858
							],
							[
								10948,
								10975
							],
							[
								11094,
								11115
							],
							[
								11144,
								11160
							],
							[
								11253,
								11274
							],
							[
								11298,
								11308
							],
							[
								11347,
								11377
							],
							[
								11666,
								11700
							],
							[
								11970,
								11987
							],
							[
								11988,
								11997
							],
							[
								12051,
								12068
							],
							[
								12069,
								12078
							],
							[
								12140,
								12157
							],
							[
								12158,
								12181
							],
							[
								12239,
								12263
							],
							[
								14890,
								14918
							],
							[
								15492,
								15505
							],
							[
								15821,
								15833
							],
							[
								16096,
								16109
							],
							[
								16214,
								16228
							],
							[
								17115,
								17143
							],
							[
								17259,
								17272
							],
							[
								17384,
								17410
							],
							[
								18078,
								18140
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function getConstructorChain(obj)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>"
						]
					},
					"AQAAAAAAAAAAAAAApwQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					252,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
						"symkeys":
						[
							[
								956,
								976
							],
							[
								1021,
								1037
							],
							[
								1091,
								1110
							],
							[
								1145,
								1161
							],
							[
								1217,
								1233
							],
							[
								1296,
								1330
							],
							[
								1353,
								1385
							],
							[
								1408,
								1451
							],
							[
								1692,
								1704
							],
							[
								3527,
								3546
							],
							[
								3644,
								3660
							],
							[
								3722,
								3740
							],
							[
								3804,
								3823
							],
							[
								3888,
								3897
							],
							[
								3952,
								3969
							],
							[
								4032,
								4049
							],
							[
								4112,
								4126
							],
							[
								4186,
								4201
							],
							[
								4262,
								4277
							],
							[
								4338,
								4346
							],
							[
								4400,
								4412
							],
							[
								4470,
								4480
							],
							[
								4536,
								4547
							],
							[
								4604,
								4612
							],
							[
								4666,
								4688
							],
							[
								4756,
								4771
							],
							[
								4832,
								4854
							],
							[
								4922,
								4938
							],
							[
								5000,
								5016
							],
							[
								5078,
								5090
							],
							[
								5148,
								5160
							],
							[
								5218,
								5231
							],
							[
								5290,
								5308
							],
							[
								5366,
								5384
							],
							[
								5448,
								5470
							],
							[
								5538,
								5565
							],
							[
								5638,
								5655
							],
							[
								5712,
								5729
							],
							[
								5786,
								5803
							],
							[
								5850,
								5866
							],
							[
								5949,
								5965
							],
							[
								6037,
								6053
							],
							[
								6125,
								6142
							],
							[
								6199,
								6219
							],
							[
								6278,
								6298
							],
							[
								6457,
								6476
							],
							[
								6552,
								6559
							],
							[
								6588,
								6608
							],
							[
								6678,
								6693
							],
							[
								6754,
								6780
							],
							[
								6858,
								6879
							],
							[
								6957,
								6983
							],
							[
								7029,
								7054
							],
							[
								7119,
								7161
							],
							[
								7295,
								7335
							],
							[
								10216,
								10259
							],
							[
								10640,
								10675
							],
							[
								10831,
								10849
							],
							[
								10879,
								10884
							],
							[
								10974,
								11001
							],
							[
								11120,
								11141
							],
							[
								11170,
								11186
							],
							[
								11279,
								11300
							],
							[
								11324,
								11334
							],
							[
								11373,
								11403
							],
							[
								11692,
								11726
							],
							[
								11996,
								12013
							],
							[
								12014,
								12023
							],
							[
								12077,
								12094
							],
							[
								12095,
								12104
							],
							[
								12166,
								12183
							],
							[
								12184,
								12207
							],
							[
								12265,
								12289
							],
							[
								14916,
								14944
							],
							[
								15518,
								15531
							],
							[
								15847,
								15859
							],
							[
								16122,
								16135
							],
							[
								16240,
								16254
							],
							[
								17141,
								17169
							],
							[
								17285,
								17298
							],
							[
								17410,
								17436
							],
							[
								18104,
								18166
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function getConstructorChain(obj)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAACnBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApwQAACAgdXRpbCgpCkFzeW5jRnVuY3Rpb24gPSB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSAqKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQoqKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdCh2KQogIGhhc0J1aWx0SW4obywgbSkKICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBhc3NlcnQoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkKICBzZXRJbnRlcnZhbChjYWxsYmFjaywgbXMpCiAgc3RhcnQoKQogIGNsZWFySW50ZXJ2YWwoaWQpCiAgbWVtb2l6ZShmbikKICB3YWl0Rm9yKG1zKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgZ2V0Q29uc3RydWN0b3JDaGFpbihvYmopCiAgZ2V0QW5zaVN0eWxlcygpCiAgcmFuZEludCguLi5hcmdzKQAAAAAAAAAApwQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					253,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					254,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
						"symkeys":
						[
							[
								956,
								976
							],
							[
								1021,
								1037
							],
							[
								1091,
								1110
							],
							[
								1145,
								1161
							],
							[
								1217,
								1233
							],
							[
								1296,
								1330
							],
							[
								1353,
								1385
							],
							[
								1408,
								1451
							],
							[
								1692,
								1704
							],
							[
								3527,
								3546
							],
							[
								3644,
								3660
							],
							[
								3722,
								3740
							],
							[
								3804,
								3823
							],
							[
								3888,
								3897
							],
							[
								3952,
								3969
							],
							[
								4032,
								4049
							],
							[
								4112,
								4126
							],
							[
								4186,
								4201
							],
							[
								4262,
								4277
							],
							[
								4338,
								4346
							],
							[
								4400,
								4412
							],
							[
								4470,
								4480
							],
							[
								4536,
								4547
							],
							[
								4604,
								4612
							],
							[
								4666,
								4688
							],
							[
								4756,
								4771
							],
							[
								4832,
								4854
							],
							[
								4922,
								4938
							],
							[
								5000,
								5016
							],
							[
								5078,
								5090
							],
							[
								5148,
								5160
							],
							[
								5218,
								5231
							],
							[
								5290,
								5308
							],
							[
								5366,
								5384
							],
							[
								5448,
								5470
							],
							[
								5538,
								5565
							],
							[
								5638,
								5655
							],
							[
								5712,
								5729
							],
							[
								5786,
								5803
							],
							[
								5850,
								5866
							],
							[
								5949,
								5965
							],
							[
								6037,
								6053
							],
							[
								6125,
								6142
							],
							[
								6199,
								6219
							],
							[
								6278,
								6298
							],
							[
								6457,
								6476
							],
							[
								6552,
								6559
							],
							[
								6588,
								6608
							],
							[
								6678,
								6693
							],
							[
								6754,
								6780
							],
							[
								6858,
								6879
							],
							[
								6957,
								6983
							],
							[
								7029,
								7054
							],
							[
								7119,
								7161
							],
							[
								7295,
								7335
							],
							[
								10216,
								10259
							],
							[
								10640,
								10675
							],
							[
								10831,
								10849
							],
							[
								10879,
								10884
							],
							[
								10974,
								11001
							],
							[
								11120,
								11141
							],
							[
								11170,
								11186
							],
							[
								11279,
								11300
							],
							[
								11324,
								11334
							],
							[
								11373,
								11403
							],
							[
								11692,
								11726
							],
							[
								11996,
								12013
							],
							[
								12014,
								12023
							],
							[
								12077,
								12094
							],
							[
								12095,
								12104
							],
							[
								12166,
								12183
							],
							[
								12184,
								12207
							],
							[
								12265,
								12289
							],
							[
								14916,
								14944
							],
							[
								15518,
								15531
							],
							[
								15847,
								15859
							],
							[
								16122,
								16135
							],
							[
								16240,
								16254
							],
							[
								17141,
								17169
							],
							[
								17285,
								17298
							],
							[
								17410,
								17436
							],
							[
								18104,
								18166
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function getConstructorChain(obj)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>"
						]
					},
					"AQAAAAAAAAAAAAAApwQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					255,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
						"symkeys":
						[
							[
								956,
								976
							],
							[
								1021,
								1037
							],
							[
								1091,
								1110
							],
							[
								1145,
								1161
							],
							[
								1217,
								1233
							],
							[
								1296,
								1330
							],
							[
								1353,
								1385
							],
							[
								1408,
								1451
							],
							[
								1692,
								1704
							],
							[
								3527,
								3546
							],
							[
								3644,
								3660
							],
							[
								3722,
								3740
							],
							[
								3804,
								3823
							],
							[
								3888,
								3897
							],
							[
								3952,
								3969
							],
							[
								4032,
								4049
							],
							[
								4112,
								4126
							],
							[
								4186,
								4201
							],
							[
								4262,
								4277
							],
							[
								4338,
								4346
							],
							[
								4400,
								4412
							],
							[
								4470,
								4480
							],
							[
								4536,
								4547
							],
							[
								4604,
								4612
							],
							[
								4666,
								4688
							],
							[
								4756,
								4771
							],
							[
								4832,
								4854
							],
							[
								4922,
								4938
							],
							[
								5000,
								5016
							],
							[
								5078,
								5090
							],
							[
								5148,
								5160
							],
							[
								5218,
								5231
							],
							[
								5290,
								5308
							],
							[
								5366,
								5384
							],
							[
								5448,
								5470
							],
							[
								5538,
								5565
							],
							[
								5638,
								5655
							],
							[
								5712,
								5729
							],
							[
								5786,
								5803
							],
							[
								5850,
								5866
							],
							[
								5949,
								5965
							],
							[
								6037,
								6053
							],
							[
								6125,
								6142
							],
							[
								6199,
								6219
							],
							[
								6278,
								6298
							],
							[
								6457,
								6476
							],
							[
								6552,
								6559
							],
							[
								6588,
								6608
							],
							[
								6678,
								6693
							],
							[
								6754,
								6780
							],
							[
								6858,
								6879
							],
							[
								6957,
								6983
							],
							[
								7029,
								7054
							],
							[
								7119,
								7161
							],
							[
								7295,
								7335
							],
							[
								10216,
								10259
							],
							[
								10640,
								10675
							],
							[
								10831,
								10849
							],
							[
								10879,
								10884
							],
							[
								10974,
								11001
							],
							[
								11120,
								11141
							],
							[
								11170,
								11186
							],
							[
								11279,
								11300
							],
							[
								11324,
								11334
							],
							[
								11373,
								11403
							],
							[
								11692,
								11726
							],
							[
								11996,
								12013
							],
							[
								12014,
								12023
							],
							[
								12077,
								12094
							],
							[
								12095,
								12104
							],
							[
								12166,
								12183
							],
							[
								12184,
								12207
							],
							[
								12265,
								12289
							],
							[
								14916,
								14944
							],
							[
								15518,
								15531
							],
							[
								15847,
								15859
							],
							[
								16122,
								16135
							],
							[
								16240,
								16254
							],
							[
								17141,
								17169
							],
							[
								17285,
								17298
							],
							[
								17410,
								17436
							],
							[
								18099,
								18161
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function getConstructorChain(obj)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAACnBAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					256,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
						"symkeys":
						[
							[
								965,
								985
							],
							[
								1030,
								1046
							],
							[
								1100,
								1119
							],
							[
								1154,
								1170
							],
							[
								1226,
								1242
							],
							[
								1305,
								1339
							],
							[
								1362,
								1394
							],
							[
								1417,
								1460
							],
							[
								1701,
								1713
							],
							[
								3536,
								3555
							],
							[
								3653,
								3669
							],
							[
								3731,
								3749
							],
							[
								3813,
								3832
							],
							[
								3897,
								3906
							],
							[
								3961,
								3978
							],
							[
								4041,
								4058
							],
							[
								4121,
								4135
							],
							[
								4195,
								4210
							],
							[
								4271,
								4286
							],
							[
								4347,
								4355
							],
							[
								4409,
								4421
							],
							[
								4479,
								4489
							],
							[
								4545,
								4556
							],
							[
								4613,
								4621
							],
							[
								4675,
								4697
							],
							[
								4765,
								4780
							],
							[
								4841,
								4863
							],
							[
								4931,
								4947
							],
							[
								5009,
								5025
							],
							[
								5087,
								5099
							],
							[
								5157,
								5169
							],
							[
								5227,
								5240
							],
							[
								5299,
								5317
							],
							[
								5375,
								5393
							],
							[
								5457,
								5479
							],
							[
								5547,
								5574
							],
							[
								5647,
								5664
							],
							[
								5721,
								5738
							],
							[
								5795,
								5812
							],
							[
								5859,
								5875
							],
							[
								5958,
								5974
							],
							[
								6046,
								6062
							],
							[
								6134,
								6151
							],
							[
								6208,
								6228
							],
							[
								6287,
								6307
							],
							[
								6466,
								6485
							],
							[
								6561,
								6568
							],
							[
								6597,
								6617
							],
							[
								6687,
								6702
							],
							[
								6763,
								6789
							],
							[
								6867,
								6888
							],
							[
								6966,
								6992
							],
							[
								7038,
								7063
							],
							[
								7128,
								7170
							],
							[
								7304,
								7344
							],
							[
								10225,
								10268
							],
							[
								10649,
								10684
							],
							[
								10840,
								10858
							],
							[
								10888,
								10893
							],
							[
								10983,
								11010
							],
							[
								11129,
								11150
							],
							[
								11179,
								11195
							],
							[
								11288,
								11309
							],
							[
								11333,
								11343
							],
							[
								11382,
								11412
							],
							[
								11701,
								11735
							],
							[
								12005,
								12022
							],
							[
								12023,
								12032
							],
							[
								12086,
								12103
							],
							[
								12104,
								12113
							],
							[
								12175,
								12192
							],
							[
								12193,
								12216
							],
							[
								12274,
								12298
							],
							[
								14925,
								14953
							],
							[
								15527,
								15540
							],
							[
								15856,
								15868
							],
							[
								16131,
								16144
							],
							[
								16249,
								16263
							],
							[
								17150,
								17178
							],
							[
								17294,
								17307
							],
							[
								17419,
								17445
							],
							[
								18108,
								18170
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							" function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							" function isObject(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function memoize(fn)",
							" (n, ...rest) =>",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function getConstructorChain(obj)",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							".extendArray = (proto = Array.prototype, def = util.define) =>"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAACnBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAApwQAACAgdXRpbCgpCkFzeW5jRnVuY3Rpb24gPSB4KCkKR2VuZXJhdG9yRnVuY3Rpb24gPSAqKCkKQXN5bmNHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQoqKCkKICBpc0FueUFycmF5QnVmZmVyKHYpCiAgaXNBcnJheUJ1ZmZlcih2KQogIGlzQmlnSW50NjRBcnJheSh2KQogIGlzQmlnVWludDY0QXJyYXkodikKICBpc0RhdGUodikKICBpc0Zsb2F0MzJBcnJheSh2KQogIGlzRmxvYXQ2NEFycmF5KHYpCiAgaXNJbnQ4QXJyYXkodikKICBpc0ludDE2QXJyYXkodikKICBpc0ludDMyQXJyYXkodikKICBpc01hcCh2KQogIGlzUHJvbWlzZSh2KQogIGlzUHJveHkodikKICBpc1JlZ0V4cCh2KQogIGlzU2V0KHYpCiAgaXNTaGFyZWRBcnJheUJ1ZmZlcih2KQogIGlzVWludDhBcnJheSh2KQogIGlzVWludDhDbGFtcGVkQXJyYXkodikKICBpc1VpbnQxNkFycmF5KHYpCiAgaXNVaW50MzJBcnJheSh2KQogIGlzV2Vha01hcCh2KQogIGlzV2Vha1NldCh2KQogIGlzRGF0YVZpZXcodikKICBpc0Jvb2xlYW5PYmplY3QodikKICBpc0FzeW5jRnVuY3Rpb24odikKICBpc0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpCiAgaXNOdW1iZXJPYmplY3QodikKICBpc0JpZ0ludE9iamVjdCh2KQogIGlzU3ltYm9sT2JqZWN0KHYpCiAgaXNOYXRpdmVFcnJvcih2KQogIGlzTWFwSXRlcmF0b3IodikKICBpc1NldEl0ZXJhdG9yKHYpCiAgaXNTdHJpbmdPYmplY3QodikKICBpc0FycmF5QnVmZmVyVmlldyh2KQogIGlzQXJndW1lbnRzT2JqZWN0KHYpCiAgaXNCb3hlZFByaW1pdGl2ZSh2KQogIGlzR2VuZXJhdG9yT2JqZWN0KHYpCiAgaXNUeXBlZEFycmF5KHYpCiAgaXNNb2R1bGVOYW1lc3BhY2VPYmplY3QodikKICBpc09iamVjdCh2KQogIGhhc0J1aWx0SW4obywgbSkKICBmb3JtYXQoLi4uYXJncykKICBmb3JtYXRXaXRoT3B0aW9ucyhvcHRzLCAuLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwobywgdikKICBhc3NlcnQoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkKICBzZXRJbnRlcnZhbChjYWxsYmFjaywgbXMpCiAgc3RhcnQoKQogIGNsZWFySW50ZXJ2YWwoaWQpCiAgbWVtb2l6ZShmbikKICB3YWl0Rm9yKG1zKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgZ2V0Q29uc3RydWN0b3JDaGFpbihvYmopCiAgZ2V0QW5zaVN0eWxlcygpCiAgcmFuZEludCguLi5hcmdzKQAAAAAAAAAApwQAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					257,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								262,
								265
							],
							[
								304,
								307
							],
							[
								690,
								709
							],
							[
								737,
								751
							],
							[
								863,
								877
							],
							[
								1186,
								1198
							],
							[
								1262,
								1278
							],
							[
								1346,
								1379
							],
							[
								3921,
								3930
							],
							[
								4044,
								4054
							],
							[
								4229,
								4250
							],
							[
								4331,
								4350
							],
							[
								4482,
								4506
							],
							[
								4645,
								4657
							],
							[
								4698,
								4710
							],
							[
								4733,
								4750
							],
							[
								5733,
								5745
							],
							[
								5762,
								5782
							],
							[
								5929,
								5956
							],
							[
								7269,
								7288
							],
							[
								8191,
								8212
							],
							[
								8358,
								8378
							],
							[
								8884,
								8906
							],
							[
								9389,
								9412
							],
							[
								10335,
								10354
							],
							[
								11951,
								11976
							],
							[
								12316,
								12332
							],
							[
								12982,
								12999
							],
							[
								13531,
								13552
							],
							[
								14070,
								14092
							],
							[
								14761,
								14786
							],
							[
								15556,
								15581
							],
							[
								16255,
								16284
							],
							[
								16523,
								16539
							],
							[
								17463,
								17479
							],
							[
								18569,
								18594
							],
							[
								19010,
								19024
							],
							[
								19832,
								19847
							],
							[
								20318,
								20331
							],
							[
								20925,
								20937
							],
							[
								21344,
								21356
							],
							[
								21772,
								21792
							],
							[
								22521,
								22541
							],
							[
								22880,
								22899
							],
							[
								23119,
								23131
							],
							[
								25035,
								25052
							],
							[
								25650,
								25668
							],
							[
								26760,
								26780
							],
							[
								27241,
								27262
							],
							[
								27736,
								27751
							],
							[
								28319,
								28339
							],
							[
								28791,
								28803
							],
							[
								29509,
								29524
							],
							[
								31027,
								31052
							],
							[
								31591,
								31616
							],
							[
								32794,
								32808
							],
							[
								37332,
								37344
							],
							[
								38374,
								38388
							],
							[
								38418,
								38432
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓜ– max ( ) … — macro function",
							"—Ⓜ– min ( ) … — macro function",
							"—Ⓒ– pcg_state_setseq_64 { … } ; — type",
							" Ⓣ  pcg32_random_t ; — typedef",
							"—Ⓕ– pcg32_random_r ( ) { … } — function",
							"—Ⓕ– pcg32_random ( ) { … } — function",
							"—Ⓕ– pcg32_init_state ( ) { … } — function",
							"—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — function",
							"—Ⓕ– get_error ( ) { … } — function",
							"—Ⓕ– find_error ( ) { … } — function",
							"—Ⓕ– js_bytecode_free_func ( ) { … } — function",
							"—Ⓕ– js_string_free_func ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_free_func ( ) { … } — function",
							"—Ⓒ– OffsetLength { … } ; — type",
							" Ⓣ  OffsetLength ; — typedef",
							"—Ⓕ– get_offset_length ( ) { … } — function",
							" Ⓣ  SyscallError ; — typedef",
							"—Ⓕ– js_syscallerror_data ( ) { … } — function",
							"—Ⓕ– js_syscallerror_constructor ( ) { … } — function",
							"—Ⓕ– js_syscallerror_new ( ) { … } — function",
							"—Ⓕ– js_syscallerror_throw ( ) { … } — function",
							"—Ⓕ– js_syscallerror_dump ( ) { … } — function",
							"—Ⓕ– js_syscallerror_method ( ) { … } — function",
							"—Ⓕ– js_syscallerror_inspect ( ) { … } — function",
							"—Ⓕ– js_syscallerror_get ( ) { … } — function",
							"—Ⓕ– js_syscallerror_finalizer ( ) { … } — function",
							"—Ⓕ– js_misc_tostring ( ) { … } — function",
							"—Ⓕ– js_misc_topointer ( ) { … } — function",
							"—Ⓕ– js_misc_toarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_duparraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_resizearraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_concatarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_getperformancecounter ( ) { … } — function",
							"—Ⓕ– js_misc_proclink ( ) { … } — function",
							"—Ⓕ– js_misc_procread ( ) { … } — function",
							"—Ⓕ– js_misc_getprototypechain ( ) { … } — function",
							"—Ⓕ– js_misc_hrtime ( ) { … } — function",
							"—Ⓕ– js_misc_fnmatch ( ) { … } — function",
							"—Ⓕ– js_misc_uname ( ) { … } — function",
							"—Ⓕ– js_misc_btoa ( ) { … } — function",
							"—Ⓕ– js_misc_atob ( ) { … } — function",
							"—Ⓕ– js_misc_compile_file ( ) { … } — function",
							"—Ⓕ– js_misc_write_object ( ) { … } — function",
							"—Ⓕ– js_misc_read_object ( ) { … } — function",
							"—Ⓕ– js_misc_getx ( ) { … } — function",
							"—Ⓕ– js_misc_valuetype ( ) { … } — function",
							"—Ⓕ– js_misc_evalbinary ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_array ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_object ( ) { … } — function",
							"—Ⓕ– js_misc_opcodes ( ) { … } — function",
							"—Ⓕ– js_misc_get_bytecode ( ) { … } — function",
							"—Ⓕ– js_misc_atom ( ) { … } — function",
							"—Ⓕ– js_misc_classid ( ) { … } — function",
							"—Ⓕ– js_misc_bitfield_to_array ( ) { … } — function",
							"—Ⓕ– js_misc_array_to_bitfield ( ) { … } — function",
							"—Ⓕ– js_misc_random ( ) { … } — function",
							"—Ⓕ– js_misc_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACnBAAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9ICooKQpBc3luY0dlbmVyYXRvckZ1bmN0aW9uID0gKigpCiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzT2JqZWN0KHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBtZW1vaXplKGZuKQogIHdhaXRGb3IobXMpCiAgZGVmaW5lKG9iaiwgLi4uYXJncykKICBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpAAAAAAAAAABmCAAAAAAAAAAAAAA",
					"AQAAAAAAAAAAAAAA"
				],
				[
					264,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								262,
								265
							],
							[
								304,
								307
							],
							[
								690,
								709
							],
							[
								737,
								751
							],
							[
								863,
								877
							],
							[
								1186,
								1198
							],
							[
								1262,
								1278
							],
							[
								1346,
								1379
							],
							[
								3921,
								3930
							],
							[
								4044,
								4054
							],
							[
								4229,
								4250
							],
							[
								4331,
								4350
							],
							[
								4482,
								4506
							],
							[
								4645,
								4657
							],
							[
								4698,
								4710
							],
							[
								4733,
								4750
							],
							[
								5733,
								5745
							],
							[
								5762,
								5782
							],
							[
								5929,
								5956
							],
							[
								7269,
								7288
							],
							[
								8191,
								8212
							],
							[
								8358,
								8378
							],
							[
								8884,
								8906
							],
							[
								9389,
								9412
							],
							[
								10335,
								10354
							],
							[
								11951,
								11976
							],
							[
								12316,
								12332
							],
							[
								12982,
								12999
							],
							[
								13531,
								13552
							],
							[
								14070,
								14092
							],
							[
								14761,
								14786
							],
							[
								15556,
								15581
							],
							[
								16255,
								16284
							],
							[
								16523,
								16539
							],
							[
								17463,
								17479
							],
							[
								18569,
								18594
							],
							[
								19010,
								19024
							],
							[
								19832,
								19847
							],
							[
								20318,
								20331
							],
							[
								20925,
								20937
							],
							[
								21344,
								21356
							],
							[
								21772,
								21792
							],
							[
								22521,
								22541
							],
							[
								22880,
								22899
							],
							[
								23119,
								23131
							],
							[
								25035,
								25052
							],
							[
								25650,
								25668
							],
							[
								26760,
								26780
							],
							[
								27241,
								27262
							],
							[
								27736,
								27751
							],
							[
								28319,
								28339
							],
							[
								28791,
								28803
							],
							[
								29509,
								29524
							],
							[
								31027,
								31052
							],
							[
								31591,
								31616
							],
							[
								32794,
								32808
							],
							[
								37332,
								37344
							],
							[
								38374,
								38388
							],
							[
								38418,
								38432
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓜ– max ( ) … — macro function",
							"—Ⓜ– min ( ) … — macro function",
							"—Ⓒ– pcg_state_setseq_64 { … } ; — type",
							" Ⓣ  pcg32_random_t ; — typedef",
							"—Ⓕ– pcg32_random_r ( ) { … } — function",
							"—Ⓕ– pcg32_random ( ) { … } — function",
							"—Ⓕ– pcg32_init_state ( ) { … } — function",
							"—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — function",
							"—Ⓕ– get_error ( ) { … } — function",
							"—Ⓕ– find_error ( ) { … } — function",
							"—Ⓕ– js_bytecode_free_func ( ) { … } — function",
							"—Ⓕ– js_string_free_func ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_free_func ( ) { … } — function",
							"—Ⓒ– OffsetLength { … } ; — type",
							" Ⓣ  OffsetLength ; — typedef",
							"—Ⓕ– get_offset_length ( ) { … } — function",
							" Ⓣ  SyscallError ; — typedef",
							"—Ⓕ– js_syscallerror_data ( ) { … } — function",
							"—Ⓕ– js_syscallerror_constructor ( ) { … } — function",
							"—Ⓕ– js_syscallerror_new ( ) { … } — function",
							"—Ⓕ– js_syscallerror_throw ( ) { … } — function",
							"—Ⓕ– js_syscallerror_dump ( ) { … } — function",
							"—Ⓕ– js_syscallerror_method ( ) { … } — function",
							"—Ⓕ– js_syscallerror_inspect ( ) { … } — function",
							"—Ⓕ– js_syscallerror_get ( ) { … } — function",
							"—Ⓕ– js_syscallerror_finalizer ( ) { … } — function",
							"—Ⓕ– js_misc_tostring ( ) { … } — function",
							"—Ⓕ– js_misc_topointer ( ) { … } — function",
							"—Ⓕ– js_misc_toarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_duparraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_resizearraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_concatarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_getperformancecounter ( ) { … } — function",
							"—Ⓕ– js_misc_proclink ( ) { … } — function",
							"—Ⓕ– js_misc_procread ( ) { … } — function",
							"—Ⓕ– js_misc_getprototypechain ( ) { … } — function",
							"—Ⓕ– js_misc_hrtime ( ) { … } — function",
							"—Ⓕ– js_misc_fnmatch ( ) { … } — function",
							"—Ⓕ– js_misc_uname ( ) { … } — function",
							"—Ⓕ– js_misc_btoa ( ) { … } — function",
							"—Ⓕ– js_misc_atob ( ) { … } — function",
							"—Ⓕ– js_misc_compile_file ( ) { … } — function",
							"—Ⓕ– js_misc_write_object ( ) { … } — function",
							"—Ⓕ– js_misc_read_object ( ) { … } — function",
							"—Ⓕ– js_misc_getx ( ) { … } — function",
							"—Ⓕ– js_misc_valuetype ( ) { … } — function",
							"—Ⓕ– js_misc_evalbinary ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_array ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_object ( ) { … } — function",
							"—Ⓕ– js_misc_opcodes ( ) { … } — function",
							"—Ⓕ– js_misc_get_bytecode ( ) { … } — function",
							"—Ⓕ– js_misc_atom ( ) { … } — function",
							"—Ⓕ– js_misc_classid ( ) { … } — function",
							"—Ⓕ– js_misc_bitfield_to_array ( ) { … } — function",
							"—Ⓕ– js_misc_array_to_bitfield ( ) { … } — function",
							"—Ⓕ– js_misc_random ( ) { … } — function",
							"—Ⓕ– js_misc_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAGYIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAAGYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AAAAAAAAADoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Sources/plot-cv/quickjs/modules/utils.c",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								77,
								91
							],
							[
								269,
								277
							],
							[
								356,
								363
							],
							[
								574,
								581
							],
							[
								707,
								718
							],
							[
								943,
								952
							],
							[
								1259,
								1272
							],
							[
								1558,
								1570
							],
							[
								1799,
								1809
							],
							[
								1962,
								1973
							],
							[
								2127,
								2136
							],
							[
								2441,
								2455
							],
							[
								2642,
								2654
							],
							[
								2806,
								2823
							],
							[
								3018,
								3039
							],
							[
								3661,
								3684
							],
							[
								4085,
								4099
							],
							[
								4291,
								4309
							],
							[
								4551,
								4565
							],
							[
								4898,
								4913
							],
							[
								5131,
								5149
							],
							[
								5316,
								5325
							],
							[
								5671,
								5694
							],
							[
								6102,
								6123
							],
							[
								6508,
								6524
							],
							[
								7155,
								7171
							],
							[
								7340,
								7354
							],
							[
								7678,
								7693
							],
							[
								8113,
								8128
							],
							[
								8726,
								8744
							],
							[
								8822,
								8840
							],
							[
								9026,
								9043
							],
							[
								9222,
								9239
							],
							[
								9450,
								9467
							],
							[
								9580,
								9596
							],
							[
								9781,
								9805
							],
							[
								9999,
								10018
							],
							[
								10164,
								10179
							],
							[
								10457,
								10473
							],
							[
								10834,
								10846
							],
							[
								11295,
								11311
							],
							[
								11477,
								11498
							],
							[
								11689,
								11704
							],
							[
								11869,
								11884
							],
							[
								12100,
								12115
							],
							[
								12272,
								12288
							],
							[
								12864,
								12881
							],
							[
								13056,
								13072
							],
							[
								13987,
								14000
							],
							[
								14212,
								14231
							],
							[
								14439,
								14457
							],
							[
								14924,
								14939
							],
							[
								15119,
								15135
							],
							[
								15547,
								15568
							],
							[
								15744,
								15763
							],
							[
								16474,
								16490
							],
							[
								17341,
								17353
							],
							[
								17564,
								17583
							],
							[
								17721,
								17736
							],
							[
								18026,
								18041
							],
							[
								18219,
								18233
							],
							[
								18395,
								18413
							],
							[
								18621,
								18644
							],
							[
								18899,
								18925
							],
							[
								19220,
								19249
							],
							[
								19567,
								19593
							],
							[
								19881,
								19906
							],
							[
								20188,
								20216
							],
							[
								20523,
								20547
							],
							[
								20832,
								20857
							],
							[
								21139,
								21164
							],
							[
								21333,
								21355
							],
							[
								21489,
								21514
							],
							[
								21689,
								21717
							],
							[
								21911,
								21936
							],
							[
								22365,
								22376
							],
							[
								22471,
								22485
							],
							[
								22557,
								22569
							],
							[
								22696,
								22709
							],
							[
								22892,
								22905
							],
							[
								23044,
								23062
							],
							[
								23253,
								23273
							],
							[
								23459,
								23479
							],
							[
								23672,
								23683
							],
							[
								23813,
								23828
							],
							[
								24180,
								24206
							],
							[
								24365,
								24386
							],
							[
								24548,
								24560
							],
							[
								24717,
								24732
							],
							[
								24895,
								24911
							],
							[
								25124,
								25138
							],
							[
								25218,
								25229
							],
							[
								25470,
								25486
							],
							[
								25696,
								25717
							],
							[
								25897,
								25919
							],
							[
								26131,
								26145
							],
							[
								26214,
								26237
							],
							[
								26478,
								26491
							],
							[
								26702,
								26720
							],
							[
								26899,
								26918
							],
							[
								27221,
								27241
							],
							[
								27434,
								27447
							],
							[
								27871,
								27885
							],
							[
								28046,
								28063
							],
							[
								28284,
								28302
							],
							[
								28446,
								28462
							],
							[
								28589,
								28605
							],
							[
								28667,
								28683
							],
							[
								28786,
								28802
							],
							[
								28859,
								28881
							],
							[
								28971,
								28981
							],
							[
								28982,
								28995
							],
							[
								29265,
								29282
							],
							[
								29531,
								29549
							],
							[
								30403,
								30416
							],
							[
								30676,
								30690
							],
							[
								32484,
								32497
							],
							[
								33250,
								33265
							],
							[
								34690,
								34708
							],
							[
								34855,
								34869
							],
							[
								35071,
								35086
							],
							[
								35235,
								35251
							],
							[
								35470,
								35484
							],
							[
								35624,
								35638
							],
							[
								35891,
								35907
							],
							[
								36079,
								36094
							],
							[
								36307,
								36319
							],
							[
								36630,
								36644
							],
							[
								36901,
								36918
							],
							[
								37085,
								37102
							],
							[
								37565,
								37588
							],
							[
								37771,
								37780
							],
							[
								37924,
								37933
							],
							[
								38077,
								38092
							],
							[
								38248,
								38260
							],
							[
								38410,
								38423
							],
							[
								38575,
								38589
							],
							[
								38971,
								38985
							],
							[
								39183,
								39199
							],
							[
								39359,
								39382
							],
							[
								39597,
								39622
							],
							[
								39851,
								39860
							],
							[
								40120,
								40147
							],
							[
								40229,
								40255
							],
							[
								40445,
								40464
							],
							[
								40740,
								40753
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							" Ⓜ  _ISOC99_SOURCE … — macro object",
							" Ⓜ  INFINITY … — macro object",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– time_us ( ) { … } — function",
							"—Ⓕ– ansi_length ( ) { … } — function",
							"—Ⓕ– ansi_skip ( ) { … } — function",
							"—Ⓕ– ansi_truncate ( ) { … } — function",
							"—Ⓕ– array_search ( ) { … } — function",
							"—Ⓕ– str_escape ( ) { … } — function",
							"—Ⓕ– byte_escape ( ) { … } — function",
							"—Ⓕ– dbuf_at_n ( ) { … } — function",
							"—Ⓕ– dbuf_last_line ( ) { … } — function",
							"—Ⓕ– dbuf_prepend ( ) { … } — function",
							"—Ⓕ– dbuf_put_colorstr ( ) { … } — function",
							"—Ⓕ– dbuf_put_escaped_pred ( ) { … } — function",
							"—Ⓕ– dbuf_put_unescaped_pred ( ) { … } — function",
							"—Ⓕ– dbuf_put_value ( ) { … } — function",
							"—Ⓕ– dbuf_reserve_start ( ) { … } — function",
							"—Ⓕ– dbuf_token_pop ( ) { … } — function",
							"—Ⓕ– dbuf_token_push ( ) { … } — function",
							"—Ⓕ– dbuf_tostring_free ( ) { … } — function",
							"—Ⓕ– dbuf_load ( ) { … } — function",
							"—Ⓕ– regexp_flags_fromstring ( ) { … } — function",
							"—Ⓕ– regexp_flags_tostring ( ) { … } — function",
							"—Ⓕ– regexp_from_argv ( ) { … } — function",
							"—Ⓕ– regexp_from_dbuf ( ) { … } — function",
							"—Ⓕ– regexp_compile ( ) { … } — function",
							"—Ⓕ– regexp_to_value ( ) { … } — function",
							"—Ⓕ– js_input_buffer ( ) { … } — function",
							"—Ⓕ– input_buffer_valid ( ) { … } — function",
							"—Ⓕ– input_buffer_clone ( ) { … } — function",
							"—Ⓕ– input_buffer_dump ( ) { … } — function",
							"—Ⓕ– input_buffer_free ( ) { … } — function",
							"—Ⓕ– input_buffer_peek ( ) { … } — function",
							"—Ⓕ– input_buffer_get ( ) { … } — function",
							"—Ⓕ– input_buffer_currentline ( ) { … } — function",
							"—Ⓕ– input_buffer_column ( ) { … } — function",
							"—Ⓕ– js_array_length ( ) { … } — function",
							"—Ⓕ– js_array_to_argv ( ) { … } — function",
							"—Ⓕ– js_atom_dump ( ) { … } — function",
							"—Ⓕ– js_atom_tobinary ( ) { … } — function",
							"—Ⓕ– js_atom_to_cstringlen ( ) { … } — function",
							"—Ⓕ– js_atom_toint32 ( ) { … } — function",
							"—Ⓕ– js_atom_toint64 ( ) { … } — function",
							"—Ⓕ– js_atom_tovalue ( ) { … } — function",
							"—Ⓕ– js_atom_is_index ( ) { … } — function",
							"—Ⓕ– js_atom_is_length ( ) { … } — function",
							"—Ⓕ– js_function_name ( ) { … } — function",
							"—Ⓕ– js_global_get ( ) { … } — function",
							"—Ⓕ– js_global_prototype ( ) { … } — function",
							"—Ⓕ– js_iterator_method ( ) { … } — function",
							"—Ⓕ– js_iterator_new ( ) { … } — function",
							"—Ⓕ– js_iterator_next ( ) { … } — function",
							"—Ⓕ– js_object_constructor ( ) { … } — function",
							"—Ⓕ– js_object_classname ( ) { … } — function",
							"—Ⓕ– js_object_equals ( ) { … } — function",
							"—Ⓕ– js_object_is ( ) { … } — function",
							"—Ⓕ– js_object_construct ( ) { … } — function",
							"—Ⓕ– js_object_error ( ) { … } — function",
							"—Ⓕ– js_object_stack ( ) { … } — function",
							"—Ⓕ– js_get_classid ( ) { … } — function",
							"—Ⓕ– js_has_propertystr ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_bool ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_cstringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertyint_cstring ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_int32 ( ) { … } — function",
							"—Ⓕ– js_get_propertystr_uint64 ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_string ( ) { … } — function",
							"—Ⓕ– js_set_propertyint_int ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_string ( ) { … } — function",
							"—Ⓕ– js_set_propertystr_stringlen ( ) { … } — function",
							"—Ⓕ– js_get_propertydescriptor ( ) { … } — function",
							"—Ⓕ– js_class_id ( ) { … } — function",
							"—Ⓕ– js_class_newid ( ) { … } — function",
							"—Ⓕ– js_class_get ( ) { … } — function",
							"—Ⓕ– js_class_atom ( ) { … } — function",
							"—Ⓕ– js_class_name ( ) { … } — function",
							"—Ⓕ– js_object_tostring ( ) { … } — function",
							"—Ⓕ– js_function_tostring ( ) { … } — function",
							"—Ⓕ– js_function_isnative ( ) { … } — function",
							"—Ⓕ– js_is_input ( ) { … } — function",
							"—Ⓕ– js_propenum_cmp ( ) { … } — function",
							"—Ⓕ– js_propertydescriptor_free ( ) { … } — function",
							"—Ⓕ– js_propertyenums_free ( ) { … } — function",
							"—Ⓕ– js_argv_free ( ) { … } — function",
							"—Ⓕ– js_argv_free_rt ( ) { … } — function",
							"—Ⓕ– js_argv_to_array ( ) { … } — function",
							"—Ⓕ– js_argv_length ( ) { … } — function",
							"—Ⓕ– js_argv_dup ( ) { … } — function",
							"—Ⓕ– js_intv_to_array ( ) { … } — function",
							"—Ⓕ– js_symbol_static_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_static_value ( ) { … } — function",
							"—Ⓕ– js_symbol_ctor ( ) { … } — function",
							"—Ⓕ– js_symbol_invoke_static ( ) { … } — function",
							"—Ⓕ– js_symbol_for ( ) { … } — function",
							"—Ⓕ– js_symbol_for_atom ( ) { … } — function",
							"—Ⓕ– js_symbol_to_string ( ) { … } — function",
							"—Ⓕ– js_symbol_to_cstring ( ) { … } — function",
							"—Ⓕ– js_values_dup ( ) { … } — function",
							"—Ⓕ– js_values_free ( ) { … } — function",
							"—Ⓕ– js_values_toarray ( ) { … } — function",
							"—Ⓕ– js_value_type_name ( ) { … } — function",
							"—Ⓕ– js_value_typestr ( ) { … } — function",
							"—Ⓕ– js_value_get_ptr ( ) { … } — function",
							"—Ⓕ– js_value_get_obj ( ) { … } — function",
							"—Ⓕ– js_value_get_tag ( ) { … } — function",
							"—Ⓕ– js_value_has_ref_count ( ) { … } — function",
							"—Ⓒ– value_mask { … } ; — type",
							"—Ⓕ– js_value_type ( ) { … } — function",
							"—Ⓕ– js_value_type_get ( ) { … } — function",
							"—Ⓕ– js_value_type_flag ( ) { … } — function",
							"—Ⓕ– js_value_free ( ) { … } — function",
							"—Ⓕ– js_value_clone ( ) { … } — function",
							"—Ⓕ– js_value_dump ( ) { … } — function",
							"—Ⓕ– js_value_equals ( ) { … } — function",
							"—Ⓕ– js_value_from_char ( ) { … } — function",
							"—Ⓕ– js_value_print ( ) { … } — function",
							"—Ⓕ– js_value_tosize ( ) { … } — function",
							"—Ⓕ– js_value_free_rt ( ) { … } — function",
							"—Ⓕ– js_cstring_ptr ( ) { … } — function",
							"—Ⓕ– js_cstring_dup ( ) { … } — function",
							"—Ⓕ– js_cstring_value ( ) { … } — function",
							"—Ⓕ– js_cstring_dump ( ) { … } — function",
							"—Ⓕ– token_length ( ) { … } — function",
							"—Ⓕ– js_module_name ( ) { … } — function",
							"—Ⓕ– js_module_namestr ( ) { … } — function",
							"—Ⓕ– js_is_arraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_sharedarraybuffer ( ) { … } — function",
							"—Ⓕ– js_is_map ( ) { … } — function",
							"—Ⓕ– js_is_set ( ) { … } — function",
							"—Ⓕ– js_is_generator ( ) { … } — function",
							"—Ⓕ– js_is_regexp ( ) { … } — function",
							"—Ⓕ– js_is_promise ( ) { … } — function",
							"—Ⓕ– js_is_iterable ( ) { … } — function",
							"—Ⓕ– js_is_iterator ( ) { … } — function",
							"—Ⓕ– js_is_typedarray ( ) { … } — function",
							"—Ⓕ– js_typedarray_prototype ( ) { … } — function",
							"—Ⓕ– js_typedarray_constructor ( ) { … } — function",
							"—Ⓕ– js_invoke ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_value ( ) { … } — function",
							"—Ⓕ– js_symbol_operatorset_atom ( ) { … } — function",
							"—Ⓕ– js_operators_create ( ) { … } — function",
							"—Ⓕ– js_new_number ( ) { … } — function"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACgCgAAICDik4IgIF9HTlVfU09VUkNFIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKTguKAkyBtYXggKCApIOKApiDigJQgbWFjcm8gCuKAlOKTguKAkyBtaW4gKCApIOKApiDigJQgbWFjcm8gCuKAlOKSuOKAkyBwY2dfc3RhdGVfc2V0c2VxXzY0IHsg4oCmIH0gOyDigJQgdHlwZQogIOKTiSAgcGNnMzJfcmFuZG9tX3QgOyDigJQgdHlwZWRlZgrigJTikrvigJMgcGNnMzJfcmFuZG9tX3IgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIHBjZzMyX2luaXRfc3RhdGUgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMgcGNnMzJfcmFuZG9tX2JvdW5kZWRfZGl2aXNpb25sZXNzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGdldF9lcnJvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBmaW5kX2Vycm9yICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2J5dGVjb2RlX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zdHJpbmdfZnJlZV9mdW5jICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX2FycmF5YnVmZmVyX2ZyZWVfZnVuYyAoICkgeyDigKYgfSDigJQgCuKAlOKSuOKAkyBPZmZzZXRMZW5ndGggeyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBPZmZzZXRMZW5ndGggOyDigJQgdHlwZWRlZgrigJTikrvigJMgZ2V0X29mZnNldF9sZW5ndGggKCApIHsg4oCmIH0g4oCUIAogIOKTiSAgU3lzY2FsbEVycm9yIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9kYXRhICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbmV3ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl90aHJvdyAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfZHVtcCAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19zeXNjYWxsZXJyb3JfbWV0aG9kICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9pbnNwZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX3N5c2NhbGxlcnJvcl9nZXQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfc3lzY2FsbGVycm9yX2ZpbmFsaXplciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9wb2ludGVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdG9hcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2R1cGFycmF5YnVmZmVyICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVzaXplYXJyYXlidWZmZXIgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19jb25jYXRhcnJheWJ1ZmZlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2dldHBlcmZvcm1hbmNlY291bnRlciAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX3Byb2NsaW5rICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcHJvY3JlYWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXRwcm90b3R5cGVjaGFpbiAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2hydGltZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY191bmFtZSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2J0b2EgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19hdG9iICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfY29tcGlsZV9maWxlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2Nfd3JpdGVfb2JqZWN0ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmVhZF9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19nZXR4ICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfdmFsdWV0eXBlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZXZhbGJpbmFyeSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX29wY29kZV9vYmplY3QgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19vcGNvZGVzICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfZ2V0X2J5dGVjb2RlICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfYXRvbSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2NsYXNzaWQgKCApIHsg4oCmIH0g4oCUIArigJTikrvigJMganNfbWlzY19iaXRmaWVsZF90b19hcnJheSAoICkgeyDigKYgfSDigJQgCuKAlOKSu+KAkyBqc19taXNjX2FycmF5X3RvX2JpdGZpZWxkICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfcmFuZG9tICggKSB7IOKApiB9IOKAlCAK4oCU4pK74oCTIGpzX21pc2NfaW5pdCAoICkgeyDigKYgfSDigJQgCiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QAAAAAAAAAANITAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
						"symkeys":
						[
							[
								28,
								39
							],
							[
								262,
								265
							],
							[
								304,
								307
							],
							[
								690,
								709
							],
							[
								737,
								751
							],
							[
								863,
								877
							],
							[
								1186,
								1198
							],
							[
								1262,
								1278
							],
							[
								1346,
								1379
							],
							[
								3921,
								3930
							],
							[
								4044,
								4054
							],
							[
								4229,
								4250
							],
							[
								4331,
								4350
							],
							[
								4482,
								4506
							],
							[
								4645,
								4657
							],
							[
								4698,
								4710
							],
							[
								4733,
								4750
							],
							[
								5733,
								5745
							],
							[
								5762,
								5782
							],
							[
								5929,
								5956
							],
							[
								7269,
								7288
							],
							[
								8191,
								8212
							],
							[
								8358,
								8378
							],
							[
								8884,
								8906
							],
							[
								9389,
								9412
							],
							[
								10335,
								10354
							],
							[
								11951,
								11976
							],
							[
								12316,
								12332
							],
							[
								12982,
								12999
							],
							[
								13531,
								13552
							],
							[
								14070,
								14092
							],
							[
								14761,
								14786
							],
							[
								15556,
								15581
							],
							[
								16255,
								16284
							],
							[
								16523,
								16539
							],
							[
								17463,
								17479
							],
							[
								18569,
								18594
							],
							[
								19010,
								19024
							],
							[
								19832,
								19847
							],
							[
								20318,
								20331
							],
							[
								20925,
								20937
							],
							[
								21344,
								21356
							],
							[
								21772,
								21792
							],
							[
								22521,
								22541
							],
							[
								22880,
								22899
							],
							[
								23119,
								23131
							],
							[
								25035,
								25052
							],
							[
								25650,
								25668
							],
							[
								26760,
								26780
							],
							[
								27241,
								27262
							],
							[
								27736,
								27751
							],
							[
								28319,
								28339
							],
							[
								28791,
								28803
							],
							[
								29509,
								29524
							],
							[
								31027,
								31052
							],
							[
								31591,
								31616
							],
							[
								32794,
								32808
							],
							[
								37332,
								37344
							],
							[
								38374,
								38388
							],
							[
								38418,
								38432
							]
						],
						"symlist":
						[
							" Ⓜ  _GNU_SOURCE … — macro object",
							"—Ⓜ– max ( ) … — macro function",
							"—Ⓜ– min ( ) … — macro function",
							"—Ⓒ– pcg_state_setseq_64 { … } ; — type",
							" Ⓣ  pcg32_random_t ; — typedef",
							"—Ⓕ– pcg32_random_r ( ) { … } — function",
							"—Ⓕ– pcg32_random ( ) { … } — function",
							"—Ⓕ– pcg32_init_state ( ) { … } — function",
							"—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — function",
							"—Ⓕ– get_error ( ) { … } — function",
							"—Ⓕ– find_error ( ) { … } — function",
							"—Ⓕ– js_bytecode_free_func ( ) { … } — function",
							"—Ⓕ– js_string_free_func ( ) { … } — function",
							"—Ⓕ– js_arraybuffer_free_func ( ) { … } — function",
							"—Ⓒ– OffsetLength { … } ; — type",
							" Ⓣ  OffsetLength ; — typedef",
							"—Ⓕ– get_offset_length ( ) { … } — function",
							" Ⓣ  SyscallError ; — typedef",
							"—Ⓕ– js_syscallerror_data ( ) { … } — function",
							"—Ⓕ– js_syscallerror_constructor ( ) { … } — function",
							"—Ⓕ– js_syscallerror_new ( ) { … } — function",
							"—Ⓕ– js_syscallerror_throw ( ) { … } — function",
							"—Ⓕ– js_syscallerror_dump ( ) { … } — function",
							"—Ⓕ– js_syscallerror_method ( ) { … } — function",
							"—Ⓕ– js_syscallerror_inspect ( ) { … } — function",
							"—Ⓕ– js_syscallerror_get ( ) { … } — function",
							"—Ⓕ– js_syscallerror_finalizer ( ) { … } — function",
							"—Ⓕ– js_misc_tostring ( ) { … } — function",
							"—Ⓕ– js_misc_topointer ( ) { … } — function",
							"—Ⓕ– js_misc_toarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_duparraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_resizearraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_concatarraybuffer ( ) { … } — function",
							"—Ⓕ– js_misc_getperformancecounter ( ) { … } — function",
							"—Ⓕ– js_misc_proclink ( ) { … } — function",
							"—Ⓕ– js_misc_procread ( ) { … } — function",
							"—Ⓕ– js_misc_getprototypechain ( ) { … } — function",
							"—Ⓕ– js_misc_hrtime ( ) { … } — function",
							"—Ⓕ– js_misc_fnmatch ( ) { … } — function",
							"—Ⓕ– js_misc_uname ( ) { … } — function",
							"—Ⓕ– js_misc_btoa ( ) { … } — function",
							"—Ⓕ– js_misc_atob ( ) { … } — function",
							"—Ⓕ– js_misc_compile_file ( ) { … } — function",
							"—Ⓕ– js_misc_write_object ( ) { … } — function",
							"—Ⓕ– js_misc_read_object ( ) { … } — function",
							"—Ⓕ– js_misc_getx ( ) { … } — function",
							"—Ⓕ– js_misc_valuetype ( ) { … } — function",
							"—Ⓕ– js_misc_evalbinary ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_array ( ) { … } — function",
							"—Ⓕ– js_misc_opcode_object ( ) { … } — function",
							"—Ⓕ– js_misc_opcodes ( ) { … } — function",
							"—Ⓕ– js_misc_get_bytecode ( ) { … } — function",
							"—Ⓕ– js_misc_atom ( ) { … } — function",
							"—Ⓕ– js_misc_classid ( ) { … } — function",
							"—Ⓕ– js_misc_bitfield_to_array ( ) { … } — function",
							"—Ⓕ– js_misc_array_to_bitfield ( ) { … } — function",
							"—Ⓕ– js_misc_random ( ) { … } — function",
							"—Ⓕ– js_misc_init ( ) { … } — function",
							" Ⓜ  JS_INIT_MODULE … — macro object",
							" Ⓜ  JS_INIT_MODULE … — macro object"
						]
					},
					"",
					"AQAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"contents": "#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include \"cutils.h\"\n#include \"iteration.h\"\n#include \"list.h\"\n#include \"property-enumeration.h\"\n#include \"quickjs-internal.h\"\n#include \"quickjs.h\"\n#include \"utils.h\"\n#include \"vector.h\"\n\n#include <ctype.h>\n#include <math.h>\n#include <string.h>\n#include <sys/ioctl.h>\n#include <termios.h>\n\nthread_local JSAtom inspect_custom_atom = 0, inspect_custom_atom_node = 0;\n\n#define INSPECT_INT32T_INRANGE(i) ((i) > INT32_MIN && (i) < INT32_MAX)\n#define INSPECT_LEVEL(opts) ((opts)->depth - (depth))\n#define INSPECT_IS_COMPACT(opts)                                                                                       \\\n  ((opts)->compact == INT32_MAX                                                                                        \\\n       ? TRUE                                                                                                          \\\n       : INSPECT_INT32T_INRANGE((opts)->compact) ? ((opts)->compact < 0 ? INSPECT_LEVEL(opts) >= -(opts->compact)      \\\n                                                                        : INSPECT_LEVEL(opts) >= (opts)->compact)      \\\n                                                 : 0)\n\ntypedef struct {\n  int colors : 1;\n  int show_hidden : 1;\n  int custom_inspect : 1;\n  int show_proxy : 1;\n  int getters : 1;\n  int string_break_newline : 1;\n  int32_t depth;\n  int32_t max_array_length;\n  int32_t max_string_length;\n  int32_t break_length;\n  int32_t compact;\n  int32_t proto_chain;\n  int32_t number_base;\n  Vector hide_keys;\n} inspect_options_t;\n\nstruct prop_key;\n\ntypedef struct prop_key {\n  struct list_head link;\n  const char* name;\n  JSAtom atom;\n} prop_key_t;\n\nstatic int js_inspect_print(JSContext* ctx, DynBuf* buf, JSValueConst value, inspect_options_t* opts, int32_t depth);\n\nstatic int\nregexp_predicate(int c) {\n  switch(c) {\n    case 8: return 'u';\n    case 12: return 'f';\n    case 10: return 'n';\n    case 13: return 'r';\n    case 9: return 't';\n    case 11: return 'v';\n  }\n  if(c < 0x20)\n    return 'u';\n  return 0;\n}\n\nstatic inline int\ninspect_screen_width(void) {\n  struct winsize w = {.ws_col = -1, .ws_row = -1};\n  ioctl(1, TIOCGWINSZ, &w);\n  return w.ws_col;\n}\n\nstatic void\ninspect_options_init(inspect_options_t* opts, JSContext* ctx) {\n  opts->colors = TRUE;\n  opts->show_hidden = FALSE;\n  opts->custom_inspect = TRUE;\n  opts->show_proxy = FALSE;\n  opts->getters = FALSE;\n  opts->string_break_newline = FALSE;\n  opts->depth = INT32_MAX;\n  opts->max_array_length = 300;\n  opts->max_string_length = INT32_MAX;\n  opts->break_length = inspect_screen_width();\n  opts->compact = 5;\n  opts->proto_chain = 0;\n  opts->number_base = 10;\n  vector_init(&opts->hide_keys, ctx);\n}\n\nstatic void\ninspect_options_free(inspect_options_t* opts, JSContext* ctx) {\n\n  prop_key_t* key;\n\n  vector_foreach_t(&opts->hide_keys, key) {\n    JS_FreeAtom(ctx, key->atom);\n    js_cstring_free(ctx, key->name);\n  }\n  vector_free(&opts->hide_keys);\n}\n\nstatic void\ninspect_options_get(inspect_options_t* opts, JSContext* ctx, JSValueConst object) {\n  JSValue value;\n  value = JS_GetPropertyStr(ctx, object, \"colors\");\n  if(!JS_IsException(value) && !JS_IsUndefined(value))\n    opts->colors = JS_ToBool(ctx, value);\n  JS_FreeValue(ctx, value);\n\n  value = JS_GetPropertyStr(ctx, object, \"showHidden\");\n  if(!JS_IsException(value) && !JS_IsUndefined(value))\n    opts->show_hidden = JS_ToBool(ctx, value);\n  JS_FreeValue(ctx, value);\n\n  value = JS_GetPropertyStr(ctx, object, \"customInspect\");\n  if(!JS_IsException(value) && !JS_IsUndefined(value))\n    opts->custom_inspect = JS_ToBool(ctx, value);\n  JS_FreeValue(ctx, value);\n\n  value = JS_GetPropertyStr(ctx, object, \"showProxy\");\n  if(!JS_IsException(value) && !JS_IsUndefined(value))\n    opts->show_proxy = JS_ToBool(ctx, value);\n  JS_FreeValue(ctx, value);\n\n  value = JS_GetPropertyStr(ctx, object, \"getters\");\n  if(!JS_IsException(value) && !JS_IsUndefined(value))\n    opts->getters = JS_ToBool(ctx, value);\n  JS_FreeValue(ctx, value);\n\n  value = JS_GetPropertyStr(ctx, object, \"stringBreakNewline\");\n  if(!JS_IsException(value) && !JS_IsUndefined(value))\n    opts->string_break_newline = JS_ToBool(ctx, value);\n  JS_FreeValue(ctx, value);\n\n  value = JS_GetPropertyStr(ctx, object, \"depth\");\n  if(!JS_IsException(value) && !JS_IsUndefined(value)) {\n    if(isinf(JS_VALUE_GET_FLOAT64(value)))\n      opts->depth = INT32_MAX;\n    else\n      JS_ToInt32(ctx, &opts->depth, value);\n    JS_FreeValue(ctx, value);\n  }\n  value = JS_GetPropertyStr(ctx, object, \"maxArrayLength\");\n  if(!JS_IsUndefined(value)) {\n    if(isinf(JS_VALUE_GET_FLOAT64(value)))\n      opts->max_array_length = INT32_MAX;\n    else\n      JS_ToInt32(ctx, &opts->max_array_length, value);\n    JS_FreeValue(ctx, value);\n  }\n  value = JS_GetPropertyStr(ctx, object, \"maxStringLength\");\n  if(!JS_IsUndefined(value)) {\n    if(isinf(JS_VALUE_GET_FLOAT64(value)))\n      opts->max_string_length = INT32_MAX;\n    else\n      JS_ToInt32(ctx, &opts->max_string_length, value);\n    JS_FreeValue(ctx, value);\n  }\n  value = JS_GetPropertyStr(ctx, object, \"breakLength\");\n  if(!JS_IsUndefined(value)) {\n    if(isinf(JS_VALUE_GET_FLOAT64(value)))\n      opts->break_length = INT32_MAX;\n    else\n      JS_ToInt32(ctx, &opts->break_length, value);\n    JS_FreeValue(ctx, value);\n  }\n  value = JS_GetPropertyStr(ctx, object, \"compact\");\n  if(!JS_IsUndefined(value)) {\n    if(JS_VALUE_GET_TAG(value) == JS_TAG_BOOL && JS_VALUE_GET_BOOL(value) == 0)\n      opts->compact = INT32_MIN;\n    else if(JS_VALUE_GET_TAG(value) == JS_TAG_FLOAT64 && isinf(JS_VALUE_GET_FLOAT64(value)))\n      opts->compact = INT32_MAX;\n    else\n      JS_ToInt32(ctx, &opts->compact, value);\n    JS_FreeValue(ctx, value);\n  }\n  value = JS_GetPropertyStr(ctx, object, \"hideKeys\");\n  if(JS_IsArray(ctx, value)) {\n    int64_t len, pos;\n    len = js_array_length(ctx, value);\n\n    for(pos = 0; pos < len; pos++) {\n      JSValue item = JS_GetProperty                 32(ctx, value, pos);\n      prop_key_t key;\n      key.name = JS_VALUE_GET_TAG(item) == JS_TAG_SYMBOL ? 0 : JS_ToCString(ctx, item);\n      key.atom = JS_ValueToAtom(ctx, item);\n      vector_push(&opts->hide_keys, key);\n      JS_FreeValue(ctx, item);\n    }\n    JS_FreeValue(ctx, value);\n  }\n  value = JS_GetPropertyStr(ctx, object, \"protoChain\");\n  if(JS_IsNumber(value))\n    JS_ToInt32(ctx, &opts->proto_chain, value);\n  JS_FreeValue(ctx, value);\n\n  value = JS_GetPropertyStr(ctx, object, \"numberBase\");\n  if(JS_IsNumber(value))\n    JS_ToInt32(ctx, &opts->number_base, value);\n  JS_FreeValue(ctx, value);\n}\n\nstatic JSValue\ninspect_options_object(inspect_options_t* opts, JSContext* ctx) {\n  JSValue arr, ret = JS_NewObject(ctx);\n  uint32_t n;\n  prop_key_t* key;\n\n  JS_SetPropertyStr(ctx, ret, \"colors\", JS_NewBool(ctx, opts->colors));\n  JS_SetPropertyStr(ctx, ret, \"showHidden\", JS_NewBool(ctx, opts->show_hidden));\n  JS_SetPropertyStr(ctx, ret, \"customInspect\", JS_NewBool(ctx, opts->custom_inspect));\n  JS_SetPropertyStr(ctx, ret, \"showProxy\", JS_NewBool(ctx, opts->show_proxy));\n  JS_SetPropertyStr(ctx, ret, \"getters\", JS_NewBool(ctx, opts->getters));\n  JS_SetPropertyStr(ctx, ret, \"stringBreakNewline\", JS_NewBool(ctx, opts->string_break_newline));\n  JS_SetPropertyStr(ctx, ret, \"depth\", js_new_number(ctx, opts->depth));\n  JS_SetPropertyStr(ctx, ret, \"maxArrayLength\", js_new_number(ctx, opts->max_array_length));\n  JS_SetPropertyStr(ctx, ret, \"maxStringLength\", js_new_number(ctx, opts->max_string_length));\n  JS_SetPropertyStr(ctx, ret, \"breakLength\", js_new_number(ctx, opts->break_length));\n  JS_SetPropertyStr(ctx, ret, \"compact\", js_new_bool_or_number(ctx, opts->compact));\n  if(opts->proto_chain)\n    JS_SetPropertyStr(ctx, ret, \"protoChain\", js_new_number(ctx, opts->proto_chain));\n  arr = JS_NewArray(ctx);\n  n = 0;\n  vector_foreach_t(&opts->hide_keys, key) { JS_SetPropertyUint32(ctx, arr, n++, js_atom_tovalue(ctx, key->atom)); }\n  JS_SetPropertyStr(ctx, ret, \"hideKeys\", arr);\n  JS_SetPropertyStr(ctx, ret, \"numberBase\", js_new_number(ctx, opts->number_base));\n  return ret;\n}\n\nstatic int\ninspect_options_hidden(inspect_options_t* opts, JSAtom atom) {\n  prop_key_t* key;\n  vector_foreach_t(&opts->hide_keys, key) {\n    if(key->atom == atom) //! strcmp(key->name, str))\n      return 1;\n  }\n  return 0;\n}\n\nstatic void\ninspect_newline(DynBuf* buf, int32_t depth) {\n  dbuf_putc(buf, '\\n');\n  while(depth-- > 0) dbuf_putstr(buf, \"  \");\n}\n\nstatic int\njs_object_getpropertynames(JSContext* ctx, union Vector* propenum_tab, JSValueConst obj, int flags) {\n  int ret;\n  JSPropertyEnum* tmp_tab;\n  uint32_t i, tmp_len;\n  ret = JS_GetOwnPropertyNames(ctx, &tmp_tab, &tmp_len, obj, flags);\n\n  for(i = 0; i < tmp_len; i++) {\n    if(vector_find(propenum_tab, sizeof(JSPropertyEnum), &tmp_tab[i]) == -1)\n      vector_put(propenum_tab, &tmp_tab[i], sizeof(JSPropertyEnum));\n  }\n\n  js_free(ctx, tmp_tab);\n  return ret;\n}\n\nstatic int\njs_object_getpropertynames_recursive(JSContext* ctx, union Vector* propenum_tab, JSValueConst obj, int flags) {\n  int ret;\n\n  if((ret = js_object_getpropertynames(ctx, propenum_tab, obj, flags)) >= 0) {\n    JSValue proto = JS_GetPrototype(ctx, obj);\n\n    if(JS_IsObject(proto))\n      ret = js_object_getpropertynames_recursive(ctx, propenum_tab, proto, flags);\n  }\n\n  return ret;\n}\n\nstatic JSAtom\njs_inspect_custom_atom(JSContext* ctx, const char* sym_for) {\n  JSValue key, sym;\n  JSAtom atom;\n  key = JS_NewString(ctx, sym_for ? sym_for : \"quickjs.inspect.custom\");\n  sym = js_symbol_invoke_static(ctx, \"for\", key);\n  JS_FreeValue(ctx, key);\n  atom = JS_ValueToAtom(ctx, sym);\n  JS_FreeValue(ctx, sym);\n\n  return atom;\n}\n\nstatic JSValue\njs_inspect_custom_call(JSContext* ctx, JSValueConst obj, inspect_options_t* opts, int32_t depth) {\n  JSValue ret = JS_UNDEFINED;\n  JSValue inspect = JS_UNDEFINED;\n  JSAtom prop;\n\n  if(JS_VALUE_GET_OBJ(obj)->class_id) {\n    if(JS_HasProperty(ctx, obj, inspect_custom_atom))\n      inspect = JS_GetProperty(ctx, obj, inspect_custom_atom);\n    else if(JS_HasProperty(ctx, obj, inspect_custom_atom_node))\n      inspect = JS_GetProperty(ctx, obj, inspect_custom_atom_node);\n  }\n  if(JS_IsFunction(ctx, inspect)) {\n    JSValueConst args[2];\n    inspect_options_t opts_nocustom;\n    memcpy(&opts_nocustom, opts, sizeof(inspect_options_t));\n    opts_nocustom.custom_inspect = FALSE;\n    args[0] = js_new_number(ctx, INSPECT_LEVEL(opts));\n    args[1] = inspect_options_object(&opts_nocustom, ctx);\n    ret = JS_Call(ctx, inspect, obj, 2, args);\n    JS_FreeValue(ctx, args[0]);\n    JS_FreeValue(ctx, args[1]);\n    /*   str = JS_ToCString(ctx, ret);\n       JS_FreeValue(ctx, ret);*/\n  }\n\n  JS_FreeValue(ctx, inspect);\n  return ret;\n}\n\nstatic int\njs_inspect_map(JSContext* ctx, DynBuf* buf, JSValueConst obj, inspect_options_t* opts, int32_t depth) {\n  BOOL ret, finish = FALSE;\n  size_t i = 0;\n  int compact = INSPECT_IS_COMPACT(opts);\n  // printf(\"js_inspect_map level=%u opts->depth=%\" PRId32 \" depth=%\" PRId32 \" compact=%i\\n\",\n  // INSPECT_LEVEL(opts), opts->depth, depth, compact);\n  JSValue data, key, value;\n  Iteration it;\n  if(!(ret = iteration_method_symbol(&it, ctx, obj, \"iterator\"))) {\n    JS_ThrowTypeError(ctx, \"js_inspect_map tag=%d\\n\", JS_VALUE_GET_TAG(obj));\n    return 0;\n  }\n  dbuf_putstr(buf, \"Map {\");\n  if(!compact && opts->break_length != INT32_MAX)\n    inspect_newline(buf, INSPECT_LEVEL(opts));\n  for(i = 0; !(finish = iteration_next(&it, ctx)); i++) {\n    if(!finish) {\n      data = iteration_value(&it, ctx);\n      if(i) {\n        dbuf_putstr(buf, \",\");\n        if(!compact && opts->break_length != INT32_MAX)\n          inspect_newline(buf, INSPECT_LEVEL(opts));\n      }\n      dbuf_putstr(buf, compact ? \" \" : \"  \");\n      key = JS_GetPropertyUint32(ctx, data, 0);\n      js_inspect_print(ctx, buf, key, opts, depth - 1);\n      dbuf_putstr(buf, \" => \");\n      value = JS_GetPropertyUint32(ctx, data, 1);\n      js_inspect_print(ctx, buf, value, opts, depth - 1);\n      JS_FreeValue(ctx, key);\n      JS_FreeValue(ctx, value);\n      JS_FreeValue(ctx, data);\n    }\n  }\n  if(!compact && opts->break_length != INT32_MAX)\n    inspect_newline(buf, INSPECT_LEVEL(opts));\n  dbuf_putstr(buf, compact ? \" }\" : \"}\");\n  iteration_reset(&it, JS_GetRuntime(ctx));\n  return 0;\n}\n\nstatic int\njs_inspect_set(JSContext* ctx, DynBuf* buf, JSValueConst obj, inspect_options_t* opts, int32_t depth) {\n  BOOL ret, finish = FALSE;\n  size_t i = 0;\n  int compact = INSPECT_IS_COMPACT(opts);\n  JSValue value;\n  Iteration it;\n\n  if(!(ret = iteration_method_symbol(&it, ctx, obj, \"iterator\"))) {\n    JS_ThrowTypeError(ctx, \"js_inspect_map tag=%d\\n\", JS_VALUE_GET_TAG(obj));\n    return 0;\n  }\n  dbuf_putstr(buf, \"Set [\");\n  if(!compact && opts->break_length != INT32_MAX)\n    inspect_newline(buf, INSPECT_LEVEL(opts));\n  for(i = 0; !(finish = iteration_next(&it, ctx)); i++) {\n    if(!finish) {\n      value = iteration_value(&it, ctx);\n      if(i) {\n        dbuf_putstr(buf, \",\");\n        if(!compact && opts->break_length != INT32_MAX)\n          inspect_newline(buf, INSPECT_LEVEL(opts));\n      }\n      dbuf_putstr(buf, compact ? \" \" : \"  \");\n      js_inspect_print(ctx, buf, value, opts, depth);\n      JS_FreeValue(ctx, value);\n    }\n  }\n  if(!compact && opts->break_length != INT32_MAX)\n    inspect_newline(buf, INSPECT_LEVEL(opts));\n  dbuf_putstr(buf, compact ? \" ]\" : \"]\");\n  iteration_reset(&it, JS_GetRuntime(ctx));\n  return 0;\n}\n\nstatic int\njs_inspect_arraybuffer(JSContext* ctx, DynBuf* buf, JSValueConst value, inspect_options_t* opts, int32_t depth) {\n  const char *str, *str2;\n  uint8_t* ptr;\n  size_t i, slen, size;\n  int break_len = opts->break_length; // inspect_screen_width();\n  int column = dbuf_get_column(buf);\n  JSValue proto;\n  break_len = (break_len + 1) / 3;\n  break_len *= 3;\n\n  if(break_len > opts->break_length)\n    break_len = opts->break_length;\n  ptr = JS_GetArrayBuffer(ctx, &size, value);\n  // printf(\"maxArrayLength: %i\\n\", opts->max_array_length);\n  proto = JS_GetPrototype(ctx, value);\n  str = js_object_tostring(ctx, proto);\n  JS_FreeValue(ctx, proto);\n\n  if(js_is_arraybuffer(ctx, value))\n    dbuf_putstr(buf, \"ArrayBuffer\");\n  else if(js_is_sharedarraybuffer(ctx, value))\n    dbuf_putstr(buf, \"SharedArrayBuffer\");\n  else if(str && (str2 = strchr(str, ' '))) {\n    str2++;\n    slen = byte_chr(str2, strlen(str2), ']');\n    dbuf_append(buf, (const uint8_t*)str2, slen);\n  }\n\n  if(str)\n    js_cstring_free(ctx, str);\n\n  dbuf_putstr(buf, \" {\");\n  inspect_newline(buf, (opts->depth - depth) + 2);\n  dbuf_printf(buf, \"byteLength: %zu [\", size);\n  inspect_newline(buf, (opts->depth - depth) + 3);\n  break_len -= ((opts->depth - depth) + 3) * 2;\n  column = 0;\n\n  for(i = 0; i < size; i++) {\n    if(i == (size_t)opts->max_array_length)\n      break;\n    if(column + 3 >= break_len && opts->break_length != INT32_MAX) {\n      inspect_newline(buf, (opts->depth - depth) + 3);\n      column = 0;\n    }\n    dbuf_printf(buf, column ? \" %02x\" : \"%02x\", ptr[i]);\n    column += column ? 3 : 2;\n  }\n  if(i < size) {\n    inspect_newline(buf, (opts->depth - depth) + 3);\n\n    dbuf_printf(buf, \"... %zu more bytes\", size - i);\n  }\n  inspect_newline(buf, (opts->depth - depth) + 2);\n  dbuf_putstr(buf, \"]\");\n  inspect_newline(buf, (opts->depth - depth) + 1);\n  dbuf_putstr(buf, \"}\");\n  return 0;\n}\n\nstatic int\njs_inspect_regexp(JSContext* ctx, DynBuf* buf, JSValueConst value, inspect_options_t* opts, int32_t depth) {\n  const char* str;\n  size_t len;\n  str = JS_ToCStringLen(ctx, &len, value);\n  if(opts->colors)\n    dbuf_putstr(buf, \"\\x1b[0;31m\");\n  dbuf_put_escaped_pred(buf, str, len, regexp_predicate);\n  if(opts->colors)\n    dbuf_putstr(buf, \"\\x1b[m\");\n  js_cstring_free(ctx, str);\n  return 0;\n}\n\nstatic int\njs_inspect_number(JSContext* ctx, DynBuf* buf, JSValueConst value, inspect_options_t* opts, int32_t depth) {\n  int tag = JS_VALUE_GET_TAG(value);\n  const char* str;\n  size_t len;\n  JSValue number, base;\n  if(tag != JS_TAG_SYMBOL && opts->colors)\n    dbuf_putstr(buf, COLOR_LIGHTYELLOW);\n  if(opts->number_base && opts->number_base != 10) {\n    base = JS_NewInt32(ctx, 16);\n    number = js_invoke(ctx, value, \"toString\", 1, &base);\n    JS_FreeValue(ctx, base);\n\n  } else {\n    number = JS_DupValue(ctx, value);\n  }\n  str = JS_ToCStringLen(ctx, &len, number);\n  JS_FreeValue(ctx, number);\n\n  switch(opts->number_base) {\n    case 16: dbuf_putstr(buf, \"0x\"); break;\n    case 2: dbuf_putstr(buf, \"0b\"); break;\n    case 8: dbuf_putstr(buf, \"0\"); break;\n  }\n\n  dbuf_append(buf, (const uint8_t*)str, len);\n  js_cstring_free(ctx, str);\n  if(tag <= JS_TAG_BIG_FLOAT)\n    dbuf_putc(buf, tag == JS_TAG_BIG_DECIMAL ? 'm' : tag == JS_TAG_BIG_FLOAT ? 'l' : 'n');\n  if(opts->colors)\n    dbuf_putstr(buf, COLOR_NONE);\n  return 0;\n}\n\nstatic int\njs_inspect_string(JSContext* ctx, DynBuf* buf, JSValueConst value, inspect_options_t* opts, int32_t depth) {\n  int tag = JS_VALUE_GET_TAG(value);\n  int compact = INSPECT_IS_COMPACT(opts);\n\n  const char* str;\n  size_t pos, len, max_len, limit, column_start = (INSPECT_LEVEL(opts) * 2);\n  str = JS_ToCStringLen(ctx, &len, value);\n  max_len = min_size(opts->break_length - dbuf_get_column(buf) - 10, len);\n\n  if(tag != JS_TAG_SYMBOL && opts->colors)\n    dbuf_putstr(buf, COLOR_GREEN);\n  dbuf_putc(buf, tag == JS_TAG_SYMBOL ? '(' : '\\'');\n  limit = min_size(opts->max_string_length, len);\n\n  for(pos = 0; pos < limit;) {\n    size_t i, n, eol;\n    n = limit - pos;\n    if(pos > 0) {\n      dbuf_putstr(buf, opts->colors ? \"'\" COLOR_NONE \" +\" : \"' +\");\n      max_len = opts->break_length - column_start - 8;\n      inspect_newline(buf, INSPECT_LEVEL(opts) + 1);\n      dbuf_putstr(buf, opts->colors ? COLOR_GREEN \"'\" : \"'\");\n    }\n    if(compact) {\n      n = ansi_truncate(&str[pos], n, max_len);\n    } else if(opts->string_break_newline) {\n      for(i = pos; i < limit; i += eol) {\n        eol = byte_chr(&str[i], limit - i, '\\n');\n        if(str[i + eol] == '\\n')\n          eol++;\n\n        if(i > pos && ansi_truncate(&str[pos], i + eol - pos, max_len) < i + eol - pos) {\n          n = i - pos;\n          break;\n        }\n      }\n    }\n    dbuf_put_escaped(buf, &str[pos], n);\n    pos += n;\n  }\n  js_cstring_free(ctx, str);\n  dbuf_putc(buf, tag == JS_TAG_SYMBOL ? ')' : '\\'');\n\n  if(opts->colors)\n    dbuf_putstr(buf, COLOR_NONE);\n\n  if(limit < len) {\n    if(opts->break_length != INT32_MAX && dbuf_get_column(buf) + 26 > opts->break_length)\n      inspect_newline(buf, INSPECT_LEVEL(opts) + 1);\n    dbuf_printf(buf, \"... %zu more characters\", len - pos);\n  }\n  return 0;\n}\n\nstatic int\njs_inspect_print(JSContext* ctx, DynBuf* buf, JSValueConst value, inspect_options_t* opts, int32_t depth) {\n  int tag = JS_VALUE_GET_TAG(value);\n  // int compact = INSPECT_IS_COMPACT(opts);\n  // printf(\"js_inspect_print level: %d\\n\", INSPECT_LEVEL(opts));\n  switch(tag) {\n    case JS_TAG_FLOAT64:\n    case JS_TAG_BIG_DECIMAL:\n    case JS_TAG_BIG_INT:\n    case JS_TAG_INT:\n    case JS_TAG_BIG_FLOAT: {\n      return js_inspect_number(ctx, buf, value, opts, depth);\n    }\n\n      /* case JS_TAG_INT: {\n         int i = JS_VALUE_GET_INT(value);\n         if(opts->colors)\n           dbuf_putstr(buf, COLOR_YELLOW);\n         dbuf_printf(buf, \"%i\", i);\n         if(opts->colors)\n           dbuf_putstr(buf, COLOR_NONE);\n         break;\n       }*/\n\n    case JS_TAG_BOOL: {\n      if(opts->colors)\n        dbuf_putstr(buf, COLOR_YELLOW);\n      dbuf_putstr(buf, JS_VALUE_GET_BOOL(value) ? \"true\" : \"false\");\n      if(opts->colors)\n        dbuf_putstr(buf, COLOR_NONE);\n      break;\n    }\n\n    case JS_TAG_NULL: {\n      dbuf_putstr(buf, opts->colors ? \"\\x1b[38;5;129mnull\\x1b[m\" : \"null\");\n      break;\n    }\n\n    case JS_TAG_UNDEFINED: {\n      dbuf_put_colorstr(buf, \"undefined\", COLOR_GRAY, opts->colors);\n      break;\n    }\n\n    case JS_TAG_EXCEPTION: {\n      dbuf_put_colorstr(buf, \"[exception]\", COLOR_RED, opts->colors);\n      break;\n    }\n\n    case JS_TAG_SYMBOL: {\n      value = js_symbol_to_string(ctx, value);\n      if(opts->colors)\n        dbuf_putstr(buf, COLOR_GREEN);\n      dbuf_putstr(buf, \"Symbol\");\n      __attribute__((fallthrough));\n    }\n\n    case JS_TAG_STRING: {\n      return js_inspect_string(ctx, buf, value, opts, depth);\n    }\n\n    case JS_TAG_OBJECT: {\n      BOOL is_array = 0, is_typedarray = 0, is_function = 0;\n      uint32_t pos, len, limit;\n      Vector propenum_tab;\n      const char* s = 0;\n      int compact = opts->compact;\n      JSObject* obj = JS_VALUE_GET_OBJ(value);\n\n      if(!obj->prop || !obj->shape) {\n        dbuf_printf(buf, \"js_inspect_print Object prop = %p, shape = %p \", obj->prop, obj->shape);\n        return -1;\n      }\n\n      if(opts->custom_inspect) {\n        JSValue tmp = js_inspect_custom_call(ctx, value, opts, depth);\n        if(JS_IsString(tmp)) {\n          const char* s = JS_ToCString(ctx, tmp);\n          dbuf_putstr(buf, s);\n          js_cstring_free(ctx, s);\n          return 0;\n        }\n\n        if(JS_IsException(tmp)) {\n          JSValue exception = JS_GetException(ctx);\n\n          // dbuf_printf(buf, \"exception: %s\\n\", JS_ToCString(ctx, exception));\n          // return 0;\n\n        } else if(!JS_IsUndefined(tmp)) {\n          if(!JS_IsObject(tmp))\n            return js_inspect_print(ctx, buf, tmp, opts, depth + 1);\n\n          value = tmp;\n          compact++;\n        }\n      }\n\n      if(opts->compact < 0) {\n        compact = depth >= -opts->compact;\n      } else if(INSPECT_INT32T_INRANGE(opts->compact) && opts->compact > 0) {\n        int32_t deepest = 1;\n\n        if(!js_is_arraybuffer(ctx, value))\n          deepest = property_enumeration_deepest(ctx, value);\n        const char* typestr = js_value_typestr(ctx, value);\n        // printf(\"%s opts->compact = %d, deepest = %d, depth = %d\\n\", typestr ? typestr : \"(null)\", opts->compact,\n        // deepest, depth);\n\n        compact = compact > deepest;\n      }\n\n      if(!(is_function = JS_IsFunction(ctx, value))) {\n        is_array = js_is_array(ctx, value);\n        is_typedarray = js_is_typedarray(ctx, value);\n\n        if(!is_array && !is_typedarray) {\n          if(js_is_arraybuffer(ctx, value) || js_is_sharedarraybuffer(ctx, value))\n            return js_inspect_arraybuffer(ctx, buf, value, opts, depth + 1);\n\n          if(js_is_map(ctx, value))\n            return js_inspect_map(ctx, buf, value, opts, depth /*+ 1*/);\n          if(js_is_set(ctx, value))\n            return js_inspect_set(ctx, buf, value, opts, depth + 1);\n          if(js_is_regexp(ctx, value))\n            return js_inspect_regexp(ctx, buf, value, opts, depth + 1);\n          /*if(JS_IsInstanceOf(ctx, value, proxy_ctor)) {\n            dbuf_putstr(buf, \"[Proxy]\");\n            return 0;\n          }*/\n        }\n\n        if(js_object_tmpmark_isset(value)) {\n          JS_ThrowTypeError(ctx, \"circular reference\");\n          return -1;\n        }\n\n        s = js_object_tostring(ctx, value);\n        if(!strcmp(s, \"[object Generator]\")) {\n          dbuf_putstr(buf, \"Object [Generator] {}\");\n          js_cstring_free(ctx, s);\n          return 0;\n        }\n      }\n\n      if(!JS_IsArray(ctx, value) && !is_function && !strncmp(s, \"[object \", 8)) {\n        const char* e = strchr(s, ']');\n        size_t slen = e - (s + 8);\n\n        if(slen != 6 || memcmp(s + 8, \"Object\", 6)) {\n          dbuf_putstr(buf, opts->colors ? COLOR_LIGHTRED : \"[\");\n          // dbuf_putstr(buf, opts->colors ? COLOR_MARINE \"[\" : \"[\");\n          dbuf_append(buf, (const uint8_t*)s + 8, e - (s + 8));\n          // dbuf_putstr(buf, opts->colors ? \"]\" COLOR_NONE \" \" : \"] \");\n          dbuf_putstr(buf, opts->colors ? COLOR_NONE \" \" : \"] \");\n        }\n      }\n      js_cstring_free(ctx, s);\n\n      vector_init(&propenum_tab, ctx);\n\n      if(js_object_getpropertynames_recursive(ctx,\n                                              &propenum_tab,\n                                              opts->proto_chain ? JS_GetPrototype(ctx, value) : value,\n                                              JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK |\n                                                  (opts->show_hidden ? 0 : JS_GPN_ENUM_ONLY)))\n        return -1;\n\n      if(is_function) {\n        JSValue name;\n        dbuf_putstr(buf, opts->colors ? COLOR_MARINE \"[Function\" : \"[Function\");\n        name = JS_GetPropertyStr(ctx, value, \"name\");\n        if(!JS_IsUndefined(name)) {\n          s = JS_ToCString(ctx, name);\n          if(*s) {\n            dbuf_putstr(buf, \": \");\n            dbuf_putstr(buf, s);\n          }\n          js_cstring_free(ctx, s);\n        }\n        JS_FreeValue(ctx, name);\n        dbuf_putstr(buf, opts->colors ? \"]\" COLOR_NONE : \"]\");\n        if(vector_size(&propenum_tab, sizeof(JSPropertyDescriptor)) && depth >= 0)\n          dbuf_putc(buf, ' ');\n        else\n          goto end_obj;\n      }\n      if(depth < 0) {\n        dbuf_put_colorstr(buf, is_array ? \"[Array]\" : \"[Object]\", COLOR_MARINE, opts->colors);\n        goto end_obj;\n      }\n\n      js_object_tmpmark_set(value);\n\n      if(is_array || is_typedarray) {\n        len = js_array_length(ctx, value);\n        dbuf_putstr(buf, compact && opts->break_length != INT32_MAX ? \"[ \" : \"[\");\n        limit = min_size(opts->max_array_length, len);\n        if(len && !compact && opts->break_length != INT32_MAX)\n          inspect_newline(buf, INSPECT_LEVEL(opts) + 1);\n        for(pos = 0; pos < len; pos++) {\n          JSPropertyDescriptor desc;\n          JSAtom prop;\n          if(pos == limit)\n            break;\n          if(pos > 0) {\n            dbuf_putc(buf, ',');\n            //            dbuf_putstr(buf, compact ? \", \" : \",\");\n            if(!compact && opts->break_length != INT32_MAX)\n              inspect_newline(buf, INSPECT_LEVEL(opts) + 1);\n          }\n          prop = JS_NewAtomUInt32(ctx, pos);\n          memset(&desc, 0, sizeof(desc));\n          desc.value = JS_UNDEFINED;\n          JS_GetOwnProperty(ctx, &desc, value, prop);\n          JS_FreeAtom(ctx, prop);\n\n          if((desc.flags & JS_PROP_GETSET) && opts->getters) {\n            int idx = (JS_IsUndefined(desc.getter) ? 0 : 1) | (JS_IsUndefined(desc.setter) ? 0 : 2);\n            static const char* const strs[4] = {0, \"[Getter]\", \"[Setter]\", \"[Getter/Setter]\"};\n            if(idx)\n              dbuf_put_colorstr(buf, strs[idx], COLOR_MARINE, opts->colors);\n\n          } else if(JS_HasProperty(ctx, value, JS_ATOM_TAG_INT | pos)) {\n            /*  if(compact || opts->break_length == INT32_MAX)\n                dbuf_putc(buf, ' ');*/\n            js_inspect_print(ctx, buf, desc.value, opts, depth - 1);\n          }\n          js_propertydescriptor_free(ctx, &desc);\n        }\n        if(len && limit < len) {\n          if(!compact && opts->break_length != INT32_MAX)\n            inspect_newline(buf, INSPECT_LEVEL(opts) + 1);\n          dbuf_printf(buf, \"... %u more item\", len - pos);\n          if(pos + 1 < len)\n            dbuf_putc(buf, 's');\n        }\n      }\n\n      if(!is_array && !is_typedarray) {\n        dbuf_putstr(buf, (compact && vector_size(&propenum_tab, sizeof(JSPropertyEnum))) ? \"{ \" : \"{\");\n        len = 0;\n      }\n\n      for(pos = 0; pos < vector_size(&propenum_tab, sizeof(JSPropertyEnum)); pos++) {\n        JSPropertyDescriptor desc;\n        const char* name;\n        JSPropertyEnum* propenum = (JSPropertyEnum*)vector_at(&propenum_tab, sizeof(JSPropertyEnum), pos);\n        JSValue key = js_atom_tovalue(ctx, propenum->atom);\n        name = JS_AtomToCString(ctx, propenum->atom);\n        if(!JS_IsSymbol(key)) {\n          if(((is_array || is_typedarray) && is_integer(name)) || inspect_options_hidden(opts, propenum->atom)) {\n            JS_FreeValue(ctx, key);\n            js_cstring_free(ctx, name);\n            continue;\n          }\n        }\n        if(pos > 0)\n          dbuf_putstr(buf, compact ? \", \" : \",\");\n        if(!compact && opts->break_length != INT32_MAX)\n          inspect_newline(buf, INSPECT_LEVEL(opts) + 1);\n        if(!JS_IsSymbol(key) && (is_identifier(name) || is_integer(name))) {\n          dbuf_putstr(buf, name);\n        } else {\n          if(!JS_IsString(key))\n            dbuf_putc(buf, '[');\n          js_inspect_print(ctx, buf, key, opts, depth - 1);\n          if(!JS_IsString(key))\n            dbuf_putc(buf, ']');\n        }\n        dbuf_putstr(buf, \": \");\n        js_cstring_free(ctx, name);\n        JS_FreeValue(ctx, key);\n\n        if(js_get_propertydescriptor(ctx, &desc, value, propenum->atom) == TRUE) {\n          if((desc.flags & JS_PROP_GETSET)) {\n            if(!opts->getters) {\n              JSValue v = JS_GetProperty(ctx, value, propenum->atom);\n              js_inspect_print(ctx, buf, v, opts, depth - 1);\n              JS_FreeValue(ctx, v);\n            } else\n              dbuf_put_colorstr(buf,\n                                JS_IsUndefined(desc.getter)\n                                    ? \"[Setter]\"\n                                    : JS_IsUndefined(desc.setter) ? \"[Getter]\" : \"[Getter/Setter]\",\n                                COLOR_MARINE,\n                                opts->colors);\n          } else\n            js_inspect_print(ctx, buf, desc.value, opts, depth - 1);\n        }\n        js_propertydescriptor_free(ctx, &desc);\n        len++;\n      }\n      js_object_tmpmark_clear(value);\n\n      if(!compact && len && opts->break_length != INT32_MAX)\n        inspect_newline(buf, INSPECT_LEVEL(opts));\n      dbuf_putstr(buf,\n                  (is_array || is_typedarray) ? ((compact || opts->break_length == INT32_MAX) && len ? \" ]\" : \"]\")\n                                              : (compact && len ? \" }\" : \"}\"));\n\n    end_obj:\n      if(!vector_empty(&propenum_tab))\n        js_propertyenums_free(ctx, vector_begin(&propenum_tab), vector_size(&propenum_tab, sizeof(JSPropertyEnum)));\n      break;\n    }\n\n    case JS_TAG_FUNCTION_BYTECODE: {\n      dbuf_putstr(buf, opts->colors ? COLOR_LIGHTRED \"[bytecode]\" COLOR_NONE : \"[bytecode]\");\n      break;\n    }\n\n    case JS_TAG_MODULE: {\n      dbuf_putstr(buf, opts->colors ? COLOR_LIGHTMARINE \"[module]\" COLOR_NONE : \"[module]\");\n      break;\n    }\n\n    default: {\n      JS_ThrowTypeError(ctx, \"Unhandled value tag in js_inspect_print: %d\\n\", tag);\n      return -1;\n    }\n  }\n  return 0;\n}\n\nstatic JSValue\njs_inspect(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst argv[]) {\n  DynBuf dbuf;\n  inspect_options_t options;\n  int32_t level;\n  int optind = 1;\n  JSValue ret;\n\n  js_dbuf_init(ctx, &dbuf);\n  inspect_options_init(&options, ctx);\n\n  if(argc > 1 && JS_IsNumber(argv[1]))\n    optind++;\n\n  if(optind < argc)\n    inspect_options_get(&options, ctx, argv[optind]);\n\n  if(optind > 1) {\n    double d;\n    JS_ToFloat64(ctx, &d, argv[1]);\n    level = isinf(d) ? INT32_MAX : d;\n  } else {\n    level = 0;\n  }\n\n  /*printf(\"js_inspect break_length: %d, max_array_length: %d, max_string_length: %d\\n\",\n         options.break_length, options.max_array_length, options.max_string_length);*/\n\n  js_inspect_print(ctx, &dbuf, argv[0], &options, options.depth - level);\n\n  ret = JS_NewStringLen(ctx, (const char*)dbuf.buf, dbuf.size);\n\n  dbuf_free(&dbuf);\n\n  inspect_options_free(&options, ctx);\n\n  return ret;\n}\n\nconst char*\njs_inspect_tostring(JSContext* ctx, JSValueConst value) {\n  JSValue output;\n  inspect_options_t opts;\n  JSValueConst args[] = {value, JS_UNDEFINED};\n  inspect_options_init(&opts, ctx);\n  opts.colors = FALSE;\n  args[1] = inspect_options_object(&opts, ctx);\n  inspect_options_free(&opts, ctx);\n\n  output = js_inspect(ctx, JS_UNDEFINED, 2, args);\n  JS_FreeValue(ctx, args[1]);\n  return JS_ToCString(ctx, output);\n}\n\nJSValue js_debugger_build_backtrace(JSContext* ctx, const uint8_t* cur_pc);\n\nJSValue\njs_inspect_stacktrace_value(JSContext* ctx) {\n  JSRuntime* rt = JS_GetRuntime(ctx);\n  struct JSStackFrame* frame;\n  JSValue ret = JS_UNDEFINED;\n  if((frame = rt->current_stack_frame)) {\n#ifdef CONFIG_DEBUGGER\n    ret = js_debugger_build_backtrace(ctx, frame->cur_pc);\n#endif\n  }\n  return ret;\n}\n\nconst char*\njs_inspect_stacktrace(JSContext* ctx) {\n  JSValue stack = js_inspect_stacktrace_value(ctx);\n  return js_inspect_tostring(ctx, stack);\n}\n\nstatic const JSCFunctionListEntry js_inspect_funcs[] = {\n    JS_CFUNC_DEF(\"inspect\", 1, js_inspect),\n};\n\nstatic int\njs_inspect_init(JSContext* ctx, JSModuleDef* m) {\n  JSValue inspect, inspect_symbol, symbol_ctor;\n\n  inspect = JS_NewCFunction(ctx, js_inspect, \"inspect\", 2);\n\n  inspect_symbol = js_symbol_for(ctx, \"quickjs.inspect.custom\");\n  JS_SetPropertyStr(ctx, inspect, \"symbol\", JS_DupValue(ctx, inspect_symbol));\n  symbol_ctor = js_symbol_ctor(ctx);\n  JS_SetPropertyStr(ctx, symbol_ctor, \"inspect\", JS_DupValue(ctx, inspect_symbol));\n\n  JS_FreeValue(ctx, symbol_ctor);\n  JS_FreeValue(ctx, inspect_symbol);\n\n  inspect_custom_atom = js_inspect_custom_atom(ctx, \"quickjs.inspect.custom\");\n  inspect_custom_atom_node = js_inspect_custom_atom(ctx, \"nodejs.util.inspect.custom\");\n\n  if(m) {\n    JS_SetModuleExportList(ctx, m, js_inspect_funcs, countof(js_inspect_funcs));\n    JS_SetModuleExport(ctx, m, \"default\", inspect);\n  }\n\n  return 0;\n}\n\n#if defined(JS_SHARED_LIBRARY) && defined(JS_INSPECT_MODULE)\n#define JS_INIT_MODULE js_init_module\n#else\n#define JS_INIT_MODULE js_init_module_inspect\n#endif\n\nVISIBLE JSModuleDef*\nJS_INIT_MODULE(JSContext* ctx, const char* module_name) {\n  JSModuleDef* m;\n  m = JS_NewCModule(ctx, module_name, js_inspect_init);\n  if(!m)\n    return NULL;\n  JS_AddModuleExportList(ctx, m, js_inspect_funcs, countof(js_inspect_funcs));\n  JS_AddModuleExport(ctx, m, \"default\");\n  return m;\n}\n",
			"file": "quickjs-inspect.c",
			"file_size": 33225,
			"file_write_time": 132724925630924421,
			"settings":
			{
				"buffer_size": 33238,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"paste",
					null,
					"AgAAAPM9AAAAAAAABD4AAAAAAAAAAAAABD4AAAAAAAAEPgAAAAAAAAwAAABDT0xPUl9ZRUxMT1c",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzPQAAAAAAAP89AAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AgAAABMXAAAAAAAAFBcAAAAAAAAAAAAAFBcAAAAAAAAUFwAAAAAAAAQAAABVaW50",
					"AQAAAAAAAAABAAAAExcAAAAAAAAXFwAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\t\t\t\t\t\t\t\t"
					},
					"CAAAABQXAAAAAAAAFhcAAAAAAAAAAAAAFhcAAAAAAAAYFwAAAAAAAAAAAAAYFwAAAAAAABoXAAAAAAAAAAAAABoXAAAAAAAAHBcAAAAAAAAAAAAAHBcAAAAAAAAeFwAAAAAAAAAAAAAeFwAAAAAAACAXAAAAAAAAAAAAACAXAAAAAAAAIhcAAAAAAAAAAAAAIhcAAAAAAAAkFwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFBcAAAAAAAAUFwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n#undef _ISOC99_SOURCE\n#define _ISOC99_SOURCE 1\n\n#include \"utils.h\"\n#include \"cutils.h\"\n#include \"vector.h\"\n#include \"libregexp.h\"\n#include \"quickjs-internal.h\"\n#include <time.h>\n#include <math.h>\n\n#ifndef INFINITY\n#define INFINITY __builtin_inf()\n#endif\n\n#if defined(__linux__) || defined(__APPLE__)\nuint64_t\ntime_us(void) {\n  struct timespec ts;\n  clock_gettime(CLOCK_MONOTONIC, &ts);\n  return (uint64_t)ts.tv_sec * 1000000 + (ts.tv_nsec / 1000);\n}\n#else\n/* more portable, but does not work if the date is updated */\nuint64_t\ntime_us(void) {\n  struct timeval tv;\n  gettimeofday(&tv, NULL);\n  return (int64_t)tv.tv_sec * 1000000 + tv.tv_usec;\n}\n#endif\n\nsize_t\nansi_length(const char* str, size_t len) {\n  size_t i, n = 0, p;\n  for(i = 0; i < len;) {\n    if(str[i] == 0x1b && (p = ansi_skip(&str[i], len - i)) > 0) {\n      i += p;\n      continue;\n    }\n    n++;\n    i++;\n  }\n  return n;\n}\n\nsize_t\nansi_skip(const char* str, size_t len) {\n  size_t pos = 0;\n  if(str[pos] == 0x1b) {\n    if(++pos < len && str[pos] == '[') {\n      while(++pos < len)\n        if(is_alphanumeric_char(str[pos]))\n          break;\n      if(++pos < len && str[pos] == '~')\n        ++pos;\n      return pos;\n    }\n  }\n  return 0;\n}\n\nsize_t\nansi_truncate(const char* str, size_t len, size_t limit) {\n  size_t i, n = 0, p;\n  for(i = 0; i < len;) {\n    if((p = ansi_skip(&str[i], len - i)) > 0) {\n      i += p;\n      continue;\n    }\n    n += is_escape_char(str[i]) ? 2 : 1;\n\n    i++;\n    if(n > limit)\n      break;\n  }\n  return i;\n}\n\nint64_t\narray_search(void* a, size_t m, size_t elsz, void* needle) {\n  char* ptr = a;\n  int64_t n, ret;\n  n = m / elsz;\n  for(ret = 0; ret < n; ret++) {\n    if(!memcmp(ptr, needle, elsz))\n      return ret;\n\n    ptr += elsz;\n  }\n  return -1;\n}\nchar*\nstr_escape(const char* s) {\n  DynBuf dbuf;\n  dbuf_init2(&dbuf, 0, 0);\n  dbuf_put_escaped(&dbuf, s, strlen(s));\n  dbuf_0(&dbuf);\n  return (char*)dbuf.buf;\n}\n\nchar*\nbyte_escape(const char* s, size_t n) {\n  DynBuf dbuf;\n  dbuf_init2(&dbuf, 0, 0);\n  dbuf_put_escaped(&dbuf, s, n);\n  dbuf_0(&dbuf);\n  return (char*)dbuf.buf;\n}\nchar*\ndbuf_at_n(const DynBuf* db, size_t i, size_t* n, char sep) {\n  size_t p, l = 0;\n  for(p = 0; p < db->size; ++p) {\n    if(l == i) {\n      *n = byte_chr((const char*)&db->buf[p], db->size - p, sep);\n      return (char*)&db->buf[p];\n    }\n    if(db->buf[p] == sep)\n      ++l;\n  }\n  *n = 0;\n  return 0;\n}\n\nconst char*\ndbuf_last_line(DynBuf* db, size_t* len) {\n  size_t i;\n\n  if((i = byte_rchr(db->buf, db->size, '\\n')) < db->size)\n    i++;\n\n  if(len)\n    *len = db->size - i;\n\n  return (const char*)&db->buf[i];\n}\n\nint\ndbuf_prepend(DynBuf* s, const uint8_t* data, size_t len) {\n  int ret;\n  if(!(ret = dbuf_reserve_start(s, len)))\n    memcpy(s->buf, data, len);\n\n  return 0;\n}\n\nvoid\ndbuf_put_colorstr(DynBuf* db, const char* str, const char* color, int with_color) {\n  if(with_color)\n    dbuf_putstr(db, color);\n\n  dbuf_putstr(db, str);\n  if(with_color)\n    dbuf_putstr(db, COLOR_NONE);\n}\n\nvoid\ndbuf_put_escaped_pred(DynBuf* db, const char* str, size_t len, int (*pred)(int)) {\n  size_t i = 0, j;\n  char c;\n  while(i < len) {\n    if((j = predicate_find(&str[i], len - i, pred))) {\n      dbuf_append(db, (const uint8_t*)&str[i], j);\n      i += j;\n    }\n    if(i == len)\n      break;\n    dbuf_putc(db, '\\\\');\n\n    if(str[i] == 0x1b) {\n      dbuf_append(db, (const uint8_t*)\"x1b\", 3);\n    } else {\n      int r = pred(str[i]);\n\n      dbuf_putc(db, (r > 1 && r <= 127) ? r : (c = escape_char_letter(str[i])) ? c : str[i]);\n\n      if(r == 'u' || r == 'x')\n        dbuf_printf(db, r == 'u' ? \"%04x\" : \"%02x\", str[i]);\n    }\n    i++;\n  }\n}\n\nvoid\ndbuf_put_unescaped_pred(DynBuf* db, const char* str, size_t len, int (*pred)(int)) {\n  size_t i = 0, j;\n  char c;\n  int r;\n  while(i < len) {\n    if((j = byte_chr(&str[i], len - i, '\\\\'))) {\n      dbuf_append(db, (const uint8_t*)&str[i], j);\n      i += j;\n    }\n    if(i == len)\n      break;\n\n    if(!(r = pred(str[++i])))\n      dbuf_putc(db, '\\\\');\n\n    dbuf_putc(db, (r > 1 && r < 256) ? r : str[i]);\n    i++;\n  }\n}\n\nvoid\ndbuf_put_value(DynBuf* db, JSContext* ctx, JSValueConst value) {\n  const char* str;\n  size_t len;\n  str = JS_ToCStringLen(ctx, &len, value);\n  dbuf_append(db, str, len);\n  js_cstring_free(ctx, str);\n}\n\nint\ndbuf_reserve_start(DynBuf* s, size_t len) {\n  if(unlikely((s->size + len) > s->allocated_size)) {\n    if(dbuf_realloc(s, s->size + len))\n      return -1;\n  }\n  if(s->size > 0)\n    memcpy(s->buf + len, s->buf, s->size);\n\n  s->size += len;\n  return 0;\n}\n\nsize_t\ndbuf_token_pop(DynBuf* db, char delim) {\n  size_t n, p, len;\n  len = db->size;\n  for(n = db->size; n > 0;) {\n    if((p = byte_rchr(db->buf, n, delim)) == n) {\n      db->size = 0;\n      break;\n    }\n    if(p > 0 && db->buf[p - 1] == '\\\\') {\n      n = p - 1;\n      continue;\n    }\n    db->size = p;\n    break;\n  }\n  return len - db->size;\n}\n\nsize_t\ndbuf_token_push(DynBuf* db, const char* str, size_t len, char delim) {\n  size_t pos;\n  if(db->size)\n    dbuf_putc(db, delim);\n\n  pos = db->size;\n  dbuf_put_escaped_pred(db, str, len, is_dot_char);\n  return db->size - pos;\n}\n\nJSValue\ndbuf_tostring_free(DynBuf* s, JSContext* ctx) {\n  JSValue r;\n  r = JS_NewStringLen(ctx, s->buf ? (const char*)s->buf : \"\", s->buf ? s->size : 0);\n  dbuf_free(s);\n  return r;\n}\n\nssize_t\ndbuf_load(DynBuf* s, const char* filename) {\n  FILE* fp;\n  size_t nbytes = 0;\n  if((fp = fopen(filename, \"rb\"))) {\n    char buf[4096];\n    size_t r;\n    while(!feof(fp)) {\n      if((r = fread(buf, 1, sizeof(buf), fp)) == 0)\n        return -1;\n      dbuf_put(s, (uint8_t const*)buf, r);\n      nbytes += r;\n    }\n    fclose(fp);\n  }\n  return nbytes;\n}\n\nint\nregexp_flags_fromstring(const char* s) {\n  int flags = 0;\n\n  if(str_contains(s, 'g'))\n    flags |= LRE_FLAG_GLOBAL;\n  if(str_contains(s, 'i'))\n    flags |= LRE_FLAG_IGNORECASE;\n  if(str_contains(s, 'm'))\n    flags |= LRE_FLAG_MULTILINE;\n  if(str_contains(s, 's'))\n    flags |= LRE_FLAG_DOTALL;\n  if(str_contains(s, 'u'))\n    flags |= LRE_FLAG_UTF16;\n  if(str_contains(s, 'y'))\n    flags |= LRE_FLAG_STICKY;\n\n  return flags;\n}\n\nint\nregexp_flags_tostring(int flags, char* buf) {\n  char* out = buf;\n\n  if(flags & LRE_FLAG_GLOBAL)\n    *out++ = 'g';\n  if(flags & LRE_FLAG_IGNORECASE)\n    *out++ = 'i';\n  if(flags & LRE_FLAG_MULTILINE)\n    *out++ = 'm';\n  if(flags & LRE_FLAG_DOTALL)\n    *out++ = 's';\n  if(flags & LRE_FLAG_UTF16)\n    *out++ = 'u';\n  if(flags & LRE_FLAG_STICKY)\n    *out++ = 'y';\n\n  *out = '\\0';\n  return out - buf;\n}\n\nRegExp\nregexp_from_argv(int argc, JSValueConst argv[], JSContext* ctx) {\n  RegExp re = {0, 0, 0};\n  const char* flagstr;\n  assert(argc > 0);\n  if(js_is_regexp(ctx, argv[0])) {\n    re.source = js_get_propertystr_stringlen(ctx, argv[0], \"source\", &re.len);\n    re.flags = regexp_flags_fromstring((flagstr = js_get_propertystr_cstring(ctx, argv[0], \"flags\")));\n    js_cstring_free(ctx, flagstr);\n  } else {\n    re.source = js_tostringlen(ctx, &re.len, argv[0]);\n    if(argc > 1 && JS_IsString(argv[1])) {\n      re.flags = regexp_flags_fromstring((flagstr = JS_ToCString(ctx, argv[1])));\n      js_cstring_free(ctx, flagstr);\n    }\n  }\n  return re;\n}\n\nRegExp\nregexp_from_dbuf(DynBuf* dbuf, int flags) {\n  RegExp re = {(char*)dbuf->buf, dbuf->size, flags};\n  dbuf->buf = 0;\n  dbuf->allocated_size = 0;\n  dbuf->size = 0;\n  return re;\n}\n\nuint8_t*\nregexp_compile(RegExp re, JSContext* ctx) {\n  char error_msg[64];\n  int len = 0;\n  uint8_t* bytecode;\n  if(!(bytecode = lre_compile(&len, error_msg, sizeof(error_msg), re.source, re.len, re.flags, ctx)))\n    JS_ThrowInternalError(ctx, \"Error compiling regex /%.*s/: %s\", (int)re.len, re.source, error_msg);\n\n  return bytecode;\n}\n\nJSValue\nregexp_to_value(RegExp re, JSContext* ctx) {\n  char flagstr[32] = {0};\n  size_t flaglen = regexp_flags_tostring(re.flags, flagstr);\n  JSValueConst args[2] = {JS_NewStringLen(ctx, re.source, re.len), JS_NewStringLen(ctx, flagstr, flaglen)};\n  JSValue regex, ctor = js_global_get(ctx, \"RegExp\");\n  regex = JS_CallConstructor(ctx, ctor, 2, args);\n  JS_FreeValue(ctx, args[0]);\n  JS_FreeValue(ctx, args[1]);\n  return regex;\n}\n\nInputBuffer\njs_input_buffer(JSContext* ctx, JSValueConst value) {\n  InputBuffer ret = {0, 0, 0, &input_buffer_free_default, JS_UNDEFINED};\n\n  if(js_value_isclass(ctx, value, JS_CLASS_ARRAY_BUFFER) || js_is_arraybuffer(ctx, value)) {\n    ret.value = JS_DupValue(ctx, value);\n    ret.data = JS_GetArrayBuffer(ctx, &ret.size, ret.value);\n  } else if(JS_IsString(value)) {\n    ret.data = (uint8_t*)JS_ToCStringLen(ctx, &ret.size, value);\n    ret.value = js_cstring_value((const char*)ret.data);\n  } else {\n    ret.value = JS_EXCEPTION;\n    //    JS_ThrowTypeError(ctx, \"Invalid type for input buffer\");\n  }\n  return ret;\n}\n\nBOOL\ninput_buffer_valid(const InputBuffer* in) {\n  return !JS_IsException(in->value);\n}\n\nInputBuffer\ninput_buffer_clone(const InputBuffer* in, JSContext* ctx) {\n  InputBuffer ret = js_input_buffer(ctx, in->value);\n\n  ret.pos = in->pos;\n  ret.size = in->size;\n  ret.free = in->free;\n\n  return ret;\n}\n\nvoid\ninput_buffer_dump(const InputBuffer* in, DynBuf* db) {\n  dbuf_printf(\n      db, \"(InputBuffer){ .data = %p, .size = %zu, .pos = %zu, .free = %p }\", in->data, in->size, in->pos, in->free);\n}\n\nvoid\ninput_buffer_free(InputBuffer* in, JSContext* ctx) {\n  if(in->data) {\n    in->free(ctx, (const char*)in->data, in->value);\n    in->data = 0;\n    in->size = 0;\n    in->pos = 0;\n    in->value = JS_UNDEFINED;\n  }\n}\n\nconst uint8_t*\ninput_buffer_peek(InputBuffer* in, size_t* lenp) {\n  input_buffer_peekc(in, lenp);\n  return in->data + in->pos;\n}\n\nconst uint8_t*\ninput_buffer_get(InputBuffer* in, size_t* lenp) {\n  size_t n;\n  const uint8_t* ret;\n  if(lenp == 0)\n    lenp = &n;\n  ret = input_buffer_peek(in, lenp);\n  in->pos += *lenp;\n  return ret;\n}\n\nconst char*\ninput_buffer_currentline(InputBuffer* in, size_t* len) {\n  size_t i;\n\n  if((i = byte_rchr(in->data, in->pos, '\\n')) < in->pos)\n    i++;\n\n  if(len)\n    *len = in->pos - i;\n\n  return (const char*)&in->data[i];\n}\n\nsize_t\ninput_buffer_column(InputBuffer* in, size_t* len) {\n  size_t i;\n\n  if((i = byte_rchr(in->data, in->pos, '\\n')) < in->pos)\n    i++;\n\n  return in->pos - i;\n}\n\nint64_t\njs_array_length(JSContext* ctx, JSValueConst array) {\n  int64_t len = -1;\n  if(JS_IsArray(ctx, array) || js_is_typedarray(ctx, array)) {\n    JSValue length = JS_GetPropertyStr(ctx, array, \"length\");\n    JS_ToInt64(ctx, &len, length);\n    JS_FreeValue(ctx, length);\n  }\n  return len;\n}\n\nchar**\njs_array_to_argv(JSContext* ctx, int* argcp, JSValueConst array) {\n  int i, len = js_array_length(ctx, array);\n  char** ret = js_mallocz(ctx, sizeof(char*) * (len + 1));\n  for(i = 0; i < len; i++) {\n    JSValue item = JS_GetPropertyUint32(ctx, array, i);\n    ret[i] = js_tostring(ctx, item);\n    JS_FreeValue(ctx, item);\n  }\n  if(argcp)\n    *argcp = len;\n  return ret;\n}\n\nvoid\njs_atom_dump(JSContext* ctx, JSAtom atom, DynBuf* db, BOOL color) {\n  const char* str;\n  BOOL is_int;\n  str = JS_AtomToCString(ctx, atom);\n  is_int = js_atom_isint(atom) || is_integer(str);\n  if(color)\n    dbuf_putstr(db, is_int ? \"\\x1b[33m\" : \"\\x1b[1;30m\");\n\n  dbuf_putstr(db, str);\n  if(color)\n    dbuf_putstr(db, \"\\x1b[1;36m\");\n\n  if(!is_int)\n    dbuf_printf(db, \"(0x%x)\", js_atom_tobinary(atom));\n\n  if(color)\n    dbuf_putstr(db, \"\\x1b[m\");\n}\n\nunsigned int\njs_atom_tobinary(JSAtom atom) {\n  ssize_t ret;\n  if(js_atom_isint(atom)) {\n    ret = js_atom_toint(atom);\n    ret = -ret;\n  } else {\n    ret = atom;\n  }\n  return ret;\n}\n\nconst char*\njs_atom_to_cstringlen(JSContext* ctx, size_t* len, JSAtom atom) {\n  JSValue v;\n  const char* s;\n  v = JS_AtomToValue(ctx, atom);\n  s = JS_ToCStringLen(ctx, len, v);\n  JS_FreeValue(ctx, v);\n  return s;\n}\n\nint32_t\njs_atom_toint32(JSContext* ctx, JSAtom atom) {\n  if(!js_atom_isint(atom)) {\n    int64_t i = INT64_MIN;\n    js_atom_toint64(ctx, &i, atom);\n    return i;\n  }\n  return -atom;\n}\n\nint\njs_atom_toint64(JSContext* ctx, int64_t* i, JSAtom atom) {\n  int ret;\n  JSValue value;\n  *i = INT64_MAX;\n  value = JS_AtomToValue(ctx, atom);\n  ret = !JS_ToInt64(ctx, i, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nJSValue\njs_atom_tovalue(JSContext* ctx, JSAtom atom) {\n  if(js_atom_isint(atom))\n    return JS_MKVAL(JS_TAG_INT, js_atom_toint(atom));\n\n  return JS_AtomToValue(ctx, atom);\n}\n\nBOOL\njs_atom_is_index(JSContext* ctx, int64_t* pval, JSAtom atom) {\n  JSValue value;\n  BOOL ret = FALSE;\n  int64_t index;\n\n  if(atom & (1U << 31)) {\n    *pval = atom & (~(1U << 31));\n    return TRUE;\n  }\n\n  value = JS_AtomToValue(ctx, atom);\n\n  if(JS_IsNumber(value)) {\n    JS_ToInt64(ctx, &index, value);\n    ret = TRUE;\n  } else if(JS_IsString(value)) {\n    const char* s = JS_ToCString(ctx, value);\n    if(s[0] == '-' && is_digit_char(s[s[0] == '-'])) {\n      index = atoi(s);\n      ret = TRUE;\n    }\n    JS_FreeCString(ctx, s);\n  }\n\n  if(ret == TRUE)\n    *pval = index;\n\n  return ret;\n}\n\nBOOL\njs_atom_is_length(JSContext* ctx, JSAtom atom) {\n  const char* str = JS_AtomToCString(ctx, atom);\n  BOOL ret = !strcmp(str, \"length\");\n  JS_FreeCString(ctx, str);\n  return ret;\n}\n\nconst char*\njs_function_name(JSContext* ctx, JSValueConst value) {\n  JSAtom atom;\n  JSValue str, name, args[2], idx;\n  const char* s = 0;\n  int32_t i = -1;\n  str = js_value_tostring(ctx, \"Function\", value);\n  atom = JS_NewAtom(ctx, \"indexOf\");\n  args[0] = JS_NewString(ctx, \"function \");\n  idx = JS_Invoke(ctx, str, atom, 1, args);\n  JS_FreeValue(ctx, args[0]);\n  JS_ToInt32(ctx, &i, idx);\n  if(i != 0) {\n    JS_FreeAtom(ctx, atom);\n    JS_FreeValue(ctx, str);\n    return 0;\n  }\n  args[0] = JS_NewString(ctx, \"(\");\n  idx = JS_Invoke(ctx, str, atom, 1, args);\n  JS_FreeValue(ctx, args[0]);\n  JS_FreeAtom(ctx, atom);\n  atom = JS_NewAtom(ctx, \"substring\");\n  args[0] = JS_NewUint32(ctx, 9);\n  args[1] = idx;\n  name = JS_Invoke(ctx, str, atom, 2, args);\n  JS_FreeValue(ctx, args[0]);\n  JS_FreeValue(ctx, args[1]);\n  JS_FreeValue(ctx, str);\n  JS_FreeAtom(ctx, atom);\n  s = JS_ToCString(ctx, name);\n  JS_FreeValue(ctx, name);\n  return s;\n}\n\nJSValue\njs_global_get(JSContext* ctx, const char* prop) {\n  JSValue global_obj, ret;\n  global_obj = JS_GetGlobalObject(ctx);\n  ret = JS_GetPropertyStr(ctx, global_obj, prop);\n  JS_FreeValue(ctx, global_obj);\n  return ret;\n}\n\nJSValue\njs_global_prototype(JSContext* ctx, const char* class_name) {\n  JSValue ctor, ret;\n  ctor = js_global_get(ctx, class_name);\n  ret = JS_GetPropertyStr(ctx, ctor, \"prototype\");\n  JS_FreeValue(ctx, ctor);\n  return ret;\n}\n\nJSValue\njs_iterator_method(JSContext* ctx, JSValueConst obj) {\n  JSAtom atom;\n  JSValue ret = JS_UNDEFINED;\n  atom = js_symbol_static_atom(ctx, \"iterator\");\n  if(JS_HasProperty(ctx, obj, atom))\n    ret = JS_GetProperty(ctx, obj, atom);\n\n  JS_FreeAtom(ctx, atom);\n  if(!JS_IsFunction(ctx, ret)) {\n    atom = js_symbol_static_atom(ctx, \"asyncIterator\");\n    if(JS_HasProperty(ctx, obj, atom))\n      ret = JS_GetProperty(ctx, obj, atom);\n\n    JS_FreeAtom(ctx, atom);\n  }\n  return ret;\n}\n\nJSValue\njs_iterator_new(JSContext* ctx, JSValueConst obj) {\n  JSValue fn, ret;\n  fn = js_iterator_method(ctx, obj);\n  ret = JS_Call(ctx, fn, obj, 0, 0);\n  JS_FreeValue(ctx, fn);\n  return ret;\n}\n\nJSValue\njs_iterator_next(JSContext* ctx, JSValueConst obj, BOOL*done_p) {\n  JSValue fn, result, done,value;\n  fn = JS_GetPropertyStr(ctx, obj, \"next\");\n  result = JS_Call(ctx, fn, obj, 0, 0);\n  JS_FreeValue(ctx, fn);\n  done = JS_GetPropertyStr(ctx, result, \"done\");\n  value = JS_GetPropertyStr(ctx, result, \"value\");\n  JS_FreeValue(ctx, result);\n  *done_p = JS_ToBool(ctx, done);\n  JS_FreeValue(ctx, done);\n  return value;\n}\n\nJSValue\njs_object_constructor(JSContext* ctx, JSValueConst value) {\n  JSValue ctor = JS_UNDEFINED;\n  if(JS_IsObject(value))\n    ctor = JS_GetPropertyStr(ctx, value, \"constructor\");\n  return ctor;\n}\n\nchar*\njs_object_classname(JSContext* ctx, JSValueConst value) {\n  JSValue proto, ctor;\n  const char* str;\n  char* name = 0;\n  int namelen;\n  ctor = js_object_constructor(ctx, value);\n  if(!JS_IsFunction(ctx, ctor)) {\n    proto = JS_GetPrototype(ctx, value);\n    ctor = js_object_constructor(ctx, proto);\n  }\n  if((str = JS_ToCString(ctx, ctor))) {\n    if(!strncmp(str, \"function \", 9)) {\n      namelen = byte_chr(str + 9, strlen(str) - 9, '(');\n      name = js_strndup(ctx, str + 9, namelen);\n    }\n  }\n  if(!name) {\n    if(str)\n      js_cstring_free(ctx, str);\n    if((str = JS_ToCString(ctx, JS_GetPropertyStr(ctx, ctor, \"name\"))))\n      name = js_strdup(ctx, str);\n  }\n  if(str)\n    js_cstring_free(ctx, str);\n  return name;\n}\n\nBOOL\njs_object_equals(JSContext* ctx, JSValueConst a, JSValueConst b) {\n  JSPropertyEnum *atoms_a, *atoms_b;\n  uint32_t i, natoms_a, natoms_b;\n  int32_t ta, tb;\n  ta = js_value_type(ctx, a);\n  tb = js_value_type(ctx, b);\n  assert(ta == TYPE_OBJECT);\n  assert(tb == TYPE_OBJECT);\n  if(JS_GetOwnPropertyNames(ctx, &atoms_a, &natoms_a, a, JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK | JS_GPN_ENUM_ONLY))\n    return FALSE;\n\n  if(JS_GetOwnPropertyNames(ctx, &atoms_b, &natoms_b, b, JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK | JS_GPN_ENUM_ONLY))\n    return FALSE;\n\n  if(natoms_a != natoms_b)\n    return FALSE;\n\n  qsort_r(&atoms_a, natoms_a, sizeof(JSPropertyEnum), &js_propenum_cmp, ctx);\n  qsort_r(&atoms_b, natoms_b, sizeof(JSPropertyEnum), &js_propenum_cmp, ctx);\n  for(i = 0; i < natoms_a; i++)\n    if(atoms_a[i].atom != atoms_b[i].atom)\n      return FALSE;\n  return TRUE;\n}\n\nint\njs_object_is(JSContext* ctx, JSValueConst value, const char* cmp) {\n  int ret;\n  const char* str;\n  str = js_object_tostring(ctx, value);\n  ret = strcmp(str, cmp) == 0;\n  js_cstring_free(ctx, str);\n  return ret;\n}\n\nJSValue\njs_object_construct(JSContext* ctx, JSValueConst ctor) {\n  JSValueConst args[] = {JS_UNDEFINED};\n  return JS_CallConstructor(ctx, ctor, 0, args);\n}\n\nJSValue\njs_object_error(JSContext* ctx, const char* message) {\n  JSValueConst ctor = js_global_get(ctx, \"Error\");\n  JSValueConst args[] = {JS_NewString(ctx, message)};\n  JSValue ret;\n  ret = JS_CallConstructor(ctx, ctor, 1, args);\n  JS_FreeValue(ctx, ctor);\n  JS_FreeValue(ctx, args[0]);\n  return ret;\n}\n\nJSValue\njs_object_stack(JSContext* ctx) {\n  JSValue error = js_object_error(ctx, \"\");\n  JSValue stack = JS_GetPropertyStr(ctx, error, \"stack\");\n  JS_FreeValue(ctx, error);\n  return stack;\n}\n\nJSClassID\njs_get_classid(JSValue v) {\n  JSObject* p;\n\n  if(JS_VALUE_GET_TAG(v) != JS_TAG_OBJECT)\n    return 0;\n  p = JS_VALUE_GET_OBJ(v);\n  assert(p != 0);\n  return p->class_id;\n}\n\nBOOL\njs_has_propertystr(JSContext* ctx, JSValueConst obj, const char* str) {\n  JSAtom atom;\n  BOOL ret = FALSE;\n  atom = JS_NewAtom(ctx, str);\n  ret = JS_HasProperty(ctx, obj, atom);\n  JS_FreeAtom(ctx, atom);\n  return ret;\n}\n\nBOOL\njs_get_propertystr_bool(JSContext* ctx, JSValueConst obj, const char* str) {\n  BOOL ret = FALSE;\n  JSValue value;\n  value = JS_GetPropertyStr(ctx, obj, str);\n  if(!JS_IsException(value))\n    ret = JS_ToBool(ctx, value);\n\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nconst char*\njs_get_propertystr_cstring(JSContext* ctx, JSValueConst obj, const char* prop) {\n  JSValue value;\n  const char* ret;\n  value = JS_GetPropertyStr(ctx, obj, prop);\n  if(JS_IsUndefined(value) || JS_IsException(value))\n    return 0;\n\n  ret = JS_ToCString(ctx, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nconst char*\njs_get_propertystr_cstringlen(JSContext* ctx, JSValueConst obj, const char* prop, size_t* lenp) {\n  JSValue value;\n  const char* ret;\n  value = JS_GetPropertyStr(ctx, obj, prop);\n  if(JS_IsUndefined(value) || JS_IsException(value))\n    return 0;\n\n  ret = JS_ToCStringLen(ctx, lenp, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nconst char*\njs_get_propertyint_cstring(JSContext* ctx, JSValueConst obj, uint32_t prop) {\n  JSValue value;\n  char* ret;\n  value = JS_GetPropertyUint32(ctx, obj, prop);\n  /* if(JS_IsUndefined(value) || JS_IsException(value))\n     return 0;*/\n\n  ret = js_tostring(ctx, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nchar*\njs_get_propertystr_string(JSContext* ctx, JSValueConst obj, const char* prop) {\n  JSValue value;\n  char* ret;\n  value = JS_GetPropertyStr(ctx, obj, prop);\n  if(JS_IsUndefined(value) || JS_IsException(value))\n    return 0;\n\n  ret = js_tostring(ctx, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nchar*\njs_get_propertystr_stringlen(JSContext* ctx, JSValueConst obj, const char* prop, size_t* lenp) {\n  JSValue value;\n  char* ret;\n  value = JS_GetPropertyStr(ctx, obj, prop);\n  if(JS_IsUndefined(value) || JS_IsException(value))\n    return 0;\n\n  ret = js_tostringlen(ctx, lenp, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nint32_t\njs_get_propertystr_int32(JSContext* ctx, JSValueConst obj, const char* prop) {\n  JSValue value;\n  int32_t ret;\n  value = JS_GetPropertyStr(ctx, obj, prop);\n  if(JS_IsUndefined(value) || JS_IsException(value))\n    return 0;\n  JS_ToInt32(ctx, &ret, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nuint64_t\njs_get_propertystr_uint64(JSContext* ctx, JSValueConst obj, const char* prop) {\n  JSValue value;\n  uint64_t ret;\n  value = JS_GetPropertyStr(ctx, obj, prop);\n  if(JS_IsUndefined(value) || JS_IsException(value))\n    return 0;\n  JS_ToIndex(ctx, &ret, value);\n  JS_FreeValue(ctx, value);\n  return ret;\n}\n\nvoid\njs_set_propertyint_string(JSContext* ctx, JSValueConst obj, uint32_t i, const char* str) {\n  JSValue value;\n  value = JS_NewString(ctx, str);\n  JS_SetPropertyUint32(ctx, obj, i, value);\n}\n\nvoid\njs_set_propertyint_int(JSContext* ctx, JSValueConst obj, uint32_t i, int32_t value) {\n  JS_SetPropertyUint32(ctx, obj, i, JS_NewInt32(ctx, value));\n}\n\nvoid\njs_set_propertystr_string(JSContext* ctx, JSValueConst obj, const char* prop, const char* str) {\n  JSValue value;\n  value = JS_NewString(ctx, str);\n  JS_SetPropertyStr(ctx, obj, prop, value);\n}\n\nvoid\njs_set_propertystr_stringlen(JSContext* ctx, JSValueConst obj, const char* prop, const char* str, size_t len) {\n  JSValue value;\n  value = JS_NewStringLen(ctx, str, len);\n  JS_SetPropertyStr(ctx, obj, prop, value);\n}\n\nint\njs_get_propertydescriptor(JSContext* ctx, JSPropertyDescriptor* desc, JSValueConst value, JSAtom prop) {\n  JSValue obj, proto;\n  obj = JS_DupValue(ctx, value);\n  do {\n    if(JS_GetOwnProperty(ctx, desc, obj, prop) == TRUE)\n      return TRUE;\n    proto = JS_GetPrototype(ctx, obj);\n    if(JS_VALUE_GET_OBJ(proto) == JS_VALUE_GET_OBJ(obj))\n      break;\n    JS_FreeValue(ctx, obj);\n    obj = proto;\n  } while(JS_IsObject(obj));\n  return FALSE;\n}\n\nJSClassID\njs_class_id(JSContext* ctx, int id) {\n  return JS_GetRuntime(ctx)->class_array[id].class_id;\n}\n\nJSClassID\njs_class_newid(void) {\n  JSClassID id;\n  JS_NewClassID(&id);\n  return id;\n}\n\nJSClass*\njs_class_get(JSContext* ctx, JSClassID id) {\n  JSClass* ret = &ctx->rt->class_array[id];\n  return ret->class_id == id ? ret : 0;\n}\n\nJSAtom\njs_class_atom(JSContext* ctx, JSClassID id) {\n  JSAtom atom = 0;\n  if(id > 0 && id < (JSClassID)ctx->rt->class_count)\n    atom = ctx->rt->class_array[id].class_name;\n  return atom;\n}\n\nconst char*\njs_class_name(JSContext* ctx, JSClassID id) {\n  JSAtom atom = ctx->rt->class_array[id].class_name;\n  return JS_AtomToCString(ctx, atom);\n}\n\nconst char*\njs_object_tostring(JSContext* ctx, JSValueConst value) {\n  JSValue str = js_value_tostring(ctx, \"Object\", value);\n  const char* s = JS_ToCString(ctx, str);\n  JS_FreeValue(ctx, str);\n  return s;\n}\n\nconst char*\njs_function_tostring(JSContext* ctx, JSValueConst value) {\n  JSValue str = js_value_tostring(ctx, \"Function\", value);\n  const char* s = JS_ToCString(ctx, str);\n  JS_FreeValue(ctx, str);\n  return s;\n}\n\nBOOL\njs_function_isnative(JSContext* ctx, JSValueConst value) {\n  const char* fn = js_function_tostring(ctx, value);\n  BOOL ret = !!strstr(fn, \"\\n    [native code]\\n\");\n  JS_FreeCString(ctx, fn);\n  return ret;\n}\n\nBOOL\njs_is_input(JSContext* ctx, JSValueConst value) {\n  return JS_IsString(value) || js_value_isclass(ctx, value, JS_CLASS_ARRAY_BUFFER);\n}\n\nint\njs_propenum_cmp(const void* a, const void* b, void* ptr) {\n  JSContext* ctx = ptr;\n  const char *stra, *strb;\n  int ret;\n  stra = JS_AtomToCString(ctx, ((const JSPropertyEnum*)a)->atom);\n  strb = JS_AtomToCString(ctx, ((const JSPropertyEnum*)b)->atom);\n  ret = strverscmp(stra, strb);\n  js_cstring_free(ctx, stra);\n  js_cstring_free(ctx, strb);\n  return ret;\n}\n\nvoid\njs_propertydescriptor_free(JSContext* ctx, JSPropertyDescriptor* desc) {\n  JS_FreeValue(ctx, desc->value);\n  JS_FreeValue(ctx, desc->getter);\n  JS_FreeValue(ctx, desc->setter);\n}\n\nvoid\njs_propertyenums_free(JSContext* ctx, JSPropertyEnum* props, size_t len) {\n  uint32_t i;\n  for(i = 0; i < len; i++) JS_FreeAtom(ctx, props[i].atom);\n  // js_free(ctx, props);\n}\n\nvoid\njs_argv_free(JSContext* ctx, char** strv) {\n  size_t i;\n  if(strv == 0)\n    return;\n\n  for(i = 0; strv[i]; i++) { js_free(ctx, strv[i]); }\n  js_free(ctx, strv);\n}\n\nvoid\njs_argv_free_rt(JSRuntime* rt, char** strv) {\n  size_t i;\n  if(strv == 0)\n    return;\n\n  for(i = 0; strv[i]; i++) { js_free_rt(rt, strv[i]); }\n  js_free_rt(rt, strv);\n}\n\nJSValue\njs_argv_to_array(JSContext* ctx, char** strv) {\n  JSValue ret = JS_NewArray(ctx);\n  if(strv) {\n    size_t i;\n    for(i = 0; strv[i]; i++) JS_SetPropertyUint32(ctx, ret, i, JS_NewString(ctx, strv[i]));\n  }\n  return ret;\n}\n\nsize_t\njs_argv_length(char** strv) {\n  size_t i;\n  for(i = 0; strv[i]; i++) {}\n  return i;\n}\n\nchar**\njs_argv_dup(JSContext* ctx, char** strv) {\n  char** ret;\n  size_t i, len = js_argv_length(strv);\n  ret = js_malloc(ctx, (len + 1) * sizeof(char*));\n  for(i = 0; i < len; i++) { ret[i] = js_strdup(ctx, strv[i]); }\n  ret[i] = 0;\n  return ret;\n}\n\nJSValue\njs_intv_to_array(JSContext* ctx, int* intv) {\n  JSValue ret = JS_NewArray(ctx);\n  if(intv) {\n    size_t i;\n    for(i = 0; intv[i]; i++) JS_SetPropertyUint32(ctx, ret, i, JS_NewInt32(ctx, intv[i]));\n  }\n  return ret;\n}\n\nJSAtom\njs_symbol_static_atom(JSContext* ctx, const char* name) {\n  JSValue sym = js_symbol_static_value(ctx, name);\n  JSAtom ret = JS_ValueToAtom(ctx, sym);\n  JS_FreeValue(ctx, sym);\n  return ret;\n}\n\nJSValue\njs_symbol_static_value(JSContext* ctx, const char* name) {\n  JSValue symbol_ctor, ret;\n  symbol_ctor = js_symbol_ctor(ctx);\n  ret = JS_GetPropertyStr(ctx, symbol_ctor, name);\n  JS_FreeValue(ctx, symbol_ctor);\n  return ret;\n}\n\nJSValue\njs_symbol_ctor(JSContext* ctx) {\n  return js_global_get(ctx, \"Symbol\");\n}\n\nJSValue\njs_symbol_invoke_static(JSContext* ctx, const char* name, JSValueConst arg) {\n  JSValue ret;\n  JSAtom method_name = JS_NewAtom(ctx, name);\n  ret = JS_Invoke(ctx, js_symbol_ctor(ctx), method_name, 1, &arg);\n  JS_FreeAtom(ctx, method_name);\n  return ret;\n}\n\nJSValue\njs_symbol_for(JSContext* ctx, const char* sym_for) {\n  JSValue key, sym;\n  JSAtom atom;\n  key = JS_NewString(ctx, sym_for);\n  sym = js_symbol_invoke_static(ctx, \"for\", key);\n  JS_FreeValue(ctx, key);\n  return sym;\n}\n\nJSAtom\njs_symbol_for_atom(JSContext* ctx, const char* sym_for) {\n  JSValue sym = js_symbol_for(ctx, sym_for);\n  JSAtom atom = JS_ValueToAtom(ctx, sym);\n  JS_FreeValue(ctx, sym);\n  return atom;\n}\n\nJSValue\njs_symbol_to_string(JSContext* ctx, JSValueConst sym) {\n  JSValue value, str;\n  JSAtom atom;\n  value = js_symbol_invoke_static(ctx, \"keyFor\", sym);\n  if(!JS_IsUndefined(value))\n    return value;\n\n  atom = JS_ValueToAtom(ctx, sym);\n  str = JS_AtomToString(ctx, atom);\n  JS_FreeAtom(ctx, atom);\n  return str;\n}\n\nconst char*\njs_symbol_to_cstring(JSContext* ctx, JSValueConst sym) {\n  JSValue value = js_symbol_to_string(ctx, sym);\n  const char* str;\n  str = JS_ToCString(ctx, value);\n  JS_FreeValue(ctx, value);\n  return str;\n}\n\nJSValue*\njs_values_dup(JSContext* ctx, int nvalues, JSValueConst* values) {\n  JSValue* ret = js_mallocz_rt(JS_GetRuntime(ctx), sizeof(JSValue) * nvalues);\n  int i;\n  for(i = 0; i < nvalues; i++) ret[i] = JS_DupValueRT(JS_GetRuntime(ctx), values[i]);\n  return ret;\n}\n/*\nvoid\njs_values_free(JSContext* ctx, int nvalues, JSValueConst* values) {\n  int i;\n  for(i = 0; i < nvalues; i++) JS_FreeValue(ctx, values[i]);\n  js_free(ctx, values);\n}\n*/\nvoid\njs_values_free(JSRuntime* rt, int nvalues, JSValueConst* values) {\n  int i;\n  for(i = 0; i < nvalues; i++) JS_FreeValueRT(rt, values[i]);\n  js_free_rt(rt, values);\n}\n\nJSValue\njs_values_toarray(JSContext* ctx, int nvalues, JSValueConst* values) {\n  int i;\n  JSValue ret = JS_NewArray(ctx);\n  for(i = 0; i < nvalues; i++) JS_SetPropertyUint32(ctx, ret, i, JS_DupValue(ctx, values[i]));\n  return ret;\n}\n\nconst char*\njs_value_type_name(int32_t type) {\n  int32_t flag = js_value_type2flag(type);\n  const char* const* types = js_value_types();\n  return types[flag];\n}\n\nconst char*\njs_value_typestr(JSContext* ctx, JSValueConst value) {\n  int32_t type = js_value_type(ctx, value);\n  return js_value_type_name(type);\n}\n\nvoid*\njs_value_get_ptr(JSValueConst v) {\n  return JS_VALUE_GET_PTR(v);\n}\n\nJSObject*\njs_value_get_obj(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v) == JS_TAG_OBJECT ? JS_VALUE_GET_OBJ(v) : 0;\n}\n\nint32_t\njs_value_get_tag(JSValueConst v) {\n  return JS_VALUE_GET_TAG(v);\n}\n\nBOOL\njs_value_has_ref_count(JSValue v) {\n  return ((unsigned)js_value_get_tag(v) >= (unsigned)JS_TAG_FIRST);\n}\n\nenum value_mask\njs_value_type(JSContext* ctx, JSValueConst value) {\n  int32_t flag;\n  uint32_t type = 0;\n  if((flag = js_value_type_get(ctx, value)) == -1)\n    return 0;\n\n  if(flag == FLAG_ARRAY /*|| flag == FLAG_FUNCTION*/)\n    type |= TYPE_OBJECT;\n\n  type |= 1 << flag;\n\n  return type;\n}\n\nint32_t\njs_value_type_get(JSContext* ctx, JSValueConst value) {\n  if(JS_IsArray(ctx, value))\n    return FLAG_ARRAY;\n\n  if(JS_IsFunction(ctx, value))\n    return FLAG_FUNCTION;\n\n  if(JS_VALUE_IS_NAN(value))\n    return FLAG_NAN;\n\n  return js_value_type_flag(value);\n}\n\nint32_t\njs_value_type_flag(JSValueConst value) {\n  switch(JS_VALUE_GET_TAG(value)) {\n    case JS_TAG_BIG_DECIMAL: return FLAG_BIG_DECIMAL;\n    case JS_TAG_BIG_INT: return FLAG_BIG_INT;\n    case JS_TAG_BIG_FLOAT: return FLAG_BIG_FLOAT;\n    case JS_TAG_SYMBOL: return FLAG_SYMBOL;\n    case JS_TAG_STRING: return FLAG_STRING;\n    case JS_TAG_MODULE: return FLAG_MODULE;\n    case JS_TAG_FUNCTION_BYTECODE: return FLAG_FUNCTION_BYTECODE;\n    case JS_TAG_OBJECT: return FLAG_OBJECT;\n    case JS_TAG_INT: return FLAG_INT;\n    case JS_TAG_BOOL: return FLAG_BOOL;\n    case JS_TAG_NULL: return FLAG_NULL;\n    case JS_TAG_UNDEFINED: return FLAG_UNDEFINED;\n    case JS_TAG_UNINITIALIZED: return FLAG_UNINITIALIZED;\n    case JS_TAG_CATCH_OFFSET: return FLAG_CATCH_OFFSET;\n    case JS_TAG_EXCEPTION: return FLAG_EXCEPTION;\n    case JS_TAG_FLOAT64: return FLAG_FLOAT64;\n  }\n  return -1;\n}\n\nvoid\njs_value_free(JSContext* ctx, JSValue v) {\n  if(js_value_has_ref_count(v)) {\n    JSRefCountHeader* p = (JSRefCountHeader*)js_value_get_ptr(v);\n    if(p->ref_count > 0) {\n      --p->ref_count;\n      if(p->ref_count == 0)\n        __JS_FreeValue(ctx, v);\n    }\n  }\n}\n\nJSValue\njs_value_clone(JSContext* ctx, JSValueConst value) {\n  enum value_mask type = 1 << js_value_type_get(ctx, value);\n  JSValue ret = JS_UNDEFINED;\n  switch(type) {\n\n    /* case TYPE_NULL: {\n     ret = JS_NULL;\n     break;\n     }\n\n    case TYPE_UNDEFINED: {\n     ret = JS_UNDEFINED;\n     break;\n     }\n\n    case TYPE_STRING: {\n     size_t len;\n     const char* str;\n     str = JS_ToCStringLen(ctx, &len, value);\n     ret = JS_NewStringLen(ctx, str, len);\n     js_cstring_free(ctx, str);\n     break;\n     }*/\n    case TYPE_INT: {\n      ret = JS_NewInt32(ctx, JS_VALUE_GET_INT(value));\n      break;\n    }\n\n    case TYPE_FLOAT64: {\n      ret = JS_NewFloat64(ctx, JS_VALUE_GET_FLOAT64(value));\n      break;\n    }\n\n    case TYPE_BOOL: {\n      ret = JS_NewBool(ctx, JS_VALUE_GET_BOOL(value));\n      break;\n    }\n\n    case TYPE_FUNCTION:\n    case TYPE_ARRAY:\n    case TYPE_OBJECT: {\n      JSPropertyEnum* tab_atom;\n      uint32_t tab_atom_len;\n      ret = JS_IsArray(ctx, value) ? JS_NewArray(ctx) : JS_NewObject(ctx);\n      if(!JS_GetOwnPropertyNames(\n             ctx, &tab_atom, &tab_atom_len, value, JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK | JS_GPN_ENUM_ONLY)) {\n        uint32_t i;\n        for(i = 0; i < tab_atom_len; i++) {\n          JSValue prop;\n          prop = JS_GetProperty(ctx, value, tab_atom[i].atom);\n          JS_SetProperty(ctx, ret, tab_atom[i].atom, js_value_clone(ctx, prop));\n        }\n      }\n      break;\n    }\n\n    case TYPE_UNDEFINED:\n    case TYPE_NULL:\n    case TYPE_STRING:\n    case TYPE_SYMBOL:\n    case TYPE_BIG_DECIMAL:\n    case TYPE_BIG_INT:\n    case TYPE_BIG_FLOAT: {\n      ret = JS_DupValue(ctx, value);\n      break;\n    }\n\n    default: {\n      ret = JS_ThrowTypeError(ctx, \"No such type: %s (0x%08x)\\n\", js_value_type_name(type), type);\n      break;\n    }\n  }\n  return ret;\n}\n\nvoid\njs_value_dump(JSContext* ctx, JSValueConst value, DynBuf* db) {\n  const char* str;\n  size_t len;\n  if(JS_IsObject(value)) {\n    const char* str = js_object_tostring(ctx, value);\n    dbuf_putstr(db, str);\n    js_cstring_free(ctx, str);\n    if(db->size && db->buf[db->size - 1] == '\\n')\n      db->size--;\n  } else {\n    int is_string = JS_IsString(value);\n\n    if(is_string)\n      dbuf_putc(db, '\"');\n\n    str = JS_ToCStringLen(ctx, &len, value);\n    dbuf_append(db, (const uint8_t*)str, len);\n\n    js_cstring_free(ctx, str);\n\n    if(is_string)\n      dbuf_putc(db, '\"');\n    else if(JS_IsBigFloat(value))\n      dbuf_putc(db, 'l');\n    else if(JS_IsBigDecimal(value))\n      dbuf_putc(db, 'm');\n    else if(JS_IsBigInt(ctx, value))\n      dbuf_putc(db, 'n');\n  }\n}\n\nBOOL\njs_value_equals(JSContext* ctx, JSValueConst a, JSValueConst b) {\n  int32_t ta, tb;\n  BOOL ret = FALSE;\n  ta = js_value_type(ctx, a);\n  tb = js_value_type(ctx, b);\n\n  if(ta != tb) {\n    ret = FALSE;\n  } else if(ta & tb & (TYPE_NULL | TYPE_UNDEFINED | TYPE_NAN)) {\n    ret = TRUE;\n  } else if(ta & tb & (TYPE_BIG_INT | TYPE_BIG_FLOAT | TYPE_BIG_DECIMAL)) {\n    const char *astr, *bstr;\n\n    astr = JS_ToCString(ctx, a);\n    bstr = JS_ToCString(ctx, b);\n\n    ret = !strcmp(astr, bstr);\n\n    JS_FreeCString(ctx, astr);\n    JS_FreeCString(ctx, bstr);\n\n  } else if(ta & TYPE_INT) {\n    int32_t inta, intb;\n\n    inta = JS_VALUE_GET_INT(a);\n    intb = JS_VALUE_GET_INT(b);\n    ret = inta == intb;\n  } else if(ta & TYPE_BOOL) {\n    BOOL boola, boolb;\n\n    boola = !!JS_VALUE_GET_BOOL(a);\n    boolb = !!JS_VALUE_GET_BOOL(b);\n    ret = boola == boolb;\n\n  } else if(ta & TYPE_FLOAT64) {\n    double flta, fltb;\n\n    flta = JS_VALUE_GET_FLOAT64(a);\n    fltb = JS_VALUE_GET_FLOAT64(b);\n    ret = flta == fltb;\n\n  } else if(ta & TYPE_OBJECT) {\n    ret = js_object_equals(ctx, a, b);\n    /*void *obja, *objb;\n\n    obja = JS_VALUE_GET_OBJ(a);\n    objb = JS_VALUE_GET_OBJ(b);\n\n    ret = obja == objb;*/\n  } else if(ta & TYPE_STRING) {\n    const char *stra, *strb;\n\n    stra = JS_ToCString(ctx, a);\n    strb = JS_ToCString(ctx, b);\n\n    ret = !strcmp(stra, strb);\n\n    js_cstring_free(ctx, stra);\n    js_cstring_free(ctx, strb);\n  }\n\n  return ret;\n}\n\nJSValue\njs_value_from_char(JSContext* ctx, int c) {\n  uint8_t buf[16];\n  size_t len = unicode_to_utf8(buf, c);\n  return JS_NewStringLen(ctx, (const char*)buf, len);\n}\n\nvoid\njs_value_print(JSContext* ctx, JSValueConst value) {\n  DynBuf dbuf;\n  js_dbuf_init(ctx, &dbuf);\n  js_value_dump(ctx, value, &dbuf);\n  dbuf_0(&dbuf);\n  fputs((const char*)dbuf.buf, stdout);\n  dbuf_free(&dbuf);\n}\n\nint\njs_value_tosize(JSContext* ctx, size_t* sz, JSValueConst value) {\n  uint64_t u64 = 0;\n  int r;\n  r = JS_ToIndex(ctx, &u64, value);\n  *sz = u64;\n  return r;\n}\n\nvoid\njs_value_free_rt(JSRuntime* rt, JSValue v) {\n  if(js_value_has_ref_count(v)) {\n    JSRefCountHeader* p = (JSRefCountHeader*)js_value_get_ptr(v);\n    --p->ref_count;\n    if(p->ref_count == 0)\n      __JS_FreeValueRT(rt, v);\n  }\n}\n\nchar*\njs_cstring_ptr(JSValueConst v) {\n  JSString* p;\n\n  if(JS_IsString(v)) {\n    p = JS_VALUE_GET_PTR(v);\n    return (char*)p->u.str8;\n  }\n  return 0;\n}\nchar*\njs_cstring_dup(JSContext* ctx, const char* str) {\n  JSString* p;\n  if(!str)\n    return 0;\n  /* purposely removing constness */\n  p = (JSString*)(void*)(str - offsetof(JSString, u));\n  JS_DupValue(ctx, JS_MKPTR(JS_TAG_STRING, p));\n  return (char*)str;\n}\n\nJSValueConst\njs_cstring_value(const char* ptr) {\n  JSString* p;\n  if(!ptr)\n    return JS_UNDEFINED;\n\n  p = (JSString*)(void*)(ptr - offsetof(JSString, u));\n  return JS_MKPTR(JS_TAG_STRING, p);\n}\n\nvoid\njs_cstring_dump(JSContext* ctx, JSValueConst value, DynBuf* db) {\n  const char* str;\n  size_t len;\n\n  str = JS_ToCStringLen(ctx, &len, value);\n  dbuf_append(db, (const uint8_t*)str, len);\n\n  js_cstring_free(ctx, str);\n}\n\nsize_t\ntoken_length(const char* str, size_t len, char delim) {\n  const char *s, *e;\n  size_t pos;\n  for(s = str, e = s + len; s < e; s += pos + 1) {\n    pos = byte_chr(s, e - s, delim);\n    if(s + pos == e)\n      break;\n\n    if(pos == 0 || s[pos - 1] != '\\\\') {\n      s += pos;\n      break;\n    }\n  }\n  return s - str;\n}\n\nJSValue\njs_module_name(JSContext* ctx, JSValueConst value) {\n  JSModuleDef* module;\n  JSValue name = JS_UNDEFINED;\n\n  if(JS_VALUE_GET_TAG(value) == JS_TAG_MODULE && (module = JS_VALUE_GET_PTR(value)))\n    name = JS_AtomToValue(ctx, module->module_name);\n\n  return name;\n}\n\nchar*\njs_module_namestr(JSContext* ctx, JSValueConst value) {\n  JSValue name = js_module_name(ctx, value);\n  char* s = js_tostring(ctx, name);\n  JS_FreeValue(ctx, name);\n  return s;\n}\n\nBOOL\njs_is_arraybuffer(JSContext* ctx, JSValueConst value) {\n  BOOL ret = FALSE;\n  if(!ret)\n    ret |= js_value_isclass(ctx, value, JS_CLASS_ARRAY_BUFFER);\n  // if(!ret) ret |= js_object_is(ctx, value, \"[object ArrayBuffer]\");\n  if(!ret) {\n\n    JSObject* obj;\n    if((obj = js_value_get_obj(value)) && obj->class_id) {\n      JSValue ctor = js_global_get(ctx, \"ArrayBuffer\");\n      ret = JS_IsInstanceOf(ctx, value, ctor);\n      JS_FreeValue(ctx, ctor);\n    }\n  }\n  return ret;\n}\n\nBOOL\njs_is_sharedarraybuffer(JSContext* ctx, JSValueConst value) {\n  return js_value_isclass(ctx, value, JS_CLASS_SHARED_ARRAY_BUFFER) ||\n         js_object_is(ctx, value, \"[object SharedArrayBuffer]\");\n}\n\nBOOL\njs_is_map(JSContext* ctx, JSValueConst value) {\n  return js_value_isclass(ctx, value, JS_CLASS_MAP) || js_object_is(ctx, value, \"[object Map]\");\n}\n\nBOOL\njs_is_set(JSContext* ctx, JSValueConst value) {\n  return js_value_isclass(ctx, value, JS_CLASS_SET) || js_object_is(ctx, value, \"[object Set]\");\n}\n\nBOOL\njs_is_generator(JSContext* ctx, JSValueConst value) {\n  return js_value_isclass(ctx, value, JS_CLASS_GENERATOR) || js_object_is(ctx, value, \"[object Generator]\");\n}\n\nBOOL\njs_is_regexp(JSContext* ctx, JSValueConst value) {\n  return js_value_isclass(ctx, value, JS_CLASS_REGEXP) || js_object_is(ctx, value, \"[object RegExp]\");\n}\n\nBOOL\njs_is_promise(JSContext* ctx, JSValueConst value) {\n  return js_value_isclass(ctx, value, JS_CLASS_PROMISE) || js_object_is(ctx, value, \"[object Promise]\");\n}\n\nBOOL\njs_is_iterable(JSContext* ctx, JSValueConst obj) {\n  JSAtom atom;\n  BOOL ret = FALSE;\n  atom = js_symbol_static_atom(ctx, \"iterator\");\n  if(JS_HasProperty(ctx, obj, atom))\n    ret = TRUE;\n\n  JS_FreeAtom(ctx, atom);\n  if(!ret) {\n    atom = js_symbol_static_atom(ctx, \"asyncIterator\");\n    if(JS_HasProperty(ctx, obj, atom))\n      ret = TRUE;\n\n    JS_FreeAtom(ctx, atom);\n  }\n  return ret;\n}\n\nBOOL\njs_is_iterator(JSContext* ctx, JSValueConst obj) {\n  if(JS_IsObject(obj)) {\n    JSValue next = JS_GetPropertyStr(ctx, obj, \"next\");\n\n    if(JS_IsFunction(ctx,next))\n      return TRUE;\n  } \n  return FALSE;\n}\n\nint\njs_is_typedarray(JSContext* ctx, JSValueConst value) {\n  JSClassID id = js_get_classid(value);\n  return id >= JS_CLASS_UINT8C_ARRAY && id <= JS_CLASS_FLOAT64_ARRAY;\n}\n\nJSValue\njs_typedarray_prototype(JSContext* ctx) {\n  JSValue u8arr_proto = js_global_prototype(ctx, \"Uint8Array\");\n  JSValue typedarr_proto = JS_GetPrototype(ctx, u8arr_proto);\n  JS_FreeValue(ctx, u8arr_proto);\n  return typedarr_proto;\n}\n\nJSValue\njs_typedarray_constructor(JSContext* ctx) {\n  JSValue typedarr_proto = js_typedarray_prototype(ctx);\n  JSValue typedarr_ctor = JS_GetPropertyStr(ctx, typedarr_proto, \"constructor\");\n  JS_FreeValue(ctx, typedarr_proto);\n  return typedarr_ctor;\n}\n\nJSValue\njs_invoke(JSContext* ctx, JSValueConst this_obj, const char* method, int argc, JSValueConst argv[]) {\n  JSAtom atom;\n  JSValue ret;\n  atom = JS_NewAtom(ctx, method);\n  ret = JS_Invoke(ctx, this_obj, atom, argc, argv);\n  JS_FreeAtom(ctx, atom);\n  return ret;\n}\n\nJSValue\njs_symbol_operatorset_value(JSContext* ctx) {\n  return js_symbol_static_value(ctx, \"operatorSet\");\n}\n\nJSAtom\njs_symbol_operatorset_atom(JSContext* ctx) {\n  JSValue operator_set = js_symbol_operatorset_value(ctx);\n  JSAtom atom = JS_ValueToAtom(ctx, operator_set);\n  JS_FreeValue(ctx, operator_set);\n  return atom;\n}\n\nJSValue\njs_operators_create(JSContext* ctx, JSValue* this_obj) {\n  JSValue operators = js_global_get(ctx, \"Operators\");\n  JSValue create_fun = JS_GetPropertyStr(ctx, operators, \"create\");\n  if(this_obj)\n    *this_obj = operators;\n  else\n    JS_FreeValue(ctx, operators);\n  return create_fun;\n}\n\nJSValue\njs_new_number(JSContext* ctx, int32_t n) {\n  if(n == INT32_MAX)\n    return JS_NewFloat64(ctx, INFINITY);\n\n  return JS_NewInt32(ctx, n);\n}\n",
			"file": "/home/roman/Sources/plot-cv/quickjs/modules/utils.c",
			"file_size": 40878,
			"file_write_time": 132725265216158722,
			"redo_stack":
			[
				[
					5,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAtZkAAAAAAAC8mQAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 40876,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "quickjs-misc.c",
			"settings":
			{
				"buffer_size": 38770,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					225,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAD2MAAAAAAAAPowAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPYwAAAAAAAA9jAAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "rand"
					},
					"BQAAADSMAAAAAAAANYwAAAAAAAAAAAAANYwAAAAAAAA1jAAAAAAAAAYAAAByYW5kb201jAAAAAAAADaMAAAAAAAAAAAAADaMAAAAAAAAN4wAAAAAAAAAAAAAN4wAAAAAAAA4jAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANIwAAAAAAAA6jAAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAEyMAAAAAAAATYwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATIwAAAAAAABMjAAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAE2MAAAAAAAATowAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATYwAAAAAAABNjAAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					2,
					"left_delete",
					null,
					"AgAAAE2MAAAAAAAATYwAAAAAAAABAAAAIEyMAAAAAAAATIwAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAATowAAAAAAABOjAAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEyMAAAAAAAATYwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATIwAAAAAAABMjAAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAE2MAAAAAAAATowAAAAAAAAAAAAATowAAAAAAABPjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATYwAAAAAAABNjAAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"cut",
					null,
					"AQAAACaMAAAAAAAAJowAAAAAAAArAAAASlNfQ0ZVTkNfREVGKCJyYW5kIiwgMCwganNfbWlzY19yYW5kb20sIDApLA",
					"AQAAAAAAAAABAAAAJowAAAAAAABRjAAAAAAAAP///////+9/"
				],
				[
					246,
					1,
					"paste",
					null,
					"AQAAACaMAAAAAAAAUYwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJowAAAAAAAAmjAAAAAAAAAAAAAAAAPC/"
				],
				[
					247,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFGMAAAAAAAAUowAAAAAAAAAAAAAUowAAAAAAABWjAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUYwAAAAAAABRjAAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					1,
					"paste",
					null,
					"AQAAAFaMAAAAAAAAgYwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVowAAAAAAABWjAAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"insert",
					{
						"characters": "MAGIC_"
					},
					"BgAAAC+MAAAAAAAAMIwAAAAAAAAAAAAAMIwAAAAAAAAxjAAAAAAAAAAAAAAxjAAAAAAAADKMAAAAAAAAAAAAADKMAAAAAAAAM4wAAAAAAAAAAAAAM4wAAAAAAAA0jAAAAAAAAAAAAAA0jAAAAAAAADWMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAL4wAAAAAAAAvjAAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": "MAGIC_"
					},
					"BgAAAGWMAAAAAAAAZowAAAAAAAAAAAAAZowAAAAAAABnjAAAAAAAAAAAAABnjAAAAAAAAGiMAAAAAAAAAAAAAGiMAAAAAAAAaYwAAAAAAAAAAAAAaYwAAAAAAABqjAAAAAAAAAAAAABqjAAAAAAAAGuMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZYwAAAAAAABljAAAAAAAAAAAAAAAAPC/"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAHCMAAAAAAAAcYwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcIwAAAAAAABwjAAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"left_delete",
					null,
					"AQAAAIuMAAAAAAAAi4wAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAjIwAAAAAAACMjAAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAIuMAAAAAAAAjIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi4wAAAAAAACLjAAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"left_delete",
					null,
					"AQAAAHeMAAAAAAAAd4wAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAeIwAAAAAAAB4jAAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAHeMAAAAAAAAeIwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAd4wAAAAAAAB3jAAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"right_delete",
					null,
					"AQAAAHiMAAAAAAAAeIwAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAeIwAAAAAAAB4jAAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": "\nswitch"
					},
					"CAAAABx+AAAAAAAAHX4AAAAAAAAAAAAAHX4AAAAAAAAffgAAAAAAAAAAAAAffgAAAAAAACB+AAAAAAAAAAAAACB+AAAAAAAAIX4AAAAAAAAAAAAAIX4AAAAAAAAifgAAAAAAAAAAAAAifgAAAAAAACN+AAAAAAAAAAAAACN+AAAAAAAAJH4AAAAAAAAAAAAAJH4AAAAAAAAlfgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHH4AAAAAAAAcfgAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACV+AAAAAAAAJ34AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJX4AAAAAAAAlfgAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": "magic"
					},
					"BQAAACZ+AAAAAAAAJ34AAAAAAAAAAAAAJ34AAAAAAAAofgAAAAAAAAAAAAAofgAAAAAAACl+AAAAAAAAAAAAACl+AAAAAAAAKn4AAAAAAAAAAAAAKn4AAAAAAAArfgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJn4AAAAAAAAmfgAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACx+AAAAAAAALX4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALH4AAAAAAAAsfgAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC1+AAAAAAAAL34AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALX4AAAAAAAAtfgAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAC5+AAAAAAAAL34AAAAAAAAAAAAAL34AAAAAAAAxfgAAAAAAAAAAAAAxfgAAAAAAADJ+AAAAAAAAAAAAADJ+AAAAAAAANH4AAAAAAAAAAAAAL34AAAAAAAAvfgAAAAAAAAIAAAAgIC9+AAAAAAAAM34AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALn4AAAAAAAAufgAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": "case"
					},
					"BAAAADN+AAAAAAAANH4AAAAAAAAAAAAANH4AAAAAAAA1fgAAAAAAAAAAAAA1fgAAAAAAADZ+AAAAAAAAAAAAADZ+AAAAAAAAN34AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAM34AAAAAAAAzfgAAAAAAAAAAAAAAAPC/"
				],
				[
					276,
					1,
					"insert",
					{
						"characters": " 0:"
					},
					"AwAAADd+AAAAAAAAOH4AAAAAAAAAAAAAOH4AAAAAAAA5fgAAAAAAAAAAAAA5fgAAAAAAADp+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAN34AAAAAAAA3fgAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADp+AAAAAAAAO34AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOn4AAAAAAAA6fgAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAADt+AAAAAAAAPX4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAO34AAAAAAAA7fgAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAADx+AAAAAAAAPX4AAAAAAAAAAAAAPX4AAAAAAABBfgAAAAAAAAAAAABBfgAAAAAAAEJ+AAAAAAAAAAAAAEJ+AAAAAAAARn4AAAAAAAAAAAAAPX4AAAAAAAA9fgAAAAAAAAQAAAAgICAgPX4AAAAAAABDfgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPH4AAAAAAAA8fgAAAAAAAAAAAAAAAPC/"
				],
				[
					280,
					1,
					"insert",
					{
						"characters": "bnrea"
					},
					"BQAAAEN+AAAAAAAARH4AAAAAAAAAAAAARH4AAAAAAABFfgAAAAAAAAAAAABFfgAAAAAAAEZ+AAAAAAAAAAAAAEZ+AAAAAAAAR34AAAAAAAAAAAAAR34AAAAAAABIfgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ34AAAAAAABDfgAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					4,
					"left_delete",
					null,
					"BAAAAEd+AAAAAAAAR34AAAAAAAABAAAAYUZ+AAAAAAAARn4AAAAAAAABAAAAZUV+AAAAAAAARX4AAAAAAAABAAAAckR+AAAAAAAARH4AAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAASH4AAAAAAABIfgAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "reak;"
					},
					"BQAAAER+AAAAAAAARX4AAAAAAAAAAAAARX4AAAAAAABGfgAAAAAAAAAAAABGfgAAAAAAAEd+AAAAAAAAAAAAAEd+AAAAAAAASH4AAAAAAAAAAAAASH4AAAAAAABJfgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARH4AAAAAAABEfgAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"cut",
					null,
					"AQAAAC9+AAAAAAAAL34AAAAAAAAhAAAAICAgIGNhc2UgMDogewogICAgICBicmVhazsKICAgIH0K",
					"AQAAAAAAAAABAAAAUH4AAAAAAAAvfgAAAAAAAAAAAAAAAAAA"
				],
				[
					287,
					2,
					"paste",
					null,
					"AgAAAC9+AAAAAAAAUH4AAAAAAAAAAAAAUH4AAAAAAABxfgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAL34AAAAAAAAvfgAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"left_delete",
					null,
					"AQAAAFl+AAAAAAAAWX4AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAWn4AAAAAAABafgAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAFl+AAAAAAAAWn4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWX4AAAAAAABZfgAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					1,
					"cut",
					null,
					"AQAAAHV+AAAAAAAAdX4AAAAAAABAAAAAIHVpbnQzMl90IG51bSA9IHBjZzMyX3JhbmRvbSgpOwogIHJldHVybiBKU19OZXdVaW50MzIoY3R4LCBudW0pOw",
					"AQAAAAAAAAABAAAAdX4AAAAAAAC1fgAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"paste",
					null,
					"AgAAAD1+AAAAAAAAfX4AAAAAAAAAAAAAfX4AAAAAAAB9fgAAAAAAAAwAAAAgICAgICBicmVhazs",
					"AQAAAAAAAAABAAAASX4AAAAAAAA9fgAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABl+AAAAAAAAGn4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGX4AAAAAAAAZfgAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": " intm"
					},
					"BQAAABp+AAAAAAAAG34AAAAAAAAAAAAAG34AAAAAAAAcfgAAAAAAAAAAAAAcfgAAAAAAAB1+AAAAAAAAAAAAAB1+AAAAAAAAHn4AAAAAAAAAAAAAHn4AAAAAAAAffgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGn4AAAAAAAAafgAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"left_delete",
					null,
					"AQAAAB5+AAAAAAAAHn4AAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAH34AAAAAAAAffgAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": " magic"
					},
					"BgAAAB5+AAAAAAAAH34AAAAAAAAAAAAAH34AAAAAAAAgfgAAAAAAAAAAAAAgfgAAAAAAACF+AAAAAAAAAAAAACF+AAAAAAAAIn4AAAAAAAAAAAAAIn4AAAAAAAAjfgAAAAAAAAAAAAAjfgAAAAAAACR+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHn4AAAAAAAAefgAAAAAAAAAAAAAAAPC/"
				],
				[
					311,
					1,
					"insert",
					{
						"characters": "\nop"
					},
					"BQAAAJx+AAAAAAAAnX4AAAAAAAAAAAAAnX4AAAAAAAChfgAAAAAAAAAAAAChfgAAAAAAAKN+AAAAAAAAAAAAAKN+AAAAAAAApH4AAAAAAAAAAAAApH4AAAAAAAClfgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnH4AAAAAAACcfgAAAAAAAAAAAAAAgIdA"
				],
				[
					312,
					2,
					"left_delete",
					null,
					"AgAAAKR+AAAAAAAApH4AAAAAAAABAAAAcKN+AAAAAAAAo34AAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAApX4AAAAAAAClfgAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					1,
					"paste",
					null,
					"AQAAAOEEAAAAAAAAOQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QQAAAAAAADhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAADkFAAAAAAAAOgUAAAAAAAAAAAAA9n4AAAAAAAD2fgAAAAAAAAYAAAAgICAgICA",
					"AQAAAAAAAAABAAAAOQUAAAAAAAA5BQAAAAAAAAAAAAAAACBA"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAOkEAAAAAAAA6gQAAAAAAAAAAAAA6gQAAAAAAADqBAAAAAAAAAYAAABpbmxpbmU",
					"AQAAAAAAAAABAAAA6QQAAAAAAADvBAAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"insert",
					{
						"characters": "JS_T"
					},
					"BAAAAPF+AAAAAAAA8n4AAAAAAAAAAAAA8n4AAAAAAADzfgAAAAAAAAAAAADzfgAAAAAAAPR+AAAAAAAAAAAAAPR+AAAAAAAA9X4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8X4AAAAAAADxfgAAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "oI"
					},
					"AgAAAPV+AAAAAAAA9n4AAAAAAAAAAAAA9n4AAAAAAAD3fgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9X4AAAAAAAD1fgAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": "uint32_t"
					},
					"CQAAAPF+AAAAAAAA8n4AAAAAAAAAAAAA8n4AAAAAAADyfgAAAAAAAAYAAABKU19Ub0nyfgAAAAAAAPN+AAAAAAAAAAAAAPN+AAAAAAAA9H4AAAAAAAAAAAAA9H4AAAAAAAD1fgAAAAAAAAAAAAD1fgAAAAAAAPZ+AAAAAAAAAAAAAPZ+AAAAAAAA934AAAAAAAAAAAAA934AAAAAAAD4fgAAAAAAAAAAAAD4fgAAAAAAAPl+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8X4AAAAAAAD3fgAAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": " st"
					},
					"AwAAAPl+AAAAAAAA+n4AAAAAAAAAAAAA+n4AAAAAAAD7fgAAAAAAAAAAAAD7fgAAAAAAAPx+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+X4AAAAAAAD5fgAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAPx+AAAAAAAA/X4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/H4AAAAAAAD8fgAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "\nJS_ToUint32"
					},
					"DAAAAP1+AAAAAAAA/n4AAAAAAAAAAAAA/n4AAAAAAAD/fgAAAAAAAAAAAAD/fgAAAAAAAAB/AAAAAAAAAAAAAAB/AAAAAAAAAX8AAAAAAAAAAAAAAX8AAAAAAAACfwAAAAAAAAAAAAACfwAAAAAAAAN/AAAAAAAAAAAAAAN/AAAAAAAABH8AAAAAAAAAAAAABH8AAAAAAAAFfwAAAAAAAAAAAAAFfwAAAAAAAAZ/AAAAAAAAAAAAAAZ/AAAAAAAAB38AAAAAAAAAAAAAB38AAAAAAAAIfwAAAAAAAAAAAAAIfwAAAAAAAAl/AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/X4AAAAAAAD9fgAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAl/AAAAAAAAC38AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACX8AAAAAAAAJfwAAAAAAAAAAAAAAAPC/"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAAp/AAAAAAAAC38AAAAAAAAAAAAAC38AAAAAAAAMfwAAAAAAAAAAAAAMfwAAAAAAAA1/AAAAAAAAAAAAAA1/AAAAAAAADn8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACn8AAAAAAAAKfwAAAAAAAAAAAAAAAPC/"
				],
				[
					344,
					1,
					"insert",
					{
						"characters": " &stg,"
					},
					"BgAAAA5/AAAAAAAAD38AAAAAAAAAAAAAD38AAAAAAAAQfwAAAAAAAAAAAAAQfwAAAAAAABF/AAAAAAAAAAAAABF/AAAAAAAAEn8AAAAAAAAAAAAAEn8AAAAAAAATfwAAAAAAAAAAAAATfwAAAAAAABR/AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADn8AAAAAAAAOfwAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": " ar"
					},
					"AwAAABR/AAAAAAAAFX8AAAAAAAAAAAAAFX8AAAAAAAAWfwAAAAAAAAAAAAAWfwAAAAAAABd/AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFH8AAAAAAAAUfwAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					5,
					"left_delete",
					null,
					"BQAAABZ/AAAAAAAAFn8AAAAAAAABAAAAchV/AAAAAAAAFX8AAAAAAAABAAAAYRR/AAAAAAAAFH8AAAAAAAABAAAAIBN/AAAAAAAAE38AAAAAAAABAAAALBJ/AAAAAAAAEn8AAAAAAAABAAAAZw",
					"AQAAAAAAAAABAAAAF38AAAAAAAAXfwAAAAAAAAAAAAAAAPC/"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": " ,"
					},
					"AgAAABJ/AAAAAAAAE38AAAAAAAAAAAAAE38AAAAAAAAUfwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEn8AAAAAAAASfwAAAAAAAAAAAAAAAPC/"
				],
				[
					348,
					1,
					"insert",
					{
						"characters": " arv"
					},
					"BAAAABR/AAAAAAAAFX8AAAAAAAAAAAAAFX8AAAAAAAAWfwAAAAAAAAAAAAAWfwAAAAAAABd/AAAAAAAAAAAAABd/AAAAAAAAGH8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFH8AAAAAAAAUfwAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"left_delete",
					null,
					"AQAAABd/AAAAAAAAF38AAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAGH8AAAAAAAAYfwAAAAAAAAAAAAAAAPC/"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": "gv"
					},
					"AgAAABd/AAAAAAAAGH8AAAAAAAAAAAAAGH8AAAAAAAAZfwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAF38AAAAAAAAXfwAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABl/AAAAAAAAG38AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGX8AAAAAAAAZfwAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAABp/AAAAAAAAG38AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGn8AAAAAAAAafwAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB1/AAAAAAAAHn8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHX8AAAAAAAAdfwAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB5/AAAAAAAAH38AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHn8AAAAAAAAefwAAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					1,
					"insert",
					{
						"characters": "=0"
					},
					"AgAAAPx+AAAAAAAA/X4AAAAAAAAAAAAA/X4AAAAAAAD+fgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/H4AAAAAAAD8fgAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"paste",
					null,
					"AQAAACF/AAAAAAAAMX8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIX8AAAAAAAAhfwAAAAAAAAAAAAAAAFpA"
				],
				[
					362,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADF/AAAAAAAAM38AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMX8AAAAAAAAxfwAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAADJ/AAAAAAAAM38AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMn8AAAAAAAAyfwAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"left_delete",
					null,
					"AQAAADJ/AAAAAAAAMn8AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAM38AAAAAAAAzfwAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": "st"
					},
					"AgAAADJ/AAAAAAAAM38AAAAAAAAAAAAAM38AAAAAAAA0fwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMn8AAAAAAAAyfwAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADV/AAAAAAAANn8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANX8AAAAAAAA1fwAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					5,
					"left_delete",
					null,
					"BQAAAEF/AAAAAAAAQX8AAAAAAAABAAAAa0B/AAAAAAAAQH8AAAAAAAABAAAAYT9/AAAAAAAAP38AAAAAAAABAAAAZT5/AAAAAAAAPn8AAAAAAAABAAAAcj1/AAAAAAAAPX8AAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAQn8AAAAAAABCfwAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAD1/AAAAAAAAPn8AAAAAAAAAAAAAPn8AAAAAAAA/fwAAAAAAAAAAAAA/fwAAAAAAAEB/AAAAAAAAAAAAAEB/AAAAAAAAQX8AAAAAAAAAAAAAQX8AAAAAAABCfwAAAAAAAAAAAABCfwAAAAAAAEN/AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPX8AAAAAAAA9fwAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": " JS_UNDEFINED"
					},
					"DQAAAEN/AAAAAAAARH8AAAAAAAAAAAAARH8AAAAAAABFfwAAAAAAAAAAAABFfwAAAAAAAEZ/AAAAAAAAAAAAAEZ/AAAAAAAAR38AAAAAAAAAAAAAR38AAAAAAABIfwAAAAAAAAAAAABIfwAAAAAAAEl/AAAAAAAAAAAAAEl/AAAAAAAASn8AAAAAAAAAAAAASn8AAAAAAABLfwAAAAAAAAAAAABLfwAAAAAAAEx/AAAAAAAAAAAAAEx/AAAAAAAATX8AAAAAAAAAAAAATX8AAAAAAABOfwAAAAAAAAAAAABOfwAAAAAAAE9/AAAAAAAAAAAAAE9/AAAAAAAAUH8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQ38AAAAAAABDfwAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"left_delete",
					null,
					"AQAAAFt/AAAAAAAAW38AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAXH8AAAAAAABcfwAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAW38AAAAAAABbfwAAAAAAAAAAAAAAAPC/"
				],
				[
					523,
					1,
					"cut",
					null,
					"AQAAADiNAAAAAAAAOI0AAAAAAAA2AAAAICAgIEpTX0NGVU5DX01BR0lDX0RFRigicmFuZCIsIDAsIGpzX21pc2NfcmFuZG9tLCAwKSwK",
					"AQAAAAAAAAABAAAAbo0AAAAAAAA4jQAAAAAAAAAAAAAAAPC/"
				],
				[
					524,
					2,
					"paste",
					null,
					"AgAAADiNAAAAAAAAbo0AAAAAAAAAAAAAbo0AAAAAAACkjQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOI0AAAAAAAA4jQAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"insert",
					{
						"characters": "i"
					},
					"AQAAAIqNAAAAAAAAi40AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAio0AAAAAAACKjQAAAAAAAAAAAAAAAPC/"
				],
				[
					530,
					1,
					"left_delete",
					null,
					"AQAAAKGNAAAAAAAAoY0AAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAoo0AAAAAAACijQAAAAAAAAAAAAAAAPC/"
				],
				[
					531,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAKGNAAAAAAAAoo0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoY0AAAAAAAChjQAAAAAAAAAAAAAAAPC/"
				],
				[
					533,
					1,
					"left_delete",
					null,
					"AQAAANiNAAAAAAAA2I0AAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAA2Y0AAAAAAADZjQAAAAAAAAAAAAAAAHpA"
				],
				[
					534,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAANiNAAAAAAAA2Y0AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2I0AAAAAAADYjQAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAPF+AAAAAAAA8n4AAAAAAAAAAAAA8n4AAAAAAADyfgAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAA8X4AAAAAAADyfgAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"cut",
					null,
					"AQAAAIx+AAAAAAAAjH4AAAAAAABbAAAAICBjYXNlIDA6IHsKICAgICAgdWludDMyX3QgbnVtID0gcGNnMzJfcmFuZG9tKCk7CiAgICAgIHJldHVybiBKU19OZXdVaW50MzIoY3R4LCBudW0pOwogICAgfQ",
					"AQAAAAAAAAABAAAAjH4AAAAAAADnfgAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					2,
					"paste",
					null,
					"AgAAAIx+AAAAAAAA534AAAAAAAAAAAAA534AAAAAAABCfwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjH4AAAAAAACMfgAAAAAAAAAAAAAAAPC/"
				],
				[
					547,
					2,
					"left_delete",
					null,
					"AgAAACx/AAAAAAAALH8AAAAAAAABAAAAaSt/AAAAAAAAK38AAAAAAAABAAAAVQ",
					"AQAAAAAAAAABAAAALX8AAAAAAAAtfwAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": "I"
					},
					"AQAAACt/AAAAAAAALH8AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAK38AAAAAAAArfwAAAAAAAAAAAAAAAPC/"
				],
				[
					553,
					1,
					"right_delete",
					null,
					"AQAAAPl+AAAAAAAA+X4AAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAA+X4AAAAAAAD5fgAAAAAAAAAAAAAAAPC/"
				],
				[
					559,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AgAAAO5+AAAAAAAA734AAAAAAAAAAAAA734AAAAAAADvfgAAAAAAAAEAAAAw",
					"AQAAAAAAAAABAAAA7n4AAAAAAADvfgAAAAAAAAAAAAAAAPC/"
				],
				[
					564,
					1,
					"paste",
					null,
					"AQAAADEFAAAAAAAAdAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQUAAAAAAAAxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAADoFAAAAAAAAOwUAAAAAAAAAAAAAOwUAAAAAAAA7BQAAAAAAAAYAAABpbmxpbmU",
					"AQAAAAAAAAABAAAAOgUAAAAAAABABQAAAAAAAAAAAAAAAPC/"
				],
				[
					584,
					1,
					"insert",
					{
						"characters": "argc"
					},
					"BAAAAOuAAAAAAAAA7IAAAAAAAAAAAAAA7IAAAAAAAADtgAAAAAAAAAAAAADtgAAAAAAAAO6AAAAAAAAAAAAAAO6AAAAAAAAA74AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA64AAAAAAAADrgAAAAAAAAAAAAAAAAPC/"
				],
				[
					585,
					1,
					"insert",
					{
						"characters": " >"
					},
					"AgAAAO+AAAAAAAAA8IAAAAAAAAAAAAAA8IAAAAAAAADxgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA74AAAAAAAADvgAAAAAAAAAAAAAAAAPC/"
				],
				[
					586,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAAPGAAAAAAAAA8oAAAAAAAAAAAAAA8oAAAAAAAADzgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8YAAAAAAAADxgAAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": " ?"
					},
					"AgAAAPOAAAAAAAAA9IAAAAAAAAAAAAAA9IAAAAAAAAD1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA84AAAAAAAADzgAAAAAAAAAAAAAAAAPC/"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPWAAAAAAAAA9oAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9YAAAAAAAAD1gAAAAAAAAAAAAAAAAPC/"
				],
				[
					589,
					1,
					"paste",
					null,
					"AQAAAPaAAAAAAAAAF4EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9oAAAAAAAAD2gAAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABeBAAAAAAAAGIEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAF4EAAAAAAAAXgQAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABeBAAAAAAAAGYEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAF4EAAAAAAAAXgQAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert",
					{
						"characters": "\nuint32_t"
					},
					"CgAAALWAAAAAAAAAtoAAAAAAAAAAAAAAtoAAAAAAAAC4gAAAAAAAAAAAAAC4gAAAAAAAALmAAAAAAAAAAAAAALmAAAAAAAAAuoAAAAAAAAAAAAAAuoAAAAAAAAC7gAAAAAAAAAAAAAC7gAAAAAAAALyAAAAAAAAAAAAAALyAAAAAAAAAvYAAAAAAAAAAAAAAvYAAAAAAAAC+gAAAAAAAAAAAAAC+gAAAAAAAAL+AAAAAAAAAAAAAAL+AAAAAAAAAwIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtYAAAAAAAAC1gAAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"insert",
					{
						"characters": " bound=0;"
					},
					"CQAAAMCAAAAAAAAAwYAAAAAAAAAAAAAAwYAAAAAAAADCgAAAAAAAAAAAAADCgAAAAAAAAMOAAAAAAAAAAAAAAMOAAAAAAAAAxIAAAAAAAAAAAAAAxIAAAAAAAADFgAAAAAAAAAAAAADFgAAAAAAAAMaAAAAAAAAAAAAAAMaAAAAAAAAAx4AAAAAAAAAAAAAAx4AAAAAAAADIgAAAAAAAAAAAAADIgAAAAAAAAMmAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwIAAAAAAAADAgAAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"BAAAAMmAAAAAAAAAyoAAAAAAAAAAAAAAyoAAAAAAAADMgAAAAAAAAAAAAADMgAAAAAAAAM2AAAAAAAAAAAAAAM2AAAAAAAAAzoAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyYAAAAAAAADJgAAAAAAAAAAAAAAAAPC/"
				],
				[
					600,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAM6AAAAAAAAA0IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzoAAAAAAAADOgAAAAAAAAAAAAAAAAPC/"
				],
				[
					601,
					1,
					"insert",
					{
						"characters": "arc"
					},
					"AwAAAM+AAAAAAAAA0IAAAAAAAAAAAAAA0IAAAAAAAADRgAAAAAAAAAAAAADRgAAAAAAAANKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAz4AAAAAAAADPgAAAAAAAAAAAAAAAAPC/"
				],
				[
					602,
					1,
					"left_delete",
					null,
					"AQAAANGAAAAAAAAA0YAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAA0oAAAAAAAADSgAAAAAAAAAAAAAAAAPC/"
				],
				[
					603,
					1,
					"insert",
					{
						"characters": "gc"
					},
					"AgAAANGAAAAAAAAA0oAAAAAAAAAAAAAA0oAAAAAAAADTgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0YAAAAAAAADRgAAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": "  "
					},
					"AgAAANOAAAAAAAAA1IAAAAAAAAAAAAAA1IAAAAAAAADVgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA04AAAAAAAADTgAAAAAAAAAAAAAAAAPC/"
				],
				[
					605,
					1,
					"left_delete",
					null,
					"AQAAANSAAAAAAAAA1IAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA1YAAAAAAAADVgAAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAANSAAAAAAAAA1YAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1IAAAAAAAADUgAAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": " 0"
					},
					"AgAAANWAAAAAAAAA1oAAAAAAAAAAAAAA1oAAAAAAAADXgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1YAAAAAAAADVgAAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "\nJS_ToUint32"
					},
					"DwAAANiAAAAAAAAA2YAAAAAAAAAAAAAA2YAAAAAAAADbgAAAAAAAAAAAAADZgAAAAAAAANmAAAAAAAAAAgAAACAg2YAAAAAAAADdgAAAAAAAAAAAAADdgAAAAAAAAN6AAAAAAAAAAAAAAN6AAAAAAAAA34AAAAAAAAAAAAAA34AAAAAAAADggAAAAAAAAAAAAADggAAAAAAAAOGAAAAAAAAAAAAAAOGAAAAAAAAA4oAAAAAAAAAAAAAA4oAAAAAAAADjgAAAAAAAAAAAAADjgAAAAAAAAOSAAAAAAAAAAAAAAOSAAAAAAAAA5YAAAAAAAAAAAAAA5YAAAAAAAADmgAAAAAAAAAAAAADmgAAAAAAAAOeAAAAAAAAAAAAAAOeAAAAAAAAA6IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2IAAAAAAAADYgAAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAOiAAAAAAAAA6oAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6IAAAAAAAADogAAAAAAAAAAAAAAAAPC/"
				],
				[
					611,
					1,
					"insert",
					{
						"characters": "ctx,"
					},
					"BAAAAOmAAAAAAAAA6oAAAAAAAAAAAAAA6oAAAAAAAADrgAAAAAAAAAAAAADrgAAAAAAAAOyAAAAAAAAAAAAAAOyAAAAAAAAA7YAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6YAAAAAAAADpgAAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": " &bound,"
					},
					"CAAAAO2AAAAAAAAA7oAAAAAAAAAAAAAA7oAAAAAAAADvgAAAAAAAAAAAAADvgAAAAAAAAPCAAAAAAAAAAAAAAPCAAAAAAAAA8YAAAAAAAAAAAAAA8YAAAAAAAADygAAAAAAAAAAAAADygAAAAAAAAPOAAAAAAAAAAAAAAPOAAAAAAAAA9IAAAAAAAAAAAAAA9IAAAAAAAAD1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7YAAAAAAAADtgAAAAAAAAAAAAAAAAPC/"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": " argv"
					},
					"BQAAAPWAAAAAAAAA9oAAAAAAAAAAAAAA9oAAAAAAAAD3gAAAAAAAAAAAAAD3gAAAAAAAAPiAAAAAAAAAAAAAAPiAAAAAAAAA+YAAAAAAAAAAAAAA+YAAAAAAAAD6gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9YAAAAAAAAD1gAAAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAPqAAAAAAAAA/IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+oAAAAAAAAD6gAAAAAAAAAAAAAAAAPC/"
				],
				[
					615,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAAPuAAAAAAAAA/IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+4AAAAAAAAD7gAAAAAAAAAAAAAAAAPC/"
				],
				[
					617,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAP6AAAAAAAAA/4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/oAAAAAAAAD+gAAAAAAAAAAAAAAAAPC/"
				],
				[
					618,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAP+AAAAAAAAAAIEAAAAAAAAAAAAAAIEAAAAAAAAEgQAAAAAAAAAAAAAAgQAAAAAAAACBAAAAAAAABAAAACAgICAAgQAAAAAAAAKBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/4AAAAAAAAD/gAAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					1,
					"insert",
					{
						"characters": "bound"
					},
					"BgAAAGWBAAAAAAAAZoEAAAAAAAAAAAAAAIEAAAAAAAAAgQAAAAAAAAIAAAAgIGSBAAAAAAAAZYEAAAAAAAAAAAAAZYEAAAAAAABmgQAAAAAAAAAAAABmgQAAAAAAAGeBAAAAAAAAAAAAAGeBAAAAAAAAaIEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZYEAAAAAAABlgQAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAGmBAAAAAAAAaoEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaYEAAAAAAABpgQAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGqBAAAAAAAAa4EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaoEAAAAAAABqgQAAAAAAAAAAAAAAAPC/"
				],
				[
					632,
					1,
					"paste",
					null,
					"AQAAAMWBAAAAAAAA+oEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxYEAAAAAAADFgQAAAAAAAAAAAAAAAPC/"
				],
				[
					634,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA+oEAAAAAAAD6gQAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": " &&"
					},
					"AwAAAJ+AAAAAAAAAoIAAAAAAAAAAAAAAoIAAAAAAAAChgAAAAAAAAAAAAAChgAAAAAAAAKKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAn4AAAAAAAACfgAAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"insert",
					{
						"characters": " JS_àI"
					},
					"BgAAAKKAAAAAAAAAo4AAAAAAAAAAAAAAo4AAAAAAAACkgAAAAAAAAAAAAACkgAAAAAAAAKWAAAAAAAAAAAAAAKWAAAAAAAAApoAAAAAAAAAAAAAApoAAAAAAAACngAAAAAAAAAAAAACngAAAAAAAAKiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAooAAAAAAAACigAAAAAAAAAAAAAAAAPC/"
				],
				[
					641,
					2,
					"left_delete",
					null,
					"AgAAAKeAAAAAAAAAp4AAAAAAAAABAAAASaaAAAAAAAAApoAAAAAAAAACAAAAw6A",
					"AQAAAAAAAAABAAAAqIAAAAAAAACogAAAAAAAAAAAAAAAAPC/"
				],
				[
					642,
					1,
					"insert",
					{
						"characters": "IsNuzm"
					},
					"BgAAAKaAAAAAAAAAp4AAAAAAAAAAAAAAp4AAAAAAAACogAAAAAAAAAAAAACogAAAAAAAAKmAAAAAAAAAAAAAAKmAAAAAAAAAqoAAAAAAAAAAAAAAqoAAAAAAAACrgAAAAAAAAAAAAACrgAAAAAAAAKyAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApoAAAAAAAACmgAAAAAAAAAAAAAAAAPC/"
				],
				[
					643,
					2,
					"left_delete",
					null,
					"AgAAAKuAAAAAAAAAq4AAAAAAAAABAAAAbaqAAAAAAAAAqoAAAAAAAAABAAAAeg",
					"AQAAAAAAAAABAAAArIAAAAAAAACsgAAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "mber"
					},
					"BAAAAKqAAAAAAAAAq4AAAAAAAAAAAAAAq4AAAAAAAACsgAAAAAAAAAAAAACsgAAAAAAAAK2AAAAAAAAAAAAAAK2AAAAAAAAAroAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqoAAAAAAAACqgAAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAK6AAAAAAAAAsIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAroAAAAAAAACugAAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"insert",
					{
						"characters": "argv"
					},
					"BAAAAK+AAAAAAAAAsIAAAAAAAAAAAAAAsIAAAAAAAACxgAAAAAAAAAAAAACxgAAAAAAAALKAAAAAAAAAAAAAALKAAAAAAAAAs4AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAr4AAAAAAAACvgAAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAALOAAAAAAAAAtYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAs4AAAAAAAACzgAAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAALSAAAAAAAAAtYAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtIAAAAAAAAC0gAAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					1,
					"insert",
					{
						"characters": "*20"
					},
					"AwAAANuBAAAAAAAA3IEAAAAAAAAAAAAA3IEAAAAAAADdgQAAAAAAAAAAAADdgQAAAAAAAN6BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA24EAAAAAAADbgQAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"left_delete",
					null,
					"AQAAAN2BAAAAAAAA3YEAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAA3oEAAAAAAADegQAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAN6BAAAAAAAA34EAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3oEAAAAAAADegQAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"left_delete",
					null,
					"AQAAAN6BAAAAAAAA3oEAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAA34EAAAAAAADfgQAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": "-bound"
					},
					"BgAAAN6BAAAAAAAA34EAAAAAAAAAAAAA34EAAAAAAADggQAAAAAAAAAAAADggQAAAAAAAOGBAAAAAAAAAAAAAOGBAAAAAAAA4oEAAAAAAAAAAAAA4oEAAAAAAADjgQAAAAAAAAAAAADjgQAAAAAAAOSBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3oEAAAAAAADegQAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"cut",
					null,
					"AQAAAImBAAAAAAAAiYEAAAAAAACXAAAAICBjYXNlIDE6IHsKICAgICAgaW50MzJfdCBudW0gPSBhcmdjID4gMCA/IHBjZzMyX3JhbmRvbV9ib3VuZGVkX2RpdmlzaW9ubGVzcyhib3VuZCoyKS1ib3VuZCA6IHBjZzMyX3JhbmRvbSgpOwogICAgICByZXR1cm4gSlNfTmV3SW50MzIoY3R4LCBudW0pOwogICAgfQ",
					"AQAAAAAAAAABAAAAiYEAAAAAAAAgggAAAAAAAAAAAAAAAPC/"
				],
				[
					695,
					2,
					"paste",
					null,
					"AgAAAImBAAAAAAAAIIIAAAAAAAAAAAAAIIIAAAAAAAC3ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiYEAAAAAAACJgQAAAAAAAAAAAAAAAPC/"
				],
				[
					699,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAACeCAAAAAAAAKIIAAAAAAAAAAAAAKIIAAAAAAAAoggAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAJ4IAAAAAAAAoggAAAAAAAAAAAAAAAPC/"
				],
				[
					741,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAECCAAAAAAAAQYIAAAAAAAAAAAAAQYIAAAAAAABBggAAAAAAAD0AAABhcmdjID4gMCA/IHBjZzMyX3JhbmRvbV9ib3VuZGVkX2RpdmlzaW9ubGVzcyhib3VuZCoyKS1ib3VuZCA6",
					"AQAAAAAAAAABAAAAQIIAAAAAAAB9ggAAAAAAAAAAAAAAAPC/"
				],
				[
					755,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAACKCAAAAAAAAI4IAAAAAAAAAAAAAI4IAAAAAAAAnggAAAAAAAAAAAAAnggAAAAAAACiCAAAAAAAAAAAAACiCAAAAAAAALIIAAAAAAAAAAAAAI4IAAAAAAAAjggAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAIoIAAAAAAAAiggAAAAAAAAAAAAAAAPC/"
				],
				[
					761,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAC2CAAAAAAAALoIAAAAAAAAAAAAALoIAAAAAAAAuggAAAAAAAAEAAAAy",
					"AQAAAAAAAAABAAAALYIAAAAAAAAuggAAAAAAAAAAAAAAAPC/"
				],
				[
					765,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AgAAAIuCAAAAAAAAjIIAAAAAAAAAAAAAjIIAAAAAAACMggAAAAAAAAEAAAAy",
					"AQAAAAAAAAABAAAAi4IAAAAAAACMggAAAAAAAAAAAAAAAPC/"
				],
				[
					771,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAC2CAAAAAAAALoIAAAAAAAAAAAAALoIAAAAAAAAuggAAAAAAAAEAAAAz",
					"AQAAAAAAAAABAAAALYIAAAAAAAAuggAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAIuCAAAAAAAAjIIAAAAAAAAAAAAAjIIAAAAAAACMggAAAAAAAAEAAAA0",
					"AQAAAAAAAAABAAAAi4IAAAAAAACMggAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"insert",
					{
						"characters": "u"
					},
					"AQAAADiCAAAAAAAAOYIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOIIAAAAAAAA4ggAAAAAAAAAAAAAAAPC/"
				],
				[
					792,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFiCAAAAAAAAWYIAAAAAAAAAAAAAWYIAAAAAAABfggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWIIAAAAAAABYggAAAAAAAP///////+9/"
				],
				[
					797,
					2,
					"left_delete",
					null,
					"AwAAAHSCAAAAAAAAdIIAAAAAAAAEAAAAbnQzMlmCAAAAAAAAWYIAAAAAAAAGAAAAICAgICAgbYIAAAAAAABtggAAAAAAAAEAAABJ",
					"AQAAAAAAAAABAAAAdIIAAAAAAAB4ggAAAAAAAAAAAAAAAPC/"
				],
				[
					798,
					1,
					"insert",
					{
						"characters": "Float64"
					},
					"BwAAAG2CAAAAAAAAboIAAAAAAAAAAAAAboIAAAAAAABvggAAAAAAAAAAAABvggAAAAAAAHCCAAAAAAAAAAAAAHCCAAAAAAAAcYIAAAAAAAAAAAAAcYIAAAAAAAByggAAAAAAAAAAAAByggAAAAAAAHOCAAAAAAAAAAAAAHOCAAAAAAAAdIIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbYIAAAAAAABtggAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"insert",
					{
						"characters": "(double)"
					},
					"CAAAAHqCAAAAAAAAe4IAAAAAAAAAAAAAe4IAAAAAAAB8ggAAAAAAAAAAAAB8ggAAAAAAAH2CAAAAAAAAAAAAAH2CAAAAAAAAfoIAAAAAAAAAAAAAfoIAAAAAAAB/ggAAAAAAAAAAAAB/ggAAAAAAAICCAAAAAAAAAAAAAICCAAAAAAAAgYIAAAAAAAAAAAAAgYIAAAAAAACCggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeoIAAAAAAAB6ggAAAAAAAAAAAAAAAPC/"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAIWCAAAAAAAAhoIAAAAAAAAAAAAAhoIAAAAAAACHggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhYIAAAAAAACFggAAAAAAAAAAAAAAAPC/"
				],
				[
					803,
					1,
					"left_delete",
					null,
					"AQAAAIaCAAAAAAAAhoIAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAh4IAAAAAAACHggAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAIaCAAAAAAAAh4IAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhoIAAAAAAACGggAAAAAAAAAAAAAAAPC/"
				],
				[
					805,
					1,
					"insert",
					{
						"characters": " UIIN"
					},
					"BQAAAIeCAAAAAAAAiIIAAAAAAAAAAAAAiIIAAAAAAACJggAAAAAAAAAAAACJggAAAAAAAIqCAAAAAAAAAAAAAIqCAAAAAAAAi4IAAAAAAAAAAAAAi4IAAAAAAACMggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAh4IAAAAAAACHggAAAAAAAAAAAAAAAPC/"
				],
				[
					806,
					3,
					"left_delete",
					null,
					"AwAAAIuCAAAAAAAAi4IAAAAAAAABAAAAToqCAAAAAAAAioIAAAAAAAABAAAASYmCAAAAAAAAiYIAAAAAAAABAAAASQ",
					"AQAAAAAAAAABAAAAjIIAAAAAAACMggAAAAAAAAAAAAAAAPC/"
				],
				[
					807,
					1,
					"insert",
					{
						"characters": "INT32_MAX"
					},
					"CQAAAImCAAAAAAAAioIAAAAAAAAAAAAAioIAAAAAAACLggAAAAAAAAAAAACLggAAAAAAAIyCAAAAAAAAAAAAAIyCAAAAAAAAjYIAAAAAAAAAAAAAjYIAAAAAAACOggAAAAAAAAAAAACOggAAAAAAAI+CAAAAAAAAAAAAAI+CAAAAAAAAkIIAAAAAAAAAAAAAkIIAAAAAAACRggAAAAAAAAAAAACRggAAAAAAAJKCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiYIAAAAAAACJggAAAAAAAAAAAAAAAPC/"
				],
				[
					817,
					1,
					"left_delete",
					null,
					"AQAAAFiCAAAAAAAAWIIAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAWYIAAAAAAABZggAAAAAAAAAAAAAAACBA"
				],
				[
					834,
					1,
					"cut",
					null,
					"AQAAACCRAAAAAAAAIJEAAAAAAAA3AAAAICAgIEpTX0NGVU5DX01BR0lDX0RFRigicmFuZGkiLCAwLCBqc19taXNjX3JhbmRvbSwgMSksCg",
					"AQAAAAAAAAABAAAAIJEAAAAAAABXkQAAAAAAAAAAAAAAAPC/"
				],
				[
					835,
					2,
					"paste",
					null,
					"AgAAACCRAAAAAAAAV5EAAAAAAAAAAAAAV5EAAAAAAACOkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIJEAAAAAAAAgkQAAAAAAAAAAAAAAAPC/"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAAHORAAAAAAAAdJEAAAAAAAAAAAAAdJEAAAAAAAB0kQAAAAAAAAEAAABp",
					"AQAAAAAAAAABAAAAdJEAAAAAAABzkQAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AgAAAIqRAAAAAAAAi5EAAAAAAAAAAAAAi5EAAAAAAACLkQAAAAAAAAEAAAAx",
					"AQAAAAAAAAABAAAAipEAAAAAAACLkQAAAAAAAAAAAAAAAPC/"
				],
				[
					846,
					1,
					"insert",
					{
						"characters": "3"
					},
					"AgAAAMGRAAAAAAAAwpEAAAAAAAAAAAAAwpEAAAAAAADCkQAAAAAAAAEAAAAy",
					"AQAAAAAAAAABAAAAwZEAAAAAAADCkQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "utils.h",
			"settings":
			{
				"buffer_size": 36986,
				"line_ending": "Unix"
			}
		},
		{
			"file": "quickjs-mmap.c",
			"settings":
			{
				"buffer_size": 3300,
				"line_ending": "Unix"
			}
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 19434,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					867,
					1,
					"paste",
					null,
					"AQAAAOFDAAAAAAAApUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4UMAAAAAAADhQwAAAAAAAAAAAAAAAPC/"
				],
				[
					870,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BwAAAOFDAAAAAAAA4kMAAAAAAAAAAAAA4kMAAAAAAADiQwAAAAAAAAUAAABVdGlsLuJDAAAAAAAA40MAAAAAAAAAAAAA40MAAAAAAADkQwAAAAAAAAAAAADkQwAAAAAAAOVDAAAAAAAAAAAAAOVDAAAAAAAA5kMAAAAAAAAAAAAA5kMAAAAAAADnQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5kMAAAAAAADhQwAAAAAAAAAAAAAAAPC/"
				],
				[
					871,
					1,
					"insert",
					{
						"characters": " functino"
					},
					"CQAAAOdDAAAAAAAA6EMAAAAAAAAAAAAA6EMAAAAAAADpQwAAAAAAAAAAAADpQwAAAAAAAOpDAAAAAAAAAAAAAOpDAAAAAAAA60MAAAAAAAAAAAAA60MAAAAAAADsQwAAAAAAAAAAAADsQwAAAAAAAO1DAAAAAAAAAAAAAO1DAAAAAAAA7kMAAAAAAAAAAAAA7kMAAAAAAADvQwAAAAAAAAAAAADvQwAAAAAAAPBDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA50MAAAAAAADnQwAAAAAAAAAAAAAAAPC/"
				],
				[
					872,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPBDAAAAAAAA8UMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8EMAAAAAAADwQwAAAAAAAAAAAAAAAPC/"
				],
				[
					875,
					2,
					"left_delete",
					null,
					"AgAAAO9DAAAAAAAA70MAAAAAAAABAAAAb+5DAAAAAAAA7kMAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAA8EMAAAAAAADwQwAAAAAAAAAAAAAAAPC/"
				],
				[
					876,
					1,
					"insert",
					{
						"characters": "on"
					},
					"AgAAAO5DAAAAAAAA70MAAAAAAAAAAAAA70MAAAAAAADwQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7kMAAAAAAADuQwAAAAAAAAAAAAAAAPC/"
				],
				[
					878,
					3,
					"left_delete",
					null,
					"AwAAAPpDAAAAAAAA+kMAAAAAAAABAAAAIPlDAAAAAAAA+UMAAAAAAAABAAAAPfhDAAAAAAAA+EMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA+0MAAAAAAAD7QwAAAAAAAAAAAAAAAPC/"
				],
				[
					884,
					3,
					"left_delete",
					null,
					"AwAAAANEAAAAAAAAA0QAAAAAAAABAAAAPgJEAAAAAAAAAkQAAAAAAAABAAAAPQFEAAAAAAAAAUQAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAABEQAAAAAAAAERAAAAAAAAAAAAAAAAPC/"
				],
				[
					886,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOBDAAAAAAAA4UMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4EMAAAAAAADgQwAAAAAAAAAAAAAAAHBA"
				],
				[
					891,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAKxEAAAAAAAArUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArEQAAAAAAACsRAAAAAAAAAAAAAAAAPC/"
				],
				[
					901,
					1,
					"cut",
					null,
					"AQAAAGZHAAAAAAAAZkcAAAAAAAAeAAAAdXRpbC5hbnNpU3R5bGVzID0gYW5zaVN0eWxlczsK",
					"AQAAAAAAAAABAAAAZkcAAAAAAACERwAAAAAAAAAAAAAAAPC/"
				],
				[
					902,
					2,
					"paste",
					null,
					"AgAAAGZHAAAAAAAAhEcAAAAAAAAAAAAAhEcAAAAAAACiRwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZkcAAAAAAABmRwAAAAAAAAAAAAAAAPC/"
				],
				[
					906,
					1,
					"insert",
					{
						"characters": "rsa"
					},
					"BAAAAIlHAAAAAAAAikcAAAAAAAAAAAAAikcAAAAAAACKRwAAAAAAAAoAAABhbnNpU3R5bGVzikcAAAAAAACLRwAAAAAAAAAAAACLRwAAAAAAAIxHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiUcAAAAAAACTRwAAAAAAAAAAAAAAAPC/"
				],
				[
					907,
					2,
					"left_delete",
					null,
					"AgAAAItHAAAAAAAAi0cAAAAAAAABAAAAYYpHAAAAAAAAikcAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAjEcAAAAAAACMRwAAAAAAAAAAAAAAAPC/"
				],
				[
					908,
					1,
					"insert",
					{
						"characters": "andInt"
					},
					"BgAAAIpHAAAAAAAAi0cAAAAAAAAAAAAAi0cAAAAAAACMRwAAAAAAAAAAAACMRwAAAAAAAI1HAAAAAAAAAAAAAI1HAAAAAAAAjkcAAAAAAAAAAAAAjkcAAAAAAACPRwAAAAAAAAAAAACPRwAAAAAAAJBHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAikcAAAAAAACKRwAAAAAAAAAAAAAAAPC/"
				],
				[
					916,
					1,
					"paste",
					null,
					"AgAAAJNHAAAAAAAAmkcAAAAAAAAAAAAAmkcAAAAAAACaRwAAAAAAAAoAAABhbnNpU3R5bGVz",
					"AQAAAAAAAAABAAAAnUcAAAAAAACTRwAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAE0QAAAAAAAAXRAAAAAAAAAAAAAAAAPC/"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAD9EAAAAAAAAQEQAAAAAAAAAAAAAQEQAAAAAAABARAAAAAAAAAsAAAB8fCBVdGlsLnJuZw",
					"AQAAAAAAAAABAAAAP0QAAAAAAABKRAAAAAAAAAAAAAAAAPC/"
				],
				[
					927,
					1,
					"insert",
					{
						"characters": "Math.random"
					},
					"DAAAAH9EAAAAAAAAgEQAAAAAAAAAAAAAgEQAAAAAAACARAAAAAAAAAQAAABVdGlsgEQAAAAAAACBRAAAAAAAAAAAAACBRAAAAAAAAIJEAAAAAAAAAAAAAIJEAAAAAAAAg0QAAAAAAAAAAAAAg0QAAAAAAACERAAAAAAAAAAAAACERAAAAAAAAIVEAAAAAAAAAAAAAIVEAAAAAAAAhkQAAAAAAAAAAAAAhkQAAAAAAACHRAAAAAAAAAAAAACHRAAAAAAAAIhEAAAAAAAAAAAAAIhEAAAAAAAAiUQAAAAAAAAAAAAAiUQAAAAAAACKRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAg0QAAAAAAAB/RAAAAAAAAAAAAAAAAPC/"
				],
				[
					928,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAIpEAAAAAAAAi0QAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAikQAAAAAAACKRAAAAAAAAAAAAAAAAPC/"
				],
				[
					930,
					1,
					"insert",
					{
						"characters": "rande"
					},
					"BgAAAItEAAAAAAAAjEQAAAAAAAAAAAAAjEQAAAAAAACMRAAAAAAAAAEAAAAujEQAAAAAAACNRAAAAAAAAAAAAACNRAAAAAAAAI5EAAAAAAAAAAAAAI5EAAAAAAAAj0QAAAAAAAAAAAAAj0QAAAAAAACQRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi0QAAAAAAACMRAAAAAAAAAAAAAAAAPC/"
				],
				[
					931,
					2,
					"left_delete",
					null,
					"AgAAAI9EAAAAAAAAj0QAAAAAAAABAAAAZY5EAAAAAAAAjkQAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAkEQAAAAAAACQRAAAAAAAAAAAAAAAAPC/"
				],
				[
					932,
					1,
					"insert",
					{
						"characters": "ge[0]"
					},
					"BQAAAI5EAAAAAAAAj0QAAAAAAAAAAAAAj0QAAAAAAACQRAAAAAAAAAAAAACQRAAAAAAAAJFEAAAAAAAAAAAAAJFEAAAAAAAAkkQAAAAAAAAAAAAAkkQAAAAAAACTRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjkQAAAAAAACORAAAAAAAAAAAAAAAAPC/"
				],
				[
					934,
					1,
					"left_delete",
					null,
					"AQAAAJFEAAAAAAAAkUQAAAAAAAABAAAAMA",
					"AQAAAAAAAAABAAAAkkQAAAAAAACSRAAAAAAAAAAAAAAAAPC/"
				],
				[
					935,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAJFEAAAAAAAAkkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkUQAAAAAAACRRAAAAAAAAAAAAAAAAPC/"
				],
				[
					937,
					1,
					"insert",
					{
						"characters": "-range[0]"
					},
					"CQAAAJNEAAAAAAAAlEQAAAAAAAAAAAAAlEQAAAAAAACVRAAAAAAAAAAAAACVRAAAAAAAAJZEAAAAAAAAAAAAAJZEAAAAAAAAl0QAAAAAAAAAAAAAl0QAAAAAAACYRAAAAAAAAAAAAACYRAAAAAAAAJlEAAAAAAAAAAAAAJlEAAAAAAAAmkQAAAAAAAAAAAAAmkQAAAAAAACbRAAAAAAAAAAAAACbRAAAAAAAAJxEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAk0QAAAAAAACTRAAAAAAAAAAAAAAAAPC/"
				],
				[
					939,
					1,
					"insert",
					{
						"characters": ")*"
					},
					"AgAAAItEAAAAAAAAjEQAAAAAAAAAAAAAjEQAAAAAAACNRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAi0QAAAAAAACLRAAAAAAAAAAAAAAAAPC/"
				],
				[
					942,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAI1EAAAAAAAAjkQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjUQAAAAAAACNRAAAAAAAAAAAAAAAAPC/"
				],
				[
					944,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAJ9EAAAAAAAAoEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAn0QAAAAAAACfRAAAAAAAAAAAAAAAAPC/"
				],
				[
					945,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAKBEAAAAAAAAoUQAAAAAAAAAAAAAoUQAAAAAAACiRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoEQAAAAAAACgRAAAAAAAAAAAAAAAAPC/"
				],
				[
					946,
					1,
					"insert",
					{
						"characters": " range[0])"
					},
					"CgAAAKJEAAAAAAAAo0QAAAAAAAAAAAAAo0QAAAAAAACkRAAAAAAAAAAAAACkRAAAAAAAAKVEAAAAAAAAAAAAAKVEAAAAAAAApkQAAAAAAAAAAAAApkQAAAAAAACnRAAAAAAAAAAAAACnRAAAAAAAAKhEAAAAAAAAAAAAAKhEAAAAAAAAqUQAAAAAAAAAAAAAqUQAAAAAAACqRAAAAAAAAAAAAACqRAAAAAAAAKtEAAAAAAAAAAAAAKtEAAAAAAAArEQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAokQAAAAAAACiRAAAAAAAAAAAAAAAAPC/"
				],
				[
					947,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKxEAAAAAAAArUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArEQAAAAAAACsRAAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"left_delete",
					null,
					"AQAAAK1EAAAAAAAArUQAAAAAAAAaAAAAcmFuZEZsb2F0KC4uLnJhbmdlLCBybmQpKTs",
					"AQAAAAAAAAABAAAArUQAAAAAAADHRAAAAAAAAP///////+9/"
				],
				[
					970,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAA4kMAAAAAAACvRAAAAAAAAAAAAAAAAPC/"
				],
				[
					993,
					1,
					"insert",
					{
						"characters": "m,"
					},
					"AgAAADADAAAAAAAAMQMAAAAAAAAAAAAAMQMAAAAAAAAyAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAMAAAAAAAAwAwAAAAAAAAAAAAAAAPC/"
				],
				[
					994,
					2,
					"left_delete",
					null,
					"AgAAADEDAAAAAAAAMQMAAAAAAAABAAAALDADAAAAAAAAMAMAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAMgMAAAAAAAAyAwAAAAAAAAAAAAAAAPC/"
				],
				[
					995,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADADAAAAAAAAMQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAMAAAAAAAAwAwAAAAAAAAAAAAAAAPC/"
				],
				[
					996,
					1,
					"insert",
					{
						"characters": "\nrandmran"
					},
					"CgAAADEDAAAAAAAAMgMAAAAAAAAAAAAAMgMAAAAAAAA0AwAAAAAAAAAAAAA0AwAAAAAAADUDAAAAAAAAAAAAADUDAAAAAAAANgMAAAAAAAAAAAAANgMAAAAAAAA3AwAAAAAAAAAAAAA3AwAAAAAAADgDAAAAAAAAAAAAADgDAAAAAAAAOQMAAAAAAAAAAAAAOQMAAAAAAAA6AwAAAAAAAAAAAAA6AwAAAAAAADsDAAAAAAAAAAAAADsDAAAAAAAAPAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQMAAAAAAAAxAwAAAAAAAAAAAAAAAPC/"
				],
				[
					997,
					4,
					"left_delete",
					null,
					"BAAAADsDAAAAAAAAOwMAAAAAAAABAAAAbjoDAAAAAAAAOgMAAAAAAAABAAAAYTkDAAAAAAAAOQMAAAAAAAABAAAAcjgDAAAAAAAAOAMAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAAPAMAAAAAAAA8AwAAAAAAAAAAAAAAAPC/"
				],
				[
					998,
					1,
					"insert",
					{
						"characters": ",randi,randf,sa"
					},
					"DwAAADgDAAAAAAAAOQMAAAAAAAAAAAAAOQMAAAAAAAA6AwAAAAAAAAAAAAA6AwAAAAAAADsDAAAAAAAAAAAAADsDAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAD4DAAAAAAAAAAAAAD4DAAAAAAAAPwMAAAAAAAAAAAAAPwMAAAAAAABAAwAAAAAAAAAAAABAAwAAAAAAAEEDAAAAAAAAAAAAAEEDAAAAAAAAQgMAAAAAAAAAAAAAQgMAAAAAAABDAwAAAAAAAAAAAABDAwAAAAAAAEQDAAAAAAAAAAAAAEQDAAAAAAAARQMAAAAAAAAAAAAARQMAAAAAAABGAwAAAAAAAAAAAABGAwAAAAAAAEcDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAMAAAAAAAA4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					999,
					1,
					"left_delete",
					null,
					"AQAAAEYDAAAAAAAARgMAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAARwMAAAAAAABHAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1000,
					1,
					"insert",
					{
						"characters": "rand"
					},
					"BAAAAEYDAAAAAAAARwMAAAAAAAAAAAAARwMAAAAAAABIAwAAAAAAAAAAAABIAwAAAAAAAEkDAAAAAAAAAAAAAEkDAAAAAAAASgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgMAAAAAAABGAwAAAAAAAAAAAAAAAPC/"
				],
				[
					1020,
					1,
					"insert",
					{
						"characters": "miscv"
					},
					"BQAAAJdEAAAAAAAAmEQAAAAAAAAAAAAAmEQAAAAAAACZRAAAAAAAAAAAAACZRAAAAAAAAJpEAAAAAAAAAAAAAJpEAAAAAAAAm0QAAAAAAAAAAAAAm0QAAAAAAACcRAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAl0QAAAAAAACXRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1021,
					1,
					"left_delete",
					null,
					"AQAAAJtEAAAAAAAAm0QAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAnEQAAAAAAACcRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1022,
					1,
					"insert",
					{
						"characters": ".randi("
					},
					"BwAAAJtEAAAAAAAAnEQAAAAAAAAAAAAAnEQAAAAAAACdRAAAAAAAAAAAAACdRAAAAAAAAJ5EAAAAAAAAAAAAAJ5EAAAAAAAAn0QAAAAAAAAAAAAAn0QAAAAAAACgRAAAAAAAAAAAAACgRAAAAAAAAKFEAAAAAAAAAAAAAKFEAAAAAAAAokQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAm0QAAAAAAACbRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1023,
					2,
					"left_delete",
					null,
					"AgAAAKFEAAAAAAAAoUQAAAAAAAABAAAAKKBEAAAAAAAAoEQAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAokQAAAAAAACiRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1024,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAKBEAAAAAAAAoUQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoEQAAAAAAACgRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1025,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKFEAAAAAAAAokQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoUQAAAAAAAChRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1028,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAKJEAAAAAAAAo0QAAAAAAAAAAAAAo0QAAAAAAACjRAAAAAAAABEAAABNYXRoLnJhbmRvbSgpICogKA",
					"AQAAAAAAAAABAAAAokQAAAAAAACzRAAAAAAAAAAAAAAAAPC/"
				],
				[
					1037,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAADfSwAAaW1wb3J0IGluc3BlY3QgZnJvbSAnaW5zcGVjdCc7CmltcG9ydCB7CiAgU3lzY2FsbEVycm9yLAogIGFycmF5VG9CaXRmaWVsZCwKICBhdG9iLAogIGF0b21Ub1N0cmluZywKICBhdG9tVG9WYWx1ZSwKICBiaXRmaWVsZFRvQXJyYXksCiAgYnRvYSwKICBjb21waWxlRmlsZSwKICBjb25jYXRBcnJheUJ1ZmZlciwKICBkdXBBcnJheUJ1ZmZlciwKICBldmFsQmluYXJ5LAogIGdldEJ5dGVDb2RlLAogIGdldENsYXNzQXRvbSwKICBnZXRDbGFzc0NvbnN0cnVjdG9yLAogIGdldENsYXNzQ291bnQsCiAgZ2V0Q2xhc3NJRCwKICBnZXRDbGFzc05hbWUsCiAgZ2V0Q2xhc3NQcm90bywKICBnZXRDb21tYW5kTGluZSwKICBnZXRDdXJyZW50V29ya2luZ0RpcmVjdG9yeSwKICBnZXRFeGVjdXRhYmxlLAogIGdldEZpbGVEZXNjcmlwdG9yLAogIGdldE9wQ29kZXMsCiAgZ2V0UGVyZm9ybWFuY2VDb3VudGVyLAogIGdldFByb2NNYXBzLAogIGdldFByb2NNb3VudHMsCiAgZ2V0UHJvY1N0YXQsCiAgZ2V0UHJvdG90eXBlQ2hhaW4sCiAgZ2V0Um9vdERpcmVjdG9yeSwKICBnZXRlZ2lkLAogIGdldGV1aWQsCiAgZ2V0Z2lkLAogIGdldHBpZCwKICBnZXRwcGlkLAogIGdldHNpZCwKICBnZXR1aWQsCiAgaHJ0aW1lLAogIHJlYWRPYmplY3QsCiAgcmVzaXplQXJyYXlCdWZmZXIsCiAgc2V0ZWdpZCwKICBzZXRldWlkLAogIHNldGdpZCwKICBzZXR1aWQsCiAgdG9BcnJheUJ1ZmZlciwKICB0b1BvaW50ZXIsCiAgdG9TdHJpbmcsCiAgdW5hbWUsCiAgdmFsdWVQdHIsCiAgdmFsdWVUYWcsCiAgdmFsdWVUb0F0b20sCiAgdmFsdWVUeXBlLAogIHdyaXRlT2JqZWN0LAogIHJhbmQscmFuZGkscmFuZGYsc3JhbmQKfSBmcm9tICdtaXNjJzsKaW1wb3J0IHsgZXh0ZW5kQXJyYXksIEFycmF5RXh0ZW5zaW9ucyB9IGZyb20gJy4vZXh0ZW5kQXJyYXkuanMnOwppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7Cgpjb25zdCBzbGljZSA9ICh4LCBzLCBlKSA9PiBTdHJpbmcucHJvdG90eXBlLnNsaWNlLmNhbGwoeCwgcywgZSk7CmNvbnN0IHN0cmluZ2lmeSA9IHYgPT4gYCR7dn1gOwpjb25zdCBwcm90b09mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mOwpjb25zdCBmb3JtYXROdW1iZXIgPSBuID0+IChuID09PSAtMCA/ICctMCcgOiBgJHtufWApOwpjb25zdCBpc05hdGl2ZSA9IGZuID0+IC9cW25hdGl2ZVxzY29kZVxdLy50ZXN0KHN0cmluZ2lmeShmbikpOwoKZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdXRpbCgpIHsKICByZXR1cm4gdXRpbDsKfQoKdXRpbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSB1dGlsOwoKY29uc3QgQXN5bmNGdW5jdGlvbiA9IGFzeW5jIGZ1bmN0aW9uIHgoKSB7fS5jb25zdHJ1Y3RvcjsKY29uc3QgR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiogKCkge30uY29uc3RydWN0b3I7CmNvbnN0IEFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBhc3luYyBmdW5jdGlvbiogKCkge30uY29uc3RydWN0b3I7CmNvbnN0IFR5cGVkQXJyYXkgPSBwcm90b09mKHByb3RvT2YobmV3IFVpbnQxNkFycmF5KDEwKSkpLmNvbnN0cnVjdG9yOwoKY29uc3QgU2V0SXRlcmF0b3JQcm90b3R5cGUgPSBwcm90b09mKG5ldyBTZXQoKS52YWx1ZXMoKSk7CmNvbnN0IE1hcEl0ZXJhdG9yUHJvdG90eXBlID0gcHJvdG9PZihuZXcgTWFwKCkuZW50cmllcygpKTsKY29uc3QgR2VuZXJhdG9yUHJvdG90eXBlID0gcHJvdG9PZigoZnVuY3Rpb24qICgpIHt9KSgpKTsKCmV4cG9ydCBjb25zdCBlcnJvcnMgPSBbCiAgbnVsbCwKICAnRVBFUk0nLAogICdFTk9FTlQnLAogICdFU1JDSCcsCiAgJ0VJTlRSJywKICAnRUlPJywKICAnRU5YSU8nLAogICdFMkJJRycsCiAgJ0VOT0VYRUMnLAogICdFQkFERicsCiAgJ0VDSElMRCcsCiAgJ0VBR0FJTicsCiAgJ0VOT01FTScsCiAgJ0VBQ0NFUycsCiAgJ0VGQVVMVCcsCiAgJ0VOT1RCTEsnLAogICdFQlVTWScsCiAgJ0VFWElTVCcsCiAgJ0VYREVWJywKICAnRU5PREVWJywKICAnRU5PVERJUicsCiAgJ0VJU0RJUicsCiAgJ0VJTlZBTCcsCiAgJ0VORklMRScsCiAgJ0VNRklMRScsCiAgJ0VOT1RUWScsCiAgJ0VUWFRCU1knLAogICdFRkJJRycsCiAgJ0VOT1NQQycsCiAgJ0VTUElQRScsCiAgJ0VST0ZTJywKICAnRU1MSU5LJywKICAnRVBJUEUnLAogICdFRE9NJywKICAnRVJBTkdFJywKICAnRURFQURMSycsCiAgJ0VOQU1FVE9PTE9ORycsCiAgJ0VOT0xDSycsCiAgJ0VOT1NZUycsCiAgJ0VOT1RFTVBUWScsCiAgbnVsbCwKICBudWxsLAogICdFTk9NU0cnLAogICdFSURSTScsCiAgJ0VDSFJORycsCiAgJ0VMMk5TWU5DJywKICAnRUwzSExUJywKICAnRUwzUlNUJywKICAnRUxOUk5HJywKICAnRVVOQVRDSCcsCiAgJ0VOT0NTSScsCiAgJ0VMMkhMVCcsCiAgJ0VCQURFJywKICAnRUJBRFInLAogICdFWEZVTEwnLAogICdFTk9BTk8nLAogICdFQkFEUlFDJywKICBudWxsLAogICcnLAogICdFQkZPTlQnLAogICdFTk9TVFInLAogICdFTk9EQVRBJywKICAnRVRJTUUnLAogICdFTk9TUicsCiAgJ0VOT05FVCcsCiAgJ0VOT1BLRycsCiAgJ0VSRU1PVEUnLAogICdFTk9MSU5LJywKICAnRUFEVicsCiAgJ0VTUk1OVCcsCiAgJ0VDT01NJywKICAnRVBST1RPJywKICAnRU1VTFRJSE9QJywKICAnRURPVERPVCcsCiAgJ0VCQURNU0cnLAogICdFT1ZFUkZMT1cnLAogICdFTk9UVU5JUScsCiAgJ0VCQURGRCcsCiAgJ0VSRU1DSEcnLAogICdFTElCQUNDJywKICAnRUxJQkJBRCcsCiAgJ0VMSUJTQ04nLAogICdFTElCTUFYJywKICAnRUxJQkVYRUMnLAogICdFSUxTRVEnLAogICdFUkVTVEFSVCcsCiAgJ0VTVFJQSVBFJywKICAnRVVTRVJTJywKICAnRU5PVFNPQ0snLAogICdFREVTVEFERFJSRVEnLAogICdFTVNHU0laRScsCiAgJ0VQUk9UT1RZUEUnLAogICdFTk9QUk9UT09QVCcsCiAgJ0VQUk9UT05PU1VQUE9SVCcsCiAgJ0VTT0NLVE5PU1VQUE9SVCcsCiAgJ0VPUE5PVFNVUFAnLAogICdFUEZOT1NVUFBPUlQnLAogICdFQUZOT1NVUFBPUlQnLAogICdFQUREUklOVVNFJywKICAnRUFERFJOT1RBVkFJTCcsCiAgJ0VORVRET1dOJywKICAnRU5FVFVOUkVBQ0gnLAogICdFTkVUUkVTRVQnLAogICdFQ09OTkFCT1JURUQnLAogICdFQ09OTlJFU0VUJywKICAnRU5PQlVGUycsCiAgJ0VJU0NPTk4nLAogICdFTk9UQ09OTicsCiAgJ0VTSFVURE9XTicsCiAgJ0VUT09NQU5ZUkVGUycsCiAgJ0VUSU1FRE9VVCcsCiAgJ0VDT05OUkVGVVNFRCcsCiAgJ0VIT1NURE9XTicsCiAgJ0VIT1NUVU5SRUFDSCcsCiAgJ0VBTFJFQURZJywKICAnRUlOUFJPR1JFU1MnLAogICdFU1RBTEUnLAogICdFVUNMRUFOJywKICAnRU5PVE5BTScsCiAgJ0VOQVZBSUwnLAogICdFSVNOQU0nLAogICdFUkVNT1RFSU8nLAogICdFRFFVT1QnLAogICdFTk9NRURJVU0nLAogICdFTUVESVVNVFlQRScsCiAgJ0VDQU5DRUxFRCcsCiAgJ0VOT0tFWScsCiAgJ0VLRVlFWFBJUkVEJywKICAnRUtFWVJFVk9LRUQnLAogICdFS0VZUkVKRUNURUQnLAogICdFT1dORVJERUFEJywKICAnRU5PVFJFQ09WRVJBQkxFJywKICAnRVJGS0lMTCcKXTsKCmV4cG9ydCBjb25zdCB0eXBlcyA9IHsKICBpc0FueUFycmF5QnVmZmVyKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiAodiBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IHYgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcik7CiAgfSwKICBpc0FycmF5QnVmZmVyKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgQXJyYXlCdWZmZXI7CiAgfSwKICBpc0JpZ0ludDY0QXJyYXkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBCaWdJbnQ2NEFycmF5OwogIH0sCiAgaXNCaWdVaW50NjRBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEJpZ1VpbnQ2NEFycmF5OwogIH0sCiAgaXNEYXRlKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgRGF0ZTsKICB9LAogIGlzRmxvYXQzMkFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5OwogIH0sCiAgaXNGbG9hdDY0QXJyYXkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBGbG9hdDY0QXJyYXk7CiAgfSwKICBpc0ludDhBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEludDhBcnJheTsKICB9LAogIGlzSW50MTZBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEludDE2QXJyYXk7CiAgfSwKICBpc0ludDMyQXJyYXkodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBJbnQzMkFycmF5OwogIH0sCiAgaXNNYXAodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBNYXA7CiAgfSwKICBpc1Byb21pc2UodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBQcm9taXNlOwogIH0sCiAgaXNQcm94eSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFByb3h5OwogIH0sCiAgaXNSZWdFeHAodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBSZWdFeHA7CiAgfSwKICBpc1NldCh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFNldDsKICB9LAogIGlzU2hhcmVkQXJyYXlCdWZmZXIodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBTaGFyZWRBcnJheUJ1ZmZlcjsKICB9LAogIGlzVWludDhBcnJheSh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk7CiAgfSwKICBpc1VpbnQ4Q2xhbXBlZEFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgVWludDhDbGFtcGVkQXJyYXk7CiAgfSwKICBpc1VpbnQxNkFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgVWludDE2QXJyYXk7CiAgfSwKICBpc1VpbnQzMkFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgVWludDMyQXJyYXk7CiAgfSwKICBpc1dlYWtNYXAodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBXZWFrTWFwOwogIH0sCiAgaXNXZWFrU2V0KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgV2Vha1NldDsKICB9LAogIGlzRGF0YVZpZXcodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBEYXRhVmlldzsKICB9LAogIGlzQm9vbGVhbk9iamVjdCh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEJvb2xlYW47CiAgfSwKICBpc0FzeW5jRnVuY3Rpb24odikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBBc3luY0Z1bmN0aW9uOwogIH0sCiAgaXNHZW5lcmF0b3JGdW5jdGlvbih2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEdlbmVyYXRvckZ1bmN0aW9uOwogIH0sCiAgaXNBc3luY0dlbmVyYXRvckZ1bmN0aW9uKHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgQXN5bmNHZW5lcmF0b3JGdW5jdGlvbjsKICB9LAogIGlzTnVtYmVyT2JqZWN0KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgTnVtYmVyOwogIH0sCiAgaXNCaWdJbnRPYmplY3QodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBCaWdJbnQ7CiAgfSwKICBpc1N5bWJvbE9iamVjdCh2KSB7CiAgICByZXR1cm4gdiAmJiB2IGluc3RhbmNlb2YgU3ltYm9sOwogIH0sCiAgaXNOYXRpdmVFcnJvcih2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIEVycm9yICYmIGlzTmF0aXZlKHYuY29uc3RydWN0b3IpOwogIH0sCiAgaXNNYXBJdGVyYXRvcih2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgcHJvdG9PZih2KSA9PSBNYXBJdGVyYXRvclByb3RvdHlwZTsKICB9LAogIGlzU2V0SXRlcmF0b3IodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHByb3RvT2YodikgPT0gU2V0SXRlcmF0b3JQcm90b3R5cGU7CiAgfSwKICBpc1N0cmluZ09iamVjdCh2KSB7CiAgICByZXR1cm4gaXNPYmplY3QodikgJiYgdiBpbnN0YW5jZW9mIFN0cmluZzsKICB9LAogIGlzQXJyYXlCdWZmZXJWaWV3KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiBBcnJheUJ1ZmZlci5pc1ZpZXcodik7CiAgfSwKICBpc0FyZ3VtZW50c09iamVjdCh2KSB7CiAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHYpID09ICdbb2JqZWN0IEFyZ3VtZW50c10nOwogIH0sCgogIC8qIGlzRXh0ZXJuYWwodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHYgaW5zdGFuY2VvZiBFeHRlcm5hbDsKICB9LCovCgogIGlzQm94ZWRQcmltaXRpdmUodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIFtOdW1iZXIsIFN0cmluZywgQm9vbGVhbiwgQmlnSW50LCBTeW1ib2xdLnNvbWUoY3RvciA9PiB2IGluc3RhbmNlb2YgY3Rvcik7CiAgfSwKCiAgaXNHZW5lcmF0b3JPYmplY3QodikgewogICAgcmV0dXJuIGlzT2JqZWN0KHYpICYmIHByb3RvT2YodikgPT0gR2VuZXJhdG9yUHJvdG90eXBlOwogIH0sCiAgaXNUeXBlZEFycmF5KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2IGluc3RhbmNlb2YgVHlwZWRBcnJheTsKICB9LAogIGlzTW9kdWxlTmFtZXNwYWNlT2JqZWN0KHYpIHsKICAgIHJldHVybiBpc09iamVjdCh2KSAmJiB2W1N5bWJvbC50b1N0cmluZ1RhZ10gPT0gJ01vZHVsZSc7CiAgfQp9OwoKZXhwb3J0IGZ1bmN0aW9uIGlzT2JqZWN0KHYpIHsKICByZXR1cm4gdiAhPSBudWxsICYmIHsgZnVuY3Rpb246IHRydWUsIG9iamVjdDogdHJ1ZSB9W3R5cGVvZiB2XTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGhhc0J1aWx0SW4obywgbSkgewogIHJldHVybiBpc05hdGl2ZShwcm90b09mKG8pW21dKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdCguLi5hcmdzKSB7CiAgcmV0dXJuIGZvcm1hdFdpdGhPcHRpb25zSW50ZXJuYWwodW5kZWZpbmVkLCBhcmdzKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpIHsKICBpZighaXNPYmplY3Qob3B0cykpIHRocm93IG5ldyBUeXBlRXJyb3IoYG9wdGlvbnMgYXJndW1lbnQgaXMgbm90IGFuIG9iamVjdGApOwogIHJldHVybiBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG9wdHMsIGFyZ3MpOwp9CgpmdW5jdGlvbiBmb3JtYXRXaXRoT3B0aW9uc0ludGVybmFsKG8sIHYpIHsKICBjb25zdCB4ID0gdlswXTsKICBsZXQgYSA9IDA7CiAgbGV0IHMgPSAnJzsKICBsZXQgaiA9ICcnOwogIGlmKHR5cGVvZiB4ID09PSAnc3RyaW5nJykgewogICAgaWYodi5sZW5ndGggPT09IDEpIHJldHVybiB4OwogICAgbGV0IHQ7CiAgICBsZXQgcCA9IDA7CiAgICBmb3IobGV0IGkgPSAwOyBpIDwgeC5sZW5ndGggLSAxOyBpKyspIHsKICAgICAgaWYoeFtpXSA9PSAnJScpIHsKICAgICAgICBsZXQgZiA9ICcnOwogICAgICAgIHdoaWxlKCdzanhkT29pZmMlJy5pbmRleE9mKHhbaSArIDFdKSA9PSAtMSkgewogICAgICAgICAgZiArPSB4W2kgKyAxXTsKICAgICAgICAgICsraTsKICAgICAgICB9CiAgICAgICAgcCA9IGkgKyAxOwoKICAgICAgICBjb25zdCBjID0gU3RyaW5nLnByb3RvdHlwZS5jaGFyQ29kZUF0LmNhbGwoeCwgKytpKTsKICAgICAgICBpZihhICsgMSAhPT0gdi5sZW5ndGgpIHsKICAgICAgICAgIHN3aXRjaCAoYykgewogICAgICAgICAgICBjYXNlIDExNTogLy8gJXMKICAgICAgICAgICAgICBjb25zdCB5ID0gdlsrK2FdOwogICAgICAgICAgICAgIGlmKHR5cGVvZiB5ID09PSAnbnVtYmVyJykgdCA9IGZvcm1hdE51bWJlcih5KTsKICAgICAgICAgICAgICBlbHNlIGlmKHR5cGVvZiB5ID09PSAnYmlnaW50JykgdCA9IGAke3l9bmA7CiAgICAgICAgICAgICAgZWxzZSBpZih0eXBlb2YgeSAhPT0gJ29iamVjdCcgfHwgeSA9PT0gbnVsbCB8fCAhaGFzQnVpbHRJbih5LCAndG9TdHJpbmcnKSkgdCA9IFN0cmluZyh5KTsKICAgICAgICAgICAgICBlbHNlIHQgPSBpbnNwZWN0KHksIHsgLi4ubywgY29tcGFjdDogMywgY29sb3JzOiBmYWxzZSwgZGVwdGg6IDAgfSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTA2OiAvLyAlagogICAgICAgICAgICAgIHQgPSBzdHJpbmdpZnkodlsrK2FdKTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxMjA6IC8vICV4CiAgICAgICAgICAgIGNhc2UgMTAwOiAvLyAlZAogICAgICAgICAgICAgIGNvbnN0IG4gPSB2WysrYV07CiAgICAgICAgICAgICAgaWYodHlwZW9mIG4gPT09ICdiaWdpbnQnKSB0ID0gYCRudW1uYDsKICAgICAgICAgICAgICBlbHNlIGlmKHR5cGVvZiBuID09PSAnc3ltYm9sJykgdCA9ICdOYU4nOwogICAgICAgICAgICAgIGVsc2UgdCA9IGZvcm1hdE51bWJlcihjID09IDEyMCA/IE51bWJlcihuKS50b1N0cmluZygxNikgOiBOdW1iZXIobikpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDc5OiAvLyAlTwogICAgICAgICAgICAgIHQgPSBpbnNwZWN0KHZbKythXSwgbyk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTExOiAvLyAlbwogICAgICAgICAgICAgIHQgPSBpbnNwZWN0KHZbKythXSwgewogICAgICAgICAgICAgICAgLi4ubywKICAgICAgICAgICAgICAgIHNob3dIaWRkZW46IHRydWUsCiAgICAgICAgICAgICAgICBzaG93UHJveHk6IHRydWUsCiAgICAgICAgICAgICAgICBkZXB0aDogNAogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDEwNTogLy8gJWkKICAgICAgICAgICAgICBjb25zdCBrID0gdlsrK2FdOwogICAgICAgICAgICAgIGlmKHR5cGVvZiBrID09PSAnYmlnaW50JykgdCA9IGAke2t9YDsKICAgICAgICAgICAgICBlbHNlIGlmKHR5cGVvZiBrID09PSAnc3ltYm9sJykgdCA9ICdOYU4nOwogICAgICAgICAgICAgIGVsc2UgdCA9IGZvcm1hdE51bWJlcihwYXJzZUludChrKSk7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMTAyOiAvLyAlZgogICAgICAgICAgICAgIGNvbnN0IGQgPSB2WysrYV07CiAgICAgICAgICAgICAgaWYodHlwZW9mIGQgPT09ICdzeW1ib2wnKSB0ID0gJ05hTic7CiAgICAgICAgICAgICAgZWxzZSB0ID0gZm9ybWF0TnVtYmVyKHBhcnNlRmxvYXQoZCkpOwogICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlIDk5OiAvLyAlYwogICAgICAgICAgICAgIGEgKz0gMTsKICAgICAgICAgICAgICB0ID0gJyc7CiAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIGNhc2UgMzc6IC8vICUlCiAgICAgICAgICAgICAgcyArPSBzbGljZSh4LCBwLCBpKTsKICAgICAgICAgICAgICBwID0gaSArIDE7CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBpZihwICE9PSBpIC0gMSkgcyArPSBzbGljZSh4LCBwLCBpIC0gMSk7CiAgICAgICAgICBsZXQgcGFkID0gcGFyc2VJbnQoZik7CiAgICAgICAgICBjb25zb2xlLmxvZygncGFkJywgeyBwYWQsIGYgfSk7CgogICAgICAgICAgaWYoTWF0aC5hYnMocGFkKSA+IDApIHQgPSB0WydwYWQnICsgKHBhZCA8IDAgPyAnRW5kJyA6ICdTdGFydCcpXShNYXRoLmFicyhwYWQpLCAvXi0/MC8udGVzdChmKSA/ICcwJyA6ICcgJyk7CgogICAgICAgICAgcyArPSB0OwogICAgICAgICAgcCA9IGkgKyAxOwogICAgICAgIH0gZWxzZSBpZihjID09PSAzNykgewogICAgICAgICAgcyArPSBzbGljZSh4LCBwLCBpKTsKICAgICAgICAgIHAgPSBpICsgMTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGlmKHAgIT09IDApIHsKICAgICAgYSsrOwogICAgICBqID0gJyAnOwogICAgICBpZihwIDwgeC5sZW5ndGgpIHMgKz0gc2xpY2UoeCwgcCk7CiAgICB9CiAgfQogIHdoaWxlKGEgPCB2Lmxlbmd0aCkgewogICAgY29uc3QgeSA9IHZbYV07CiAgICBzICs9IGo7CiAgICBzICs9IHR5cGVvZiB5ICE9PSAnc3RyaW5nJyA/IGluc3BlY3QoeSwgbykgOiB5OwogICAgaiA9ICcgJzsKICAgIGErKzsKICB9CiAgcmV0dXJuIHM7Cn0KCmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSkgewogIGlmKGFyZ3VtZW50cy5sZW5ndGggPT0gMSkgZXhwZWN0ZWQgPSB0cnVlOwoKICBpZihhY3R1YWwgPT09IGV4cGVjdGVkKSByZXR1cm47CgogIGlmKGFjdHVhbCAhPT0gbnVsbCAmJiBleHBlY3RlZCAhPT0gbnVsbCAmJiB0eXBlb2YgYWN0dWFsID09ICdvYmplY3QnICYmIHR5cGVvZiBleHBlY3RlZCA9PSAnb2JqZWN0JyAmJiBhY3R1YWwudG9TdHJpbmcoKSA9PT0gZXhwZWN0ZWQudG9TdHJpbmcoKSkgcmV0dXJuOwoKICB0aHJvdyBFcnJvcignYXNzZXJ0aW9uIGZhaWxlZDogZ290IHwnICsgYWN0dWFsICsgJ3wnICsgJywgZXhwZWN0ZWQgfCcgKyBleHBlY3RlZCArICd8JyArIChtZXNzYWdlID8gJyAoJyArIG1lc3NhZ2UgKyAnKScgOiAnJykpOwp9CgpleHBvcnQgZnVuY3Rpb24gc2V0SW50ZXJ2YWwoY2FsbGJhY2ssIG1zKSB7CiAgbGV0IG1hcCA9IChzZXRJbnRlcnZhbC5tYXAgPz89IG5ldyBNYXAoKSk7CiAgbGV0IGlkID0gKHNldEludGVydmFsLmlkID0gKHNldEludGVydmFsLmlkID8/IDApICsgMSk7CiAgbGV0IG9iaiA9IHsgY2FsbGJhY2ssIG1zIH07CiAgbWFwLnNldChpZCwgb2JqKTsKCiAgZnVuY3Rpb24gc3RhcnQoKSB7CiAgICBvYmouaWQgPSBvcy5zZXRUaW1lb3V0KCgpID0+IHsKICAgICAgc3RhcnQoKTsKICAgICAgY2FsbGJhY2soKTsKICAgIH0sIG9iai5tcyk7CiAgfQoKICBzdGFydCgpOwogIHJldHVybiBpZDsKfQoKZXhwb3J0IGZ1bmN0aW9uIGNsZWFySW50ZXJ2YWwoaWQpIHsKICBsZXQgbWFwID0gKHNldEludGVydmFsLm1hcCA/Pz0gbmV3IE1hcCgpKTsKCiAgbGV0IG9iaiA9IG1hcC5nZXQoaWQpOwoKICBpZihvYmopIG9zLmNsZWFyVGltZW91dChvYmouaWQpOwp9CgpleHBvcnQgZnVuY3Rpb24gbWVtb2l6ZShmbikgewogIGxldCBjYWNoZSA9IHt9OwogIHJldHVybiAobiwgLi4ucmVzdCkgPT4gewogICAgaWYobiBpbiBjYWNoZSkgcmV0dXJuIGNhY2hlW25dOwogICAgcmV0dXJuIChjYWNoZVtuXSA9IGZuKG4sIC4uLnJlc3QpKTsKICB9Owp9CgpleHBvcnQgZnVuY3Rpb24gd2FpdEZvcihtcykgewogIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IG9zLnNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTsKfQoKZXhwb3J0IGZ1bmN0aW9uIGRlZmluZShvYmosIC4uLmFyZ3MpIHsKICBmb3IobGV0IHByb3BzIG9mIGFyZ3MpIHsKICAgIGxldCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcHMpOwogICAgZm9yKGxldCBwcm9wIGluIGRlc2MpIHsKICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZGVzY1twcm9wXTsKICAgICAgaWYodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIGRlc2NbcHJvcF0ud3JpdGFibGUgPSBmYWxzZTsKICAgIH0KICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgZGVzYyk7CiAgfQogIHJldHVybiBvYmo7Cn0KCmV4cG9ydCBmdW5jdGlvbiBnZXRDb25zdHJ1Y3RvckNoYWluKG9iaikgewogIGxldCByZXQgPSBbXTsKICBsZXQgY2hhaW4gPSBnZXRQcm90b3R5cGVDaGFpbihvYmopOwogIGlmKG9iai5jb25zdHJ1Y3RvciAmJiBvYmouY29uc3RydWN0b3IgIT0gY2hhaW5bMF0uY29uc3RydWN0b3IpIGNoYWluLnVuc2hpZnQob2JqKTsKCiAgZm9yKGxldCBwcm90byBvZiBjaGFpbikgcmV0LnB1c2gocHJvdG8uY29uc3RydWN0b3IpOwogIHJldHVybiByZXQ7Cn0KCmNvbnN0IEFOU0lfQkFDS0dST1VORF9PRkZTRVQgPSAxMDsKCmNvbnN0IHdyYXBBbnNpMTYgPQogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAgIGBcdTAwMUJbJHtjb2RlICsgb2Zmc2V0fW1gOwoKY29uc3Qgd3JhcEFuc2kyNTYgPQogIChvZmZzZXQgPSAwKSA9PgogIGNvZGUgPT4KICAgIGBcdTAwMUJbJHszOCArIG9mZnNldH07NTske2NvZGV9bWA7Cgpjb25zdCB3cmFwQW5zaTE2bSA9CiAgKG9mZnNldCA9IDApID0+CiAgKHJlZCwgZ3JlZW4sIGJsdWUpID0+CiAgICBgXHUwMDFCWyR7MzggKyBvZmZzZXR9OzI7JHtyZWR9OyR7Z3JlZW59OyR7Ymx1ZX1tYDsKCmZ1bmN0aW9uIGdldEFuc2lTdHlsZXMoKSB7CiAgY29uc3QgY29kZXMgPSBuZXcgTWFwKCk7CiAgY29uc3Qgc3R5bGVzID0gewogICAgbW9kaWZpZXI6IHsKICAgICAgcmVzZXQ6IFswLCAwXSwKICAgICAgLy8gMjEgaXNuJ3Qgd2lkZWx5IHN1cHBvcnRlZCBhbmQgMjIgZG9lcyB0aGUgc2FtZSB0aGluZwogICAgICBib2xkOiBbMSwgMjJdLAogICAgICBkaW06IFsyLCAyMl0sCiAgICAgIGl0YWxpYzogWzMsIDIzXSwKICAgICAgdW5kZXJsaW5lOiBbNCwgMjRdLAogICAgICBvdmVybGluZTogWzUzLCA1NV0sCiAgICAgIGludmVyc2U6IFs3LCAyN10sCiAgICAgIGhpZGRlbjogWzgsIDI4XSwKICAgICAgc3RyaWtldGhyb3VnaDogWzksIDI5XQogICAgfSwKICAgIGNvbG9yOiB7CiAgICAgIGJsYWNrOiBbMzAsIDM5XSwKICAgICAgcmVkOiBbMzEsIDM5XSwKICAgICAgZ3JlZW46IFszMiwgMzldLAogICAgICB5ZWxsb3c6IFszMywgMzldLAogICAgICBibHVlOiBbMzQsIDM5XSwKICAgICAgbWFnZW50YTogWzM1LCAzOV0sCiAgICAgIGN5YW46IFszNiwgMzldLAogICAgICB3aGl0ZTogWzM3LCAzOV0sCgogICAgICAvLyBCcmlnaHQgY29sb3IKICAgICAgYmxhY2tCcmlnaHQ6IFs5MCwgMzldLAogICAgICByZWRCcmlnaHQ6IFs5MSwgMzldLAogICAgICBncmVlbkJyaWdodDogWzkyLCAzOV0sCiAgICAgIHllbGxvd0JyaWdodDogWzkzLCAzOV0sCiAgICAgIGJsdWVCcmlnaHQ6IFs5NCwgMzldLAogICAgICBtYWdlbnRhQnJpZ2h0OiBbOTUsIDM5XSwKICAgICAgY3lhbkJyaWdodDogWzk2LCAzOV0sCiAgICAgIHdoaXRlQnJpZ2h0OiBbOTcsIDM5XQogICAgfSwKICAgIGJnQ29sb3I6IHsKICAgICAgYmdCbGFjazogWzQwLCA0OV0sCiAgICAgIGJnUmVkOiBbNDEsIDQ5XSwKICAgICAgYmdHcmVlbjogWzQyLCA0OV0sCiAgICAgIGJnWWVsbG93OiBbNDMsIDQ5XSwKICAgICAgYmdCbHVlOiBbNDQsIDQ5XSwKICAgICAgYmdNYWdlbnRhOiBbNDUsIDQ5XSwKICAgICAgYmdDeWFuOiBbNDYsIDQ5XSwKICAgICAgYmdXaGl0ZTogWzQ3LCA0OV0sCgogICAgICAvLyBCcmlnaHQgY29sb3IKICAgICAgYmdCbGFja0JyaWdodDogWzEwMCwgNDldLAogICAgICBiZ1JlZEJyaWdodDogWzEwMSwgNDldLAogICAgICBiZ0dyZWVuQnJpZ2h0OiBbMTAyLCA0OV0sCiAgICAgIGJnWWVsbG93QnJpZ2h0OiBbMTAzLCA0OV0sCiAgICAgIGJnQmx1ZUJyaWdodDogWzEwNCwgNDldLAogICAgICBiZ01hZ2VudGFCcmlnaHQ6IFsxMDUsIDQ5XSwKICAgICAgYmdDeWFuQnJpZ2h0OiBbMTA2LCA0OV0sCiAgICAgIGJnV2hpdGVCcmlnaHQ6IFsxMDcsIDQ5XQogICAgfQogIH07CgogIC8vIEFsaWFzIGJyaWdodCBibGFjayBhcyBncmF5IChhbmQgZ3JleSkKICBzdHlsZXMuY29sb3IuZ3JheSA9IHN0eWxlcy5jb2xvci5ibGFja0JyaWdodDsKICBzdHlsZXMuYmdDb2xvci5iZ0dyYXkgPSBzdHlsZXMuYmdDb2xvci5iZ0JsYWNrQnJpZ2h0OwogIHN0eWxlcy5jb2xvci5ncmV5ID0gc3R5bGVzLmNvbG9yLmJsYWNrQnJpZ2h0OwogIHN0eWxlcy5iZ0NvbG9yLmJnR3JleSA9IHN0eWxlcy5iZ0NvbG9yLmJnQmxhY2tCcmlnaHQ7CgogIGZvcihjb25zdCBbZ3JvdXBOYW1lLCBncm91cF0gb2YgT2JqZWN0LmVudHJpZXMoc3R5bGVzKSkgewogICAgZm9yKGNvbnN0IFtzdHlsZU5hbWUsIHN0eWxlXSBvZiBPYmplY3QuZW50cmllcyhncm91cCkpIHsKICAgICAgc3R5bGVzW3N0eWxlTmFtZV0gPSB7CiAgICAgICAgb3BlbjogYFx1MDAxQlske3N0eWxlWzBdfW1gLAogICAgICAgIGNsb3NlOiBgXHUwMDFCWyR7c3R5bGVbMV19bWAKICAgICAgfTsKCiAgICAgIGdyb3VwW3N0eWxlTmFtZV0gPSBzdHlsZXNbc3R5bGVOYW1lXTsKCiAgICAgIGNvZGVzLnNldChzdHlsZVswXSwgc3R5bGVbMV0pOwogICAgfQoKICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHlsZXMsIGdyb3VwTmFtZSwgewogICAgICB2YWx1ZTogZ3JvdXAsCiAgICAgIGVudW1lcmFibGU6IGZhbHNlCiAgICB9KTsKICB9CgogIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzdHlsZXMsICdjb2RlcycsIHsKICAgIHZhbHVlOiBjb2RlcywKICAgIGVudW1lcmFibGU6IGZhbHNlCiAgfSk7CgogIHN0eWxlcy5jb2xvci5jbG9zZSA9ICdcdTAwMUJbMzltJzsKICBzdHlsZXMuYmdDb2xvci5jbG9zZSA9ICdcdTAwMUJbNDltJzsKCiAgc3R5bGVzLmNvbG9yLmFuc2kgPSB3cmFwQW5zaTE2KCk7CiAgc3R5bGVzLmNvbG9yLmFuc2kyNTYgPSB3cmFwQW5zaTI1NigpOwogIHN0eWxlcy5jb2xvci5hbnNpMTZtID0gd3JhcEFuc2kxNm0oKTsKICBzdHlsZXMuYmdDb2xvci5hbnNpID0gd3JhcEFuc2kxNihBTlNJX0JBQ0tHUk9VTkRfT0ZGU0VUKTsKICBzdHlsZXMuYmdDb2xvci5hbnNpMjU2ID0gd3JhcEFuc2kyNTYoQU5TSV9CQUNLR1JPVU5EX09GRlNFVCk7CiAgc3R5bGVzLmJnQ29sb3IuYW5zaTE2bSA9IHdyYXBBbnNpMTZtKEFOU0lfQkFDS0dST1VORF9PRkZTRVQpOwoKICAvLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9RaXgtL2NvbG9yLWNvbnZlcnQvYmxvYi8zZjBlMGQ0ZTkyZTIzNTc5NmNjYjE3ZjZlODVjNzIwOTRhNjUxZjQ5L2NvbnZlcnNpb25zLmpzCiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoc3R5bGVzLCB7CiAgICByZ2JUb0Fuc2kyNTY6IHsKICAgICAgdmFsdWU6IChyZWQsIGdyZWVuLCBibHVlKSA9PiB7CiAgICAgICAgLy8gV2UgdXNlIHRoZSBleHRlbmRlZCBncmV5c2NhbGUgcGFsZXR0ZSBoZXJlLCB3aXRoIHRoZSBleGNlcHRpb24gb2YKICAgICAgICAvLyBibGFjayBhbmQgd2hpdGUuIG5vcm1hbCBwYWxldHRlIG9ubHkgaGFzIDQgZ3JleXNjYWxlIHNoYWRlcy4KICAgICAgICBpZihyZWQgPT09IGdyZWVuICYmIGdyZWVuID09PSBibHVlKSB7CiAgICAgICAgICBpZihyZWQgPCA4KSB7CiAgICAgICAgICAgIHJldHVybiAxNjsKICAgICAgICAgIH0KCiAgICAgICAgICBpZihyZWQgPiAyNDgpIHsKICAgICAgICAgICAgcmV0dXJuIDIzMTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoKHJlZCAtIDgpIC8gMjQ3KSAqIDI0KSArIDIzMjsKICAgICAgICB9CgogICAgICAgIHJldHVybiAxNiArIDM2ICogTWF0aC5yb3VuZCgocmVkIC8gMjU1KSAqIDUpICsgNiAqIE1hdGgucm91bmQoKGdyZWVuIC8gMjU1KSAqIDUpICsgTWF0aC5yb3VuZCgoYmx1ZSAvIDI1NSkgKiA1KTsKICAgICAgfSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UKICAgIH0sCiAgICBoZXhUb1JnYjogewogICAgICB2YWx1ZTogaGV4ID0+IHsKICAgICAgICBjb25zdCBtYXRjaGVzID0gLyg/PGNvbG9yU3RyaW5nPlthLWZcZF17Nn18W2EtZlxkXXszfSkvaS5leGVjKGhleC50b1N0cmluZygxNikpOwogICAgICAgIGlmKCFtYXRjaGVzKSB7CiAgICAgICAgICByZXR1cm4gWzAsIDAsIDBdOwogICAgICAgIH0KCiAgICAgICAgbGV0IHsgY29sb3JTdHJpbmcgfSA9IG1hdGNoZXMuZ3JvdXBzOwoKICAgICAgICBpZihjb2xvclN0cmluZy5sZW5ndGggPT09IDMpIHsKICAgICAgICAgIGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcKICAgICAgICAgICAgLnNwbGl0KCcnKQogICAgICAgICAgICAubWFwKGNoYXJhY3RlciA9PiBjaGFyYWN0ZXIgKyBjaGFyYWN0ZXIpCiAgICAgICAgICAgIC5qb2luKCcnKTsKICAgICAgICB9CgogICAgICAgIGNvbnN0IGludGVnZXIgPSBOdW1iZXIucGFyc2VJbnQoY29sb3JTdHJpbmcsIDE2KTsKCiAgICAgICAgcmV0dXJuIFsoaW50ZWdlciA+PiAxNikgJiAweGZmLCAoaW50ZWdlciA+PiA4KSAmIDB4ZmYsIGludGVnZXIgJiAweGZmXTsKICAgICAgfSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UKICAgIH0sCiAgICBoZXhUb0Fuc2kyNTY6IHsKICAgICAgdmFsdWU6IGhleCA9PiBzdHlsZXMucmdiVG9BbnNpMjU2KC4uLnN0eWxlcy5oZXhUb1JnYihoZXgpKSwKICAgICAgZW51bWVyYWJsZTogZmFsc2UKICAgIH0sCiAgICBhbnNpMjU2VG9BbnNpOiB7CiAgICAgIHZhbHVlOiBjb2RlID0+IHsKICAgICAgICBpZihjb2RlIDwgOCkgewogICAgICAgICAgcmV0dXJuIDMwICsgY29kZTsKICAgICAgICB9CgogICAgICAgIGlmKGNvZGUgPCAxNikgewogICAgICAgICAgcmV0dXJuIDkwICsgKGNvZGUgLSA4KTsKICAgICAgICB9CgogICAgICAgIGxldCByZWQ7CiAgICAgICAgbGV0IGdyZWVuOwogICAgICAgIGxldCBibHVlOwoKICAgICAgICBpZihjb2RlID49IDIzMikgewogICAgICAgICAgcmVkID0gKChjb2RlIC0gMjMyKSAqIDEwICsgOCkgLyAyNTU7CiAgICAgICAgICBncmVlbiA9IHJlZDsKICAgICAgICAgIGJsdWUgPSByZWQ7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGNvZGUgLT0gMTY7CgogICAgICAgICAgY29uc3QgcmVtYWluZGVyID0gY29kZSAlIDM2OwoKICAgICAgICAgIHJlZCA9IE1hdGguZmxvb3IoY29kZSAvIDM2KSAvIDU7CiAgICAgICAgICBncmVlbiA9IE1hdGguZmxvb3IocmVtYWluZGVyIC8gNikgLyA1OwogICAgICAgICAgYmx1ZSA9IChyZW1haW5kZXIgJSA2KSAvIDU7CiAgICAgICAgfQoKICAgICAgICBjb25zdCB2YWx1ZSA9IE1hdGgubWF4KHJlZCwgZ3JlZW4sIGJsdWUpICogMjsKCiAgICAgICAgaWYodmFsdWUgPT09IDApIHsKICAgICAgICAgIHJldHVybiAzMDsKICAgICAgICB9CgogICAgICAgIGxldCByZXN1bHQgPSAzMCArICgoTWF0aC5yb3VuZChibHVlKSA8PCAyKSB8IChNYXRoLnJvdW5kKGdyZWVuKSA8PCAxKSB8IE1hdGgucm91bmQocmVkKSk7CgogICAgICAgIGlmKHZhbHVlID09PSAyKSB7CiAgICAgICAgICByZXN1bHQgKz0gNjA7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICB9LAogICAgICBlbnVtZXJhYmxlOiBmYWxzZQogICAgfSwKICAgIHJnYlRvQW5zaTogewogICAgICB2YWx1ZTogKHJlZCwgZ3JlZW4sIGJsdWUpID0+IHN0eWxlcy5hbnNpMjU2VG9BbnNpKHN0eWxlcy5yZ2JUb0Fuc2kyNTYocmVkLCBncmVlbiwgYmx1ZSkpLAogICAgICBlbnVtZXJhYmxlOiBmYWxzZQogICAgfSwKICAgIGhleFRvQW5zaTogewogICAgICB2YWx1ZTogaGV4ID0+IHN0eWxlcy5hbnNpMjU2VG9BbnNpKHN0eWxlcy5oZXhUb0Fuc2kyNTYoaGV4KSksCiAgICAgIGVudW1lcmFibGU6IGZhbHNlCiAgICB9CiAgfSk7CgogIHJldHVybiBzdHlsZXM7Cn0KCmV4cG9ydCBmdW5jdGlvbiByYW5kSW50KC4uLmFyZ3MpIHsKICBsZXQgcmFuZ2UgPSBhcmdzLnNwbGljZSgwLCAyKTsKICBsZXQgcm5kID0gYXJncy5zaGlmdCgpOwogIGlmKHJhbmdlLmxlbmd0aCA8IDIpIHJhbmdlLnVuc2hpZnQoMCk7CiAgcmV0dXJuIE1hdGgucm91bmQobWlzYy5yYW5kKCAgcmFuZ2VbMV0gLSByYW5nZVswXSkgKyByYW5nZVswXSk7Cn0KCmV4cG9ydCBjb25zdCBhbnNpU3R5bGVzID0gZ2V0QW5zaVN0eWxlcygpOwoKY29uc3QgaW5zcGVjdE1ldGhvZCA9IFN5bWJvbC5mb3IoJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJyk7Cgp1dGlsLmluc3BlY3QgPSBpbnNwZWN0Owp1dGlsLmZvcm1hdCA9IGZvcm1hdDsKdXRpbC5mb3JtYXRXaXRoT3B0aW9ucyA9IGZvcm1hdFdpdGhPcHRpb25zOwp1dGlsLnR5cGVzID0gdHlwZXM7CnV0aWwuYXNzZXJ0ID0gYXNzZXJ0Owp1dGlsLmhhc0J1aWx0SW4gPSBoYXNCdWlsdEluOwp1dGlsLnRvU3RyaW5nID0gdG9TdHJpbmc7CnV0aWwudG9BcnJheUJ1ZmZlciA9IHRvQXJyYXlCdWZmZXI7CnV0aWwuc2V0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbDsKdXRpbC5jbGVhckludGVydmFsID0gY2xlYXJJbnRlcnZhbDsKdXRpbC5tZW1vaXplID0gbWVtb2l6ZTsKdXRpbC5kZWZpbmUgPSBkZWZpbmU7CnV0aWwuQXJyYXlFeHRlbnNpb25zID0gQXJyYXlFeHRlbnNpb25zOwp1dGlsLmV4dGVuZEFycmF5ID0gKHByb3RvID0gQXJyYXkucHJvdG90eXBlLCBkZWYgPSB1dGlsLmRlZmluZSkgPT4gZGVmKHByb3RvLCBBcnJheUV4dGVuc2lvbnMpOwp1dGlsLmVycm9ycyA9IGVycm9yczsKdXRpbC5nZXRQcm90b3R5cGVDaGFpbiA9IGdldFByb3RvdHlwZUNoYWluOwp1dGlsLmdldENvbnN0cnVjdG9yQ2hhaW4gPSBnZXRDb25zdHJ1Y3RvckNoYWluOwp1dGlsLmFuc2lTdHlsZXMgPSBhbnNpU3R5bGVzOwp1dGlsLnJhbmRJbnQgPSByYW5kSW50OwoKT2JqZWN0LmFzc2lnbih1dGlsLCB7CiAgW2luc3BlY3RNZXRob2RdKCkgewogICAgbGV0IG9iaiA9IHsgLi4udXRpbCB9OwogICAgZGVsZXRlIG9ialtpbnNwZWN0TWV0aG9kXTsKICAgIHJldHVybiBpbnNwZWN0KG9iaiwgeyBjdXN0b21JbnNwZWN0OiBmYWxzZSB9KTsKICB9Cn0pOwoKZXhwb3J0IHsgZXh0ZW5kQXJyYXksIEFycmF5RXh0ZW5zaW9ucyB9IGZyb20gJy4vZXh0ZW5kQXJyYXkuanMnOwpleHBvcnQgewogIFN5c2NhbGxFcnJvciwKICBhcnJheVRvQml0ZmllbGQsCiAgYXRvYiwKICBhdG9tVG9TdHJpbmcsCiAgYXRvbVRvVmFsdWUsCiAgYml0ZmllbGRUb0FycmF5LAogIGJ0b2EsCiAgY29tcGlsZUZpbGUsCiAgY29uY2F0QXJyYXlCdWZmZXIsCiAgZHVwQXJyYXlCdWZmZXIsCiAgZXZhbEJpbmFyeSwKICBnZXRCeXRlQ29kZSwKICBnZXRDbGFzc0F0b20sCiAgZ2V0Q2xhc3NDb25zdHJ1Y3RvciwKICBnZXRDbGFzc0NvdW50LAogIGdldENsYXNzSUQsCiAgZ2V0Q2xhc3NOYW1lLAogIGdldENsYXNzUHJvdG8sCiAgZ2V0Q29tbWFuZExpbmUsCiAgZ2V0Q3VycmVudFdvcmtpbmdEaXJlY3RvcnksCiAgZ2V0RXhlY3V0YWJsZSwKICBnZXRGaWxlRGVzY3JpcHRvciwKICBnZXRPcENvZGVzLAogIGdldFBlcmZvcm1hbmNlQ291bnRlciwKICBnZXRQcm9jTWFwcywKICBnZXRQcm9jTW91bnRzLAogIGdldFByb2NTdGF0LAogIGdldFByb3RvdHlwZUNoYWluLAogIGdldFJvb3REaXJlY3RvcnksCiAgZ2V0ZWdpZCwKICBnZXRldWlkLAogIGdldGdpZCwKICBnZXRwaWQsCiAgZ2V0cHBpZCwKICBnZXRzaWQsCiAgZ2V0dWlkLAogIGhydGltZSwKICByZWFkT2JqZWN0LAogIHJlc2l6ZUFycmF5QnVmZmVyLAogIHNldGVnaWQsCiAgc2V0ZXVpZCwKICBzZXRnaWQsCiAgc2V0dWlkLAogIHRvQXJyYXlCdWZmZXIsCiAgdG9Qb2ludGVyLAogIHRvU3RyaW5nLAogIHVuYW1lLAogIHZhbHVlUHRyLAogIHZhbHVlVGFnLAogIHZhbHVlVG9BdG9tLAogIHZhbHVlVHlwZSwKICB3cml0ZU9iamVjdAp9IGZyb20gJ21pc2MnOwpleHBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnaW5zcGVjdCc7CgAAAAAAAAAA5ksAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxEQAAAAAAADERAAAAAAAAAAAAAAAAPC/"
				],
				[
					1055,
					1,
					"insert",
					{
						"characters": "+1"
					},
					"AgAAAL1EAAAAAAAAvkQAAAAAAAAAAAAAvkQAAAAAAAC/RAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvUQAAAAAAAC9RAAAAAAAAAAAAAAAAPC/"
				],
				[
					1056,
					1,
					"revert",
					null,
					"",
					"AQAAAAAAAAABAAAAv0QAAAAAAAC/RAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "lib/repl.js",
			"settings":
			{
				"buffer_size": 42588,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					33,
					1,
					"insert",
					{
						"characters": "cno"
					},
					"AwAAACQ+AAAAAAAAJT4AAAAAAAAAAAAAJT4AAAAAAAAmPgAAAAAAAAAAAAAmPgAAAAAAACc+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJD4AAAAAAAAkPgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					2,
					"left_delete",
					null,
					"AgAAACY+AAAAAAAAJj4AAAAAAAABAAAAbyU+AAAAAAAAJT4AAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAJz4AAAAAAAAnPgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "onsole.log"
					},
					"CgAAACU+AAAAAAAAJj4AAAAAAAAAAAAAJj4AAAAAAAAnPgAAAAAAAAAAAAAnPgAAAAAAACg+AAAAAAAAAAAAACg+AAAAAAAAKT4AAAAAAAAAAAAAKT4AAAAAAAAqPgAAAAAAAAAAAAAqPgAAAAAAACs+AAAAAAAAAAAAACs+AAAAAAAALD4AAAAAAAAAAAAALD4AAAAAAAAtPgAAAAAAAAAAAAAtPgAAAAAAAC4+AAAAAAAAAAAAAC4+AAAAAAAALz4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJT4AAAAAAAAlPgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAC8+AAAAAAAAMT4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALz4AAAAAAAAvPgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAADA+AAAAAAAAMj4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMD4AAAAAAAAwPgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "'controlC"
					},
					"CQAAADE+AAAAAAAAMj4AAAAAAAAAAAAAMj4AAAAAAAAzPgAAAAAAAAAAAAAzPgAAAAAAADQ+AAAAAAAAAAAAADQ+AAAAAAAANT4AAAAAAAAAAAAANT4AAAAAAAA2PgAAAAAAAAAAAAA2PgAAAAAAADc+AAAAAAAAAAAAADc+AAAAAAAAOD4AAAAAAAAAAAAAOD4AAAAAAAA5PgAAAAAAAAAAAAA5PgAAAAAAADo+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMT4AAAAAAAAxPgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAADs+AAAAAAAAPD4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOz4AAAAAAAA7PgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " this.cleanp"
					},
					"DAAAADw+AAAAAAAAPT4AAAAAAAAAAAAAPT4AAAAAAAA+PgAAAAAAAAAAAAA+PgAAAAAAAD8+AAAAAAAAAAAAAD8+AAAAAAAAQD4AAAAAAAAAAAAAQD4AAAAAAABBPgAAAAAAAAAAAABBPgAAAAAAAEI+AAAAAAAAAAAAAEI+AAAAAAAAQz4AAAAAAAAAAAAAQz4AAAAAAABEPgAAAAAAAAAAAABEPgAAAAAAAEU+AAAAAAAAAAAAAEU+AAAAAAAARj4AAAAAAAAAAAAARj4AAAAAAABHPgAAAAAAAAAAAABHPgAAAAAAAEg+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPD4AAAAAAAA8PgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"left_delete",
					null,
					"AQAAAEc+AAAAAAAARz4AAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAASD4AAAAAAABIPgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "up'"
					},
					"AwAAAEc+AAAAAAAASD4AAAAAAAAAAAAASD4AAAAAAABJPgAAAAAAAAAAAABJPgAAAAAAAEo+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARz4AAAAAAABHPgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "'"
					},
					"AQAAAD0+AAAAAAAAPj4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPT4AAAAAAAA9PgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEw+AAAAAAAATT4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATD4AAAAAAABMPgAAAAAAAP///////+9/"
				],
				[
					53,
					1,
					"cut",
					null,
					"AQAAACQ+AAAAAAAAJD4AAAAAAAAqAAAAY29uc29sZS5sb2coIidjb250cm9sQyIsICd0aGlzLmNsZWFudXAnKTsK",
					"AQAAAAAAAAABAAAAJD4AAAAAAABOPgAAAAAAAAAAAAAAAAAA"
				],
				[
					54,
					1,
					"paste",
					null,
					"AQAAACQ+AAAAAAAATj4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJD4AAAAAAAAkPgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"paste",
					null,
					"AQAAAME+AAAAAAAA6z4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwT4AAAAAAADBPgAAAAAAAAAAAAAAAAAA"
				],
				[
					68,
					1,
					"paste",
					null,
					"AgAAAOA+AAAAAAAA8z4AAAAAAAAAAAAA8z4AAAAAAADzPgAAAAAAAAcAAABjbGVhbnVw",
					"AQAAAAAAAAABAAAA4D4AAAAAAADnPgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEs+AAAAAAAATD4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASz4AAAAAAABLPgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " this.cleanup"
					},
					"DQAAAEw+AAAAAAAATT4AAAAAAAAAAAAATT4AAAAAAABOPgAAAAAAAAAAAABOPgAAAAAAAE8+AAAAAAAAAAAAAE8+AAAAAAAAUD4AAAAAAAAAAAAAUD4AAAAAAABRPgAAAAAAAAAAAABRPgAAAAAAAFI+AAAAAAAAAAAAAFI+AAAAAAAAUz4AAAAAAAAAAAAAUz4AAAAAAABUPgAAAAAAAAAAAABUPgAAAAAAAFU+AAAAAAAAAAAAAFU+AAAAAAAAVj4AAAAAAAAAAAAAVj4AAAAAAABXPgAAAAAAAAAAAABXPgAAAAAAAFg+AAAAAAAAAAAAAFg+AAAAAAAAWT4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATD4AAAAAAABMPgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": " ,thsi"
					},
					"BgAAAFk+AAAAAAAAWj4AAAAAAAAAAAAAWj4AAAAAAABbPgAAAAAAAAAAAABbPgAAAAAAAFw+AAAAAAAAAAAAAFw+AAAAAAAAXT4AAAAAAAAAAAAAXT4AAAAAAABePgAAAAAAAAAAAABePgAAAAAAAF8+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWT4AAAAAAABZPgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					2,
					"left_delete",
					null,
					"AgAAAF4+AAAAAAAAXj4AAAAAAAABAAAAaV0+AAAAAAAAXT4AAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAXz4AAAAAAABfPgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "is"
					},
					"AgAAAF0+AAAAAAAAXj4AAAAAAAAAAAAAXj4AAAAAAABfPgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXT4AAAAAAABdPgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\nif"
					},
					"AwAAAGE+AAAAAAAAYj4AAAAAAAAAAAAAYj4AAAAAAABjPgAAAAAAAAAAAABjPgAAAAAAAGQ+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYT4AAAAAAABhPgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGQ+AAAAAAAAZj4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZD4AAAAAAABkPgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "this.t"
					},
					"BgAAAGU+AAAAAAAAZj4AAAAAAAAAAAAAZj4AAAAAAABnPgAAAAAAAAAAAABnPgAAAAAAAGg+AAAAAAAAAAAAAGg+AAAAAAAAaT4AAAAAAAAAAAAAaT4AAAAAAABqPgAAAAAAAAAAAABqPgAAAAAAAGs+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZT4AAAAAAABlPgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					6,
					"left_delete",
					null,
					"BgAAAGo+AAAAAAAAaj4AAAAAAAABAAAAdGk+AAAAAAAAaT4AAAAAAAABAAAALmg+AAAAAAAAaD4AAAAAAAABAAAAc2c+AAAAAAAAZz4AAAAAAAABAAAAaWY+AAAAAAAAZj4AAAAAAAABAAAAaGU+AAAAAAAAZT4AAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAaz4AAAAAAABrPgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "typeof"
					},
					"BgAAAGU+AAAAAAAAZj4AAAAAAAAAAAAAZj4AAAAAAABnPgAAAAAAAAAAAABnPgAAAAAAAGg+AAAAAAAAAAAAAGg+AAAAAAAAaT4AAAAAAAAAAAAAaT4AAAAAAABqPgAAAAAAAAAAAABqPgAAAAAAAGs+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZT4AAAAAAABlPgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": " this.cleanup"
					},
					"DQAAAGs+AAAAAAAAbD4AAAAAAAAAAAAAbD4AAAAAAABtPgAAAAAAAAAAAABtPgAAAAAAAG4+AAAAAAAAAAAAAG4+AAAAAAAAbz4AAAAAAAAAAAAAbz4AAAAAAABwPgAAAAAAAAAAAABwPgAAAAAAAHE+AAAAAAAAAAAAAHE+AAAAAAAAcj4AAAAAAAAAAAAAcj4AAAAAAABzPgAAAAAAAAAAAABzPgAAAAAAAHQ+AAAAAAAAAAAAAHQ+AAAAAAAAdT4AAAAAAAAAAAAAdT4AAAAAAAB2PgAAAAAAAAAAAAB2PgAAAAAAAHc+AAAAAAAAAAAAAHc+AAAAAAAAeD4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaz4AAAAAAABrPgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAHg+AAAAAAAAeT4AAAAAAAAAAAAAeT4AAAAAAAB6PgAAAAAAAAAAAAB6PgAAAAAAAHs+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeD4AAAAAAAB4PgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHs+AAAAAAAAfD4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAez4AAAAAAAB7PgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert_snippet",
					{
						"contents": "'$0'"
					},
					"AQAAAHw+AAAAAAAAfj4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfD4AAAAAAAB8PgAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": "functino"
					},
					"CAAAAH0+AAAAAAAAfj4AAAAAAAAAAAAAfj4AAAAAAAB/PgAAAAAAAAAAAAB/PgAAAAAAAIA+AAAAAAAAAAAAAIA+AAAAAAAAgT4AAAAAAAAAAAAAgT4AAAAAAACCPgAAAAAAAAAAAACCPgAAAAAAAIM+AAAAAAAAAAAAAIM+AAAAAAAAhD4AAAAAAAAAAAAAhD4AAAAAAACFPgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfT4AAAAAAAB9PgAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					3,
					"left_delete",
					null,
					"AwAAAIU+AAAAAAAAhT4AAAAAAAABAAAAJ4Q+AAAAAAAAhD4AAAAAAAABAAAAb4M+AAAAAAAAgz4AAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAhj4AAAAAAACGPgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": "on'"
					},
					"AwAAAIM+AAAAAAAAhD4AAAAAAAAAAAAAhD4AAAAAAACFPgAAAAAAAAAAAACFPgAAAAAAAIY+AAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgz4AAAAAAACDPgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"left_delete",
					null,
					"AQAAAIY+AAAAAAAAhj4AAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAhz4AAAAAAACHPgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIY+AAAAAAAAhz4AAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhj4AAAAAAACGPgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"left_delete",
					null,
					"AQAAACQ+AAAAAAAAJD4AAAAAAAA+AAAAY29uc29sZS5sb2coIidjb250cm9sQyIsICd0aGlzLmNsZWFudXAnLCB0aGlzLmNsZWFudXAgLHRoaXMpOwo",
					"AQAAAAAAAAABAAAAJD4AAAAAAABiPgAAAAAAAAAAAAAAAAAA"
				],
				[
					107,
					1,
					"left_delete",
					null,
					"AQAAAF8+AAAAAAAAXz4AAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAYD4AAAAAAABgPgAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					6,
					"left_delete",
					null,
					"BgAAAG0+AAAAAAAAbT4AAAAAAAABAAAAIGw+AAAAAAAAbD4AAAAAAAABAAAAIGs+AAAAAAAAaz4AAAAAAAABAAAAIGo+AAAAAAAAaj4AAAAAAAABAAAAIGk+AAAAAAAAaT4AAAAAAAABAAAAIGg+AAAAAAAAaD4AAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAbj4AAAAAAABuPgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"left_delete",
					null,
					"AQAAALY+AAAAAAAAtj4AAAAAAAA2AAAAY29uc29sZS5sb2coIidjb250cm9sQyIsICd0aGlzLnJlYWRsaW5lUHJpbnRQcm9tcHQnKTsK",
					"AQAAAAAAAAABAAAAtj4AAAAAAADsPgAAAAAAAAAAAAAAAAAA"
				],
				[
					115,
					1,
					"revert",
					null,
					"AgAAAAAAAAAAAAAAAAAAAAAAAABepgAALyoKICogUXVpY2tKUyBSZWFkIEV2YWwgUHJpbnQgTG9vcAogKgogKiBDb3B5cmlnaHQgKGMpIDIwMTctMjAyMCBGYWJyaWNlIEJlbGxhcmQKICogQ29weXJpZ2h0IChjKSAyMDE3LTIwMjAgQ2hhcmxpZSBHb3Jkb24KICoKICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weQogKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbAogKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzCiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwKICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzCiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CiAqCiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluCiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgogKgogKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUgogKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwKICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwKICogVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIKICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwKICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTgogKiBUSEUgU09GVFdBUkUuCiAqLwondXNlIHN0cmlwJzsKCmltcG9ydCAqIGFzIHN0ZCBmcm9tICdzdGQnOwppbXBvcnQgKiBhcyBvcyBmcm9tICdvcyc7CmltcG9ydCBpbnNwZWN0IGZyb20gJ2luc3BlY3QnOwppbXBvcnQgcGF0aCBmcm9tICdwYXRoJzsKCmZ1bmN0aW9uIGRlZmluZShvYmosIC4uLmFyZ3MpIHsKICBmb3IobGV0IHByb3BzIG9mIGFyZ3MpIHsKICAgIGxldCBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocHJvcHMpOwogICAgZm9yKGxldCBwcm9wIGluIGRlc2MpIHsKICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gZGVzY1twcm9wXTsKICAgICAgaWYodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIGRlc2NbcHJvcF0ud3JpdGFibGUgPSBmYWxzZTsKICAgIH0KICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgZGVzYyk7CiAgfQogIHJldHVybiBvYmo7Cn0KCnZhciBmczsKCi8qIFhYWDogdXNlIHByZXByb2Nlc3NvciA/ICovCnZhciBjb25maWdfbnVtY2FsYyA9IHR5cGVvZiBvcy5vcGVuID09PSAndW5kZWZpbmVkJzsKdmFyIGhhc19qc2NhbGMgPSB0eXBlb2YgRnJhY3Rpb24gPT09ICdmdW5jdGlvbic7CnZhciBoYXNfYmlnbnVtID0gdHlwZW9mIEJpZ0Zsb2F0ID09PSAnZnVuY3Rpb24nOwoKdmFyIGNvbG9ycyA9IHsKICBub25lOiAnXHgxYlswbScsCiAgYmxhY2s6ICdceDFiWzMwbScsCiAgcmVkOiAnXHgxYlszMW0nLAogIGdyZWVuOiAnXHgxYlszMm0nLAogIHllbGxvdzogJ1x4MWJbMzNtJywKICBibHVlOiAnXHgxYlszNG0nLAogIG1hZ2VudGE6ICdceDFiWzM1bScsCiAgY3lhbjogJ1x4MWJbMzZtJywKICB3aGl0ZTogJ1x4MWJbMzdtJywKICBncmF5OiAnXHgxYlszMDsxbScsCiAgZ3JleTogJ1x4MWJbMzA7MW0nLAogIGJyaWdodF9yZWQ6ICdceDFiWzMxOzFtJywKICBicmlnaHRfZ3JlZW46ICdceDFiWzMyOzFtJywKICBicmlnaHRfeWVsbG93OiAnXHgxYlszMzsxbScsCiAgYnJpZ2h0X2JsdWU6ICdceDFiWzM0OzFtJywKICBicmlnaHRfbWFnZW50YTogJ1x4MWJbMzU7MW0nLAogIGJyaWdodF9jeWFuOiAnXHgxYlszNjsxbScsCiAgYnJpZ2h0X3doaXRlOiAnXHgxYlszNzsxbScKfTsKCnZhciByZWFkbGluZV9rZXlzID0gbnVsbDsKdmFyIHJlYWRsaW5lX3N0YXRlID0gbnVsbDsKdmFyIHJlYWRsaW5lX2NiID0gbnVsbDsKCnZhciBoZXhfbW9kZSA9IGZhbHNlOwp2YXIgZXZhbF9tb2RlID0gJ3N0ZCc7Cgp2YXIgc3R5bGVzID0gewogIGRlZmF1bHQ6ICdicmlnaHRfZ3JlZW4nLAogIGNvbW1lbnQ6ICdicmlnaHRfZ3JlZW4nLAogIHN0cmluZzogJ2JyaWdodF9jeWFuJywKICByZWdleDogJ2JyaWdodF9tYWdlbnRhJywKICBudW1iZXI6ICdncmVlbicsCiAga2V5d29yZDogJ2JyaWdodF9yZWQnLAogIGZ1bmN0aW9uOiAnYnJpZ2h0X3llbGxvdycsCiAgdHlwZTogJ2JyaWdodF9yZWQnLAogIGlkZW50aWZpZXI6ICdicmlnaHRfeWVsbG93JywKICBlcnJvcjogJ3JlZCcsCiAgcmVzdWx0OiAnd2hpdGUnLAogIGVycm9yX21zZzogJ2JyaWdodF9yZWQnCn07Cgp2YXIgaGlzdG9yeSA9IFtdOwp2YXIgY2xpcF9ib2FyZCA9ICcnOwp2YXIgcHJlYyA9IG51bGw7CnZhciBleHBCaXRzID0gbnVsbDsKdmFyIGxvZzJfMTAgPSBudWxsOwoKdmFyIHV0Zjhfc3RhdGUgPSAwOwp2YXIgdXRmOF92YWwgPSAwOwoKdmFyIHRlcm1fZmQgPSBudWxsOwp2YXIgdGVybV9yZWFkX2J1ZiA9IG51bGw7CnZhciB0ZXJtX3dpZHRoID0gbnVsbDsKLyogY3VycmVudCBYIHBvc2l0aW9uIG9mIHRoZSBjdXJzb3IgaW4gdGhlIHRlcm1pbmFsICovCnZhciB0ZXJtX2N1cnNvcl94ID0gMDsKCmV4cG9ydCBjbGFzcyBSRVBMIHsKICBwc3RhdGUgPSAnJzsKICBwcm9tcHQgPSAnJzsKICBwbGVuID0gMDsKICBwczEgPSAnPiAnOwogIHBzMiA9ICcgIC4uLiAnOwogIHV0ZjggPSB0cnVlOwogIHNob3dfdGltZSA9IGZhbHNlOwogIHNob3dfY29sb3JzID0gdHJ1ZTsKICBldmFsX3RpbWUgPSAwOwoKICBtZXhwciA9ICcnOwogIGxldmVsID0gMDsKICBjbWQgPSAnJzsKICBjdXJzb3JfcG9zID0gMDsKICBsYXN0X2NtZCA9ICcnOwogIGxhc3RfY3Vyc29yX3BvcyA9IDA7CiAgaGlzdG9yeV9pbmRleCA9IG51bGw7CiAgdGhpc19mdW4gPSBudWxsOwogIGxhc3RfZnVuID0gbnVsbDsKICBxdW90ZV9mbGFnID0gZmFsc2U7CgogIGNvbnN0cnVjdG9yKG5hbWUsIGZpbGVzeXN0ZW0sIHNob3dfYmFubmVyID0gdHJ1ZSkgewogICAgZnMgPSBmaWxlc3lzdGVtOwogICAgdGhpcy5jb21tYW5kcyA9IGRlZmluZSgKICAgICAge30sCiAgICAgIHsKICAgICAgICAvKiBjb21tYW5kIHRhYmxlICovICdceDAxJzogdGhpcy5iZWdpbm5pbmdPZkxpbmUgLyogXkEgLSBib2wgKi8sCiAgICAgICAgJ1x4MDInOiB0aGlzLmJhY2t3YXJkQ2hhciAvKiBeQiAtIGJhY2t3YXJkLWNoYXIgKi8sCiAgICAgICAgJ1x4MDMnOiB0aGlzLmNvbnRyb2xDIC8qIF5DIC0gdGhpcy5hYm9ydCAqLywKICAgICAgICAnXHgwNCc6IHRoaXMuY29udHJvbEQgLyogXkQgLSBkZWxldGUtY2hhciBvciBleGl0ICovLAogICAgICAgICdceDA1JzogdGhpcy5lbmRPZkxpbmUgLyogXkUgLSBlb2wgKi8sCiAgICAgICAgJ1x4MDYnOiB0aGlzLmZvcndhcmRDaGFyIC8qIF5GIC0gZm9yd2FyZC1jaGFyICovLAogICAgICAgICdceDA3JzogdGhpcy5hYm9ydCAvKiBeRyAtIGJlbGwgKi8sCiAgICAgICAgJ1x4MDgnOiB0aGlzLmJhY2t3YXJkRGVsZXRlQ2hhciAvKiBeSCAtIGJhY2tzcGFjZSAqLywKICAgICAgICAnXHgwOSc6IHRoaXMuY29tcGxldGlvbiAvKiBeSSAtIGhpc3Rvcnktc2VhcmNoLWJhY2t3YXJkICovLAogICAgICAgICdceDBhJzogdGhpcy5hY2NlcHRMaW5lIC8qIF5KIC0gbmV3bGluZSAqLywKICAgICAgICAnXHgwYic6IHRoaXMua2lsbExpbmUgLyogXksgLSBkZWxldGUgdG8gZW5kIG9mIGxpbmUgKi8sCiAgICAgICAgJ1x4MGQnOiB0aGlzLmFjY2VwdExpbmUgLyogXk0gLSBlbnRlciAqLywKICAgICAgICAnXHgwZSc6IHRoaXMubmV4dEhpc3RvcnkgLyogXk4gLSBkb3duICovLAogICAgICAgICdceDEwJzogdGhpcy5wcmV2aW91c0hpc3RvcnkgLyogXlAgLSB1cCAqLywKICAgICAgICAnXHgxMSc6IHRoaXMucXVvdGVkSW5zZXJ0IC8qIF5RIC0gcXVvdGVkLXRoaXMuaW5zZXJ0ICovLAogICAgICAgICdceDEyJzogdGhpcy5hbGVydCAvKiBeUiAtIHJldmVyc2Utc2VhcmNoICovLAogICAgICAgICdceDEzJzogdGhpcy5hbGVydCAvKiBeUyAtIHNlYXJjaCAqLywKICAgICAgICAnXHgxNCc6IHRoaXMudHJhbnNwb3NlQ2hhcnMgLyogXlQgLSB0cmFuc3Bvc2UgKi8sCiAgICAgICAgJ1x4MTgnOiB0aGlzLnJlc2V0IC8qIF5YIC0gY2FuY2VsICovLAogICAgICAgICdceDE5JzogdGhpcy55YW5rIC8qIF5ZIC0gdGhpcy55YW5rICovLAogICAgICAgICdceDFiT0EnOiB0aGlzLnByZXZpb3VzSGlzdG9yeSAvKiBeW09BIC0gdXAgKi8sCiAgICAgICAgJ1x4MWJPQic6IHRoaXMubmV4dEhpc3RvcnkgLyogXltPQiAtIGRvd24gKi8sCiAgICAgICAgJ1x4MWJPQyc6IHRoaXMuZm9yd2FyZENoYXIgLyogXltPQyAtIHJpZ2h0ICovLAogICAgICAgICdceDFiT0QnOiB0aGlzLmJhY2t3YXJkQ2hhciAvKiBeW09EIC0gbGVmdCAqLywKICAgICAgICAnXHgxYk9GJzogdGhpcy5mb3J3YXJkV29yZCAvKiBeW09GIC0gY3RybC1yaWdodCAqLywKICAgICAgICAnXHgxYk9IJzogdGhpcy5iYWNrd2FyZFdvcmQgLyogXltPSCAtIGN0cmwtbGVmdCAqLywKICAgICAgICAnXHgxYlsxOzVDJzogdGhpcy5mb3J3YXJkV29yZCAvKiBeW1sxOzVDIC0gY3RybC1yaWdodCAqLywKICAgICAgICAnXHgxYlsxOzVEJzogdGhpcy5iYWNrd2FyZFdvcmQgLyogXltbMTs1RCAtIGN0cmwtbGVmdCAqLywKICAgICAgICAnXHgxYlsxfic6IHRoaXMuYmVnaW5uaW5nT2ZMaW5lIC8qIF5bWzF+IC0gYm9sICovLAogICAgICAgICdceDFiWzN+JzogdGhpcy5kZWxldGVDaGFyIC8qIF5bWzN+IC0gZGVsZXRlICovLAogICAgICAgICdceDFiWzR+JzogdGhpcy5lbmRPZkxpbmUgLyogXltbNH4gLSBlb2wgKi8sCiAgICAgICAgJ1x4MWJbNX4nOiB0aGlzLmhpc3RvcnlTZWFyY2hCYWNrd2FyZCAvKiBeW1s1fiAtIHBhZ2UgdXAgKi8sCiAgICAgICAgJ1x4MWJbNn4nOiB0aGlzLmhpc3RvcnlTZWFyY2hGb3J3YXJkIC8qIF5bWzV+IC0gcGFnZSBkb3duICovLAogICAgICAgICdceDFiW0EnOiB0aGlzLnByZXZpb3VzSGlzdG9yeSAvKiBeW1tBIC0gdXAgKi8sCiAgICAgICAgJ1x4MWJbQic6IHRoaXMubmV4dEhpc3RvcnkgLyogXltbQiAtIGRvd24gKi8sCiAgICAgICAgJ1x4MWJbQyc6IHRoaXMuZm9yd2FyZENoYXIgLyogXltbQyAtIHJpZ2h0ICovLAogICAgICAgICdceDFiW0QnOiB0aGlzLmJhY2t3YXJkQ2hhciAvKiBeW1tEIC0gbGVmdCAqLywKICAgICAgICAnXHgxYltGJzogdGhpcy5lbmRPZkxpbmUgLyogXltbRiAtIGVuZCAqLywKICAgICAgICAnXHgxYltIJzogdGhpcy5iZWdpbm5pbmdPZkxpbmUgLyogXltbSCAtIGhvbWUgKi8sCiAgICAgICAgJ1x4MWJceDdmJzogdGhpcy5iYWNrd2FyZEtpbGxXb3JkIC8qIE0tQy0/IC0gdGhpcy5iYWNrd2FyZEtpbGxXb3JkICovLAogICAgICAgICdceDFiYic6IHRoaXMuYmFja3dhcmRXb3JkIC8qIE0tYiAtIHRoaXMuYmFja3dhcmRXb3JkICovLAogICAgICAgICdceDFiZCc6IHRoaXMua2lsbFdvcmQgLyogTS1kIC0gdGhpcy5raWxsV29yZCAqLywKICAgICAgICAnXHgxYmYnOiB0aGlzLmZvcndhcmRXb3JkIC8qIE0tZiAtIHRoaXMuYmFja3dhcmRXb3JkICovLAogICAgICAgICdceDFiayc6IHRoaXMuYmFja3dhcmRLaWxsTGluZSAvKiBNLWsgLSB0aGlzLmJhY2t3YXJkS2lsbExpbmUgKi8sCiAgICAgICAgJ1x4MWJsJzogdGhpcy5kb3duY2FzZVdvcmQgLyogTS1sIC0gdGhpcy5kb3duY2FzZVdvcmQgKi8sCiAgICAgICAgJ1x4MWJ0JzogdGhpcy50cmFuc3Bvc2VXb3JkcyAvKiBNLXQgLSB0aGlzLnRyYW5zcG9zZVdvcmRzICovLAogICAgICAgICdceDFidSc6IHRoaXMudXBjYXNlV29yZCAvKiBNLXUgLSB0aGlzLnVwY2FzZVdvcmQgKi8sCiAgICAgICAgJ1x4N2YnOiB0aGlzLmJhY2t3YXJkRGVsZXRlQ2hhciAvKiBePyAtIGRlbGV0ZSAqLwogICAgICB9CiAgICApOwoKICAgIGlmKHR5cGVvZiBuYW1lID09ICdzdHJpbmcnKSB0aGlzLnBzMSA9IG5hbWUgKyB0aGlzLnBzMTsKCiAgICB0aGlzLnRlcm1Jbml0KCk7CgogICAgdGhpcy5jbWRTdGFydChzaG93X2Jhbm5lcik7CiAgfQoKICBhYm9ydCgpIHsKICAgIHRoaXMuY21kID0gJyc7CiAgICB0aGlzLmN1cnNvcl9wb3MgPSAwOwogICAgcmV0dXJuIC0yOwogIH0KCiAgYWNjZXB0TGluZSgpIHsKICAgIHN0ZC5wdXRzKCdcbicpOwogICAgdGhpcy5oaXN0b3J5QWRkKHRoaXMuY21kKTsKICAgIHJldHVybiAtMTsKICB9CgogIGFsZXJ0KCkge30KCiAgYmFja3dhcmRDaGFyKCkgewogICAgaWYodGhpcy5jdXJzb3JfcG9zID4gMCkgewogICAgICB0aGlzLmN1cnNvcl9wb3MtLTsKICAgICAgd2hpbGUoaXNUcmFpbGluZ1N1cnJvZ2F0ZSh0aGlzLmNtZC5jaGFyQXQodGhpcy5jdXJzb3JfcG9zKSkpIHRoaXMuY3Vyc29yX3Bvcy0tOwogICAgfQogIH0KCiAgYmFja3dhcmREZWxldGVDaGFyKCkgewogICAgdGhpcy5kZWxldGVDaGFyRGlyKC0xKTsKICB9CgogIGJhY2t3YXJkS2lsbExpbmUoKSB7CiAgICB0aGlzLmtpbGxSZWdpb24oMCwgdGhpcy5jdXJzb3JfcG9zLCAtMSk7CiAgfQoKICBiYWNrd2FyZEtpbGxXb3JkKCkgewogICAgdGhpcy5raWxsUmVnaW9uKHRoaXMuc2tpcFdvcmRCYWNrd2FyZCh0aGlzLmN1cnNvcl9wb3MpLCB0aGlzLmN1cnNvcl9wb3MsIC0xKTsKICB9CgogIGJhY2t3YXJkV29yZCgpIHsKICAgIHRoaXMuY3Vyc29yX3BvcyA9IHRoaXMuc2tpcFdvcmRCYWNrd2FyZCh0aGlzLmN1cnNvcl9wb3MpOwogIH0KCiAgYmVnaW5uaW5nT2ZMaW5lKCkgewogICAgdGhpcy5jdXJzb3JfcG9zID0gMDsKICB9CgogIGJpZ2Zsb2F0VG9TdHJpbmcoYSwgcmFkaXgpIHsKICAgIHZhciBzID0gbnVsbDsKICAgIGlmKCFCaWdGbG9hdC5pc0Zpbml0ZShhKSkgewogICAgICAvKiBOYU4sIEluZmluaXRlICovCiAgICAgIGlmKGV2YWxfbW9kZSAhPT0gJ21hdGgnKSB7CiAgICAgICAgcmV0dXJuICdCaWdGbG9hdCgnICsgYS50b1N0cmluZygpICsgJyknOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBhLnRvU3RyaW5nKCk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGlmKGEgPT0gMCkgewogICAgICAgIGlmKDEgLyBhIDwgMCkgcyA9ICctMCc7CiAgICAgICAgZWxzZSBzID0gJzAnOwogICAgICB9IGVsc2UgewogICAgICAgIGlmKHJhZGl4ID09IDE2KSB7CiAgICAgICAgICB2YXIgcyA9IG51bGw7CiAgICAgICAgICBpZihhIDwgMCkgewogICAgICAgICAgICBhID0gLWE7CiAgICAgICAgICAgIHMgPSAnLSc7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBzID0gJyc7CiAgICAgICAgICB9CiAgICAgICAgICBzICs9ICcweCcgKyBhLnRvU3RyaW5nKDE2KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcyA9IGEudG9TdHJpbmcoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYodHlwZW9mIGEgPT09ICdiaWdmbG9hdCcgJiYgZXZhbF9tb2RlICE9PSAnbWF0aCcpIHsKICAgICAgICBzICs9ICdsJzsKICAgICAgfSBlbHNlIGlmKGV2YWxfbW9kZSAhPT0gJ3N0ZCcgJiYgcy5pbmRleE9mKCcuJykgPCAwICYmICgocmFkaXggPT0gMTYgJiYgcy5pbmRleE9mKCdwJykgPCAwKSB8fCAocmFkaXggPT0gMTAgJiYgcy5pbmRleE9mKCdlJykgPCAwKSkpIHsKICAgICAgICAvKiBhZGQgYSBkZWNpbWFsIHBvaW50IHNvIHRoYXQgdGhlIGZsb2F0aW5nIHBvaW50IHR5cGUKICAgICAgICAgICAgICAgICAgIGlzIHZpc2libGUgKi8KICAgICAgICBzICs9ICcuMCc7CiAgICAgIH0KICAgICAgcmV0dXJuIHM7CiAgICB9CiAgfQoKICBiaWdpbnRUb1N0cmluZyhhLCByYWRpeCkgewogICAgdmFyIHMgPSBudWxsOwogICAgaWYocmFkaXggPT0gMTYpIHsKICAgICAgdmFyIHMgPSBudWxsOwogICAgICBpZihhIDwgMCkgewogICAgICAgIGEgPSAtYTsKICAgICAgICBzID0gJy0nOwogICAgICB9IGVsc2UgewogICAgICAgIHMgPSAnJzsKICAgICAgfQogICAgICBzICs9ICcweCcgKyBhLnRvU3RyaW5nKDE2KTsKICAgIH0gZWxzZSB7CiAgICAgIHMgPSBhLnRvU3RyaW5nKCk7CiAgICB9CiAgICBpZihldmFsX21vZGUgPT09ICdzdGQnKSBzICs9ICduJzsKICAgIHJldHVybiBzOwogIH0KCiAgY21kUmVhZGxpbmVTdGFydCgpIHsKICAgIHRoaXMucmVhZGxpbmVTdGFydCh0aGlzLmR1cHN0cignICAgICcsIHRoaXMubGV2ZWwpLCB0aGlzLnJlYWRsaW5lSGFuZGxlQ21kKTsKICB9CgogIGNtZFN0YXJ0KHNob3dfYmFubmVyID0gdHJ1ZSkgewogICAgaWYoc2hvd19iYW5uZXIpIHN0ZC5wdXRzKCdRdWlja0pTIC0gVHlwZSAiXFxoIiBmb3IgdGhpcy5oZWxwXG4nKTsKCiAgICBpZihoYXNfYmlnbnVtKSB7CiAgICAgIGxvZzJfMTAgPSBNYXRoLmxvZygxMCkgLyBNYXRoLmxvZygyKTsKICAgICAgcHJlYyA9IDExMzsKICAgICAgZXhwQml0cyA9IDE1OwogICAgICBpZihoYXNfanNjYWxjKSB7CiAgICAgICAgZXZhbF9tb2RlID0gJ21hdGgnOwogICAgICAgIC8qIFhYWDogbnVtZXJpYyBtb2RlIHNob3VsZCBhbHdheXMgYmUgdGhlIGRlZmF1bHQgPyAqLwogICAgICAgIGdsb2JhbFRoaXMuYWxnZWJyYWljTW9kZSA9IGNvbmZpZ19udW1jYWxjOwogICAgICB9CiAgICB9CgogICAgdGhpcy5jbWRSZWFkbGluZVN0YXJ0KCk7CiAgfQoKICBjb2xvcml6ZUpzKHN0cikgewogICAgdmFyIGksCiAgICAgIGMsCiAgICAgIHN0YXJ0LAogICAgICBuID0gc3RyLmxlbmd0aDsKICAgIHZhciBzdHlsZSwKICAgICAgc3RhdGUgPSAnJywKICAgICAgbGV2ZWwgPSAwOwogICAgdmFyIHByaW1hcnksCiAgICAgIGNhbl9yZWdleCA9IDE7CiAgICB2YXIgciA9IFtdOwoKICAgIGZ1bmN0aW9uIHB1c2hTdGF0ZShjKSB7CiAgICAgIHN0YXRlICs9IGM7CiAgICB9CiAgICBmdW5jdGlvbiBsYXN0U3RhdGUoYykgewogICAgICByZXR1cm4gc3RhdGUuc3Vic3RyaW5nKHN0YXRlLmxlbmd0aCAtIDEpOwogICAgfQogICAgZnVuY3Rpb24gcG9wU3RhdGUoYykgewogICAgICB2YXIgYyA9IGxhc3RTdGF0ZSgpOwogICAgICBzdGF0ZSA9IHN0YXRlLnN1YnN0cmluZygwLCBzdGF0ZS5sZW5ndGggLSAxKTsKICAgICAgcmV0dXJuIGM7CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VCbG9ja0NvbW1lbnQoKSB7CiAgICAgIHN0eWxlID0gJ2NvbW1lbnQnOwogICAgICBwdXNoU3RhdGUoJy8nKTsKICAgICAgZm9yKGkrKzsgaSA8IG4gLSAxOyBpKyspIHsKICAgICAgICBpZihzdHJbaV0gPT0gJyonICYmIHN0cltpICsgMV0gPT0gJy8nKSB7CiAgICAgICAgICBpICs9IDI7CiAgICAgICAgICBwb3BTdGF0ZSgnLycpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VMaW5lQ29tbWVudCgpIHsKICAgICAgc3R5bGUgPSAnY29tbWVudCc7CiAgICAgIGZvcihpKys7IGkgPCBuOyBpKyspIHsKICAgICAgICBpZihzdHJbaV0gPT0gJ1xuJykgewogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VTdHJpbmcoZGVsaW0pIHsKICAgICAgc3R5bGUgPSAnc3RyaW5nJzsKICAgICAgcHVzaFN0YXRlKGRlbGltKTsKICAgICAgd2hpbGUoaSA8IG4pIHsKICAgICAgICBjID0gc3RyW2krK107CiAgICAgICAgaWYoYyA9PSAnXG4nKSB7CiAgICAgICAgICBzdHlsZSA9ICdlcnJvcic7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYoYyA9PSAnXFwnKSB7CiAgICAgICAgICBpZihpID49IG4pIGJyZWFrOwogICAgICAgICAgaSsrOwogICAgICAgIH0gZWxzZSBpZihjID09IGRlbGltKSB7CiAgICAgICAgICBwb3BTdGF0ZSgpOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgfQogICAgICB9CiAgICB9CgogICAgZnVuY3Rpb24gcGFyc2VSZWdleCgpIHsKICAgICAgc3R5bGUgPSAncmVnZXgnOwogICAgICBwdXNoU3RhdGUoJy8nKTsKICAgICAgd2hpbGUoaSA8IG4pIHsKICAgICAgICBjID0gc3RyW2krK107CiAgICAgICAgaWYoYyA9PSAnXG4nKSB7CiAgICAgICAgICBzdHlsZSA9ICdlcnJvcic7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYoYyA9PSAnXFwnKSB7CiAgICAgICAgICBpZihpIDwgbikgewogICAgICAgICAgICBpKys7CiAgICAgICAgICB9CiAgICAgICAgICBjb250aW51ZTsKICAgICAgICB9CiAgICAgICAgaWYobGFzdFN0YXRlKCkgPT0gJ1snKSB7CiAgICAgICAgICBpZihjID09ICddJykgewogICAgICAgICAgICBwb3BTdGF0ZSgpOwogICAgICAgICAgfQogICAgICAgICAgLy8gRUNNQSA1OiBpZ25vcmUgJy8nIGluc2lkZSBjaGFyIGNsYXNzZXMKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZihjID09ICdbJykgewogICAgICAgICAgcHVzaFN0YXRlKCdbJyk7CiAgICAgICAgICBpZihzdHJbaV0gPT0gJ1snIHx8IHN0cltpXSA9PSAnXScpIGkrKzsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgICBpZihjID09ICcvJykgewogICAgICAgICAgcG9wU3RhdGUoKTsKICAgICAgICAgIHdoaWxlKGkgPCBuICYmIGlzV29yZChzdHJbaV0pKSBpKys7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBwYXJzZU51bWJlcigpIHsKICAgICAgc3R5bGUgPSAnbnVtYmVyJzsKICAgICAgd2hpbGUoaSA8IG4gJiYgKGlzV29yZChzdHJbaV0pIHx8IChzdHJbaV0gPT0gJy4nICYmIChpID09IG4gLSAxIHx8IHN0cltpICsgMV0gIT0gJy4nKSkpKSB7CiAgICAgICAgaSsrOwogICAgICB9CiAgICB9CgogICAgdmFyIGpzX2tleXdvcmRzID0gJ3wnICsgJ2JyZWFrfGNhc2V8Y2F0Y2h8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98JyArICdlbHNlfGZpbmFsbHl8Zm9yfGZ1bmN0aW9ufGlmfGlufGluc3RhbmNlb2Z8bmV3fCcgKyAncmV0dXJufHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8d2hpbGV8d2l0aHwnICsgJ2NsYXNzfGNvbnN0fGVudW18aW1wb3J0fGV4cG9ydHxleHRlbmRzfHN1cGVyfCcgKyAnaW1wbGVtZW50c3xpbnRlcmZhY2V8bGV0fHBhY2thZ2V8cHJpdmF0ZXxwcm90ZWN0ZWR8JyArICdwdWJsaWN8c3RhdGljfHlpZWxkfCcgKyAndW5kZWZpbmVkfG51bGx8dHJ1ZXxmYWxzZXxJbmZpbml0eXxOYU58JyArICdldmFsfGFyZ3VtZW50c3wnICsgJ2F3YWl0fCc7CgogICAgdmFyIGpzX25vX3JlZ2V4ID0gJ3x0aGlzfHN1cGVyfHVuZGVmaW5lZHxudWxsfHRydWV8ZmFsc2V8SW5maW5pdHl8TmFOfGFyZ3VtZW50c3wnOwogICAgdmFyIGpzX3R5cGVzID0gJ3x2b2lkfHZhcnwnOwoKICAgIGZ1bmN0aW9uIHBhcnNlSWRlbnRpZmllcigpIHsKICAgICAgY2FuX3JlZ2V4ID0gMTsKCiAgICAgIHdoaWxlKGkgPCBuICYmIGlzV29yZChzdHJbaV0pKSBpKys7CgogICAgICB2YXIgdyA9ICd8JyArIHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpICsgJ3wnOwoKICAgICAgaWYoanNfa2V5d29yZHMuaW5kZXhPZih3KSA+PSAwKSB7CiAgICAgICAgc3R5bGUgPSAna2V5d29yZCc7CiAgICAgICAgaWYoanNfbm9fcmVnZXguaW5kZXhPZih3KSA+PSAwKSBjYW5fcmVnZXggPSAwOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgdmFyIGkxID0gaTsKICAgICAgd2hpbGUoaTEgPCBuICYmIHN0cltpMV0gPT0gJyAnKSBpMSsrOwoKICAgICAgaWYoaTEgPCBuICYmIHN0cltpMV0gPT0gJygnKSB7CiAgICAgICAgc3R5bGUgPSAnZnVuY3Rpb24nOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYoanNfdHlwZXMuaW5kZXhPZih3KSA+PSAwKSB7CiAgICAgICAgc3R5bGUgPSAndHlwZSc7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBzdHlsZSA9ICdpZGVudGlmaWVyJzsKICAgICAgY2FuX3JlZ2V4ID0gMDsKICAgIH0KCiAgICBmdW5jdGlvbiBzZXRTdHlsZShmcm9tLCB0bykgewogICAgICB3aGlsZShyLmxlbmd0aCA8IGZyb20pIHIucHVzaCgnZGVmYXVsdCcpOwogICAgICB3aGlsZShyLmxlbmd0aCA8IHRvKSByLnB1c2goc3R5bGUpOwogICAgfQoKICAgIGZvcihpID0gMDsgaSA8IG47ICkgewogICAgICBzdHlsZSA9IG51bGw7CiAgICAgIHN0YXJ0ID0gaTsKICAgICAgc3dpdGNoICgoYyA9IHN0cltpKytdKSkgewogICAgICAgIGNhc2UgJyAnOgogICAgICAgIGNhc2UgJ1x0JzoKICAgICAgICBjYXNlICdccic6CiAgICAgICAgY2FzZSAnXG4nOgogICAgICAgICAgY29udGludWU7CiAgICAgICAgY2FzZSAnKyc6CiAgICAgICAgY2FzZSAnLSc6CiAgICAgICAgICBpZihpIDwgbiAmJiBzdHJbaV0gPT0gYykgewogICAgICAgICAgICBpKys7CiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgY2FuX3JlZ2V4ID0gMTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIGNhc2UgJy8nOgogICAgICAgICAgaWYoaSA8IG4gJiYgc3RyW2ldID09ICcqJykgewogICAgICAgICAgICAvLyBibG9jayBjb21tZW50CiAgICAgICAgICAgIHBhcnNlQmxvY2tDb21tZW50KCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgaWYoaSA8IG4gJiYgc3RyW2ldID09ICcvJykgewogICAgICAgICAgICAvLyBsaW5lIGNvbW1lbnQKICAgICAgICAgICAgcGFyc2VMaW5lQ29tbWVudCgpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGlmKGNhbl9yZWdleCkgewogICAgICAgICAgICBwYXJzZVJlZ2V4KCk7CiAgICAgICAgICAgIGNhbl9yZWdleCA9IDA7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgY2FuX3JlZ2V4ID0gMTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIGNhc2UgIiciOgogICAgICAgIGNhc2UgJyInOgogICAgICAgIGNhc2UgJ2AnOgogICAgICAgICAgcGFyc2VTdHJpbmcoYyk7CiAgICAgICAgICBjYW5fcmVnZXggPSAwOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAnKCc6CiAgICAgICAgY2FzZSAnWyc6CiAgICAgICAgY2FzZSAneyc6CiAgICAgICAgICBjYW5fcmVnZXggPSAxOwogICAgICAgICAgbGV2ZWwrKzsKICAgICAgICAgIHB1c2hTdGF0ZShjKTsKICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgIGNhc2UgJyknOgogICAgICAgIGNhc2UgJ10nOgogICAgICAgIGNhc2UgJ30nOgogICAgICAgICAgY2FuX3JlZ2V4ID0gMDsKICAgICAgICAgIGlmKGxldmVsID4gMCAmJiBpc0JhbGFuY2VkKGxhc3RTdGF0ZSgpLCBjKSkgewogICAgICAgICAgICBsZXZlbC0tOwogICAgICAgICAgICBwb3BTdGF0ZSgpOwogICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICAgIHN0eWxlID0gJ2Vycm9yJzsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICBpZihpc0RpZ2l0KGMpKSB7CiAgICAgICAgICAgIHBhcnNlTnVtYmVyKCk7CiAgICAgICAgICAgIGNhbl9yZWdleCA9IDA7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgaWYoaXNXb3JkKGMpIHx8IGMgPT0gJyQnKSB7CiAgICAgICAgICAgIHBhcnNlSWRlbnRpZmllcigpOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIGNhbl9yZWdleCA9IDE7CiAgICAgICAgICBjb250aW51ZTsKICAgICAgfQogICAgICBpZihzdHlsZSkgc2V0U3R5bGUoc3RhcnQsIGkpOwogICAgfQogICAgc2V0U3R5bGUobiwgbik7CiAgICByZXR1cm4gW3N0YXRlLCBsZXZlbCwgcl07CiAgfQoKICBjb21wbGV0aW9uKCkgewogICAgdmFyIHRhYiwKICAgICAgcmVzLAogICAgICBzLAogICAgICBpLAogICAgICBqLAogICAgICBsZW4sCiAgICAgIHQsCiAgICAgIG1heF93aWR0aCwKICAgICAgY29sLAogICAgICBuX2NvbHMsCiAgICAgIHJvdywKICAgICAgbl9yb3dzID0gbnVsbDsKICAgIHJlcyA9IHRoaXMuZ2V0Q29tcGxldGlvbnModGhpcy5jbWQsIHRoaXMuY3Vyc29yX3Bvcyk7CiAgICB0YWIgPSByZXMudGFiOwogICAgaWYodGFiLmxlbmd0aCA9PT0gMCkgcmV0dXJuOwogICAgcyA9IHRhYlswXTsKICAgIGxlbiA9IHMubGVuZ3RoOwogICAgLyogYWRkIHRoZSBjaGFycyB3aGljaCBhcmUgaWRlbnRpY2FsIGluIGFsbCB0aGUgY29tcGxldGlvbnMgKi8KICAgIGZvcihpID0gMTsgaSA8IHRhYi5sZW5ndGg7IGkrKykgewogICAgICB0ID0gdGFiW2ldOwogICAgICBmb3IoaiA9IDA7IGogPCBsZW47IGorKykgewogICAgICAgIGlmKHRbal0gIT09IHNbal0pIHsKICAgICAgICAgIGxlbiA9IGo7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgIH0KICAgIGZvcihpID0gcmVzLnBvczsgaSA8IGxlbjsgaSsrKSB7CiAgICAgIHRoaXMuaW5zZXJ0KHNbaV0pOwogICAgfQogICAgaWYodGhpcy5sYXN0X2Z1biA9PT0gdGhpcy5jb21wbGV0aW9uICYmIHRhYi5sZW5ndGggPT0gMSkgewogICAgICAvKiBhcHBlbmQgcGFyZW50aGVzZXMgdG8gZnVuY3Rpb24gbmFtZXMgKi8KICAgICAgdmFyIG0gPSByZXMuY3R4W3RhYlswXV07CiAgICAgIGlmKHR5cGVvZiBtID09ICdmdW5jdGlvbicpIHsKICAgICAgICB0aGlzLmluc2VydCgnKCcpOwogICAgICAgIGlmKG0ubGVuZ3RoID09IDApIHRoaXMuaW5zZXJ0KCcpJyk7CiAgICAgIH0gZWxzZSBpZih0eXBlb2YgbSA9PSAnb2JqZWN0JykgewogICAgICAgIHRoaXMuaW5zZXJ0KCcuJyk7CiAgICAgIH0KICAgIH0KICAgIC8qIHNob3cgdGhlIHBvc3NpYmxlIGNvbXBsZXRpb25zICovCiAgICBpZih0aGlzLmxhc3RfZnVuID09PSB0aGlzLmNvbXBsZXRpb24gJiYgdGFiLmxlbmd0aCA+PSAyKSB7CiAgICAgIG1heF93aWR0aCA9IDA7CiAgICAgIGZvcihpID0gMDsgaSA8IHRhYi5sZW5ndGg7IGkrKykgbWF4X3dpZHRoID0gTWF0aC5tYXgobWF4X3dpZHRoLCB0YWJbaV0ubGVuZ3RoKTsKICAgICAgbWF4X3dpZHRoICs9IDI7CiAgICAgIG5fY29scyA9IE1hdGgubWF4KDEsIE1hdGguZmxvb3IoKHRlcm1fd2lkdGggKyAxKSAvIG1heF93aWR0aCkpOwogICAgICBuX3Jvd3MgPSBNYXRoLmNlaWwodGFiLmxlbmd0aCAvIG5fY29scyk7CiAgICAgIHN0ZC5wdXRzKCdcbicpOwogICAgICAvKiBkaXNwbGF5IHRoZSBzb3J0ZWQgbGlzdCBjb2x1bW4td2lzZSAqLwogICAgICBmb3Iocm93ID0gMDsgcm93IDwgbl9yb3dzOyByb3crKykgewogICAgICAgIGZvcihjb2wgPSAwOyBjb2wgPCBuX2NvbHM7IGNvbCsrKSB7CiAgICAgICAgICBpID0gY29sICogbl9yb3dzICsgcm93OwogICAgICAgICAgaWYoaSA+PSB0YWIubGVuZ3RoKSBicmVhazsKICAgICAgICAgIHMgPSB0YWJbaV07CiAgICAgICAgICBpZihjb2wgIT0gbl9jb2xzIC0gMSkgcyA9IHMucGFkRW5kKG1heF93aWR0aCk7CiAgICAgICAgICBzdGQucHV0cyhzKTsKICAgICAgICB9CiAgICAgICAgc3RkLnB1dHMoJ1xuJyk7CiAgICAgIH0KICAgICAgLyogc2hvdyBhIG5ldyB0aGlzLnByb21wdCAqLwogICAgICB0aGlzLnJlYWRsaW5lUHJpbnRQcm9tcHQoKTsKICAgIH0KICB9CgogIGNvbnRyb2xDKCkgewogICAgc3RkLnB1dHMoJ1x4MWJbMTJpJyk7CiAgICBpZih0aGlzLmxhc3RfZnVuID09PSB0aGlzLmNvbnRyb2xDKSB7CiAgICAgIHN0ZC5wdXRzKCdcbicpOwppZih0eXBlb2YgdGhpcy5jbGVhbnVwID09ICdmdW5jdGlvbicpCiAgICAgIHRoaXMuY2xlYW51cCgpOwogICAgICAvL3N0ZC5leGl0KDApOwogICAgfSBlbHNlIHsKICAgICAgc3RkLnB1dHMoJ1xuKFByZXNzIEN0cmwtQyBhZ2FpbiB0byBxdWl0KVxuJyk7CiAgICAgIHRoaXMucmVhZGxpbmVQcmludFByb21wdCgpOwogICAgfQogIH0KCiAgY29udHJvbEQoKSB7CiAgICBpZih0aGlzLmNtZC5sZW5ndGggPT0gMCkgewogICAgICBzdGQucHV0cygnXG4nKTsKICAgICAgcmV0dXJuIC0zOyAvKiBleGl0IHJlYWQgZXZhbCB0aGlzLnByaW50IGxvb3AgKi8KICAgIH0gZWxzZSB7CiAgICAgIHRoaXMuZGVsZXRlQ2hhckRpcigxKTsKICAgIH0KICB9CgogIGRlbGV0ZUNoYXIoKSB7CiAgICB0aGlzLmRlbGV0ZUNoYXJEaXIoMSk7CiAgfQoKICBkZWxldGVDaGFyRGlyKGRpcikgewogICAgdmFyIHN0YXJ0LAogICAgICBlbmQgPSBudWxsOwoKICAgIHN0YXJ0ID0gdGhpcy5jdXJzb3JfcG9zOwogICAgaWYoZGlyIDwgMCkgewogICAgICBzdGFydC0tOwogICAgICB3aGlsZShpc1RyYWlsaW5nU3Vycm9nYXRlKHRoaXMuY21kLmNoYXJBdChzdGFydCkpKSBzdGFydC0tOwogICAgfQogICAgZW5kID0gc3RhcnQgKyAxOwogICAgd2hpbGUoaXNUcmFpbGluZ1N1cnJvZ2F0ZSh0aGlzLmNtZC5jaGFyQXQoZW5kKSkpIGVuZCsrOwoKICAgIGlmKHN0YXJ0ID49IDAgJiYgc3RhcnQgPCB0aGlzLmNtZC5sZW5ndGgpIHsKICAgICAgaWYodGhpcy5sYXN0X2Z1biA9PT0gdGhpcy5raWxsUmVnaW9uKSB7CiAgICAgICAgdGhpcy5raWxsUmVnaW9uKHN0YXJ0LCBlbmQsIGRpcik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jbWQgPSB0aGlzLmNtZC5zdWJzdHJpbmcoMCwgc3RhcnQpICsgdGhpcy5jbWQuc3Vic3RyaW5nKGVuZCk7CiAgICAgICAgdGhpcy5jdXJzb3JfcG9zID0gc3RhcnQ7CiAgICAgIH0KICAgIH0KICB9CgogIGRvd25jYXNlV29yZCgpIHsKICAgIHZhciBlbmQgPSB0aGlzLnNraXBXb3JkRm9yd2FyZCh0aGlzLmN1cnNvcl9wb3MpOwogICAgdGhpcy5jbWQgPSB0aGlzLmNtZC5zdWJzdHJpbmcoMCwgdGhpcy5jdXJzb3JfcG9zKSArIHRoaXMuY21kLnN1YnN0cmluZyh0aGlzLmN1cnNvcl9wb3MsIGVuZCkudG9Mb3dlckNhc2UoKSArIHRoaXMuY21kLnN1YnN0cmluZyhlbmQpOwogIH0KCiAgZHVwc3RyKHN0ciwgY291bnQpIHsKICAgIHZhciByZXMgPSAnJzsKICAgIHdoaWxlKGNvdW50LS0gPiAwKSByZXMgKz0gc3RyOwogICAgcmV0dXJuIHJlczsKICB9CgogIGVuZE9mTGluZSgpIHsKICAgIHRoaXMuY3Vyc29yX3BvcyA9IHRoaXMuY21kLmxlbmd0aDsKICB9CgogIHJlYWRsaW5lUmVtb3ZlUHJvbXB0KCkgewogICAgcHJpbnRDc2koMSwgJ0snKTsKICAgIHByaW50Q3NpKDEsICdHJyk7CiAgfQoKICBldmFsQW5kUHJpbnQoZXhwcikgewogICAgdmFyIHJlc3VsdCA9IG51bGw7CiAgICBjb25zdCBpbnNwZWN0T3B0aW9ucyA9IC8qY29uc29sZS5vcHRpb25zIHx8ICovIHsKICAgICAgY3VzdG9tSW5zcGVjdDogdHJ1ZSwKICAgICAgY29tcGFjdDogMSwKICAgICAgZGVwdGg6IDEwLAogICAgICBoaWRlS2V5czogWydsb2MnLCAncmFuZ2UnXQogICAgfTsKICAgIHRyeSB7CiAgICAgIGlmKGV2YWxfbW9kZSA9PT0gJ21hdGgnKSBleHByID0gJyJ1c2UgbWF0aCI7IHZvaWQgMDsnICsgZXhwcjsKICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAvKiBldmFsIGFzIGEgc2NyaXB0ICovCiAgICAgIHJlc3VsdCA9IHN0ZC5ldmFsU2NyaXB0KGV4cHIsIHsgYmFja3RyYWNlX2JhcnJpZXI6IHRydWUgfSk7CiAgICAgIHRoaXMuZXZhbF90aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSBub3c7CiAgICAgIHRoaXMucHJpbnRTdGF0dXMoY29sb3JzW3N0eWxlcy5yZXN1bHRdICsgKHR5cGVvZiByZXN1bHQgPT0gJ3N0cmluZycgPyByZXN1bHQgOiBpbnNwZWN0KHJlc3VsdCwgaW5zcGVjdE9wdGlvbnMpKSArIGNvbG9ycy5ub25lLCBmYWxzZSk7CiAgICAgIC8qIHNldCB0aGUgbGFzdCByZXN1bHQgKi8KICAgICAgZ2xvYmFsVGhpcy5fID0gcmVzdWx0OwogICAgfSBjYXRjaChlcnJvcikgewogICAgICBsZXQgb3V0cHV0ID0gJyc7CiAgICAgIGdsb2JhbFRoaXMubGFzdEVycm9yID0gZXJyb3I7CiAgICAgIG91dHB1dCArPSBjb2xvcnNbc3R5bGVzLmVycm9yX21zZ107CiAgICAgIGlmKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHsKICAgICAgICBvdXRwdXQgKz0gJ0Vycm9yOiAnOwoKICAgICAgICBvdXRwdXQgKz0gZXJyb3IubWVzc2FnZTsKCiAgICAgICAgaWYoZXJyb3Iuc3RhY2spIG91dHB1dCArPSBlcnJvci5zdGFjazsKICAgICAgfSBlbHNlIHsKICAgICAgICBvdXRwdXQgKz0gJ1Rocm93OiAnOwoKICAgICAgICBpZihlcnJvcj8ubWVzc2FnZSkgb3V0cHV0ICs9IGVycm9yLm1lc3NhZ2U7CiAgICAgIH0KICAgICAgb3V0cHV0ID0gb3V0cHV0LnRyaW1FbmQoKTsKCiAgICAgIG91dHB1dCArPSBjb2xvcnMubm9uZTsKICAgICAgb3V0cHV0ICs9ICdcbic7CiAgICAgIHRoaXMucHJpbnRTdGF0dXMob3V0cHV0LCBmYWxzZSk7CiAgICB9CiAgfQoKICBleHRyYWN0RGlyZWN0aXZlKGEpIHsKICAgIHZhciBwb3MgPSBudWxsOwogICAgaWYoYVswXSAhPT0gJ1xcJykgcmV0dXJuICcnOwogICAgZm9yKHBvcyA9IDE7IHBvcyA8IGEubGVuZ3RoOyBwb3MrKykgewogICAgICBpZighaXNBbHBoYShhW3Bvc10pKSBicmVhazsKICAgIH0KICAgIHJldHVybiBhLnN1YnN0cmluZygxLCBwb3MpOwogIH0KCiAgZm9yd2FyZENoYXIoKSB7CiAgICBpZih0aGlzLmN1cnNvcl9wb3MgPCB0aGlzLmNtZC5sZW5ndGgpIHsKICAgICAgdGhpcy5jdXJzb3JfcG9zKys7CiAgICAgIHdoaWxlKGlzVHJhaWxpbmdTdXJyb2dhdGUodGhpcy5jbWQuY2hhckF0KHRoaXMuY3Vyc29yX3BvcykpKSB0aGlzLmN1cnNvcl9wb3MrKzsKICAgIH0KICB9CgogIGZvcndhcmRXb3JkKCkgewogICAgdGhpcy5jdXJzb3JfcG9zID0gdGhpcy5za2lwV29yZEZvcndhcmQodGhpcy5jdXJzb3JfcG9zKTsKICB9CgogIGdldENvbXBsZXRpb25zKGxpbmUsIHBvcykgewogICAgdmFyIHMsCiAgICAgIG9iaiwKICAgICAgY3R4X29iaiwKICAgICAgciwKICAgICAgaSwKICAgICAgaiwKICAgICAgcGFyZW4gPSBudWxsOwoKICAgIHMgPSB0aGlzLmdldENvbnRleHRXb3JkKGxpbmUsIHBvcyk7CiAgICBjdHhfb2JqID0gdGhpcy5nZXRDb250ZXh0T2JqZWN0KGxpbmUsIHBvcyAtIHMubGVuZ3RoKTsKICAgIHIgPSBbXTsKICAgIC8qIGVudW1lcmF0ZSBwcm9wZXJ0aWVzIGZyb20gb2JqZWN0IGFuZCBpdHMgcHJvdG90eXBlIGNoYWluLAogICAgICAgICAgIGFkZCBub24tbnVtZXJpYyByZWd1bGFyIHByb3BlcnRpZXMgd2l0aCBzIGFzIGUgcHJlZml4CiAgICAgICAgICovCiAgICBmb3IoaSA9IDAsIG9iaiA9IGN0eF9vYmo7IGkgPCAxMCAmJiBvYmogIT09IG51bGwgJiYgb2JqICE9PSB2b2lkIDA7IGkrKykgewogICAgICB2YXIgcHJvcHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopOwogICAgICAvKiBhZGQgbm9uLW51bWVyaWMgcmVndWxhciBwcm9wZXJ0aWVzICovCiAgICAgIGZvcihqID0gMDsgaiA8IHByb3BzLmxlbmd0aDsgaisrKSB7CiAgICAgICAgdmFyIHByb3AgPSBwcm9wc1tqXTsKICAgICAgICBpZih0eXBlb2YgcHJvcCA9PSAnc3RyaW5nJyAmJiAnJyArICtwcm9wICE9IHByb3AgJiYgcHJvcC5zdGFydHNXaXRoKHMpKSByLnB1c2gocHJvcCk7CiAgICAgIH0KICAgICAgb2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaik7CiAgICB9CiAgICBpZihyLmxlbmd0aCA+IDEpIHsKICAgICAgLyogc29ydCBsaXN0IHdpdGggaW50ZXJuYWwgbmFtZXMgbGFzdCBhbmQgcmVtb3ZlIGR1cGxpY2F0ZXMgKi8KICAgICAgZnVuY3Rpb24gc3ltY21wKGEsIGIpIHsKICAgICAgICBpZihhWzBdICE9IGJbMF0pIHsKICAgICAgICAgIGlmKGFbMF0gPT0gJ18nKSByZXR1cm4gMTsKICAgICAgICAgIGlmKGJbMF0gPT0gJ18nKSByZXR1cm4gLTE7CiAgICAgICAgfQogICAgICAgIGlmKGEgPCBiKSByZXR1cm4gLTE7CiAgICAgICAgaWYoYSA+IGIpIHJldHVybiArMTsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgICByLnNvcnQodGhpcy5zeW1jbXApOwogICAgICBmb3IoaSA9IGogPSAxOyBpIDwgci5sZW5ndGg7IGkrKykgewogICAgICAgIGlmKHJbaV0gIT0gcltpIC0gMV0pIHJbaisrXSA9IHJbaV07CiAgICAgIH0KICAgICAgci5sZW5ndGggPSBqOwogICAgfQogICAgLyogJ3RhYicgPSBsaXN0IG9mIGNvbXBsZXRpb25zLCAncG9zJyA9IGN1cnNvciBwb3NpdGlvbiBpbnNpZGUKICAgICAgICAgICB0aGUgY29tcGxldGlvbnMgKi8KICAgIHJldHVybiB7IHRhYjogciwgcG9zOiBzLmxlbmd0aCwgY3R4OiBjdHhfb2JqIH07CiAgfQoKICBnZXRDb250ZXh0T2JqZWN0KGxpbmUsIHBvcykgewogICAgdmFyIG9iaiwKICAgICAgYmFzZSwKICAgICAgYyA9IG51bGw7CiAgICBpZihwb3MgPD0gMCB8fCAnIH4hJV4mKigtKz17W3w6Oyw8Pj8vJy5pbmRleE9mKGxpbmVbcG9zIC0gMV0pID49IDApIHJldHVybiBnbG9iYWxUaGlzOwogICAgaWYocG9zID49IDIgJiYgbGluZVtwb3MgLSAxXSA9PT0gJy4nKSB7CiAgICAgIHBvcy0tOwogICAgICBvYmogPSB7fTsKICAgICAgc3dpdGNoICgoYyA9IGxpbmVbcG9zIC0gMV0pKSB7CiAgICAgICAgY2FzZSAiJyI6CiAgICAgICAgY2FzZSAnIic6CiAgICAgICAgICByZXR1cm4gJ2EnOwogICAgICAgIGNhc2UgJ10nOgogICAgICAgICAgcmV0dXJuIFtdOwogICAgICAgIGNhc2UgJ30nOgogICAgICAgICAgcmV0dXJuIHt9OwogICAgICAgIGNhc2UgJy8nOgogICAgICAgICAgcmV0dXJuIC8gLzsKICAgICAgICBkZWZhdWx0OgogICAgICAgICAgaWYoaXNXb3JkKGMpKSB7CiAgICAgICAgICAgIGJhc2UgPSB0aGlzLmdldENvbnRleHRXb3JkKGxpbmUsIHBvcyk7CiAgICAgICAgICAgIGlmKFsndHJ1ZScsICdmYWxzZScsICdudWxsJywgJ3RoaXMnXS5pbmNsdWRlcyhiYXNlKSB8fCAhaXNOYU4oK2Jhc2UpKSByZXR1cm4gZXZhbChiYXNlKTsKICAgICAgICAgICAgb2JqID0gdGhpcy5nZXRDb250ZXh0T2JqZWN0KGxpbmUsIHBvcyAtIGJhc2UubGVuZ3RoKTsKICAgICAgICAgICAgaWYob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwKSByZXR1cm4gb2JqOwogICAgICAgICAgICBpZihvYmogPT09IGdsb2JhbFRoaXMgJiYgb2JqW2Jhc2VdID09PSB2b2lkIDApIHJldHVybiBldmFsKGJhc2UpOwogICAgICAgICAgICBlbHNlIHJldHVybiBvYmpbYmFzZV07CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgIH0KICAgIHJldHVybiB2b2lkIDA7CiAgfQoKICBnZXRDb250ZXh0V29yZChsaW5lLCBwb3MpIHsKICAgIHZhciBzID0gJyc7CiAgICB3aGlsZShwb3MgPiAwICYmIGlzV29yZChsaW5lW3BvcyAtIDFdKSkgewogICAgICBwb3MtLTsKICAgICAgcyA9IGxpbmVbcG9zXSArIHM7CiAgICB9CiAgICByZXR1cm4gczsKICB9CgogIGhhbmRsZUJ5dGUoYykgewogICAgaWYoIXRoaXMudXRmOCkgewogICAgICB0aGlzLmhhbmRsZUNoYXIoYyk7CiAgICB9IGVsc2UgaWYodXRmOF9zdGF0ZSAhPT0gMCAmJiBjID49IDB4ODAgJiYgYyA8IDB4YzApIHsKICAgICAgdXRmOF92YWwgPSAodXRmOF92YWwgPDwgNikgfCAoYyAmIDB4M2YpOwogICAgICB1dGY4X3N0YXRlLS07CiAgICAgIGlmKHV0Zjhfc3RhdGUgPT09IDApIHsKICAgICAgICB0aGlzLmhhbmRsZUNoYXIodXRmOF92YWwpOwogICAgICB9CiAgICB9IGVsc2UgaWYoYyA+PSAweGMwICYmIGMgPCAweGY4KSB7CiAgICAgIHV0Zjhfc3RhdGUgPSAxICsgKGMgPj0gMHhlMCkgKyAoYyA+PSAweGYwKTsKICAgICAgdXRmOF92YWwgPSBjICYgKCgxIDw8ICg2IC0gdXRmOF9zdGF0ZSkpIC0gMSk7CiAgICB9IGVsc2UgewogICAgICB1dGY4X3N0YXRlID0gMDsKICAgICAgdGhpcy5oYW5kbGVDaGFyKGMpOwogICAgfQogIH0KCiAgaGFuZGxlQ2hhcihjMSkgewogICAgdmFyIGMgPSBudWxsOwogICAgYyA9IFN0cmluZy5mcm9tQ29kZVBvaW50KGMxKTsKICAgIHN3aXRjaCAocmVhZGxpbmVfc3RhdGUpIHsKICAgICAgY2FzZSAwOgogICAgICAgIGlmKGMgPT0gJ1x4MWInKSB7CiAgICAgICAgICAvKiAnXlsnIC0gRVNDICovCiAgICAgICAgICByZWFkbGluZV9rZXlzID0gYzsKICAgICAgICAgIHJlYWRsaW5lX3N0YXRlID0gMTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgdGhpcy5oYW5kbGVLZXkoYyk7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDEgLyogJ15bICovOgogICAgICAgIHJlYWRsaW5lX2tleXMgKz0gYzsKICAgICAgICBpZihjID09ICdbJykgewogICAgICAgICAgcmVhZGxpbmVfc3RhdGUgPSAyOwogICAgICAgIH0gZWxzZSBpZihjID09ICdPJykgewogICAgICAgICAgcmVhZGxpbmVfc3RhdGUgPSAzOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmhhbmRsZUtleShyZWFkbGluZV9rZXlzKTsKICAgICAgICAgIHJlYWRsaW5lX3N0YXRlID0gMDsKICAgICAgICB9CiAgICAgICAgYnJlYWs7CiAgICAgIGNhc2UgMiAvKiAnXltbJyAtIENTSSAqLzoKICAgICAgICByZWFkbGluZV9rZXlzICs9IGM7CiAgICAgICAgaWYoIShjID09ICc7JyB8fCAoYyA+PSAnMCcgJiYgYyA8PSAnOScpKSkgewogICAgICAgICAgdGhpcy5oYW5kbGVLZXkocmVhZGxpbmVfa2V5cyk7CiAgICAgICAgICByZWFkbGluZV9zdGF0ZSA9IDA7CiAgICAgICAgfQogICAgICAgIGJyZWFrOwogICAgICBjYXNlIDMgLyogJ15bTycgLSBFU0MyICovOgogICAgICAgIHJlYWRsaW5lX2tleXMgKz0gYzsKICAgICAgICB0aGlzLmhhbmRsZUtleShyZWFkbGluZV9rZXlzKTsKICAgICAgICByZWFkbGluZV9zdGF0ZSA9IDA7CiAgICAgICAgYnJlYWs7CiAgICB9CiAgfQoKICBoYW5kbGVDbWQoZXhwcikgewogICAgdmFyIGNvbG9yc3RhdGUsCiAgICAgIGNtZCA9IG51bGw7CgogICAgaWYoZXhwciA9PT0gbnVsbCkgewogICAgICBleHByID0gJyc7CiAgICAgIHJldHVybjsKICAgIH0KICAgIGlmKGV4cHIgPT09ICc/JykgewogICAgICB0aGlzLmhlbHAoKTsKICAgICAgcmV0dXJuOwogICAgfQogICAgY21kID0gdGhpcy5leHRyYWN0RGlyZWN0aXZlKGV4cHIpOwogICAgaWYoY21kLmxlbmd0aCA+IDApIHsKICAgICAgaWYoIXRoaXMuaGFuZGxlRGlyZWN0aXZlKGNtZCwgZXhwcikpIHJldHVybjsKICAgICAgZXhwciA9IGV4cHIuc3Vic3RyaW5nKGNtZC5sZW5ndGggKyAxKTsKICAgIH0KICAgIGlmKGV4cHIgPT09ICcnKSByZXR1cm47CgogICAgaWYodGhpcy5tZXhwcikgZXhwciA9IHRoaXMubWV4cHIgKyAnXG4nICsgZXhwcjsKICAgIGNvbG9yc3RhdGUgPSB0aGlzLmNvbG9yaXplSnMoZXhwcik7CiAgICB0aGlzLnBzdGF0ZSA9IGNvbG9yc3RhdGVbMF07CiAgICB0aGlzLmxldmVsID0gY29sb3JzdGF0ZVsxXTsKICAgIGlmKHRoaXMucHN0YXRlKSB7CiAgICAgIHRoaXMubWV4cHIgPSBleHByOwogICAgICByZXR1cm47CiAgICB9CiAgICB0aGlzLm1leHByID0gJyc7CgogICAgaWYoaGFzX2JpZ251bSkgewogICAgICBCaWdGbG9hdEVudi5zZXRQcmVjKHRoaXMuZXZhbEFuZFByaW50LmJpbmQodGhpcywgZXhwciksIHByZWMsIGV4cEJpdHMpOwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5ldmFsQW5kUHJpbnQoZXhwcik7CiAgICB9CiAgICB0aGlzLmxldmVsID0gMDsKCiAgICAvKiBydW4gdGhlIGdhcmJhZ2UgY29sbGVjdG9yIGFmdGVyIGVhY2ggY29tbWFuZCAqLwogICAgc3RkLmdjKCk7CiAgfQoKICBoYW5kbGVEaXJlY3RpdmUoY21kLCBleHByKSB7CiAgICB2YXIgcGFyYW0sCiAgICAgIHByZWMxLAogICAgICBleHBCaXRzMSA9IG51bGw7CgogICAgaWYodGhpcy5jbWQgPT09ICdoJyB8fCB0aGlzLmNtZCA9PT0gJz8nIHx8IHRoaXMuY21kID09ICd0aGlzLmhlbHAnKSB7CiAgICAgIHRoaXMuaGVscCgpOwogICAgfSBlbHNlIGlmKHRoaXMuY21kID09PSAnbG9hZCcpIHsKICAgICAgdmFyIGZpbGVuYW1lID0gZXhwci5zdWJzdHJpbmcoY21kLmxlbmd0aCArIDEpLnRyaW0oKTsKICAgICAgaWYoZmlsZW5hbWUubGFzdEluZGV4T2YoJy4nKSA8PSBmaWxlbmFtZS5sYXN0SW5kZXhPZignLycpKSBmaWxlbmFtZSArPSAnLmpzJzsKICAgICAgc3RkLmxvYWRTY3JpcHQoZmlsZW5hbWUpOwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IGVsc2UgaWYodGhpcy5jbWQgPT09ICd4JykgewogICAgICBoZXhfbW9kZSA9IHRydWU7CiAgICB9IGVsc2UgaWYodGhpcy5jbWQgPT09ICdkJykgewogICAgICBoZXhfbW9kZSA9IGZhbHNlOwogICAgfSBlbHNlIGlmKHRoaXMuY21kID09PSAndCcpIHsKICAgICAgdGhpcy5zaG93X3RpbWUgPSAhdGhpcy5zaG93X3RpbWU7CiAgICB9IGVsc2UgaWYoaGFzX2JpZ251bSAmJiB0aGlzLmNtZCA9PT0gJ3AnKSB7CiAgICAgIHBhcmFtID0gZXhwcgogICAgICAgIC5zdWJzdHJpbmcodGhpcy5jbWQubGVuZ3RoICsgMSkKICAgICAgICAudHJpbSgpCiAgICAgICAgLnNwbGl0KCcgJyk7CiAgICAgIGlmKHBhcmFtLmxlbmd0aCA9PT0gMSAmJiBwYXJhbVswXSA9PT0gJycpIHsKICAgICAgICBzdGQucHV0cygnQmlnRmxvYXQgcHJlY2lzaW9uPScgKyBwcmVjICsgJyBiaXRzICh+JyArIE1hdGguZmxvb3IocHJlYyAvIGxvZzJfMTApICsgJyBkaWdpdHMpLCBleHBvbmVudCBzaXplPScgKyBleHBCaXRzICsgJyBiaXRzXG4nKTsKICAgICAgfSBlbHNlIGlmKHBhcmFtWzBdID09PSAnZjE2JykgewogICAgICAgIHByZWMgPSAxMTsKICAgICAgICBleHBCaXRzID0gNTsKICAgICAgfSBlbHNlIGlmKHBhcmFtWzBdID09PSAnZjMyJykgewogICAgICAgIHByZWMgPSAyNDsKICAgICAgICBleHBCaXRzID0gODsKICAgICAgfSBlbHNlIGlmKHBhcmFtWzBdID09PSAnZjY0JykgewogICAgICAgIHByZWMgPSA1MzsKICAgICAgICBleHBCaXRzID0gMTE7CiAgICAgIH0gZWxzZSBpZihwYXJhbVswXSA9PT0gJ2YxMjgnKSB7CiAgICAgICAgcHJlYyA9IDExMzsKICAgICAgICBleHBCaXRzID0gMTU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcHJlYzEgPSBwYXJzZUludChwYXJhbVswXSk7CiAgICAgICAgaWYocGFyYW0ubGVuZ3RoID49IDIpIGV4cEJpdHMxID0gcGFyc2VJbnQocGFyYW1bMV0pOwogICAgICAgIGVsc2UgZXhwQml0czEgPSBCaWdGbG9hdEVudi5leHBCaXRzTWF4OwogICAgICAgIGlmKE51bWJlci5pc05hTihwcmVjMSkgfHwgcHJlYzEgPCBCaWdGbG9hdEVudi5wcmVjTWluIHx8IHByZWMxID4gQmlnRmxvYXRFbnYucHJlY01heCkgewogICAgICAgICAgc3RkLnB1dHMoJ0ludmFsaWQgcHJlY2lzaW9uXG4nKTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYoTnVtYmVyLmlzTmFOKGV4cEJpdHMxKSB8fCBleHBCaXRzMSA8IEJpZ0Zsb2F0RW52LmV4cEJpdHNNaW4gfHwgZXhwQml0czEgPiBCaWdGbG9hdEVudi5leHBCaXRzTWF4KSB7CiAgICAgICAgICBzdGQucHV0cygnSW52YWxpZCBleHBvbmVudCBiaXRzXG4nKTsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgcHJlYyA9IHByZWMxOwogICAgICAgIGV4cEJpdHMgPSBleHBCaXRzMTsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IGVsc2UgaWYoaGFzX2JpZ251bSAmJiB0aGlzLmNtZCA9PT0gJ2RpZ2l0cycpIHsKICAgICAgcGFyYW0gPSBleHByLnN1YnN0cmluZyh0aGlzLmNtZC5sZW5ndGggKyAxKS50cmltKCk7CiAgICAgIHByZWMxID0gTWF0aC5jZWlsKHBhcnNlRmxvYXQocGFyYW0pICogbG9nMl8xMCk7CiAgICAgIGlmKHByZWMxIDwgQmlnRmxvYXRFbnYucHJlY01pbiB8fCBwcmVjMSA+IEJpZ0Zsb2F0RW52LnByZWNNYXgpIHsKICAgICAgICBzdGQucHV0cygnSW52YWxpZCBwcmVjaXNpb25cbicpOwogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBwcmVjID0gcHJlYzE7CiAgICAgIGV4cEJpdHMgPSBCaWdGbG9hdEVudi5leHBCaXRzTWF4OwogICAgICByZXR1cm4gZmFsc2U7CiAgICB9IGVsc2UgaWYoaGFzX2JpZ251bSAmJiB0aGlzLmNtZCA9PT0gJ21vZGUnKSB7CiAgICAgIHBhcmFtID0gZXhwci5zdWJzdHJpbmcodGhpcy5jbWQubGVuZ3RoICsgMSkudHJpbSgpOwogICAgICBpZihwYXJhbSA9PT0gJycpIHsKICAgICAgICBzdGQucHV0cygnUnVubmluZyBtb2RlPScgKyBldmFsX21vZGUgKyAnXG4nKTsKICAgICAgfSBlbHNlIGlmKHBhcmFtID09PSAnc3RkJyB8fCBwYXJhbSA9PT0gJ21hdGgnKSB7CiAgICAgICAgZXZhbF9tb2RlID0gcGFyYW07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RkLnB1dHMoJ0ludmFsaWQgbW9kZVxuJyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfSBlbHNlIGlmKHRoaXMuY21kID09PSAnY2xlYXInKSB7CiAgICAgIHN0ZC5wdXRzKCdceDFiW0hceDFiW0onKTsKICAgIH0gZWxzZSBpZih0aGlzLmNtZCA9PT0gJ3EnKSB7CiAgICAgIHN0ZC5leGl0KDApOwogICAgfSBlbHNlIGlmKGhhc19qc2NhbGMgJiYgdGhpcy5jbWQgPT09ICdhJykgewogICAgICBhbGdlYnJhaWNNb2RlID0gdHJ1ZTsKICAgIH0gZWxzZSBpZihoYXNfanNjYWxjICYmIHRoaXMuY21kID09PSAnbicpIHsKICAgICAgYWxnZWJyYWljTW9kZSA9IGZhbHNlOwogICAgfSBlbHNlIHsKICAgICAgc3RkLnB1dHMoJ1Vua25vd24gZGlyZWN0aXZlOiAnICsgdGhpcy5jbWQgKyAnXG4nKTsKICAgICAgcmV0dXJuIGZhbHNlOwogICAgfQogICAgcmV0dXJuIHRydWU7CiAgfQoKICBoYW5kbGVLZXkoa2V5cykgewogICAgdmFyIGZ1biA9IG51bGw7CgogICAgaWYodGhpcy5xdW90ZV9mbGFnKSB7CiAgICAgIGlmKHVjc0xlbmd0aChrZXlzKSA9PT0gMSkgdGhpcy5pbnNlcnQoa2V5cyk7CiAgICAgIHRoaXMucXVvdGVfZmxhZyA9IGZhbHNlOwogICAgfSBlbHNlIGlmKChmdW4gPSB0aGlzLmNvbW1hbmRzW2tleXNdKSkgewogICAgICB0aGlzLnRoaXNfZnVuID0gZnVuOwogICAgICBzd2l0Y2ggKGZ1bi5jYWxsKHRoaXMsIGtleXMpKSB7CiAgICAgICAgY2FzZSAtMToKICAgICAgICAgIHJlYWRsaW5lX2NiLmNhbGwodGhpcywgdGhpcy5jbWQpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIGNhc2UgLTI6CiAgICAgICAgICByZWFkbGluZV9jYi5jYWxsKHRoaXMsIG51bGwpOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIGNhc2UgLTM6CiAgICAgICAgICAvKiB1bmluc3RhbGwgYSBDdHJsLUMgc2lnbmFsIGhhbmRsZXIgKi8KICAgICAgICAgIG9zLnNpZ25hbChvcy5TSUdJTlQsIG51bGwpOwogICAgICAgICAgLyogdW5pbnN0YWxsIHRoZSBzdGRpbiByZWFkIGhhbmRsZXIgKi8KICAgICAgICAgIG9zLnNldFJlYWRIYW5kbGVyKHRlcm1fZmQsIG51bGwpOwogICAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMubGFzdF9mdW4gPSB0aGlzLnRoaXNfZnVuOwogICAgfSBlbHNlIGlmKHVjc0xlbmd0aChrZXlzKSA9PT0gMSAmJiBrZXlzID49ICcgJykgewogICAgICB0aGlzLmluc2VydChrZXlzKTsKICAgICAgdGhpcy5sYXN0X2Z1biA9IHRoaXMuaW5zZXJ0OwogICAgfSBlbHNlIHsKICAgICAgdGhpcy5hbGVydCgpOyAvKiBiZWVwISAqLwogICAgfQoKICAgIHRoaXMuY3Vyc29yX3BvcyA9IHRoaXMuY3Vyc29yX3BvcyA8IDAgPyAwIDogdGhpcy5jdXJzb3JfcG9zID4gdGhpcy5jbWQubGVuZ3RoID8gdGhpcy5jbWQubGVuZ3RoIDogdGhpcy5jdXJzb3JfcG9zOwogICAgdGhpcy51cGRhdGUoKTsKICB9CgogIGhlbHAoKSB7CiAgICBmdW5jdGlvbiBzZWwobikgewogICAgICByZXR1cm4gbiA/ICcqJyA6ICcgJzsKICAgIH0KICAgIHN0ZC5wdXRzKCdcXGggICAgICAgICAgdGhpcyB0aGlzLmhlbHBcbicgKyAnXFx4ICAgICAgICAgJyArIHRoaXMuc2VsKGhleF9tb2RlKSArICdoZXhhZGVjaW1hbCBudW1iZXIgZGlzcGxheVxuJyArICdcXGQgICAgICAgICAnICsgdGhpcy5zZWwoIWhleF9tb2RlKSArICdkZWNpbWFsIG51bWJlciBkaXNwbGF5XG4nICsgJ1xcdCAgICAgICAgICcgKyB0aGlzLnNlbCh0aGlzLnNob3dfdGltZSkgKyAndG9nZ2xlIHRpbWluZyBkaXNwbGF5XG4nICsgJ1xcY2xlYXIgICAgICBjbGVhciB0aGUgdGVybWluYWxcbicpOwogICAgaWYoaGFzX2pzY2FsYykgewogICAgICBzdGQucHV0cygnXFxhICAgICAgICAgJyArIHRoaXMuc2VsKGFsZ2VicmFpY01vZGUpICsgJ2FsZ2VicmFpYyBtb2RlXG4nICsgJ1xcbiAgICAgICAgICcgKyB0aGlzLnNlbCghYWxnZWJyYWljTW9kZSkgKyAnbnVtZXJpYyBtb2RlXG4nKTsKICAgIH0KICAgIGlmKGhhc19iaWdudW0pIHsKICAgICAgc3RkLnB1dHMoIlxccCBbbSBbZV1dICBzZXQgdGhlIEJpZ0Zsb2F0IHByZWNpc2lvbiB0byAnbScgYml0c1xuIiArICJcXGRpZ2l0cyBuICAgc2V0IHRoZSBCaWdGbG9hdCBwcmVjaXNpb24gdG8gJ2NlaWwobipsb2cyKDEwKSknIGJpdHNcbiIpOwogICAgICBpZighaGFzX2pzY2FsYykgewogICAgICAgIHN0ZC5wdXRzKCdcXG1vZGUgW3N0ZHxtYXRoXSBjaGFuZ2UgdGhlIHJ1bm5pbmcgbW9kZSAoY3VycmVudCA9ICcgKyBldmFsX21vZGUgKyAnKVxuJyk7CiAgICAgIH0KICAgIH0KICAgIGlmKCFjb25maWdfbnVtY2FsYykgewogICAgICBzdGQucHV0cygnXFxxICAgICAgICAgIGV4aXRcbicpOwogICAgfQogIH0KCiAgaGlzdG9yeUZpbGUoKSB7CiAgICBjb25zdCB7IGFyZ3YgfSA9IHByb2Nlc3M7CiAgICBsZXQgbWUgPSBhcmd2WzFdID8/IGFyZ3ZbMF07CiAgICBsZXQgYmFzZSA9IHBhdGguYmFzZW5hbWUobWUsIHBhdGguZXh0bmFtZShtZSkpOwogICAgbGV0IGhvbWUgPSBwYXRoLmdldGhvbWUoKTsKICAgIHJldHVybiBgJHtob21lfS8uJHtiYXNlfV9oaXN0b3J5YDsKICB9CgogIGhpc3RvcnlMb2FkKGZpbGVuYW1lLCBmYWlsID0gdHJ1ZSkgewogICAgZmlsZW5hbWUgPz89IHRoaXMuaGlzdG9yeUZpbGUoKTsKCiAgICBjb25zb2xlLmxvZyhgcmVwbC5oaXN0b3J5TG9hZGAsIHsgZmlsZW5hbWUsIGZhaWwgfSwgZnMuZXhpc3RzU3luYyk7CiAgICAvKiBpZighZnMuZXhpc3RzU3luYyhmaWxlbmFtZSkpIHsKICAgICAgaWYoZmFpbCkgdGhyb3cgbmV3IEVycm9yKGBSRVBMLmhpc3RvcnlMb2FkIG5vIHN1Y2ggZmlsZW5hbWU6ICR7ZmlsZW5hbWV9YCk7CiAgICAgIHJldHVybjsKICAgIH0qLwogICAgY29uc3QgZGF0YSA9IGZzLnJlYWRGaWxlU3luYyhmaWxlbmFtZSwgJ3V0Zi04Jyk7CiAgICBjb25zdCBsaW5lcyA9IGRhdGEuc3BsaXQoL1xuL2cpOwogICAgaGlzdG9yeS5zcGxpY2UoMCwgaGlzdG9yeS5sZW5ndGgsIC4uLmxpbmVzKTsKICAgIHJldHVybiAodGhpcy5oaXN0b3J5X2luZGV4ID0gaGlzdG9yeS5sZW5ndGgpOwogIH0KCiAgaGlzdG9yeVNhdmUoZmlsZW5hbWUpIHsKICAgIGZpbGVuYW1lID8/PSB0aGlzLmhpc3RvcnlGaWxlKCk7CiAgICBjb25zdCBsaW5lcyA9IGhpc3RvcnkuZmlsdGVyKGxpbmUgPT4gKGxpbmUgKyAnJykudHJpbSgpICE9ICcnKS5tYXAobGluZSA9PiBsaW5lLnJlcGxhY2UoL1xuL2csICdcXG4nKSk7CiAgICBjb25zdCBkYXRhID0gbGluZXMuam9pbignXG4nKSArICdcbic7CiAgICBsZXQgciA9IGZzLndyaXRlRmlsZVN5bmMoZmlsZW5hbWUsIGRhdGEpOwogICAgY29uc29sZS5sb2coYFdyb3RlICR7cn0gYnl0ZXMgdG8gJyR7ZmlsZW5hbWV9Jy5gKTsKICAgIHJldHVybiBsaW5lcy5sZW5ndGg7CiAgfQoKICBoaXN0b3J5Q2xlYXIoKSB7CiAgICBoaXN0b3J5LnNwbGljZSgwLCBoaXN0b3J5Lmxlbmd0aCk7CiAgICB0aGlzLmhpc3RvcnlfaW5kZXggPSBoaXN0b3J5Lmxlbmd0aDsKICB9CgogIGhpc3RvcnlBZGQoc3RyKSB7CiAgICBjb25zdCBsYXN0ID0gaGlzdG9yeVtoaXN0b3J5Lmxlbmd0aCAtIDFdOwoKICAgIGlmKHN0ciAmJiBzdHIgIT09IGxhc3QpIGhpc3RvcnkucHVzaChzdHIpOwoKICAgIHJldHVybiAodGhpcy5oaXN0b3J5X2luZGV4ID0gaGlzdG9yeS5sZW5ndGgpOwogIH0KCiAgaGlzdG9yeVNlYXJjaChkaXIpIHsKICAgIHZhciBwb3MgPSB0aGlzLmN1cnNvcl9wb3M7CiAgICBmb3IodmFyIGkgPSAxOyBpIDw9IGhpc3RvcnkubGVuZ3RoOyBpKyspIHsKICAgICAgdmFyIGluZGV4ID0gKGhpc3RvcnkubGVuZ3RoICsgaSAqIGRpciArIHRoaXMuaGlzdG9yeV9pbmRleCkgJSBoaXN0b3J5Lmxlbmd0aDsKICAgICAgaWYoaGlzdG9yeVtpbmRleF0uc3Vic3RyaW5nKDAsIHBvcykgPT0gdGhpcy5jbWQuc3Vic3RyaW5nKDAsIHBvcykpIHsKICAgICAgICB0aGlzLmhpc3RvcnlfaW5kZXggPSBpbmRleDsKICAgICAgICB0aGlzLmNtZCA9IGhpc3RvcnlbaW5kZXhdOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgfQogIH0KCiAgaGlzdG9yeVNlYXJjaEJhY2t3YXJkKCkgewogICAgcmV0dXJuIHRoaXMuaGlzdG9yeVNlYXJjaCgtMSk7CiAgfQoKICBoaXN0b3J5U2VhcmNoRm9yd2FyZCgpIHsKICAgIHJldHVybiB0aGlzLmhpc3RvcnlTZWFyY2goMSk7CiAgfQoKICBpbnNlcnQoc3RyKSB7CiAgICBpZihzdHIpIHsKICAgICAgdGhpcy5jbWQgPSB0aGlzLmNtZC5zdWJzdHJpbmcoMCwgdGhpcy5jdXJzb3JfcG9zKSArIHN0ciArIHRoaXMuY21kLnN1YnN0cmluZyh0aGlzLmN1cnNvcl9wb3MpOwogICAgICB0aGlzLmN1cnNvcl9wb3MgKz0gc3RyLmxlbmd0aDsKICAgIH0KICB9CgogIGtpbGxMaW5lKCkgewogICAgdGhpcy5raWxsUmVnaW9uKHRoaXMuY3Vyc29yX3BvcywgdGhpcy5jbWQubGVuZ3RoLCAxKTsKICB9CgogIGtpbGxSZWdpb24oc3RhcnQsIGVuZCwgZGlyKSB7CiAgICB2YXIgcyA9IHRoaXMuY21kLnN1YnN0cmluZyhzdGFydCwgZW5kKTsKICAgIGlmKHRoaXMubGFzdF9mdW4gIT09IHRoaXMua2lsbFJlZ2lvbikgY2xpcF9ib2FyZCA9IHM7CiAgICBlbHNlIGlmKGRpciA8IDApIGNsaXBfYm9hcmQgPSBzICsgY2xpcF9ib2FyZDsKICAgIGVsc2UgY2xpcF9ib2FyZCA9IGNsaXBfYm9hcmQgKyBzOwoKICAgIHRoaXMuY21kID0gdGhpcy5jbWQuc3Vic3RyaW5nKDAsIHN0YXJ0KSArIHRoaXMuY21kLnN1YnN0cmluZyhlbmQpOwogICAgaWYodGhpcy5jdXJzb3JfcG9zID4gZW5kKSB0aGlzLmN1cnNvcl9wb3MgLT0gZW5kIC0gc3RhcnQ7CiAgICBlbHNlIGlmKHRoaXMuY3Vyc29yX3BvcyA+IHN0YXJ0KSB0aGlzLmN1cnNvcl9wb3MgPSBzdGFydDsKICAgIHRoaXMudGhpc19mdW4gPSB0aGlzLmtpbGxSZWdpb247CiAgfQoKICBraWxsV29yZCgpIHsKICAgIHRoaXMua2lsbFJlZ2lvbih0aGlzLmN1cnNvcl9wb3MsIHRoaXMuc2tpcFdvcmRGb3J3YXJkKHRoaXMuY3Vyc29yX3BvcyksIDEpOwogIH0KCiAgbW92ZUN1cnNvcihkZWx0YSkgewogICAgdmFyIGksCiAgICAgIGwgPSBudWxsOwogICAgaWYoZGVsdGEgPiAwKSB7CiAgICAgIHdoaWxlKGRlbHRhICE9IDApIHsKICAgICAgICBpZih0ZXJtX2N1cnNvcl94ID09IHRlcm1fd2lkdGggLSAxKSB7CiAgICAgICAgICBzdGQucHV0cygnXG4nKTsgLyogdHJhbnNsYXRlZCB0byBDUkxGICovCiAgICAgICAgICB0ZXJtX2N1cnNvcl94ID0gMDsKICAgICAgICAgIGRlbHRhLS07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGwgPSBNYXRoLm1pbih0ZXJtX3dpZHRoIC0gMSAtIHRlcm1fY3Vyc29yX3gsIGRlbHRhKTsKICAgICAgICAgIHByaW50Q3NpKGwsICdDJyk7IC8qIHJpZ2h0ICovCiAgICAgICAgICBkZWx0YSAtPSBsOwogICAgICAgICAgdGVybV9jdXJzb3JfeCArPSBsOwogICAgICAgIH0KICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgZGVsdGEgPSAtZGVsdGE7CiAgICAgIHdoaWxlKGRlbHRhICE9IDApIHsKICAgICAgICBpZih0ZXJtX2N1cnNvcl94ID09IDApIHsKICAgICAgICAgIHByaW50Q3NpKDEsICdBJyk7IC8qIHVwICovCiAgICAgICAgICBwcmludENzaSh0ZXJtX3dpZHRoIC0gMSwgJ0MnKTsgLyogcmlnaHQgKi8KICAgICAgICAgIGRlbHRhLS07CiAgICAgICAgICB0ZXJtX2N1cnNvcl94ID0gdGVybV93aWR0aCAtIDE7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGwgPSBNYXRoLm1pbihkZWx0YSwgdGVybV9jdXJzb3JfeCk7CiAgICAgICAgICBwcmludENzaShsLCAnRCcpOyAvKiBsZWZ0ICovCiAgICAgICAgICBkZWx0YSAtPSBsOwogICAgICAgICAgdGVybV9jdXJzb3JfeCAtPSBsOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0KCiAgbmV4dEhpc3RvcnkoKSB7CiAgICBpZih0aGlzLmhpc3RvcnlfaW5kZXggPCBoaXN0b3J5Lmxlbmd0aCAtIDEpIHsKICAgICAgdGhpcy5oaXN0b3J5X2luZGV4Kys7CiAgICAgIHRoaXMuY21kID0gaGlzdG9yeVt0aGlzLmhpc3RvcnlfaW5kZXhdOwogICAgICB0aGlzLmN1cnNvcl9wb3MgPSB0aGlzLmNtZC5sZW5ndGg7CiAgICB9CiAgfQoKICBudW1iZXJUb1N0cmluZyhhLCByYWRpeCkgewogICAgdmFyIHMgPSBudWxsOwogICAgaWYoIWlzRmluaXRlKGEpKSB7CiAgICAgIC8qIE5hTiwgSW5maW5pdGUgKi8KICAgICAgcmV0dXJuIGEudG9TdHJpbmcoKTsKICAgIH0gZWxzZSB7CiAgICAgIGlmKGEgPT0gMCkgewogICAgICAgIGlmKDEgLyBhIDwgMCkgcyA9ICctMCc7CiAgICAgICAgZWxzZSBzID0gJzAnOwogICAgICB9IGVsc2UgewogICAgICAgIGlmKHJhZGl4ID09IDE2ICYmIGEgPT09IE1hdGguZmxvb3IoYSkpIHsKICAgICAgICAgIHZhciBzID0gbnVsbDsKICAgICAgICAgIGlmKGEgPCAwKSB7CiAgICAgICAgICAgIGEgPSAtYTsKICAgICAgICAgICAgcyA9ICctJzsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHMgPSAnJzsKICAgICAgICAgIH0KICAgICAgICAgIHMgKz0gJzB4JyArIGEudG9TdHJpbmcoMTYpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzID0gYS50b1N0cmluZygpOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gczsKICAgIH0KICB9CgogIHByZXZpb3VzSGlzdG9yeSgpIHsKICAgIGlmKHRoaXMuaGlzdG9yeV9pbmRleCA+IDApIHsKICAgICAgaWYodGhpcy5oaXN0b3J5X2luZGV4ID09IGhpc3RvcnkubGVuZ3RoKSB7CiAgICAgICAgaGlzdG9yeS5wdXNoKHRoaXMuY21kKTsKICAgICAgfQogICAgICB0aGlzLmhpc3RvcnlfaW5kZXgtLTsKICAgICAgdGhpcy5jbWQgPSBoaXN0b3J5W3RoaXMuaGlzdG9yeV9pbmRleF07CiAgICAgIHRoaXMuY3Vyc29yX3BvcyA9IHRoaXMuY21kLmxlbmd0aDsKICAgIH0KICB9CgogIHByaW50KGEpIHsKICAgIHZhciBzdGFjayA9IFtdOwoKICAgIGZ1bmN0aW9uIHByaW50UmVjKGEpIHsKICAgICAgdmFyIG4sCiAgICAgICAgaSwKICAgICAgICBrZXlzLAogICAgICAgIGtleSwKICAgICAgICB0eXBlLAogICAgICAgIHMgPSBudWxsOwoKICAgICAgdHlwZSA9IHR5cGVvZiBhOwogICAgICBpZih0eXBlID09PSAnb2JqZWN0JykgewogICAgICAgIGlmKGEgPT09IG51bGwpIHsKICAgICAgICAgIHN0ZC5wdXRzKGEpOwogICAgICAgIH0gZWxzZSBpZihzdGFjay5pbmRleE9mKGEpID49IDApIHsKICAgICAgICAgIHN0ZC5wdXRzKCdbY2lyY3VsYXJdJyk7CiAgICAgICAgfSBlbHNlIGlmKGhhc19qc2NhbGMgJiYgKGEgaW5zdGFuY2VvZiBGcmFjdGlvbiB8fCBhIGluc3RhbmNlb2YgQ29tcGxleCB8fCBhIGluc3RhbmNlb2YgTW9kIHx8IGEgaW5zdGFuY2VvZiBQb2x5bm9taWFsIHx8IGEgaW5zdGFuY2VvZiBQb2x5TW9kIHx8IGEgaW5zdGFuY2VvZiBSYXRpb25hbEZ1bmN0aW9uIHx8IGEgaW5zdGFuY2VvZiBTZXJpZXMpKSB7CiAgICAgICAgICBzdGQucHV0cyhhLnRvU3RyaW5nKCkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGFjay5wdXNoKGEpOwogICAgICAgICAgaWYoQXJyYXkuaXNBcnJheShhKSkgewogICAgICAgICAgICBuID0gYS5sZW5ndGg7CiAgICAgICAgICAgIHN0ZC5wdXRzKCdbICcpOwogICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICBpZihpICE9PSAwKSBzdGQucHV0cygnLCAnKTsKICAgICAgICAgICAgICBpZihpIGluIGEpIHsKICAgICAgICAgICAgICAgIHRoaXMucHJpbnRSZWMoYVtpXSk7CiAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHN0ZC5wdXRzKCc8ZW1wdHk+Jyk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmKGkgPiAyMCkgewogICAgICAgICAgICAgICAgc3RkLnB1dHMoJy4uLicpOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHN0ZC5wdXRzKCcgXScpOwogICAgICAgICAgfSBlbHNlIGlmKE9iamVjdC5fX2dldENsYXNzKGEpID09PSAnUmVnRXhwJykgewogICAgICAgICAgICBzdGQucHV0cyhhLnRvU3RyaW5nKCkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKGEpOwogICAgICAgICAgICBuID0ga2V5cy5sZW5ndGg7CiAgICAgICAgICAgIHN0ZC5wdXRzKCd7ICcpOwogICAgICAgICAgICBmb3IoaSA9IDA7IGkgPCBuOyBpKyspIHsKICAgICAgICAgICAgICBpZihpICE9PSAwKSBzdGQucHV0cygnLCAnKTsKICAgICAgICAgICAgICBrZXkgPSBrZXlzW2ldOwogICAgICAgICAgICAgIHN0ZC5wdXRzKGtleSwgJzogJyk7CiAgICAgICAgICAgICAgdGhpcy5wcmludFJlYyhhW2tleV0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHN0ZC5wdXRzKCcgfScpOwogICAgICAgICAgfQogICAgICAgICAgc3RhY2sucG9wKGEpOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmKHR5cGUgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgcyA9IGEuX19xdW90ZSgpOwogICAgICAgIGlmKHMubGVuZ3RoID4gNzkpIHMgPSBzLnN1YnN0cmluZygwLCA3NSkgKyAnLi4uIic7CiAgICAgICAgc3RkLnB1dHMocyk7CiAgICAgIH0gZWxzZSBpZih0eXBlID09PSAnbnVtYmVyJykgewogICAgICAgIHN0ZC5wdXRzKHRoaXMubnVtYmVyVG9TdHJpbmcoYSwgaGV4X21vZGUgPyAxNiA6IDEwKSk7CiAgICAgIH0gZWxzZSBpZih0eXBlID09PSAnYmlnaW50JykgewogICAgICAgIHN0ZC5wdXRzKHRoaXMuYmlnaW50VG9TdHJpbmcoYSwgaGV4X21vZGUgPyAxNiA6IDEwKSk7CiAgICAgIH0gZWxzZSBpZih0eXBlID09PSAnYmlnZmxvYXQnKSB7CiAgICAgICAgc3RkLnB1dHModGhpcy5iaWdmbG9hdFRvU3RyaW5nKGEsIGhleF9tb2RlID8gMTYgOiAxMCkpOwogICAgICB9IGVsc2UgaWYodHlwZSA9PT0gJ2JpZ2RlY2ltYWwnKSB7CiAgICAgICAgc3RkLnB1dHMoYS50b1N0cmluZygpICsgJ20nKTsKICAgICAgfSBlbHNlIGlmKHR5cGUgPT09ICdzeW1ib2wnKSB7CiAgICAgICAgc3RkLnB1dHMoU3RyaW5nKGEpKTsKICAgICAgfSBlbHNlIGlmKHR5cGUgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICBzdGQucHV0cygnZnVuY3Rpb24gJyArIGEubmFtZSArICcoKScpOwogICAgICB9IGVsc2UgewogICAgICAgIHN0ZC5wdXRzKGEpOwogICAgICB9CiAgICB9CiAgICB0aGlzLnByaW50UmVjKGEpOwogIH0KCiAgcHJpbnRTdGF0dXMoZm4sIHByb21wdCA9IHRydWUpIHsKICAgIGNvbnN0IHNob3cgPSBhcmcgPT4gc3RkLnB1dHMoYXJnKTsKCiAgICBpZihBcnJheS5pc0FycmF5KGZuKSkgewogICAgICBjb25zdCBhcnIgPSBmbjsKICAgICAgZm4gPSBhcnIuam9pbignJyk7CiAgICB9IGVsc2UgaWYodHlwZW9mIGZuICE9ICdmdW5jdGlvbicpIHsKICAgICAgbGV0IHN0ciA9IGZuICsgJyc7CiAgICAgIGlmKCFzdHIuZW5kc1dpdGgoJ1xuJykpIHN0ciArPSAnXG4nOwogICAgICBmbiA9ICgpID0+IHNob3coc3RyKTsKICAgIH0KCiAgICB0aGlzLnJlYWRsaW5lUmVtb3ZlUHJvbXB0KCk7CiAgICBmbigpOwogICAgaWYocHJvbXB0KSB7CiAgICAgIHRoaXMucmVhZGxpbmVSZW1vdmVQcm9tcHQoKTsKICAgICAgdGhpcy5yZWFkbGluZVByaW50UHJvbXB0KCk7CiAgICAgIHN0ZC5vdXQuZmx1c2goKTsKICAgIH0KICB9CgogIHByaW50RnVuY3Rpb24obG9nRm4pIHsKICAgIHJldHVybiAoLi4uYXJncykgPT4gdGhpcy5wcmludFN0YXR1cygoKSA9PiBsb2dGbiguLi5hcmdzKSk7CiAgfQoKICBxdW90ZWRJbnNlcnQoKSB7CiAgICB0aGlzLnF1b3RlX2ZsYWcgPSB0cnVlOwogIH0KCiAgcmVhZGxpbmVIYW5kbGVDbWQoZXhwcikgewogICAgdGhpcy5oYW5kbGVDbWQoZXhwcik7CiAgICB0aGlzLmNtZFJlYWRsaW5lU3RhcnQoKTsKICB9CgogIHJlYWRsaW5lUHJpbnRQcm9tcHQoKSB7CiAgICBzdGQucHV0cyh0aGlzLnByb21wdCk7CiAgICB0ZXJtX2N1cnNvcl94ID0gdWNzTGVuZ3RoKHRoaXMucHJvbXB0KSAlIHRlcm1fd2lkdGg7CiAgICB0aGlzLmxhc3RfY21kID0gJyc7CiAgICB0aGlzLmxhc3RfY3Vyc29yX3BvcyA9IDA7CiAgfQoKICByZWFkbGluZVN0YXJ0KGRlZnN0ciwgY2IpIHsKICAgIHRoaXMuY21kID0gZGVmc3RyIHx8ICcnOwogICAgdGhpcy5jdXJzb3JfcG9zID0gdGhpcy5jbWQubGVuZ3RoOwogICAgdGhpcy5oaXN0b3J5X2luZGV4ID0gaGlzdG9yeS5sZW5ndGg7CiAgICByZWFkbGluZV9jYiA9IGNiOwoKICAgIHRoaXMucHJvbXB0ID0gdGhpcy5wc3RhdGU7CgogICAgaWYodGhpcy5tZXhwcikgewogICAgICB0aGlzLnByb21wdCArPSB0aGlzLmR1cHN0cignICcsIHRoaXMucGxlbiAtIHRoaXMucHJvbXB0Lmxlbmd0aCk7CiAgICAgIHRoaXMucHJvbXB0ICs9IHRoaXMucHMyOwogICAgfSBlbHNlIHsKICAgICAgaWYodGhpcy5zaG93X3RpbWUpIHsKICAgICAgICB2YXIgdCA9IE1hdGgucm91bmQodGhpcy5ldmFsX3RpbWUpICsgJyAnOwogICAgICAgIHRoaXMuZXZhbF90aW1lID0gMDsKICAgICAgICB0ID0gdGhpcy5kdXBzdHIoJzAnLCA1IC0gdC5sZW5ndGgpICsgdDsKICAgICAgICB0aGlzLnByb21wdCArPSB0LnN1YnN0cmluZygwLCB0Lmxlbmd0aCAtIDQpICsgJy4nICsgdC5zdWJzdHJpbmcodC5sZW5ndGggLSA0KTsKICAgICAgfQogICAgICB0aGlzLnBsZW4gPSB0aGlzLnByb21wdC5sZW5ndGg7CiAgICAgIHRoaXMucHJvbXB0ICs9IHRoaXMucHMxOwogICAgfQogICAgdGhpcy5yZWFkbGluZVByaW50UHJvbXB0KCk7CiAgICB0aGlzLnVwZGF0ZSgpOwogICAgcmVhZGxpbmVfc3RhdGUgPSAwOwogIH0KCiAgcmVzZXQoKSB7CiAgICB0aGlzLmNtZCA9ICcnOwogICAgdGhpcy5jdXJzb3JfcG9zID0gMDsKICB9CgogIHJ1blN5bmMoKSB7CiAgICAvL3RoaXMuY21kU3RhcnQobmFtZSk7CgogICAgb3Muc2V0UmVhZEhhbmRsZXIoc3RkLmluLmZpbGVubygpLCAoKSA9PiB0aGlzLnRlcm1SZWFkSGFuZGxlcigpKTsKICAgIHJldHVybiB0aGlzOwogIH0KCiAgc2lnaW50SGFuZGxlcigpIHsKICAgIC8qIHNlbmQgQ3RybC1DIHRvIHJlYWRsaW5lICovCiAgICB0aGlzLmhhbmRsZUJ5dGUoMyk7CiAgfQoKICBza2lwV29yZEJhY2t3YXJkKHBvcykgewogICAgd2hpbGUocG9zID4gMCAmJiAhaXNXb3JkKHRoaXMuY21kLmNoYXJBdChwb3MgLSAxKSkpIHBvcy0tOwogICAgd2hpbGUocG9zID4gMCAmJiBpc1dvcmQodGhpcy5jbWQuY2hhckF0KHBvcyAtIDEpKSkgcG9zLS07CiAgICByZXR1cm4gcG9zOwogIH0KCiAgc2tpcFdvcmRGb3J3YXJkKHBvcykgewogICAgd2hpbGUocG9zIDwgdGhpcy5jbWQubGVuZ3RoICYmICFpc1dvcmQodGhpcy5jbWQuY2hhckF0KHBvcykpKSBwb3MrKzsKICAgIHdoaWxlKHBvcyA8IHRoaXMuY21kLmxlbmd0aCAmJiBpc1dvcmQodGhpcy5jbWQuY2hhckF0KHBvcykpKSBwb3MrKzsKICAgIHJldHVybiBwb3M7CiAgfQoKICB0ZXJtSW5pdCgpIHsKICAgIHZhciB0YWIgPSBudWxsOwogICAgdGVybV9mZCA9IHN0ZC5pbi5maWxlbm8oKTsKCiAgICAvKiBnZXQgdGhlIHRlcm1pbmFsIHNpemUgKi8KICAgIHRlcm1fd2lkdGggPSA4MDsKICAgIGlmKG9zLmlzYXR0eSh0ZXJtX2ZkKSkgewogICAgICBpZihvcy50dHlHZXRXaW5TaXplKSB7CiAgICAgICAgdGFiID0gb3MudHR5R2V0V2luU2l6ZSh0ZXJtX2ZkKTsKICAgICAgICBpZih0YWIpIHRlcm1fd2lkdGggPSB0YWJbMF07CiAgICAgIH0KICAgICAgaWYob3MudHR5U2V0UmF3KSB7CiAgICAgICAgLyogc2V0IHRoZSBUVFkgdG8gcmF3IG1vZGUgKi8KICAgICAgICBvcy50dHlTZXRSYXcodGVybV9mZCk7CiAgICAgIH0KICAgIH0KCiAgICAvKiBpbnN0YWxsIGEgQ3RybC1DIHNpZ25hbCBoYW5kbGVyICovCiAgICBvcy5zaWduYWwob3MuU0lHSU5ULCBhcmcgPT4gdGhpcy5zaWdpbnRIYW5kbGVyKGFyZykpOwoKICAgIC8qIGluc3RhbGwgYSBoYW5kbGVyIHRvIHJlYWQgc3RkaW4gKi8KICAgIHRlcm1fcmVhZF9idWYgPSBuZXcgVWludDhBcnJheSg2NCk7CiAgICBvcy5zZXRSZWFkSGFuZGxlcih0ZXJtX2ZkLCAoKSA9PiB0aGlzLnRlcm1SZWFkSGFuZGxlcigpKTsKICB9CgogIHRlcm1SZWFkSGFuZGxlcigpIHsKICAgIHZhciBsLAogICAgICBpID0gbnVsbDsKICAgIGwgPSBvcy5yZWFkKHRlcm1fZmQsIHRlcm1fcmVhZF9idWYuYnVmZmVyLCAwLCB0ZXJtX3JlYWRfYnVmLmxlbmd0aCk7CiAgICBmb3IoaSA9IDA7IGkgPCBsOyBpKyspIHRoaXMuaGFuZGxlQnl0ZSh0ZXJtX3JlYWRfYnVmW2ldKTsKICB9CgogIHRyYW5zcG9zZUNoYXJzKCkgewogICAgdmFyIHBvcyA9IHRoaXMuY3Vyc29yX3BvczsKICAgIGlmKHRoaXMuY21kLmxlbmd0aCA+IDEgJiYgcG9zID4gMCkgewogICAgICBpZihwb3MgPT0gdGhpcy5jbWQubGVuZ3RoKSBwb3MtLTsKICAgICAgdGhpcy5jbWQgPSB0aGlzLmNtZC5zdWJzdHJpbmcoMCwgcG9zIC0gMSkgKyB0aGlzLmNtZC5zdWJzdHJpbmcocG9zLCBwb3MgKyAxKSArIHRoaXMuY21kLnN1YnN0cmluZyhwb3MgLSAxLCBwb3MpICsgdGhpcy5jbWQuc3Vic3RyaW5nKHBvcyArIDEpOwogICAgICB0aGlzLmN1cnNvcl9wb3MgPSBwb3MgKyAxOwogICAgfQogIH0KCiAgdHJhbnNwb3NlV29yZHMoKSB7CiAgICB2YXIgcDEgPSB0aGlzLnNraXBXb3JkQmFja3dhcmQodGhpcy5jdXJzb3JfcG9zKTsKICAgIHZhciBwMiA9IHRoaXMuc2tpcFdvcmRGb3J3YXJkKHAxKTsKICAgIHZhciBwNCA9IHRoaXMuc2tpcFdvcmRGb3J3YXJkKHRoaXMuY3Vyc29yX3Bvcyk7CiAgICB2YXIgcDMgPSB0aGlzLnNraXBXb3JkQmFja3dhcmQocDQpOwoKICAgIGlmKHAxIDwgcDIgJiYgcDIgPD0gdGhpcy5jdXJzb3JfcG9zICYmIHRoaXMuY3Vyc29yX3BvcyA8PSBwMyAmJiBwMyA8IHA0KSB7CiAgICAgIHRoaXMuY21kID0gdGhpcy5jbWQuc3Vic3RyaW5nKDAsIHAxKSArIHRoaXMuY21kLnN1YnN0cmluZyhwMywgcDQpICsgdGhpcy5jbWQuc3Vic3RyaW5nKHAyLCBwMykgKyB0aGlzLmNtZC5zdWJzdHJpbmcocDEsIHAyKTsKICAgICAgdGhpcy5jdXJzb3JfcG9zID0gcDQ7CiAgICB9CiAgfQoKICB1cGNhc2VXb3JkKCkgewogICAgdmFyIGVuZCA9IHRoaXMuc2tpcFdvcmRGb3J3YXJkKHRoaXMuY3Vyc29yX3Bvcyk7CiAgICB0aGlzLmNtZCA9IHRoaXMuY21kLnN1YnN0cmluZygwLCB0aGlzLmN1cnNvcl9wb3MpICsgdGhpcy5jbWQuc3Vic3RyaW5nKHRoaXMuY3Vyc29yX3BvcywgZW5kKS50b1VwcGVyQ2FzZSgpICsgdGhpcy5jbWQuc3Vic3RyaW5nKGVuZCk7CiAgfQoKICB1cGRhdGUoKSB7CiAgICB2YXIgaSwKICAgICAgY21kX2xlbiA9IG51bGw7CiAgICAvKiB0aGlzLmN1cnNvcl9wb3MgaXMgdGhlIHBvc2l0aW9uIGluIDE2IGJpdCBjaGFyYWN0ZXJzIGluc2lkZSB0aGUKICAgICAgICAgICBVVEYtMTYgc3RyaW5nICd0aGlzLmNtZCcgKi8KICAgIGlmKHRoaXMuY21kICE9IHRoaXMubGFzdF9jbWQpIHsKICAgICAgaWYoIXRoaXMuc2hvd19jb2xvcnMgJiYgdGhpcy5sYXN0X2NtZC5zdWJzdHJpbmcoMCwgdGhpcy5sYXN0X2N1cnNvcl9wb3MpID09IHRoaXMuY21kLnN1YnN0cmluZygwLCB0aGlzLmxhc3RfY3Vyc29yX3BvcykpIHsKICAgICAgICAvKiBvcHRpbWl6ZSBjb21tb24gY2FzZSAqLwogICAgICAgIHN0ZC5wdXRzKHRoaXMuY21kLnN1YnN0cmluZyh0aGlzLmxhc3RfY3Vyc29yX3BvcykpOwogICAgICB9IGVsc2UgewogICAgICAgIC8qIGdvdG8gdGhlIHN0YXJ0IG9mIHRoZSBsaW5lICovCiAgICAgICAgdGhpcy5tb3ZlQ3Vyc29yKC11Y3NMZW5ndGgodGhpcy5sYXN0X2NtZC5zdWJzdHJpbmcoMCwgdGhpcy5sYXN0X2N1cnNvcl9wb3MpKSk7CiAgICAgICAgaWYodGhpcy5zaG93X2NvbG9ycykgewogICAgICAgICAgdmFyIHN0ciA9IHRoaXMubWV4cHIgPyB0aGlzLm1leHByICsgJ1xuJyArIHRoaXMuY21kIDogdGhpcy5jbWQ7CiAgICAgICAgICB2YXIgc3RhcnQgPSBzdHIubGVuZ3RoIC0gdGhpcy5jbWQubGVuZ3RoOwogICAgICAgICAgdmFyIGNvbG9yc3RhdGUgPSB0aGlzLmNvbG9yaXplSnMoc3RyKTsKICAgICAgICAgIHByaW50Q29sb3JUZXh0KHN0ciwgc3RhcnQsIGNvbG9yc3RhdGVbMl0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBzdGQucHV0cyh0aGlzLmNtZCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRlcm1fY3Vyc29yX3ggPSAodGVybV9jdXJzb3JfeCArIHVjc0xlbmd0aCh0aGlzLmNtZCkpICUgdGVybV93aWR0aDsKICAgICAgaWYodGVybV9jdXJzb3JfeCA9PSAwKSB7CiAgICAgICAgLyogc2hvdyB0aGUgY3Vyc29yIG9uIHRoZSBuZXh0IGxpbmUgKi8KICAgICAgICBzdGQucHV0cygnIFx4MDgnKTsKICAgICAgfQogICAgICAvKiByZW1vdmUgdGhlIHRyYWlsaW5nIGNoYXJhY3RlcnMgKi8KICAgICAgc3RkLnB1dHMoJ1x4MWJbSicpOwogICAgICB0aGlzLmxhc3RfY21kID0gdGhpcy5jbWQ7CiAgICAgIHRoaXMubGFzdF9jdXJzb3JfcG9zID0gdGhpcy5jbWQubGVuZ3RoOwogICAgfQogICAgaWYodGhpcy5jdXJzb3JfcG9zID4gdGhpcy5sYXN0X2N1cnNvcl9wb3MpIHsKICAgICAgdGhpcy5tb3ZlQ3Vyc29yKHVjc0xlbmd0aCh0aGlzLmNtZC5zdWJzdHJpbmcodGhpcy5sYXN0X2N1cnNvcl9wb3MsIHRoaXMuY3Vyc29yX3BvcykpKTsKICAgIH0gZWxzZSBpZih0aGlzLmN1cnNvcl9wb3MgPCB0aGlzLmxhc3RfY3Vyc29yX3BvcykgewogICAgICB0aGlzLm1vdmVDdXJzb3IoLXVjc0xlbmd0aCh0aGlzLmNtZC5zdWJzdHJpbmcodGhpcy5jdXJzb3JfcG9zLCB0aGlzLmxhc3RfY3Vyc29yX3BvcykpKTsKICAgIH0KICAgIHRoaXMubGFzdF9jdXJzb3JfcG9zID0gdGhpcy5jdXJzb3JfcG9zOwogICAgc3RkLm91dC5mbHVzaCgpOwogIH0KCiAgeWFuaygpIHsKICAgIHRoaXMuaW5zZXJ0KGNsaXBfYm9hcmQpOwogIH0KfQoKZnVuY3Rpb24gaXNBbHBoYShjKSB7CiAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyAmJiAoKGMgPj0gJ0EnICYmIGMgPD0gJ1onKSB8fCAoYyA+PSAnYScgJiYgYyA8PSAneicpKTsKfQoKZnVuY3Rpb24gaXNEaWdpdChjKSB7CiAgcmV0dXJuIHR5cGVvZiBjID09PSAnc3RyaW5nJyAmJiBjID49ICcwJyAmJiBjIDw9ICc5JzsKfQoKZnVuY3Rpb24gaXNXb3JkKGMpIHsKICByZXR1cm4gdHlwZW9mIGMgPT09ICdzdHJpbmcnICYmIChpc0FscGhhKGMpIHx8IGlzRGlnaXQoYykgfHwgYyA9PSAnXycgfHwgYyA9PSAnJCcpOwp9CgpmdW5jdGlvbiB1Y3NMZW5ndGgoc3RyKSB7CiAgdmFyIGxlbiwKICAgIGMsCiAgICBpLAogICAgc3RyX2xlbiA9IHN0ci5sZW5ndGg7CiAgbGVuID0gMDsKICAvKiB3ZSBuZXZlciBjb3VudCB0aGUgdHJhaWxpbmcgc3Vycm9nYXRlIHRvIGhhdmUgdGhlCiAgICAgICBmb2xsb3dpbmcgcHJvcGVydHk6IHVjc0xlbmd0aChzdHIpID0KICAgICAgIHVjc0xlbmd0aChzdHIuc3Vic3RyaW5nKDAsIGEpKSArIHVjc0xlbmd0aChzdHIuc3Vic3RyaW5nKGEsCiAgICAgICBzdHIubGVuZ3RoKSkgZm9yIDAgPD0gYSA8PSBzdHIubGVuZ3RoICovCiAgZm9yKGkgPSAwOyBpIDwgc3RyX2xlbjsgaSsrKSB7CiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSk7CiAgICBpZihjIDwgMHhkYzAwIHx8IGMgPj0gMHhlMDAwKSBsZW4rKzsKICB9CiAgcmV0dXJuIGxlbjsKfQoKZnVuY3Rpb24gaXNUcmFpbGluZ1N1cnJvZ2F0ZShjKSB7CiAgdmFyIGQgPSBudWxsOwogIGlmKHR5cGVvZiBjICE9PSAnc3RyaW5nJykgcmV0dXJuIGZhbHNlOwogIGQgPSBjLmNvZGVQb2ludEF0KDApOyAvKiBjYW4gYmUgTmFOIGlmIGVtcHR5IHN0cmluZyAqLwogIHJldHVybiBkID49IDB4ZGMwMCAmJiBkIDwgMHhlMDAwOwp9CgpmdW5jdGlvbiBpc0JhbGFuY2VkKGEsIGIpIHsKICBzd2l0Y2ggKGEgKyBiKSB7CiAgICBjYXNlICcoKSc6CiAgICBjYXNlICdbXSc6CiAgICBjYXNlICd7fSc6CiAgICAgIHJldHVybiB0cnVlOwogIH0KICByZXR1cm4gZmFsc2U7Cn0KCmZ1bmN0aW9uIHByaW50Q29sb3JUZXh0KHN0ciwgc3RhcnQsIHN0eWxlX25hbWVzKSB7CiAgdmFyIGksCiAgICBqID0gbnVsbDsKICBmb3IoaiA9IHN0YXJ0OyBqIDwgc3RyLmxlbmd0aDsgKSB7CiAgICB2YXIgc3R5bGUgPSBzdHlsZV9uYW1lc1soaSA9IGopXTsKICAgIHdoaWxlKCsraiA8IHN0ci5sZW5ndGggJiYgc3R5bGVfbmFtZXNbal0gPT0gc3R5bGUpIGNvbnRpbnVlOwogICAgc3RkLnB1dHMoY29sb3JzW3N0eWxlc1tzdHlsZV0gfHwgJ2RlZmF1bHQnXSk7CiAgICBzdGQucHV0cyhzdHIuc3Vic3RyaW5nKGksIGopKTsKICAgIHN0ZC5wdXRzKGNvbG9yc1snbm9uZSddKTsKICB9Cn0KCmZ1bmN0aW9uIHByaW50Q3NpKG4sIGNvZGUpIHsKICBzdGQucHV0cygnXHgxYlsnICsgKG4gIT0gMSA/IG4gOiAnJykgKyBjb2RlKTsKICBzdGQub3V0LmZsdXNoKCk7Cn0KClJFUEwucHJvdG90eXBlLnByaW50Q3NpID0gcHJpbnRDc2k7CgpleHBvcnQgZGVmYXVsdCBSRVBMOwoAAAAAAAAAAF6mAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtj4AAAAAAAC2PgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": " "
					},
					"AgAAAGU+AAAAAAAAZj4AAAAAAAAAAAAAZj4AAAAAAABmPgAAAAAAAAMAAAAgLy8",
					"AQAAAAAAAAABAAAAaD4AAAAAAABlPgAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 393.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/modules",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Sources/plot-cv/quickjs/modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/fs.js",
		"/home/roman/Sources/plot-cv/quickjs/modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/cmake/FindQuickJS.cmake",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Django (Smoothy).tmTheme",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Stark Contrast (rainglow).tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-predicate.h",
		"/home/raven/Sources/plot-cv/quickjs/modules/quickjs-inspect.c",
		"/home/raven/Sources/plot-cv/quickjs/modules/quickjs-misc.c",
		"/home/raven/Sources/plot-cv/quickjs/modules/lib/stack.js",
		"/home/roman/Sources/plot-cv/quickjs/modules/cmake/FindQuickJS.cmake",
		"/home/roman/Sources/plot-cv/quickjs/modules/CMakeLists.txt",
		"/home/raven/Sources/plot-cv/quickjs/modules/quickjs-xml.c",
		"/home/raven/Sources/plot-cv/quickjs/modules/utils.h",
		"/home/raven/Sources/plot-cv/quickjs/modules/utils.c",
		"/home/raven/Sources/plot-cv/quickjs/modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/build/x86_64-linux-gnu/modules/repl.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/repl.js",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-inspect.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-misc.c",
		"/home/roman/Sources/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_predicate.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_misc.js",
		"/home/roman/Sources/plot-cv/quickjs/modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-path.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/utils.h",
		"/home/roman/Sources/plot-cv/quickjs/modules/utils.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-pointer.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/test-repl.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-pointer.h",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-predicate.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/predicate.c",
		"/home/roman/Projects/plot-cv/test-minnet.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-repeater.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/tty.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/base64.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-debugger.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/child-process.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/lib/core-net/pollfd.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/test-apps/test-server.c",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/build/x86_64-linux-gnu/include/libwebsockets/lws-callbacks.h",
		"/home/roman/Projects/plot-cv/quickjs/net/libwebsockets/READMEs/README.coding.md",
		"/home/roman/Projects/plot-cv/quickjs/modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_childprocess.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_pointer.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/stack.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/vector.c",
		"/home/roman/Sources/opencv/modules/core/include/opencv2/core/mat.inl.hpp",
		"/opt/opencv-4.5.0/include/opencv4/opencv2/core/mat.hpp",
		"/home/roman/.config/sublime-text/Packages/User/Themes/TronLegacy.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_qjsm.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/base64.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/lexer.h",
		"/home/roman/Sources/plot-cv/quickjs/modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/defs.cmake",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_parser.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_console.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_stack.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/.clang-format",
		"/home/roman/Projects/plot-cv/quickjs/modules/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_inspect.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/quickjs-lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_op_overloading.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_performance.js",
		"/home/roman/Projects/plot-cv/quickjs/libregexp.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/perf_hooks.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/cmake/functions.cmake",
		"/home/roman/Sources/opencv_contrib/modules/ximgproc/src/fast_line_detector.cpp",
		"/home/roman/Projects/plot-cv/quickjs/modules/iteration.h",
		"/home/roman/Projects/plot-cv/quickjs/modules/property-enumeration.h",
		"/home/roman/Sources/plot-cv/quickjs/modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/property-enumeration.c",
		"/home/roman/Sources/plot-cv/quickjs/modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/ANSI-C-grammar-2011.l",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/Shell-Grammar.l",
		"/home/roman/Projects/plot-cv/quickjs/modules/tests/test_deep.js"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"Ctrl-C",
			"controlC",
			"formatNumber",
			"format",
			"formatWithOptionsInternal",
			"format\\(",
			"format =",
			"format",
			"\"Uint8Array",
			"Uint8Array",
			"Uint",
			"Uint8",
			"COLOR_",
			"readdi",
			"list_for_each",
			"util",
			"\"util",
			"setTimeout",
			"JSObjec",
			"js_iterator_next",
			"iterat",
			"\": ",
			" \\(1\\)",
			"QJSM_LDADD",
			"-static",
			"S[A-Z]*_TARGETS",
			"STATIC_TARGETS",
			"SyscallError",
			"^js_inspec",
			"js_inspect_print",
			"\"compact",
			"depth;",
			"^js_i",
			"js_inspect_prin",
			"INSPECT_IS_COMPACT",
			"compact",
			"opts.com",
			"target_link",
			"location",
			"port.*Location",
			"Location",
			"PropertyDesc",
			"GetOwnProperty\\(",
			"JS_GetOwnProp",
			"getters",
			"JS_PROP_GETSET",
			"JS_GetOwnProperty\\(",
			"JS_GetOwnProperty",
			"JSPropertyDescriptor",
			"JS_GetOwnP",
			"getters",
			"JS_CGETSET_MAGIC_DEF",
			"fs\\.",
			"define",
			"\\.js",
			"EXIT",
			"cmdStart",
			"Type ",
			"Type",
			"controlC",
			"Ctrl-C",
			"handleChar",
			"handleByte",
			"sigintHan",
			"historyLoad",
			"FUNC_GETFD",
			"\"/proc/self/",
			"FUNC_GETROOT",
			"js_misc_proclink",
			"FUNC_GETCWD",
			"breakLength",
			"string_break_newline",
			"FUNC_GETINTERPRETER",
			"FUNC_",
			"js_misc_getcommandline",
			"sigintHandler",
			"handleByte",
			"js_misc_getprototypechain",
			"ret = \\((.*)\\);",
			"errno",
			"get_error",
			"->errno",
			"FUNC_SETEG",
			"FUNC_",
			"JS_NewInt32(ctx, ",
			"errno",
			"JS_Throw",
			"js_global_",
			"JS_HasProperty",
			"ENOENT",
			"js_syscallerror_constructor",
			"js_syscallerror_funcs",
			"JS_OBJECT_DEF",
			"JS_NewUint32",
			"FUNC_GETSID",
			"open\\(",
			"fopen",
			"dbuf_to",
			": {\n      value",
			",\n      configurable: true\n    },",
			"extendArray",
			"18",
			"predicate_nextarg(ctx, &args), predicate_nextarg(ctx, &args)",
			"parens",
			"predicate_dump",
			"\\(null",
			"predicate_dump",
			"INF",
			"PREDICATE_POW",
			"js_predicate_operator_mul_number",
			"METHOD_TOSTRING",
			"js_value_toint64_free",
			"js_predicate_data",
			"predicate_constant",
			"JS_DupValue\\(ctx, argv\\[[0-9]\\]\\)",
			"JS_DupValue\\(ctx, argv\\[[0-9]\\]\\)\\)",
			"js_arguments_at(&args, 0), js_arguments_at(&args, 1))",
			"predicate_nextarg",
			"JS_DupValue(ctx, js_arguments_shift(&args))",
			"predicate_argument(ctx,  js_arguments_shift(&args))",
			"predicate_argument(ctx, js_arguments_shift(&args))",
			"argv\\[1\\]",
			"predicate_argument",
			"predicate_typename",
			"predicate_dump",
			" = [0-9]+",
			"precedence",
			"js_value_types"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			": ",
			"\"",
			"ret = \\1;",
			"->errnum",
			"(",
			"error",
			"JS_NewInt32",
			"",
			",",
			"left, right",
			"predicate_nextarg(ctx, &args)",
			"predicate_nextarg(ctx, &args),predicate_nextarg(ctx, &args))",
			"predicate_argument_shift(ctx, &args)",
			"js_arguments_shift(&args)",
			"",
			"ret = PRECEDENCE_",
			"args",
			"",
			"dbuf",
			": left",
			"pred",
			"args->",
			"r",
			"predicate_value",
			"",
			"'x'",
			"0",
			"\\1this.last_cmd",
			"\\1this.cmd",
			"level",
			"cmd",
			"  ",
			"",
			"\\1this.prompt",
			"",
			" globalThis.",
			"evalAnd",
			"commands",
			"",
			"handlers",
			"events",
			"this.",
			"\\1",
			"listeners",
			"events",
			"\\1",
			"jsm_pending_signals",
			"jsm_module_native",
			"js_pointer_data(ctx, obj)",
			"ShiftPredicate",
			".buf",
			"\\1",
			"file.close",
			"std.open",
			"js_misc_free_arraybuffer",
			"JS_SetPropertyStr",
			"jsm_load_module",
			"",
			"_?",
			"sockets",
			"qjsc_perf_hooks",
			"output->",
			"output",
			"\\1//printf",
			"",
			"sizeSync",
			"CreateOperatorSet",
			"",
			"loc",
			"location",
			"loc->",
			"jsm_load_package_json",
			"tmp",
			"    ",
			"  ",
			"BOOL\\njs_is_",
			"GeneratorPrototype",
			"SetIteratorPrototype",
			"MapIteratorPrototype",
			"hasBuiltIn",
			"hbiTs",
			"sSl",
			"ccAt",
			"formatNumber(",
			"isObject(value) && ",
			"pointer_toarray( ptr, ctx)",
			"moduleStack.size",
			"require('${m}')",
			"globalThis.code ?? 'C'",
			"code",
			"fs.",
			"jsm_load_script",
			"jsm_load_file",
			"require.",
			"dirname",
			"dir",
			"script",
			"this.id",
			"jsm_std_dump_error",
			"if(",
			"",
			")",
			"",
			"break;\n    }\n    \n    case",
			"lexer_continue",
			" property-enumeration.c property-enumeration.h",
			" ",
			"*",
			"jslex",
			"this."
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2150,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/Outline/outline.hidden-tmTheme",
							"current_file": "/home/roman/Projects/plot-cv/quickjs/modules/quickjs-misc.c",
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									28,
									39
								],
								[
									262,
									265
								],
								[
									304,
									307
								],
								[
									690,
									709
								],
								[
									737,
									751
								],
								[
									863,
									877
								],
								[
									1186,
									1198
								],
								[
									1262,
									1278
								],
								[
									1346,
									1379
								],
								[
									3921,
									3930
								],
								[
									4044,
									4054
								],
								[
									4229,
									4250
								],
								[
									4331,
									4350
								],
								[
									4482,
									4506
								],
								[
									4645,
									4657
								],
								[
									4698,
									4710
								],
								[
									4733,
									4750
								],
								[
									5733,
									5745
								],
								[
									5762,
									5782
								],
								[
									5929,
									5956
								],
								[
									7269,
									7288
								],
								[
									8191,
									8212
								],
								[
									8358,
									8378
								],
								[
									8884,
									8906
								],
								[
									9389,
									9412
								],
								[
									10335,
									10354
								],
								[
									11951,
									11976
								],
								[
									12316,
									12332
								],
								[
									12982,
									12999
								],
								[
									13531,
									13552
								],
								[
									14070,
									14092
								],
								[
									14761,
									14786
								],
								[
									15556,
									15581
								],
								[
									16255,
									16284
								],
								[
									16523,
									16539
								],
								[
									17463,
									17479
								],
								[
									18569,
									18594
								],
								[
									19010,
									19024
								],
								[
									19832,
									19847
								],
								[
									20318,
									20331
								],
								[
									20925,
									20937
								],
								[
									21344,
									21356
								],
								[
									21772,
									21792
								],
								[
									22521,
									22541
								],
								[
									22880,
									22899
								],
								[
									23119,
									23131
								],
								[
									25035,
									25052
								],
								[
									25650,
									25668
								],
								[
									26760,
									26780
								],
								[
									27241,
									27262
								],
								[
									27736,
									27751
								],
								[
									28319,
									28339
								],
								[
									28791,
									28803
								],
								[
									29509,
									29524
								],
								[
									31027,
									31052
								],
								[
									31591,
									31616
								],
								[
									32794,
									32808
								],
								[
									37332,
									37344
								],
								[
									38374,
									38388
								],
								[
									38418,
									38432
								]
							],
							"symlist":
							[
								"\tⓂ  _GNU_SOURCE … — macro object",
								"—Ⓜ– max ( ) … — macro ",
								"—Ⓜ– min ( ) … — macro ",
								"—Ⓒ– pcg_state_setseq_64 { … } ; — type",
								"\tⓉ  pcg32_random_t ; — typedef",
								"—Ⓕ– pcg32_random_r ( ) { … } — ",
								"—Ⓕ– pcg32_random ( ) { … } — ",
								"—Ⓕ– pcg32_init_state ( ) { … } — ",
								"—Ⓕ– pcg32_random_bounded_divisionless ( ) { … } — ",
								"—Ⓕ– get_error ( ) { … } — ",
								"—Ⓕ– find_error ( ) { … } — ",
								"—Ⓕ– js_bytecode_free_func ( ) { … } — ",
								"—Ⓕ– js_string_free_func ( ) { … } — ",
								"—Ⓕ– js_arraybuffer_free_func ( ) { … } — ",
								"—Ⓒ– OffsetLength { … } ; — type",
								"\tⓉ  OffsetLength ; — typedef",
								"—Ⓕ– get_offset_length ( ) { … } — ",
								"\tⓉ  SyscallError ; — typedef",
								"—Ⓕ– js_syscallerror_data ( ) { … } — ",
								"—Ⓕ– js_syscallerror_constructor ( ) { … } — ",
								"—Ⓕ– js_syscallerror_new ( ) { … } — ",
								"—Ⓕ– js_syscallerror_throw ( ) { … } — ",
								"—Ⓕ– js_syscallerror_dump ( ) { … } — ",
								"—Ⓕ– js_syscallerror_method ( ) { … } — ",
								"—Ⓕ– js_syscallerror_inspect ( ) { … } — ",
								"—Ⓕ– js_syscallerror_get ( ) { … } — ",
								"—Ⓕ– js_syscallerror_finalizer ( ) { … } — ",
								"—Ⓕ– js_misc_tostring ( ) { … } — ",
								"—Ⓕ– js_misc_topointer ( ) { … } — ",
								"—Ⓕ– js_misc_toarraybuffer ( ) { … } — ",
								"—Ⓕ– js_misc_duparraybuffer ( ) { … } — ",
								"—Ⓕ– js_misc_resizearraybuffer ( ) { … } — ",
								"—Ⓕ– js_misc_concatarraybuffer ( ) { … } — ",
								"—Ⓕ– js_misc_getperformancecounter ( ) { … } — ",
								"—Ⓕ– js_misc_proclink ( ) { … } — ",
								"—Ⓕ– js_misc_procread ( ) { … } — ",
								"—Ⓕ– js_misc_getprototypechain ( ) { … } — ",
								"—Ⓕ– js_misc_hrtime ( ) { … } — ",
								"—Ⓕ– js_misc_fnmatch ( ) { … } — ",
								"—Ⓕ– js_misc_uname ( ) { … } — ",
								"—Ⓕ– js_misc_btoa ( ) { … } — ",
								"—Ⓕ– js_misc_atob ( ) { … } — ",
								"—Ⓕ– js_misc_compile_file ( ) { … } — ",
								"—Ⓕ– js_misc_write_object ( ) { … } — ",
								"—Ⓕ– js_misc_read_object ( ) { … } — ",
								"—Ⓕ– js_misc_getx ( ) { … } — ",
								"—Ⓕ– js_misc_valuetype ( ) { … } — ",
								"—Ⓕ– js_misc_evalbinary ( ) { … } — ",
								"—Ⓕ– js_misc_opcode_array ( ) { … } — ",
								"—Ⓕ– js_misc_opcode_object ( ) { … } — ",
								"—Ⓕ– js_misc_opcodes ( ) { … } — ",
								"—Ⓕ– js_misc_get_bytecode ( ) { … } — ",
								"—Ⓕ– js_misc_atom ( ) { … } — ",
								"—Ⓕ– js_misc_classid ( ) { … } — ",
								"—Ⓕ– js_misc_bitfield_to_array ( ) { … } — ",
								"—Ⓕ– js_misc_array_to_bitfield ( ) { … } — ",
								"—Ⓕ– js_misc_random ( ) { … } — ",
								"—Ⓕ– js_misc_init ( ) { … } — ",
								"\tⓂ  JS_INIT_MODULE … — macro object",
								"\tⓂ  JS_INIT_MODULE … — macro object"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 49.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "quickjs-inspect.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33238,
						"regions":
						{
						},
						"selection":
						[
							[
								5924,
								5924
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2850.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/roman/Sources/plot-cv/quickjs/modules/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40876,
						"regions":
						{
						},
						"selection":
						[
							[
								39349,
								39356
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 24405.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "quickjs-misc.c",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38770,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								38770
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 354.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 36986,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C99/C99.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs-mmap.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3300,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 19434,
						"regions":
						{
						},
						"selection":
						[
							[
								17599,
								17599
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 10876.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "lib/repl.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 42588,
						"regions":
						{
						},
						"selection":
						[
							[
								15974,
								15974
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 8686.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.734840527156,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"",
				"tests/test_qjsm.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"byte.h",
				"lib/byte.h"
			],
			[
				"buffer.h",
				"lib/buffer.h"
			],
			[
				"shell.h",
				"lib/shell.h"
			],
			[
				"mmap_file",
				"lib/stralloc/mmap_filename.c"
			],
			[
				"uffer.h",
				"lib/buffer.h"
			],
			[
				"scan.h",
				"lib/scan.h"
			],
			[
				"stralloc.h",
				"lib/stralloc.h"
			],
			[
				"path.h",
				"lib/path.h"
			],
			[
				"str.h",
				"lib/str.h"
			],
			[
				"scan.",
				"lib/scan.h"
			],
			[
				"debug_char",
				"src/debug/debug_char.c"
			],
			[
				"source_pop",
				"src/source/source_pop.c"
			],
			[
				"builtin.h",
				"src/builtin.h"
			],
			[
				"debug_node",
				"src/debug/debug_node.c"
			],
			[
				"sig_in",
				"lib/sig_internal.h"
			],
			[
				"term_",
				"src/term/term_attr.c"
			],
			[
				"glob.h",
				"lib/glob.h"
			],
			[
				"source.h",
				"src/source.h"
			],
			[
				"fdtable",
				"src/fdtable.h"
			],
			[
				"fd.h",
				"src/fd.h"
			],
			[
				"eval",
				"src/eval.h"
			],
			[
				"ieee",
				"doc/posix/ieee-p1003.2-d11.2-s3.txt"
			],
			[
				"expand.h",
				"src/expand.h"
			],
			[
				"builtin_dum",
				"src/builtin/builtin_dump.c"
			],
			[
				"h_main",
				"src/sh/sh_main.c"
			],
			[
				"parse_cha",
				"src/parse/parse_chartable.c"
			],
			[
				"debug.h",
				"src/debug.h"
			],
			[
				"exec_c",
				"src/exec/exec_command.c"
			],
			[
				"eval.h",
				"src/eval.h"
			],
			[
				"test-op",
				"test-operators.js"
			],
			[
				"filesys",
				"lib/filesystem.js"
			],
			[
				"repl.",
				"repl.js"
			],
			[
				"test-str",
				"plot-cv/quickjs/modules/test-str0.c"
			],
			[
				"property-en",
				"plot-cv/quickjs/modules/property-enumeration.h"
			],
			[
				"cutil",
				"plot-cv/quickjs/cutils.c"
			],
			[
				"test-libre",
				"plot-cv/quickjs/modules/test-libregexp.c"
			],
			[
				"clang-as",
				"plot-cv/clang-ast.js"
			],
			[
				"repl",
				"plot-cv/repl.js"
			],
			[
				"consoleS",
				"plot-cv/lib/consoleSetup.js"
			],
			[
				"test-ed",
				"plot-cv/test-editline.js"
			],
			[
				"gl.js",
				"plot-cv/gl.js"
			],
			[
				"editline",
				"plot-cv/editline.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 251.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
