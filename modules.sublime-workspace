{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"JS_",
				"JS_ThrowTypeError"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_SetP",
				"JS_SetPropertyStr"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"JS_Get",
				"JS_GetArrayBuffer"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Throw",
				"JS_ThrowOutOfMemory"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"js_sys",
				"js_syscallerror_get"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"js_",
				"js_sockaddr_class_id"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"get",
				"getOwnPropertyNames"
			],
			[
				"JS_Thr",
				"JS_ThrowInternalError"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			],
			[
				"js_archive",
				"js_archiveentry_data"
			],
			[
				"ARC",
				"ARCHIVE_METHOD_READ"
			],
			[
				"CMAKE_CURREN",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"getCommand",
				"getCommandExecutable"
			],
			[
				"SYS",
				"SYSCALLERROR_ERRNO"
			],
			[
				"SYSCALL",
				"SYSCALLERROR_SYSCALL"
			],
			[
				"FUNC_",
				"FUNC_GETUID"
			],
			[
				"predi",
				"predicates"
			],
			[
				"int64_t",
				"uint64_t"
			],
			[
				"PRECEDENCE_LOG",
				"PRECEDENCE_LOGICAL_NOT"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_set_to",
				"js_set_tostringtag_value"
			],
			[
				"Predicate",
				"PredicateOperatorSet"
			],
			[
				"Predi",
				"PredicateOperatorSet"
			],
			[
				"JS_P",
				"JS_PROP_CONFIGURABLE"
			],
			[
				"operat",
				"operators_set"
			],
			[
				"break",
				"stringBreakNewline"
			],
			[
				"define",
				"defineProperty"
			],
			[
				"Event",
				"EventEmitter"
			],
			[
				"sy",
				"syntaxerror_ctor"
			],
			[
				"child_pr",
				"child_process_proto"
			],
			[
				"targtet_",
				"target_compile_definitions"
			],
			[
				"jsm_module",
				"jsm_module_loader_so"
			],
			[
				"base",
				"base_name"
			],
			[
				"ATOM",
				"ATOM_TO_VALUE"
			],
			[
				"prop",
				"propenum_tab"
			],
			[
				"js_loca",
				"js_location_data"
			],
			[
				"loca",
				"location_proto"
			],
			[
				"HAVE_QUI",
				"HAVE_QUICKJS_LIBRARY"
			],
			[
				"jsm_load",
				"jsm_load_packages_json"
			],
			[
				"js_sy",
				"js_syntaxerror_class_id"
			],
			[
				"synta",
				"syntaxerror_proto"
			],
			[
				"property_",
				"property_enumeration_key"
			],
			[
				"jsm_mo",
				"jsm_module_loader_path"
			],
			[
				"inspe",
				"inspect_custom_node"
			],
			[
				"inspect",
				"inspect_custom_node"
			],
			[
				"property",
				"property_enumeration_circular"
			],
			[
				"Reg",
				"RegExpCompare"
			],
			[
				"property_enum",
				"property_enumeration_length"
			],
			[
				"Opera",
				"OperatorsObjects"
			],
			[
				"else",
				"elseif"
			],
			[
				"ABC",
				"ABCDEF"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "A sample Markdown document\nText Formatting\nLinks and References\nLists\nTables\nCode Blocks\n  fibo(n)\n-89,6 +89,12\nCriticMarkup\nReference Definitions\n[^1]: This is a footnote definition [links]: https://example.com/index.html\n[sample image]: https://example.com/sample.png",
			"settings":
			{
				"buffer_size": 269,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					196,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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"
				],
				[
					197,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
						"symkeys":
						[
							[
								70,
								78
							],
							[
								119,
								124
							],
							[
								177,
								190
							],
							[
								576,
								592
							],
							[
								1182,
								1193
							],
							[
								1455,
								1469
							],
							[
								1620,
								1638
							],
							[
								1766,
								1779
							],
							[
								2415,
								2433
							],
							[
								3032,
								3047
							],
							[
								3337,
								3348
							],
							[
								3797,
								3808
							],
							[
								3905,
								3917
							],
							[
								4067,
								4076
							],
							[
								4487,
								4499
							],
							[
								6940,
								6951
							],
							[
								7165,
								7177
							],
							[
								8024,
								8040
							],
							[
								8197,
								8214
							],
							[
								8359,
								8374
							],
							[
								8570,
								8584
							],
							[
								10283,
								10296
							],
							[
								10447,
								10462
							],
							[
								11009,
								11018
							],
							[
								11196,
								11215
							],
							[
								11413,
								11432
							],
							[
								11628,
								11642
							],
							[
								11975,
								11987
							],
							[
								12096,
								12101
							],
							[
								12129,
								12142
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉPATH_MAX‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉlstat‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉpath_absolute‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_absolute_db‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_append‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_canonical‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_canonical_buf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_collapse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_common_prefix‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_components‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_concat‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_exists‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_extname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_find‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_getcwd‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_gethome‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_absolute‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_directory‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_symlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_normalize‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_relative‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_relative_b‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_root‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_skip_component‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_skip_separator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉ__path_dirname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_dirname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉpath_readlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AQAAAAAAAAAAAAAAiAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					198,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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"
				],
				[
					199,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
						"symkeys":
						[
							[
								70,
								78
							],
							[
								119,
								124
							],
							[
								177,
								190
							],
							[
								576,
								592
							],
							[
								1182,
								1193
							],
							[
								1455,
								1469
							],
							[
								1620,
								1638
							],
							[
								1766,
								1779
							],
							[
								2415,
								2433
							],
							[
								3032,
								3047
							],
							[
								3337,
								3348
							],
							[
								3797,
								3808
							],
							[
								3905,
								3917
							],
							[
								4067,
								4076
							],
							[
								4487,
								4499
							],
							[
								6940,
								6951
							],
							[
								7165,
								7177
							],
							[
								8024,
								8040
							],
							[
								8197,
								8214
							],
							[
								8359,
								8374
							],
							[
								8570,
								8584
							],
							[
								10283,
								10296
							],
							[
								10447,
								10462
							],
							[
								11009,
								11018
							],
							[
								11196,
								11215
							],
							[
								11413,
								11432
							],
							[
								11628,
								11642
							],
							[
								11975,
								11987
							],
							[
								12096,
								12101
							],
							[
								12129,
								12142
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉPATH_MAX‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉlstat‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉpath_absolute‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_absolute_db‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_append‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_canonical‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_canonical_buf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_collapse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_common_prefix‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_components‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_concat‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_exists‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_extname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_find‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_getcwd‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_gethome‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_absolute‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_directory‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_symlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_normalize‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_relative‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_relative_b‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_root‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_skip_component‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_skip_separator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉ__path_dirname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_dirname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉpath_readlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AQAAAAAAAAAAAAAAiAQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					200,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
						"symkeys":
						[
							[
								70,
								78
							],
							[
								119,
								124
							],
							[
								177,
								190
							],
							[
								576,
								592
							],
							[
								1182,
								1193
							],
							[
								1455,
								1469
							],
							[
								1620,
								1638
							],
							[
								1766,
								1779
							],
							[
								2415,
								2433
							],
							[
								3032,
								3047
							],
							[
								3337,
								3348
							],
							[
								3797,
								3808
							],
							[
								3905,
								3917
							],
							[
								4067,
								4076
							],
							[
								4487,
								4499
							],
							[
								6940,
								6951
							],
							[
								7150,
								7162
							],
							[
								8009,
								8025
							],
							[
								8182,
								8199
							],
							[
								8344,
								8359
							],
							[
								8555,
								8569
							],
							[
								10268,
								10281
							],
							[
								10432,
								10447
							],
							[
								10994,
								11003
							],
							[
								11181,
								11200
							],
							[
								11398,
								11417
							],
							[
								11613,
								11627
							],
							[
								11960,
								11972
							],
							[
								12081,
								12086
							],
							[
								12114,
								12127
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉPATH_MAX‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉlstat‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉpath_absolute‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_absolute_db‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_append‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_canonical‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_canonical_buf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_collapse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_common_prefix‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_components‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_concat‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_exists‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_extname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_find‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_fnmatch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_getcwd‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_gethome‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_absolute‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_directory‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_is_symlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_normalize‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_relative‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_relative_b‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_root‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_skip_component‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_skip_separator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉ__path_dirname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉpath_dirname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉpath_readlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACoBQAAICDik4IgIFBBVEhfTUFYIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBsc3RhdCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrvigJMgcGF0aF9hYnNvbHV0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfYWJzb2x1dGVfZGIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX2FwcGVuZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfY2Fub25pY2FsICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGF0aF9jYW5vbmljYWxfYnVmICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGF0aF9jb2xsYXBzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfY29tbW9uX3ByZWZpeCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfY29tcG9uZW50cyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfY29uY2F0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGF0aF9leGlzdHMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX2V4dG5hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX2ZpbmQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX2ZubWF0Y2ggKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX2dldGN3ZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfZ2V0aG9tZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfaXNfYWJzb2x1dGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX2lzX2RpcmVjdG9yeSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfaXNfc3ltbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfbm9ybWFsaXplICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgcGF0aF9yZWxhdGl2ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfcmVsYXRpdmVfYiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfcm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHBhdGhfc2tpcF9jb21wb25lbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX3NraXBfc2VwYXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgX19wYXRoX2Rpcm5hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBwYXRoX2Rpcm5hbWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pOCICBTVEFSVCDigKYg4oCUIG1hY3JvIG9iamVjdArigJTikrvigJMgcGF0aF9yZWFkbGluayAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24AAAAAAAAAAIgEAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					201,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"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"
				],
				[
					202,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2825,
								2848
							],
							[
								3253,
								3272
							],
							[
								3928,
								3949
							],
							[
								5443,
								5461
							],
							[
								6654,
								6672
							],
							[
								7426,
								7449
							],
							[
								7835,
								7859
							],
							[
								8256,
								8284
							],
							[
								9169,
								9190
							],
							[
								10405,
								10431
							],
							[
								14029,
								14048
							],
							[
								15621,
								15635
							],
							[
								15665,
								15679
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					203,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					204,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2825,
								2848
							],
							[
								3253,
								3272
							],
							[
								3928,
								3949
							],
							[
								5443,
								5461
							],
							[
								6654,
								6672
							],
							[
								7426,
								7449
							],
							[
								7835,
								7859
							],
							[
								8256,
								8284
							],
							[
								9169,
								9190
							],
							[
								10405,
								10431
							],
							[
								14029,
								14048
							],
							[
								15621,
								15635
							],
							[
								15665,
								15679
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					205,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					206,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2825,
								2848
							],
							[
								3253,
								3272
							],
							[
								3928,
								3949
							],
							[
								5443,
								5461
							],
							[
								6654,
								6672
							],
							[
								7426,
								7449
							],
							[
								7835,
								7859
							],
							[
								8256,
								8284
							],
							[
								9169,
								9190
							],
							[
								10405,
								10431
							],
							[
								14029,
								14048
							],
							[
								15621,
								15635
							],
							[
								15665,
								15679
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					207,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2825,
								2848
							],
							[
								3253,
								3272
							],
							[
								3928,
								3949
							],
							[
								5443,
								5461
							],
							[
								6654,
								6672
							],
							[
								7426,
								7449
							],
							[
								7835,
								7859
							],
							[
								8256,
								8284
							],
							[
								9169,
								9190
							],
							[
								10409,
								10435
							],
							[
								14033,
								14052
							],
							[
								15625,
								15639
							],
							[
								15669,
								15683
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					208,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					209,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2825,
								2848
							],
							[
								3253,
								3272
							],
							[
								3928,
								3949
							],
							[
								5443,
								5461
							],
							[
								6654,
								6672
							],
							[
								7426,
								7449
							],
							[
								7835,
								7859
							],
							[
								8256,
								8284
							],
							[
								9169,
								9190
							],
							[
								10409,
								10435
							],
							[
								14033,
								14052
							],
							[
								15625,
								15639
							],
							[
								15669,
								15683
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					210,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2825,
								2848
							],
							[
								3253,
								3272
							],
							[
								3928,
								3949
							],
							[
								5443,
								5461
							],
							[
								6654,
								6672
							],
							[
								7426,
								7449
							],
							[
								7835,
								7859
							],
							[
								8256,
								8284
							],
							[
								9171,
								9192
							],
							[
								10411,
								10437
							],
							[
								14035,
								14054
							],
							[
								15627,
								15641
							],
							[
								15671,
								15685
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					211,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					212,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2825,
								2848
							],
							[
								3253,
								3272
							],
							[
								3928,
								3949
							],
							[
								5443,
								5461
							],
							[
								6654,
								6672
							],
							[
								7426,
								7449
							],
							[
								7835,
								7859
							],
							[
								8256,
								8284
							],
							[
								9171,
								9192
							],
							[
								10411,
								10437
							],
							[
								14035,
								14054
							],
							[
								15627,
								15641
							],
							[
								15671,
								15685
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					213,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2827,
								2850
							],
							[
								3255,
								3274
							],
							[
								3930,
								3951
							],
							[
								5445,
								5463
							],
							[
								6656,
								6674
							],
							[
								7428,
								7451
							],
							[
								7837,
								7861
							],
							[
								8258,
								8286
							],
							[
								9173,
								9194
							],
							[
								10413,
								10439
							],
							[
								14037,
								14056
							],
							[
								15629,
								15643
							],
							[
								15673,
								15687
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					214,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13621,
								13632
							],
							[
								14223,
								14239
							],
							[
								15418,
								15430
							],
							[
								16188,
								16199
							],
							[
								16383,
								16397
							],
							[
								16427,
								16441
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					215,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					216,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13621,
								13632
							],
							[
								14223,
								14239
							],
							[
								15418,
								15430
							],
							[
								16188,
								16199
							],
							[
								16383,
								16397
							],
							[
								16427,
								16441
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					217,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13628,
								13639
							],
							[
								14230,
								14246
							],
							[
								15425,
								15437
							],
							[
								16195,
								16206
							],
							[
								16390,
								16404
							],
							[
								16434,
								16448
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					218,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					219,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13628,
								13639
							],
							[
								14230,
								14246
							],
							[
								15425,
								15437
							],
							[
								16195,
								16206
							],
							[
								16390,
								16404
							],
							[
								16434,
								16448
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					220,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13641,
								13652
							],
							[
								14243,
								14259
							],
							[
								15438,
								15450
							],
							[
								16208,
								16219
							],
							[
								16403,
								16417
							],
							[
								16447,
								16461
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"BAAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA3wUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8HAAAgIOKSoSAganNfaW5zcGVjdF90b3N0cmluZyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDik4IgIFdTIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBTVEFSVCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgRU5EIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBRVU9URSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgQ0xPU0Ug4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVRVUFMIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBTUEVDSUFMIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgQkFDS1NMQVNIIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBRVUVTVElPTiDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgRVhDTEFNIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBIWVBIRU4g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4kgIE91dHB1dFZhbHVlIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIGNoYXJhY3Rlcl9jbGFzc2VzX2luaXQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKTguKAkyBQVVNIICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBQT1AgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIEFERCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgVFJVTkMgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIE5FWFQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFNLSVAgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFNLSVBfVU5USUwgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFNLSVBfV1MgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIENIQVJfSVMgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIGZpbmRfdGFnICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX251bV9jaGlsZHJlbiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9zZXRfYXR0cl92YWx1ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9zZXRfYXR0cl9ieXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9hdHRyaWJ1dGVzICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX2luZGVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9zdHJpbmcgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfdGV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2Nsb3NlX2VsZW1lbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfZW51bWVyYXRpb25fbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF9wYXJzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF9yZWFkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfeG1sX3dyaXRlX29iaiAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAADfBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					221,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					222,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13641,
								13652
							],
							[
								14243,
								14259
							],
							[
								15438,
								15450
							],
							[
								16208,
								16219
							],
							[
								16403,
								16417
							],
							[
								16447,
								16461
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					223,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13651,
								13662
							],
							[
								14253,
								14269
							],
							[
								15448,
								15460
							],
							[
								16218,
								16229
							],
							[
								16413,
								16427
							],
							[
								16457,
								16471
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					224,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2827,
								2850
							],
							[
								3255,
								3274
							],
							[
								3930,
								3951
							],
							[
								5445,
								5463
							],
							[
								6656,
								6674
							],
							[
								7428,
								7451
							],
							[
								7837,
								7861
							],
							[
								8258,
								8286
							],
							[
								9173,
								9194
							],
							[
								10413,
								10439
							],
							[
								14037,
								14056
							],
							[
								15629,
								15643
							],
							[
								15673,
								15687
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					225,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					226,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2827,
								2850
							],
							[
								3255,
								3274
							],
							[
								3930,
								3951
							],
							[
								5445,
								5463
							],
							[
								6656,
								6674
							],
							[
								7428,
								7451
							],
							[
								7837,
								7861
							],
							[
								8258,
								8286
							],
							[
								9173,
								9194
							],
							[
								10413,
								10439
							],
							[
								14037,
								14056
							],
							[
								15629,
								15643
							],
							[
								15673,
								15687
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					227,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2831,
								2854
							],
							[
								3259,
								3278
							],
							[
								3934,
								3955
							],
							[
								5449,
								5467
							],
							[
								6660,
								6678
							],
							[
								7432,
								7455
							],
							[
								7841,
								7865
							],
							[
								8262,
								8290
							],
							[
								9177,
								9198
							],
							[
								10417,
								10443
							],
							[
								14041,
								14060
							],
							[
								15633,
								15647
							],
							[
								15677,
								15691
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"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IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX2l0ZXJhdG9yX2NvbnN0cnVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAACfAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					228,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					229,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2831,
								2854
							],
							[
								3259,
								3278
							],
							[
								3934,
								3955
							],
							[
								5449,
								5467
							],
							[
								6660,
								6678
							],
							[
								7432,
								7455
							],
							[
								7841,
								7865
							],
							[
								8262,
								8290
							],
							[
								9177,
								9198
							],
							[
								10417,
								10443
							],
							[
								14041,
								14060
							],
							[
								15633,
								15647
							],
							[
								15677,
								15691
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AQAAAAAAAAAAAAAAnwMAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					230,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2831,
								2854
							],
							[
								3259,
								3278
							],
							[
								3934,
								3955
							],
							[
								5449,
								5467
							],
							[
								6660,
								6678
							],
							[
								7432,
								7455
							],
							[
								7841,
								7865
							],
							[
								8262,
								8290
							],
							[
								9181,
								9202
							],
							[
								10421,
								10447
							],
							[
								14045,
								14064
							],
							[
								15637,
								15651
							],
							[
								15681,
								15695
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"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IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX2l0ZXJhdG9yX2NvbnN0cnVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAACfAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					231,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2831,
								2854
							],
							[
								3259,
								3278
							],
							[
								3934,
								3955
							],
							[
								5449,
								5467
							],
							[
								6660,
								6678
							],
							[
								7432,
								7455
							],
							[
								7841,
								7865
							],
							[
								8262,
								8290
							],
							[
								9181,
								9202
							],
							[
								10421,
								10447
							],
							[
								14045,
								14064
							],
							[
								15637,
								15651
							],
							[
								15681,
								15695
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"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IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX2l0ZXJhdG9yX2NvbnN0cnVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAACfAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					232,
					2,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
						"symkeys":
						[
							[
								555,
								574
							],
							[
								700,
								719
							],
							[
								884,
								904
							],
							[
								1091,
								1101
							],
							[
								1116,
								1133
							],
							[
								1372,
								1391
							],
							[
								1593,
								1609
							],
							[
								1892,
								1918
							],
							[
								2831,
								2854
							],
							[
								3259,
								3278
							],
							[
								3934,
								3955
							],
							[
								5449,
								5467
							],
							[
								6660,
								6678
							],
							[
								7432,
								7455
							],
							[
								7841,
								7865
							],
							[
								8262,
								8290
							],
							[
								9176,
								9197
							],
							[
								10416,
								10442
							],
							[
								14040,
								14059
							],
							[
								15632,
								15646
							],
							[
								15676,
								15690
							]
						],
						"symlist":
						[
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_methods‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_walker_getters‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚í∏‚Äì‚ÄÉtree_iterator_return‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉTreeWalker‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_reset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_setroot‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtree_walker_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_iterator_finalizer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tree_walker_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"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IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaXRlcmF0b3IgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX2l0ZXJhdG9yX2NvbnN0cnVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9uZXh0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9maW5hbGl6ZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKTgiAgSlNfSU5JVF9NT0RVTEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0AAAAAAAAAACfAwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					233,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
						"symkeys":
						[
							[
								190,
								209
							],
							[
								338,
								340
							],
							[
								354,
								359
							],
							[
								373,
								376
							],
							[
								390,
								395
							],
							[
								409,
								414
							],
							[
								428,
								433
							],
							[
								447,
								454
							],
							[
								468,
								473
							],
							[
								487,
								496
							],
							[
								511,
								519
							],
							[
								534,
								540
							],
							[
								555,
								561
							],
							[
								690,
								701
							],
							[
								709,
								731
							],
							[
								1024,
								1028
							],
							[
								1208,
								1211
							],
							[
								1412,
								1415
							],
							[
								1550,
								1555
							],
							[
								1736,
								1740
							],
							[
								1796,
								1800
							],
							[
								1937,
								1947
							],
							[
								1976,
								1983
							],
							[
								2014,
								2021
							],
							[
								2075,
								2083
							],
							[
								2447,
								2463
							],
							[
								2753,
								2771
							],
							[
								3005,
								3023
							],
							[
								3294,
								3314
							],
							[
								4216,
								4232
							],
							[
								4321,
								4337
							],
							[
								4977,
								4991
							],
							[
								5465,
								5482
							],
							[
								6764,
								6781
							],
							[
								7396,
								7416
							],
							[
								8470,
								8482
							],
							[
								13651,
								13662
							],
							[
								14253,
								14269
							],
							[
								15448,
								15460
							],
							[
								16218,
								16229
							],
							[
								16413,
								16427
							],
							[
								16457,
								16471
							]
						],
						"symlist":
						[
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_inspect_tostring‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉWS‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSTART‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEND‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUOTE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉCLOSE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEQUAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSPECIAL‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉBACKSLASH‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉQUESTION‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉEXCLAM‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉHYPHEN‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìâ‚ÄÇ‚ÄÉOutputValue‚Äâ;‚ÄÉ‚Äî‚ÄÉtypedef",
							"‚Äî‚íª‚Äì‚ÄÉcharacter_classes_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉPUSH‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉPOP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉADD‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉTRUNC‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉNEXT‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_UNTIL‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉSKIP_WS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉCHAR_IS‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉfind_tag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_num_children‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_set_attr_bytes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_attributes‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_indent‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_text‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_write_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_close_element‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉxml_enumeration_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_read‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write_obj‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_write‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_xml_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉJS_INIT_MODULE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABjBAAA4oCU4pK44oCTIHRyZWVfd2Fsa2VyX21ldGhvZHMgeyDigKYgfSA7IOKAlCB0eXBlCuKAlOKSuOKAkyB0cmVlX3dhbGtlcl9nZXR0ZXJzIHsg4oCmIH0gOyDigJQgdHlwZQrigJTikrjigJMgdHJlZV9pdGVyYXRvcl9yZXR1cm4geyDigKYgfSA7IOKAlCB0eXBlCiAg4pOJICBUcmVlV2Fsa2VyIDsg4oCUIHR5cGVkZWYK4oCU4pK74oCTIHRyZWVfd2Fsa2VyX3Jlc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgdHJlZV93YWxrZXJfc2V0cm9vdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHRyZWVfd2Fsa2VyX2R1bXAgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc190cmVlX3dhbGtlcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3Rvc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX21ldGhvZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX3NldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfd2Fsa2VyX2l0ZXJhdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV9pdGVyYXRvcl9jb25zdHJ1Y3RvciAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfbmV4dCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3RyZWVfaXRlcmF0b3JfZmluYWxpemVyICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNfdHJlZV93YWxrZXJfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAA3wUAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAAAAAA"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
						],
						"symlist":
						[
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAA/BwAAICDikqEgIGpzX2luc3BlY3RfdG9zdHJpbmcgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pOCICBXUyDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1RBUlQg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVORCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVPVEUg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIENMT1NFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBFUVVBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU1BFQ0lBTCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgU0xBU0gg4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEJBQ0tTTEFTSCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgUVVFU1RJT04g4oCmIOKAlCBtYWNybyBvYmplY3QKICDik4IgIEVYQ0xBTSDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgSFlQSEVOIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOJICBPdXRwdXRWYWx1ZSA7IOKAlCB0eXBlZGVmCuKAlOKSu+KAkyBjaGFyYWN0ZXJfY2xhc3Nlc19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMgUFVTSCAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMgUE9QICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBBREQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIFRSVU5DICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBORVhUICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1VOVElMICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBTS0lQX1dTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBDSEFSX0lTICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSu+KAkyBmaW5kX3RhZyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9udW1fY2hpbGRyZW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfdmFsdWUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfc2V0X2F0dHJfYnl0ZXMgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfYXR0cmlidXRlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF93cml0ZV9pbmRlbnQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfc3RyaW5nICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX3dyaXRlX3RleHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyB4bWxfd3JpdGVfZWxlbWVudCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIHhtbF9jbG9zZV9lbGVtZW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMgeG1sX2VudW1lcmF0aW9uX25leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcGFyc2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfcmVhZCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzX3htbF93cml0ZV9vYmogKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfd3JpdGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc194bWxfaW5pdCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24KICDik4IgIEpTX0lOSVRfTU9EVUxFIOKApiDigJQgbWFjcm8gb2JqZWN0CiAg4pOCICBKU19JTklUX01PRFVMRSDigKYg4oCUIG1hY3JvIG9iamVjdAAAAAAAAAAAAAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAQAAAAAAAFIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					1,
					1,
					"outline_refresh",
					{
						"path": null,
						"symkeys":
						[
							[
								53,
								81
							],
							[
								148,
								166
							],
							[
								1041,
								1064
							],
							[
								1354,
								1362
							],
							[
								1607,
								1616
							],
							[
								1661,
								1675
							],
							[
								2012,
								2028
							],
							[
								2314,
								2326
							],
							[
								2381,
								2396
							],
							[
								2534,
								2558
							],
							[
								2560,
								2636
							],
							[
								2637,
								2683
							]
						],
						"symlist":
						[
							" A sample Markdown document",
							"   Text Formatting",
							"   Links and References",
							"   Lists",
							"   Tables",
							"   Code Blocks",
							"function fibo(n)",
							"-89,6 +89,12",
							"   CriticMarkup",
							"   Reference Definitions",
							"[^1]: This is a footnote definition [links]: https://example.com/index.html",
							"[sample image]: https://example.com/sample.png"
						]
					},
					"AQAAAAAAAAAAAAAADQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"contents": "#include <cutils.h>\n#include \"property-enumeration.h\"\n#include <quickjs.h>\n#include \"utils.h\"\n#include \"vector.h\"\n#include \"buffer-utils.h\"\n#include \"location.h\"\n\n#include <stdint.h>\n\nchar* js_inspect_tostring(JSContext* ctx, JSValueConst value);\n\n/**\n * \\defgroup quickjs-xml QuickJS module: xml - XML parser & printer\n * @{\n */\n#define WS 0x01\n#define START 0x02\n#define END 0x04\n#define QUOTE 0x08\n#define CLOSE 0x10\n#define EQUAL 0x20\n#define SPECIAL 0x40\n#define SLASH 0x80\n#define BACKSLASH 0x100\n#define QUESTION 0x200\n#define EXCLAM 0x400\n#define HYPHEN 0x400\n\nstatic int chars[256] = {0};\n\ntypedef struct {\n  uint32_t idx;\n  JSValue obj;\n  const uint8_t* name;\n  size_t namelen;\n} OutputValue;\n\nvoid\ncharacter_classes_init(int c[256]) {\n  c[' '] = WS;\n  c['\\t'] = WS;\n  c['\\r'] = WS;\n  c['\\n'] = WS;\n  c['!'] = SPECIAL | EXCLAM;\n  c['\"'] = QUOTE;\n  c['/'] = END | SLASH;\n  c['<'] = START;\n  c['='] = EQUAL;\n  c['>'] = END | CLOSE;\n  c['?'] = SPECIAL | QUESTION;\n  c['\\\\'] = BACKSLASH;\n  c['-'] = HYPHEN;\n}\n\n#define yield_push() \\\n  do { \\\n    out = vector_push(&st, ((OutputValue){0, JS_NewArray(ctx), name, namelen})); \\\n    JS_SetPropertyStr(ctx, element, \"children\", out->obj); \\\n  } while(0)\n\n#define yield_pop() \\\n  do { \\\n    if(vector_size(&st, sizeof(OutputValue)) >= 2 ?) { \\\n      vector_pop(&st, sizeof(OutputValue)); \\\n      out = vector_back(&st, sizeof(OutputValue))); \\\n    } \\\n    while(0)\n\n#define yield_next() \\\n  do { \\\n    element = JS_NewObject(ctx); \\\n    JS_SetPropertyUint32(ctx, out->obj, out->idx++, element); \\\n  } while(0)\n\n#define \n\n\n(index) \\\n  do { \\\n    if(index >= 1) { \\\n      vector_shrink(&st, sizeof(OutputValue), index); \\\n      out = vector_back(&st, sizeof(OutputValue)); \\\n    } \\\n  } while(0)\n\n#define parse_getc() ((c = *++ptr), ptr >= end ? done = TRUE : 0)\n#define parse_skip(cond) \\\n  do { \\\n    c = *ptr; \\\n    if(!(cond)) \\\n      break; \\\n    if(++ptr >= end) \\\n      done = TRUE; \\\n  } while(!done)\n\n#define parse_until(cond) parse_skip(!(cond))\n#define parse_skipspace() parse_skip(chars[c] & WS)\n#define parse_is(c, classes) (chars[(c)] & (classes))\n\nstatic int32_t\nfind_tag(Vector* st, const char* name, size_t namelen) {\n  OutputValue* o;\n  int32_t index = vector_size(st, sizeof(OutputValue));\n\n  for(o = vector_back(st, sizeof(OutputValue)); o >= (OutputValue*)vector_begin(st); o--) {\n    --index;\n\n    if(o->namelen == namelen && !strncmp((const char*)o->name, name, namelen))\n      return index;\n  }\n  return -1;\n}\n\nstatic int32_t\nxml_num_children(JSContext* ctx, JSValueConst element) {\n  int64_t num_children = -1;\n  JSValue children = JS_GetPropertyStr(ctx, element, \"children\");\n\n  if(JS_IsArray(ctx, children))\n    num_children = js_array_length(ctx, children);\n\n  JS_FreeValue(ctx, children);\n  return num_children;\n}\n\nstatic void\nxml_set_attr_value(JSContext* ctx, JSValueConst obj, const char* attr, size_t alen, JSValue value) {\n  JSAtom prop;\n  prop = JS_NewAtomLen(ctx, (const char*)attr, alen);\n  JS_SetProperty(ctx, obj, prop, value);\n  JS_FreeAtom(ctx, prop);\n}\n\nstatic void\nxml_set_attr_bytes(JSContext* ctx, JSValueConst obj, const char* attr, size_t alen, const uint8_t* str, size_t slen) {\n  JSValue value;\n  value = JS_NewStringLen(ctx, (const char*)str, slen);\n  xml_set_attr_value(ctx, obj, attr, alen, value);\n  // JS_FreeValue(ctx, value);\n}\n\nstatic void\nxml_write_attributes(JSContext* ctx, JSValueConst attributes, DynBuf* db) {\n  size_t i;\n  PropertyEnumeration props = {0};\n\n  property_enumeration_init(&props, ctx, JS_DupValue(ctx, attributes), PROPENUM_DEFAULT_FLAGS);\n\n  for(i = 0; i < props.tab_atom_len; i++) {\n    const char *keystr, *valuestr;\n    JSValue value;\n    property_enumeration_setpos(&props, i);\n    keystr = property_enumeration_keystr(&props, ctx);\n    value = property_enumeration_value(&props, ctx);\n    dbuf_putc(db, ' ');\n    dbuf_putstr(db, keystr);\n    if(!(JS_IsBool(value) && JS_ToBool(ctx, value))) {\n      valuestr = property_enumeration_valuestr(&props, ctx);\n      dbuf_putstr(db, \"=\\\"\");\n      dbuf_putstr(db, valuestr);\n      js_cstring_free(ctx, valuestr);\n      dbuf_putc(db, '\"');\n    }\n    js_cstring_free(ctx, keystr);\n    JS_FreeValue(ctx, value);\n  }\n\n  property_enumeration_reset(&props, JS_GetRuntime(ctx));\n}\n\nstatic inline void\nxml_write_indent(DynBuf* db, int32_t depth) {\n  while(depth-- > 0) dbuf_putstr(db, \"  \");\n}\n\nstatic void\nxml_write_string(JSContext* ctx, const char* textStr, size_t textLen, DynBuf* db, int32_t depth) {\n  const char* p;\n  for(p = textStr;;) {\n    size_t n;\n\n    while(textLen) {\n      if(byte_chr(\"\\r\\n \\t\", 4, *p) == 4)\n        break;\n      p++;\n      textLen--;\n    }\n    n = byte_chr(p, textLen, '\\n');\n    dbuf_append(db, (const uint8_t*)p, n);\n    if(n < textLen)\n      n++;\n    p += n;\n    textLen -= n;\n\n    /*while(textLen > 0 &&  (p[0] == ' ' ||  p[0] == '\\t')) {\n      textLen--;\n      p++;\n    }    */\n\n    if(textLen == 0)\n      break;\n\n    if(depth > 0) {\n      dbuf_putc(db, '\\n');\n      xml_write_indent(db, depth + 1);\n    }\n  }\n}\n\nstatic void\nxml_write_text(JSContext* ctx, JSValueConst text, DynBuf* db, int32_t depth, BOOL multiline) {\n  const char* textStr;\n  size_t textLen;\n  textStr = JS_ToCStringLen(ctx, &textLen, text);\n  if(multiline)\n    xml_write_indent(db, depth);\n  else {\n    while(db->size > 0 && is_whitespace_char(db->buf[db->size - 1])) db->size--;\n  }\n  xml_write_string(ctx, textStr, textLen, db, multiline ? depth : 0);\n  js_cstring_free(ctx, textStr);\n  if(multiline)\n    dbuf_putc(db, '\\n');\n}\n\nstatic void\nxml_write_element(JSContext* ctx, JSValueConst element, DynBuf* db, int32_t depth) {\n  JSValue attributes = JS_GetPropertyStr(ctx, element, \"attributes\");\n  int32_t num_children;\n  size_t tagLen;\n  const char* tagName = js_get_propertystr_cstringlen(ctx, element, \"tagName\", &tagLen);\n  BOOL isComment;\n\n  if(!tagName || !tagName[0])\n    return;\n\n  assert(tagName);\n  isComment = !strncmp(tagName, \"!--\", 3);\n\n  xml_write_indent(db, depth);\n\n  if(tagName[0])\n    dbuf_putc(db, '<');\n\n  if(isComment) {\n    if(byte_chr(tagName, tagLen, '\\n') < tagLen) {\n      xml_write_string(ctx, tagName, tagLen - 2, db, depth - 1);\n      dbuf_putc(db, '\\n');\n      xml_write_indent(db, depth + 1);\n      dbuf_putc(db, '-');\n      dbuf_putc(db, '-');\n    } else {\n      xml_write_string(ctx, tagName, tagLen, db, depth - 1);\n    }\n  } else if(tagName[0] == '!') {\n    dbuf_putstr(db, tagName);\n  } else {\n    dbuf_putstr(db, tagName);\n    if(JS_IsObject(attributes))\n      xml_write_attributes(ctx, attributes, db);\n  }\n  num_children = xml_num_children(ctx, element);\n\n  if(tagName[0])\n    dbuf_putstr(db, (num_children >= 0 || isComment) ? tagName[0] == '?' ? \"?>\" : \">\" : tagName[0] == '!' ? \">\" : \" />\");\n  dbuf_putc(db, '\\n');\n\n  js_cstring_free(ctx, tagName);\n  JS_FreeValue(ctx, attributes);\n}\n\nstatic void\nxml_close_element(JSContext* ctx, JSValueConst element, DynBuf* db, int32_t depth) {\n  int32_t num_children = xml_num_children(ctx, element);\n\n  if(num_children >= 0) {\n    size_t tagLen;\n    const char* tagName = js_get_propertystr_cstringlen(ctx, element, \"tagName\", &tagLen);\n\n    if(tagName[0] != '?' && tagName[0]) {\n      if(db->size > 0 && db->buf[db->size - 1] == '\\n')\n        xml_write_indent(db, depth);\n\n      dbuf_putstr(db, \"</\");\n      dbuf_append(db, (const uint8_t*)tagName, tagLen);\n      dbuf_putstr(db, \">\");\n      dbuf_putc(db, '\\n');\n    }\n    js_cstring_free(ctx, tagName);\n  }\n}\n\nstatic PropertyEnumeration*\nxml_enumeration_next(Vector* vec, JSContext* ctx, DynBuf* db, int32_t max_depth) {\n  PropertyEnumeration* it;\n  JSValue value = JS_UNDEFINED, children;\n\n  it = vector_back(vec, sizeof(PropertyEnumeration));\n  value = property_enumeration_value(it, ctx);\n\n  if(JS_IsObject(value)) {\n    children = JS_GetPropertyStr(ctx, value, \"children\");\n    JS_FreeValue(ctx, value);\n    if(!JS_IsUndefined(children) && (max_depth == INT32_MAX || vector_size(vec, sizeof(PropertyEnumeration)) < (uint32_t)max_depth)) {\n      if((it = property_enumeration_push(vec, ctx, children, PROPENUM_DEFAULT_FLAGS)))\n        if(property_enumeration_setpos(it, 0))\n          return it;\n    }\n  } else {\n    JS_FreeValue(ctx, value);\n  }\n\n  for(;;) {\n    if(property_enumeration_setpos(it, it->idx + 1))\n      break;\n\n    if((it = property_enumeration_pop(vec, ctx)) == 0)\n      break;\n\n    value = property_enumeration_value(it, ctx);\n    xml_close_element(ctx, value, db, (int32_t)vector_size(vec, sizeof(PropertyEnumeration)) - 1);\n    JS_FreeValue(ctx, value);\n  }\n\n  return it;\n}\n\nstatic JSValue\njs_xml_parse(JSContext* ctx, const uint8_t* buf, size_t len, const char* input_name) {\n  BOOL done = FALSE;\n  const uint8_t *ptr, *end, *start;\n  uint8_t c;\n  OutputValue* out;\n  JSValue ret, element = JS_UNDEFINED;\n  Vector st = VECTOR(ctx);\n  Location loc = {(char*)input_name};\n  ptr = buf;\n  end = buf + len;\n\n  ret = JS_NewArray(ctx);\n\n  out = vector_emplace(&st, sizeof(OutputValue));\n  out->obj = ret;\n  out->idx = 0;\n\n  while(!done) {\n    // parse_skipspace();\n    start = ptr;\n    parse_until(parse_is(c, START));\n\n    if(ptr > start) {\n      size_t len;\n\n      while(start < ptr && is_whitespace_char(*start)) start++;\n\n      len = ptr - start;\n      while(len > 0 && is_whitespace_char(start[len - 1])) len--;\n\n      if(len > 0) {\n        JSValue str = JS_NewStringLen(ctx, (const char*)start, len);\n        JS_SetPropertyUint32(ctx, out->obj, out->idx++, str);\n      }\n    }\n\n    if(done)\n      break;\n\n    if(parse_is(c, START)) {\n      const uint8_t* name;\n      size_t namelen;\n      BOOL closing = FALSE, self_closing = FALSE;\n      parse_getc();\n      if(parse_is(c, SLASH)) {\n        closing = TRUE;\n        parse_getc();\n      }\n      name = ptr;\n      parse_until(parse_is(c, WS | END));\n      namelen = ptr - name;\n\n      if(closing) {\n        int32_t index;\n        parse_skipspace();\n        if(parse_is(c, CLOSE))\n          parse_getc();\n\n        if((index = find_tag(&st, (const char*)name, namelen)) == -1) {\n          JS_FreeValue(ctx, ret);\n          location_count(&loc, (const char*)buf, start - buf);\n          printf(\"mismatch </%.*s> at %s:%u:%u\", (int)namelen, name, loc.file, loc.line, loc.column);\n          ret = JS_ThrowSyntaxError(ctx, \"mismatch </%.*s> at %s:%u:%u\", (int)namelen, name, loc.file, loc.line, loc.column);\n          return ret;\n        }\n\n        // printf(\"end-of [%zd] tagName: %s%.*s\\n\", index - 1, closing ? \"/\" : \"\", namelen, name);\n\n        yield_return(index);\n        continue;\n\n        /* if(out->namelen == namelen && !memcmp(out->name, name, namelen)) {\n           yield_pop();\n           continue;\n         }*/\n      } else {\n        // printf(\"element [%zd] tagName: %s%.*s\\n\", vector_size(&st, sizeof(OutputValue)) - 1, closing ? \"/\" : \"\", namelen, name);\n        /*  printf(\"parent tagName: %.*s\\n\", out->namelen, out->name);*/\n        yield_next();\n\n        if(namelen && (parse_is(name[0], (/*QUESTION | */ EXCLAM))))\n          self_closing = TRUE;\n\n        if(namelen >= 3 && parse_is(start[0], EXCLAM) && parse_is(start[1], HYPHEN) && parse_is(start[2], HYPHEN)) {\n          /*  parse_getc();\n            parse_getc();*/\n          while(!done) {\n            parse_getc();\n            if(end - ptr >= 3 && parse_is(ptr[0], HYPHEN) && parse_is(ptr[1], HYPHEN) && parse_is(ptr[2], CLOSE)) {\n              ptr += 2;\n              break;\n            }\n          }\n          namelen = ptr - name;\n\n        } else if(namelen && parse_is(name[0], EXCLAM)) {\n          parse_until(parse_is(c, CLOSE));\n          namelen = ptr - name;\n        }\n        xml_set_attr_bytes(ctx, element, \"tagName\", 7, name, namelen);\n\n        if(namelen && parse_is(name[0], EXCLAM)) {\n          parse_getc();\n          continue;\n        }\n\n        /* Parse attributes if not a closing tag */\n        const uint8_t *attr, *value;\n        size_t alen, vlen, num_attrs = 0;\n        JSValue attributes = JS_NewObject(ctx);\n        while(!done) {\n          parse_skipspace();\n          if(parse_is(c, END))\n            break;\n          attr = ptr;\n          parse_until(parse_is(c, EQUAL | WS | SPECIAL | CLOSE));\n          if((alen = ptr - attr) == 0)\n            break;\n          if(parse_is(c, WS | CLOSE | SLASH)) {\n            xml_set_attr_value(ctx, attributes, (const char*)attr, alen, JS_NewBool(ctx, TRUE));\n            num_attrs++;\n            continue;\n          }\n          if(parse_is(c, EQUAL)) {\n            parse_getc();\n            if(parse_is(c, QUOTE))\n              parse_getc();\n            value = ptr;\n            parse_until(parse_is(c, QUOTE));\n            vlen = ptr - value;\n            if(parse_is(c, QUOTE))\n              parse_getc();\n            xml_set_attr_bytes(ctx, attributes, (const char*)attr, alen, value, vlen);\n            num_attrs++;\n          }\n        }\n        /*if(num_attrs == 0)\n          JS_FreeValue(ctx, attributes);\n        else*/\n        JS_SetPropertyStr(ctx, element, \"attributes\", attributes);\n\n        if(parse_is(name[0], QUESTION | EXCLAM)) {\n          if(chars[c] == chars[name[0]]) {\n            parse_getc();\n            yield_push();\n          }\n\n        } else if(parse_is(c, SLASH)) {\n          self_closing = TRUE;\n          parse_getc();\n\n        } else if(!self_closing) {\n          /*\n            out = vector_emplace(&st, sizeof(OutputValue));\n               out->obj = JS_NewArray(ctx);\n               out->idx = 0;\n               out->name = name;\n               out->namelen = namelen;\n               JS_SetPropertyStr(ctx, element, \"children\", out->obj);*/\n          yield_push();\n        }\n\n        /*{\n          char* estr = (char*)js_inspect_tostring(ctx, element);\n          printf(\"%03zu element #%i %s\\n\", vector_size(&st, sizeof(OutputValue)), out->idx, estr);\n          js_free(ctx, estr);\n        }*/\n      }\n\n      parse_skipspace();\n      if(parse_is(c, CLOSE))\n        parse_getc();\n    }\n  }\n  return ret;\n}\n\nstatic JSValue\njs_xml_read(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst argv[]) {\n  JSValue ret;\n  InputBuffer input = js_input_chars(ctx, argv[0]);\n  const char* input_name = 0;\n\n  if(input.data == 0 || input.size == 0) {\n    JS_ThrowReferenceError(ctx, \"xml.read(): expecting buffer or string\");\n    return JS_EXCEPTION;\n  }\n\n  if(argc >= 2)\n    input_name = JS_ToCString(ctx, argv[1]);\n\n  ret = js_xml_parse(ctx, input.data, input.size, input_name ? input_name : \"<input>\");\n\n  if(input_name)\n    JS_FreeCString(ctx, input_name);\n\n  input_buffer_free(&input, ctx);\n  return ret;\n}\n\nstatic JSValue\njs_xml_write_obj(JSContext* ctx, JSValueConst obj, int max_depth, DynBuf* output) {\n  Vector enumerations = VECTOR(ctx);\n  PropertyEnumeration* it;\n  JSValue str, value = JS_UNDEFINED;\n\n  it = property_enumeration_push(&enumerations, ctx, JS_DupValue(ctx, obj), PROPENUM_DEFAULT_FLAGS);\n\n  do {\n    int32_t depth = vector_size(&enumerations, sizeof(PropertyEnumeration)) - 1;\n\n    value = property_enumeration_value(it, ctx);\n\n    if(JS_IsString(value))\n      xml_write_text(ctx, value, output, depth, it->tab_atom_len > 1);\n    else if(JS_IsObject(value) && !JS_IsArray(ctx, value))\n      xml_write_element(ctx, value, output, depth);\n\n    JS_FreeValue(ctx, value);\n  } while((it = xml_enumeration_next(&enumerations, ctx, output, max_depth)));\n\n  while(output->size > 0 && (output->buf[output->size - 1] == '\\0' || byte_chr(\"\\r\\n\\t \", 4, output->buf[output->size - 1]) < 4))\n    output->size--;\n  dbuf_putc(output, '\\0');\n\n  str = JS_NewString(ctx, (const char*)output->buf);\n  // str = JS_NewStringLen(ctx, output->buf, output->size);\n\n  vector_foreach_t(&enumerations, it) { property_enumeration_reset(it, JS_GetRuntime(ctx)); }\n  vector_free(&enumerations);\n  return str;\n}\n\nstatic JSValue\njs_xml_write(JSContext* ctx, JSValueConst this_val, int argc, JSValueConst argv[]) {\n  DynBuf output = {0};\n  JSValueConst obj = argc > 0 ? argv[0] : JS_UNDEFINED;\n  JSValue ret, arr = JS_UNDEFINED;\n  int32_t max_depth = INT32_MAX;\n\n  js_dbuf_init(ctx, &output);\n\n  if(argc >= 2)\n    JS_ToInt32(ctx, &max_depth, argv[1]);\n\n  if(!JS_IsArray(ctx, obj)) {\n    arr = JS_NewArray(ctx);\n    JS_SetPropertyUint32(ctx, arr, 0, JS_DupValue(ctx, obj));\n    obj = arr;\n  }\n\n  ret = js_xml_write_obj(ctx, obj, max_depth, &output);\n\n  dbuf_free(&output);\n\n  if(!JS_IsUndefined(arr))\n    JS_FreeValue(ctx, arr);\n\n  return ret;\n}\n\nstatic const JSCFunctionListEntry js_xml_funcs[] = {\n    JS_CFUNC_DEF(\"read\", 1, js_xml_read),\n    JS_CFUNC_DEF(\"write\", 2, js_xml_write),\n};\n\nstatic int\njs_xml_init(JSContext* ctx, JSModuleDef* m) {\n\n  character_classes_init(chars);\n\n  return JS_SetModuleExportList(ctx, m, js_xml_funcs, countof(js_xml_funcs));\n}\n\n#ifdef JS_SHARED_LIBRARY\n#define JS_INIT_MODULE js_init_module\n#else\n#define JS_INIT_MODULE js_init_module_xml\n#endif\n\nVISIBLE JSModuleDef*\nJS_INIT_MODULE(JSContext* ctx, const char* module_name) {\n  JSModuleDef* m;\n  m = JS_NewCModule(ctx, module_name, js_xml_init);\n  if(!m)\n    return NULL;\n  JS_AddModuleExportList(ctx, m, js_xml_funcs, countof(js_xml_funcs));\n  return m;\n}\n",
			"file": "quickjs-xml.c",
			"file_size": 16991,
			"file_write_time": 132843502083331369,
			"settings":
			{
				"buffer_size": 16982,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					588,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEHAAAAAAAAmwcAAAAAAAAAAAAAAADwvw"
				],
				[
					589,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEHAAAAAAAAmwcAAAAAAAAAAAAAAADwvw"
				],
				[
					590,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEHAAAAAAAAmwcAAAAAAAAAAAAAAADwvw"
				],
				[
					591,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEHAAAAAAAAmwcAAAAAAAAAAAAAAADwvw"
				],
				[
					592,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJEHAAAAAAAAmwcAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"BAAAACEGAAAAAAAAIgYAAAAAAAAAAAAAIgYAAAAAAAAiBgAAAAAAAAwAAAB5aWVsZF9yZXR1cm4iBgAAAAAAACMGAAAAAAAAAAAAACMGAAAAAAAAJAYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAhBgAAAAAAAC0GAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"contents": "---\nmeta:\n    author: Jon Doe\n    topic: Samples\n---\n# A sample Markdown document\n\nThis is a sample document so you can preview the color schemes.\n\n## Text Formatting\n\nMarkdown supports _italics_, __bold__, and ___bold italics___ style using underscores.\n\nMarkdown supports *italics*, **bold**, and ***bold italics*** style using asterisks.\n\nThere are also inline styles like `inline code in monospace font` and ~~strikethrough style~~.\n\n__There may be ~~strikethroughed text~~ or `code text` inside bold text.__\n\n_And There may be ~~strikethroughed text~~ or `code text` inside italic text._\n\n> __Here is some quotation__. Lorem ~~ipsum~~ dolor sit amet, consectetur  \n> adipisicing elit, *sed* do eiusmod tempor incididunt ut labore et\n> dolore magna aliqua. Ut enim <b>ad</b> minim <kbd>veniam</kbd>, quis nostrud exercitation.\n> \n> <code>\n>   code block\n> </code>\n\nInline <kbd>key</kbd> or ~~<kbd>key</kbd>~~ other <b>bold html</b> tags.\n\n<table align=\"center\">\n    <tr width=\"85%\">\n        <td>column&nbsp;text</td>\n    </tr>\n</table>\n\n## Links and References\n\nTo reference something from a URL, [Named Links][links],\n[Inline links](https://example.com/index.html \"Description\") and direct link like <https://example.com/>\nare of great help. Sometimes ![A picture][sample image] is worth a thousand words.\n\n---\n\nThis [[SamplePage]] is a wiki link.\n\n## Lists\n\nThere are two types of lists, ordered and unordered.\n\n1. Item 1 \n   <kbd>key</kbd>\n2. Item 2\n3. Item 3\n\n1) Item 1\n2) Item 2\n3) Item 3\n\n* Item A\n    - Sub list\n        + Sub sub list\n        + Sub sub list 2\n    - Sub list 2\n* Item B\n* Item C\n\n## Tables\n\nCol 1 | Col 2\n-----:|-------\nwhat  | else\n\n## Code Blocks\n\nAnything indented more than 3 characters is treated as raw code block.\n\n    function fibo(n) {\n        fibo.mem = fibo.mem || []; // I am some comment\n        return fibo.mem[n] || fibo.mem[n] = n <= 1 ? 1 : fibo(n - 1) + fibo(n - 2);\n\nFenced code blocks support syntax highlighting and are wrapped in triple backticks.\n\n```javascript\nfunction fibo(n) {\n    fibo.mem = fibo.mem || []; // I am some comment\n    return fibo.mem[n] || fibo.mem[n] = n <= 1 ? 1 : fibo(n - 1) + fibo(n - 2);\n}\n```\n\n```diff\ndiff --git a/schemes/Preview.md b/schemes/Preview.md\nindex 3d4b1fe..a85a22a 100644\n--- a/schemes/Preview.md\n+++ b/schemes/Preview.md\n@@ -89,6 +89,12 @@ function fibo(n) {\n \n-## Deleted\n+## Inserted\n```\n\n## CriticMarkup\n\nThis is {++ inserted ++} and {-- deleted --} or {== highlighted ==}{>> comment <<} text.\n\nWe can also {~~ substitute ~> something ~~}.\n\n## Reference Definitions\n\n[^1]: This is a footnote definition\n\n[links]: https://example.com/index.html\n[sample image]: https://example.com/sample.png\n",
			"settings":
			{
				"buffer_size": 2684,
				"line_ending": "Unix",
				"name": "A sample Markdown document",
				"read_only": true,
				"scratch": true
			},
			"undo_stack":
			[
				[
					1,
					1,
					"append",
					{
						"characters": "---\nmeta:\n    author: Jon Doe\n    topic: Samples\n---\n# A sample Markdown document\n\nThis is a sample document so you can preview the color schemes.\n\n## Text Formatting\n\nMarkdown supports _italics_, __bold__, and ___bold italics___ style using underscores.\n\nMarkdown supports *italics*, **bold**, and ***bold italics*** style using asterisks.\n\nThere are also inline styles like `inline code in monospace font` and ~~strikethrough style~~.\n\n__There may be ~~strikethroughed text~~ or `code text` inside bold text.__\n\n_And There may be ~~strikethroughed text~~ or `code text` inside italic text._\n\n> __Here is some quotation__. Lorem ~~ipsum~~ dolor sit amet, consectetur  \n> adipisicing elit, *sed* do eiusmod tempor incididunt ut labore et\n> dolore magna aliqua. Ut enim <b>ad</b> minim <kbd>veniam</kbd>, quis nostrud exercitation.\n> \n> <code>\n>   code block\n> </code>\n\nInline <kbd>key</kbd> or ~~<kbd>key</kbd>~~ other <b>bold html</b> tags.\n\n<table align=\"center\">\n    <tr width=\"85%\">\n        <td>column&nbsp;text</td>\n    </tr>\n</table>\n\n## Links and References\n\nTo reference something from a URL, [Named Links][links],\n[Inline links](https://example.com/index.html \"Description\") and direct link like <https://example.com/>\nare of great help. Sometimes ![A picture][sample image] is worth a thousand words.\n\n---\n\nThis [[SamplePage]] is a wiki link.\n\n## Lists\n\nThere are two types of lists, ordered and unordered.\n\n1. Item 1 \n   <kbd>key</kbd>\n2. Item 2\n3. Item 3\n\n1) Item 1\n2) Item 2\n3) Item 3\n\n* Item A\n    - Sub list\n        + Sub sub list\n        + Sub sub list 2\n    - Sub list 2\n* Item B\n* Item C\n\n## Tables\n\nCol 1 | Col 2\n-----:|-------\nwhat  | else\n\n## Code Blocks\n\nAnything indented more than 3 characters is treated as raw code block.\n\n    function fibo(n) {\n        fibo.mem = fibo.mem || []; // I am some comment\n        return fibo.mem[n] || fibo.mem[n] = n <= 1 ? 1 : fibo(n - 1) + fibo(n - 2);\n\nFenced code blocks support syntax highlighting and are wrapped in triple backticks.\n\n```javascript\nfunction fibo(n) {\n    fibo.mem = fibo.mem || []; // I am some comment\n    return fibo.mem[n] || fibo.mem[n] = n <= 1 ? 1 : fibo(n - 1) + fibo(n - 2);\n}\n```\n\n```diff\ndiff --git a/schemes/Preview.md b/schemes/Preview.md\nindex 3d4b1fe..a85a22a 100644\n--- a/schemes/Preview.md\n+++ b/schemes/Preview.md\n@@ -89,6 +89,12 @@ function fibo(n) {\n \n-## Deleted\n+## Inserted\n```\n\n## CriticMarkup\n\nThis is {++ inserted ++} and {-- deleted --} or {== highlighted ==}{>> comment <<} text.\n\nWe can also {~~ substitute ~> something ~~}.\n\n## Reference Definitions\n\n[^1]: This is a footnote definition\n\n[links]: https://example.com/index.html\n[sample image]: https://example.com/sample.png\n"
					},
					"AQAAAAAAAAAAAAAAfAoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "utils.c",
			"settings":
			{
				"buffer_size": 60223,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					10,
					1,
					"left_delete",
					null,
					"AQAAAG6mAAAAAAAAbqYAAAAAAAAOAAAAICBzaXplX3QgbGVuOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHymAAAAAAAAbqYAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAMSmAAAAAAAAxKYAAAAAAAAYAAAAICBsZW4gPSBzdHJsZW4obW9kdWxlKTsK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMSmAAAAAAAA3KYAAAAAAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMSmAAAAAAAAxKYAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "path.c",
			"settings":
			{
				"buffer_size": 12614,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					6,
					"left_delete",
					null,
					"BgAAABoHAAAAAAAAGgcAAAAAAAABAAAAZBkHAAAAAAAAGQcAAAAAAAABAAAAbhgHAAAAAAAAGAcAAAAAAAABAAAAZRcHAAAAAAAAFwcAAAAAAAABAAAAKhYHAAAAAAAAFgcAAAAAAAABAAAAIBUHAAAAAAAAFQcAAAAAAAABAAAALA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABsHAAAAAAAAGwcAAAAAAAAAAAAAAADwvw"
				],
				[
					18,
					3,
					"left_delete",
					null,
					"AwAAAGYHAAAAAAAAZgcAAAAAAAAOAAAAZW5kID0gcGF0aCArIG5lBwAAAAAAAGUHAAAAAAAAAQAAACBkBwAAAAAAAGQHAAAAAAAAAQAAACw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGYHAAAAAAAAdAcAAAAAAAAAAAAAAADwvw"
				],
				[
					28,
					1,
					"right_delete",
					null,
					"AQAAADYbAAAAAAAANhsAAAAAAAALAAAAICBjaGFyKiBwOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADYbAAAAAAAAQRsAAAAAAAAAAAAAAAAAAA"
				],
				[
					33,
					4,
					"right_delete",
					null,
					"BAAAAGcbAAAAAAAAZxsAAAAAAAABAAAAcGcbAAAAAAAAZxsAAAAAAAABAAAAIGcbAAAAAAAAZxsAAAAAAAABAAAAPWcbAAAAAAAAZxsAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcbAAAAAAAAZxsAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcbAAAAAAAAZxsAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGcbAAAAAAAAZxsAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "quickjs-tree-walker.c",
			"settings":
			{
				"buffer_size": 16033,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					21,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAAJQkAAAAAAAAlSQAAAAAAAAAAAAAlSQAAAAAAACWJAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJQkAAAAAAAAlCQAAAAAAAAAAAAAAADwvw"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAACUlAAAAAAAAJiUAAAAAAAAAAAAAJiUAAAAAAAAnJQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACUlAAAAAAAAJSUAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAALogAAAAAAAAuyAAAAAAAAAAAAAAuyAAAAAAAAC8IAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALogAAAAAAAAuiAAAAAAAAAAAAAAAADwvw"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "//"
					},
					"AgAAANwHAAAAAAAA3QcAAAAAAAAAAAAA3QcAAAAAAADeBwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwHAAAAAAAA3AcAAAAAAAAAAAAAAADwvw"
				],
				[
					47,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAAD0KAAAAAAAAPwoAAAAAAAAAAAAAOAoAAAAAAAA6CgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADgKAAAAAAAAPQoAAAAAAAAAAAAAAADwvw"
				],
				[
					69,
					1,
					"toggle_comment",
					{
						"block": true
					},
					"AgAAABEjAAAAAAAAEyMAAAAAAAAAAAAADSMAAAAAAAAPIwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA0jAAAAAAAAESMAAAAAAAAAAAAAAADwvw"
				],
				[
					76,
					1,
					"join_lines",
					null,
					"AwAAALshAAAAAAAAuyEAAAAAAAABAAAACrshAAAAAAAAuyEAAAAAAAAFAAAAICAgICC7IQAAAAAAALwhAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALshAAAAAAAAuyEAAAAAAAD////////vfw"
				],
				[
					81,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwhAAAAAAAAvCEAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALwhAAAAAAAAvCEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "char-utils.h",
			"settings":
			{
				"buffer_size": 8860,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"cut",
					null,
					"AQAAAPwSAAAAAAAA/BIAAAAAAAAKAAAAICBpbnQgY3A7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPwSAAAAAAAABhMAAAAAAAAAAAAAAAAAAA"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAACwTAAAAAAAALBMAAAAAAAAFAAAAIGNwID0",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwTAAAAAAAAMRMAAAAAAAAAAAAAAADwvw"
				],
				[
					16,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACwTAAAAAAAALBMAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "quickjs-inspect.c",
			"settings":
			{
				"buffer_size": 38342,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					16,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADolAAAAAAAAUiUAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "lib/util.js",
			"settings":
			{
				"buffer_size": 25389,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					440,
					1,
					"cut",
					null,
					"AQAAAHUAAAAAAAAAdQAAAAAAAADmAQAAaW1wb3J0IHsgSlNfRVZBTF9GTEFHX0JBQ0tUUkFDRV9CQVJSSUVSLCBMb2NhdGlvbiwgZHVwQXJyYXlCdWZmZXIsIGVzY2FwZSwgZ2V0UHJvdG90eXBlQ2hhaW4sIGlzQXJyYXksIGlzQmlnRGVjaW1hbCwgaXNCaWdGbG9hdCwgaXNCaWdJbnQsIGlzQm9vbCwgaXNDRnVuY3Rpb24sIGlzQ29uc3RydWN0b3IsIGlzRW1wdHlTdHJpbmcsIGlzRXJyb3IsIGlzRXhjZXB0aW9uLCBpc0V4dGVuc2libGUsIGlzRnVuY3Rpb24sIGlzSFRNTEREQSwgaXNJbnN0YW5jZU9mLCBpc0ludGVnZXIsIGlzSm9iUGVuZGluZywgaXNMaXZlT2JqZWN0LCBpc051bGwsIGlzTnVtYmVyLCBpc09iamVjdCwgaXNSZWdpc3RlcmVkQ2xhc3MsIGlzU3RyaW5nLCBpc1N5bWJvbCwgaXNVbmNhdGNoYWJsZUVycm9yLCBpc1VuZGVmaW5lZCwgaXNVbmluaXRpYWxpemVkLCBpc0FycmF5QnVmZmVyLCByYW5kLCB0b0FycmF5QnVmZmVyLCB0b1N0cmluZywgd2F0Y2ggfSBmcm9tICdtaXNjJzsK",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUAAAAAAAAAWwIAAAAAAAAAAAAAAAAAAA"
				],
				[
					441,
					1,
					"paste",
					null,
					"AQAAAHUAAAAAAAAAWwIAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUAAAAAAAAAdQAAAAAAAAAAAAAAAADwvw"
				],
				[
					451,
					1,
					"paste",
					null,
					"AQAAAPNdAAAAAAAA2V8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPNdAAAAAAAA810AAAAAAAAAAAAAAAAAAA"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "ex"
					},
					"AwAAAPNdAAAAAAAA9F0AAAAAAAAAAAAA9F0AAAAAAAD0XQAAAAAAAAIAAABpbfRdAAAAAAAA9V0AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPNdAAAAAAAA9V0AAAAAAAAAAAAAAADwvw"
				],
				[
					464,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL9PAAAAAAAAwE8AAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL9PAAAAAAAAv08AAAAAAAAAAAAAAADwvw"
				],
				[
					469,
					1,
					"paste",
					null,
					"AQAAAF5YAAAAAAAA3lkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF5YAAAAAAAAXlgAAAAAAAAAAAAAAADwvw"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BwAAAF5YAAAAAAAAX1gAAAAAAAAAAAAAX1gAAAAAAABfWAAAAAAAAAQAAABVdGlsX1gAAAAAAABgWAAAAAAAAAAAAABgWAAAAAAAAGFYAAAAAAAAAAAAAGFYAAAAAAAAYlgAAAAAAAAAAAAAYlgAAAAAAABjWAAAAAAAAAAAAABjWAAAAAAAAGRYAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF5YAAAAAAAAYlgAAAAAAAAAAAAAAADwvw"
				],
				[
					475,
					1,
					"insert",
					{
						"characters": " function"
					},
					"CQAAAGRYAAAAAAAAZVgAAAAAAAAAAAAAZVgAAAAAAABmWAAAAAAAAAAAAABmWAAAAAAAAGdYAAAAAAAAAAAAAGdYAAAAAAAAaFgAAAAAAAAAAAAAaFgAAAAAAABpWAAAAAAAAAAAAABpWAAAAAAAAGpYAAAAAAAAAAAAAGpYAAAAAAAAa1gAAAAAAAAAAAAAa1gAAAAAAABsWAAAAAAAAAAAAABsWAAAAAAAAG1YAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGRYAAAAAAAAZFgAAAAAAAAAAAAAAADwvw"
				],
				[
					476,
					1,
					"insert",
					{
						"characters": " range"
					},
					"BgAAAG1YAAAAAAAAblgAAAAAAAAAAAAAblgAAAAAAABvWAAAAAAAAAAAAABvWAAAAAAAAHBYAAAAAAAAAAAAAHBYAAAAAAAAcVgAAAAAAAAAAAAAcVgAAAAAAAByWAAAAAAAAAAAAAByWAAAAAAAAHNYAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG1YAAAAAAAAbVgAAAAAAAAAAAAAAADwvw"
				],
				[
					478,
					1,
					"left_delete",
					null,
					"AQAAAHNYAAAAAAAAc1gAAAAAAAARAAAALnJhbmdlID0gZnVuY3Rpb24",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHNYAAAAAAAAhFgAAAAAAAAAAAAAAADwvw"
				],
				[
					495,
					1,
					"left_delete",
					null,
					"AQAAAKtZAAAAAAAAq1kAAAAAAAAjAAAAICAvL2NvbnNvbGUubG9nKCJVdGlsLnJhbmdlICIsIHIpOwo",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKtZAAAAAAAAzlkAAAAAAAAAAAAAAADwvw"
				],
				[
					498,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALtZAAAAAAAAvFkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALtZAAAAAAAAu1kAAAAAAAAAAAAAAADwvw"
				],
				[
					516,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAF1YAAAAAAAAXlgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF1YAAAAAAAAXVgAAAAAAAAAAAAAAADwvw"
				],
				[
					519,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF5YAAAAAAAAXlgAAAAAAAAAAAAAAADwvw"
				],
				[
					522,
					1,
					"paste",
					null,
					"AQAAALxZAAAAAAAA7VoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALxZAAAAAAAAvFkAAAAAAAAAAAAAAADwvw"
				],
				[
					525,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CQAAALxZAAAAAAAAvVkAAAAAAAAAAAAAvVkAAAAAAAC9WQAAAAAAAAUAAABVdGlsLr1ZAAAAAAAAvlkAAAAAAAAAAAAAvlkAAAAAAAC/WQAAAAAAAAAAAAC/WQAAAAAAAMBZAAAAAAAAAAAAAMBZAAAAAAAAwVkAAAAAAAAAAAAAwVkAAAAAAADCWQAAAAAAAAAAAADCWQAAAAAAAMNZAAAAAAAAAAAAAMNZAAAAAAAAxFkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMFZAAAAAAAAvFkAAAAAAAAAAAAAAADwvw"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMRZAAAAAAAAxVkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMRZAAAAAAAAxFkAAAAAAAAAAAAAAADwvw"
				],
				[
					530,
					1,
					"left_delete",
					null,
					"AQAAAM1ZAAAAAAAAzVkAAAAAAAALAAAAID0gZnVuY3Rpb24",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM1ZAAAAAAAA2FkAAAAAAAAAAAAAAADwvw"
				],
				[
					537,
					1,
					"insert",
					{
						"characters": "function"
					},
					"CQAAAJxaAAAAAAAAnVoAAAAAAAAAAAAAnVoAAAAAAACdWgAAAAAAAAUAAABVdGlsLp1aAAAAAAAAnloAAAAAAAAAAAAAnloAAAAAAACfWgAAAAAAAAAAAACfWgAAAAAAAKBaAAAAAAAAAAAAAKBaAAAAAAAAoVoAAAAAAAAAAAAAoVoAAAAAAACiWgAAAAAAAAAAAACiWgAAAAAAAKNaAAAAAAAAAAAAAKNaAAAAAAAApFoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKFaAAAAAAAAnFoAAAAAAAAAAAAAAAAAAA"
				],
				[
					538,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKRaAAAAAAAApVoAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRaAAAAAAAApFoAAAAAAAAAAAAAAADwvw"
				],
				[
					543,
					4,
					"left_delete",
					null,
					"BAAAAK5aAAAAAAAArloAAAAAAAAIAAAAZnVuY3Rpb26tWgAAAAAAAK1aAAAAAAAAAQAAACCsWgAAAAAAAKxaAAAAAAAAAQAAAD2rWgAAAAAAAKtaAAAAAAAAAQAAACA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5aAAAAAAAAtloAAAAAAAAAAAAAAADwvw"
				],
				[
					546,
					5,
					"left_delete",
					null,
					"BQAAAMhaAAAAAAAAyFoAAAAAAAABAAAALsdaAAAAAAAAx1oAAAAAAAABAAAAbMZaAAAAAAAAxloAAAAAAAABAAAAacVaAAAAAAAAxVoAAAAAAAABAAAAdMRaAAAAAAAAxFoAAAAAAAABAAAAVQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMlaAAAAAAAAyVoAAAAAAAAAAAAAAADwvw"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": "export"
					},
					"BgAAALxZAAAAAAAAvVkAAAAAAAAAAAAAvVkAAAAAAAC+WQAAAAAAAAAAAAC+WQAAAAAAAL9ZAAAAAAAAAAAAAL9ZAAAAAAAAwFkAAAAAAAAAAAAAwFkAAAAAAADBWQAAAAAAAAAAAADBWQAAAAAAAMJZAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALxZAAAAAAAAvFkAAAAAAAAAAAAAAAAAAA"
				],
				[
					550,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMJZAAAAAAAAw1kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMJZAAAAAAAAwlkAAAAAAAAAAAAAAADwvw"
				],
				[
					552,
					1,
					"cut",
					null,
					"AQAAALxZAAAAAAAAvFkAAAAAAAAHAAAAZXhwb3J0IA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMNZAAAAAAAAvFkAAAAAAAAAAAAAAAAAAA"
				],
				[
					553,
					1,
					"paste",
					null,
					"AQAAALxZAAAAAAAAw1kAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALxZAAAAAAAAvFkAAAAAAAAAAAAAAADwvw"
				],
				[
					557,
					1,
					"paste",
					null,
					"AQAAAKNaAAAAAAAAqloAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKNaAAAAAAAAo1oAAAAAAAAAAAAAAADwvw"
				],
				[
					572,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKJaAAAAAAAAo1oAAAAAAAAAAAAAo1oAAAAAAACkWgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKJaAAAAAAAAoloAAAAAAAAAAAAAAADwvw"
				],
				[
					574,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAALxZAAAAAAAAvVkAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALxZAAAAAAAAvFkAAAAAAAAAAAAAAAAAAA"
				],
				[
					576,
					1,
					"left_delete",
					null,
					"AQAAAKNaAAAAAAAAo1oAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKRaAAAAAAAApFoAAAAAAAAAAAAAAAAAAA"
				],
				[
					579,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKNaAAAAAAAAo1oAAAAAAAAAAAAAAADwvw"
				],
				[
					587,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAOhaAAAAAAAA6VoAAAAAAAAAAAAA6VoAAAAAAADqWgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOhaAAAAAAAA6FoAAAAAAAD////////vfw"
				],
				[
					588,
					1,
					"paste",
					null,
					"AQAAAOpaAAAAAAAAoFsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOpaAAAAAAAA6loAAAAAAAAAAAAAAADwvw"
				],
				[
					602,
					1,
					"paste",
					null,
					"AgAAAOpaAAAAAAAA+loAAAAAAAAAAAAA+loAAAAAAAD6WgAAAAAAAAMAAABVdGk",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAO1aAAAAAAAA6loAAAAAAAAAAAAAAADwvw"
				],
				[
					603,
					2,
					"right_delete",
					null,
					"AgAAAPpaAAAAAAAA+loAAAAAAAABAAAAbPpaAAAAAAAA+loAAAAAAAABAAAALg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPpaAAAAAAAA+loAAAAAAAAAAAAAAADwvw"
				],
				[
					605,
					2,
					"right_delete",
					null,
					"AgAAAARbAAAAAAAABFsAAAAAAAABAAAAIARbAAAAAAAABFsAAAAAAAABAAAAPQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAARbAAAAAAAABFsAAAAAAAAAAAAAAADwvw"
				],
				[
					607,
					2,
					"left_delete",
					null,
					"AgAAABBbAAAAAAAAEFsAAAAAAAABAAAAPg9bAAAAAAAAD1sAAAAAAAABAAAAPQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABFbAAAAAAAAEVsAAAAAAAD////////vfw"
				],
				[
					608,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAA9bAAAAAAAAEVsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAA9bAAAAAAAAD1sAAAAAAAAAAAAAAADwvw"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": " return"
					},
					"BwAAABBbAAAAAAAAEVsAAAAAAAAAAAAAEVsAAAAAAAASWwAAAAAAAAAAAAASWwAAAAAAABNbAAAAAAAAAAAAABNbAAAAAAAAFFsAAAAAAAAAAAAAFFsAAAAAAAAVWwAAAAAAAAAAAAAVWwAAAAAAABZbAAAAAAAAAAAAABZbAAAAAAAAF1sAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABBbAAAAAAAAEFsAAAAAAAAAAAAAAADwvw"
				],
				[
					610,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABdbAAAAAAAAGFsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABdbAAAAAAAAF1sAAAAAAAAAAAAAAADwvw"
				],
				[
					611,
					3,
					"right_delete",
					null,
					"AwAAABhbAAAAAAAAGFsAAAAAAAABAAAAfRhbAAAAAAAAGFsAAAAAAAABAAAAChhbAAAAAAAAGFsAAAAAAAABAAAAIA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABhbAAAAAAAAGFsAAAAAAAAAAAAAAADwvw"
				],
				[
					613,
					1,
					"insert",
					{
						"characters": "\n}"
					},
					"BQAAAK1bAAAAAAAArlsAAAAAAAAAAAAArlsAAAAAAACwWwAAAAAAAAAAAACuWwAAAAAAAK5bAAAAAAAAAgAAACAgrlsAAAAAAACuWwAAAAAAAAAAAACuWwAAAAAAAK9bAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK1bAAAAAAAArVsAAAAAAAAAAAAAAMB8QA"
				],
				[
					618,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK9bAAAAAAAAr1sAAAAAAAAAAAAAAADwvw"
				],
				[
					676,
					1,
					"paste",
					null,
					"AgAAAOlaAAAAAAAAn1sAAAAAAAAAAAAAn1sAAAAAAACfWwAAAAAAAMYAAAAKZXhwb3J0IGZ1bmN0aW9uIGNodW5rQXJyYXkoYSwgc2l6ZSkgewogIHJldHVybiBhLnJlZHVjZSgoYWNjLCBpdGVtLCBpKSA9PiB7CiAgICBjb25zdCBpZHggPSBpICUgc2l6ZTsKICAgIGlmKGlkeCA9PSAwKSBhY2MucHVzaChbXSk7CgogICAgYWNjW2FjYy5sZW5ndGggLSAxXS5wdXNoKGl0ZW0pOwogICAgcmV0dXJuIGFjYzsKICB9LCBbXSk7Cn0",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK9bAAAAAAAA6VoAAAAAAAAAAAAAAADwvw"
				],
				[
					742,
					1,
					"cut",
					null,
					"AQAAACZbAAAAAAAAJlsAAAAAAABxAAAAKGEsIHYsIGkpID0+IHsKICAgIGNvbnN0IGogPSBpICUgc2l6ZTsKICAgIGlmKGogPT0gMCkgYS5wdXNoKFtdKTsKCiAgICBhW2EubGVuZ3RoIC0gMV0ucHVzaCh2KTsKICAgIHJldHVybiBhOwogIH0",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACZbAAAAAAAAl1sAAAAAAAAAAAAAAADwvw"
				],
				[
					743,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAACZbAAAAAAAAJ1sAAAAAAAAAAAAAJ1sAAAAAAAAoWwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACZbAAAAAAAAJlsAAAAAAAAAAAAAAADwvw"
				],
				[
					745,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAABRbAAAAAAAAFVsAAAAAAAAAAAAAFVsAAAAAAAAXWwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABRbAAAAAAAAFFsAAAAAAAAAAAAAAAA0QA"
				],
				[
					747,
					1,
					"insert",
					{
						"characters": "const"
					},
					"BQAAABRbAAAAAAAAFVsAAAAAAAAAAAAAFVsAAAAAAAAWWwAAAAAAAAAAAAAWWwAAAAAAABdbAAAAAAAAAAAAABdbAAAAAAAAGFsAAAAAAAAAAAAAGFsAAAAAAAAZWwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABRbAAAAAAAAFFsAAAAAAAAAAAAAAAA0QA"
				],
				[
					748,
					1,
					"insert",
					{
						"characters": " fn"
					},
					"AwAAABlbAAAAAAAAGlsAAAAAAAAAAAAAGlsAAAAAAAAbWwAAAAAAAAAAAAAbWwAAAAAAABxbAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABlbAAAAAAAAGVsAAAAAAAAAAAAAAADwvw"
				],
				[
					749,
					1,
					"insert",
					{
						"characters": " ?="
					},
					"AwAAABxbAAAAAAAAHVsAAAAAAAAAAAAAHVsAAAAAAAAeWwAAAAAAAAAAAAAeWwAAAAAAAB9bAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABxbAAAAAAAAHFsAAAAAAAAAAAAAAADwvw"
				],
				[
					750,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB9bAAAAAAAAIFsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB9bAAAAAAAAH1sAAAAAAAAAAAAAAADwvw"
				],
				[
					751,
					3,
					"left_delete",
					null,
					"AwAAAB9bAAAAAAAAH1sAAAAAAAABAAAAIB5bAAAAAAAAHlsAAAAAAAABAAAAPR1bAAAAAAAAHVsAAAAAAAABAAAAPw",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACBbAAAAAAAAIFsAAAAAAAAAAAAAAADwvw"
				],
				[
					752,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAB1bAAAAAAAAHlsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB1bAAAAAAAAHVsAAAAAAAAAAAAAAADwvw"
				],
				[
					753,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAB5bAAAAAAAAH1sAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB5bAAAAAAAAHlsAAAAAAAAAAAAAAADwvw"
				],
				[
					754,
					1,
					"paste",
					null,
					"AQAAAB9bAAAAAAAAkFsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB9bAAAAAAAAH1sAAAAAAAAAAAAAAADwvw"
				],
				[
					755,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJBbAAAAAAAAkVsAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJBbAAAAAAAAkFsAAAAAAAAAAAAAAADwvw"
				],
				[
					756,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAJFbAAAAAAAAklsAAAAAAAAAAAAAklsAAAAAAACUWwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJFbAAAAAAAAkVsAAAAAAAAAAAAAAADwvw"
				],
				[
					852,
					1,
					"left_delete",
					null,
					"AgAAAGBbAAAAAAAAYFsAAAAAAAABAAAACpFbAAAAAAAAkVsAAAAAAAACAAAAICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGFbAAAAAAAAYVsAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"contents": "Searching 473 files for \"JS_GetOwnPropertyNames\" (regex, case sensitive)\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c:\n  616    assert(ta == TYPE_OBJECT);\n  617    assert(tb == TYPE_OBJECT);\n  618:   if(JS_GetOwnPropertyNames(ctx, &atoms_a, &natoms_a, a, JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK | JS_GPN_ENUM_ONLY))\n  619      return FALSE;\n  620  \n  621:   if(JS_GetOwnPropertyNames(ctx, &atoms_b, &natoms_b, b, JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK | JS_GPN_ENUM_ONLY))\n  622      return FALSE;\n  623  \n  ...\n 1237        uint32_t tab_atom_len;\n 1238        ret = JS_IsArray(ctx, value) ? JS_NewArray(ctx) : JS_NewObject(ctx);\n 1239:       if(!JS_GetOwnPropertyNames(ctx, &tab_atom, &tab_atom_len, value, JS_GPN_STRING_MASK | JS_GPN_SYMBOL_MASK | JS_GPN_ENUM_ONLY)) {\n 1240          uint32_t i;\n 1241          for(i = 0; i < tab_atom_len; i++) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c:\n  309    JSPropertyEnum* tmp_tab;\n  310    uint32_t i, tmp_len;\n  311:   ret = JS_GetOwnPropertyNames(ctx, &tmp_tab, &tmp_len, obj, flags);\n  312  \n  313    for(i = 0; i < tmp_len; i++) {\n\n/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c:\n   15    it->is_array = JS_IsArray(ctx, object);\n   16  \n   17:   if(JS_GetOwnPropertyNames(ctx, &it->tab_atom, &it->tab_atom_len, object, flags & 0x3f)) {\n   18      it->tab_atom_len = 0;\n   19      it->tab_atom = 0;\n\n5 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 1438,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "quickjs-misc.c",
			"settings":
			{
				"buffer_size": 53348,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					694,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEh/AAAAAAAASH8AAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "vector.h",
			"settings":
			{
				"buffer_size": 6117,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJsJAAAAAAAA5QkAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "vector.c",
			"settings":
			{
				"buffer_size": 4311,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAADXEAAAI2luY2x1ZGUgInZlY3Rvci5oIgojaW5jbHVkZSAiYnVmZmVyLXV0aWxzLmgiCiNpbmNsdWRlICJ1dGlscy5oIgojaW5jbHVkZSA8YXNzZXJ0Lmg+CiNpbmNsdWRlIDxzdGRhcmcuaD4KI2luY2x1ZGUgPHN0ZGludC5oPgojaW5jbHVkZSA8c3RkbGliLmg+CiNpbmNsdWRlIDxzdHJpbmcuaD4KCiNkZWZpbmUgSEFWRV9VSU5UMTI4CgojaWYoZGVmaW5lZChfX0dOVUNfXykgJiYgKF9fR05VQ19fID49IDUpKSB8fCBkZWZpbmVkKEhBVkVfX0JVSUxUSU5fTVVMX09WRVJGTE9XKQoKLyojZWxpZiBkZWZpbmVkKEhBVkVfVUlOVDEyOCkKI3dhcm5pbmcgTm8gdW11bHQ2NCBpbXBsZW1lbnRhdGlvbiovCiNlbHNlCmludAp1bXVsdDY0KHVpbnQ2NF90IGEsIHVpbnQ2NF90IGIsIHVpbnQ2NF90KiBjKSB7CiAgdWludDMyX3QgYWhpID0gYSA+PiAzMjsKICB1aW50MzJfdCBhbG8gPSAoYSAmIDB4ZmZmZmZmZmYpOwogIHVpbnQzMl90IGJoaSA9IGIgPj4gMzI7CiAgdWludDMyX3QgYmxvID0gKGIgJiAweGZmZmZmZmZmKTsKCiAgaWYoYWhpICYmIGJoaSkKICAgIHJldHVybiAwOwoKICBhID0gKHVpbnQ2NF90KShhaGkpKmJsbyArICh1aW50NjRfdCkoYWxvKSpiaGk7CiAgaWYoYSA+IDB4ZmZmZmZmZmYpCiAgICByZXR1cm4gMDsKICB7CiAgICB1aW50NjRfdCB4ID0gKHVpbnQ2NF90KShhbG8pKmJsbzsKICAgIGlmKHggKyAoYSA8PCAzMikgPCB4KQogICAgICByZXR1cm4gMDsKICAgICpjID0geCArIChhIDw8IDMyKTsKICB9CiAgcmV0dXJuIDE7Cn0KI2VuZGlmCgp2b2lkCnZlY3Rvcl9mcmVlKFZlY3RvciogdmVjKSB7CiAgaWYodmVjLT5kYXRhKQogICAgdmVjLT5yZWFsbG9jX2Z1bmModmVjLT5vcGFxdWUsIHZlYy0+ZGF0YSwgMCk7CiAgdmVjLT5kYXRhID0gMDsKICB2ZWMtPmNhcGFjaXR5ID0gdmVjLT5zaXplID0gMDsKfQoKaW50MzJfdAp2ZWN0b3JfaW5kZXhvZihjb25zdCBWZWN0b3IqIHZlYywgc2l6ZV90IGVsc3osIHZvaWQqIHB0cikgewogIGlmKHB0ciA8IHZlY3Rvcl9iZWdpbih2ZWMpIHx8IHB0ciA+IHZlY3Rvcl9iYWNrKHZlYywgZWxzeikpCiAgICByZXR1cm4gLTE7CgogIHJldHVybiAoKHNpemVfdCl2ZWN0b3JfYmVnaW4odmVjKSAtIChzaXplX3QpcHRyKSAvIGVsc3o7Cn0KCmludDMyX3QKdmVjdG9yX2ZpbmQoY29uc3QgVmVjdG9yKiB2ZWMsIHNpemVfdCBlbHN6LCB2b2lkKiBwdHIpIHsKICB2b2lkKiB4OwogIGludDMyX3QgaSA9IDA7CiAgaWYodmVjdG9yX2VtcHR5KHZlYykpCiAgICByZXR1cm4gLTE7CgogIHZlY3Rvcl9mb3JlYWNoKHZlYywgZWxzeiwgeCkgewogICAgaWYoIW1lbWNtcCh4LCBwdHIsIGVsc3opKQogICAgICByZXR1cm4gaTsKICAgIGkrKzsKICB9CiAgcmV0dXJuIC0xOwp9CgppbnQzMl90CnZlY3Rvcl9maW5kcyhjb25zdCBWZWN0b3IqIHZlYywgY29uc3QgY2hhciogc3RyKSB7CiAgY2hhcioqIHg7CiAgaW50MzJfdCBpID0gMDsKICBpZih2ZWN0b3JfZW1wdHkodmVjKSkKICAgIHJldHVybiAtMTsKCiAgdmVjdG9yX2ZvcmVhY2hfdCh2ZWMsIHgpIHsKICAgIGlmKCFzdHJjbXAoKngsIHN0cikpCiAgICAgIHJldHVybiBpOwogICAgaSsrOwogIH0KICByZXR1cm4gLTE7Cn0KCmludAp2ZWN0b3JfY291bnRzKGNvbnN0IFZlY3RvciogdmVjLCBjb25zdCBjaGFyKiBzdHIpIHsKICBjaGFyKiogeDsKICBpbnQgY291bnQgPSAwOwoKICBpZih2ZWN0b3JfZW1wdHkodmVjKSkKICAgIHJldHVybiAwOwoKICB2ZWN0b3JfZm9yZWFjaF90KHZlYywgeCkgewogICAgaWYoIXN0cmNtcCgqeCwgc3RyKSkKICAgICAgKytjb3VudDsKICB9CiAgcmV0dXJuIGNvdW50Owp9Cgp2b2lkKgp2ZWN0b3JfcHV0KFZlY3RvciogdmVjLCBjb25zdCB2b2lkKiBieXRlcywgc2l6ZV90IGxlbikgewogIHNpemVfdCBwb3M7CiAgaWYoIWxlbikKICAgIHJldHVybiAwOwogIHBvcyA9IHZlYy0+c2l6ZTsKICBpZighdmVjdG9yX2FsbG9jYXRlKHZlYywgMSwgdmVjLT5zaXplICsgbGVuIC0gMSkpCiAgICByZXR1cm4gMDsKICBtZW1jcHkodmVjLT5kYXRhICsgcG9zLCBieXRlcywgbGVuKTsKICByZXR1cm4gdmVjLT5kYXRhICsgcG9zOwp9Cgp2b2lkIF9fYXR0cmlidXRlX18oKGZvcm1hdChwcmludGYsIDIsIDMpKSkgdmVjdG9yX3ByaW50ZihWZWN0b3IqIHZlYywgY29uc3QgY2hhciogZm10LCAuLi4pIHsKICB2YV9saXN0IGFwOwogIGNoYXIgYnVmWzEyOF07CiAgc2l6ZV90IGxlbjsKICB2YV9zdGFydChhcCwgZm10KTsKICBsZW4gPSB2c25wcmludGYoYnVmLCBzaXplb2YoYnVmKSwgZm10LCBhcCk7CiAgdmFfZW5kKGFwKTsKICBpZihsZW4gPCBzaXplb2YoYnVmKSkgewogICAgdmVjdG9yX3B1dCh2ZWMsIGJ1ZiwgbGVuKTsKICB9IGVsc2UgewogICAgc2l6ZV90IHBvcyA9IHZlYy0+c2l6ZTsKICAgIGlmKCF2ZWN0b3JfYWxsb2NhdGUodmVjLCAxLCB2ZWMtPnNpemUgKyBsZW4pKQogICAgICByZXR1cm47CiAgICB2YV9zdGFydChhcCwgZm10KTsKICAgIGxlbiA9IHZzbnByaW50ZigoY2hhciopKHZlYy0+ZGF0YSArIHBvcyksIGxlbiwgZm10LCBhcCk7CiAgICB2YV9lbmQoYXApOwogICAgdmVjLT5zaXplICs9IGxlbjsKICB9Cn0KCnZvaWQKdmVjdG9yX2RpZmYodm9pZCogYSwgc2l6ZV90IG0sIHZvaWQqIGIsIHNpemVfdCBuLCBzaXplX3QgZWxzeiwgVmVjdG9yKiBvdXQpIHsKICBjaGFyKiBwdHIgPSBhOwogIHNpemVfdCBpOwogIGZvcihpID0gMDsgaSA8IG07IGkrKykgewogICAgaWYoYXJyYXlfY29udGFpbnMoYiwgbiwgZWxzeiwgcHRyKSkKICAgICAgdmVjdG9yX3B1dChvdXQsIHB0ciwgZWxzeik7CiAgICBwdHIgKz0gZWxzejsKICB9Cn0KCnZvaWQKdmVjdG9yX3N5bW1ldHJpY2RpZmYodm9pZCogYSwgc2l6ZV90IG0sIHZvaWQqIGIsIHNpemVfdCBuLCBzaXplX3QgZWxzeiwgVmVjdG9yKiBvdXRfYSwgVmVjdG9yKiBvdXRfYikgewogIHZlY3Rvcl9kaWZmKGEsIG0sIGIsIG4sIGVsc3osIG91dF9hKTsKICB2ZWN0b3JfZGlmZihiLCBuLCBhLCBtLCBlbHN6LCBvdXRfYik7Cn0KCnZvaWQKdmVjdG9yX2ludGVyc2VjdGlvbih2b2lkKiBhLCBzaXplX3QgbSwgdm9pZCogYiwgc2l6ZV90IG4sIHNpemVfdCBlbHN6LCBWZWN0b3IqIG91dCkgewogIHNpemVfdCBpLCBqID0gMCwgayA9IDA7CiAgZm9yKGkgPSAwOyBpIDwgbSArIG47IGkrKykgewogICAgdm9pZCogYXB0ciA9IChjaGFyKilhICsgaiAqIGVsc3o7CiAgICB2b2lkKiBicHRyID0gKGNoYXIqKWIgKyBrICogZWxzejsKICAgIGludCByID0gbWVtY21wKGFwdHIsIGJwdHIsIGVsc3opOwogICAgaWYociA8IDAgJiYgaiA8IG0pIHsKICAgICAgaisrOwogICAgfSBlbHNlIGlmKHIgPiAwICYmIGsgPCBuKSB7CiAgICAgIGsrKzsKICAgIH0gZWxzZSBpZihyID09IDAgJiYgaiA8IG0gJiYgayA8IG4pIHsKICAgICAgdmVjdG9yX3B1dChvdXQsIGFwdHIsIGVsc3opOwogICAgICBqKys7CiAgICAgIGsrKzsKICAgIH0KICB9Cn0KLyoKc3NpemVfdAp2ZWN0b3JfZmluZChWZWN0b3IqIHZlYywgc2l6ZV90IGVsc3osIGNvbnN0IHZvaWQqIHB0cikgewogIHNpemVfdCBpLCBqOwogIGZvcihpID0gMCwgaiA9IDA7IGkgPCB2ZWMtPnNpemU7IGkgKz0gZWxzeikgewogICAgaWYoIW1lbWNtcCgmdmVjLT5kYXRhW2ldLCBwdHIsIGVsc3opKQogICAgICByZXR1cm4gajsKCiAgICBqKys7CiAgfQogIHJldHVybiAtMTsKfQoqLwppbnQKdmVjdG9yX2NvcHkoVmVjdG9yKiBkc3QsIGNvbnN0IFZlY3Rvciogc3JjKSB7CiAgZHN0LT5yZWFsbG9jX2Z1bmMgPSBzcmMtPnJlYWxsb2NfZnVuYzsKICBkc3QtPm9wYXF1ZSA9IHNyYy0+b3BhcXVlOwogIGRzdC0+ZGF0YSA9IDA7CiAgZHN0LT5jYXBhY2l0eSA9IDA7CiAgaWYoIWRidWZfcmVhbGxvYygmZHN0LT5kYnVmLCBzcmMtPnNpemUpKSB7CiAgICBtZW1jcHkoZHN0LT5kYXRhLCBzcmMtPmRhdGEsIHNyYy0+c2l6ZSk7CiAgICByZXR1cm4gMTsKICB9CiAgcmV0dXJuIDA7Cn0KCnZvaWQKdmVjdG9yX2Z3cml0ZShjb25zdCBWZWN0b3IqIHZlYywgc2l6ZV90IHN0YXJ0LCBGSUxFKiBvdXQpIHsKICBzaXplX3QgaSwgbGVuID0gdmVjdG9yX3NpemUodmVjLCBzaXplb2YoY2hhciopKTsKICBmb3IoaSA9IHN0YXJ0OyBpIDwgbGVuOyBpKyspIHsKICAgIGNvbnN0IGNoYXIqIHN0ciA9ICooY2hhcioqKXZlY3Rvcl9hdCh2ZWMsIHNpemVvZihjaGFyKiksIGkpOwogICAgZnB1dHMoaSA+IHN0YXJ0ID8gIicsXG4gICciIDogIltcbiAgJyIsIG91dCk7CiAgICBmcHV0cyhzdHIsIG91dCk7CiAgICBpZihpICsgMSA9PSBsZW4pCiAgICAgIGZwdXRzKCInXG5dIiwgb3V0KTsKICB9CiAgZmZsdXNoKG91dCk7Cn0KAAAAAAAAAADXEAAAAAAAAAAAAAAAAAAAAAAAANcQAAAAAAAAAAAAAAAAAAAAAAAA1xAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAPcHAAAAAAAA/QcAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "location.c",
			"settings":
			{
				"buffer_size": 2210,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAACiCAAAI2luY2x1ZGUgPHN0ZGRlZi5oPgojaW5jbHVkZSAibG9jYXRpb24uaCIKI2luY2x1ZGUgImJ1ZmZlci11dGlscy5oIgoKLyoqCiAqIFxhZGR0b2dyb3VwIGxvY2F0aW9uCiAqIEB7CiAqLwp2b2lkCmxvY2F0aW9uX3ByaW50KGNvbnN0IExvY2F0aW9uKiBsb2MsIER5bkJ1ZiogZGJ1ZikgewogIGlmKGxvYy0+ZmlsZSkgewogICAgZGJ1Zl9wdXRzdHIoZGJ1ZiwgbG9jLT5maWxlKTsKICAgIGRidWZfcHV0YyhkYnVmLCAnOicpOwogIH0KICBpZihsb2MtPmNvbHVtbiAhPSBVSU5UMzJfTUFYKQogICAgZGJ1Zl9wcmludGYoZGJ1ZiwgIiUiIFBSSWQzMiAiOiUiIFBSSWQzMiwgbG9jLT5saW5lICsgMSwgbG9jLT5jb2x1bW4gKyAxKTsKICBlbHNlCiAgICBkYnVmX3ByaW50ZihkYnVmLCAiJSIgUFJJZDMyLCBsb2MtPmxpbmUgKyAxKTsKfQoKY2hhcioKbG9jYXRpb25fdG9zdHJpbmcoY29uc3QgTG9jYXRpb24qIGxvYywgSlNDb250ZXh0KiBjdHgpIHsKICBEeW5CdWYgZGJ1ZjsKICBqc19kYnVmX2luaXQoY3R4LCAmZGJ1Zik7CgogIGxvY2F0aW9uX3ByaW50KGxvYywgJmRidWYpOwogIGRidWZfMCgmZGJ1Zik7CgogIHJldHVybiAoY2hhciopZGJ1Zi5idWY7Cn0KCkpTVmFsdWUKbG9jYXRpb25fdG92YWx1ZShjb25zdCBMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIGNoYXIqIHN0ciA9IGxvY2F0aW9uX3Rvc3RyaW5nKGxvYywgY3R4KTsKICBKU1ZhbHVlIHJldCA9IEpTX05ld1N0cmluZyhjdHgsIHN0cik7CiAganNfZnJlZShjdHgsIHN0cik7CiAgcmV0dXJuIHJldDsKfQoKTG9jYXRpb24KbG9jYXRpb25fY2xvbmUoY29uc3QgTG9jYXRpb24qIGxvYywgSlNDb250ZXh0KiBjdHgpIHsKICBMb2NhdGlvbiByZXQgPSB7MCwgMCwgMCwgMCwgMH07CiAgaWYobG9jLT5maWxlKQogICAgcmV0LmZpbGUgPSBqc19zdHJkdXAoY3R4LCBsb2MtPmZpbGUpOwogIHJldC5saW5lID0gbG9jLT5saW5lOwogIHJldC5jb2x1bW4gPSBsb2MtPmNvbHVtbjsKICByZXQucG9zID0gbG9jLT5wb3M7CiAgcmV0dXJuIHJldDsKfQoKdm9pZApsb2NhdGlvbl9pbml0KExvY2F0aW9uKiBsb2MpIHsKICBsb2MtPmZpbGUgPSAwOwogIGxvYy0+c3RyID0gMDsKICBsb2NhdGlvbl96ZXJvKGxvYyk7Cn0KCnZvaWQKbG9jYXRpb25femVybyhMb2NhdGlvbiogbG9jKSB7CiAgbG9jLT5saW5lID0gMDsKICBsb2MtPmNvbHVtbiA9IDA7CiAgbG9jLT5wb3MgPSAwOwp9Cgp2b2lkCmxvY2F0aW9uX2FkZChMb2NhdGlvbiogbG9jLCBjb25zdCBMb2NhdGlvbiogb3RoZXIpIHsKICBsb2MtPmxpbmUgKz0gb3RoZXItPmxpbmU7CiAgbG9jLT5jb2x1bW4gKz0gb3RoZXItPmNvbHVtbjsKICBsb2MtPnBvcyArPSBvdGhlci0+cG9zOwp9CnZvaWQKbG9jYXRpb25fc3ViKExvY2F0aW9uKiBsb2MsIGNvbnN0IExvY2F0aW9uKiBvdGhlcikgewogIGxvYy0+bGluZSAtPSBvdGhlci0+bGluZTsKICBsb2MtPmNvbHVtbiAtPSBvdGhlci0+Y29sdW1uOwogIGxvYy0+cG9zIC09IG90aGVyLT5wb3M7Cn0KCi8qdm9pZApsb2NhdGlvbl9jb3VudChMb2NhdGlvbiogbG9jLCBjb25zdCBjaGFyKiB4LCBzaXplX3QgbikgewogIHNpemVfdCBpOwogIGZvcihpID0gMDsgaSA8IG47KSB7CiAgICBzaXplX3QgYnl0ZXMgPSBieXRlX2NoYXJsZW4oJnhbaV0sIG4gLSBpKTsKCiAgICBpZih4W2ldID09ICdcbicpIHsKICAgICAgbG9jLT5saW5lKys7CiAgICAgIGxvYy0+Y29sdW1uID0gMDsKICAgIH0gZWxzZSB7CiAgICAgIGxvYy0+Y29sdW1uKys7CiAgICB9CgogICAgbG9jLT5wb3MrKzsKICAgIGkgKz0gYnl0ZXM7CiAgfQp9Ki8KCnZvaWQKbG9jYXRpb25fZnJlZShMb2NhdGlvbiogbG9jLCBKU0NvbnRleHQqIGN0eCkgewogIGlmKGxvYy0+ZmlsZSkKICAgIGpzX2ZyZWUoY3R4LCAoY2hhciopbG9jLT5maWxlKTsKICBpZihsb2MtPnN0cikKICAgIGpzX2ZyZWUoY3R4LCAoY2hhciopbG9jLT5zdHIpOwogIG1lbXNldChsb2MsIDAsIHNpemVvZihMb2NhdGlvbikpOwp9Cgp2b2lkCmxvY2F0aW9uX2ZyZWVfcnQoTG9jYXRpb24qIGxvYywgSlNSdW50aW1lKiBydCkgewogIGlmKGxvYy0+ZmlsZSkKICAgIGpzX2ZyZWVfcnQocnQsIChjaGFyKilsb2MtPmZpbGUpOwogIGlmKGxvYy0+c3RyKQogICAganNfZnJlZV9ydChydCwgKGNoYXIqKWxvYy0+c3RyKTsKICBtZW1zZXQobG9jLCAwLCBzaXplb2YoTG9jYXRpb24pKTsKfQoKLyoqCiAqIEB9CiAqLwoAAAAAAAAAAKIIAAAAAAAAAAAAAAAAAAAAAAAAoggAAAAAAAAAAAAAAAAAAAAAAACiCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKYBAAAAAAAApgEAAAAAAAAAAAAAAADwvw"
				]
			]
		},
		{
			"file": "location.h",
			"settings":
			{
				"buffer_size": 1292,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					1,
					1,
					"revert",
					null,
					"BAAAAAAAAAAAAAAAAAAAAAAAAAAMBQAAI2lmbmRlZiBMT0NBVElPTl9ICiNkZWZpbmUgTE9DQVRJT05fSAoKI2luY2x1ZGUgInV0aWxzLmgiCiNpbmNsdWRlICJjaGFyLXV0aWxzLmgiCgovKioKICogXGRlZmdyb3VwIGxvY2F0aW9uIFNvdXJjZSB0ZXh0IGxvY2F0aW9uCiAqIEB7CiAqLwp0eXBlZGVmIHN0cnVjdCBzb3VyY2VfbG9jYXRpb24gewogIGNoYXIqIGZpbGU7CiAgdWludDMyX3QgbGluZTsKICB1aW50MzJfdCBjb2x1bW47CiAgaW50NjRfdCBwb3M7CiAgY2hhciogc3RyOwp9IExvY2F0aW9uOwoKdm9pZCBsb2NhdGlvbl9wcmludChjb25zdCBMb2NhdGlvbiosIER5bkJ1ZiogZGJ1Zik7CmNoYXIqIGxvY2F0aW9uX3Rvc3RyaW5nKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0KiBjdHgpOwpKU1ZhbHVlIGxvY2F0aW9uX3RvdmFsdWUoY29uc3QgTG9jYXRpb24qLCBKU0NvbnRleHQqIGN0eCk7CkxvY2F0aW9uIGxvY2F0aW9uX2Nsb25lKGNvbnN0IExvY2F0aW9uKiwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGxvY2F0aW9uX2luaXQoTG9jYXRpb24qKTsKdm9pZCBsb2NhdGlvbl96ZXJvKExvY2F0aW9uKik7CnZvaWQgbG9jYXRpb25fYWRkKExvY2F0aW9uKiwgY29uc3QgTG9jYXRpb24qIG90aGVyKTsKdm9pZCBsb2NhdGlvbl9zdWIoTG9jYXRpb24qLCBjb25zdCBMb2NhdGlvbiogb3RoZXIpOwovKnZvaWQgbG9jYXRpb25fY291bnQoTG9jYXRpb24qLCBjb25zdCBjaGFyKiB4LCBzaXplX3Qgbik7Ki8Kdm9pZCBsb2NhdGlvbl9mcmVlKExvY2F0aW9uKiwgSlNDb250ZXh0KiBjdHgpOwp2b2lkIGxvY2F0aW9uX2ZyZWVfcnQoTG9jYXRpb24qLCBKU1J1bnRpbWUqIHJ0KTsKCnN0YXRpYyBpbmxpbmUgaW50CmxvY2F0aW9uX2lzbnVsbChjb25zdCBMb2NhdGlvbiogbG9jKSB7CiAgcmV0dXJuICFsb2MtPmZpbGUgJiYgIWxvYy0+bGluZSAmJiAhbG9jLT5jb2x1bW4gJiYgIWxvYy0+cG9zOwp9CgpzdGF0aWMgaW5saW5lIHZvaWQKbG9jYXRpb25fY291bnQoTG9jYXRpb24qIGxvYywgY29uc3QgY2hhciogeCwgc2l6ZV90IG4pIHsKICBzaXplX3QgaTsKICBmb3IoaSA9IDA7IGkgPCBuOykgewogICAgc2l6ZV90IGJ5dGVzID0gYnl0ZV9jaGFybGVuKCZ4W2ldLCBuIC0gaSk7CgogICAgaWYoeFtpXSA9PSAnXG4nKSB7CiAgICAgIGxvYy0+bGluZSsrOwogICAgICBsb2MtPmNvbHVtbiA9IDA7CiAgICB9IGVsc2UgewogICAgICBsb2MtPmNvbHVtbisrOwogICAgfQoKICAgIGxvYy0+cG9zKys7CiAgICBpICs9IGJ5dGVzOwogIH0KfQoKLyoqCiAqIEB9CiAqLwojZW5kaWYgLyogZGVmaW5lZChMT0NBVElPTl9IKSAqLwoAAAAAAAAAAAwFAAAAAAAAAAAAAAAAAAAAAAAADAUAAAAAAAAAAAAAAAAAAAAAAAAMBQAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOQDAAAAAAAA6AMAAAAAAAAAAAAAAADwvw"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"edit",
				"SchemeEditor: Edit Current Scheme"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_location.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debugger.xml",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tmp.xml",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/check-flags.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/TODO",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_watch.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/require.js",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/clock_gettime.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/require.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Dokumente/bookmarks_10_26_21.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tmp.html",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_repeater.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/base64.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/base64.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/Doxyfile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/iteration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/.clang-format",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/fs.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/util.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-debug/modules/repl.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-gnu/modules/qjscalc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/x86_64-linux-gnu/modules/repl.c",
		"/home/roman/.config/sublime-text/Packages/User/ExtendedSwitcher.sublime-settings",
		"/home/roman/.config/sublime-text/Packages/ExtendedSwitcher/ExtendedSwitcher.sublime-settings",
		"/home/roman/Projects/plot-cv/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/.config/sublime-text/Packages/User/LiveReload.sublime-settings",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/socketpair_win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/.config/sublime-text/Packages/LiveReload/LiveReload.sublime-settings",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qsort_r.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/coreutils/gnulib/lib/execute.c",
		"/home/roman/Projects/coreutils/gnulib/lib/windows-spawn.h",
		"/home/roman/Projects/coreutils/gnulib/lib/spawn-pipe.c",
		"/tmp/spawn/pcs_exec.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/modules.project",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/tmp/spawn/process.2.c",
		"/tmp/spawn/process.c",
		"/tmp/spawn/systemimpl.1.c",
		"/tmp/spawn/systemimpl.c",
		"/tmp/spawnvpe/fgvsys_d.c",
		"/tmp/spawnvpe/posixmodule.1.c",
		"/tmp/spawnvpe/posixmodule.c",
		"/tmp/spawnvpe/process.c",
		"/tmp/spawnvpe/redirect.c",
		"/home/roman/.config/sublime-text/Packages/Search in Project/README.md",
		"/home/roman/Sources/plot-cv/quickjs/qjs-modules/lib/repl.js"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"element =",
			"POP",
			"POP\\(",
			"push",
			"FROMARRAY",
			"BITFIELD_FROMARRAY",
			"BITFIELD_SET",
			"js_misc_bitfield",
			"BITFIELD_FROMARRAY",
			"JS_GetOwnPropertyNames",
			"isIterator",
			"Util\\.",
			"getOpt",
			"getPrototype",
			"js_misc_is",
			"isObject",
			"function isObject",
			"isFunction",
			";\n",
			"^\\s*printf",
			"continue",
			"vector_push",
			"'\\?'",
			"SPECIAL",
			"'\\?'",
			"\"xml",
			"printf",
			"tack.depth",
			"\"children",
			"JSCFunction",
			"js_repeater_push",
			"js_archive_version",
			"NewCFunc",
			"js_repeater_push",
			"malloc_usable_size",
			"usable.size",
			"WIFCONF",
			"POSIX_SPAWN",
			")\n",
			"check_func",
			"fork",
			"POSIX_SPAWN",
			"HAVE_INOTIFY",
			"inotify_ini",
			"inotify_",
			"xml_write_text",
			"xml_write_indent",
			"dbuf_",
			"xml_num_children",
			"1",
			"result",
			"utils_SOU",
			"archive_",
			"dump_err",
			"pigpio",
			"has_property",
			"_property",
			"types\\.",
			"types",
			"js_bytecode_free_func",
			"js_arraybuffer_free_func",
			"BITFIELD_TOARRAY",
			"js_misc_bitfield",
			"js_misc_bitfield_to_array",
			"watch ",
			"inotify_fd",
			"IN_",
			"watch",
			"js_[^ ]*handler",
			"js_io_readhandler_fn",
			"io.*handler",
			"inotify_initialized",
			"ThrowInternal",
			"wfd",
			"rfd",
			"\\.then",
			"success path:",
			"loadDSO\\(",
			"loadDSO",
			"loadDS",
			"loadModule",
			"main",
			"init_mod",
			"jsm_modules",
			"jsm_load_script",
			"include_list",
			"'I'",
			"packagePaths",
			"getPack",
			"memoize",
			"getPack",
			"packagePaths",
			"lookupModule",
			"LOAD_MODULE:",
			"\"loadMo",
			"loader_func",
			"ModuleLoad",
			"js_module_find",
			"typedef",
			"JS_Set",
			"import.meta",
			"js_module_find",
			"eval_buf",
			"imp",
			"QUICKJS_C_MODULE_DIR",
			"utils_SOU",
			"inspect_",
			"inspect",
			"rdynamic",
			"wordexp",
			"glob",
			"js_repeater_execute",
			"\"async",
			"JSValueConst\\*",
			"^js_array_",
			"^js_array",
			"js_array_to",
			"asyncIterat",
			"STATIC_MERGE",
			"ArrayBufferToString",
			"JSValue([),])",
			"js_error_print",
			"Ctx",
			"JS_Throw",
			"vector_back",
			"byte_chr",
			"vector_",
			"out->obj"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"js_pointer_free_func",
			"BITFIELD_SET",
			"fd",
			"misc.IN_",
			"fd",
			"wd",
			"JSValueConst\\1",
			"s",
			"queue_alloc(",
			"queue_alloc",
			"rpt",
			"js_return_",
			"tmp",
			"repeater_execute",
			"queue_item",
			"linked_item",
			"queue_",
			"rpt",
			"Repeater",
			"resolvable_item",
			"resolvable_",
			"js_resolvable_",
			"repeater_push",
			"COLOR_NONE",
			"COLOR_CYAN",
			"COLOR_RED",
			"COLOR_LIGHTRED",
			"\" BACKGROUND_RED \"",
			"BACKGROUND_BLUE \"",
			"BACKGROUND_GREEN \"",
			"BACKGROUND_YELLOW \"",
			"\" COLOR_NONE \"",
			"js_inspect_print_map",
			"js_inspect_print_set",
			"js_inspect_print_arraybuffer",
			"js_inspect_print_regexp",
			"js_inspect_print_number",
			"js_inspect_print_string",
			"js_inspect_print_atom",
			"js_inspect_print_module",
			"js_inspect_print_value",
			"imp",
			"INC",
			"format",
			"\\1//\\2",
			"ctx",
			"sel",
			"console.log",
			"cmd",
			"js_socket_async_wait",
			"utils_SOURCES",
			"${util_SOURCES}",
			"${vector_SOURCES}",
			"socketpair",
			"",
			"#",
			"",
			"HAVE_MEMMEM",
			"log",
			"class_key",
			"}\\n\\nsize_t",
			"# ",
			"#",
			"HAVE_REALPATH",
			"",
			"HAVE_TERMIOS_H",
			"HAVE_MMAP",
			"HAVE_SYS_MMAN_H",
			"HAVE_SYS_WAIT_H",
			"length",
			"loc->",
			"ret->",
			"arg",
			" ",
			"",
			"\"\\\\t",
			"\"\\t",
			"imp.",
			"ctx,",
			"",
			"JSValueConst)",
			"",
			"jsm_module_loader",
			"js_module_loader_so",
			"js_eval_file",
			"js_eval_buf",
			"js_load_script",
			"jsm_eval_script",
			"js_eval_file",
			"js_load_module",
			"js_eval_str",
			"js_module_get",
			"JSValueConst)",
			"js_module_search",
			"jsm_module_find",
			"js_module_find",
			"js_load_",
			"js_load_module",
			"js_eval_buf",
			"js_load_script",
			"js_std_dump_error",
			"js_module_exports",
			"fdset",
			" ",
			"js_input_buffer",
			"\\1(\\2, sock",
			"\\1(",
			"",
			"JS_CGETSET_MAGIC_DEF",
			"off.",
			"} else if(",
			"port",
			".buf",
			"'",
			"",
			"socket_send",
			"0x00",
			" 0x00,",
			"0x78,",
			"0x78",
			" 0x00,",
			"0x78",
			"JS_CGETSET_MAGIC_DEF",
			"socket_syscalls_size",
			"js_syscallerror_get, js_syscallerror_set,",
			"js_socket_get, js_socket_set, ",
			"e",
			"js_syscallerror_proto_funcs"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 269,
						"regions":
						{
						},
						"selection":
						[
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": null,
							"function_name_status_row": 10,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									53,
									81
								],
								[
									148,
									166
								],
								[
									1041,
									1064
								],
								[
									1354,
									1362
								],
								[
									1607,
									1616
								],
								[
									1661,
									1675
								],
								[
									2012,
									2028
								],
								[
									2314,
									2326
								],
								[
									2381,
									2396
								],
								[
									2534,
									2558
								],
								[
									2560,
									2636
								],
								[
									2637,
									2683
								]
							],
							"symlist":
							[
								"A sample Markdown document",
								"Text Formatting",
								"Links and References",
								"Lists",
								"Tables",
								"Code Blocks",
								"  fibo(n)",
								"-89,6 +89,12",
								"CriticMarkup",
								"Reference Definitions",
								"[^1]: This is a footnote definition [links]: https://example.com/index.html",
								"[sample image]: https://example.com/sample.png"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639875744.14,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "quickjs-xml.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16982,
						"regions":
						{
						},
						"selection":
						[
							[
								1572,
								1572
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 78,
							"rulers":
							[
							],
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639877102.53,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": false,
							"word_wrap": false,
							"wrap_width": 0
						},
						"translation.x": 0.0,
						"translation.y": 913.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2684,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/User/Themes/PlayroomBedtime.tmTheme",
							"function_name_status_row": 0,
							"syntax": "Packages/MarkdownEditing/syntaxes/Markdown.sublime-syntax",
							"tab_size": 4,
							"tabs_extra_last_activated": 1639883320.67,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 60223,
						"regions":
						{
						},
						"selection":
						[
							[
								42692,
								42692
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639875425.76,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 31533.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "path.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12614,
						"regions":
						{
						},
						"selection":
						[
							[
								7015,
								7015
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 0,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639875485.56,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6187.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "quickjs-tree-walker.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16033,
						"regions":
						{
						},
						"selection":
						[
							[
								8636,
								8636
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 337,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639875722.09,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6282.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "char-utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8860,
						"regions":
						{
						},
						"selection":
						[
							[
								4908,
								4908
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 139,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639875357.15,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2482.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "quickjs-inspect.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 38342,
						"regions":
						{
						},
						"selection":
						[
							[
								9530,
								9554
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 305,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639855514.66,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6091.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "lib/util.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25389,
						"regions":
						{
						},
						"selection":
						[
							[
								23290,
								23300
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 789,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639874809.06,
							"tabs_extra_last_activated_sheet_index": 2,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 14371.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1438,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										216,
										238
									],
									[
										374,
										396
									],
									[
										661,
										683
									],
									[
										1011,
										1033
									],
									[
										1263,
										1285
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								1026,
								1026
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"detect_indentation": false,
							"function_name_status_row": 21,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"tabs_extra_last_activated": 1639861824.66,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "quickjs-misc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53348,
						"regions":
						{
						},
						"selection":
						[
							[
								32584,
								32584
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 1244,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639863485.29,
							"tabs_extra_last_activated_sheet_index": 4,
							"tabs_extra_moving":
							[
								5,
								1
							],
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 23053.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "vector.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6117,
						"regions":
						{
						},
						"selection":
						[
							[
								2459,
								2533
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 82,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639425637.32,
							"tabs_extra_last_activated_sheet_index": 1,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1139.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "vector.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4311,
						"regions":
						{
						},
						"selection":
						[
							[
								2039,
								2045
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 109,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639425638.68,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1292.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "location.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2210,
						"regions":
						{
						},
						"selection":
						[
							[
								422,
								422
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 20,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639425552.55,
							"tabs_extra_last_activated_sheet_index": 3,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "location.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1292,
						"regions":
						{
						},
						"selection":
						[
							[
								996,
								1000
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 36,
							"syntax": "Packages/C Improved/C Improved.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1639423982.23,
							"tabs_extra_last_activated_sheet_index": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.746948301807,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"tree-wa",
				"quickjs-tree-walker.c"
			],
			[
				"path.c",
				"path.c"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"quick",
				"quickjs-xml.c"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"predi",
				"predicate.c"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"",
				"tests/test_xml.js"
			],
			[
				"quickjs-in",
				"quickjs-internal.h"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"doxy",
				"Doxyfile"
			],
			[
				"Doxyfile",
				"Doxyfile"
			],
			[
				"interna",
				"quickjs-internal.h"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"child",
				"child-process.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"qsort_r",
				"qsort_r.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"quicksj-misc",
				"quickjs-misc.c"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-mm",
				"quickjs-mmap.c"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"quickjs-m",
				"quickjs-misc.c"
			],
			[
				"redicate.c",
				"predicate.c"
			],
			[
				"sockets.h",
				"quickjs-sockets.h"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"buffer-",
				"buffer-utils.h"
			],
			[
				"parser.js",
				"lib/parser.js"
			],
			[
				"char-",
				"char-utils.h"
			],
			[
				"test_par",
				"tests/test_parser.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"conso",
				"lib/console.js"
			],
			[
				"clang-f",
				".clang-format"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"test_mi",
				"tests/test_misc.js"
			],
			[
				"ockets.",
				"quickjs-sockets.h"
			],
			[
				"quickjs-ar",
				"quickjs-archive.c"
			],
			[
				"fd_set",
				"lib/fd_set.js"
			],
			[
				"buffer-ut",
				"buffer-utils.c"
			],
			[
				"misc.",
				"quickjs-misc.h"
			],
			[
				"qjsm.",
				"qjsm.c"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"socklen_t.js",
				"lib/socklen_t.js"
			],
			[
				"str.h",
				"quickjs-stringdecoder.h"
			],
			[
				"quickjs-libc",
				"~/Sources/plot-cv/quickjs/quickjs-libc.h"
			],
			[
				"quickjs-sock",
				"quickjs-sockets.c"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"test_loca",
				"tests/test_location.js"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				".clang-fo",
				".clang-format"
			],
			[
				"buff",
				"buffer-utils.c"
			],
			[
				"buffer-util",
				"buffer-utils.c"
			],
			[
				"buffer-utils.c",
				"buffer-utils.c"
			],
			[
				"quickjs-so",
				"quickjs-sockets.c"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"quickjs-insp",
				"quickjs-inspect.c"
			],
			[
				"test_soc",
				"tests/test_sockets.js"
			],
			[
				"test_qjsm",
				"tests/test_qjsm.js"
			],
			[
				"buffer-tu",
				"buffer-utils.c"
			],
			[
				"repl.",
				"lib/repl.js"
			],
			[
				"quickjs-blo",
				"quickjs-blob.c"
			],
			[
				"cmake",
				"CMakeLists.txt"
			],
			[
				"test_mis",
				"tests/test_misc.js"
			],
			[
				"test_blob",
				"tests/test_blob.js"
			],
			[
				"test_string",
				"tests/test_stringdecoder.js"
			],
			[
				"test_str",
				"tests/test_stringdecoder.js"
			],
			[
				"quickjs-blb",
				"quickjs-blob.h"
			],
			[
				"ringbuffer.h",
				"ringbuffer.h"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"quickjsmo",
				"cmake/QuickJSModule.cmake"
			],
			[
				"inspe",
				"quickjs-inspect.c"
			],
			[
				"misc",
				"quickjs-misc.c"
			],
			[
				"deep",
				"quickjs-deep.c"
			],
			[
				"terminal.",
				"lib/terminal.js"
			],
			[
				"tty.js",
				"lib/tty.js"
			],
			[
				"intern",
				"quickjs-internal.h"
			],
			[
				"test_chil",
				"tests/test_childprocess.js"
			],
			[
				"pointer.h",
				"pointer.h"
			],
			[
				"stack",
				"lib/stack.js"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"quickjs.c",
				"~/Projects/plot-cv/quickjs/quickjs.c"
			],
			[
				"pointer.c",
				"pointer.c"
			],
			[
				"-insp",
				"quickjs-inspect.c"
			],
			[
				"test_op",
				"tests/test_op_overloading.js"
			],
			[
				"lexer.c",
				"lexer.c"
			],
			[
				"quickjs-lexer",
				"quickjs-lexer.c"
			],
			[
				"test_qjs",
				"tests/test_qjsm.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"dee",
				"quickjs-deep.c"
			],
			[
				"test_qj",
				"tests/test_qjsm.js"
			],
			[
				"quicksj-in",
				"quickjs-internal.h"
			],
			[
				"property",
				"property-enumeration.c"
			],
			[
				"pointer.",
				"pointer.c"
			],
			[
				"quickjs",
				"quickjs-inspect.c"
			],
			[
				"util.j",
				"lib/util.js"
			],
			[
				"jsm.c",
				"qjsm.c"
			],
			[
				"test_point",
				"tests/test_pointer.js"
			],
			[
				"bnflex",
				"lib/bnflexer.js"
			],
			[
				"bnf.y",
				"~/Projects/plot-cv/lib/grammars/bnf.y"
			],
			[
				"grammar.ki",
				"grammar.kison"
			],
			[
				"test_pat",
				"tests/test_path.js"
			],
			[
				"test_parse",
				"tests/test_parser.js"
			],
			[
				"test_path",
				"tests/test_path.js"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"test_tree",
				"tests/test_treewalker.js"
			],
			[
				"tree.h",
				"src/tree.h"
			],
			[
				"scan_ulongn",
				"lib/scan/scan_ulongn.c"
			],
			[
				"term_rest",
				"src/term/term_restore.c"
			],
			[
				"parse.h",
				"src/parse.h"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 282.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
