{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"expo",
				"exportedNames"
			],
			[
				"exporte",
				"exportedNames"
			],
			[
				"js_is_",
				"js_is_identifier_len"
			],
			[
				"getAt",
				"getAttributeNames"
			],
			[
				"self",
				"self_closing_tags"
			],
			[
				"self_",
				"self_closing_tags"
			],
			[
				"JS_",
				"JS_ThrowOutOfMemory"
			],
			[
				"JS_PROP",
				"JS_PROP_ENUMERABLE"
			],
			[
				"depe",
				"dependencyMap"
			],
			[
				"de",
				"dependencyMap"
			],
			[
				"dep",
				"dependencyMap"
			],
			[
				"js_is_null",
				"js_is_null_or_undefined"
			],
			[
				"JS_P",
				"JS_PROP_ENUMERABLE"
			],
			[
				"JS_SetP",
				"JS_SetPropertyUint32"
			],
			[
				"spec",
				"specifiers"
			],
			[
				"Num",
				"NumericRange"
			],
			[
				"token_r",
				"token_release_rt"
			],
			[
				"JS_Thr",
				"JS_ThrowTypeError"
			],
			[
				"js_",
				"js_location_data"
			],
			[
				"debug_js_mall",
				"debug_js_malloc_usable_size"
			],
			[
				"repl",
				"replaceRange"
			],
			[
				"js_malloc_u",
				"js_malloc_usable_size_rt"
			],
			[
				"malloc",
				"malloc_usable_size"
			],
			[
				"all",
				"alloc_block_list"
			],
			[
				"alloc",
				"alloc_block_list"
			],
			[
				"path_skip",
				"path_skip_component"
			],
			[
				"JS_Set",
				"JS_SetPropertyUint32"
			],
			[
				"jsm_mo",
				"jsm_module_loader"
			],
			[
				"JS_Throw",
				"JS_ThrowInternalError"
			],
			[
				"JS_AtomTo",
				"JS_AtomToValue"
			],
			[
				"inspect",
				"inspectSymbol"
			],
			[
				"at",
				"attributes"
			],
			[
				"parent",
				"parentElement"
			],
			[
				"owner",
				"ownerElement"
			],
			[
				"get",
				"getPrototypeOf"
			],
			[
				"child",
				"childElementCount"
			],
			[
				"getO",
				"getOwnPropertyNames"
			],
			[
				"getOwn",
				"getOwnPropertySymbols(...)"
			],
			[
				"js_misc_im",
				"js_misc_immutable_constructor"
			],
			[
				"obj",
				"object_tostring"
			],
			[
				"js_misc_immu",
				"js_misc_immutable_free"
			],
			[
				"js_misc_imm",
				"js_misc_immutable_constructor"
			],
			[
				"JS_GetPr",
				"JS_GetPropertyStr"
			],
			[
				"CMAKE_IMPORT",
				"CMAKE_IMPORT_LIBRARY_SUFFIX"
			],
			[
				"CMAKE_CUR",
				"CMAKE_CURRENT_BINARY_DIR"
			],
			[
				"js_is",
				"js_is_null_or_undefined"
			],
			[
				"js_asy",
				"js_async_socket_class_id"
			],
			[
				"JS_NewObj",
				"JS_NewObjectProtoClass"
			],
			[
				"JS_Th",
				"JS_ThrowOutOfMemory"
			],
			[
				"async_",
				"async_socket_proto"
			],
			[
				"JS_Get",
				"JS_GetOpaque"
			],
			[
				"js_socket_class",
				"js_socket_class_id"
			],
			[
				"g",
				"getOwnPropertyNames(...)"
			],
			[
				"JS_Free",
				"JS_FreeCString"
			],
			[
				"js_sockaddr_cl",
				"js_sockaddr_class_id"
			],
			[
				"js_so",
				"js_sockaddr_constructor"
			],
			[
				"js_sys",
				"js_syscallerror_class_id"
			],
			[
				"js_string",
				"js_stringdecoder_class_id"
			],
			[
				"js_pred",
				"js_predicate_class_id"
			],
			[
				"js_syn",
				"js_syntaxerror_class"
			],
			[
				"js_child",
				"js_child_process_class_id"
			],
			[
				"js_b",
				"js_blob_class_id"
			],
			[
				"js_loca",
				"js_location_class_id"
			],
			[
				"js_token_in",
				"js_token_inspect_funcs"
			],
			[
				"JS_SetPr",
				"JS_SetPropertyFunctionList"
			],
			[
				"set",
				"setReadHandler"
			],
			[
				"js_get_",
				"js_get_propertystr_bool"
			],
			[
				"js_misc_ate",
				"js_misc_atexit_functions"
			],
			[
				"isF",
				"isFunction"
			],
			[
				"tab",
				"tab_atom_len"
			],
			[
				"isARr",
				"isArrayBuffer"
			],
			[
				"BIT",
				"BITFIELD_FROMARRAY"
			],
			[
				"to",
				"toStringTag"
			],
			[
				"inotify",
				"inotify_add_watch"
			],
			[
				"JS_SetProp",
				"JS_SetPropertyUint32"
			],
			[
				"JS_GEt",
				"JS_GetGlobalObject"
			],
			[
				"dbuf_put",
				"dbuf_put_colorstr"
			],
			[
				"REPEATER_",
				"REPEATER_REJECTED"
			],
			[
				"REP",
				"REPEATER_DONE"
			],
			[
				"resol",
				"resolving_funcs"
			],
			[
				"JS_NEwCFun",
				"JS_NewCFunctionData"
			],
			[
				"js_function",
				"js_function_bind_this"
			],
			[
				"js_repeater_iter",
				"js_repeater_iteration"
			],
			[
				"REPEA",
				"REPEATER_REJECTED"
			],
			[
				"JS_New",
				"JS_NewCFunctionData"
			],
			[
				"exe",
				"execution"
			],
			[
				"REPEAT",
				"REPEATER_STOPPED"
			],
			[
				"JS_THro",
				"JS_ThrowOutOfMemory"
			],
			[
				"repeater",
				"repeater_finalizer"
			],
			[
				"BACK",
				"BACKGROUND_RED"
			],
			[
				"js_inspec",
				"js_inspect_tostring"
			],
			[
				"JS_Atom",
				"JS_AtomToValue"
			],
			[
				"JS_GetP",
				"JS_GetPropertyStr"
			],
			[
				"js_misc_glob_err",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"js_misc",
				"js_misc_glob"
			],
			[
				"js_mi",
				"js_misc_glob_errfunc"
			],
			[
				"js_misc_glob_",
				"js_misc_glob_errfunc_ctx"
			],
			[
				"JS_VALUE_",
				"JS_VALUE_GET_OBJ"
			],
			[
				"js_io_Read",
				"js_io_readhandler_fn"
			],
			[
				"JS_NewS",
				"JS_NewStringLen"
			],
			[
				"target_link",
				"target_link_directories"
			],
			[
				"brea",
				"breakLength"
			],
			[
				"WIF",
				"WIFSIGNALED"
			],
			[
				"JS_VALUE",
				"JS_VALUE_GET_PTR"
			],
			[
				"module_",
				"module_func"
			],
			[
				"initiali",
				"initialization"
			],
			[
				"qjsm_sock",
				"qjsm_socklen_t_size"
			],
			[
				"getCas",
				"getClassConstructor"
			],
			[
				"js_syscall",
				"js_syscallerror_proto_funcs"
			],
			[
				"syscal",
				"syscallerror_proto"
			],
			[
				"JS_SetProper",
				"JS_SetPropertyStr"
			],
			[
				"JS_CGET",
				"JS_CGETSET_ENUMERABLE_DEF"
			],
			[
				"sys",
				"syscallerror_ctor"
			],
			[
				"Sys",
				"SyscallError"
			],
			[
				"JS_CGETSET",
				"JS_CGETSET_MAGIC_DEF"
			],
			[
				"JS_T",
				"JS_ThrowTypeError"
			],
			[
				"JS_Thro",
				"JS_ThrowOutOfMemory"
			],
			[
				"STRING",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDECODER_EN",
				"STRINGDECODER_ENCODING"
			],
			[
				"STRINGDE",
				"STRINGDECODER_END"
			],
			[
				"ringbuffer_",
				"ringbuffer_continuous_length"
			],
			[
				"string",
				"stringdecoder_proto"
			],
			[
				"ringbuffer_res",
				"ringbuffer_resize"
			],
			[
				"ringb",
				"ringbuffer_normalize"
			],
			[
				"ringbuffer",
				"ringbuffer_length"
			],
			[
				"ring",
				"ringbuffer_full"
			],
			[
				"STRINGDEC",
				"STRINGDECODER_END"
			],
			[
				"Ar",
				"ArchiveEntryRef"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "ArgumentError\n  constructor(...args)\nNormalizePath(p)\nFdWriter(fd, name)\n  inspect()\nImportIds(seq)\nImpExpType(seq)\nImportType(seq)\nImportFile(seq)\nExportName(seq)\nByteSequence(tokens)\nModuleLoader(module)\n  self = function ParentheseBalancer(tok)\n  reset()\n  get depth()\nExport\nExport\n  ids()\nImport\nImport\n  ids()\nAddDep(source, file)\nNonWS(tokens)\nTokenSequence(tokens)\n  toString()\nUnquote(lexeme)\nLiteralSequence(tokens)\nUntilEOL(idx, tokens)\nUntil(idx, tokens, pred = \nWholeLine(idx, tokens)\nRange(file, start, end)\nRange.prototype.toString = function()\nInRange([start, end], i)\nIsRange(obj)\nNumericRange\n  constructor(start, end)\n  get start()\n  set start(value)\n  get end()\n  set end(value)\n  static from(range)\n  static *holes(ranges, only = false)\n  static between([s1, e1], [s2, e2])\nNumericRange\nFileMap\n  constructor(file, buf)\n  static empty(file)\n  isEmpty()\n  static for(file, buf)\n  isEmpty()\n  toString()\nFileMap\n  splitAt(pos)\n  sliceAt(n)\n  replaceRange(range, file)\n  dump()\n  at(i)\n  toArray()\n  holes()\n  firstChunk()\n  lastChunk()\n  write(out, depth = 0, serial)\n  toString(fn = FileBannerComment)\nFileMap\nFileMap\n  function(depth, opts)\nBufferFile(file, buf)\nBufferLengths(file)\nBufferOffsets(file)\nBufferRanges(file)\nWriteFile(file, tok)\nDumpLexer(lex)\nDumpToken(tok)\n  stripLeadingDotSlash(n)\nSpreadAndJoin(iterator, separator = '')\nPrintES6Import(imp)\nPrintCJSImport({ type, local, file })\n  main(...args)\n  write(buf, len)\n  puts(s)\n  close()",
			"settings":
			{
				"buffer_size": 1471,
				"line_ending": "Unix",
				"name": "ùåÜ Outline",
				"scratch": true
			},
			"undo_stack":
			[
				[
					3,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								507,
								520
							],
							[
								539,
								559
							],
							[
								986,
								1001
							],
							[
								1036,
								1042
							],
							[
								1099,
								1124
							],
							[
								1338,
								1374
							],
							[
								1695,
								1720
							],
							[
								1757,
								1784
							],
							[
								1853,
								1879
							],
							[
								1937,
								1957
							],
							[
								2028,
								2046
							],
							[
								2296,
								2309
							],
							[
								2337,
								2343
							],
							[
								2396,
								2418
							],
							[
								2766,
								2790
							],
							[
								3111,
								3141
							],
							[
								3217,
								3238
							],
							[
								3285,
								3313
							],
							[
								3324,
								3337
							],
							[
								3427,
								3440
							],
							[
								3706,
								3712
							],
							[
								3797,
								3817
							],
							[
								3934,
								3946
							],
							[
								3970,
								3997
							],
							[
								4052,
								4070
							],
							[
								4496,
								4508
							],
							[
								4517,
								4542
							],
							[
								4626,
								4635
							],
							[
								4724,
								4747
							],
							[
								4770,
								4776
							],
							[
								4806,
								4830
							],
							[
								4847,
								4853
							],
							[
								4915,
								4921
							],
							[
								4971,
								4995
							],
							[
								5312,
								5336
							],
							[
								5425,
								5431
							],
							[
								5712,
								5736
							],
							[
								5765,
								5771
							],
							[
								5922,
								5951
							],
							[
								6067,
								6076
							],
							[
								6227,
								6256
							],
							[
								6516,
								6582
							],
							[
								7305,
								7322
							],
							[
								7622,
								7640
							],
							[
								7683,
								7699
							],
							[
								7792,
								7831
							],
							[
								8164,
								8168
							],
							[
								8307,
								8314
							],
							[
								8377,
								8388
							],
							[
								8586,
								8604
							],
							[
								8900,
								8917
							],
							[
								10350,
								10354
							],
							[
								10959,
								11007
							],
							[
								11264,
								11270
							],
							[
								11774,
								11780
							],
							[
								11836,
								11842
							],
							[
								12515,
								12521
							],
							[
								12552,
								12558
							],
							[
								12646,
								12652
							],
							[
								13175,
								13181
							],
							[
								13207,
								13213
							],
							[
								13231,
								13236
							],
							[
								13279,
								13294
							],
							[
								13317,
								13372
							],
							[
								14420,
								14426
							],
							[
								14549,
								14555
							],
							[
								14711,
								14717
							],
							[
								15292,
								15298
							],
							[
								15347,
								15353
							],
							[
								15520,
								15526
							],
							[
								15544,
								15549
							],
							[
								15600,
								15615
							],
							[
								15801,
								15807
							],
							[
								15827,
								15833
							],
							[
								15850,
								15856
							],
							[
								16110,
								16119
							],
							[
								16191,
								16197
							],
							[
								16302,
								16315
							],
							[
								16417,
								16421
							],
							[
								19809,
								19838
							],
							[
								19988,
								20010
							],
							[
								20036,
								20042
							],
							[
								20073,
								20103
							],
							[
								20138,
								20144
							],
							[
								20170,
								20180
							],
							[
								20235,
								20259
							],
							[
								20320,
								20352
							],
							[
								20378,
								20391
							],
							[
								20418,
								20448
							],
							[
								20501,
								20536
							],
							[
								20541,
								20561
							],
							[
								20675,
								20706
							],
							[
								20984,
								21016
							],
							[
								21191,
								21228
							],
							[
								21312,
								21345
							],
							[
								21408,
								21429
							],
							[
								21535,
								21547
							],
							[
								21566,
								21589
							],
							[
								21722,
								21733
							],
							[
								21762,
								21778
							],
							[
								21810,
								21819
							],
							[
								21848,
								21862
							],
							[
								21894,
								21912
							],
							[
								22144,
								22179
							],
							[
								22965,
								22999
							],
							[
								23083,
								23095
							],
							[
								23285,
								23295
							],
							[
								23541,
								23548
							],
							[
								23567,
								23589
							],
							[
								23961,
								23979
							],
							[
								24121,
								24130
							],
							[
								24158,
								24179
							],
							[
								24420,
								24429
							],
							[
								24474,
								24484
							],
							[
								24615,
								24622
							],
							[
								24737,
								24749
							],
							[
								24779,
								24796
							],
							[
								25006,
								25016
							],
							[
								25066,
								25084
							],
							[
								25130,
								25155
							],
							[
								25269,
								25286
							],
							[
								26931,
								26937
							],
							[
								27079,
								27091
							],
							[
								27135,
								27165
							],
							[
								27673,
								27678
							],
							[
								28263,
								28272
							],
							[
								28295,
								28304
							],
							[
								28325,
								28332
							],
							[
								28365,
								28377
							],
							[
								28883,
								28895
							],
							[
								28924,
								28944
							],
							[
								29008,
								29019
							],
							[
								29052,
								29072
							],
							[
								29136,
								29165
							],
							[
								30680,
								30712
							],
							[
								31117,
								31124
							],
							[
								31168,
								31175
							],
							[
								31203,
								31225
							],
							[
								31254,
								31274
							],
							[
								31469,
								31481
							],
							[
								31659,
								31666
							],
							[
								31955,
								31985
							],
							[
								32301,
								32329
							],
							[
								32359,
								32363
							],
							[
								32382,
								32410
							],
							[
								32443,
								32462
							],
							[
								32521,
								32548
							],
							[
								32581,
								32600
							],
							[
								32675,
								32704
							],
							[
								32822,
								32845
							],
							[
								32985,
								33008
							],
							[
								33137,
								33277
							],
							[
								34005,
								34039
							],
							[
								34106,
								34154
							],
							[
								34200,
								34228
							],
							[
								34277,
								34298
							],
							[
								34372,
								34393
							],
							[
								34454,
								34475
							],
							[
								34548,
								34594
							],
							[
								34643,
								34649
							],
							[
								34723,
								34729
							],
							[
								34795,
								34801
							],
							[
								34872,
								34894
							],
							[
								35355,
								35370
							],
							[
								35456,
								35463
							],
							[
								35553,
								35560
							],
							[
								35901,
								35907
							],
							[
								35940,
								35948
							],
							[
								36115,
								36121
							],
							[
								36169,
								36176
							],
							[
								36238,
								36246
							],
							[
								36303,
								36309
							],
							[
								36368,
								36374
							],
							[
								36436,
								36442
							],
							[
								36505,
								36511
							],
							[
								36574,
								36580
							],
							[
								36638,
								36644
							],
							[
								36993,
								37015
							],
							[
								37365,
								37371
							],
							[
								37376,
								37389
							],
							[
								37789,
								37819
							],
							[
								37832,
								37838
							],
							[
								38003,
								38012
							],
							[
								38057,
								38063
							],
							[
								38168,
								38197
							],
							[
								39068,
								39082
							],
							[
								39384,
								39398
							],
							[
								39553,
								39566
							],
							[
								39603,
								39610
							]
						],
						"symlist":
						[
							"ArgumentError",
							"constructor(...args)",
							"logFile = () =>",
							"arg =>",
							"function NormalizePath(p)",
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"IsWhiteSpace = str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function ModuleLoader(module)",
							"function ProcessFile(source, log = () => {}, recursive, depth = 0)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							" function Export(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Export",
							"Export",
							"ids()",
							"({ lexeme }) =>",
							" function Import(tokens, relativePath = s => s, depth)",
							"Import",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Import",
							"ids()",
							"({ lexeme }) =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function AddDep(source, file)",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"firstChunk()",
							"([range, buf], i) =>",
							"lastChunk()",
							"([range, buf], i) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"(item, i) =>",
							"item =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function* DependencyTree( root, indent = ' ', spacing = false, depth = 0, pre = '', fn = (name, depth) => `${name} (${depth})` )",
							" function stripLeadingDotSlash(n)",
							"function SpreadAndJoin(iterator, separator = '')",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							"write(buf, len)",
							"puts(s)",
							"close()",
							" () =>",
							" file =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"ContainsAny = (arr, tokens) =>",
							"tok =>",
							"impexp =>",
							"hdr =>",
							" ([acc, prev], hdr) =>",
							"(acc, line) =>",
							"({ depth }) =>",
							"({ name }) =>",
							"name =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACdCAAAICBkZWZpbmUob2JqLCAuLi5hcmdzKQogIG9uY2UoZm4sIHRoaXNBcmcsIG1lbW9GbikKICBmdW5jdGlvbiguLi5hcmdzKQpSRVBMCiAgY29uc3RydWN0b3IobmFtZSwgc2hvd19iYW5uZXIgPSB0cnVlKQogIGFkZENsZWFudXBIYW5kbGVyKGZuKQogIGV4aXQoZXhpdENvZGUgPSAwKQogIGFib3J0KCkKICBhY2NlcHRMaW5lKCkKICBhbGVydCgpCiAgYmFja3dhcmRDaGFyKCkKICBiYWNrd2FyZERlbGV0ZUNoYXIoKQogIGJhY2t3YXJkS2lsbExpbmUoKQogIGJhY2t3YXJkS2lsbFdvcmQoKQogIGJhY2t3YXJkV29yZCgpCiAgYmVnaW5uaW5nT2ZMaW5lKCkKICBiaWdmbG9hdFRvU3RyaW5nKGEsIHJhZGl4KQogIGJpZ2ludFRvU3RyaW5nKGEsIHJhZGl4KQogIGNtZFJlYWRsaW5lU3RhcnQoKQogIGNtZFN0YXJ0KHNob3dfYmFubmVyID0gdHJ1ZSkKICBjb2xvcml6ZUpzKHN0cikKICBwdXNoU3RhdGUoYykKICBsYXN0U3RhdGUoYykKICBwb3BTdGF0ZShjKQogIHBhcnNlQmxvY2tDb21tZW50KCkKICBwYXJzZUxpbmVDb21tZW50KCkKICBwYXJzZVN0cmluZyhkZWxpbSkKICBwYXJzZVJlZ2V4KCkKICBwYXJzZU51bWJlcigpCiAgcGFyc2VJZGVudGlmaWVyKCkKICBzZXRTdHlsZShmcm9tLCB0bykKICBjb21wbGV0aW9uKCkKICBjb250cm9sQygpCiAgY29udHJvbEQoKQogIGRlbGV0ZUNoYXIoKQogIGRlbGV0ZUNoYXJEaXIoZGlyKQogIGRvd25jYXNlV29yZCgpCiAgZHVwc3RyKHN0ciwgY291bnQpCiAgZW5kT2ZMaW5lKCkKICByZWFkbGluZVJlbW92ZVByb21wdCgpCiAgZXZhbEFuZFByaW50KGV4cHIpCiAgZXh0cmFjdERpcmVjdGl2ZShhKQogIGZvcndhcmRDaGFyKCkKICBmb3J3YXJkV29yZCgpCiAgZ2V0Q29tcGxldGlvbnMobGluZSwgcG9zKQogIHN5bWNtcChhLCBiKQogIGdldENvbnRleHRPYmplY3QobGluZSwgcG9zKQogIGdldENvbnRleHRXb3JkKGxpbmUsIHBvcykKICBoYW5kbGVCeXRlKGMpCiAgaGFuZGxlQ2hhcihjMSkKICBoYW5kbGVNb3VzZShrZXlzKQogIGhhbmRsZUNtZChleHByKQogIGhhc0RpcmVjdGl2ZShjbWQpCiAgZ2V0RGlyZWN0aXZlKGNtZCkKICBoYW5kbGVEaXJlY3RpdmUoY21kLCBleHByKQogIGhhbmRsZUtleShrZXlzKQogIGhlbHAoKQogIHNlbChuKQogIGhpc3RvcnlGaWxlKCkKICBoaXN0b3J5TG9hZChmaWxlbmFtZSwgZnMpCiAgaGlzdG9yeVNhdmUoZmlsZW5hbWUsIGZzKQogIGhpc3RvcnlDbGVhcigpCiAgaGlzdG9yeUFkZChzdHIpCiAgaGlzdG9yeVNlYXJjaChkaXIpCiAgaGlzdG9yeVNlYXJjaEJhY2t3YXJkKCkKICBoaXN0b3J5U2VhcmNoRm9yd2FyZCgpCiAgc2V0IGhpc3RvcnkoZW50cmllcykKICBnZXQgaGlzdG9yeSgpCiAgaGlzdG9yeVBvcygpCiAgaW5zZXJ0KHN0cikKICBraWxsTGluZSgpCiAga2lsbFJlZ2lvbihzdGFydCwgZW5kLCBkaXIpCiAga2lsbFdvcmQoKQogIG1vdmVDdXJzb3IoZGVsdGEpCiAgbmV4dEhpc3RvcnkoKQogIG51bWJlclRvU3RyaW5nKGEsIHJhZGl4KQogIHByZXZpb3VzSGlzdG9yeSgpCiAgcHJpbnQoYSkKICBwcmludFJlYyhhKQogIHByaW50U3RhdHVzKGZuLCBwcm9tcHQgPSB0cnVlKQogIHByaW50RnVuY3Rpb24obG9nRm4pCiAgcXVvdGVkSW5zZXJ0KCkKICByZXZlcnNlU2VhcmNoKCkKICBmb3J3YXJkU2VhcmNoKCkKICBzZWFyY2hDYihwYXR0ZXJuKQogIHJlYWRsaW5lSGFuZGxlQ21kKGV4cHIpCiAgcmVhZGxpbmVQcmludFByb21wdCgpCiAgcmVhZGxpbmVTdGFydChkZWZzdHIsIGNiKQogIHJlc2V0KCkKICBydW4oKQogIHJ1blN5bmMoKQogIHNpZ2ludEhhbmRsZXIoKQogIHNraXBXb3JkQmFja3dhcmQocG9zKQogIHNraXBXb3JkRm9yd2FyZChwb3MpCiAgdGVybUluaXQoKQogIG1vdXNlVHJhY2tpbmcoZW5hYmxlID0gdHJ1ZSkKICBzZXR1cE1vdXNlVHJhY2tpbmcoZnMgPSBmcykKICB0ZXJtUmVhZEhhbmRsZXIoKQogIHRyYW5zcG9zZUNoYXJzKCkKICB0cmFuc3Bvc2VXb3JkcygpCiAgdXBjYXNlV29yZCgpCiAgdXBkYXRlKCkKICB5YW5rKCkKUkVQTApSRVBMCiAgaXNBbHBoYShjKQogIGlzRGlnaXQoYykKICBpc1dvcmQoYykKICB1Y3NMZW5ndGgoc3RyKQogIHJvdGF0ZUxlZnQoYXJyYXksIG4pCiAgaXNUcmFpbGluZ1N1cnJvZ2F0ZShjKQogIGlzQmFsYW5jZWQoYSwgYikKICBwcmludENvbG9yVGV4dChzdHIsIHN0YXJ0LCBzdHlsZV9uYW1lcykKICBwcmludENzaShuLCBjb2RlKQpSRVBMAAAAAAAAAAC/BQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					4,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
						"symkeys":
						[
							[
								734,
								754
							],
							[
								974,
								990
							],
							[
								1044,
								1063
							],
							[
								1098,
								1114
							],
							[
								1156,
								1171
							],
							[
								1234,
								1268
							],
							[
								1291,
								1323
							],
							[
								1346,
								1389
							],
							[
								3218,
								3237
							],
							[
								3335,
								3351
							],
							[
								3413,
								3431
							],
							[
								3495,
								3514
							],
							[
								3579,
								3588
							],
							[
								3643,
								3660
							],
							[
								3723,
								3740
							],
							[
								3803,
								3817
							],
							[
								3877,
								3892
							],
							[
								3953,
								3968
							],
							[
								4029,
								4037
							],
							[
								4091,
								4103
							],
							[
								4161,
								4171
							],
							[
								4227,
								4238
							],
							[
								4295,
								4303
							],
							[
								4357,
								4379
							],
							[
								4447,
								4462
							],
							[
								4523,
								4545
							],
							[
								4613,
								4629
							],
							[
								4691,
								4707
							],
							[
								4769,
								4781
							],
							[
								4839,
								4851
							],
							[
								4909,
								4922
							],
							[
								4981,
								4999
							],
							[
								5057,
								5075
							],
							[
								5139,
								5161
							],
							[
								5229,
								5256
							],
							[
								5329,
								5346
							],
							[
								5403,
								5420
							],
							[
								5477,
								5494
							],
							[
								5541,
								5557
							],
							[
								5640,
								5656
							],
							[
								5728,
								5744
							],
							[
								5816,
								5833
							],
							[
								5890,
								5910
							],
							[
								5969,
								5989
							],
							[
								6148,
								6167
							],
							[
								6243,
								6250
							],
							[
								6279,
								6299
							],
							[
								6369,
								6384
							],
							[
								6445,
								6471
							],
							[
								6542,
								6558
							],
							[
								6614,
								6627
							],
							[
								6704,
								6722
							],
							[
								6804,
								6817
							],
							[
								6882,
								6896
							],
							[
								6998,
								7024
							],
							[
								7070,
								7095
							],
							[
								7180,
								7222
							],
							[
								7356,
								7396
							],
							[
								10325,
								10368
							],
							[
								10785,
								10820
							],
							[
								10976,
								10994
							],
							[
								11024,
								11029
							],
							[
								11119,
								11146
							],
							[
								11265,
								11300
							],
							[
								11361,
								11365
							],
							[
								11381,
								11385
							],
							[
								11412,
								11421
							],
							[
								11584,
								11617
							],
							[
								11671,
								11703
							],
							[
								11867,
								11900
							],
							[
								12096,
								12117
							],
							[
								12187,
								12193
							],
							[
								12210,
								12226
							],
							[
								12295,
								12301
							],
							[
								12314,
								12330
							],
							[
								12503,
								12508
							],
							[
								12522,
								12531
							],
							[
								12581,
								12608
							],
							[
								12653,
								12659
							],
							[
								12704,
								12716
							],
							[
								12746,
								12779
							],
							[
								12837,
								12843
							],
							[
								12958,
								12970
							],
							[
								13024,
								13036
							],
							[
								13184,
								13195
							],
							[
								13237,
								13270
							],
							[
								13328,
								13337
							],
							[
								13459,
								13480
							],
							[
								13541,
								13562
							],
							[
								13720,
								13734
							],
							[
								13783,
								13822
							],
							[
								13895,
								13909
							],
							[
								14064,
								14081
							],
							[
								14222,
								14239
							],
							[
								14270,
								14287
							],
							[
								14387,
								14404
							],
							[
								14696,
								14710
							],
							[
								14756,
								14780
							],
							[
								14830,
								14834
							],
							[
								14874,
								14901
							],
							[
								15131,
								15151
							],
							[
								15181,
								15192
							],
							[
								15291,
								15326
							],
							[
								15366,
								15384
							],
							[
								15571,
								15592
							],
							[
								15616,
								15626
							],
							[
								15665,
								15695
							],
							[
								16243,
								16277
							],
							[
								16584,
								16618
							],
							[
								16838,
								16872
							],
							[
								16938,
								16974
							],
							[
								17049,
								17066
							],
							[
								17225,
								17262
							],
							[
								17263,
								17277
							],
							[
								17283,
								17287
							],
							[
								17362,
								17394
							],
							[
								17422,
								17448
							],
							[
								17773,
								17795
							],
							[
								17846,
								17862
							],
							[
								17877,
								17884
							],
							[
								17912,
								17928
							],
							[
								17969,
								17997
							],
							[
								18216,
								18233
							],
							[
								18234,
								18243
							],
							[
								18295,
								18312
							],
							[
								18313,
								18322
							],
							[
								18382,
								18399
							],
							[
								18400,
								18423
							],
							[
								18479,
								18503
							],
							[
								21130,
								21158
							],
							[
								21589,
								21593
							],
							[
								21721,
								21734
							],
							[
								22050,
								22062
							],
							[
								22325,
								22338
							],
							[
								22443,
								22457
							],
							[
								23350,
								23378
							],
							[
								23494,
								23507
							],
							[
								23619,
								23645
							],
							[
								23835,
								23883
							],
							[
								23931,
								24043
							],
							[
								24148,
								24171
							],
							[
								24310,
								24362
							],
							[
								24456,
								24472
							],
							[
								24556,
								24567
							],
							[
								24680,
								24684
							],
							[
								24963,
								24996
							],
							[
								25110,
								25162
							],
							[
								25336,
								25372
							],
							[
								25529,
								25545
							],
							[
								25563,
								25585
							],
							[
								25698,
								25704
							],
							[
								25808,
								25821
							],
							[
								27229,
								27271
							],
							[
								27466,
								27497
							],
							[
								27547,
								27589
							],
							[
								27709,
								27733
							],
							[
								27953,
								27963
							],
							[
								28016,
								28020
							],
							[
								28059,
								28086
							],
							[
								28133,
								28145
							],
							[
								28215,
								28227
							],
							[
								28290,
								28315
							],
							[
								28360,
								28391
							],
							[
								28402,
								28419
							],
							[
								28560,
								28595
							],
							[
								28643,
								28670
							],
							[
								28761,
								28799
							],
							[
								29008,
								29056
							],
							[
								29644,
								29671
							],
							[
								29874,
								29888
							],
							[
								29937,
								29943
							],
							[
								29984,
								30050
							],
							[
								30052,
								30056
							],
							[
								30214,
								30221
							],
							[
								30313,
								30323
							],
							[
								30434,
								30443
							],
							[
								30549,
								30575
							],
							[
								30708,
								30739
							],
							[
								30914,
								30933
							],
							[
								30984,
								30992
							]
						],
						"symlist":
						[
							"slice = (x, s, e) =>",
							"stringify = v =>",
							"formatNumber = n =>",
							"isNative = fn =>",
							"function util()",
							"AsyncFunction = async function x()",
							"GeneratorFunction = function* ()",
							"AsyncGeneratorFunction = async function* ()",
							"isAnyArrayBuffer(v)",
							"isArrayBuffer(v)",
							"isBigInt64Array(v)",
							"isBigUint64Array(v)",
							"isDate(v)",
							"isFloat32Array(v)",
							"isFloat64Array(v)",
							"isInt8Array(v)",
							"isInt16Array(v)",
							"isInt32Array(v)",
							"isMap(v)",
							"isPromise(v)",
							"isProxy(v)",
							"isRegExp(v)",
							"isSet(v)",
							"isSharedArrayBuffer(v)",
							"isUint8Array(v)",
							"isUint8ClampedArray(v)",
							"isUint16Array(v)",
							"isUint32Array(v)",
							"isWeakMap(v)",
							"isWeakSet(v)",
							"isDataView(v)",
							"isBooleanObject(v)",
							"isAsyncFunction(v)",
							"isGeneratorFunction(v)",
							"isAsyncGeneratorFunction(v)",
							"isNumberObject(v)",
							"isBigIntObject(v)",
							"isSymbolObject(v)",
							"isNativeError(v)",
							"isMapIterator(v)",
							"isSetIterator(v)",
							"isStringObject(v)",
							"isArrayBufferView(v)",
							"isArgumentsObject(v)",
							"isBoxedPrimitive(v)",
							"ctor =>",
							"isGeneratorObject(v)",
							"isTypedArray(v)",
							"isModuleNamespaceObject(v)",
							"isConstructor(v)",
							"isIterable(v)",
							"isAsyncIterable(v)",
							"isIterator(v)",
							"isArrayLike(v)",
							" function hasBuiltIn(o, m)",
							" function format(...args)",
							" function formatWithOptions(opts, ...args)",
							"function formatWithOptionsInternal(o, v)",
							" function assert(actual, expected, message)",
							" function setInterval(callback, ms)",
							" function start()",
							"() =>",
							" function clearInterval(id)",
							" function inherits(ctor, superCtor)",
							"ctor",
							"ctor",
							"superCtor",
							" function memoize(fn, cache = {})",
							" function Memoize(n, ...rest)",
							" function getset(target, ...args)",
							"GetSet = (...args) =>",
							"key =>",
							" (key, value) =>",
							"key =>",
							" (key, value) =>",
							"() =>",
							" value =>",
							" function modifier(...args)",
							" fn =>",
							" newValue =>",
							" function getter(target, ...args)",
							" () =>",
							"ret = key =>",
							"ret = key =>",
							"ret = () =>",
							" function setter(target, ...args)",
							" value =>",
							"ret = (key, value) =>",
							"ret = (key, value) =>",
							"ret = value =>",
							" function gettersetter(target, ...args)",
							" (...args2) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							"fn = (...args) =>",
							" (...args2) =>",
							" function hasGetSet(obj)",
							"m =>",
							" function mapObject(target)",
							"set: (key, value) =>",
							"get: key =>",
							" function once(fn, thisArg, memoFn)",
							" function(...args)",
							" function waitFor(ms)",
							"resolve =>",
							" function define(obj, ...args)",
							" function weakAssign(obj, ...args)",
							" function getConstructorChain(obj)",
							" function hasPrototype(obj, proto)",
							" function filter(seq, pred, thisArg)",
							"pred = (el, i) =>",
							" (f, arr = [], length = f.length) =>",
							" (...args) =>",
							"a =>",
							" function* split(buf, ...points)",
							"splitAt = (b, pos, len) =>",
							"unique = (arr, cmp) =>",
							" (el, i, arr) =>",
							"item =>",
							" (el, i, arr) =>",
							"getFunctionArguments = fn =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" code =>",
							" (offset = 0) =>",
							" (red, green, blue) =>",
							"function getAnsiStyles()",
							"value: (red, green, blue) =>",
							"c =>",
							"value: hex =>",
							"character =>",
							"value: hex =>",
							"value: code =>",
							"value: (red, green, blue) =>",
							"value: hex =>",
							" function randInt(...args)",
							" function randFloat(min, max, rng = Math.random)",
							" function randStr(n, set = '_0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz', rng = Math.random)",
							" function toBigInt(arg)",
							" function lazyProperty(obj, name, getter, opts = {})",
							"async function()",
							" function()",
							"v =>",
							" function replaceProperty(value)",
							" function lazyProperties(obj, gettersObj, opts = {})",
							" function getOpt(options = {}, args)",
							"findOpt = arg =>",
							"([optname, option]) =>",
							"opt =>",
							"(acc, arg) =>",
							" function toUnixTime(dateObj, utc = false)",
							" function unixTime(utc = false)",
							" function fromUnixTime(epoch, utc = false)",
							" function range(...args)",
							" (v, k) =>",
							"n =>",
							" function repeater(n, what)",
							"function* ()",
							"function* ()",
							" function repeat(n, what)",
							" function chunkArray(arr, size)",
							"fn = (a, v, i) =>",
							" function camelize(str, delim = '')",
							" (match, p1, p2, offset) =>",
							" function decamelize(str, delim = '-')",
							" function shorten(str, max = 40, suffix = '...')",
							" function arraysInCommon(a)",
							"(itm, indx) =>",
							"arr =>",
							" function arrayFacade(proto, itemFn = (container, i) => container.",
							"(i))",
							"*keys()",
							"*entries()",
							"*values()",
							"forEach(callback, thisArg)",
							"reduce(callback, accu, thisArg)",
							" function mod(a, b)",
							"b : n =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/BQAAQXJndW1lbnRFcnJvcgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCk5vcm1hbGl6ZVBhdGgocCkKRmRXcml0ZXIoZmQsIG5hbWUpCiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCkltcEV4cFR5cGUoc2VxKQpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCkV4cG9ydE5hbWUoc2VxKQpCeXRlU2VxdWVuY2UodG9rZW5zKQpNb2R1bGVMb2FkZXIobW9kdWxlKQogIHNlbGYgPSBmdW5jdGlvbiBQYXJlbnRoZXNlQmFsYW5jZXIodG9rKQogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQpFeHBvcnQKRXhwb3J0CiAgaWRzKCkKSW1wb3J0CkltcG9ydAogIGlkcygpCkFkZERlcChzb3VyY2UsIGZpbGUpCk5vbldTKHRva2VucykKVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKVW50aWxFT0woaWR4LCB0b2tlbnMpClVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gCldob2xlTGluZShpZHgsIHRva2VucykKUmFuZ2UoZmlsZSwgc3RhcnQsIGVuZCkKUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQpJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkKSXNSYW5nZShvYmopCk51bWVyaWNSYW5nZQogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpCiAgZ2V0IHN0YXJ0KCkKICBzZXQgc3RhcnQodmFsdWUpCiAgZ2V0IGVuZCgpCiAgc2V0IGVuZCh2YWx1ZSkKICBzdGF0aWMgZnJvbShyYW5nZSkKICBzdGF0aWMgKmhvbGVzKHJhbmdlcywgb25seSA9IGZhbHNlKQogIHN0YXRpYyBiZXR3ZWVuKFtzMSwgZTFdLCBbczIsIGUyXSkKTnVtZXJpY1JhbmdlCkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCiAgc2xpY2VBdChuKQogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkKICBkdW1wKCkKICBhdChpKQogIHRvQXJyYXkoKQogIGhvbGVzKCkKICBmaXJzdENodW5rKCkKICBsYXN0Q2h1bmsoKQogIHdyaXRlKG91dCwgZGVwdGggPSAwLCBzZXJpYWwpCiAgdG9TdHJpbmcoZm4gPSBGaWxlQmFubmVyQ29tbWVudCkKRmlsZU1hcApGaWxlTWFwCiAgZnVuY3Rpb24oZGVwdGgsIG9wdHMpCkJ1ZmZlckZpbGUoZmlsZSwgYnVmKQpCdWZmZXJMZW5ndGhzKGZpbGUpCkJ1ZmZlck9mZnNldHMoZmlsZSkKQnVmZmVyUmFuZ2VzKGZpbGUpCldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spCiAgc3RyaXBMZWFkaW5nRG90U2xhc2gobikKU3ByZWFkQW5kSm9pbihpdGVyYXRvciwgc2VwYXJhdG9yID0gJycpClByaW50RVM2SW1wb3J0KGltcCkKUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogIG1haW4oLi4uYXJncykKICB3cml0ZShidWYsIGxlbikKICBwdXRzKHMpCiAgY2xvc2UoKQAAAAAAAAAAnQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					5,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								507,
								520
							],
							[
								539,
								559
							],
							[
								986,
								1001
							],
							[
								1036,
								1042
							],
							[
								1099,
								1124
							],
							[
								1338,
								1374
							],
							[
								1695,
								1720
							],
							[
								1757,
								1784
							],
							[
								1853,
								1879
							],
							[
								1937,
								1957
							],
							[
								2028,
								2046
							],
							[
								2296,
								2309
							],
							[
								2337,
								2343
							],
							[
								2396,
								2418
							],
							[
								2766,
								2790
							],
							[
								3111,
								3141
							],
							[
								3217,
								3238
							],
							[
								3285,
								3313
							],
							[
								3324,
								3337
							],
							[
								3427,
								3440
							],
							[
								3706,
								3712
							],
							[
								3797,
								3817
							],
							[
								3934,
								3946
							],
							[
								3970,
								3997
							],
							[
								4052,
								4070
							],
							[
								4496,
								4508
							],
							[
								4517,
								4542
							],
							[
								4626,
								4635
							],
							[
								4724,
								4747
							],
							[
								4770,
								4776
							],
							[
								4806,
								4830
							],
							[
								4847,
								4853
							],
							[
								4915,
								4921
							],
							[
								4971,
								4995
							],
							[
								5312,
								5336
							],
							[
								5425,
								5431
							],
							[
								5712,
								5736
							],
							[
								5765,
								5771
							],
							[
								5922,
								5951
							],
							[
								6067,
								6076
							],
							[
								6227,
								6256
							],
							[
								6516,
								6582
							],
							[
								7305,
								7322
							],
							[
								7622,
								7640
							],
							[
								7683,
								7699
							],
							[
								7792,
								7831
							],
							[
								8164,
								8168
							],
							[
								8307,
								8314
							],
							[
								8377,
								8388
							],
							[
								8586,
								8604
							],
							[
								8900,
								8917
							],
							[
								10350,
								10354
							],
							[
								10959,
								11007
							],
							[
								11264,
								11270
							],
							[
								11774,
								11780
							],
							[
								11836,
								11842
							],
							[
								12515,
								12521
							],
							[
								12552,
								12558
							],
							[
								12646,
								12652
							],
							[
								13175,
								13181
							],
							[
								13207,
								13213
							],
							[
								13231,
								13236
							],
							[
								13279,
								13294
							],
							[
								13317,
								13372
							],
							[
								14420,
								14426
							],
							[
								14549,
								14555
							],
							[
								14711,
								14717
							],
							[
								15292,
								15298
							],
							[
								15347,
								15353
							],
							[
								15520,
								15526
							],
							[
								15544,
								15549
							],
							[
								15600,
								15615
							],
							[
								15801,
								15807
							],
							[
								15827,
								15833
							],
							[
								15850,
								15856
							],
							[
								16110,
								16119
							],
							[
								16191,
								16197
							],
							[
								16302,
								16315
							],
							[
								16417,
								16421
							],
							[
								19809,
								19838
							],
							[
								19988,
								20010
							],
							[
								20036,
								20042
							],
							[
								20073,
								20103
							],
							[
								20138,
								20144
							],
							[
								20170,
								20180
							],
							[
								20235,
								20259
							],
							[
								20320,
								20352
							],
							[
								20378,
								20391
							],
							[
								20418,
								20448
							],
							[
								20501,
								20536
							],
							[
								20541,
								20561
							],
							[
								20675,
								20706
							],
							[
								20984,
								21016
							],
							[
								21191,
								21228
							],
							[
								21312,
								21345
							],
							[
								21408,
								21429
							],
							[
								21535,
								21547
							],
							[
								21566,
								21589
							],
							[
								21722,
								21733
							],
							[
								21762,
								21778
							],
							[
								21810,
								21819
							],
							[
								21848,
								21862
							],
							[
								21894,
								21912
							],
							[
								22144,
								22179
							],
							[
								22965,
								22999
							],
							[
								23083,
								23095
							],
							[
								23285,
								23295
							],
							[
								23541,
								23548
							],
							[
								23567,
								23589
							],
							[
								23961,
								23979
							],
							[
								24121,
								24130
							],
							[
								24158,
								24179
							],
							[
								24420,
								24429
							],
							[
								24474,
								24484
							],
							[
								24615,
								24622
							],
							[
								24737,
								24749
							],
							[
								24779,
								24796
							],
							[
								25006,
								25016
							],
							[
								25066,
								25084
							],
							[
								25130,
								25155
							],
							[
								25269,
								25286
							],
							[
								26931,
								26937
							],
							[
								27079,
								27091
							],
							[
								27135,
								27165
							],
							[
								27673,
								27678
							],
							[
								28263,
								28272
							],
							[
								28295,
								28304
							],
							[
								28325,
								28332
							],
							[
								28365,
								28377
							],
							[
								28883,
								28895
							],
							[
								28924,
								28944
							],
							[
								29008,
								29019
							],
							[
								29052,
								29072
							],
							[
								29136,
								29165
							],
							[
								30680,
								30712
							],
							[
								31117,
								31124
							],
							[
								31168,
								31175
							],
							[
								31203,
								31225
							],
							[
								31254,
								31274
							],
							[
								31469,
								31481
							],
							[
								31659,
								31666
							],
							[
								31955,
								31985
							],
							[
								32301,
								32329
							],
							[
								32359,
								32363
							],
							[
								32382,
								32410
							],
							[
								32443,
								32462
							],
							[
								32521,
								32548
							],
							[
								32581,
								32600
							],
							[
								32675,
								32704
							],
							[
								32822,
								32845
							],
							[
								32985,
								33008
							],
							[
								33137,
								33277
							],
							[
								34005,
								34039
							],
							[
								34106,
								34154
							],
							[
								34200,
								34228
							],
							[
								34277,
								34298
							],
							[
								34372,
								34393
							],
							[
								34454,
								34475
							],
							[
								34548,
								34594
							],
							[
								34643,
								34649
							],
							[
								34723,
								34729
							],
							[
								34795,
								34801
							],
							[
								34872,
								34894
							],
							[
								35355,
								35370
							],
							[
								35456,
								35463
							],
							[
								35553,
								35560
							],
							[
								35901,
								35907
							],
							[
								35940,
								35948
							],
							[
								36115,
								36121
							],
							[
								36169,
								36176
							],
							[
								36238,
								36246
							],
							[
								36303,
								36309
							],
							[
								36368,
								36374
							],
							[
								36436,
								36442
							],
							[
								36505,
								36511
							],
							[
								36574,
								36580
							],
							[
								36638,
								36644
							],
							[
								36993,
								37015
							],
							[
								37365,
								37371
							],
							[
								37376,
								37389
							],
							[
								37789,
								37819
							],
							[
								37832,
								37838
							],
							[
								38003,
								38012
							],
							[
								38057,
								38063
							],
							[
								38168,
								38197
							],
							[
								39068,
								39082
							],
							[
								39384,
								39398
							],
							[
								39553,
								39566
							],
							[
								39603,
								39610
							]
						],
						"symlist":
						[
							"ArgumentError",
							"constructor(...args)",
							"logFile = () =>",
							"arg =>",
							"function NormalizePath(p)",
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"IsWhiteSpace = str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function ModuleLoader(module)",
							"function ProcessFile(source, log = () => {}, recursive, depth = 0)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							" function Export(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Export",
							"Export",
							"ids()",
							"({ lexeme }) =>",
							" function Import(tokens, relativePath = s => s, depth)",
							"Import",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Import",
							"ids()",
							"({ lexeme }) =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function AddDep(source, file)",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"firstChunk()",
							"([range, buf], i) =>",
							"lastChunk()",
							"([range, buf], i) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"(item, i) =>",
							"item =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function* DependencyTree( root, indent = ' ', spacing = false, depth = 0, pre = '', fn = (name, depth) => `${name} (${depth})` )",
							" function stripLeadingDotSlash(n)",
							"function SpreadAndJoin(iterator, separator = '')",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							"write(buf, len)",
							"puts(s)",
							"close()",
							" () =>",
							" file =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"ContainsAny = (arr, tokens) =>",
							"tok =>",
							"impexp =>",
							"hdr =>",
							" ([acc, prev], hdr) =>",
							"(acc, line) =>",
							"({ depth }) =>",
							"({ name }) =>",
							"name =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAACdCQAAICB1dGlsKCkKQXN5bmNGdW5jdGlvbiA9IGZ1bmN0aW9uIHgoKQpHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKigpCkFzeW5jR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbiooKQogIGlzQW55QXJyYXlCdWZmZXIodikKICBpc0FycmF5QnVmZmVyKHYpCiAgaXNCaWdJbnQ2NEFycmF5KHYpCiAgaXNCaWdVaW50NjRBcnJheSh2KQogIGlzRGF0ZSh2KQogIGlzRmxvYXQzMkFycmF5KHYpCiAgaXNGbG9hdDY0QXJyYXkodikKICBpc0ludDhBcnJheSh2KQogIGlzSW50MTZBcnJheSh2KQogIGlzSW50MzJBcnJheSh2KQogIGlzTWFwKHYpCiAgaXNQcm9taXNlKHYpCiAgaXNQcm94eSh2KQogIGlzUmVnRXhwKHYpCiAgaXNTZXQodikKICBpc1NoYXJlZEFycmF5QnVmZmVyKHYpCiAgaXNVaW50OEFycmF5KHYpCiAgaXNVaW50OENsYW1wZWRBcnJheSh2KQogIGlzVWludDE2QXJyYXkodikKICBpc1VpbnQzMkFycmF5KHYpCiAgaXNXZWFrTWFwKHYpCiAgaXNXZWFrU2V0KHYpCiAgaXNEYXRhVmlldyh2KQogIGlzQm9vbGVhbk9iamVjdCh2KQogIGlzQXN5bmNGdW5jdGlvbih2KQogIGlzR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc0FzeW5jR2VuZXJhdG9yRnVuY3Rpb24odikKICBpc051bWJlck9iamVjdCh2KQogIGlzQmlnSW50T2JqZWN0KHYpCiAgaXNTeW1ib2xPYmplY3QodikKICBpc05hdGl2ZUVycm9yKHYpCiAgaXNNYXBJdGVyYXRvcih2KQogIGlzU2V0SXRlcmF0b3IodikKICBpc1N0cmluZ09iamVjdCh2KQogIGlzQXJyYXlCdWZmZXJWaWV3KHYpCiAgaXNBcmd1bWVudHNPYmplY3QodikKICBpc0JveGVkUHJpbWl0aXZlKHYpCiAgaXNHZW5lcmF0b3JPYmplY3QodikKICBpc1R5cGVkQXJyYXkodikKICBpc01vZHVsZU5hbWVzcGFjZU9iamVjdCh2KQogIGlzQ29uc3RydWN0b3IodikKICBpc0l0ZXJhYmxlKHYpCiAgaXNBc3luY0l0ZXJhYmxlKHYpCiAgaXNJdGVyYXRvcih2KQogIGlzQXJyYXlMaWtlKHYpCiAgaGFzQnVpbHRJbihvLCBtKQogIGZvcm1hdCguLi5hcmdzKQogIGZvcm1hdFdpdGhPcHRpb25zKG9wdHMsIC4uLmFyZ3MpCiAgZm9ybWF0V2l0aE9wdGlvbnNJbnRlcm5hbChvLCB2KQogIGFzc2VydChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKQogIHNldEludGVydmFsKGNhbGxiYWNrLCBtcykKICBzdGFydCgpCiAgY2xlYXJJbnRlcnZhbChpZCkKICBpbmhlcml0cyhjdG9yLCBzdXBlckN0b3IpCiAgY3RvcgogIGN0b3IKICBzdXBlckN0b3IKICBtZW1vaXplKGZuLCBjYWNoZSA9IHt9KQpNZW1vaXplKG4sIC4uLnJlc3QpCiAgZ2V0c2V0KHRhcmdldCwgLi4uYXJncykKICBtb2RpZmllciguLi5hcmdzKQogIGdldHRlcih0YXJnZXQsIC4uLmFyZ3MpCiAgc2V0dGVyKHRhcmdldCwgLi4uYXJncykKICBnZXR0ZXJzZXR0ZXIodGFyZ2V0LCAuLi5hcmdzKQogIGhhc0dldFNldChvYmopCiAgbWFwT2JqZWN0KHRhcmdldCkKICBvbmNlKGZuLCB0aGlzQXJnLCBtZW1vRm4pCiAgZnVuY3Rpb24oLi4uYXJncykKICB3YWl0Rm9yKG1zKQogIGRlZmluZShvYmosIC4uLmFyZ3MpCiAgd2Vha0Fzc2lnbihvYmosIC4uLmFyZ3MpCiAgZ2V0Q29uc3RydWN0b3JDaGFpbihvYmopCiAgaGFzUHJvdG90eXBlKG9iaiwgcHJvdG8pCiAgZmlsdGVyKHNlcSwgcHJlZCwgdGhpc0FyZykKICBmdW5jdGlvbipzcGxpdChidWYsIC4uLnBvaW50cykKICBnZXRBbnNpU3R5bGVzKCkKICByYW5kSW50KC4uLmFyZ3MpCiAgcmFuZEZsb2F0KG1pbiwgbWF4LCBybmcgPSBNYXRoLnJhbmRvbSkKICByYW5kU3RyKG4sIHNldCA9ICdfMDEyMzQ1Njc4OUFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonLCBybmcgPSBNYXRoLnJhbmRvbSkKICB0b0JpZ0ludChhcmcpCiAgbGF6eVByb3BlcnR5KG9iaiwgbmFtZSwgZ2V0dGVyLCBvcHRzID0ge30pCiAgZnVuY3Rpb24oKQogIGZ1bmN0aW9uKCkKICByZXBsYWNlUHJvcGVydHkodmFsdWUpCiAgbGF6eVByb3BlcnRpZXMob2JqLCBnZXR0ZXJzT2JqLCBvcHRzID0ge30pCiAgZ2V0T3B0KG9wdGlvbnMgPSB7fSwgYXJncykKICB0b1VuaXhUaW1lKGRhdGVPYmosIHV0YyA9IGZhbHNlKQogIHVuaXhUaW1lKHV0YyA9IGZhbHNlKQogIGZyb21Vbml4VGltZShlcG9jaCwgdXRjID0gZmFsc2UpCiAgcmFuZ2UoLi4uYXJncykKICByZXBlYXRlcihuLCB3aGF0KQogIGZ1bmN0aW9uKigpCiAgZnVuY3Rpb24qKCkKICByZXBlYXQobiwgd2hhdCkKICBjaHVua0FycmF5KGFyciwgc2l6ZSkKICBjYW1lbGl6ZShzdHIsIGRlbGltID0gJycpCiAgZGVjYW1lbGl6ZShzdHIsIGRlbGltID0gJy0nKQogIHNob3J0ZW4oc3RyLCBtYXggPSA0MCwgc3VmZml4ID0gJy4uLicpCiAgYXJyYXlzSW5Db21tb24oYSkKKmtleXMoKQoqZW50cmllcygpCip2YWx1ZXMoKQogIGZvckVhY2goY2FsbGJhY2ssIHRoaXNBcmcpCiAgcmVkdWNlKGNhbGxiYWNrLCBhY2N1LCB0aGlzQXJnKQogIG1vZChhLCBiKQAAAAAAAAAAvwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					6,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
						"symkeys":
						[
							[
								92,
								118
							],
							[
								488,
								492
							],
							[
								587,
								618
							],
							[
								1325,
								1332
							],
							[
								1448,
								1465
							],
							[
								1480,
								1502
							],
							[
								1536,
								1544
							],
							[
								1614,
								1637
							],
							[
								1688,
								1706
							],
							[
								1791,
								1821
							],
							[
								1976,
								1999
							],
							[
								2000,
								2021
							],
							[
								2362,
								2376
							],
							[
								2866,
								2900
							],
							[
								3263,
								3315
							],
							[
								3356,
								3389
							],
							[
								3569,
								3619
							],
							[
								3665,
								3711
							],
							[
								3819,
								3872
							]
						],
						"symlist":
						[
							" function Console(...args)",
							"f =>",
							"consoleWidth = (fd = termFd) =>",
							"Console",
							".inspect = arg =>",
							"printFunction = out =>",
							" text =>",
							"outputFunction = out =>",
							" function(...args)",
							"inspectFunction = (...args) =>",
							"logFunction = output =>",
							" function(...args)",
							"ConsoleOptions",
							" function addMissingMethods(cons)",
							"Console.prototype.config = function config(obj = {})",
							"function ConsoleOptions(obj = {})",
							"ConsoleOptions.prototype.merge = function(...args)",
							"ConsoleOptions.merge = function(opts, ...args)",
							" function ConsoleSetup(inspectOptions = {}, callback)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/BQAAQXJndW1lbnRFcnJvcgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCk5vcm1hbGl6ZVBhdGgocCkKRmRXcml0ZXIoZmQsIG5hbWUpCiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCkltcEV4cFR5cGUoc2VxKQpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCkV4cG9ydE5hbWUoc2VxKQpCeXRlU2VxdWVuY2UodG9rZW5zKQpNb2R1bGVMb2FkZXIobW9kdWxlKQogIHNlbGYgPSBmdW5jdGlvbiBQYXJlbnRoZXNlQmFsYW5jZXIodG9rKQogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQpFeHBvcnQKRXhwb3J0CiAgaWRzKCkKSW1wb3J0CkltcG9ydAogIGlkcygpCkFkZERlcChzb3VyY2UsIGZpbGUpCk5vbldTKHRva2VucykKVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKVW50aWxFT0woaWR4LCB0b2tlbnMpClVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gCldob2xlTGluZShpZHgsIHRva2VucykKUmFuZ2UoZmlsZSwgc3RhcnQsIGVuZCkKUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQpJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkKSXNSYW5nZShvYmopCk51bWVyaWNSYW5nZQogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpCiAgZ2V0IHN0YXJ0KCkKICBzZXQgc3RhcnQodmFsdWUpCiAgZ2V0IGVuZCgpCiAgc2V0IGVuZCh2YWx1ZSkKICBzdGF0aWMgZnJvbShyYW5nZSkKICBzdGF0aWMgKmhvbGVzKHJhbmdlcywgb25seSA9IGZhbHNlKQogIHN0YXRpYyBiZXR3ZWVuKFtzMSwgZTFdLCBbczIsIGUyXSkKTnVtZXJpY1JhbmdlCkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCiAgc2xpY2VBdChuKQogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkKICBkdW1wKCkKICBhdChpKQogIHRvQXJyYXkoKQogIGhvbGVzKCkKICBmaXJzdENodW5rKCkKICBsYXN0Q2h1bmsoKQogIHdyaXRlKG91dCwgZGVwdGggPSAwLCBzZXJpYWwpCiAgdG9TdHJpbmcoZm4gPSBGaWxlQmFubmVyQ29tbWVudCkKRmlsZU1hcApGaWxlTWFwCiAgZnVuY3Rpb24oZGVwdGgsIG9wdHMpCkJ1ZmZlckZpbGUoZmlsZSwgYnVmKQpCdWZmZXJMZW5ndGhzKGZpbGUpCkJ1ZmZlck9mZnNldHMoZmlsZSkKQnVmZmVyUmFuZ2VzKGZpbGUpCldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spCiAgc3RyaXBMZWFkaW5nRG90U2xhc2gobikKU3ByZWFkQW5kSm9pbihpdGVyYXRvciwgc2VwYXJhdG9yID0gJycpClByaW50RVM2SW1wb3J0KGltcCkKUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogIG1haW4oLi4uYXJncykKICB3cml0ZShidWYsIGxlbikKICBwdXRzKHMpCiAgY2xvc2UoKQAAAAAAAAAARQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					7,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								507,
								520
							],
							[
								539,
								559
							],
							[
								986,
								1001
							],
							[
								1036,
								1042
							],
							[
								1099,
								1124
							],
							[
								1338,
								1374
							],
							[
								1695,
								1720
							],
							[
								1757,
								1784
							],
							[
								1853,
								1879
							],
							[
								1937,
								1957
							],
							[
								2028,
								2046
							],
							[
								2296,
								2309
							],
							[
								2337,
								2343
							],
							[
								2396,
								2418
							],
							[
								2766,
								2790
							],
							[
								3111,
								3141
							],
							[
								3217,
								3238
							],
							[
								3285,
								3313
							],
							[
								3324,
								3337
							],
							[
								3427,
								3440
							],
							[
								3706,
								3712
							],
							[
								3797,
								3817
							],
							[
								3934,
								3946
							],
							[
								3970,
								3997
							],
							[
								4052,
								4070
							],
							[
								4496,
								4508
							],
							[
								4517,
								4542
							],
							[
								4626,
								4635
							],
							[
								4724,
								4747
							],
							[
								4770,
								4776
							],
							[
								4806,
								4830
							],
							[
								4847,
								4853
							],
							[
								4915,
								4921
							],
							[
								4971,
								4995
							],
							[
								5312,
								5336
							],
							[
								5425,
								5431
							],
							[
								5712,
								5736
							],
							[
								5765,
								5771
							],
							[
								5922,
								5951
							],
							[
								6067,
								6076
							],
							[
								6227,
								6256
							],
							[
								6516,
								6582
							],
							[
								7305,
								7322
							],
							[
								7622,
								7640
							],
							[
								7683,
								7699
							],
							[
								7792,
								7831
							],
							[
								8164,
								8168
							],
							[
								8307,
								8314
							],
							[
								8377,
								8388
							],
							[
								8586,
								8604
							],
							[
								8900,
								8917
							],
							[
								10350,
								10354
							],
							[
								10959,
								11007
							],
							[
								11264,
								11270
							],
							[
								11774,
								11780
							],
							[
								11836,
								11842
							],
							[
								12515,
								12521
							],
							[
								12552,
								12558
							],
							[
								12646,
								12652
							],
							[
								13175,
								13181
							],
							[
								13207,
								13213
							],
							[
								13231,
								13236
							],
							[
								13279,
								13294
							],
							[
								13317,
								13372
							],
							[
								14420,
								14426
							],
							[
								14549,
								14555
							],
							[
								14711,
								14717
							],
							[
								15292,
								15298
							],
							[
								15347,
								15353
							],
							[
								15520,
								15526
							],
							[
								15544,
								15549
							],
							[
								15600,
								15615
							],
							[
								15801,
								15807
							],
							[
								15827,
								15833
							],
							[
								15850,
								15856
							],
							[
								16110,
								16119
							],
							[
								16191,
								16197
							],
							[
								16302,
								16315
							],
							[
								16417,
								16421
							],
							[
								19809,
								19838
							],
							[
								19988,
								20010
							],
							[
								20036,
								20042
							],
							[
								20073,
								20103
							],
							[
								20138,
								20144
							],
							[
								20170,
								20180
							],
							[
								20235,
								20259
							],
							[
								20320,
								20352
							],
							[
								20378,
								20391
							],
							[
								20418,
								20448
							],
							[
								20501,
								20536
							],
							[
								20541,
								20561
							],
							[
								20675,
								20706
							],
							[
								20984,
								21016
							],
							[
								21191,
								21228
							],
							[
								21312,
								21345
							],
							[
								21408,
								21429
							],
							[
								21535,
								21547
							],
							[
								21566,
								21589
							],
							[
								21722,
								21733
							],
							[
								21762,
								21778
							],
							[
								21810,
								21819
							],
							[
								21848,
								21862
							],
							[
								21894,
								21912
							],
							[
								22144,
								22179
							],
							[
								22965,
								22999
							],
							[
								23083,
								23095
							],
							[
								23285,
								23295
							],
							[
								23541,
								23548
							],
							[
								23567,
								23589
							],
							[
								23961,
								23979
							],
							[
								24121,
								24130
							],
							[
								24158,
								24179
							],
							[
								24420,
								24429
							],
							[
								24474,
								24484
							],
							[
								24615,
								24622
							],
							[
								24737,
								24749
							],
							[
								24779,
								24796
							],
							[
								25006,
								25016
							],
							[
								25066,
								25084
							],
							[
								25130,
								25155
							],
							[
								25269,
								25286
							],
							[
								26931,
								26937
							],
							[
								27079,
								27091
							],
							[
								27135,
								27165
							],
							[
								27673,
								27678
							],
							[
								28263,
								28272
							],
							[
								28295,
								28304
							],
							[
								28325,
								28332
							],
							[
								28365,
								28377
							],
							[
								28883,
								28895
							],
							[
								28924,
								28944
							],
							[
								29008,
								29019
							],
							[
								29052,
								29072
							],
							[
								29136,
								29165
							],
							[
								30680,
								30712
							],
							[
								31117,
								31124
							],
							[
								31168,
								31175
							],
							[
								31203,
								31225
							],
							[
								31254,
								31274
							],
							[
								31469,
								31481
							],
							[
								31659,
								31666
							],
							[
								31955,
								31985
							],
							[
								32301,
								32329
							],
							[
								32359,
								32363
							],
							[
								32382,
								32410
							],
							[
								32443,
								32462
							],
							[
								32521,
								32548
							],
							[
								32581,
								32600
							],
							[
								32675,
								32704
							],
							[
								32822,
								32845
							],
							[
								32985,
								33008
							],
							[
								33137,
								33277
							],
							[
								34005,
								34039
							],
							[
								34106,
								34154
							],
							[
								34200,
								34228
							],
							[
								34277,
								34298
							],
							[
								34372,
								34393
							],
							[
								34454,
								34475
							],
							[
								34548,
								34594
							],
							[
								34643,
								34649
							],
							[
								34723,
								34729
							],
							[
								34795,
								34801
							],
							[
								34872,
								34894
							],
							[
								35355,
								35370
							],
							[
								35456,
								35463
							],
							[
								35553,
								35560
							],
							[
								35901,
								35907
							],
							[
								35940,
								35948
							],
							[
								36115,
								36121
							],
							[
								36169,
								36176
							],
							[
								36238,
								36246
							],
							[
								36303,
								36309
							],
							[
								36368,
								36374
							],
							[
								36436,
								36442
							],
							[
								36505,
								36511
							],
							[
								36574,
								36580
							],
							[
								36638,
								36644
							],
							[
								36993,
								37015
							],
							[
								37365,
								37371
							],
							[
								37376,
								37389
							],
							[
								37789,
								37819
							],
							[
								37832,
								37838
							],
							[
								38003,
								38012
							],
							[
								38057,
								38063
							],
							[
								38168,
								38197
							],
							[
								39068,
								39082
							],
							[
								39384,
								39398
							],
							[
								39553,
								39566
							],
							[
								39603,
								39610
							]
						],
						"symlist":
						[
							"ArgumentError",
							"constructor(...args)",
							"logFile = () =>",
							"arg =>",
							"function NormalizePath(p)",
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"IsWhiteSpace = str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function ModuleLoader(module)",
							"function ProcessFile(source, log = () => {}, recursive, depth = 0)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							" function Export(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Export",
							"Export",
							"ids()",
							"({ lexeme }) =>",
							" function Import(tokens, relativePath = s => s, depth)",
							"Import",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Import",
							"ids()",
							"({ lexeme }) =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function AddDep(source, file)",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"firstChunk()",
							"([range, buf], i) =>",
							"lastChunk()",
							"([range, buf], i) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"(item, i) =>",
							"item =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function* DependencyTree( root, indent = ' ', spacing = false, depth = 0, pre = '', fn = (name, depth) => `${name} (${depth})` )",
							" function stripLeadingDotSlash(n)",
							"function SpreadAndJoin(iterator, separator = '')",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							"write(buf, len)",
							"puts(s)",
							"close()",
							" () =>",
							" file =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"ContainsAny = (arr, tokens) =>",
							"tok =>",
							"impexp =>",
							"hdr =>",
							" ([acc, prev], hdr) =>",
							"(acc, line) =>",
							"({ depth }) =>",
							"({ name }) =>",
							"name =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABFAQAAQ29uc29sZSguLi5hcmdzKQpDb25zb2xlCiAgZnVuY3Rpb24oLi4uYXJncykKICBmdW5jdGlvbiguLi5hcmdzKQpDb25zb2xlT3B0aW9ucwogIGFkZE1pc3NpbmdNZXRob2RzKGNvbnMpCkNvbnNvbGUucHJvdG90eXBlLmNvbmZpZyA9IGZ1bmN0aW9uIGNvbmZpZyhvYmogPSB7fSkKQ29uc29sZU9wdGlvbnMob2JqID0ge30pCkNvbnNvbGVPcHRpb25zLnByb3RvdHlwZS5tZXJnZSA9IGZ1bmN0aW9uKC4uLmFyZ3MpCkNvbnNvbGVPcHRpb25zLm1lcmdlID0gZnVuY3Rpb24ob3B0cywgLi4uYXJncykKQ29uc29sZVNldHVwKGluc3BlY3RPcHRpb25zID0ge30sIGNhbGxiYWNrKQAAAAAAAAAAvwUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					8,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
						"symkeys":
						[
							[
								560,
								574
							],
							[
								1187,
								1216
							],
							[
								1385,
								1403
							],
							[
								1437,
								1450
							],
							[
								1511,
								1528
							],
							[
								1718,
								1744
							],
							[
								1846,
								1870
							],
							[
								1953,
								1979
							],
							[
								2075,
								2099
							],
							[
								2180,
								2204
							],
							[
								2211,
								2235
							],
							[
								2285,
								2309
							],
							[
								2317,
								2341
							],
							[
								2352,
								2376
							],
							[
								2385,
								2409
							],
							[
								2452,
								2476
							],
							[
								2484,
								2508
							],
							[
								2519,
								2543
							],
							[
								2556,
								2580
							],
							[
								2592,
								2616
							],
							[
								2631,
								2655
							],
							[
								2663,
								2689
							],
							[
								2700,
								2726
							],
							[
								2736,
								2762
							],
							[
								2768,
								2794
							],
							[
								2808,
								2834
							],
							[
								2845,
								2871
							],
							[
								2879,
								2905
							],
							[
								2916,
								2942
							],
							[
								2949,
								2975
							],
							[
								3136,
								3162
							],
							[
								3213,
								3247
							],
							[
								3297,
								3311
							],
							[
								4118,
								4130
							],
							[
								4782,
								4798
							],
							[
								4860,
								4878
							],
							[
								5442,
								5462
							],
							[
								5836,
								5852
							],
							[
								6490,
								6511
							],
							[
								7196,
								7216
							],
							[
								7533,
								7550
							],
							[
								7960,
								7975
							],
							[
								8166,
								8181
							],
							[
								8830,
								8845
							],
							[
								9346,
								9361
							],
							[
								10000,
								10017
							],
							[
								12530,
								12550
							],
							[
								13568,
								13581
							],
							[
								14128,
								14143
							],
							[
								14312,
								14326
							],
							[
								15123,
								15138
							],
							[
								15243,
								15257
							],
							[
								15420,
								15435
							],
							[
								16246,
								16261
							],
							[
								16549,
								16566
							],
							[
								17246,
								17261
							],
							[
								17278,
								17293
							],
							[
								17311,
								17328
							],
							[
								17364,
								17375
							],
							[
								17718,
								17745
							],
							[
								17906,
								17934
							],
							[
								18607,
								18630
							],
							[
								19312,
								19333
							],
							[
								19410,
								19426
							],
							[
								19856,
								19870
							],
							[
								20094,
								20111
							],
							[
								21413,
								21422
							],
							[
								21436,
								21444
							],
							[
								22569,
								22584
							],
							[
								23773,
								23788
							],
							[
								27900,
								27916
							],
							[
								28571,
								28575
							]
						],
						"symlist":
						[
							"‚Äî‚íª‚Äì‚ÄÉatomic_add_int‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_std_set_module_loader_func‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉmalloc_usable_size‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚ìÇ‚Äì‚ÄÉtrim_dotslash‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚í∏‚Äì‚ÄÉjsm_module_record‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚ìÇ‚Äì‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjsm_module_record_compiled‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjsm_module_record_native‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_native‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjsm_module_extern_compiled‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_std_set_worker_new_context_func‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉjsm_dump_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_eval_buf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_init_modules‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉjsm_builtin_native‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚ìÇ‚Äì‚ÄÉjsm_builtin_compiled‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚Äî‚íª‚Äì‚ÄÉjsm_load_package‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_search_ext‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_directory‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_search‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_find‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_load‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_json‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_loader‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_normalize‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_eval_file‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_script_file‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_script_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_script_push‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_script_pop‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_script_load‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_context_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚ìÇ‚Äì‚ÄÉjsm_module_native‚Äâ(‚Äâ)‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro function",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉMALLOC_OVERHEAD‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉMALLOC_OVERHEAD‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚í∏‚Äì‚ÄÉtrace_malloc_data‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉdump_vector‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_trace_malloc_ptr_offset‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_trace_malloc_usable_size‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_trace_malloc_printf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_trace_malloc_init‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_trace_malloc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_trace_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_trace_realloc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉPROG_NAME‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉjsm_help‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_eval_script‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_module_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjsm_import_parse‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmain‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/BQAAQXJndW1lbnRFcnJvcgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCk5vcm1hbGl6ZVBhdGgocCkKRmRXcml0ZXIoZmQsIG5hbWUpCiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCkltcEV4cFR5cGUoc2VxKQpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCkV4cG9ydE5hbWUoc2VxKQpCeXRlU2VxdWVuY2UodG9rZW5zKQpNb2R1bGVMb2FkZXIobW9kdWxlKQogIHNlbGYgPSBmdW5jdGlvbiBQYXJlbnRoZXNlQmFsYW5jZXIodG9rKQogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQpFeHBvcnQKRXhwb3J0CiAgaWRzKCkKSW1wb3J0CkltcG9ydAogIGlkcygpCkFkZERlcChzb3VyY2UsIGZpbGUpCk5vbldTKHRva2VucykKVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKVW50aWxFT0woaWR4LCB0b2tlbnMpClVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gCldob2xlTGluZShpZHgsIHRva2VucykKUmFuZ2UoZmlsZSwgc3RhcnQsIGVuZCkKUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQpJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkKSXNSYW5nZShvYmopCk51bWVyaWNSYW5nZQogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpCiAgZ2V0IHN0YXJ0KCkKICBzZXQgc3RhcnQodmFsdWUpCiAgZ2V0IGVuZCgpCiAgc2V0IGVuZCh2YWx1ZSkKICBzdGF0aWMgZnJvbShyYW5nZSkKICBzdGF0aWMgKmhvbGVzKHJhbmdlcywgb25seSA9IGZhbHNlKQogIHN0YXRpYyBiZXR3ZWVuKFtzMSwgZTFdLCBbczIsIGUyXSkKTnVtZXJpY1JhbmdlCkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCiAgc2xpY2VBdChuKQogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkKICBkdW1wKCkKICBhdChpKQogIHRvQXJyYXkoKQogIGhvbGVzKCkKICBmaXJzdENodW5rKCkKICBsYXN0Q2h1bmsoKQogIHdyaXRlKG91dCwgZGVwdGggPSAwLCBzZXJpYWwpCiAgdG9TdHJpbmcoZm4gPSBGaWxlQmFubmVyQ29tbWVudCkKRmlsZU1hcApGaWxlTWFwCiAgZnVuY3Rpb24oZGVwdGgsIG9wdHMpCkJ1ZmZlckZpbGUoZmlsZSwgYnVmKQpCdWZmZXJMZW5ndGhzKGZpbGUpCkJ1ZmZlck9mZnNldHMoZmlsZSkKQnVmZmVyUmFuZ2VzKGZpbGUpCldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spCiAgc3RyaXBMZWFkaW5nRG90U2xhc2gobikKU3ByZWFkQW5kSm9pbihpdGVyYXRvciwgc2VwYXJhdG9yID0gJycpClByaW50RVM2SW1wb3J0KGltcCkKUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogIG1haW4oLi4uYXJncykKICB3cml0ZShidWYsIGxlbikKICBwdXRzKHMpCiAgY2xvc2UoKQAAAAAAAAAAsA0AAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					9,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								507,
								520
							],
							[
								539,
								559
							],
							[
								986,
								1001
							],
							[
								1036,
								1042
							],
							[
								1099,
								1124
							],
							[
								1338,
								1374
							],
							[
								1695,
								1720
							],
							[
								1757,
								1784
							],
							[
								1853,
								1879
							],
							[
								1937,
								1957
							],
							[
								2028,
								2046
							],
							[
								2296,
								2309
							],
							[
								2337,
								2343
							],
							[
								2396,
								2418
							],
							[
								2766,
								2790
							],
							[
								3111,
								3141
							],
							[
								3217,
								3238
							],
							[
								3285,
								3313
							],
							[
								3324,
								3337
							],
							[
								3427,
								3440
							],
							[
								3706,
								3712
							],
							[
								3797,
								3817
							],
							[
								3934,
								3946
							],
							[
								3970,
								3997
							],
							[
								4052,
								4070
							],
							[
								4496,
								4508
							],
							[
								4517,
								4542
							],
							[
								4626,
								4635
							],
							[
								4724,
								4747
							],
							[
								4770,
								4776
							],
							[
								4806,
								4830
							],
							[
								4847,
								4853
							],
							[
								4915,
								4921
							],
							[
								4971,
								4995
							],
							[
								5312,
								5336
							],
							[
								5425,
								5431
							],
							[
								5712,
								5736
							],
							[
								5765,
								5771
							],
							[
								5922,
								5951
							],
							[
								6067,
								6076
							],
							[
								6227,
								6256
							],
							[
								6516,
								6582
							],
							[
								7305,
								7322
							],
							[
								7622,
								7640
							],
							[
								7683,
								7699
							],
							[
								7792,
								7831
							],
							[
								8164,
								8168
							],
							[
								8307,
								8314
							],
							[
								8377,
								8388
							],
							[
								8586,
								8604
							],
							[
								8900,
								8917
							],
							[
								10350,
								10354
							],
							[
								10959,
								11007
							],
							[
								11264,
								11270
							],
							[
								11774,
								11780
							],
							[
								11836,
								11842
							],
							[
								12515,
								12521
							],
							[
								12552,
								12558
							],
							[
								12646,
								12652
							],
							[
								13175,
								13181
							],
							[
								13207,
								13213
							],
							[
								13231,
								13236
							],
							[
								13279,
								13294
							],
							[
								13317,
								13372
							],
							[
								14420,
								14426
							],
							[
								14549,
								14555
							],
							[
								14711,
								14717
							],
							[
								15292,
								15298
							],
							[
								15347,
								15353
							],
							[
								15520,
								15526
							],
							[
								15544,
								15549
							],
							[
								15600,
								15615
							],
							[
								15801,
								15807
							],
							[
								15827,
								15833
							],
							[
								15850,
								15856
							],
							[
								16110,
								16119
							],
							[
								16191,
								16197
							],
							[
								16302,
								16315
							],
							[
								16417,
								16421
							],
							[
								19809,
								19838
							],
							[
								19988,
								20010
							],
							[
								20036,
								20042
							],
							[
								20073,
								20103
							],
							[
								20138,
								20144
							],
							[
								20170,
								20180
							],
							[
								20235,
								20259
							],
							[
								20320,
								20352
							],
							[
								20378,
								20391
							],
							[
								20418,
								20448
							],
							[
								20501,
								20536
							],
							[
								20541,
								20561
							],
							[
								20675,
								20706
							],
							[
								20984,
								21016
							],
							[
								21191,
								21228
							],
							[
								21312,
								21345
							],
							[
								21408,
								21429
							],
							[
								21535,
								21547
							],
							[
								21566,
								21589
							],
							[
								21722,
								21733
							],
							[
								21762,
								21778
							],
							[
								21810,
								21819
							],
							[
								21848,
								21862
							],
							[
								21894,
								21912
							],
							[
								22144,
								22179
							],
							[
								22965,
								22999
							],
							[
								23083,
								23095
							],
							[
								23285,
								23295
							],
							[
								23541,
								23548
							],
							[
								23567,
								23589
							],
							[
								23961,
								23979
							],
							[
								24121,
								24130
							],
							[
								24158,
								24179
							],
							[
								24420,
								24429
							],
							[
								24474,
								24484
							],
							[
								24615,
								24622
							],
							[
								24737,
								24749
							],
							[
								24779,
								24796
							],
							[
								25006,
								25016
							],
							[
								25066,
								25084
							],
							[
								25130,
								25155
							],
							[
								25269,
								25286
							],
							[
								26931,
								26937
							],
							[
								27079,
								27091
							],
							[
								27135,
								27165
							],
							[
								27673,
								27678
							],
							[
								28263,
								28272
							],
							[
								28295,
								28304
							],
							[
								28325,
								28332
							],
							[
								28365,
								28377
							],
							[
								28883,
								28895
							],
							[
								28924,
								28944
							],
							[
								29008,
								29019
							],
							[
								29052,
								29072
							],
							[
								29136,
								29165
							],
							[
								30680,
								30712
							],
							[
								31117,
								31124
							],
							[
								31168,
								31175
							],
							[
								31203,
								31225
							],
							[
								31254,
								31274
							],
							[
								31469,
								31481
							],
							[
								31659,
								31666
							],
							[
								31955,
								31985
							],
							[
								32301,
								32329
							],
							[
								32359,
								32363
							],
							[
								32382,
								32410
							],
							[
								32443,
								32462
							],
							[
								32521,
								32548
							],
							[
								32581,
								32600
							],
							[
								32675,
								32704
							],
							[
								32822,
								32845
							],
							[
								32985,
								33008
							],
							[
								33137,
								33277
							],
							[
								34005,
								34039
							],
							[
								34106,
								34154
							],
							[
								34200,
								34228
							],
							[
								34277,
								34298
							],
							[
								34372,
								34393
							],
							[
								34454,
								34475
							],
							[
								34548,
								34594
							],
							[
								34643,
								34649
							],
							[
								34723,
								34729
							],
							[
								34795,
								34801
							],
							[
								34872,
								34894
							],
							[
								35355,
								35370
							],
							[
								35456,
								35463
							],
							[
								35553,
								35560
							],
							[
								35901,
								35907
							],
							[
								35940,
								35948
							],
							[
								36115,
								36121
							],
							[
								36169,
								36176
							],
							[
								36238,
								36246
							],
							[
								36303,
								36309
							],
							[
								36368,
								36374
							],
							[
								36436,
								36442
							],
							[
								36505,
								36511
							],
							[
								36574,
								36580
							],
							[
								36638,
								36644
							],
							[
								36993,
								37015
							],
							[
								37365,
								37371
							],
							[
								37376,
								37389
							],
							[
								37789,
								37819
							],
							[
								37832,
								37838
							],
							[
								38003,
								38012
							],
							[
								38057,
								38063
							],
							[
								38168,
								38197
							],
							[
								39068,
								39082
							],
							[
								39384,
								39398
							],
							[
								39553,
								39566
							],
							[
								39603,
								39610
							]
						],
						"symlist":
						[
							"ArgumentError",
							"constructor(...args)",
							"logFile = () =>",
							"arg =>",
							"function NormalizePath(p)",
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"IsWhiteSpace = str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function ModuleLoader(module)",
							"function ProcessFile(source, log = () => {}, recursive, depth = 0)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							" function Export(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Export",
							"Export",
							"ids()",
							"({ lexeme }) =>",
							" function Import(tokens, relativePath = s => s, depth)",
							"Import",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Import",
							"ids()",
							"({ lexeme }) =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function AddDep(source, file)",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"firstChunk()",
							"([range, buf], i) =>",
							"lastChunk()",
							"([range, buf], i) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"(item, i) =>",
							"item =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function* DependencyTree( root, indent = ' ', spacing = false, depth = 0, pre = '', fn = (name, depth) => `${name} (${depth})` )",
							" function stripLeadingDotSlash(n)",
							"function SpreadAndJoin(iterator, separator = '')",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							"write(buf, len)",
							"puts(s)",
							"close()",
							" () =>",
							" file =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"ContainsAny = (arr, tokens) =>",
							"tok =>",
							"impexp =>",
							"hdr =>",
							" ([acc, prev], hdr) =>",
							"(acc, line) =>",
							"({ depth }) =>",
							"({ name }) =>",
							"name =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAADeDwAA4oCU4pK74oCTIGF0b21pY19hZGRfaW50ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgogIOKSoSAganNfc3RkX3NldF9tb2R1bGVfbG9hZGVyX2Z1bmMgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBtYWxsb2NfdXNhYmxlX3NpemUgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCuKAlOKTguKAkyB0cmltX2RvdHNsYXNoICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKSuOKAkyBqc21fbW9kdWxlX3JlY29yZCB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pOC4oCTIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fbW9kdWxlX2V4dGVybl9uYXRpdmUgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9tb2R1bGVfcmVjb3JkX2NvbXBpbGVkICggKSDigKYg4oCUIG1hY3JvIGZ1bmN0aW9uCuKAlOKTguKAkyBqc21fbW9kdWxlX3JlY29yZF9uYXRpdmUgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX25hdGl2ZSAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBqc21fbW9kdWxlX2V4dGVybl9jb21waWxlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBqc21fbW9kdWxlX2V4dGVybl9jb21waWxlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNtX21vZHVsZV9leHRlcm5fY29tcGlsZWQgKCApIDsg4oCUIGZ1bmN0aW9uIGRlY2xhcmF0aW9uCiAg4pKhICBqc21fbW9kdWxlX2V4dGVybl9jb21waWxlZCAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24KICDikqEgIGpzbV9tb2R1bGVfZXh0ZXJuX2NvbXBpbGVkICggKSA7IOKAlCBmdW5jdGlvbiBkZWNsYXJhdGlvbgogIOKSoSAganNfc3RkX3NldF93b3JrZXJfbmV3X2NvbnRleHRfZnVuYyAoICkgOyDigJQgZnVuY3Rpb24gZGVjbGFyYXRpb24K4oCU4pK74oCTIGpzbV9kdW1wX2Vycm9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfYnVmICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2luaXRfbW9kdWxlcyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pOC4oCTIGpzbV9idWlsdGluX25hdGl2ZSAoICkg4oCmIOKAlCBtYWNybyBmdW5jdGlvbgrigJTik4LigJMganNtX2J1aWx0aW5fY29tcGlsZWQgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9sb2FkX3BhY2thZ2UgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX3NlYXJjaF9leHQgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX2RpcmVjdG9yeSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9tb2R1bGVfc2VhcmNoICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9maW5kICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9sb2FkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9qc29uICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9sb2FkZXIgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fbW9kdWxlX25vcm1hbGl6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9ldmFsX2ZpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fc2NyaXB0X2ZpbGUgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCuKAlOKSu+KAkyBqc21fc2NyaXB0X2dldCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcHVzaCAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV9zY3JpcHRfcG9wICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3NjcmlwdF9sb2FkICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2NvbnRleHRfbmV3ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTik4LigJMganNtX21vZHVsZV9uYXRpdmUgKCApIOKApiDigJQgbWFjcm8gZnVuY3Rpb24KICDik4IgIE1BTExPQ19PVkVSSEVBRCDigKYg4oCUIG1hY3JvIG9iamVjdAogIOKTgiAgTUFMTE9DX09WRVJIRUFEIOKApiDigJQgbWFjcm8gb2JqZWN0CuKAlOKSuOKAkyB0cmFjZV9tYWxsb2NfZGF0YSB7IOKApiB9IDsg4oCUIHR5cGUK4oCU4pK74oCTIGR1bXBfdmVjdG9yICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY19wdHJfb2Zmc2V0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY191c2FibGVfc2l6ZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV90cmFjZV9tYWxsb2NfcHJpbnRmICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvY19pbml0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX21hbGxvYyAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIGpzbV90cmFjZV9mcmVlICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX3RyYWNlX3JlYWxsb2MgKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uCiAg4pOCICBQUk9HX05BTUUg4oCmIOKAlCBtYWNybyBvYmplY3QK4oCU4pK74oCTIGpzbV9oZWxwICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2V2YWxfc2NyaXB0ICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX21vZHVsZV9mdW5jICggKSB7IOKApiB9IOKAlCBmdW5jdGlvbgrigJTikrvigJMganNtX2ltcG9ydF9wYXJzZSAoICkgeyDigKYgfSDigJQgZnVuY3Rpb24K4oCU4pK74oCTIG1haW4gKCApIHsg4oCmIH0g4oCUIGZ1bmN0aW9uAAAAAAAAAAC/BQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					10,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
						"symkeys":
						[
							[
								554,
								574
							],
							[
								670,
								690
							],
							[
								768,
								796
							],
							[
								1003,
								1008
							],
							[
								1013,
								1028
							],
							[
								1110,
								1123
							],
							[
								1171,
								1190
							],
							[
								1238,
								1253
							],
							[
								1301,
								1309
							],
							[
								1357,
								1365
							],
							[
								1413,
								1429
							],
							[
								1477,
								1487
							],
							[
								1652,
								1663
							],
							[
								1717,
								1729
							],
							[
								2436,
								2460
							],
							[
								2718,
								2761
							],
							[
								2947,
								2972
							],
							[
								3209,
								3254
							],
							[
								3358,
								3410
							],
							[
								3553,
								3586
							],
							[
								3725,
								3748
							],
							[
								4008,
								4033
							],
							[
								4147,
								4181
							],
							[
								4500,
								4520
							],
							[
								4672,
								4696
							],
							[
								4895,
								4919
							],
							[
								5259,
								5277
							],
							[
								5319,
								5340
							],
							[
								5385,
								5407
							],
							[
								5468,
								5490
							],
							[
								5649,
								5691
							],
							[
								6341,
								6394
							],
							[
								7144,
								7167
							],
							[
								7247,
								7273
							],
							[
								7333,
								7362
							],
							[
								7461,
								7500
							],
							[
								7551,
								7606
							],
							[
								7740,
								7779
							],
							[
								7809,
								7814
							],
							[
								7860,
								7903
							],
							[
								8224,
								8251
							],
							[
								8298,
								8326
							],
							[
								8374,
								8402
							],
							[
								8450,
								8488
							],
							[
								8546,
								8574
							],
							[
								8672,
								8707
							],
							[
								8762,
								8785
							],
							[
								8827,
								8858
							],
							[
								8911,
								8942
							],
							[
								9093,
								9119
							],
							[
								9165,
								9205
							],
							[
								9236,
								9241
							],
							[
								9288,
								9333
							],
							[
								9823,
								9839
							],
							[
								9898,
								9937
							],
							[
								10049,
								10089
							],
							[
								10202,
								10240
							],
							[
								10345,
								10369
							],
							[
								10452,
								10472
							],
							[
								10500,
								10506
							],
							[
								10588,
								10627
							],
							[
								10733,
								10758
							],
							[
								10841,
								10861
							],
							[
								10890,
								10896
							],
							[
								10980,
								11025
							],
							[
								11348,
								11392
							],
							[
								11713,
								11726
							],
							[
								11751,
								11772
							],
							[
								11845,
								11858
							],
							[
								12015,
								12023
							],
							[
								12112,
								12127
							],
							[
								12285,
								12295
							],
							[
								12387,
								12404
							],
							[
								12562,
								12574
							],
							[
								12664,
								12678
							],
							[
								12837,
								12846
							],
							[
								12922,
								12937
							],
							[
								13094,
								13104
							],
							[
								13153,
								13173
							],
							[
								13256,
								13269
							],
							[
								13289,
								13299
							],
							[
								13604,
								13683
							],
							[
								13891,
								13903
							],
							[
								13953,
								13965
							],
							[
								14528,
								14534
							],
							[
								15244,
								15277
							]
						],
						"symlist":
						[
							"function strerr(ret)",
							"function numerr(ret)",
							"function objerr(fn, ...args)",
							"Stats",
							"constructor(st)",
							"isDirectory()",
							"isCharacterDevice()",
							"isBlockDevice()",
							"isFile()",
							"isFIFO()",
							"isSymbolicLink()",
							"isSocket()",
							"get errno()",
							"get errstr()",
							" function buffer(length)",
							" function bufferFrom(chunk, offset, length)",
							" function bufferSize(buf)",
							" function bufferToString(buf, offset, length)",
							" function fopen(filename, flags = 'r', mode = 0o644)",
							" function fdopen(fd, flags = 'r')",
							" function puts(fd, str)",
							" function flushSync(file)",
							" function seek(fd, offset, whence)",
							" function tell(file)",
							" function sizeSync(file)",
							" function nameSync(file)",
							" function getcwd()",
							" function chdir(path)",
							" function isatty(file)",
							" function fileno(file)",
							" function readFileSync(file, options = {})",
							" function writeFileSync(file, data, overwrite = true)",
							" function closeSync(fd)",
							" function existsSync(path)",
							" function lstatSync(path, cb)",
							" function mkdirSync(path, mode = 0o777)",
							" function openSync(filename, flags = 'r', mode = 0o644)",
							" function read(fd, buf, offset, length)",
							"() =>",
							" function readSync(fd, buf, offset, length)",
							" function readdirSync(path)",
							" function readlinkSync(path)",
							" function realpathSync(path)",
							" function renameSync(oldname, newname)",
							" function statSync(path, cb)",
							" function symlinkSync(target, path)",
							" function tmpfileSync()",
							" function mkstempSync(template)",
							" function tempnamSync(dir, pfx)",
							" function unlinkSync(path)",
							" function write(fd, buf, offset, length)",
							"() =>",
							" function writeSync(fd, data, offset, length)",
							" function pipe()",
							" function setReadHandler(file, handler)",
							" function setWriteHandler(file, handler)",
							" function onRead(file, handler = null)",
							" function waitRead(file)",
							"(resolve, reject) =>",
							" () =>",
							" function onWrite(file, handler = null)",
							" function waitWrite(file)",
							"(resolve, reject) =>",
							" () =>",
							"async function readAll(input, bufSize = 1024)",
							" function readAllSync(input, bufSize = 1024)",
							"inotify_event",
							"constructor(obj = {})",
							"set wd(value)",
							"get wd()",
							"set mask(value)",
							"get mask()",
							"set cookie(value)",
							"get cookie()",
							"set len(value)",
							"get len()",
							"set name(value)",
							"get name()",
							"static from(address)",
							"inotify_event",
							"toString()",
							" function watch(filename, options = {}, callback = (eventType, filename) => {})",
							" filename =>",
							" filename =>",
							" () =>",
							"function Encoding2Bytes(encoding)"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/BQAAQXJndW1lbnRFcnJvcgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCk5vcm1hbGl6ZVBhdGgocCkKRmRXcml0ZXIoZmQsIG5hbWUpCiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCkltcEV4cFR5cGUoc2VxKQpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCkV4cG9ydE5hbWUoc2VxKQpCeXRlU2VxdWVuY2UodG9rZW5zKQpNb2R1bGVMb2FkZXIobW9kdWxlKQogIHNlbGYgPSBmdW5jdGlvbiBQYXJlbnRoZXNlQmFsYW5jZXIodG9rKQogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQpFeHBvcnQKRXhwb3J0CiAgaWRzKCkKSW1wb3J0CkltcG9ydAogIGlkcygpCkFkZERlcChzb3VyY2UsIGZpbGUpCk5vbldTKHRva2VucykKVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKVW50aWxFT0woaWR4LCB0b2tlbnMpClVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gCldob2xlTGluZShpZHgsIHRva2VucykKUmFuZ2UoZmlsZSwgc3RhcnQsIGVuZCkKUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQpJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkKSXNSYW5nZShvYmopCk51bWVyaWNSYW5nZQogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpCiAgZ2V0IHN0YXJ0KCkKICBzZXQgc3RhcnQodmFsdWUpCiAgZ2V0IGVuZCgpCiAgc2V0IGVuZCh2YWx1ZSkKICBzdGF0aWMgZnJvbShyYW5nZSkKICBzdGF0aWMgKmhvbGVzKHJhbmdlcywgb25seSA9IGZhbHNlKQogIHN0YXRpYyBiZXR3ZWVuKFtzMSwgZTFdLCBbczIsIGUyXSkKTnVtZXJpY1JhbmdlCkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCiAgc2xpY2VBdChuKQogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkKICBkdW1wKCkKICBhdChpKQogIHRvQXJyYXkoKQogIGhvbGVzKCkKICBmaXJzdENodW5rKCkKICBsYXN0Q2h1bmsoKQogIHdyaXRlKG91dCwgZGVwdGggPSAwLCBzZXJpYWwpCiAgdG9TdHJpbmcoZm4gPSBGaWxlQmFubmVyQ29tbWVudCkKRmlsZU1hcApGaWxlTWFwCiAgZnVuY3Rpb24oZGVwdGgsIG9wdHMpCkJ1ZmZlckZpbGUoZmlsZSwgYnVmKQpCdWZmZXJMZW5ndGhzKGZpbGUpCkJ1ZmZlck9mZnNldHMoZmlsZSkKQnVmZmVyUmFuZ2VzKGZpbGUpCldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spCiAgc3RyaXBMZWFkaW5nRG90U2xhc2gobikKU3ByZWFkQW5kSm9pbihpdGVyYXRvciwgc2VwYXJhdG9yID0gJycpClByaW50RVM2SW1wb3J0KGltcCkKUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogIG1haW4oLi4uYXJncykKICB3cml0ZShidWYsIGxlbikKICBwdXRzKHMpCiAgY2xvc2UoKQAAAAAAAAAAcQYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					11,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								507,
								520
							],
							[
								539,
								559
							],
							[
								986,
								1001
							],
							[
								1036,
								1042
							],
							[
								1099,
								1124
							],
							[
								1338,
								1374
							],
							[
								1695,
								1720
							],
							[
								1757,
								1784
							],
							[
								1853,
								1879
							],
							[
								1937,
								1957
							],
							[
								2028,
								2046
							],
							[
								2296,
								2309
							],
							[
								2337,
								2343
							],
							[
								2396,
								2418
							],
							[
								2766,
								2790
							],
							[
								3111,
								3141
							],
							[
								3217,
								3238
							],
							[
								3285,
								3313
							],
							[
								3324,
								3337
							],
							[
								3427,
								3440
							],
							[
								3706,
								3712
							],
							[
								3797,
								3817
							],
							[
								3934,
								3946
							],
							[
								3970,
								3997
							],
							[
								4052,
								4070
							],
							[
								4496,
								4508
							],
							[
								4517,
								4542
							],
							[
								4626,
								4635
							],
							[
								4724,
								4747
							],
							[
								4770,
								4776
							],
							[
								4806,
								4830
							],
							[
								4847,
								4853
							],
							[
								4915,
								4921
							],
							[
								4971,
								4995
							],
							[
								5312,
								5336
							],
							[
								5425,
								5431
							],
							[
								5712,
								5736
							],
							[
								5765,
								5771
							],
							[
								5922,
								5951
							],
							[
								6067,
								6076
							],
							[
								6227,
								6256
							],
							[
								6516,
								6582
							],
							[
								7305,
								7322
							],
							[
								7622,
								7640
							],
							[
								7683,
								7699
							],
							[
								7792,
								7831
							],
							[
								8164,
								8168
							],
							[
								8307,
								8314
							],
							[
								8377,
								8388
							],
							[
								8586,
								8604
							],
							[
								8900,
								8917
							],
							[
								10350,
								10354
							],
							[
								10959,
								11007
							],
							[
								11264,
								11270
							],
							[
								11774,
								11780
							],
							[
								11836,
								11842
							],
							[
								12515,
								12521
							],
							[
								12552,
								12558
							],
							[
								12646,
								12652
							],
							[
								13175,
								13181
							],
							[
								13207,
								13213
							],
							[
								13231,
								13236
							],
							[
								13279,
								13294
							],
							[
								13317,
								13372
							],
							[
								14420,
								14426
							],
							[
								14549,
								14555
							],
							[
								14711,
								14717
							],
							[
								15292,
								15298
							],
							[
								15347,
								15353
							],
							[
								15520,
								15526
							],
							[
								15544,
								15549
							],
							[
								15600,
								15615
							],
							[
								15801,
								15807
							],
							[
								15827,
								15833
							],
							[
								15850,
								15856
							],
							[
								16110,
								16119
							],
							[
								16191,
								16197
							],
							[
								16302,
								16315
							],
							[
								16417,
								16421
							],
							[
								19809,
								19838
							],
							[
								19988,
								20010
							],
							[
								20036,
								20042
							],
							[
								20073,
								20103
							],
							[
								20138,
								20144
							],
							[
								20170,
								20180
							],
							[
								20235,
								20259
							],
							[
								20320,
								20352
							],
							[
								20378,
								20391
							],
							[
								20418,
								20448
							],
							[
								20501,
								20536
							],
							[
								20541,
								20561
							],
							[
								20675,
								20706
							],
							[
								20984,
								21016
							],
							[
								21191,
								21228
							],
							[
								21312,
								21345
							],
							[
								21408,
								21429
							],
							[
								21535,
								21547
							],
							[
								21566,
								21589
							],
							[
								21722,
								21733
							],
							[
								21762,
								21778
							],
							[
								21810,
								21819
							],
							[
								21848,
								21862
							],
							[
								21894,
								21912
							],
							[
								22144,
								22179
							],
							[
								22965,
								22999
							],
							[
								23083,
								23095
							],
							[
								23285,
								23295
							],
							[
								23541,
								23548
							],
							[
								23567,
								23589
							],
							[
								23961,
								23979
							],
							[
								24121,
								24130
							],
							[
								24158,
								24179
							],
							[
								24420,
								24429
							],
							[
								24474,
								24484
							],
							[
								24615,
								24622
							],
							[
								24737,
								24749
							],
							[
								24779,
								24796
							],
							[
								25006,
								25016
							],
							[
								25066,
								25084
							],
							[
								25130,
								25155
							],
							[
								25269,
								25286
							],
							[
								26931,
								26937
							],
							[
								27079,
								27091
							],
							[
								27135,
								27165
							],
							[
								27673,
								27678
							],
							[
								28263,
								28272
							],
							[
								28295,
								28304
							],
							[
								28325,
								28332
							],
							[
								28365,
								28377
							],
							[
								28883,
								28895
							],
							[
								28924,
								28944
							],
							[
								29008,
								29019
							],
							[
								29052,
								29072
							],
							[
								29136,
								29165
							],
							[
								30680,
								30712
							],
							[
								31117,
								31124
							],
							[
								31168,
								31175
							],
							[
								31203,
								31225
							],
							[
								31254,
								31274
							],
							[
								31469,
								31481
							],
							[
								31659,
								31666
							],
							[
								31955,
								31985
							],
							[
								32301,
								32329
							],
							[
								32359,
								32363
							],
							[
								32382,
								32410
							],
							[
								32443,
								32462
							],
							[
								32521,
								32548
							],
							[
								32581,
								32600
							],
							[
								32675,
								32704
							],
							[
								32822,
								32845
							],
							[
								32985,
								33008
							],
							[
								33137,
								33277
							],
							[
								34005,
								34039
							],
							[
								34106,
								34154
							],
							[
								34200,
								34228
							],
							[
								34277,
								34298
							],
							[
								34372,
								34393
							],
							[
								34454,
								34475
							],
							[
								34548,
								34594
							],
							[
								34643,
								34649
							],
							[
								34723,
								34729
							],
							[
								34795,
								34801
							],
							[
								34872,
								34894
							],
							[
								35355,
								35370
							],
							[
								35456,
								35463
							],
							[
								35553,
								35560
							],
							[
								35901,
								35907
							],
							[
								35940,
								35948
							],
							[
								36115,
								36121
							],
							[
								36169,
								36176
							],
							[
								36238,
								36246
							],
							[
								36303,
								36309
							],
							[
								36368,
								36374
							],
							[
								36436,
								36442
							],
							[
								36505,
								36511
							],
							[
								36574,
								36580
							],
							[
								36638,
								36644
							],
							[
								36993,
								37015
							],
							[
								37365,
								37371
							],
							[
								37376,
								37389
							],
							[
								37789,
								37819
							],
							[
								37832,
								37838
							],
							[
								38003,
								38012
							],
							[
								38057,
								38063
							],
							[
								38168,
								38197
							],
							[
								39068,
								39082
							],
							[
								39384,
								39398
							],
							[
								39553,
								39566
							],
							[
								39603,
								39610
							]
						],
						"symlist":
						[
							"ArgumentError",
							"constructor(...args)",
							"logFile = () =>",
							"arg =>",
							"function NormalizePath(p)",
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"IsWhiteSpace = str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function ModuleLoader(module)",
							"function ProcessFile(source, log = () => {}, recursive, depth = 0)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							" function Export(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Export",
							"Export",
							"ids()",
							"({ lexeme }) =>",
							" function Import(tokens, relativePath = s => s, depth)",
							"Import",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Import",
							"ids()",
							"({ lexeme }) =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function AddDep(source, file)",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"firstChunk()",
							"([range, buf], i) =>",
							"lastChunk()",
							"([range, buf], i) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"(item, i) =>",
							"item =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function* DependencyTree( root, indent = ' ', spacing = false, depth = 0, pre = '', fn = (name, depth) => `${name} (${depth})` )",
							" function stripLeadingDotSlash(n)",
							"function SpreadAndJoin(iterator, separator = '')",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							"write(buf, len)",
							"puts(s)",
							"close()",
							" () =>",
							" file =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"ContainsAny = (arr, tokens) =>",
							"tok =>",
							"impexp =>",
							"hdr =>",
							" ([acc, prev], hdr) =>",
							"(acc, line) =>",
							"({ depth }) =>",
							"({ name }) =>",
							"name =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAABxBgAAICBzdHJlcnIocmV0KQogIG51bWVycihyZXQpCiAgb2JqZXJyKGZuLCAuLi5hcmdzKQpTdGF0cwogIGNvbnN0cnVjdG9yKHN0KQogIGlzRGlyZWN0b3J5KCkKICBpc0NoYXJhY3RlckRldmljZSgpCiAgaXNCbG9ja0RldmljZSgpCiAgaXNGaWxlKCkKICBpc0ZJRk8oKQogIGlzU3ltYm9saWNMaW5rKCkKICBpc1NvY2tldCgpCiAgZ2V0IGVycm5vKCkKICBnZXQgZXJyc3RyKCkKICBidWZmZXIobGVuZ3RoKQogIGJ1ZmZlckZyb20oY2h1bmssIG9mZnNldCwgbGVuZ3RoKQogIGJ1ZmZlclNpemUoYnVmKQogIGJ1ZmZlclRvU3RyaW5nKGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpCiAgZm9wZW4oZmlsZW5hbWUsIGZsYWdzID0gJ3InLCBtb2RlID0gMG82NDQpCiAgZmRvcGVuKGZkLCBmbGFncyA9ICdyJykKICBwdXRzKGZkLCBzdHIpCiAgZmx1c2hTeW5jKGZpbGUpCiAgc2VlayhmZCwgb2Zmc2V0LCB3aGVuY2UpCiAgdGVsbChmaWxlKQogIHNpemVTeW5jKGZpbGUpCiAgbmFtZVN5bmMoZmlsZSkKICBnZXRjd2QoKQogIGNoZGlyKHBhdGgpCiAgaXNhdHR5KGZpbGUpCiAgZmlsZW5vKGZpbGUpCiAgcmVhZEZpbGVTeW5jKGZpbGUsIG9wdGlvbnMgPSB7fSkKICB3cml0ZUZpbGVTeW5jKGZpbGUsIGRhdGEsIG92ZXJ3cml0ZSA9IHRydWUpCiAgY2xvc2VTeW5jKGZkKQogIGV4aXN0c1N5bmMocGF0aCkKICBsc3RhdFN5bmMocGF0aCwgY2IpCiAgbWtkaXJTeW5jKHBhdGgsIG1vZGUgPSAwbzc3NykKICBvcGVuU3luYyhmaWxlbmFtZSwgZmxhZ3MgPSAncicsIG1vZGUgPSAwbzY0NCkKICByZWFkKGZkLCBidWYsIG9mZnNldCwgbGVuZ3RoKQogIHJlYWRTeW5jKGZkLCBidWYsIG9mZnNldCwgbGVuZ3RoKQogIHJlYWRkaXJTeW5jKHBhdGgpCiAgcmVhZGxpbmtTeW5jKHBhdGgpCiAgcmVhbHBhdGhTeW5jKHBhdGgpCiAgcmVuYW1lU3luYyhvbGRuYW1lLCBuZXduYW1lKQogIHN0YXRTeW5jKHBhdGgsIGNiKQogIHN5bWxpbmtTeW5jKHRhcmdldCwgcGF0aCkKICB0bXBmaWxlU3luYygpCiAgbWtzdGVtcFN5bmModGVtcGxhdGUpCiAgdGVtcG5hbVN5bmMoZGlyLCBwZngpCiAgdW5saW5rU3luYyhwYXRoKQogIHdyaXRlKGZkLCBidWYsIG9mZnNldCwgbGVuZ3RoKQogIHdyaXRlU3luYyhmZCwgZGF0YSwgb2Zmc2V0LCBsZW5ndGgpCiAgcGlwZSgpCiAgc2V0UmVhZEhhbmRsZXIoZmlsZSwgaGFuZGxlcikKICBzZXRXcml0ZUhhbmRsZXIoZmlsZSwgaGFuZGxlcikKICBvblJlYWQoZmlsZSwgaGFuZGxlciA9IG51bGwpCiAgd2FpdFJlYWQoZmlsZSkKICBvbldyaXRlKGZpbGUsIGhhbmRsZXIgPSBudWxsKQogIHdhaXRXcml0ZShmaWxlKQogIHJlYWRBbGwoaW5wdXQsIGJ1ZlNpemUgPSAxMDI0KQogIHJlYWRBbGxTeW5jKGlucHV0LCBidWZTaXplID0gMTAyNCkKICBpbm90aWZ5X2V2ZW50CiAgY29uc3RydWN0b3Iob2JqID0ge30pCiAgc2V0IHdkKHZhbHVlKQogIGdldCB3ZCgpCiAgc2V0IG1hc2sodmFsdWUpCiAgZ2V0IG1hc2soKQogIHNldCBjb29raWUodmFsdWUpCiAgZ2V0IGNvb2tpZSgpCiAgc2V0IGxlbih2YWx1ZSkKICBnZXQgbGVuKCkKICBzZXQgbmFtZSh2YWx1ZSkKICBnZXQgbmFtZSgpCiAgc3RhdGljIGZyb20oYWRkcmVzcykKICBpbm90aWZ5X2V2ZW50CiAgdG9TdHJpbmcoKQpFbmNvZGluZzJCeXRlcyhlbmNvZGluZykAAAAAAAAAAL8FAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					12,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
						"symkeys":
						[
							[
								30,
								44
							],
							[
								446,
								460
							],
							[
								530,
								541
							],
							[
								619,
								629
							],
							[
								683,
								691
							],
							[
								790,
								804
							],
							[
								947,
								954
							],
							[
								1165,
								1172
							],
							[
								1288,
								1305
							],
							[
								1325,
								1345
							],
							[
								1373,
								1396
							],
							[
								1804,
								1825
							],
							[
								2210,
								2226
							],
							[
								2857,
								2875
							],
							[
								2964,
								2980
							],
							[
								3149,
								3163
							],
							[
								3485,
								3497
							],
							[
								3801,
								3816
							],
							[
								4233,
								4247
							],
							[
								4316,
								4331
							],
							[
								4602,
								4616
							],
							[
								4989,
								5005
							],
							[
								5365,
								5379
							],
							[
								5714,
								5727
							],
							[
								6046,
								6058
							],
							[
								6598,
								6610
							],
							[
								7058,
								7074
							],
							[
								7240,
								7261
							],
							[
								7452,
								7467
							],
							[
								7632,
								7647
							],
							[
								7860,
								7876
							],
							[
								8452,
								8469
							],
							[
								8653,
								8670
							],
							[
								8766,
								8782
							],
							[
								9693,
								9709
							],
							[
								9821,
								9838
							],
							[
								10058,
								10075
							],
							[
								10459,
								10475
							],
							[
								10781,
								10803
							],
							[
								10982,
								11003
							],
							[
								11277,
								11297
							],
							[
								11543,
								11560
							],
							[
								11746,
								11773
							],
							[
								11907,
								11935
							],
							[
								12089,
								12113
							],
							[
								12298,
								12315
							],
							[
								12527,
								12546
							],
							[
								12747,
								12765
							],
							[
								12969,
								12988
							],
							[
								13200,
								13221
							],
							[
								13457,
								13481
							],
							[
								13723,
								13741
							],
							[
								14208,
								14223
							],
							[
								14403,
								14419
							],
							[
								14831,
								14849
							],
							[
								15095,
								15114
							],
							[
								15432,
								15448
							],
							[
								15626,
								15647
							],
							[
								15823,
								15842
							],
							[
								16553,
								16569
							],
							[
								17428,
								17440
							],
							[
								17675,
								17694
							],
							[
								17832,
								17847
							],
							[
								18050,
								18063
							],
							[
								18301,
								18319
							],
							[
								18534,
								18552
							],
							[
								18763,
								18788
							],
							[
								18911,
								18934
							],
							[
								19189,
								19215
							],
							[
								19510,
								19539
							],
							[
								19857,
								19883
							],
							[
								20173,
								20197
							],
							[
								20403,
								20428
							],
							[
								20710,
								20738
							],
							[
								21045,
								21069
							],
							[
								21354,
								21379
							],
							[
								21663,
								21686
							],
							[
								21970,
								21995
							],
							[
								22164,
								22186
							],
							[
								22320,
								22345
							],
							[
								22520,
								22548
							],
							[
								22742,
								22767
							],
							[
								23196,
								23207
							],
							[
								23291,
								23305
							],
							[
								23377,
								23389
							],
							[
								23519,
								23532
							],
							[
								23776,
								23789
							],
							[
								23972,
								23985
							],
							[
								24124,
								24142
							],
							[
								24388,
								24407
							],
							[
								24613,
								24633
							],
							[
								24819,
								24839
							],
							[
								25032,
								25043
							],
							[
								25173,
								25188
							],
							[
								25540,
								25561
							],
							[
								25723,
								25737
							],
							[
								25897,
								25909
							],
							[
								26066,
								26081
							],
							[
								26244,
								26260
							],
							[
								26473,
								26487
							],
							[
								26567,
								26578
							],
							[
								26819,
								26835
							],
							[
								27057,
								27078
							],
							[
								27258,
								27280
							],
							[
								27492,
								27506
							],
							[
								27579,
								27602
							],
							[
								27843,
								27856
							],
							[
								28067,
								28085
							],
							[
								28264,
								28283
							],
							[
								28586,
								28606
							],
							[
								28799,
								28812
							],
							[
								29214,
								29228
							],
							[
								29389,
								29406
							],
							[
								29624,
								29643
							],
							[
								29950,
								29968
							],
							[
								30425,
								30441
							],
							[
								30567,
								30589
							],
							[
								30675,
								30685
							],
							[
								30686,
								30699
							],
							[
								30969,
								30986
							],
							[
								31287,
								31305
							],
							[
								32159,
								32172
							],
							[
								32428,
								32442
							],
							[
								34081,
								34096
							],
							[
								34399,
								34412
							],
							[
								35472,
								35487
							],
							[
								36912,
								36930
							],
							[
								37077,
								37091
							],
							[
								37325,
								37340
							],
							[
								37489,
								37505
							],
							[
								37720,
								37734
							],
							[
								37875,
								37889
							],
							[
								38142,
								38158
							],
							[
								38330,
								38345
							],
							[
								38559,
								38569
							],
							[
								38767,
								38778
							],
							[
								38937,
								38951
							],
							[
								39143,
								39159
							],
							[
								39592,
								39603
							],
							[
								40084,
								40093
							],
							[
								40180,
								40199
							],
							[
								40607,
								40625
							],
							[
								41205,
								41219
							],
							[
								41403,
								41418
							],
							[
								41479,
								41495
							],
							[
								42008,
								42026
							],
							[
								42686,
								42700
							],
							[
								42909,
								42926
							],
							[
								43432,
								43444
							],
							[
								43545,
								43557
							],
							[
								43836,
								43849
							],
							[
								44674,
								44687
							],
							[
								45011,
								45029
							],
							[
								45498,
								45516
							],
							[
								45981,
								45998
							],
							[
								46492,
								46504
							],
							[
								46976,
								46993
							],
							[
								47524,
								47547
							],
							[
								47687,
								47697
							],
							[
								47822,
								47831
							],
							[
								47955,
								47964
							],
							[
								48088,
								48103
							],
							[
								48233,
								48245
							],
							[
								48372,
								48385
							],
							[
								48561,
								48575
							],
							[
								48704,
								48718
							],
							[
								49100,
								49114
							],
							[
								49316,
								49339
							],
							[
								49554,
								49579
							],
							[
								49808,
								49817
							],
							[
								50077,
								50104
							],
							[
								50186,
								50212
							],
							[
								50402,
								50421
							],
							[
								50701,
								50714
							],
							[
								50848,
								50859
							],
							[
								51053,
								51068
							],
							[
								51227,
								51247
							],
							[
								51358,
								51379
							],
							[
								51494,
								51509
							],
							[
								51799,
								51811
							],
							[
								52007,
								52015
							],
							[
								52016,
								52032
							],
							[
								52217,
								52241
							],
							[
								52380,
								52404
							],
							[
								52692,
								52717
							],
							[
								52975,
								52989
							],
							[
								53504,
								53518
							],
							[
								54109,
								54120
							],
							[
								54787,
								54798
							],
							[
								55106,
								55117
							],
							[
								55506,
								55516
							],
							[
								55655,
								55675
							],
							[
								55760,
								55775
							],
							[
								55906,
								55919
							],
							[
								56014,
								56029
							],
							[
								56288,
								56300
							],
							[
								56467,
								56478
							],
							[
								56731,
								56741
							],
							[
								56896,
								56909
							],
							[
								57682,
								57699
							],
							[
								57875,
								57889
							],
							[
								58727,
								58741
							],
							[
								58917,
								58937
							],
							[
								59591,
								59614
							],
							[
								59924,
								59942
							],
							[
								60146,
								60161
							],
							[
								60284,
								60300
							],
							[
								60424,
								60439
							],
							[
								60786,
								60802
							],
							[
								60958,
								60970
							],
							[
								61299,
								61311
							],
							[
								61638,
								61652
							],
							[
								61976,
								61991
							],
							[
								62623,
								62637
							],
							[
								62908,
								62926
							],
							[
								63400,
								63417
							],
							[
								63772,
								63786
							],
							[
								64070,
								64081
							],
							[
								64169,
								64180
							],
							[
								64420,
								64435
							],
							[
								64876,
								64893
							],
							[
								65119,
								65139
							],
							[
								83018,
								83039
							]
						],
						"symlist":
						[
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉ_ISOC99_SOURCE‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉatomic_add_int‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉquicksort_r‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉstrverscmp‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚ìÇ‚ÄÇ‚ÄÉINFINITY‚ÄÉ‚Ä¶‚ÄÉ‚Äî‚ÄÉmacro object",
							"‚Äî‚íª‚Äì‚ÄÉatomic_add_int‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtime_us‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉtime_us‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_realloc_helper‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚ÄÉ‚í°‚ÄÇ‚ÄÉjs_realloc_rt_helper‚Äâ(‚Äâ)‚Äâ;‚ÄÉ‚Äî‚ÄÉfunction declaration",
							"‚Äî‚íª‚Äì‚ÄÉregexp_flags_fromstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_flags_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_from_argv‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_from_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_from_dbuf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_compile‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_match‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_to_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉregexp_free_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_array_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_array_clear‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_array_to_argv‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_array_copys‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_strv_copys‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_from‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_tobinary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_to_cstringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_toint32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_toint64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_is_index‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_is_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_atom_is_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_name‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_argc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_cfunc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_bound‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_bind‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_bound_this‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_bind_this‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_throw_fn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_throw‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_return_value_fn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_return_undefined‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_return_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_get_str‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_get_str_n‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_get_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_prototype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_static_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_global_prototype_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_iterator_method‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_iterator_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_iterator_next‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_iterator_result‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_iterator_then_fn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_iterator_then‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_classname‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_equals‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_is‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_construct‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_error‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_function‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_has_propertystr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertyatom_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_bool‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_cstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_cstringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertyint_cstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertyint_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_stringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_int32‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_uint64‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertystr_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_propertyint_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_propertyint_int‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_propertystr_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_set_propertystr_stringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_get_propertydescriptor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_class_id‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_class_newid‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_class_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_class_find‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_class_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_class_name‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_object_tostring2‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_function_isnative‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_input‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_propenum_cmp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_propertyenums_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_strv_free_n‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_strv_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_strv_free_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_strv_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_strv_length‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_strv_dup‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_intv_to_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_static_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_static_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_ctor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_invoke_static‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_for‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_for_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_to_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_to_cstring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_values_dup‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_values_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_values_toarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_values_fromarray‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_type_name‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_typestr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_has_ref_count‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉvalue_mask‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_type‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_type_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_type_flag‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_clone‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_fwrite‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_equals‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_from_char‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_tosize‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_value_free_rt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_ptr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_dup‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_cstring_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_map_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_name‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_namestr‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉcall_module_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_func‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_ns‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_exports_find‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_exports_get‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_exports‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_modules_list‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_modules_array‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_modules_entries‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_modules_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_modules_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_entry‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉmodule_object‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_module_def‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_module_find_fwd‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_module_find_rev‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_module_indexof‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_module_at‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_arraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_sharedarraybuffer‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_date‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_map‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_set‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_generator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_regexp‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_promise‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_dataview‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_iterable‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_iterator‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_typedarray_prototype‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_typedarray_constructor‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_invoke‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_operatorset_value‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_symbol_operatorset_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_operators_create‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_number_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_date_new‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_date_from_ms‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_date_from_time_ns‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_date_from_timespec‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_date_gettime‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_date_time‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚í∏‚Äì‚ÄÉtimespec‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚Äâ;‚ÄÉ‚Äî‚ÄÉtype",
							"‚Äî‚íª‚Äì‚ÄÉjs_date_timespec‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_freevalue‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_fromvalue‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arraybuffer_bytelength‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_eval_module‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_eval_binary‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_eval_buf‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_eval_str‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_eval_fmt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_time_ms‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_interrupt_handler‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_timer_unlink‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_timer_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_call_handler‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sab_alloc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sab_free‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_sab_dup‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_error_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_error_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_error_print‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_error_stack‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_io_readhandler_fn‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_io_readhandler_cfunc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_promise_resolve‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_promise_then‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_promise_catch‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_promise_wrap‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_promise_adopt‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_to_string‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_to_source‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_alloc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉarguments_push‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_alloc‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_arguments_dump‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tostring‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_tosource‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_towstringlen‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_json_stringify‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_identifier_len‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction",
							"‚Äî‚íª‚Äì‚ÄÉjs_is_identifier_atom‚Äâ(‚Äâ)‚ÄÉ{‚Äâ‚Ä¶‚Äâ}‚ÄÉ‚Äî‚ÄÉfunction"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/BQAAQXJndW1lbnRFcnJvcgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCk5vcm1hbGl6ZVBhdGgocCkKRmRXcml0ZXIoZmQsIG5hbWUpCiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCkltcEV4cFR5cGUoc2VxKQpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCkV4cG9ydE5hbWUoc2VxKQpCeXRlU2VxdWVuY2UodG9rZW5zKQpNb2R1bGVMb2FkZXIobW9kdWxlKQogIHNlbGYgPSBmdW5jdGlvbiBQYXJlbnRoZXNlQmFsYW5jZXIodG9rKQogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQpFeHBvcnQKRXhwb3J0CiAgaWRzKCkKSW1wb3J0CkltcG9ydAogIGlkcygpCkFkZERlcChzb3VyY2UsIGZpbGUpCk5vbldTKHRva2VucykKVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKVW50aWxFT0woaWR4LCB0b2tlbnMpClVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gCldob2xlTGluZShpZHgsIHRva2VucykKUmFuZ2UoZmlsZSwgc3RhcnQsIGVuZCkKUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQpJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkKSXNSYW5nZShvYmopCk51bWVyaWNSYW5nZQogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpCiAgZ2V0IHN0YXJ0KCkKICBzZXQgc3RhcnQodmFsdWUpCiAgZ2V0IGVuZCgpCiAgc2V0IGVuZCh2YWx1ZSkKICBzdGF0aWMgZnJvbShyYW5nZSkKICBzdGF0aWMgKmhvbGVzKHJhbmdlcywgb25seSA9IGZhbHNlKQogIHN0YXRpYyBiZXR3ZWVuKFtzMSwgZTFdLCBbczIsIGUyXSkKTnVtZXJpY1JhbmdlCkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCiAgc2xpY2VBdChuKQogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkKICBkdW1wKCkKICBhdChpKQogIHRvQXJyYXkoKQogIGhvbGVzKCkKICBmaXJzdENodW5rKCkKICBsYXN0Q2h1bmsoKQogIHdyaXRlKG91dCwgZGVwdGggPSAwLCBzZXJpYWwpCiAgdG9TdHJpbmcoZm4gPSBGaWxlQmFubmVyQ29tbWVudCkKRmlsZU1hcApGaWxlTWFwCiAgZnVuY3Rpb24oZGVwdGgsIG9wdHMpCkJ1ZmZlckZpbGUoZmlsZSwgYnVmKQpCdWZmZXJMZW5ndGhzKGZpbGUpCkJ1ZmZlck9mZnNldHMoZmlsZSkKQnVmZmVyUmFuZ2VzKGZpbGUpCldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spCiAgc3RyaXBMZWFkaW5nRG90U2xhc2gobikKU3ByZWFkQW5kSm9pbihpdGVyYXRvciwgc2VwYXJhdG9yID0gJycpClByaW50RVM2SW1wb3J0KGltcCkKUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogIG1haW4oLi4uYXJncykKICB3cml0ZShidWYsIGxlbikKICBwdXRzKHMpCiAgY2xvc2UoKQAAAAAAAAAADyUAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					13,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								507,
								520
							],
							[
								539,
								559
							],
							[
								986,
								1001
							],
							[
								1036,
								1042
							],
							[
								1099,
								1124
							],
							[
								1338,
								1374
							],
							[
								1695,
								1720
							],
							[
								1757,
								1784
							],
							[
								1853,
								1879
							],
							[
								1937,
								1957
							],
							[
								2028,
								2046
							],
							[
								2296,
								2309
							],
							[
								2337,
								2343
							],
							[
								2396,
								2418
							],
							[
								2766,
								2790
							],
							[
								3111,
								3141
							],
							[
								3217,
								3238
							],
							[
								3285,
								3313
							],
							[
								3324,
								3337
							],
							[
								3427,
								3440
							],
							[
								3706,
								3712
							],
							[
								3797,
								3817
							],
							[
								3934,
								3946
							],
							[
								3970,
								3997
							],
							[
								4052,
								4070
							],
							[
								4496,
								4508
							],
							[
								4517,
								4542
							],
							[
								4626,
								4635
							],
							[
								4724,
								4747
							],
							[
								4770,
								4776
							],
							[
								4806,
								4830
							],
							[
								4847,
								4853
							],
							[
								4915,
								4921
							],
							[
								4971,
								4995
							],
							[
								5312,
								5336
							],
							[
								5425,
								5431
							],
							[
								5712,
								5736
							],
							[
								5765,
								5771
							],
							[
								5922,
								5951
							],
							[
								6067,
								6076
							],
							[
								6227,
								6256
							],
							[
								6516,
								6582
							],
							[
								7305,
								7322
							],
							[
								7622,
								7640
							],
							[
								7683,
								7699
							],
							[
								7792,
								7831
							],
							[
								8164,
								8168
							],
							[
								8307,
								8314
							],
							[
								8377,
								8388
							],
							[
								8586,
								8604
							],
							[
								8900,
								8917
							],
							[
								10350,
								10354
							],
							[
								10959,
								11007
							],
							[
								11264,
								11270
							],
							[
								11774,
								11780
							],
							[
								11836,
								11842
							],
							[
								12515,
								12521
							],
							[
								12552,
								12558
							],
							[
								12646,
								12652
							],
							[
								13175,
								13181
							],
							[
								13207,
								13213
							],
							[
								13231,
								13236
							],
							[
								13279,
								13294
							],
							[
								13317,
								13372
							],
							[
								14420,
								14426
							],
							[
								14549,
								14555
							],
							[
								14711,
								14717
							],
							[
								15292,
								15298
							],
							[
								15347,
								15353
							],
							[
								15520,
								15526
							],
							[
								15544,
								15549
							],
							[
								15600,
								15615
							],
							[
								15801,
								15807
							],
							[
								15827,
								15833
							],
							[
								15850,
								15856
							],
							[
								16110,
								16119
							],
							[
								16191,
								16197
							],
							[
								16302,
								16315
							],
							[
								16417,
								16421
							],
							[
								19809,
								19838
							],
							[
								19988,
								20010
							],
							[
								20036,
								20042
							],
							[
								20073,
								20103
							],
							[
								20138,
								20144
							],
							[
								20170,
								20180
							],
							[
								20235,
								20259
							],
							[
								20320,
								20352
							],
							[
								20378,
								20391
							],
							[
								20418,
								20448
							],
							[
								20501,
								20536
							],
							[
								20541,
								20561
							],
							[
								20675,
								20706
							],
							[
								20984,
								21016
							],
							[
								21191,
								21228
							],
							[
								21312,
								21345
							],
							[
								21408,
								21429
							],
							[
								21535,
								21547
							],
							[
								21566,
								21589
							],
							[
								21722,
								21733
							],
							[
								21762,
								21778
							],
							[
								21810,
								21819
							],
							[
								21848,
								21862
							],
							[
								21894,
								21912
							],
							[
								22144,
								22179
							],
							[
								22965,
								22999
							],
							[
								23083,
								23095
							],
							[
								23285,
								23295
							],
							[
								23541,
								23548
							],
							[
								23567,
								23589
							],
							[
								23961,
								23979
							],
							[
								24121,
								24130
							],
							[
								24158,
								24179
							],
							[
								24420,
								24429
							],
							[
								24474,
								24484
							],
							[
								24615,
								24622
							],
							[
								24737,
								24749
							],
							[
								24779,
								24796
							],
							[
								25006,
								25016
							],
							[
								25066,
								25084
							],
							[
								25130,
								25155
							],
							[
								25269,
								25286
							],
							[
								26931,
								26937
							],
							[
								27079,
								27091
							],
							[
								27135,
								27165
							],
							[
								27673,
								27678
							],
							[
								28263,
								28272
							],
							[
								28295,
								28304
							],
							[
								28325,
								28332
							],
							[
								28365,
								28377
							],
							[
								28883,
								28895
							],
							[
								28924,
								28944
							],
							[
								29008,
								29019
							],
							[
								29052,
								29072
							],
							[
								29136,
								29165
							],
							[
								30680,
								30712
							],
							[
								31117,
								31124
							],
							[
								31168,
								31175
							],
							[
								31203,
								31225
							],
							[
								31254,
								31274
							],
							[
								31469,
								31481
							],
							[
								31659,
								31666
							],
							[
								31955,
								31985
							],
							[
								32301,
								32329
							],
							[
								32359,
								32363
							],
							[
								32382,
								32410
							],
							[
								32443,
								32462
							],
							[
								32521,
								32548
							],
							[
								32581,
								32600
							],
							[
								32675,
								32704
							],
							[
								32822,
								32845
							],
							[
								32985,
								33008
							],
							[
								33137,
								33277
							],
							[
								34005,
								34039
							],
							[
								34106,
								34154
							],
							[
								34200,
								34228
							],
							[
								34277,
								34298
							],
							[
								34372,
								34393
							],
							[
								34454,
								34475
							],
							[
								34548,
								34594
							],
							[
								34643,
								34649
							],
							[
								34723,
								34729
							],
							[
								34795,
								34801
							],
							[
								34872,
								34894
							],
							[
								35355,
								35370
							],
							[
								35456,
								35463
							],
							[
								35553,
								35560
							],
							[
								35901,
								35907
							],
							[
								35940,
								35948
							],
							[
								36115,
								36121
							],
							[
								36169,
								36176
							],
							[
								36238,
								36246
							],
							[
								36303,
								36309
							],
							[
								36368,
								36374
							],
							[
								36436,
								36442
							],
							[
								36505,
								36511
							],
							[
								36574,
								36580
							],
							[
								36638,
								36644
							],
							[
								36993,
								37015
							],
							[
								37365,
								37371
							],
							[
								37376,
								37389
							],
							[
								37789,
								37819
							],
							[
								37832,
								37838
							],
							[
								38003,
								38012
							],
							[
								38057,
								38063
							],
							[
								38168,
								38197
							],
							[
								39068,
								39082
							],
							[
								39384,
								39398
							],
							[
								39553,
								39566
							],
							[
								39603,
								39610
							]
						],
						"symlist":
						[
							"ArgumentError",
							"constructor(...args)",
							"logFile = () =>",
							"arg =>",
							"function NormalizePath(p)",
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"IsWhiteSpace = str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function ModuleLoader(module)",
							"function ProcessFile(source, log = () => {}, recursive, depth = 0)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							" function Export(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Export",
							"Export",
							"ids()",
							"({ lexeme }) =>",
							" function Import(tokens, relativePath = s => s, depth)",
							"Import",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Import",
							"ids()",
							"({ lexeme }) =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function AddDep(source, file)",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"firstChunk()",
							"([range, buf], i) =>",
							"lastChunk()",
							"([range, buf], i) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"(item, i) =>",
							"item =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function* DependencyTree( root, indent = ' ', spacing = false, depth = 0, pre = '', fn = (name, depth) => `${name} (${depth})` )",
							" function stripLeadingDotSlash(n)",
							"function SpreadAndJoin(iterator, separator = '')",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							"write(buf, len)",
							"puts(s)",
							"close()",
							" () =>",
							" file =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"ContainsAny = (arr, tokens) =>",
							"tok =>",
							"impexp =>",
							"hdr =>",
							" ([acc, prev], hdr) =>",
							"(acc, line) =>",
							"({ depth }) =>",
							"({ name }) =>",
							"name =>"
						]
					},
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					14,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
						"symkeys":
						[
							[
								580,
								595
							],
							[
								2078,
								2087
							],
							[
								2113,
								2122
							],
							[
								2545,
								2567
							],
							[
								3737,
								3743
							],
							[
								3868,
								3874
							]
						],
						"symlist":
						[
							"function main()",
							"(a, b) =>",
							"(a, b) =>",
							" function DumpSock(s)",
							" () =>",
							" () =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAC/BQAAQXJndW1lbnRFcnJvcgogIGNvbnN0cnVjdG9yKC4uLmFyZ3MpCk5vcm1hbGl6ZVBhdGgocCkKRmRXcml0ZXIoZmQsIG5hbWUpCiAgaW5zcGVjdCgpCkltcG9ydElkcyhzZXEpCkltcEV4cFR5cGUoc2VxKQpJbXBvcnRUeXBlKHNlcSkKSW1wb3J0RmlsZShzZXEpCkV4cG9ydE5hbWUoc2VxKQpCeXRlU2VxdWVuY2UodG9rZW5zKQpNb2R1bGVMb2FkZXIobW9kdWxlKQogIHNlbGYgPSBmdW5jdGlvbiBQYXJlbnRoZXNlQmFsYW5jZXIodG9rKQogIHJlc2V0KCkKICBnZXQgZGVwdGgoKQpFeHBvcnQKRXhwb3J0CiAgaWRzKCkKSW1wb3J0CkltcG9ydAogIGlkcygpCkFkZERlcChzb3VyY2UsIGZpbGUpCk5vbldTKHRva2VucykKVG9rZW5TZXF1ZW5jZSh0b2tlbnMpCiAgdG9TdHJpbmcoKQpVbnF1b3RlKGxleGVtZSkKTGl0ZXJhbFNlcXVlbmNlKHRva2VucykKVW50aWxFT0woaWR4LCB0b2tlbnMpClVudGlsKGlkeCwgdG9rZW5zLCBwcmVkID0gCldob2xlTGluZShpZHgsIHRva2VucykKUmFuZ2UoZmlsZSwgc3RhcnQsIGVuZCkKUmFuZ2UucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24oKQpJblJhbmdlKFtzdGFydCwgZW5kXSwgaSkKSXNSYW5nZShvYmopCk51bWVyaWNSYW5nZQogIGNvbnN0cnVjdG9yKHN0YXJ0LCBlbmQpCiAgZ2V0IHN0YXJ0KCkKICBzZXQgc3RhcnQodmFsdWUpCiAgZ2V0IGVuZCgpCiAgc2V0IGVuZCh2YWx1ZSkKICBzdGF0aWMgZnJvbShyYW5nZSkKICBzdGF0aWMgKmhvbGVzKHJhbmdlcywgb25seSA9IGZhbHNlKQogIHN0YXRpYyBiZXR3ZWVuKFtzMSwgZTFdLCBbczIsIGUyXSkKTnVtZXJpY1JhbmdlCkZpbGVNYXAKICBjb25zdHJ1Y3RvcihmaWxlLCBidWYpCiAgc3RhdGljIGVtcHR5KGZpbGUpCiAgaXNFbXB0eSgpCiAgc3RhdGljIGZvcihmaWxlLCBidWYpCiAgaXNFbXB0eSgpCiAgdG9TdHJpbmcoKQpGaWxlTWFwCiAgc3BsaXRBdChwb3MpCiAgc2xpY2VBdChuKQogIHJlcGxhY2VSYW5nZShyYW5nZSwgZmlsZSkKICBkdW1wKCkKICBhdChpKQogIHRvQXJyYXkoKQogIGhvbGVzKCkKICBmaXJzdENodW5rKCkKICBsYXN0Q2h1bmsoKQogIHdyaXRlKG91dCwgZGVwdGggPSAwLCBzZXJpYWwpCiAgdG9TdHJpbmcoZm4gPSBGaWxlQmFubmVyQ29tbWVudCkKRmlsZU1hcApGaWxlTWFwCiAgZnVuY3Rpb24oZGVwdGgsIG9wdHMpCkJ1ZmZlckZpbGUoZmlsZSwgYnVmKQpCdWZmZXJMZW5ndGhzKGZpbGUpCkJ1ZmZlck9mZnNldHMoZmlsZSkKQnVmZmVyUmFuZ2VzKGZpbGUpCldyaXRlRmlsZShmaWxlLCB0b2spCkR1bXBMZXhlcihsZXgpCkR1bXBUb2tlbih0b2spCiAgc3RyaXBMZWFkaW5nRG90U2xhc2gobikKU3ByZWFkQW5kSm9pbihpdGVyYXRvciwgc2VwYXJhdG9yID0gJycpClByaW50RVM2SW1wb3J0KGltcCkKUHJpbnRDSlNJbXBvcnQoeyB0eXBlLCBsb2NhbCwgZmlsZSB9KQogIG1haW4oLi4uYXJncykKICB3cml0ZShidWYsIGxlbikKICBwdXRzKHMpCiAgY2xvc2UoKQAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				],
				[
					15,
					1,
					"outline_refresh",
					{
						"path": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
						"symkeys":
						[
							[
								507,
								520
							],
							[
								539,
								559
							],
							[
								986,
								1001
							],
							[
								1036,
								1042
							],
							[
								1099,
								1124
							],
							[
								1338,
								1374
							],
							[
								1695,
								1720
							],
							[
								1757,
								1784
							],
							[
								1853,
								1879
							],
							[
								1937,
								1957
							],
							[
								2028,
								2046
							],
							[
								2296,
								2309
							],
							[
								2337,
								2343
							],
							[
								2396,
								2418
							],
							[
								2766,
								2790
							],
							[
								3111,
								3141
							],
							[
								3217,
								3238
							],
							[
								3285,
								3313
							],
							[
								3324,
								3337
							],
							[
								3427,
								3440
							],
							[
								3706,
								3712
							],
							[
								3797,
								3817
							],
							[
								3934,
								3946
							],
							[
								3970,
								3997
							],
							[
								4052,
								4070
							],
							[
								4496,
								4508
							],
							[
								4517,
								4542
							],
							[
								4626,
								4635
							],
							[
								4724,
								4747
							],
							[
								4770,
								4776
							],
							[
								4806,
								4830
							],
							[
								4847,
								4853
							],
							[
								4915,
								4921
							],
							[
								4971,
								4995
							],
							[
								5312,
								5336
							],
							[
								5425,
								5431
							],
							[
								5712,
								5736
							],
							[
								5765,
								5771
							],
							[
								5922,
								5951
							],
							[
								6067,
								6076
							],
							[
								6227,
								6256
							],
							[
								6516,
								6582
							],
							[
								7305,
								7322
							],
							[
								7622,
								7640
							],
							[
								7683,
								7699
							],
							[
								7792,
								7831
							],
							[
								8164,
								8168
							],
							[
								8307,
								8314
							],
							[
								8377,
								8388
							],
							[
								8586,
								8604
							],
							[
								8900,
								8917
							],
							[
								10350,
								10354
							],
							[
								10959,
								11007
							],
							[
								11264,
								11270
							],
							[
								11774,
								11780
							],
							[
								11836,
								11842
							],
							[
								12515,
								12521
							],
							[
								12552,
								12558
							],
							[
								12646,
								12652
							],
							[
								13175,
								13181
							],
							[
								13207,
								13213
							],
							[
								13231,
								13236
							],
							[
								13279,
								13294
							],
							[
								13317,
								13372
							],
							[
								14420,
								14426
							],
							[
								14549,
								14555
							],
							[
								14711,
								14717
							],
							[
								15292,
								15298
							],
							[
								15347,
								15353
							],
							[
								15520,
								15526
							],
							[
								15544,
								15549
							],
							[
								15600,
								15615
							],
							[
								15801,
								15807
							],
							[
								15827,
								15833
							],
							[
								15850,
								15856
							],
							[
								16110,
								16119
							],
							[
								16191,
								16197
							],
							[
								16302,
								16315
							],
							[
								16417,
								16421
							],
							[
								19809,
								19838
							],
							[
								19988,
								20010
							],
							[
								20036,
								20042
							],
							[
								20073,
								20103
							],
							[
								20138,
								20144
							],
							[
								20170,
								20180
							],
							[
								20235,
								20259
							],
							[
								20320,
								20352
							],
							[
								20378,
								20391
							],
							[
								20418,
								20448
							],
							[
								20501,
								20536
							],
							[
								20541,
								20561
							],
							[
								20675,
								20706
							],
							[
								20984,
								21016
							],
							[
								21191,
								21228
							],
							[
								21312,
								21345
							],
							[
								21408,
								21429
							],
							[
								21535,
								21547
							],
							[
								21566,
								21589
							],
							[
								21722,
								21733
							],
							[
								21762,
								21778
							],
							[
								21810,
								21819
							],
							[
								21848,
								21862
							],
							[
								21894,
								21912
							],
							[
								22144,
								22179
							],
							[
								22965,
								22999
							],
							[
								23083,
								23095
							],
							[
								23285,
								23295
							],
							[
								23541,
								23548
							],
							[
								23567,
								23589
							],
							[
								23961,
								23979
							],
							[
								24121,
								24130
							],
							[
								24158,
								24179
							],
							[
								24420,
								24429
							],
							[
								24474,
								24484
							],
							[
								24615,
								24622
							],
							[
								24737,
								24749
							],
							[
								24779,
								24796
							],
							[
								25006,
								25016
							],
							[
								25066,
								25084
							],
							[
								25130,
								25155
							],
							[
								25269,
								25286
							],
							[
								26931,
								26937
							],
							[
								27079,
								27091
							],
							[
								27135,
								27165
							],
							[
								27673,
								27678
							],
							[
								28263,
								28272
							],
							[
								28295,
								28304
							],
							[
								28325,
								28332
							],
							[
								28365,
								28377
							],
							[
								28883,
								28895
							],
							[
								28924,
								28944
							],
							[
								29008,
								29019
							],
							[
								29052,
								29072
							],
							[
								29136,
								29165
							],
							[
								30680,
								30712
							],
							[
								31117,
								31124
							],
							[
								31168,
								31175
							],
							[
								31203,
								31225
							],
							[
								31254,
								31274
							],
							[
								31469,
								31481
							],
							[
								31659,
								31666
							],
							[
								31955,
								31985
							],
							[
								32301,
								32329
							],
							[
								32359,
								32363
							],
							[
								32382,
								32410
							],
							[
								32443,
								32462
							],
							[
								32521,
								32548
							],
							[
								32581,
								32600
							],
							[
								32675,
								32704
							],
							[
								32822,
								32845
							],
							[
								32985,
								33008
							],
							[
								33137,
								33277
							],
							[
								34005,
								34039
							],
							[
								34106,
								34154
							],
							[
								34200,
								34228
							],
							[
								34277,
								34298
							],
							[
								34372,
								34393
							],
							[
								34454,
								34475
							],
							[
								34548,
								34594
							],
							[
								34643,
								34649
							],
							[
								34723,
								34729
							],
							[
								34795,
								34801
							],
							[
								34872,
								34894
							],
							[
								35355,
								35370
							],
							[
								35456,
								35463
							],
							[
								35553,
								35560
							],
							[
								35901,
								35907
							],
							[
								35940,
								35948
							],
							[
								36115,
								36121
							],
							[
								36169,
								36176
							],
							[
								36238,
								36246
							],
							[
								36303,
								36309
							],
							[
								36368,
								36374
							],
							[
								36436,
								36442
							],
							[
								36505,
								36511
							],
							[
								36574,
								36580
							],
							[
								36638,
								36644
							],
							[
								36993,
								37015
							],
							[
								37365,
								37371
							],
							[
								37376,
								37389
							],
							[
								37789,
								37819
							],
							[
								37832,
								37838
							],
							[
								38003,
								38012
							],
							[
								38057,
								38063
							],
							[
								38168,
								38197
							],
							[
								39068,
								39082
							],
							[
								39384,
								39398
							],
							[
								39553,
								39566
							],
							[
								39603,
								39610
							]
						],
						"symlist":
						[
							"ArgumentError",
							"constructor(...args)",
							"logFile = () =>",
							"arg =>",
							"function NormalizePath(p)",
							"FileBannerComment = (filename, i) =>",
							"IsBuiltin = moduleName =>",
							"compact = (n, more = {}) =>",
							"AddUnique = (arr, item) =>",
							"IntToDWord = ival =>",
							"IntToBinary = i =>",
							"(n, value) =>",
							"num =>",
							"(type, lexeme, tok) =>",
							"CompareRange = (a, b) =>",
							"PutsFunction = outFn => str =>",
							"IsWhiteSpace = str =>",
							"debugLog = (str, ...args) =>",
							"pred = arg =>",
							"(acc, opt) =>",
							"arg =>",
							"FileWriter = file =>",
							"close: () =>",
							"function FdWriter(fd, name)",
							"fn = (buf, len) =>",
							"close: () =>",
							"seek: (whence, offset) =>",
							"inspect()",
							"function ImportIds(seq)",
							"tok =>",
							"function ImpExpType(seq)",
							"tok =>",
							"tok =>",
							"function ImportType(seq)",
							"function ImportFile(seq)",
							"tok =>",
							"function ExportName(seq)",
							"tok =>",
							"function ByteSequence(tokens)",
							"(n, t) =>",
							"function ModuleLoader(module)",
							"function ProcessFile(source, log = () => {}, recursive, depth = 0)",
							".handler = lex =>",
							".beginCode = () =>",
							"balancer = () =>",
							"self = function ParentheseBalancer(tok)",
							"s =>",
							"reset()",
							"get depth()",
							"showToken = tok =>",
							"PathAdjust = s =>",
							"i =>",
							" function Export(tokens, relativePath = s => s)",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Export",
							"Export",
							"ids()",
							"({ lexeme }) =>",
							" function Import(tokens, relativePath = s => s, depth)",
							"Import",
							"tok =>",
							"tok =>",
							"tok =>",
							"tok =>",
							"Import",
							"ids()",
							"({ lexeme }) =>",
							"exp =>",
							"exp =>",
							"tok =>",
							"(a, b) =>",
							"imp =>",
							"(acc, imp) =>",
							"b =>",
							"function AddDep(source, file)",
							"function NonWS(tokens)",
							"tok =>",
							"function TokenSequence(tokens)",
							"tok =>",
							"toString()",
							"function Unquote(lexeme)",
							"function LiteralSequence(tokens)",
							"(acc, tok) =>",
							"function UntilEOL(idx, tokens)",
							"function Until(idx, tokens, pred = ",
							"(null, [';', '\\n']))",
							"function WholeLine(idx, tokens)",
							"function Range(file, start, end)",
							"Range.prototype.toString = function()",
							"function InRange([start, end], i)",
							"function IsRange(obj)",
							"NumericRange",
							"constructor(start, end)",
							"get start()",
							"set start(value)",
							"get end()",
							"set end(value)",
							"static from(range)",
							"static *holes(ranges, only = false)",
							"static between([s1, e1], [s2, e2])",
							"NumericRange",
							"pad = s =>",
							"FileMap",
							"constructor(file, buf)",
							"static empty(file)",
							"isEmpty()",
							"static for(file, buf)",
							"isEmpty()",
							"toString()",
							"FileMap",
							"splitAt(pos)",
							"([range, buf]) =>",
							"sliceAt(n)",
							" ([range, buf]) =>",
							"replaceRange(range, file)",
							"sliceIndex = n =>",
							"dump()",
							"(item, i) =>",
							"(acc, [range, buf, str], i) =>",
							"at(i)",
							"toArray()",
							"(s, i) =>",
							"holes()",
							"([range]) =>",
							"firstChunk()",
							"([range, buf], i) =>",
							"lastChunk()",
							"([range, buf], i) =>",
							"write(out, depth = 0, serial)",
							"toString(fn = FileBannerComment)",
							"FileMap",
							"FileMap",
							" function(depth, opts)",
							"([range, buf], i) =>",
							"(item, i) =>",
							"item =>",
							"function BufferFile(file, buf)",
							"function BufferLengths(file)",
							"b =>",
							"function BufferOffsets(file)",
							"([pos, list], b) =>",
							"function BufferRanges(file)",
							"([pos, list], b) =>",
							"function WriteFile(file, tok)",
							"function DumpLexer(lex)",
							"function DumpToken(tok)",
							"function* DependencyTree( root, indent = ' ', spacing = false, depth = 0, pre = '', fn = (name, depth) => `${name} (${depth})` )",
							" function stripLeadingDotSlash(n)",
							"function SpreadAndJoin(iterator, separator = '')",
							"function PrintES6Import(imp)",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							" ({ local, file }) =>",
							"function PrintCJSImport({ type, local, file })",
							" () =>",
							" () =>",
							" () =>",
							"function main(...args)",
							"write(buf, len)",
							"puts(s)",
							"close()",
							" () =>",
							" file =>",
							" () =>",
							" arg =>",
							" file =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							" () =>",
							"RelativePath = file =>",
							" () =>",
							" (...args) =>",
							"ContainsAny = (arr, tokens) =>",
							"tok =>",
							"impexp =>",
							"hdr =>",
							" ([acc, prev], hdr) =>",
							"(acc, line) =>",
							"({ depth }) =>",
							"({ name }) =>",
							"name =>"
						]
					},
					"AgAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAICBtYWluKCkKRHVtcFNvY2socykAAAAAAAAAAL8FAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAAAAAA"
				]
			]
		},
		{
			"file": "resolve-imports.js",
			"settings":
			{
				"buffer_size": 39999,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					24,
					1,
					"insert",
					{
						"characters": "isFile"
					},
					"BwAAAK5sAAAAAAAAr2wAAAAAAAAAAAAAr2wAAAAAAACvbAAAAAAAAAYAAABleGlzdHOvbAAAAAAAALBsAAAAAAAAAAAAALBsAAAAAAAAsWwAAAAAAAAAAAAAsWwAAAAAAACybAAAAAAAAAAAAACybAAAAAAAALNsAAAAAAAAAAAAALNsAAAAAAAAtGwAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAK5sAAAAAAAAtGwAAAAAAAAAAAAAAADwvw"
				],
				[
					60,
					1,
					"left_delete",
					null,
					"AQAAAANDAAAAAAAAA0MAAAAAAAABAAAACg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAARDAAAAAAAABEMAAAAAAAAAAAAAAADwvw"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAANDAAAAAAAABEMAAAAAAAAAAAAABEMAAAAAAAAKQwAAAAAAAAAAAAAKQwAAAAAAAAtDAAAAAAAAAAAAAAtDAAAAAAAAEUMAAAAAAAAAAAAABEMAAAAAAAAEQwAAAAAAAAYAAAAgICAgICA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAANDAAAAAAAAA0MAAAAAAAAAAAAAAADwvw"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\ncontinue;"
					},
					"DAAAACVDAAAAAAAAJkMAAAAAAAAAAAAAJkMAAAAAAAAsQwAAAAAAAAAAAAAFQwAAAAAAAAVDAAAAAAAABgAAACAgICAgICZDAAAAAAAAJ0MAAAAAAAAAAAAAJ0MAAAAAAAAoQwAAAAAAAAAAAAAoQwAAAAAAAClDAAAAAAAAAAAAAClDAAAAAAAAKkMAAAAAAAAAAAAAKkMAAAAAAAArQwAAAAAAAAAAAAArQwAAAAAAACxDAAAAAAAAAAAAACxDAAAAAAAALUMAAAAAAAAAAAAALUMAAAAAAAAuQwAAAAAAAAAAAAAuQwAAAAAAAC9DAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACVDAAAAAAAAJUMAAAAAAAAAAAAAAADwvw"
				],
				[
					96,
					1,
					"cut",
					null,
					"AQAAACBDAAAAAAAAIEMAAAAAAAAQAAAAICAgICAgY29udGludWU7Cg",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADBDAAAAAAAAIEMAAAAAAAAAAAAAAAAAAA"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": "ui"
					},
					"AwAAALNCAAAAAAAAtEIAAAAAAAAAAAAAtEIAAAAAAAC0QgAAAAAAAAYAAABleGlzdHO0QgAAAAAAALVCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALNCAAAAAAAAuUIAAAAAAAAAAAAAAADwvw"
				],
				[
					102,
					1,
					"left_delete",
					null,
					"AQAAALRCAAAAAAAAtEIAAAAAAAABAAAAaQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALVCAAAAAAAAtUIAAAAAAAAAAAAAAADwvw"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "^'"
					},
					"AgAAALRCAAAAAAAAtUIAAAAAAAAAAAAAtUIAAAAAAAC2QgAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALRCAAAAAAAAtEIAAAAAAAAAAAAAAADwvw"
				],
				[
					104,
					3,
					"left_delete",
					null,
					"AwAAALVCAAAAAAAAtUIAAAAAAAABAAAAJ7RCAAAAAAAAtEIAAAAAAAABAAAAXrNCAAAAAAAAs0IAAAAAAAABAAAAdQ",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALZCAAAAAAAAtkIAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"insert",
					{
						"characters": "isFile"
					},
					"BgAAALNCAAAAAAAAtEIAAAAAAAAAAAAAtEIAAAAAAAC1QgAAAAAAAAAAAAC1QgAAAAAAALZCAAAAAAAAAAAAALZCAAAAAAAAt0IAAAAAAAAAAAAAt0IAAAAAAAC4QgAAAAAAAAAAAAC4QgAAAAAAALlCAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALNCAAAAAAAAs0IAAAAAAAAAAAAAAADwvw"
				],
				[
					114,
					1,
					"paste",
					null,
					"AgAAAFpDAAAAAAAAYEMAAAAAAAAAAAAAYEMAAAAAAABgQwAAAAAAAAYAAABleGlzdHM",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFpDAAAAAAAAYEMAAAAAAAAAAAAAAADwvw"
				],
				[
					118,
					1,
					"paste",
					null,
					"AgAAANlDAAAAAAAA30MAAAAAAAAAAAAA30MAAAAAAADfQwAAAAAAAAYAAABleGlzdHM",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANlDAAAAAAAA30MAAAAAAAAAAAAAAADwvw"
				],
				[
					140,
					1,
					"paste",
					null,
					"AgAAAABKAAAAAAAABkoAAAAAAAAAAAAABkoAAAAAAAAGSgAAAAAAAAYAAABleGlzdHM",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAABKAAAAAAAABkoAAAAAAAAAAAAAAADwvw"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "8i"
					},
					"AwAAANoYAAAAAAAA2xgAAAAAAAAAAAAA2xgAAAAAAADbGAAAAAAAAAYAAABleGlzdHPbGAAAAAAAANwYAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoYAAAAAAAA4BgAAAAAAAAAAAAAAADwvw"
				],
				[
					147,
					2,
					"left_delete",
					null,
					"AgAAANsYAAAAAAAA2xgAAAAAAAABAAAAadoYAAAAAAAA2hgAAAAAAAABAAAAOA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANwYAAAAAAAA3BgAAAAAAAAAAAAAAADwvw"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "isFile"
					},
					"BgAAANoYAAAAAAAA2xgAAAAAAAAAAAAA2xgAAAAAAADcGAAAAAAAAAAAAADcGAAAAAAAAN0YAAAAAAAAAAAAAN0YAAAAAAAA3hgAAAAAAAAAAAAA3hgAAAAAAADfGAAAAAAAAAAAAADfGAAAAAAAAOAYAAAAAAAAAAAAAA",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAANoYAAAAAAAA2hgAAAAAAAAAAAAAAADwvw"
				],
				[
					164,
					1,
					"revert",
					null,
					"",
					"AwAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAL0aAAAAAAAAxBoAAAAAAAAAAAAAAADwvw"
				],
				[
					1,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC9GgAAAAAAAMQaAAAAAAAAAAAAAAAA8L8"
				]
			]
		}
	],
	"build_system": "Packages/Makefile/Make.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Build all",
					""
				],
				[
					"Build tests",
					""
				],
				[
					"List",
					""
				],
				[
					"Rebuild CTags",
					""
				],
				[
					"clang-format",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"OUT",
				"Browse Mode: Outline (Right)"
			],
			[
				"outline",
				"Browse Mode: Outline (Right)"
			],
			[
				"out",
				"Browse Mode: Outline (Right)"
			],
			[
				"edit ",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"edit",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"outli",
				"Browse Mode: Outline (Right)"
			],
			[
				"debugger",
				"Preferences: Debugger Settings"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"add re",
				"Package Control: Add Repository"
			],
			[
				"scheme",
				"Color Scheme Editor: Edit current color scheme"
			],
			[
				"outlin",
				"Browse Mode: Outline (Right)"
			],
			[
				"INSTALL",
				"Package Control: Install Package"
			],
			[
				"",
				"Arithmetic"
			],
			[
				"disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: disable",
				"Package Control: Disable Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"adap",
				"Debugger: Install Adapters"
			],
			[
				"install ada",
				"Debugger: Install Adapters"
			],
			[
				"adapter",
				"Debugger: Install Adapters"
			],
			[
				"debug",
				"Debugger: Install Adapters"
			],
			[
				"Package Control: remove",
				"Package Control: Remove Package"
			],
			[
				"debu",
				"Debugger: Install Adapters"
			],
			[
				"instal",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 289.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer"
	],
	"file_history":
	[
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_sockets.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/fs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/console.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/util.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/repl.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_lexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/jslexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeLists.txt",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/check-flags.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/functions.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/js-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-tree-walker.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.c",
		"/home/roman/Projects/plot-cv/quickjs/cutils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/buffer-utils.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/FindQuickJS.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/dom.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/property-enumeration.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-syscallerror.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_treewalker.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/char-utils.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-inspect.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-xml.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/xpath.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/child-process.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/location.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-repeater.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.h",
		"/home/roman/Projects/plot-cv/quickjs/list.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/queue.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stream.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendArray.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/defines.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-blob.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs.c",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.c",
		"/usr/lib/gcc/x86_64-linux-gnu/11/include/stdatomic.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-location.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-stringdecoder.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-gpio.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-path.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-sockets.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/vector.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/ringbuffer.h",
		"/home/roman/Projects/plot-cv/quickjs/quickjs-libc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/debug.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/flexbox-intrinsic-sizing-horiz-1-ref.json",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/mmap-win32.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-mmap.c",
		"/usr/i686-w64-mingw32/include/io.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/token.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/Makefile",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/extract-structs.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/list-exports.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/util.es",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-internal.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lexer.c.orig",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-deep.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/predicate.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/pointer.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/readlink.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-bjson.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.c",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/cmake/QuickJSModule.cmake",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/virtual-properties.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/terminal.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/perf_hooks.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/extendGenerator.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/clexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/bnflexer.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_misc.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_xml.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_stack.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/qjsm",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/stack.js",
		"/usr/include/zlib.h",
		"/home/roman/.config/sublime-text/Packages/User/Themes/Niji.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_mmap.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-predicate.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/lexer/csv.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/events.js",
		"/home/roman/Projects/wasmedge-quickjs/example_js/es6_module_demo/c.",
		"/home/roman/.config/sublime-text/Packages/User/Themes/ES6 Next.tmTheme",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_deep.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/tests/test_path.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/parser.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/process.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-misc.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/quickjs-archive.h",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/socklen_t.js",
		"/home/roman/Projects/plot-cv/quickjs/qjs-modules/lib/tty.js"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roman/Projects/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/qjs-modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,-*/build/*,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js,*.cmake,CMakeLists.txt",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs,*.c,*.h,*.js",
			"/home/roman/Sources/plot-cv/quickjs/modules,*.c,*.h,*.js"
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"path.exists",
			"Inexist",
			"readFileSync",
			"readFG",
			"JS_SetMod",
			"js_value_fwrite",
			"jsm_eval_file",
			"fprintf",
			"js_value",
			"exception",
			"jsm_module_dir",
			"151",
			"//\"",
			"printStatus",
			"$",
			"printStatus",
			"\\.show",
			"repl.show",
			" show\\(",
			"isConstructor",
			"show",
			"directives",
			"export defa",
			"printStatus",
			"historyLoad",
			"std.puts",
			"historyLoad",
			"\\.out",
			"this.out",
			"\\.out",
			"printStatus",
			"fs",
			"this.fs",
			"fail",
			"REPL",
			"new ",
			"async run",
			"async run()",
			"REPL",
			"historyLoad",
			"source",
			"exportObj",
			"getOpt",
			"footer",
			"new Import",
			"footer.push",
			"ProcessFile",
			"depth",
			"ProcessFile",
			"footer.push",
			"exportedNames",
			"globalExports",
			"names =",
			"header",
			"Export",
			"header",
			"header.filter",
			"header.pus",
			"header.push",
			"'impexp'",
			"impexp",
			"ProcessFile",
			"removeImports",
			"} of",
			"ModuleLoader",
			"NormalizePath",
			"ProcessFile",
			"removeImports",
			"from ",
			"buffers\\[",
			"buffers",
			"path.join",
			"ModuleLoader",
			"NormalizePath",
			"ProcessFile",
			"BufferFile",
			"new [EI][a-z]*port",
			"relativePath",
			"relativePath\\(",
			"ImportFile",
			"Inexistent",
			"builtin_compiled",
			"replaceRange",
			"AddImport",
			"function Add",
			"AddExport",
			"ImportFile",
			"AddImport",
			"Add depe",
			"SpreadAndJoin",
			"Dependencies of",
			"Depende",
			"DependencyTree",
			"ProcessFile",
			"Inexistent",
			"'Add",
			"'impexp'",
			"DependencyTree",
			"dependencyTree",
			"Add dep",
			"_json",
			"JS_TAG",
			"\"\\\\\\\\\\\\\\\\\"",
			"\"",
			"\\\\",
			"\\\\[^\\\\]",
			"\\\\\\\\",
			"js_i",
			"->bytecod",
			"->bytecode3",
			"lexer_rule_compile",
			"lexer_rule_match",
			"lre_",
			"buffer_utils_SOURCES",
			"QJSM_EXTRA_SOURCES",
			"fopen",
			"^\\s*dump",
			"LDADD",
			"js_dbuf_init",
			"dbuf_init",
			"jsm_module_search",
			"js_resolve_functions_free",
			"jsm_module_search",
			"jsm_default_module_path",
			"MODULE_PATH",
			"configure_file",
			"QUICKJS_MODULE_PATH",
			"archive_SOURCES"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"//std.puts",
			"fs",
			"\\\\\\\\\\\\\\\\",
			"Text.store",
			"Tokens",
			"tokenModifiers",
			"xml_debug",
			"\\1",
			"xml_debug",
			"WRITABLE_GET_WRITER",
			"WRITABLE_CLOSE",
			"struct stream_reader",
			"readable_cancel",
			"READABLE_CANCEL",
			"readable_unlock",
			"writable_get_writer",
			"writable_\\1lock",
			"READABLE_",
			"writ",
			"FUNC_CLOSE",
			"js_reader_method",
			"js_writer_method",
			"js_stream_method",
			"STREAM_LOCKED",
			"->reader",
			"\"StreamReader",
			"Reader",
			"METHOD_",
			"array",
			"funcs.array",
			"js_resolve_functions",
			"js_resolvefunctions",
			"funcs[1]",
			"funcs[0]",
			"js_resolvingfunctions_free",
			"js_resolvingfunctions_ree",
			"length",
			"Chunk",
			"loc",
			"prevLength",
			"prevOffset",
			"compact(\\1)",
			"js_location_create",
			"lexer_token(",
			"token_lex(",
			"LOCATION_PROP_CHAROFFSET",
			"loc->",
			"\\1_release",
			"token",
			"ALLOC_PTR",
			"ALLOC_BLOCK(p)",
			"ALLOC_BLOCK_SIZE",
			"",
			"const char* str\\1",
			"void* p,",
			"size_t size)",
			"JSRuntime* rt,",
			"JSContext\\* ctx,",
			";",
			" &(((struct alloc_block*)p)[-1]);",
			"add_to_list",
			"",
			"DEFINES_H",
			"int",
			"log",
			"out",
			"array_",
			"[%p]",
			"pthread_self()",
			"js_token_data2(ctx,",
			"js_lexer_data2(ctx,",
			"\\1//console",
			"inspectSymbol",
			"parent",
			"gettersetter",
			"ELEMENT_NODE",
			"parent",
			"attributes",
			"Node.prototype.",
			"\\1static \\2 = \\3;",
			"const raw = Node.raw(this);",
			"\\1.set\\(\\2\\)",
			"\\1.get\\(this\\)",
			"ownerElement.get\\(this\\)",
			"rawNode.get\\(this\\)",
			"inspectSymbol",
			"CSV",
			"\\1//",
			"args->c",
			"args->",
			"\\1//\\2",
			"METHOD_VALUES",
			"pr->",
			"property",
			"size[0]",
			"s->",
			"(sock)->",
			", s,",
			"(sock).",
			", *s,",
			"s->",
			"obj",
			"js_socket_data(",
			"obj",
			"loc",
			"YIELD_",
			"if",
			"\\1//\\2",
			"",
			"\\1//\\2",
			"js_pointer_free_func",
			"BITFIELD_SET",
			"fd",
			"misc.IN_",
			"fd",
			"wd",
			"JSValueConst\\1",
			"s",
			"queue_alloc(",
			"queue_alloc",
			"rpt",
			"js_return_",
			"tmp",
			"repeater_execute",
			"queue_item",
			"linked_item",
			"queue_",
			"rpt"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1471,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"current_file": "/home/roman/Projects/plot-cv/quickjs/qjs-modules/resolve-imports.js",
							"function_name_status_row": 200,
							"outline_rename_mode": false,
							"symkeys":
							[
								[
									507,
									520
								],
								[
									539,
									559
								],
								[
									1099,
									1124
								],
								[
									3970,
									3997
								],
								[
									4626,
									4635
								],
								[
									4724,
									4747
								],
								[
									4806,
									4830
								],
								[
									4971,
									4995
								],
								[
									5312,
									5336
								],
								[
									5712,
									5736
								],
								[
									5922,
									5951
								],
								[
									6227,
									6256
								],
								[
									7792,
									7831
								],
								[
									8307,
									8314
								],
								[
									8377,
									8388
								],
								[
									13175,
									13181
								],
								[
									13207,
									13213
								],
								[
									13231,
									13236
								],
								[
									14420,
									14426
								],
								[
									15520,
									15526
								],
								[
									15544,
									15549
								],
								[
									19809,
									19838
								],
								[
									19988,
									20010
								],
								[
									20073,
									20103
								],
								[
									20170,
									20180
								],
								[
									20235,
									20259
								],
								[
									20320,
									20352
								],
								[
									20418,
									20448
								],
								[
									20501,
									20536
								],
								[
									20675,
									20706
								],
								[
									20984,
									21016
								],
								[
									21191,
									21228
								],
								[
									21312,
									21345
								],
								[
									21408,
									21429
								],
								[
									21535,
									21547
								],
								[
									21566,
									21589
								],
								[
									21722,
									21733
								],
								[
									21762,
									21778
								],
								[
									21810,
									21819
								],
								[
									21848,
									21862
								],
								[
									21894,
									21912
								],
								[
									22144,
									22179
								],
								[
									22965,
									22999
								],
								[
									23083,
									23095
								],
								[
									23541,
									23548
								],
								[
									23567,
									23589
								],
								[
									23961,
									23979
								],
								[
									24121,
									24130
								],
								[
									24158,
									24179
								],
								[
									24420,
									24429
								],
								[
									24474,
									24484
								],
								[
									24615,
									24622
								],
								[
									24737,
									24749
								],
								[
									25006,
									25016
								],
								[
									25130,
									25155
								],
								[
									26931,
									26937
								],
								[
									27673,
									27678
								],
								[
									28263,
									28272
								],
								[
									28325,
									28332
								],
								[
									28883,
									28895
								],
								[
									29008,
									29019
								],
								[
									29136,
									29165
								],
								[
									30680,
									30712
								],
								[
									31117,
									31124
								],
								[
									31168,
									31175
								],
								[
									31203,
									31225
								],
								[
									31955,
									31985
								],
								[
									32301,
									32329
								],
								[
									32382,
									32410
								],
								[
									32521,
									32548
								],
								[
									32675,
									32704
								],
								[
									32822,
									32845
								],
								[
									32985,
									33008
								],
								[
									34005,
									34039
								],
								[
									34106,
									34154
								],
								[
									34200,
									34228
								],
								[
									34548,
									34594
								],
								[
									34872,
									34894
								],
								[
									35355,
									35370
								],
								[
									35456,
									35463
								],
								[
									35553,
									35560
								]
							],
							"symlist":
							[
								"ArgumentError",
								"  constructor(...args)",
								"NormalizePath(p)",
								"FdWriter(fd, name)",
								"  inspect()",
								"ImportIds(seq)",
								"ImpExpType(seq)",
								"ImportType(seq)",
								"ImportFile(seq)",
								"ExportName(seq)",
								"ByteSequence(tokens)",
								"ModuleLoader(module)",
								"  self = function ParentheseBalancer(tok)",
								"  reset()",
								"  get depth()",
								"Export",
								"Export",
								"  ids()",
								"Import",
								"Import",
								"  ids()",
								"AddDep(source, file)",
								"NonWS(tokens)",
								"TokenSequence(tokens)",
								"  toString()",
								"Unquote(lexeme)",
								"LiteralSequence(tokens)",
								"UntilEOL(idx, tokens)",
								"Until(idx, tokens, pred = ",
								"WholeLine(idx, tokens)",
								"Range(file, start, end)",
								"Range.prototype.toString = function()",
								"InRange([start, end], i)",
								"IsRange(obj)",
								"NumericRange",
								"  constructor(start, end)",
								"  get start()",
								"  set start(value)",
								"  get end()",
								"  set end(value)",
								"  static from(range)",
								"  static *holes(ranges, only = false)",
								"  static between([s1, e1], [s2, e2])",
								"NumericRange",
								"FileMap",
								"  constructor(file, buf)",
								"  static empty(file)",
								"  isEmpty()",
								"  static for(file, buf)",
								"  isEmpty()",
								"  toString()",
								"FileMap",
								"  splitAt(pos)",
								"  sliceAt(n)",
								"  replaceRange(range, file)",
								"  dump()",
								"  at(i)",
								"  toArray()",
								"  holes()",
								"  firstChunk()",
								"  lastChunk()",
								"  write(out, depth = 0, serial)",
								"  toString(fn = FileBannerComment)",
								"FileMap",
								"FileMap",
								"\tfunction(depth, opts)",
								"BufferFile(file, buf)",
								"BufferLengths(file)",
								"BufferOffsets(file)",
								"BufferRanges(file)",
								"WriteFile(file, tok)",
								"DumpLexer(lex)",
								"DumpToken(tok)",
								"  stripLeadingDotSlash(n)",
								"SpreadAndJoin(iterator, separator = '')",
								"PrintES6Import(imp)",
								"PrintCJSImport({ type, local, file })",
								"  main(...args)",
								"  write(buf, len)",
								"  puts(s)",
								"  close()"
							],
							"syntax": "Packages/Outline/outline.hidden-tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645878556.88,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		},
		{
			"sheets":
			[
				{
					"buffer": 1,
					"file": "resolve-imports.js",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 39999,
						"regions":
						{
						},
						"selection":
						[
							[
								6845,
								6852
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": "./",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"function_name_status_row": 233,
							"syntax": "Packages/JavaScriptNext - ES6 Syntax/JavaScriptNext.tmLanguage",
							"tab_size": 2,
							"tabs_extra_last_activated": 1645958265.33,
							"tabs_extra_last_activated_sheet_index": 0,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4263.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 42.0
	},
	"layout":
	{
		"cells":
		[
			[
				2,
				0,
				3,
				2
			],
			[
				0,
				0,
				2,
				2
			]
		],
		"cols":
		[
			0.0,
			0.2,
			0.709826317307,
			1.0
		],
		"rows":
		[
			0.0,
			0.5,
			1.0
		]
	},
	"menu_visible": true,
	"output.Debugger":
	{
		"height": 139.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.Protocol":
	{
		"height": 0.0
	},
	"output.Protocol(139700989780224)":
	{
		"height": 0.0
	},
	"output.Protocol(139713493134064)":
	{
		"height": 0.0
	},
	"output.Protocol(139997389436048)":
	{
		"height": 0.0
	},
	"output.Protocol(140020109919472)":
	{
		"height": 0.0
	},
	"output.Protocol(140125752673856)":
	{
		"height": 0.0
	},
	"output.Protocol(140156677514432)":
	{
		"height": 0.0
	},
	"output.Protocol(140161693082192)":
	{
		"height": 0.0
	},
	"output.Protocol(140190208797904)":
	{
		"height": 0.0
	},
	"output.Protocol(140502873537696)":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 120.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 108.0
	},
	"pinned_build_system": "",
	"project": "modules.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": false,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"qjsm",
				"qjsm.c"
			],
			[
				"test_sock",
				"tests/test_sockets.js"
			],
			[
				"util.js",
				"lib/util.js"
			],
			[
				"console.j",
				"lib/console.js"
			],
			[
				"repl",
				"lib/repl.js"
			],
			[
				"resol",
				"resolve-imports.js"
			],
			[
				"utils.c",
				"utils.c"
			],
			[
				"repl.js",
				"lib/repl.js"
			],
			[
				"TEST_LEXER",
				"tests/test_lexer.js"
			],
			[
				"QJSM.C",
				"qjsm.c"
			],
			[
				"char-ut",
				"char-utils.h"
			],
			[
				"CMake",
				"CMakeLists.txt"
			],
			[
				"path.c",
				"path.c"
			],
			[
				"buff",
				"buffer-utils.h"
			],
			[
				"test_dom",
				"tests/test_dom.js"
			],
			[
				"quickjs-xml",
				"quickjs-xml.c"
			],
			[
				"dom.js",
				"lib/dom.js"
			],
			[
				"location",
				"location.c"
			],
			[
				"quickjs-child",
				"quickjs-child-process.c"
			],
			[
				"cmakeli",
				"CMakeLists.txt"
			],
			[
				"CMakeLi",
				"CMakeLists.txt"
			],
			[
				"xpath",
				"lib/xpath.js"
			],
			[
				"js-u",
				"js-utils.h"
			],
			[
				"defines.h",
				"defines.h"
			],
			[
				"queue.c",
				"queue.c"
			],
			[
				"extend",
				"lib/extendArray.js"
			],
			[
				"resolve-im",
				"resolve-imports.js"
			],
			[
				"quickjs-sockets",
				"quickjs-sockets.c"
			],
			[
				"lexer",
				"quickjs-lexer.c"
			],
			[
				"buffer-ut",
				"buffer-utils.h"
			],
			[
				"ringbuf",
				"ringbuffer.h"
			],
			[
				"utils.h",
				"utils.h"
			],
			[
				"debug.h",
				"debug.h"
			],
			[
				"debug.c",
				"debug.c"
			],
			[
				"quickjs-lexer.c",
				"quickjs-lexer.c"
			],
			[
				"quickjs-loc",
				"quickjs-location.c"
			],
			[
				"xml.c",
				"quickjs-xml.c"
			],
			[
				"test-dia",
				"build/android64/CMakeFiles/qjs-predicate-static.dir/quickjs-predicate.c.o.d"
			],
			[
				"qjsm.c",
				"qjsm.c"
			],
			[
				"util.",
				"lib/util.js"
			],
			[
				"quickjs-pa",
				"quickjs-path.c"
			],
			[
				"util",
				"lib/util.js"
			],
			[
				"resolve",
				"resolve-imports.js"
			],
			[
				"quickjs-mis",
				"quickjs-misc.c"
			],
			[
				"location.c",
				"quickjs-location.c"
			],
			[
				"quickjs-in",
				"quickjs-inspect.c"
			],
			[
				"extra",
				"extract-structs.js"
			],
			[
				"-inspe",
				"quickjs-inspect.c"
			],
			[
				"proper",
				"property-enumeration.h"
			],
			[
				"vector",
				"vector.h"
			],
			[
				"dom.j",
				"lib/dom.js"
			],
			[
				"res",
				"resolve-imports.js"
			],
			[
				"lexre",
				"lexer.c"
			],
			[
				"lexer.c",
				"quickjs-lexer.c"
			],
			[
				"pointer",
				"pointer.c"
			],
			[
				"vector.h",
				"vector.h"
			],
			[
				"lexer.h",
				"lexer.h"
			],
			[
				"quickjs.h",
				"~/Projects/plot-cv/quickjs/quickjs.h"
			],
			[
				"sockets",
				"quickjs-sockets.c"
			],
			[
				"archive",
				"quickjs-archive.c"
			],
			[
				"pointer.c",
				"quickjs-pointer.c"
			],
			[
				"spect.c",
				"quickjs-inspect.c"
			],
			[
				"blob.c",
				"quickjs-blob.c"
			],
			[
				"repea",
				"quickjs-repeater.c"
			],
			[
				"loca",
				"quickjs-location.c"
			],
			[
				"bjson.c",
				"quickjs-bjson.c"
			],
			[
				"pred",
				"predicate.c"
			],
			[
				"char-u",
				"char-utils.h"
			],
			[
				"buffer",
				"buffer-utils.h"
			],
			[
				"predi",
				"predicate.h"
			],
			[
				"virtua",
				"virtual-properties.c"
			],
			[
				"pointre",
				"pointer.c"
			],
			[
				"deep.c",
				"quickjs-deep.c"
			],
			[
				"child-",
				"child-process.c"
			],
			[
				"child-pro",
				"quickjs-child-process.c"
			],
			[
				"gpio.c",
				"quickjs-gpio.c"
			],
			[
				"buffer-u",
				"buffer-utils.c"
			],
			[
				"ointer.h",
				"pointer.h"
			],
			[
				"defin",
				"defines.h"
			],
			[
				"defines",
				"defines.h"
			],
			[
				"cutils.h",
				"char-utils.h"
			],
			[
				"debu",
				"debug.h"
			],
			[
				"test_le",
				"tests/test_lexer.js"
			],
			[
				"test_lexer",
				"tests/test_lexer.js"
			],
			[
				"quickjs-pat",
				"quickjs-path.c"
			],
			[
				"test",
				"tests/test_stack.js"
			],
			[
				"jsutils",
				"CMakeFiles/qjs-syscallerror-static.dir/utils.c.o.d"
			],
			[
				"jslexe",
				"lib/jslexer.js"
			],
			[
				"quickjs-lexe",
				"quickjs-lexer.c"
			],
			[
				"inspect.c",
				"quickjs-inspect.c"
			],
			[
				"fs.js",
				"lib/fs.js"
			],
			[
				"quickjs-pre",
				"quickjs-predicate.c"
			],
			[
				"xpath.j",
				"lib/xpath.js"
			],
			[
				"predicate.h",
				"predicate.h"
			],
			[
				"quickjs-mi",
				"quickjs-misc.c"
			],
			[
				"sockets.c",
				"quickjs-sockets.c"
			],
			[
				"list.h",
				"~/Projects/plot-cv/quickjs/list.h"
			],
			[
				"cmakelist",
				"CMakeLists.txt"
			],
			[
				"queue",
				"queue.c"
			],
			[
				"test_xml",
				"tests/test_xml.js"
			],
			[
				"quickjs-ins",
				"quickjs-inspect.c"
			],
			[
				"test_wa",
				"tests/test_watch.js"
			],
			[
				"cmakelists",
				"CMakeLists.txt"
			],
			[
				"quickjs-socket",
				"quickjs-sockets.c"
			],
			[
				"test_lex",
				"tests/test_lexer.js"
			],
			[
				"test_misc",
				"tests/test_misc.js"
			],
			[
				"test_so",
				"tests/test_sockets.js"
			],
			[
				"tree-wa",
				"quickjs-tree-walker.c"
			],
			[
				"quick",
				"quickjs-xml.c"
			],
			[
				"misc.c",
				"quickjs-misc.c"
			],
			[
				"cmakelis",
				"CMakeLists.txt"
			],
			[
				"",
				"tests/test_xml.js"
			],
			[
				"clang-fo",
				".clang-format"
			],
			[
				"doxy",
				"Doxyfile"
			],
			[
				"Doxyfile",
				"Doxyfile"
			],
			[
				"interna",
				"quickjs-internal.h"
			],
			[
				"console.js",
				"lib/console.js"
			],
			[
				"quickjs-lex",
				"quickjs-lexer.c"
			],
			[
				"exten",
				"lib/extendArray.js"
			],
			[
				"console",
				"lib/console.js"
			],
			[
				"child",
				"child-process.c"
			],
			[
				"qsort_r",
				"qsort_r.c"
			],
			[
				"quickjs-misc",
				"quickjs-misc.c"
			],
			[
				"quicksj-misc",
				"quickjs-misc.c"
			],
			[
				"process.js",
				"lib/process.js"
			],
			[
				"quickjs-mm",
				"quickjs-mmap.c"
			],
			[
				"quickjs-m",
				"quickjs-misc.c"
			],
			[
				"redicate.c",
				"predicate.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/plot-cv/plot-cv.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 370.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"WS"
			]
		],
		"width": 970.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 294.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
